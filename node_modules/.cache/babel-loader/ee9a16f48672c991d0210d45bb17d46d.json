{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Mat4, Vec3, Vec4, EPSILON } from '../mol-math/linear-algebra';\nimport { Viewport, cameraProject, cameraUnproject } from './camera/util';\nimport { CameraTransitionManager } from './camera/transition';\nimport { BehaviorSubject } from 'rxjs';\nexport { Camera };\nvar tmpPos1 = Vec3();\nvar tmpPos2 = Vec3();\nvar tmpClip = Vec4();\n\nvar Camera =\n/** @class */\nfunction () {\n  function Camera(state, viewport, props) {\n    if (viewport === void 0) {\n      viewport = Viewport.create(0, 0, 128, 128);\n    }\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.view = Mat4.identity();\n    this.projection = Mat4.identity();\n    this.projectionView = Mat4.identity();\n    this.inverseProjectionView = Mat4.identity();\n    this.state = Camera.createDefaultSnapshot();\n    this.viewOffset = Camera.ViewOffset();\n    this.near = 1;\n    this.far = 10000;\n    this.fogNear = 5000;\n    this.fogFar = 10000;\n    this.zoom = 1;\n    this.transition = new CameraTransitionManager(this);\n    this.stateChanged = new BehaviorSubject(this.state);\n    this.prevProjection = Mat4.identity();\n    this.prevView = Mat4.identity();\n    this.deltaDirection = Vec3();\n    this.newPosition = Vec3();\n    this.viewport = viewport;\n    this.pixelScale = props.pixelScale || 1;\n    Camera.copySnapshot(this.state, state);\n  }\n\n  Object.defineProperty(Camera.prototype, \"pixelRatio\", {\n    get: function () {\n      var dpr = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n      return dpr * this.pixelScale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Camera.prototype, \"position\", {\n    get: function () {\n      return this.state.position;\n    },\n    set: function (v) {\n      Vec3.copy(this.state.position, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Camera.prototype, \"up\", {\n    get: function () {\n      return this.state.up;\n    },\n    set: function (v) {\n      Vec3.copy(this.state.up, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Camera.prototype, \"target\", {\n    get: function () {\n      return this.state.target;\n    },\n    set: function (v) {\n      Vec3.copy(this.state.target, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Camera.prototype.update = function () {\n    var snapshot = this.state;\n\n    if (snapshot.radiusMax === 0) {\n      return false;\n    }\n\n    var height = 2 * Math.tan(snapshot.fov / 2) * Vec3.distance(snapshot.position, snapshot.target);\n    this.zoom = this.viewport.height / height;\n    updateClip(this);\n\n    switch (this.state.mode) {\n      case 'orthographic':\n        updateOrtho(this);\n        break;\n\n      case 'perspective':\n        updatePers(this);\n        break;\n\n      default:\n        throw new Error('unknown camera mode');\n    }\n\n    var changed = !Mat4.areEqual(this.projection, this.prevProjection, EPSILON) || !Mat4.areEqual(this.view, this.prevView, EPSILON);\n\n    if (changed) {\n      Mat4.mul(this.projectionView, this.projection, this.view);\n\n      if (!Mat4.tryInvert(this.inverseProjectionView, this.projectionView)) {\n        Mat4.copy(this.view, this.prevView);\n        Mat4.copy(this.projection, this.prevProjection);\n        Mat4.mul(this.projectionView, this.projection, this.view);\n        return false;\n      }\n\n      Mat4.copy(this.prevView, this.view);\n      Mat4.copy(this.prevProjection, this.projection);\n    }\n\n    return changed;\n  };\n\n  Camera.prototype.setState = function (snapshot, durationMs) {\n    this.transition.apply(snapshot, durationMs);\n    this.stateChanged.next(snapshot);\n  };\n\n  Camera.prototype.getSnapshot = function () {\n    return Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\n  };\n\n  Camera.prototype.getTargetDistance = function (radius) {\n    return Camera.targetDistance(radius, this.state.fov, this.viewport.width, this.viewport.height);\n  };\n\n  Camera.prototype.getFocus = function (target, radius, up, dir) {\n    var r = Math.max(radius, 0.01);\n    var targetDistance = this.getTargetDistance(r);\n    Vec3.sub(this.deltaDirection, this.target, this.position);\n    if (dir) Vec3.matchDirection(this.deltaDirection, dir, this.deltaDirection);\n    Vec3.setMagnitude(this.deltaDirection, this.deltaDirection, targetDistance);\n    Vec3.sub(this.newPosition, target, this.deltaDirection);\n    var state = Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\n    state.target = Vec3.clone(target);\n    state.radius = r;\n    state.position = Vec3.clone(this.newPosition);\n    if (up) Vec3.matchDirection(state.up, up, state.up);\n    return state;\n  };\n\n  Camera.prototype.getInvariantFocus = function (target, radius, up, dir) {\n    var r = Math.max(radius, 0.01);\n    var targetDistance = this.getTargetDistance(r);\n    Vec3.copy(this.deltaDirection, dir);\n    Vec3.setMagnitude(this.deltaDirection, this.deltaDirection, targetDistance);\n    Vec3.sub(this.newPosition, target, this.deltaDirection);\n    var state = Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\n    state.target = Vec3.clone(target);\n    state.radius = r;\n    state.position = Vec3.clone(this.newPosition);\n    Vec3.copy(state.up, up);\n    return state;\n  };\n\n  Camera.prototype.focus = function (target, radius, durationMs, up, dir) {\n    if (radius > 0) {\n      this.setState(this.getFocus(target, radius, up, dir), durationMs);\n    }\n  };\n  /** Transform point into 2D window coordinates. */\n\n\n  Camera.prototype.project = function (out, point) {\n    return cameraProject(out, point, this.viewport, this.projectionView);\n  };\n  /**\r\n   * Transform point from screen space to 3D coordinates.\r\n   * The point must have `x` and `y` set to 2D window coordinates\r\n   * and `z` between 0 (near) and 1 (far); the optional `w` is not used.\r\n   */\n\n\n  Camera.prototype.unproject = function (out, point) {\n    return cameraUnproject(out, point, this.viewport, this.inverseProjectionView);\n  };\n  /** World space pixel size at given `point` */\n\n\n  Camera.prototype.getPixelSize = function (point) {\n    // project -> unproject of `point` does not exactly return the same\n    // to get a sufficiently accurate measure we unproject the original\n    // clip position in addition to the one shifted bey one pixel\n    this.project(tmpClip, point);\n    this.unproject(tmpPos1, tmpClip);\n    tmpClip[0] += 1;\n    this.unproject(tmpPos2, tmpClip);\n    return Vec3.distance(tmpPos1, tmpPos2);\n  };\n\n  return Camera;\n}();\n\n(function (Camera) {\n  function ViewOffset() {\n    return {\n      enabled: false,\n      fullWidth: 1,\n      fullHeight: 1,\n      offsetX: 0,\n      offsetY: 0,\n      width: 1,\n      height: 1\n    };\n  }\n\n  Camera.ViewOffset = ViewOffset;\n\n  function setViewOffset(out, fullWidth, fullHeight, offsetX, offsetY, width, height) {\n    out.fullWidth = fullWidth;\n    out.fullHeight = fullHeight;\n    out.offsetX = offsetX;\n    out.offsetY = offsetY;\n    out.width = width;\n    out.height = height;\n  }\n\n  Camera.setViewOffset = setViewOffset;\n\n  function copyViewOffset(out, view) {\n    out.enabled = view.enabled;\n    out.fullWidth = view.fullWidth;\n    out.fullHeight = view.fullHeight;\n    out.offsetX = view.offsetX;\n    out.offsetY = view.offsetY;\n    out.width = view.width;\n    out.height = view.height;\n  }\n\n  Camera.copyViewOffset = copyViewOffset;\n\n  function targetDistance(radius, fov, width, height) {\n    var r = Math.max(radius, 0.01);\n    var aspect = width / height;\n    var aspectFactor = height < width ? 1 : aspect;\n    return Math.abs(r / aspectFactor / Math.sin(fov / 2));\n  }\n\n  Camera.targetDistance = targetDistance;\n\n  function createDefaultSnapshot() {\n    return {\n      mode: 'perspective',\n      fov: Math.PI / 4,\n      position: Vec3.create(0, 0, 100),\n      up: Vec3.create(0, 1, 0),\n      target: Vec3.create(0, 0, 0),\n      radius: 0,\n      radiusMax: 10,\n      fog: 50,\n      clipFar: true\n    };\n  }\n\n  Camera.createDefaultSnapshot = createDefaultSnapshot;\n\n  function copySnapshot(out, source) {\n    if (!source) return out;\n    if (typeof source.mode !== 'undefined') out.mode = source.mode;\n    if (typeof source.fov !== 'undefined') out.fov = source.fov;\n    if (typeof source.position !== 'undefined') Vec3.copy(out.position, source.position);\n    if (typeof source.up !== 'undefined') Vec3.copy(out.up, source.up);\n    if (typeof source.target !== 'undefined') Vec3.copy(out.target, source.target);\n    if (typeof source.radius !== 'undefined') out.radius = source.radius;\n    if (typeof source.radiusMax !== 'undefined') out.radiusMax = source.radiusMax;\n    if (typeof source.fog !== 'undefined') out.fog = source.fog;\n    if (typeof source.clipFar !== 'undefined') out.clipFar = source.clipFar;\n    return out;\n  }\n\n  Camera.copySnapshot = copySnapshot;\n\n  function areSnapshotsEqual(a, b) {\n    return a.mode === b.mode && a.fov === b.fov && a.radius === b.radius && a.radiusMax === b.radiusMax && a.fog === b.fog && a.clipFar === b.clipFar && Vec3.exactEquals(a.position, b.position) && Vec3.exactEquals(a.up, b.up) && Vec3.exactEquals(a.target, b.target);\n  }\n\n  Camera.areSnapshotsEqual = areSnapshotsEqual;\n})(Camera || (Camera = {}));\n\nfunction updateOrtho(camera) {\n  var viewport = camera.viewport,\n      zoom = camera.zoom,\n      near = camera.near,\n      far = camera.far,\n      viewOffset = camera.viewOffset;\n  var fullLeft = -viewport.width / 2;\n  var fullRight = viewport.width / 2;\n  var fullTop = viewport.height / 2;\n  var fullBottom = -viewport.height / 2;\n  var dx = (fullRight - fullLeft) / (2 * zoom);\n  var dy = (fullTop - fullBottom) / (2 * zoom);\n  var cx = (fullRight + fullLeft) / 2;\n  var cy = (fullTop + fullBottom) / 2;\n  var left = cx - dx;\n  var right = cx + dx;\n  var top = cy + dy;\n  var bottom = cy - dy;\n\n  if (viewOffset.enabled) {\n    var zoomW = zoom / (viewOffset.width / viewOffset.fullWidth);\n    var zoomH = zoom / (viewOffset.height / viewOffset.fullHeight);\n    var scaleW = (fullRight - fullLeft) / viewOffset.width;\n    var scaleH = (fullTop - fullBottom) / viewOffset.height;\n    left += scaleW * (viewOffset.offsetX / zoomW);\n    right = left + scaleW * (viewOffset.width / zoomW);\n    top -= scaleH * (viewOffset.offsetY / zoomH);\n    bottom = top - scaleH * (viewOffset.height / zoomH);\n  } // build projection matrix\n\n\n  Mat4.ortho(camera.projection, left, right, top, bottom, near, far); // build view matrix\n\n  Mat4.lookAt(camera.view, camera.position, camera.target, camera.up);\n}\n\nfunction updatePers(camera) {\n  var aspect = camera.viewport.width / camera.viewport.height;\n  var near = camera.near,\n      far = camera.far,\n      viewOffset = camera.viewOffset;\n  var top = near * Math.tan(0.5 * camera.state.fov);\n  var height = 2 * top;\n  var width = aspect * height;\n  var left = -0.5 * width;\n\n  if (viewOffset.enabled) {\n    left += viewOffset.offsetX * width / viewOffset.fullWidth;\n    top -= viewOffset.offsetY * height / viewOffset.fullHeight;\n    width *= viewOffset.width / viewOffset.fullWidth;\n    height *= viewOffset.height / viewOffset.fullHeight;\n  } // build projection matrix\n\n\n  Mat4.perspective(camera.projection, left, left + width, top, top - height, near, far); // build view matrix\n\n  Mat4.lookAt(camera.view, camera.position, camera.target, camera.up);\n}\n\nfunction updateClip(camera) {\n  var _a = camera.state,\n      radius = _a.radius,\n      radiusMax = _a.radiusMax,\n      mode = _a.mode,\n      fog = _a.fog,\n      clipFar = _a.clipFar;\n  if (radius < 0.01) radius = 0.01;\n  var normalizedFar = clipFar ? radius : radiusMax;\n  var cameraDistance = Vec3.distance(camera.position, camera.target);\n  var near = cameraDistance - radius;\n  var far = cameraDistance + normalizedFar;\n  var fogNearFactor = -(50 - fog) / 50;\n  var fogNear = cameraDistance - normalizedFar * fogNearFactor;\n  var fogFar = far;\n\n  if (mode === 'perspective') {\n    // set at least to 5 to avoid slow sphere impostor rendering\n    near = Math.max(Math.min(radiusMax, 5), near);\n    far = Math.max(5, far);\n  } else {\n    // not too close to 0 as it causes issues with outline rendering\n    near = Math.max(Math.min(radiusMax, 5), near);\n    far = Math.max(5, far);\n  }\n\n  if (near === far) {\n    // make sure near and far are not identical to avoid Infinity in the projection matrix\n    far = near + 0.01;\n  }\n\n  camera.near = near;\n  camera.far = 2 * far; // avoid precision issues distingushing far objects from background\n\n  camera.fogNear = fogNear;\n  camera.fogFar = fogFar;\n}","map":{"version":3,"sources":["../../src/mol-canvas3d/camera.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Mat4, Vec3, Vec4, EPSILON } from '../mol-math/linear-algebra';\r\nimport { Viewport, cameraProject, cameraUnproject } from './camera/util';\r\nimport { CameraTransitionManager } from './camera/transition';\r\nimport { BehaviorSubject } from 'rxjs';\r\nexport { Camera };\r\nvar tmpPos1 = Vec3();\r\nvar tmpPos2 = Vec3();\r\nvar tmpClip = Vec4();\r\nvar Camera = /** @class */ (function () {\r\n    function Camera(state, viewport, props) {\r\n        if (viewport === void 0) { viewport = Viewport.create(0, 0, 128, 128); }\r\n        if (props === void 0) { props = {}; }\r\n        this.view = Mat4.identity();\r\n        this.projection = Mat4.identity();\r\n        this.projectionView = Mat4.identity();\r\n        this.inverseProjectionView = Mat4.identity();\r\n        this.state = Camera.createDefaultSnapshot();\r\n        this.viewOffset = Camera.ViewOffset();\r\n        this.near = 1;\r\n        this.far = 10000;\r\n        this.fogNear = 5000;\r\n        this.fogFar = 10000;\r\n        this.zoom = 1;\r\n        this.transition = new CameraTransitionManager(this);\r\n        this.stateChanged = new BehaviorSubject(this.state);\r\n        this.prevProjection = Mat4.identity();\r\n        this.prevView = Mat4.identity();\r\n        this.deltaDirection = Vec3();\r\n        this.newPosition = Vec3();\r\n        this.viewport = viewport;\r\n        this.pixelScale = props.pixelScale || 1;\r\n        Camera.copySnapshot(this.state, state);\r\n    }\r\n    Object.defineProperty(Camera.prototype, \"pixelRatio\", {\r\n        get: function () {\r\n            var dpr = (typeof window !== 'undefined') ? window.devicePixelRatio : 1;\r\n            return dpr * this.pixelScale;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Camera.prototype, \"position\", {\r\n        get: function () { return this.state.position; },\r\n        set: function (v) { Vec3.copy(this.state.position, v); },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Camera.prototype, \"up\", {\r\n        get: function () { return this.state.up; },\r\n        set: function (v) { Vec3.copy(this.state.up, v); },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Camera.prototype, \"target\", {\r\n        get: function () { return this.state.target; },\r\n        set: function (v) { Vec3.copy(this.state.target, v); },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Camera.prototype.update = function () {\r\n        var snapshot = this.state;\r\n        if (snapshot.radiusMax === 0) {\r\n            return false;\r\n        }\r\n        var height = 2 * Math.tan(snapshot.fov / 2) * Vec3.distance(snapshot.position, snapshot.target);\r\n        this.zoom = this.viewport.height / height;\r\n        updateClip(this);\r\n        switch (this.state.mode) {\r\n            case 'orthographic':\r\n                updateOrtho(this);\r\n                break;\r\n            case 'perspective':\r\n                updatePers(this);\r\n                break;\r\n            default: throw new Error('unknown camera mode');\r\n        }\r\n        var changed = !Mat4.areEqual(this.projection, this.prevProjection, EPSILON) || !Mat4.areEqual(this.view, this.prevView, EPSILON);\r\n        if (changed) {\r\n            Mat4.mul(this.projectionView, this.projection, this.view);\r\n            if (!Mat4.tryInvert(this.inverseProjectionView, this.projectionView)) {\r\n                Mat4.copy(this.view, this.prevView);\r\n                Mat4.copy(this.projection, this.prevProjection);\r\n                Mat4.mul(this.projectionView, this.projection, this.view);\r\n                return false;\r\n            }\r\n            Mat4.copy(this.prevView, this.view);\r\n            Mat4.copy(this.prevProjection, this.projection);\r\n        }\r\n        return changed;\r\n    };\r\n    Camera.prototype.setState = function (snapshot, durationMs) {\r\n        this.transition.apply(snapshot, durationMs);\r\n        this.stateChanged.next(snapshot);\r\n    };\r\n    Camera.prototype.getSnapshot = function () {\r\n        return Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\r\n    };\r\n    Camera.prototype.getTargetDistance = function (radius) {\r\n        return Camera.targetDistance(radius, this.state.fov, this.viewport.width, this.viewport.height);\r\n    };\r\n    Camera.prototype.getFocus = function (target, radius, up, dir) {\r\n        var r = Math.max(radius, 0.01);\r\n        var targetDistance = this.getTargetDistance(r);\r\n        Vec3.sub(this.deltaDirection, this.target, this.position);\r\n        if (dir)\r\n            Vec3.matchDirection(this.deltaDirection, dir, this.deltaDirection);\r\n        Vec3.setMagnitude(this.deltaDirection, this.deltaDirection, targetDistance);\r\n        Vec3.sub(this.newPosition, target, this.deltaDirection);\r\n        var state = Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\r\n        state.target = Vec3.clone(target);\r\n        state.radius = r;\r\n        state.position = Vec3.clone(this.newPosition);\r\n        if (up)\r\n            Vec3.matchDirection(state.up, up, state.up);\r\n        return state;\r\n    };\r\n    Camera.prototype.getInvariantFocus = function (target, radius, up, dir) {\r\n        var r = Math.max(radius, 0.01);\r\n        var targetDistance = this.getTargetDistance(r);\r\n        Vec3.copy(this.deltaDirection, dir);\r\n        Vec3.setMagnitude(this.deltaDirection, this.deltaDirection, targetDistance);\r\n        Vec3.sub(this.newPosition, target, this.deltaDirection);\r\n        var state = Camera.copySnapshot(Camera.createDefaultSnapshot(), this.state);\r\n        state.target = Vec3.clone(target);\r\n        state.radius = r;\r\n        state.position = Vec3.clone(this.newPosition);\r\n        Vec3.copy(state.up, up);\r\n        return state;\r\n    };\r\n    Camera.prototype.focus = function (target, radius, durationMs, up, dir) {\r\n        if (radius > 0) {\r\n            this.setState(this.getFocus(target, radius, up, dir), durationMs);\r\n        }\r\n    };\r\n    /** Transform point into 2D window coordinates. */\r\n    Camera.prototype.project = function (out, point) {\r\n        return cameraProject(out, point, this.viewport, this.projectionView);\r\n    };\r\n    /**\r\n     * Transform point from screen space to 3D coordinates.\r\n     * The point must have `x` and `y` set to 2D window coordinates\r\n     * and `z` between 0 (near) and 1 (far); the optional `w` is not used.\r\n     */\r\n    Camera.prototype.unproject = function (out, point) {\r\n        return cameraUnproject(out, point, this.viewport, this.inverseProjectionView);\r\n    };\r\n    /** World space pixel size at given `point` */\r\n    Camera.prototype.getPixelSize = function (point) {\r\n        // project -> unproject of `point` does not exactly return the same\r\n        // to get a sufficiently accurate measure we unproject the original\r\n        // clip position in addition to the one shifted bey one pixel\r\n        this.project(tmpClip, point);\r\n        this.unproject(tmpPos1, tmpClip);\r\n        tmpClip[0] += 1;\r\n        this.unproject(tmpPos2, tmpClip);\r\n        return Vec3.distance(tmpPos1, tmpPos2);\r\n    };\r\n    return Camera;\r\n}());\r\n(function (Camera) {\r\n    function ViewOffset() {\r\n        return {\r\n            enabled: false,\r\n            fullWidth: 1, fullHeight: 1,\r\n            offsetX: 0, offsetY: 0,\r\n            width: 1, height: 1\r\n        };\r\n    }\r\n    Camera.ViewOffset = ViewOffset;\r\n    function setViewOffset(out, fullWidth, fullHeight, offsetX, offsetY, width, height) {\r\n        out.fullWidth = fullWidth;\r\n        out.fullHeight = fullHeight;\r\n        out.offsetX = offsetX;\r\n        out.offsetY = offsetY;\r\n        out.width = width;\r\n        out.height = height;\r\n    }\r\n    Camera.setViewOffset = setViewOffset;\r\n    function copyViewOffset(out, view) {\r\n        out.enabled = view.enabled;\r\n        out.fullWidth = view.fullWidth;\r\n        out.fullHeight = view.fullHeight;\r\n        out.offsetX = view.offsetX;\r\n        out.offsetY = view.offsetY;\r\n        out.width = view.width;\r\n        out.height = view.height;\r\n    }\r\n    Camera.copyViewOffset = copyViewOffset;\r\n    function targetDistance(radius, fov, width, height) {\r\n        var r = Math.max(radius, 0.01);\r\n        var aspect = width / height;\r\n        var aspectFactor = (height < width ? 1 : aspect);\r\n        return Math.abs((r / aspectFactor) / Math.sin(fov / 2));\r\n    }\r\n    Camera.targetDistance = targetDistance;\r\n    function createDefaultSnapshot() {\r\n        return {\r\n            mode: 'perspective',\r\n            fov: Math.PI / 4,\r\n            position: Vec3.create(0, 0, 100),\r\n            up: Vec3.create(0, 1, 0),\r\n            target: Vec3.create(0, 0, 0),\r\n            radius: 0,\r\n            radiusMax: 10,\r\n            fog: 50,\r\n            clipFar: true\r\n        };\r\n    }\r\n    Camera.createDefaultSnapshot = createDefaultSnapshot;\r\n    function copySnapshot(out, source) {\r\n        if (!source)\r\n            return out;\r\n        if (typeof source.mode !== 'undefined')\r\n            out.mode = source.mode;\r\n        if (typeof source.fov !== 'undefined')\r\n            out.fov = source.fov;\r\n        if (typeof source.position !== 'undefined')\r\n            Vec3.copy(out.position, source.position);\r\n        if (typeof source.up !== 'undefined')\r\n            Vec3.copy(out.up, source.up);\r\n        if (typeof source.target !== 'undefined')\r\n            Vec3.copy(out.target, source.target);\r\n        if (typeof source.radius !== 'undefined')\r\n            out.radius = source.radius;\r\n        if (typeof source.radiusMax !== 'undefined')\r\n            out.radiusMax = source.radiusMax;\r\n        if (typeof source.fog !== 'undefined')\r\n            out.fog = source.fog;\r\n        if (typeof source.clipFar !== 'undefined')\r\n            out.clipFar = source.clipFar;\r\n        return out;\r\n    }\r\n    Camera.copySnapshot = copySnapshot;\r\n    function areSnapshotsEqual(a, b) {\r\n        return a.mode === b.mode\r\n            && a.fov === b.fov\r\n            && a.radius === b.radius\r\n            && a.radiusMax === b.radiusMax\r\n            && a.fog === b.fog\r\n            && a.clipFar === b.clipFar\r\n            && Vec3.exactEquals(a.position, b.position)\r\n            && Vec3.exactEquals(a.up, b.up)\r\n            && Vec3.exactEquals(a.target, b.target);\r\n    }\r\n    Camera.areSnapshotsEqual = areSnapshotsEqual;\r\n})(Camera || (Camera = {}));\r\nfunction updateOrtho(camera) {\r\n    var viewport = camera.viewport, zoom = camera.zoom, near = camera.near, far = camera.far, viewOffset = camera.viewOffset;\r\n    var fullLeft = -viewport.width / 2;\r\n    var fullRight = viewport.width / 2;\r\n    var fullTop = viewport.height / 2;\r\n    var fullBottom = -viewport.height / 2;\r\n    var dx = (fullRight - fullLeft) / (2 * zoom);\r\n    var dy = (fullTop - fullBottom) / (2 * zoom);\r\n    var cx = (fullRight + fullLeft) / 2;\r\n    var cy = (fullTop + fullBottom) / 2;\r\n    var left = cx - dx;\r\n    var right = cx + dx;\r\n    var top = cy + dy;\r\n    var bottom = cy - dy;\r\n    if (viewOffset.enabled) {\r\n        var zoomW = zoom / (viewOffset.width / viewOffset.fullWidth);\r\n        var zoomH = zoom / (viewOffset.height / viewOffset.fullHeight);\r\n        var scaleW = (fullRight - fullLeft) / viewOffset.width;\r\n        var scaleH = (fullTop - fullBottom) / viewOffset.height;\r\n        left += scaleW * (viewOffset.offsetX / zoomW);\r\n        right = left + scaleW * (viewOffset.width / zoomW);\r\n        top -= scaleH * (viewOffset.offsetY / zoomH);\r\n        bottom = top - scaleH * (viewOffset.height / zoomH);\r\n    }\r\n    // build projection matrix\r\n    Mat4.ortho(camera.projection, left, right, top, bottom, near, far);\r\n    // build view matrix\r\n    Mat4.lookAt(camera.view, camera.position, camera.target, camera.up);\r\n}\r\nfunction updatePers(camera) {\r\n    var aspect = camera.viewport.width / camera.viewport.height;\r\n    var near = camera.near, far = camera.far, viewOffset = camera.viewOffset;\r\n    var top = near * Math.tan(0.5 * camera.state.fov);\r\n    var height = 2 * top;\r\n    var width = aspect * height;\r\n    var left = -0.5 * width;\r\n    if (viewOffset.enabled) {\r\n        left += viewOffset.offsetX * width / viewOffset.fullWidth;\r\n        top -= viewOffset.offsetY * height / viewOffset.fullHeight;\r\n        width *= viewOffset.width / viewOffset.fullWidth;\r\n        height *= viewOffset.height / viewOffset.fullHeight;\r\n    }\r\n    // build projection matrix\r\n    Mat4.perspective(camera.projection, left, left + width, top, top - height, near, far);\r\n    // build view matrix\r\n    Mat4.lookAt(camera.view, camera.position, camera.target, camera.up);\r\n}\r\nfunction updateClip(camera) {\r\n    var _a = camera.state, radius = _a.radius, radiusMax = _a.radiusMax, mode = _a.mode, fog = _a.fog, clipFar = _a.clipFar;\r\n    if (radius < 0.01)\r\n        radius = 0.01;\r\n    var normalizedFar = clipFar ? radius : radiusMax;\r\n    var cameraDistance = Vec3.distance(camera.position, camera.target);\r\n    var near = cameraDistance - radius;\r\n    var far = cameraDistance + normalizedFar;\r\n    var fogNearFactor = -(50 - fog) / 50;\r\n    var fogNear = cameraDistance - (normalizedFar * fogNearFactor);\r\n    var fogFar = far;\r\n    if (mode === 'perspective') {\r\n        // set at least to 5 to avoid slow sphere impostor rendering\r\n        near = Math.max(Math.min(radiusMax, 5), near);\r\n        far = Math.max(5, far);\r\n    }\r\n    else {\r\n        // not too close to 0 as it causes issues with outline rendering\r\n        near = Math.max(Math.min(radiusMax, 5), near);\r\n        far = Math.max(5, far);\r\n    }\r\n    if (near === far) {\r\n        // make sure near and far are not identical to avoid Infinity in the projection matrix\r\n        far = near + 0.01;\r\n    }\r\n    camera.near = near;\r\n    camera.far = 2 * far; // avoid precision issues distingushing far objects from background\r\n    camera.fogNear = fogNear;\r\n    camera.fogFar = fogFar;\r\n}\r\n//# sourceMappingURL=camera.js.map"]},"metadata":{},"sourceType":"module"}