{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { StateTransforms } from '../transforms';\nimport { guessCifVariant } from './provider';\nexport var TrajectoryFormatCategory = 'Trajectory';\n\nfunction defaultVisuals(plugin, data) {\n  return plugin.builders.structure.hierarchy.applyPreset(data.trajectory, 'default');\n}\n\nexport var MmcifProvider = {\n  label: 'mmCIF',\n  description: 'mmCIF',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['cif', 'mmcif', 'mcif'],\n  binaryExtensions: ['bcif'],\n  isApplicable: function (info, data) {\n    if (info.ext === 'mmcif' || info.ext === 'mcif') return true; // assume undetermined cif/bcif files are mmCIF\n\n    if (info.ext === 'cif' || info.ext === 'bcif') return guessCifVariant(info, data) === -1;\n    return false;\n  },\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var state, cif, trajectory;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            state = plugin.state.data;\n            cif = state.build().to(data).apply(StateTransforms.Data.ParseCif, void 0, {\n              state: {\n                isGhost: true\n              }\n            });\n            return [4\n            /*yield*/\n            , cif.apply(StateTransforms.Model.TrajectoryFromMmCif, void 0, {\n              tags: params === null || params === void 0 ? void 0 : params.trajectoryTags\n            }).commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            trajectory = _c.sent();\n\n            if ((((_b = (_a = cif.selector.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data.blocks.length) || 0) > 1) {\n              plugin.state.data.updateCellState(cif.ref, {\n                isGhost: false\n              });\n            }\n\n            return [2\n            /*return*/\n            , {\n              trajectory: trajectory\n            }];\n        }\n      });\n    });\n  },\n  visuals: defaultVisuals\n};\nexport var CifCoreProvider = {\n  label: 'cifCore',\n  description: 'CIF Core',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['cif'],\n  isApplicable: function (info, data) {\n    if (info.ext === 'cif') return guessCifVariant(info, data) === 'coreCif';\n    return false;\n  },\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var state, cif, trajectory;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            state = plugin.state.data;\n            cif = state.build().to(data).apply(StateTransforms.Data.ParseCif, void 0, {\n              state: {\n                isGhost: true\n              }\n            });\n            return [4\n            /*yield*/\n            , cif.apply(StateTransforms.Model.TrajectoryFromCifCore, void 0, {\n              tags: params === null || params === void 0 ? void 0 : params.trajectoryTags\n            }).commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            trajectory = _c.sent();\n\n            if ((((_b = (_a = cif.selector.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data.blocks.length) || 0) > 1) {\n              plugin.state.data.updateCellState(cif.ref, {\n                isGhost: false\n              });\n            }\n\n            return [2\n            /*return*/\n            , {\n              trajectory: trajectory\n            }];\n        }\n      });\n    });\n  },\n  visuals: defaultVisuals\n};\n\nfunction directTrajectory(transformer, transformerParams) {\n  var _this = this;\n\n  return function (plugin, data, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var state, trajectory;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            state = plugin.state.data;\n            return [4\n            /*yield*/\n            , state.build().to(data).apply(transformer, transformerParams, {\n              tags: params === null || params === void 0 ? void 0 : params.trajectoryTags\n            }).commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            trajectory = _a.sent();\n            return [2\n            /*return*/\n            , {\n              trajectory: trajectory\n            }];\n        }\n      });\n    });\n  };\n}\n\nexport var PdbProvider = {\n  label: 'PDB',\n  description: 'PDB',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['pdb', 'ent'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromPDB),\n  visuals: defaultVisuals\n};\nexport var PdbqtProvider = {\n  label: 'PDBQT',\n  description: 'PDBQT',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['pdbqt'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromPDB, {\n    isPdbqt: true\n  }),\n  visuals: defaultVisuals\n};\nexport var XyzProvider = {\n  label: 'XYZ',\n  description: 'XYZ',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['xyz'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromXYZ),\n  visuals: defaultVisuals\n};\nexport var GroProvider = {\n  label: 'GRO',\n  description: 'GRO',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['gro'],\n  binaryExtensions: [],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromGRO),\n  visuals: defaultVisuals\n};\nexport var MolProvider = {\n  label: 'MOL',\n  description: 'MOL',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['mol'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromMOL),\n  visuals: defaultVisuals\n};\nexport var SdfProvider = {\n  label: 'SDF',\n  description: 'SDF',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['sdf', 'sd'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromSDF),\n  visuals: defaultVisuals\n};\nexport var Mol2Provider = {\n  label: 'MOL2',\n  description: 'MOL2',\n  category: TrajectoryFormatCategory,\n  stringExtensions: ['mol2'],\n  parse: directTrajectory(StateTransforms.Model.TrajectoryFromMOL2),\n  visuals: defaultVisuals\n};\nexport var BuiltInTrajectoryFormats = [['mmcif', MmcifProvider], ['cifCore', CifCoreProvider], ['pdb', PdbProvider], ['pdbqt', PdbqtProvider], ['gro', GroProvider], ['xyz', XyzProvider], ['mol', MolProvider], ['sdf', SdfProvider], ['mol2', Mol2Provider]];","map":{"version":3,"sources":["../../../src/mol-plugin-state/formats/trajectory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { StateTransforms } from '../transforms';\r\nimport { guessCifVariant } from './provider';\r\nexport var TrajectoryFormatCategory = 'Trajectory';\r\nfunction defaultVisuals(plugin, data) {\r\n    return plugin.builders.structure.hierarchy.applyPreset(data.trajectory, 'default');\r\n}\r\nexport var MmcifProvider = {\r\n    label: 'mmCIF',\r\n    description: 'mmCIF',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['cif', 'mmcif', 'mcif'],\r\n    binaryExtensions: ['bcif'],\r\n    isApplicable: function (info, data) {\r\n        if (info.ext === 'mmcif' || info.ext === 'mcif')\r\n            return true;\r\n        // assume undetermined cif/bcif files are mmCIF\r\n        if (info.ext === 'cif' || info.ext === 'bcif')\r\n            return guessCifVariant(info, data) === -1;\r\n        return false;\r\n    },\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var state, cif, trajectory;\r\n        var _a, _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    state = plugin.state.data;\r\n                    cif = state.build().to(data)\r\n                        .apply(StateTransforms.Data.ParseCif, void 0, { state: { isGhost: true } });\r\n                    return [4 /*yield*/, cif\r\n                            .apply(StateTransforms.Model.TrajectoryFromMmCif, void 0, { tags: params === null || params === void 0 ? void 0 : params.trajectoryTags })\r\n                            .commit({ revertOnError: true })];\r\n                case 1:\r\n                    trajectory = _c.sent();\r\n                    if ((((_b = (_a = cif.selector.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data.blocks.length) || 0) > 1) {\r\n                        plugin.state.data.updateCellState(cif.ref, { isGhost: false });\r\n                    }\r\n                    return [2 /*return*/, { trajectory: trajectory }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: defaultVisuals\r\n};\r\nexport var CifCoreProvider = {\r\n    label: 'cifCore',\r\n    description: 'CIF Core',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['cif'],\r\n    isApplicable: function (info, data) {\r\n        if (info.ext === 'cif')\r\n            return guessCifVariant(info, data) === 'coreCif';\r\n        return false;\r\n    },\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var state, cif, trajectory;\r\n        var _a, _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    state = plugin.state.data;\r\n                    cif = state.build().to(data)\r\n                        .apply(StateTransforms.Data.ParseCif, void 0, { state: { isGhost: true } });\r\n                    return [4 /*yield*/, cif\r\n                            .apply(StateTransforms.Model.TrajectoryFromCifCore, void 0, { tags: params === null || params === void 0 ? void 0 : params.trajectoryTags })\r\n                            .commit({ revertOnError: true })];\r\n                case 1:\r\n                    trajectory = _c.sent();\r\n                    if ((((_b = (_a = cif.selector.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data.blocks.length) || 0) > 1) {\r\n                        plugin.state.data.updateCellState(cif.ref, { isGhost: false });\r\n                    }\r\n                    return [2 /*return*/, { trajectory: trajectory }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: defaultVisuals\r\n};\r\nfunction directTrajectory(transformer, transformerParams) {\r\n    var _this = this;\r\n    return function (plugin, data, params) { return __awaiter(_this, void 0, void 0, function () {\r\n        var state, trajectory;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    state = plugin.state.data;\r\n                    return [4 /*yield*/, state.build().to(data)\r\n                            .apply(transformer, transformerParams, { tags: params === null || params === void 0 ? void 0 : params.trajectoryTags })\r\n                            .commit({ revertOnError: true })];\r\n                case 1:\r\n                    trajectory = _a.sent();\r\n                    return [2 /*return*/, { trajectory: trajectory }];\r\n            }\r\n        });\r\n    }); };\r\n}\r\nexport var PdbProvider = {\r\n    label: 'PDB',\r\n    description: 'PDB',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['pdb', 'ent'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromPDB),\r\n    visuals: defaultVisuals\r\n};\r\nexport var PdbqtProvider = {\r\n    label: 'PDBQT',\r\n    description: 'PDBQT',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['pdbqt'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromPDB, { isPdbqt: true }),\r\n    visuals: defaultVisuals\r\n};\r\nexport var XyzProvider = {\r\n    label: 'XYZ',\r\n    description: 'XYZ',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['xyz'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromXYZ),\r\n    visuals: defaultVisuals\r\n};\r\nexport var GroProvider = {\r\n    label: 'GRO',\r\n    description: 'GRO',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['gro'],\r\n    binaryExtensions: [],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromGRO),\r\n    visuals: defaultVisuals\r\n};\r\nexport var MolProvider = {\r\n    label: 'MOL',\r\n    description: 'MOL',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['mol'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromMOL),\r\n    visuals: defaultVisuals\r\n};\r\nexport var SdfProvider = {\r\n    label: 'SDF',\r\n    description: 'SDF',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['sdf', 'sd'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromSDF),\r\n    visuals: defaultVisuals\r\n};\r\nexport var Mol2Provider = {\r\n    label: 'MOL2',\r\n    description: 'MOL2',\r\n    category: TrajectoryFormatCategory,\r\n    stringExtensions: ['mol2'],\r\n    parse: directTrajectory(StateTransforms.Model.TrajectoryFromMOL2),\r\n    visuals: defaultVisuals\r\n};\r\nexport var BuiltInTrajectoryFormats = [\r\n    ['mmcif', MmcifProvider],\r\n    ['cifCore', CifCoreProvider],\r\n    ['pdb', PdbProvider],\r\n    ['pdbqt', PdbqtProvider],\r\n    ['gro', GroProvider],\r\n    ['xyz', XyzProvider],\r\n    ['mol', MolProvider],\r\n    ['sdf', SdfProvider],\r\n    ['mol2', Mol2Provider],\r\n];\r\n//# sourceMappingURL=trajectory.js.map"]},"metadata":{},"sourceType":"module"}