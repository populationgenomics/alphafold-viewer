{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { SpacegroupCell, Box3D } from '../../mol-math/geometry';\nimport { Tensor, Vec3 } from '../../mol-math/linear-algebra';\nimport { CustomProperties } from '../../mol-model/custom-property';\nexport function volumeFromDensityServerData(source, params) {\n  var _this = this;\n\n  return Task.create('Create Volume', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var info, values, cell, axis_order_fast_to_slow, normalizeOrder, sample_count, tensorSpace, data, origin, dimensions;\n      return __generator(this, function (_a) {\n        info = source.volume_data_3d_info, values = source.volume_data_3d;\n        cell = SpacegroupCell.create(info.spacegroup_number.value(0), Vec3.ofArray(info.spacegroup_cell_size.value(0)), Vec3.scale(Vec3.zero(), Vec3.ofArray(info.spacegroup_cell_angles.value(0)), Math.PI / 180));\n        axis_order_fast_to_slow = info.axis_order.value(0);\n        normalizeOrder = Tensor.convertToCanonicalAxisIndicesFastToSlow(axis_order_fast_to_slow);\n        sample_count = normalizeOrder(info.sample_count.value(0));\n        tensorSpace = Tensor.Space(sample_count, Tensor.invertAxisOrder(axis_order_fast_to_slow), Float32Array);\n        data = Tensor.create(tensorSpace, Tensor.Data1(values.values.toArray({\n          array: Float32Array\n        })));\n        origin = Vec3.ofArray(normalizeOrder(info.origin.value(0)));\n        dimensions = Vec3.ofArray(normalizeOrder(info.dimensions.value(0)));\n        return [2\n        /*return*/\n        , {\n          label: params === null || params === void 0 ? void 0 : params.label,\n          entryId: params === null || params === void 0 ? void 0 : params.entryId,\n          grid: {\n            transform: {\n              kind: 'spacegroup',\n              cell: cell,\n              fractionalBox: Box3D.create(origin, Vec3.add(Vec3.zero(), origin, dimensions))\n            },\n            cells: data,\n            stats: {\n              min: info.min_sampled.value(0),\n              max: info.max_sampled.value(0),\n              mean: info.mean_sampled.value(0),\n              sigma: info.sigma_sampled.value(0)\n            }\n          },\n          sourceData: DscifFormat.create(source),\n          customProperties: new CustomProperties(),\n          _propertyData: Object.create(null)\n        }];\n      });\n    });\n  });\n} //\n\nexport { DscifFormat };\nvar DscifFormat;\n\n(function (DscifFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'dscif';\n  }\n\n  DscifFormat.is = is;\n\n  function create(dscif) {\n    return {\n      kind: 'dscif',\n      name: dscif._name,\n      data: dscif\n    };\n  }\n\n  DscifFormat.create = create;\n})(DscifFormat || (DscifFormat = {}));","map":{"version":3,"sources":["../../../src/mol-model-formats/volume/density-server.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { SpacegroupCell, Box3D } from '../../mol-math/geometry';\r\nimport { Tensor, Vec3 } from '../../mol-math/linear-algebra';\r\nimport { CustomProperties } from '../../mol-model/custom-property';\r\nexport function volumeFromDensityServerData(source, params) {\r\n    var _this = this;\r\n    return Task.create('Create Volume', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var info, values, cell, axis_order_fast_to_slow, normalizeOrder, sample_count, tensorSpace, data, origin, dimensions;\r\n        return __generator(this, function (_a) {\r\n            info = source.volume_data_3d_info, values = source.volume_data_3d;\r\n            cell = SpacegroupCell.create(info.spacegroup_number.value(0), Vec3.ofArray(info.spacegroup_cell_size.value(0)), Vec3.scale(Vec3.zero(), Vec3.ofArray(info.spacegroup_cell_angles.value(0)), Math.PI / 180));\r\n            axis_order_fast_to_slow = info.axis_order.value(0);\r\n            normalizeOrder = Tensor.convertToCanonicalAxisIndicesFastToSlow(axis_order_fast_to_slow);\r\n            sample_count = normalizeOrder(info.sample_count.value(0));\r\n            tensorSpace = Tensor.Space(sample_count, Tensor.invertAxisOrder(axis_order_fast_to_slow), Float32Array);\r\n            data = Tensor.create(tensorSpace, Tensor.Data1(values.values.toArray({ array: Float32Array })));\r\n            origin = Vec3.ofArray(normalizeOrder(info.origin.value(0)));\r\n            dimensions = Vec3.ofArray(normalizeOrder(info.dimensions.value(0)));\r\n            return [2 /*return*/, {\r\n                    label: params === null || params === void 0 ? void 0 : params.label,\r\n                    entryId: params === null || params === void 0 ? void 0 : params.entryId,\r\n                    grid: {\r\n                        transform: { kind: 'spacegroup', cell: cell, fractionalBox: Box3D.create(origin, Vec3.add(Vec3.zero(), origin, dimensions)) },\r\n                        cells: data,\r\n                        stats: {\r\n                            min: info.min_sampled.value(0),\r\n                            max: info.max_sampled.value(0),\r\n                            mean: info.mean_sampled.value(0),\r\n                            sigma: info.sigma_sampled.value(0)\r\n                        },\r\n                    },\r\n                    sourceData: DscifFormat.create(source),\r\n                    customProperties: new CustomProperties(),\r\n                    _propertyData: Object.create(null),\r\n                }];\r\n        });\r\n    }); });\r\n}\r\n//\r\nexport { DscifFormat };\r\nvar DscifFormat;\r\n(function (DscifFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'dscif';\r\n    }\r\n    DscifFormat.is = is;\r\n    function create(dscif) {\r\n        return { kind: 'dscif', name: dscif._name, data: dscif };\r\n    }\r\n    DscifFormat.create = create;\r\n})(DscifFormat || (DscifFormat = {}));\r\n//# sourceMappingURL=density-server.js.map"]},"metadata":{},"sourceType":"module"}