{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\n/*\r\n * This code has been modified from https://github.com/toji/gl-matrix/,\r\n * copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n */\nimport { Mat4 } from './mat4';\nimport { spline as _spline, quadraticBezier as _quadraticBezier, clamp } from '../../interpolate';\nimport { EPSILON } from './common';\n\nfunction Vec3() {\n  return Vec3.zero();\n}\n\n(function (Vec3) {\n  function zero() {\n    var out = [0.1, 0.0, 0.0];\n    out[0] = 0;\n    return out;\n  }\n\n  Vec3.zero = zero;\n\n  function clone(a) {\n    var out = zero();\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  }\n\n  Vec3.clone = clone;\n\n  function hasNaN(a) {\n    return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]);\n  }\n\n  Vec3.hasNaN = hasNaN;\n\n  function setNaN(out) {\n    out[0] = NaN;\n    out[1] = NaN;\n    out[2] = NaN;\n    return out;\n  }\n\n  Vec3.setNaN = setNaN;\n\n  function fromObj(v) {\n    return create(v.x, v.y, v.z);\n  }\n\n  Vec3.fromObj = fromObj;\n\n  function toObj(v) {\n    return {\n      x: v[0],\n      y: v[1],\n      z: v[2]\n    };\n  }\n\n  Vec3.toObj = toObj;\n\n  function fromArray(v, array, offset) {\n    v[0] = array[offset + 0];\n    v[1] = array[offset + 1];\n    v[2] = array[offset + 2];\n    return v;\n  }\n\n  Vec3.fromArray = fromArray;\n\n  function toArray(v, out, offset) {\n    out[offset + 0] = v[0];\n    out[offset + 1] = v[1];\n    out[offset + 2] = v[2];\n    return out;\n  }\n\n  Vec3.toArray = toArray;\n\n  function create(x, y, z) {\n    var out = zero();\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  }\n\n  Vec3.create = create;\n\n  function ofArray(array) {\n    var out = zero();\n    out[0] = array[0];\n    out[1] = array[1];\n    out[2] = array[2];\n    return out;\n  }\n\n  Vec3.ofArray = ofArray;\n\n  function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  }\n\n  Vec3.set = set;\n\n  function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  }\n\n  Vec3.copy = copy;\n\n  function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n  }\n\n  Vec3.add = add;\n\n  function sub(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  }\n\n  Vec3.sub = sub;\n\n  function mul(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n  }\n\n  Vec3.mul = mul;\n\n  function div(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n  }\n\n  Vec3.div = div;\n\n  function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n  }\n\n  Vec3.scale = scale;\n  /** Scales b, then adds a and b together */\n\n  function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n  }\n\n  Vec3.scaleAndAdd = scaleAndAdd;\n  /** Scales b, then subtracts b from a */\n\n  function scaleAndSub(out, a, b, scale) {\n    out[0] = a[0] - b[0] * scale;\n    out[1] = a[1] - b[1] * scale;\n    out[2] = a[2] - b[2] * scale;\n    return out;\n  }\n\n  Vec3.scaleAndSub = scaleAndSub;\n\n  function addScalar(out, a, b) {\n    out[0] = a[0] + b;\n    out[1] = a[1] + b;\n    out[2] = a[2] + b;\n    return out;\n  }\n\n  Vec3.addScalar = addScalar;\n\n  function subScalar(out, a, b) {\n    out[0] = a[0] - b;\n    out[1] = a[1] - b;\n    out[2] = a[2] - b;\n    return out;\n  }\n\n  Vec3.subScalar = subScalar;\n  /**\r\n   * Math.round the components of a Vec3\r\n   */\n\n  function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n  }\n\n  Vec3.round = round;\n  /**\r\n   * Math.ceil the components of a Vec3\r\n   */\n\n  function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n  }\n\n  Vec3.ceil = ceil;\n  /**\r\n   * Math.floor the components of a Vec3\r\n   */\n\n  function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n  }\n\n  Vec3.floor = floor;\n  /**\r\n   * Math.trunc the components of a Vec3\r\n   */\n\n  function trunc(out, a) {\n    out[0] = Math.trunc(a[0]);\n    out[1] = Math.trunc(a[1]);\n    out[2] = Math.trunc(a[2]);\n    return out;\n  }\n\n  Vec3.trunc = trunc;\n  /**\r\n   * Math.abs the components of a Vec3\r\n   */\n\n  function abs(out, a) {\n    out[0] = Math.abs(a[0]);\n    out[1] = Math.abs(a[1]);\n    out[2] = Math.abs(a[2]);\n    return out;\n  }\n\n  Vec3.abs = abs;\n  /**\r\n   * Returns the minimum of two Vec3's\r\n   */\n\n  function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n  }\n\n  Vec3.min = min;\n  /**\r\n   * Returns the maximum of two Vec3's\r\n   */\n\n  function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n  }\n\n  Vec3.max = max;\n\n  function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  Vec3.distance = distance;\n\n  function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x * x + y * y + z * z;\n  }\n\n  Vec3.squaredDistance = squaredDistance;\n\n  function magnitude(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  Vec3.magnitude = magnitude;\n\n  function squaredMagnitude(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x * x + y * y + z * z;\n  }\n\n  Vec3.squaredMagnitude = squaredMagnitude;\n\n  function setMagnitude(out, a, l) {\n    return scale(out, normalize(out, a), l);\n  }\n\n  Vec3.setMagnitude = setMagnitude;\n  /**\r\n   * Negates the components of a vec3\r\n   */\n\n  function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n  }\n\n  Vec3.negate = negate;\n  /**\r\n   * Returns the inverse of the components of a Vec3\r\n   */\n\n  function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n  }\n\n  Vec3.inverse = inverse;\n\n  function normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x * x + y * y + z * z;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      out[0] = a[0] * len;\n      out[1] = a[1] * len;\n      out[2] = a[2] * len;\n    }\n\n    return out;\n  }\n\n  Vec3.normalize = normalize;\n\n  function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  Vec3.dot = dot;\n\n  function cross(out, a, b) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        bx = b[0],\n        by = b[1],\n        bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  }\n\n  Vec3.cross = cross;\n  /**\r\n   * Performs a linear interpolation between two Vec3's\r\n   */\n\n  function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n  }\n\n  Vec3.lerp = lerp;\n  var slerpRelVec = zero();\n\n  function slerp(out, a, b, t) {\n    var d = clamp(dot(a, b), -1, 1);\n    var theta = Math.acos(d) * t;\n    scaleAndAdd(slerpRelVec, b, a, -d);\n    normalize(slerpRelVec, slerpRelVec);\n    return add(out, scale(out, a, Math.cos(theta)), scale(slerpRelVec, slerpRelVec, Math.sin(theta)));\n  }\n\n  Vec3.slerp = slerp;\n  /**\r\n   * Performs a hermite interpolation with two control points\r\n   */\n\n  function hermite(out, a, b, c, d, t) {\n    var factorTimes2 = t * t;\n    var factor1 = factorTimes2 * (2 * t - 3) + 1;\n    var factor2 = factorTimes2 * (t - 2) + t;\n    var factor3 = factorTimes2 * (t - 1);\n    var factor4 = factorTimes2 * (3 - 2 * t);\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n  }\n\n  Vec3.hermite = hermite;\n  /**\r\n   * Performs a bezier interpolation with two control points\r\n   */\n\n  function bezier(out, a, b, c, d, t) {\n    var inverseFactor = 1 - t;\n    var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    var factorTimes2 = t * t;\n    var factor1 = inverseFactorTimesTwo * inverseFactor;\n    var factor2 = 3 * t * inverseFactorTimesTwo;\n    var factor3 = 3 * factorTimes2 * inverseFactor;\n    var factor4 = factorTimes2 * t;\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n  }\n\n  Vec3.bezier = bezier;\n\n  function quadraticBezier(out, a, b, c, t) {\n    out[0] = _quadraticBezier(a[0], b[0], c[0], t);\n    out[1] = _quadraticBezier(a[1], b[1], c[1], t);\n    out[2] = _quadraticBezier(a[2], b[2], c[2], t);\n    return out;\n  }\n\n  Vec3.quadraticBezier = quadraticBezier;\n  /**\r\n   * Performs a spline interpolation with two control points and a tension parameter\r\n   */\n\n  function spline(out, a, b, c, d, t, tension) {\n    out[0] = _spline(a[0], b[0], c[0], d[0], t, tension);\n    out[1] = _spline(a[1], b[1], c[1], d[1], t, tension);\n    out[2] = _spline(a[2], b[2], c[2], d[2], t, tension);\n    return out;\n  }\n\n  Vec3.spline = spline;\n  /**\r\n   * Generates a random vector with the given scale\r\n   */\n\n  function random(out, scale) {\n    var r = Math.random() * 2.0 * Math.PI;\n    var z = Math.random() * 2.0 - 1.0;\n    var zScale = Math.sqrt(1.0 - z * z) * scale;\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n  }\n\n  Vec3.random = random;\n  /**\r\n   * Transforms the Vec3 with a Mat4. 4th vector component is implicitly '1'\r\n   */\n\n  function transformMat4(out, a, m) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15] || 1.0);\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n    return out;\n  }\n\n  Vec3.transformMat4 = transformMat4;\n  /**\r\n   * Like `transformMat4` but with offsets into arrays\r\n   */\n\n  function transformMat4Offset(out, a, m, outO, aO, oM) {\n    var x = a[0 + aO],\n        y = a[1 + aO],\n        z = a[2 + aO],\n        w = 1 / (m[3 + oM] * x + m[7 + oM] * y + m[11 + oM] * z + m[15 + oM] || 1.0);\n    out[0 + outO] = (m[0 + oM] * x + m[4 + oM] * y + m[8 + oM] * z + m[12 + oM]) * w;\n    out[1 + outO] = (m[1 + oM] * x + m[5 + oM] * y + m[9 + oM] * z + m[13 + oM]) * w;\n    out[2 + outO] = (m[2 + oM] * x + m[6 + oM] * y + m[10 + oM] * z + m[14 + oM]) * w;\n    return out;\n  }\n\n  Vec3.transformMat4Offset = transformMat4Offset;\n  /**\r\n   * Transforms the Vec3 with a Mat3.\r\n   */\n\n  function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n  }\n\n  Vec3.transformMat3 = transformMat3;\n  /** Transforms the Vec3 with a quat */\n\n  function transformQuat(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3]; // calculate quat * vec\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n  }\n\n  Vec3.transformQuat = transformQuat;\n  /** Computes the angle between 2 vectors, reports in radians. */\n\n  function angle(a, b) {\n    var denominator = Math.sqrt(squaredMagnitude(a) * squaredMagnitude(b));\n    if (denominator === 0) return Math.PI / 2;\n    var theta = dot(a, b) / denominator;\n    return Math.acos(clamp(theta, -1, 1)); // clamp to avoid numerical problems\n  }\n\n  Vec3.angle = angle;\n  var tmp_dh_ab = zero();\n  var tmp_dh_cb = zero();\n  var tmp_dh_bc = zero();\n  var tmp_dh_dc = zero();\n  var tmp_dh_abc = zero();\n  var tmp_dh_bcd = zero();\n  var tmp_dh_cross = zero();\n  /**\r\n   * Computes the dihedral angles of 4 points, reports in radians.\r\n   */\n\n  function dihedralAngle(a, b, c, d) {\n    sub(tmp_dh_ab, a, b);\n    sub(tmp_dh_cb, c, b);\n    sub(tmp_dh_bc, b, c);\n    sub(tmp_dh_dc, d, c);\n    cross(tmp_dh_abc, tmp_dh_ab, tmp_dh_cb);\n    cross(tmp_dh_bcd, tmp_dh_bc, tmp_dh_dc);\n\n    var _angle = angle(tmp_dh_abc, tmp_dh_bcd);\n\n    cross(tmp_dh_cross, tmp_dh_abc, tmp_dh_bcd);\n    return dot(tmp_dh_cb, tmp_dh_cross) > 0 ? _angle : -_angle;\n  }\n\n  Vec3.dihedralAngle = dihedralAngle;\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   */\n\n  function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  }\n\n  Vec3.exactEquals = exactEquals;\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   */\n\n  function equals(a, b) {\n    var a0 = a[0],\n        a1 = a[1],\n        a2 = a[2];\n    var b0 = b[0],\n        b1 = b[1],\n        b2 = b[2];\n    return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n  }\n\n  Vec3.equals = equals;\n  var rotTemp = zero();\n\n  function makeRotation(mat, a, b) {\n    var by = angle(a, b);\n    if (Math.abs(by) < 0.0001) return Mat4.setIdentity(mat);\n\n    if (Math.abs(by - Math.PI) < EPSILON) {\n      // here, axis can be [0,0,0] but the rotation is a simple flip\n      return Mat4.fromScaling(mat, Vec3.negUnit);\n    }\n\n    var axis = cross(rotTemp, a, b);\n    return Mat4.fromRotation(mat, by, axis);\n  }\n\n  Vec3.makeRotation = makeRotation;\n\n  function isZero(v) {\n    return v[0] === 0 && v[1] === 0 && v[2] === 0;\n  }\n\n  Vec3.isZero = isZero;\n  /** Project `point` onto `vector` starting from `origin` */\n\n  function projectPointOnVector(out, point, vector, origin) {\n    sub(out, point, origin);\n    var scalar = dot(vector, out) / squaredMagnitude(vector);\n    return add(out, scale(out, vector, scalar), origin);\n  }\n\n  Vec3.projectPointOnVector = projectPointOnVector;\n  var tmpProjectPlane = zero();\n  /** Project `point` onto `plane` defined by `normal` starting from `origin` */\n\n  function projectPointOnPlane(out, point, normal, origin) {\n    normalize(tmpProjectPlane, normal);\n    sub(out, point, origin);\n    return sub(out, point, scale(tmpProjectPlane, tmpProjectPlane, dot(out, tmpProjectPlane)));\n  }\n\n  Vec3.projectPointOnPlane = projectPointOnPlane;\n\n  function projectOnVector(out, p, vector) {\n    var scalar = dot(vector, p) / squaredMagnitude(vector);\n    return scale(out, vector, scalar);\n  }\n\n  Vec3.projectOnVector = projectOnVector;\n  var tmpProject = zero();\n\n  function projectOnPlane(out, p, normal) {\n    projectOnVector(tmpProject, p, normal);\n    return sub(out, p, tmpProject);\n  }\n\n  Vec3.projectOnPlane = projectOnPlane;\n  /** Get a vector that is similar to `b` but orthogonal to `a` */\n\n  function orthogonalize(out, a, b) {\n    return normalize(out, cross(out, cross(out, a, b), a));\n  }\n\n  Vec3.orthogonalize = orthogonalize;\n  /**\r\n   * Get a vector like `a` that point into the same general direction as `b`,\r\n   * i.e. where the dot product is > 0\r\n   */\n\n  function matchDirection(out, a, b) {\n    if (dot(a, b) > 0) copy(out, a);else negate(out, copy(out, a));\n    return out;\n  }\n\n  Vec3.matchDirection = matchDirection;\n  var triangleNormalTmpAB = zero();\n  var triangleNormalTmpAC = zero();\n  /** Calculate normal for the triangle defined by `a`, `b` and `c` */\n\n  function triangleNormal(out, a, b, c) {\n    sub(triangleNormalTmpAB, b, a);\n    sub(triangleNormalTmpAC, c, a);\n    return normalize(out, cross(out, triangleNormalTmpAB, triangleNormalTmpAC));\n  }\n\n  Vec3.triangleNormal = triangleNormal;\n\n  function toString(a, precision) {\n    return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \" \" + a[2].toPrecision(precision) + \"]\";\n  }\n\n  Vec3.toString = toString;\n  Vec3.origin = create(0, 0, 0);\n  Vec3.unit = create(1, 1, 1);\n  Vec3.negUnit = create(-1, -1, -1);\n  Vec3.unitX = create(1, 0, 0);\n  Vec3.unitY = create(0, 1, 0);\n  Vec3.unitZ = create(0, 0, 1);\n  Vec3.negUnitX = create(-1, 0, 0);\n  Vec3.negUnitY = create(0, -1, 0);\n  Vec3.negUnitZ = create(0, 0, -1);\n})(Vec3 || (Vec3 = {}));\n\nexport { Vec3 };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/3d/vec3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n/*\r\n * This code has been modified from https://github.com/toji/gl-matrix/,\r\n * copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n */\r\nimport { Mat4 } from './mat4';\r\nimport { spline as _spline, quadraticBezier as _quadraticBezier, clamp } from '../../interpolate';\r\nimport { EPSILON } from './common';\r\nfunction Vec3() {\r\n    return Vec3.zero();\r\n}\r\n(function (Vec3) {\r\n    function zero() {\r\n        var out = [0.1, 0.0, 0.0];\r\n        out[0] = 0;\r\n        return out;\r\n    }\r\n    Vec3.zero = zero;\r\n    function clone(a) {\r\n        var out = zero();\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        return out;\r\n    }\r\n    Vec3.clone = clone;\r\n    function hasNaN(a) {\r\n        return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]);\r\n    }\r\n    Vec3.hasNaN = hasNaN;\r\n    function setNaN(out) {\r\n        out[0] = NaN;\r\n        out[1] = NaN;\r\n        out[2] = NaN;\r\n        return out;\r\n    }\r\n    Vec3.setNaN = setNaN;\r\n    function fromObj(v) {\r\n        return create(v.x, v.y, v.z);\r\n    }\r\n    Vec3.fromObj = fromObj;\r\n    function toObj(v) {\r\n        return { x: v[0], y: v[1], z: v[2] };\r\n    }\r\n    Vec3.toObj = toObj;\r\n    function fromArray(v, array, offset) {\r\n        v[0] = array[offset + 0];\r\n        v[1] = array[offset + 1];\r\n        v[2] = array[offset + 2];\r\n        return v;\r\n    }\r\n    Vec3.fromArray = fromArray;\r\n    function toArray(v, out, offset) {\r\n        out[offset + 0] = v[0];\r\n        out[offset + 1] = v[1];\r\n        out[offset + 2] = v[2];\r\n        return out;\r\n    }\r\n    Vec3.toArray = toArray;\r\n    function create(x, y, z) {\r\n        var out = zero();\r\n        out[0] = x;\r\n        out[1] = y;\r\n        out[2] = z;\r\n        return out;\r\n    }\r\n    Vec3.create = create;\r\n    function ofArray(array) {\r\n        var out = zero();\r\n        out[0] = array[0];\r\n        out[1] = array[1];\r\n        out[2] = array[2];\r\n        return out;\r\n    }\r\n    Vec3.ofArray = ofArray;\r\n    function set(out, x, y, z) {\r\n        out[0] = x;\r\n        out[1] = y;\r\n        out[2] = z;\r\n        return out;\r\n    }\r\n    Vec3.set = set;\r\n    function copy(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        return out;\r\n    }\r\n    Vec3.copy = copy;\r\n    function add(out, a, b) {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        return out;\r\n    }\r\n    Vec3.add = add;\r\n    function sub(out, a, b) {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - b[1];\r\n        out[2] = a[2] - b[2];\r\n        return out;\r\n    }\r\n    Vec3.sub = sub;\r\n    function mul(out, a, b) {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * b[1];\r\n        out[2] = a[2] * b[2];\r\n        return out;\r\n    }\r\n    Vec3.mul = mul;\r\n    function div(out, a, b) {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / b[1];\r\n        out[2] = a[2] / b[2];\r\n        return out;\r\n    }\r\n    Vec3.div = div;\r\n    function scale(out, a, b) {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        return out;\r\n    }\r\n    Vec3.scale = scale;\r\n    /** Scales b, then adds a and b together */\r\n    function scaleAndAdd(out, a, b, scale) {\r\n        out[0] = a[0] + (b[0] * scale);\r\n        out[1] = a[1] + (b[1] * scale);\r\n        out[2] = a[2] + (b[2] * scale);\r\n        return out;\r\n    }\r\n    Vec3.scaleAndAdd = scaleAndAdd;\r\n    /** Scales b, then subtracts b from a */\r\n    function scaleAndSub(out, a, b, scale) {\r\n        out[0] = a[0] - (b[0] * scale);\r\n        out[1] = a[1] - (b[1] * scale);\r\n        out[2] = a[2] - (b[2] * scale);\r\n        return out;\r\n    }\r\n    Vec3.scaleAndSub = scaleAndSub;\r\n    function addScalar(out, a, b) {\r\n        out[0] = a[0] + b;\r\n        out[1] = a[1] + b;\r\n        out[2] = a[2] + b;\r\n        return out;\r\n    }\r\n    Vec3.addScalar = addScalar;\r\n    function subScalar(out, a, b) {\r\n        out[0] = a[0] - b;\r\n        out[1] = a[1] - b;\r\n        out[2] = a[2] - b;\r\n        return out;\r\n    }\r\n    Vec3.subScalar = subScalar;\r\n    /**\r\n     * Math.round the components of a Vec3\r\n     */\r\n    function round(out, a) {\r\n        out[0] = Math.round(a[0]);\r\n        out[1] = Math.round(a[1]);\r\n        out[2] = Math.round(a[2]);\r\n        return out;\r\n    }\r\n    Vec3.round = round;\r\n    /**\r\n     * Math.ceil the components of a Vec3\r\n     */\r\n    function ceil(out, a) {\r\n        out[0] = Math.ceil(a[0]);\r\n        out[1] = Math.ceil(a[1]);\r\n        out[2] = Math.ceil(a[2]);\r\n        return out;\r\n    }\r\n    Vec3.ceil = ceil;\r\n    /**\r\n     * Math.floor the components of a Vec3\r\n     */\r\n    function floor(out, a) {\r\n        out[0] = Math.floor(a[0]);\r\n        out[1] = Math.floor(a[1]);\r\n        out[2] = Math.floor(a[2]);\r\n        return out;\r\n    }\r\n    Vec3.floor = floor;\r\n    /**\r\n     * Math.trunc the components of a Vec3\r\n     */\r\n    function trunc(out, a) {\r\n        out[0] = Math.trunc(a[0]);\r\n        out[1] = Math.trunc(a[1]);\r\n        out[2] = Math.trunc(a[2]);\r\n        return out;\r\n    }\r\n    Vec3.trunc = trunc;\r\n    /**\r\n     * Math.abs the components of a Vec3\r\n     */\r\n    function abs(out, a) {\r\n        out[0] = Math.abs(a[0]);\r\n        out[1] = Math.abs(a[1]);\r\n        out[2] = Math.abs(a[2]);\r\n        return out;\r\n    }\r\n    Vec3.abs = abs;\r\n    /**\r\n     * Returns the minimum of two Vec3's\r\n     */\r\n    function min(out, a, b) {\r\n        out[0] = Math.min(a[0], b[0]);\r\n        out[1] = Math.min(a[1], b[1]);\r\n        out[2] = Math.min(a[2], b[2]);\r\n        return out;\r\n    }\r\n    Vec3.min = min;\r\n    /**\r\n     * Returns the maximum of two Vec3's\r\n     */\r\n    function max(out, a, b) {\r\n        out[0] = Math.max(a[0], b[0]);\r\n        out[1] = Math.max(a[1], b[1]);\r\n        out[2] = Math.max(a[2], b[2]);\r\n        return out;\r\n    }\r\n    Vec3.max = max;\r\n    function distance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n    Vec3.distance = distance;\r\n    function squaredDistance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];\r\n        return x * x + y * y + z * z;\r\n    }\r\n    Vec3.squaredDistance = squaredDistance;\r\n    function magnitude(a) {\r\n        var x = a[0], y = a[1], z = a[2];\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n    Vec3.magnitude = magnitude;\r\n    function squaredMagnitude(a) {\r\n        var x = a[0], y = a[1], z = a[2];\r\n        return x * x + y * y + z * z;\r\n    }\r\n    Vec3.squaredMagnitude = squaredMagnitude;\r\n    function setMagnitude(out, a, l) {\r\n        return scale(out, normalize(out, a), l);\r\n    }\r\n    Vec3.setMagnitude = setMagnitude;\r\n    /**\r\n     * Negates the components of a vec3\r\n     */\r\n    function negate(out, a) {\r\n        out[0] = -a[0];\r\n        out[1] = -a[1];\r\n        out[2] = -a[2];\r\n        return out;\r\n    }\r\n    Vec3.negate = negate;\r\n    /**\r\n     * Returns the inverse of the components of a Vec3\r\n     */\r\n    function inverse(out, a) {\r\n        out[0] = 1.0 / a[0];\r\n        out[1] = 1.0 / a[1];\r\n        out[2] = 1.0 / a[2];\r\n        return out;\r\n    }\r\n    Vec3.inverse = inverse;\r\n    function normalize(out, a) {\r\n        var x = a[0], y = a[1], z = a[2];\r\n        var len = x * x + y * y + z * z;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n            out[0] = a[0] * len;\r\n            out[1] = a[1] * len;\r\n            out[2] = a[2] * len;\r\n        }\r\n        return out;\r\n    }\r\n    Vec3.normalize = normalize;\r\n    function dot(a, b) {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    }\r\n    Vec3.dot = dot;\r\n    function cross(out, a, b) {\r\n        var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];\r\n        out[0] = ay * bz - az * by;\r\n        out[1] = az * bx - ax * bz;\r\n        out[2] = ax * by - ay * bx;\r\n        return out;\r\n    }\r\n    Vec3.cross = cross;\r\n    /**\r\n     * Performs a linear interpolation between two Vec3's\r\n     */\r\n    function lerp(out, a, b, t) {\r\n        var ax = a[0], ay = a[1], az = a[2];\r\n        out[0] = ax + t * (b[0] - ax);\r\n        out[1] = ay + t * (b[1] - ay);\r\n        out[2] = az + t * (b[2] - az);\r\n        return out;\r\n    }\r\n    Vec3.lerp = lerp;\r\n    var slerpRelVec = zero();\r\n    function slerp(out, a, b, t) {\r\n        var d = clamp(dot(a, b), -1, 1);\r\n        var theta = Math.acos(d) * t;\r\n        scaleAndAdd(slerpRelVec, b, a, -d);\r\n        normalize(slerpRelVec, slerpRelVec);\r\n        return add(out, scale(out, a, Math.cos(theta)), scale(slerpRelVec, slerpRelVec, Math.sin(theta)));\r\n    }\r\n    Vec3.slerp = slerp;\r\n    /**\r\n     * Performs a hermite interpolation with two control points\r\n     */\r\n    function hermite(out, a, b, c, d, t) {\r\n        var factorTimes2 = t * t;\r\n        var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n        var factor2 = factorTimes2 * (t - 2) + t;\r\n        var factor3 = factorTimes2 * (t - 1);\r\n        var factor4 = factorTimes2 * (3 - 2 * t);\r\n        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n        return out;\r\n    }\r\n    Vec3.hermite = hermite;\r\n    /**\r\n     * Performs a bezier interpolation with two control points\r\n     */\r\n    function bezier(out, a, b, c, d, t) {\r\n        var inverseFactor = 1 - t;\r\n        var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n        var factorTimes2 = t * t;\r\n        var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n        var factor2 = 3 * t * inverseFactorTimesTwo;\r\n        var factor3 = 3 * factorTimes2 * inverseFactor;\r\n        var factor4 = factorTimes2 * t;\r\n        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n        return out;\r\n    }\r\n    Vec3.bezier = bezier;\r\n    function quadraticBezier(out, a, b, c, t) {\r\n        out[0] = _quadraticBezier(a[0], b[0], c[0], t);\r\n        out[1] = _quadraticBezier(a[1], b[1], c[1], t);\r\n        out[2] = _quadraticBezier(a[2], b[2], c[2], t);\r\n        return out;\r\n    }\r\n    Vec3.quadraticBezier = quadraticBezier;\r\n    /**\r\n     * Performs a spline interpolation with two control points and a tension parameter\r\n     */\r\n    function spline(out, a, b, c, d, t, tension) {\r\n        out[0] = _spline(a[0], b[0], c[0], d[0], t, tension);\r\n        out[1] = _spline(a[1], b[1], c[1], d[1], t, tension);\r\n        out[2] = _spline(a[2], b[2], c[2], d[2], t, tension);\r\n        return out;\r\n    }\r\n    Vec3.spline = spline;\r\n    /**\r\n     * Generates a random vector with the given scale\r\n     */\r\n    function random(out, scale) {\r\n        var r = Math.random() * 2.0 * Math.PI;\r\n        var z = (Math.random() * 2.0) - 1.0;\r\n        var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n        out[0] = Math.cos(r) * zScale;\r\n        out[1] = Math.sin(r) * zScale;\r\n        out[2] = z * scale;\r\n        return out;\r\n    }\r\n    Vec3.random = random;\r\n    /**\r\n     * Transforms the Vec3 with a Mat4. 4th vector component is implicitly '1'\r\n     */\r\n    function transformMat4(out, a, m) {\r\n        var x = a[0], y = a[1], z = a[2], w = 1 / ((m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0);\r\n        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\r\n        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\r\n        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\r\n        return out;\r\n    }\r\n    Vec3.transformMat4 = transformMat4;\r\n    /**\r\n     * Like `transformMat4` but with offsets into arrays\r\n     */\r\n    function transformMat4Offset(out, a, m, outO, aO, oM) {\r\n        var x = a[0 + aO], y = a[1 + aO], z = a[2 + aO], w = 1 / ((m[3 + oM] * x + m[7 + oM] * y + m[11 + oM] * z + m[15 + oM]) || 1.0);\r\n        out[0 + outO] = (m[0 + oM] * x + m[4 + oM] * y + m[8 + oM] * z + m[12 + oM]) * w;\r\n        out[1 + outO] = (m[1 + oM] * x + m[5 + oM] * y + m[9 + oM] * z + m[13 + oM]) * w;\r\n        out[2 + outO] = (m[2 + oM] * x + m[6 + oM] * y + m[10 + oM] * z + m[14 + oM]) * w;\r\n        return out;\r\n    }\r\n    Vec3.transformMat4Offset = transformMat4Offset;\r\n    /**\r\n     * Transforms the Vec3 with a Mat3.\r\n     */\r\n    function transformMat3(out, a, m) {\r\n        var x = a[0], y = a[1], z = a[2];\r\n        out[0] = x * m[0] + y * m[3] + z * m[6];\r\n        out[1] = x * m[1] + y * m[4] + z * m[7];\r\n        out[2] = x * m[2] + y * m[5] + z * m[8];\r\n        return out;\r\n    }\r\n    Vec3.transformMat3 = transformMat3;\r\n    /** Transforms the Vec3 with a quat */\r\n    function transformQuat(out, a, q) {\r\n        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n        var x = a[0], y = a[1], z = a[2];\r\n        var qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n        // calculate result * inverse quat\r\n        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n        return out;\r\n    }\r\n    Vec3.transformQuat = transformQuat;\r\n    /** Computes the angle between 2 vectors, reports in radians. */\r\n    function angle(a, b) {\r\n        var denominator = Math.sqrt(squaredMagnitude(a) * squaredMagnitude(b));\r\n        if (denominator === 0)\r\n            return Math.PI / 2;\r\n        var theta = dot(a, b) / denominator;\r\n        return Math.acos(clamp(theta, -1, 1)); // clamp to avoid numerical problems\r\n    }\r\n    Vec3.angle = angle;\r\n    var tmp_dh_ab = zero();\r\n    var tmp_dh_cb = zero();\r\n    var tmp_dh_bc = zero();\r\n    var tmp_dh_dc = zero();\r\n    var tmp_dh_abc = zero();\r\n    var tmp_dh_bcd = zero();\r\n    var tmp_dh_cross = zero();\r\n    /**\r\n     * Computes the dihedral angles of 4 points, reports in radians.\r\n     */\r\n    function dihedralAngle(a, b, c, d) {\r\n        sub(tmp_dh_ab, a, b);\r\n        sub(tmp_dh_cb, c, b);\r\n        sub(tmp_dh_bc, b, c);\r\n        sub(tmp_dh_dc, d, c);\r\n        cross(tmp_dh_abc, tmp_dh_ab, tmp_dh_cb);\r\n        cross(tmp_dh_bcd, tmp_dh_bc, tmp_dh_dc);\r\n        var _angle = angle(tmp_dh_abc, tmp_dh_bcd);\r\n        cross(tmp_dh_cross, tmp_dh_abc, tmp_dh_bcd);\r\n        return dot(tmp_dh_cb, tmp_dh_cross) > 0 ? _angle : -_angle;\r\n    }\r\n    Vec3.dihedralAngle = dihedralAngle;\r\n    /**\r\n     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n     */\r\n    function exactEquals(a, b) {\r\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n    }\r\n    Vec3.exactEquals = exactEquals;\r\n    /**\r\n     * Returns whether or not the vectors have approximately the same elements in the same position.\r\n     */\r\n    function equals(a, b) {\r\n        var a0 = a[0], a1 = a[1], a2 = a[2];\r\n        var b0 = b[0], b1 = b[1], b2 = b[2];\r\n        return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\r\n    }\r\n    Vec3.equals = equals;\r\n    var rotTemp = zero();\r\n    function makeRotation(mat, a, b) {\r\n        var by = angle(a, b);\r\n        if (Math.abs(by) < 0.0001)\r\n            return Mat4.setIdentity(mat);\r\n        if (Math.abs(by - Math.PI) < EPSILON) {\r\n            // here, axis can be [0,0,0] but the rotation is a simple flip\r\n            return Mat4.fromScaling(mat, Vec3.negUnit);\r\n        }\r\n        var axis = cross(rotTemp, a, b);\r\n        return Mat4.fromRotation(mat, by, axis);\r\n    }\r\n    Vec3.makeRotation = makeRotation;\r\n    function isZero(v) {\r\n        return v[0] === 0 && v[1] === 0 && v[2] === 0;\r\n    }\r\n    Vec3.isZero = isZero;\r\n    /** Project `point` onto `vector` starting from `origin` */\r\n    function projectPointOnVector(out, point, vector, origin) {\r\n        sub(out, point, origin);\r\n        var scalar = dot(vector, out) / squaredMagnitude(vector);\r\n        return add(out, scale(out, vector, scalar), origin);\r\n    }\r\n    Vec3.projectPointOnVector = projectPointOnVector;\r\n    var tmpProjectPlane = zero();\r\n    /** Project `point` onto `plane` defined by `normal` starting from `origin` */\r\n    function projectPointOnPlane(out, point, normal, origin) {\r\n        normalize(tmpProjectPlane, normal);\r\n        sub(out, point, origin);\r\n        return sub(out, point, scale(tmpProjectPlane, tmpProjectPlane, dot(out, tmpProjectPlane)));\r\n    }\r\n    Vec3.projectPointOnPlane = projectPointOnPlane;\r\n    function projectOnVector(out, p, vector) {\r\n        var scalar = dot(vector, p) / squaredMagnitude(vector);\r\n        return scale(out, vector, scalar);\r\n    }\r\n    Vec3.projectOnVector = projectOnVector;\r\n    var tmpProject = zero();\r\n    function projectOnPlane(out, p, normal) {\r\n        projectOnVector(tmpProject, p, normal);\r\n        return sub(out, p, tmpProject);\r\n    }\r\n    Vec3.projectOnPlane = projectOnPlane;\r\n    /** Get a vector that is similar to `b` but orthogonal to `a` */\r\n    function orthogonalize(out, a, b) {\r\n        return normalize(out, cross(out, cross(out, a, b), a));\r\n    }\r\n    Vec3.orthogonalize = orthogonalize;\r\n    /**\r\n     * Get a vector like `a` that point into the same general direction as `b`,\r\n     * i.e. where the dot product is > 0\r\n     */\r\n    function matchDirection(out, a, b) {\r\n        if (dot(a, b) > 0)\r\n            copy(out, a);\r\n        else\r\n            negate(out, copy(out, a));\r\n        return out;\r\n    }\r\n    Vec3.matchDirection = matchDirection;\r\n    var triangleNormalTmpAB = zero();\r\n    var triangleNormalTmpAC = zero();\r\n    /** Calculate normal for the triangle defined by `a`, `b` and `c` */\r\n    function triangleNormal(out, a, b, c) {\r\n        sub(triangleNormalTmpAB, b, a);\r\n        sub(triangleNormalTmpAC, c, a);\r\n        return normalize(out, cross(out, triangleNormalTmpAB, triangleNormalTmpAC));\r\n    }\r\n    Vec3.triangleNormal = triangleNormal;\r\n    function toString(a, precision) {\r\n        return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \" \" + a[2].toPrecision(precision) + \"]\";\r\n    }\r\n    Vec3.toString = toString;\r\n    Vec3.origin = create(0, 0, 0);\r\n    Vec3.unit = create(1, 1, 1);\r\n    Vec3.negUnit = create(-1, -1, -1);\r\n    Vec3.unitX = create(1, 0, 0);\r\n    Vec3.unitY = create(0, 1, 0);\r\n    Vec3.unitZ = create(0, 0, 1);\r\n    Vec3.negUnitX = create(-1, 0, 0);\r\n    Vec3.negUnitY = create(0, -1, 0);\r\n    Vec3.negUnitZ = create(0, 0, -1);\r\n})(Vec3 || (Vec3 = {}));\r\nexport { Vec3 };\r\n//# sourceMappingURL=vec3.js.map"]},"metadata":{},"sourceType":"module"}