{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * mostly adapted from https://gist.github.com/imbcmdth/6338194\r\n * which is ported from https://code.google.com/archive/p/fastapprox/ (BSD licensed)\r\n */\nvar _a_fastPow2 = new ArrayBuffer(4);\n\nvar _i_fastPow2 = new Int32Array(_a_fastPow2);\n\nvar _f_fastPow2 = new Float32Array(_a_fastPow2);\n\nexport function fastPow2(v) {\n  var offset = v < 0 ? 1 : 0;\n  var clipNumber = v < -126 ? -126 : v;\n  var w = clipNumber | 0;\n  var z = clipNumber - w + offset;\n  _i_fastPow2[0] = (1 << 23) * (clipNumber + 121.2740575 + 27.7280233 / (4.84252568 - z) - 1.49012907 * z);\n  return _f_fastPow2[0];\n}\n\nvar _a_fasterPow2 = new ArrayBuffer(4);\n\nvar _i_fasterPow2 = new Int32Array(_a_fasterPow2);\n\nvar _f_fasterPow2 = new Float32Array(_a_fasterPow2);\n\nexport function fasterPow2(v) {\n  var clipNumber = v < -126 ? -126 : v;\n  _i_fasterPow2[0] = (1 << 23) * (clipNumber + 126.94269504);\n  return _f_fasterPow2[0];\n}\nexport function fastExp(v) {\n  return fastPow2(1.442695040 * v);\n}\nexport function fasterExp(v) {\n  return fasterPow2(1.442695040 * v);\n}\n\nvar _a_fastLog2 = new ArrayBuffer(8);\n\nvar _i_fastLog2 = new Int32Array(_a_fastLog2);\n\nvar _f_fastLog2 = new Float32Array(_a_fastLog2);\n\nexport function fastLog2(v) {\n  _f_fastLog2[0] = v;\n  _i_fastLog2[1] = _i_fastLog2[0] & 0x007FFFFF | 0x3f000000;\n  var t = _i_fastLog2[0] * 1.1920928955078125e-7;\n  return t - 124.22551499 - 1.498030302 * _f_fastLog2[1] - 1.72587999 / (0.3520887068 + _f_fastLog2[1]);\n}\n;\n\nvar _a_fasterLog2 = new ArrayBuffer(4);\n\nvar _i_fasterLog2 = new Int32Array(_a_fasterLog2);\n\nvar _f_fasterLog2 = new Float32Array(_a_fasterLog2);\n\nexport function fasterLog2(v) {\n  _f_fasterLog2[0] = v;\n  var t = _i_fasterLog2[0] * 1.1920928955078125e-7;\n  return t - 126.94269504;\n}\nexport function fastLog(v) {\n  return 0.6931471805599453 * fastLog2(v);\n}\nexport function fasterLog(v) {\n  return 0.6931471805599453 * fasterLog2(v);\n}\nexport function fastLog10(v) {\n  return 0.30102999566398114 * fastLog2(v);\n}\nexport function fasterLog10(v) {\n  return 0.30102999566398114 * fasterLog2(v);\n}\nexport function fastSinh(v) {\n  return 0.5 * (fastExp(v) - fastExp(-v));\n}\nexport function fasterSinh(v) {\n  return 0.5 * (fasterExp(v) - fasterExp(-v));\n}\nexport function fastCosh(v) {\n  return 0.5 * (fastExp(v) + fastExp(-v));\n}\nexport function fasterCosh(v) {\n  return 0.5 * (fasterExp(v) + fasterExp(-v));\n}\nexport function fastTanh(v) {\n  return -1.0 + 2.0 / (1.0 + fastExp(-2.0 * v));\n}\nexport function fasterTanh(v) {\n  return -1.0 + 2.0 / (1.0 + fasterExp(-2.0 * v));\n}\nvar halfPi = Math.PI / 2;\nvar twoPi = 2 * Math.PI;\nvar invTwoPi = 1 / (2 * Math.PI);\nvar twoOverPi = 2 / Math.PI;\nvar fourOverPi = 4 / Math.PI;\nvar fourOverPiSq = 4 / (Math.PI * Math.PI);\nvar halfPiMinusTwoPi = Math.PI / 2 - 2 * Math.PI;\nvar _q_fastHalfSin = 0.78444488374548933;\n\nvar _a_fastHalfSin = new ArrayBuffer(16);\n\nvar _i_fastHalfSin = new Int32Array(_a_fastHalfSin);\n\nvar _f_fastHalfSin = new Float32Array(_a_fastHalfSin);\n\nfunction fastHalfSin(v) {\n  _f_fastHalfSin[0] = 0.20363937680730309;\n  _f_fastHalfSin[1] = 0.015124940802184233;\n  _f_fastHalfSin[2] = -0.0032225901625579573;\n  _f_fastHalfSin[3] = v;\n  var sign = _i_fastHalfSin[3] & 0x80000000;\n  _i_fastHalfSin[3] = _i_fastHalfSin[3] & 0x7FFFFFFF;\n  var qpprox = fourOverPi * v - fourOverPiSq * v * _f_fastHalfSin[3];\n  var qpproxsq = qpprox * qpprox;\n  _i_fastHalfSin[0] |= sign;\n  _i_fastHalfSin[1] |= sign;\n  _i_fastHalfSin[2] ^= sign;\n  return _q_fastHalfSin * qpprox + qpproxsq * (_f_fastHalfSin[0] + qpproxsq * (_f_fastHalfSin[1] + qpproxsq * _f_fastHalfSin[2]));\n}\n\nvar _q_fasterHalfSin = 0.78444488374548933;\n\nvar _a_fasterHalfSin = new ArrayBuffer(8);\n\nvar _i_fasterHalfSin = new Int32Array(_a_fasterHalfSin);\n\nvar _f_fasterHalfSin = new Float32Array(_a_fasterHalfSin);\n\nfunction fasterHalfSin(v) {\n  _f_fasterHalfSin[0] = 0.22308510060189463;\n  _f_fasterHalfSin[1] = v;\n  var sign = _i_fasterHalfSin[1] & 0x80000000;\n  _i_fasterHalfSin[1] &= 0x7FFFFFFF;\n  var qpprox = fourOverPi * v - fourOverPiSq * v * _f_fasterHalfSin[1];\n  _i_fasterHalfSin[0] |= sign;\n  return qpprox * (_q_fasterHalfSin + _f_fasterHalfSin[0] * qpprox);\n}\n\nexport function fastSin(v) {\n  var k = v * invTwoPi | 0;\n  var half = v < 0 ? -0.5 : 0.5;\n  return fastHalfSin((half + k) * twoPi - v);\n}\nexport function fasterSin(v) {\n  var k = v * invTwoPi | 0;\n  var half = v < 0 ? -0.5 : 0.5;\n  return fasterHalfSin((half + k) * twoPi - v);\n}\nexport function fastCos(v) {\n  return fastSin(v + halfPi);\n}\nexport function fasterCos(v) {\n  return fasterSin(v + halfPi);\n}\n\nfunction fastHalfCos(v) {\n  var offset = v > halfPi ? halfPiMinusTwoPi : halfPi;\n  return fastHalfSin(v + offset);\n}\n\nvar _p_fasterHalfCos = 0.54641335845679634;\n\nvar _a_fasterHalfCos = new ArrayBuffer(4);\n\nvar _i_fasterHalfCos = new Int32Array(_a_fasterHalfCos);\n\nvar _f_fasterHalfCos = new Float32Array(_a_fasterHalfCos);\n\nfunction fasterHalfCos(v) {\n  _f_fasterHalfCos[0] = v;\n  _i_fasterHalfCos[0] &= 0x7FFFFFFF;\n  var qpprox = 1.0 - twoOverPi * _f_fasterHalfCos[0];\n  return qpprox + _p_fasterHalfCos * qpprox * (1.0 - qpprox * qpprox);\n}\n\nexport function fastTan(v) {\n  var k = v * invTwoPi | 0;\n  var half = v < 0 ? -0.5 : 0.5;\n  var x = v - (half + k) * twoPi;\n  return fastHalfSin(x) / fastHalfCos(x);\n}\nexport function fasterTan(v) {\n  var k = v * invTwoPi | 0;\n  var half = v < 0 ? -0.5 : 0.5;\n  var x = v - (half + k) * twoPi;\n  return fasterHalfSin(x) / fasterHalfCos(x);\n}\nvar piOverFour = Math.PI / 4;\n/**\r\n * Adapted from:\r\n * \"Efficient approximations for the arctangent function\"\r\n * Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006\r\n */\n\nexport function fastAtan(v) {\n  return piOverFour * v - v * (Math.abs(v) - 1) * (0.2447 + 0.0663 * Math.abs(v));\n}\nexport function fastAtan2(y, x) {\n  // reduce range to [-1, 1] by flipping y/x so the larger is up\n  var t = Math.abs(x); // used to undo flipping\n\n  var opposite = Math.abs(y);\n  var adjacent = Math.max(t, opposite);\n  opposite = Math.min(t, opposite);\n  t = fastAtan(opposite / adjacent); // undo flipping\n\n  t = Math.abs(y) > Math.abs(x) ? halfPi - t : t;\n  t = x < 0.0 ? Math.PI - t : t;\n  t = y < 0.0 ? -t : t;\n  return t;\n}","map":{"version":3,"sources":["../../src/mol-math/approx.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * mostly adapted from https://gist.github.com/imbcmdth/6338194\r\n * which is ported from https://code.google.com/archive/p/fastapprox/ (BSD licensed)\r\n */\r\nvar _a_fastPow2 = new ArrayBuffer(4);\r\nvar _i_fastPow2 = new Int32Array(_a_fastPow2);\r\nvar _f_fastPow2 = new Float32Array(_a_fastPow2);\r\nexport function fastPow2(v) {\r\n    var offset = (v < 0) ? 1 : 0;\r\n    var clipNumber = (v < -126) ? -126 : v;\r\n    var w = clipNumber | 0;\r\n    var z = clipNumber - w + offset;\r\n    _i_fastPow2[0] = ((1 << 23) * (clipNumber + 121.2740575 + 27.7280233 / (4.84252568 - z) - 1.49012907 * z));\r\n    return _f_fastPow2[0];\r\n}\r\nvar _a_fasterPow2 = new ArrayBuffer(4);\r\nvar _i_fasterPow2 = new Int32Array(_a_fasterPow2);\r\nvar _f_fasterPow2 = new Float32Array(_a_fasterPow2);\r\nexport function fasterPow2(v) {\r\n    var clipNumber = (v < -126) ? -126 : v;\r\n    _i_fasterPow2[0] = ((1 << 23) * (clipNumber + 126.94269504));\r\n    return _f_fasterPow2[0];\r\n}\r\nexport function fastExp(v) {\r\n    return fastPow2(1.442695040 * v);\r\n}\r\nexport function fasterExp(v) {\r\n    return fasterPow2(1.442695040 * v);\r\n}\r\nvar _a_fastLog2 = new ArrayBuffer(8);\r\nvar _i_fastLog2 = new Int32Array(_a_fastLog2);\r\nvar _f_fastLog2 = new Float32Array(_a_fastLog2);\r\nexport function fastLog2(v) {\r\n    _f_fastLog2[0] = v;\r\n    _i_fastLog2[1] = (_i_fastLog2[0] & 0x007FFFFF) | 0x3f000000;\r\n    var t = _i_fastLog2[0] * 1.1920928955078125e-7;\r\n    return t - 124.22551499 - 1.498030302 * _f_fastLog2[1] - 1.72587999 / (0.3520887068 + _f_fastLog2[1]);\r\n}\r\n;\r\nvar _a_fasterLog2 = new ArrayBuffer(4);\r\nvar _i_fasterLog2 = new Int32Array(_a_fasterLog2);\r\nvar _f_fasterLog2 = new Float32Array(_a_fasterLog2);\r\nexport function fasterLog2(v) {\r\n    _f_fasterLog2[0] = v;\r\n    var t = _i_fasterLog2[0] * 1.1920928955078125e-7;\r\n    return t - 126.94269504;\r\n}\r\nexport function fastLog(v) {\r\n    return 0.6931471805599453 * fastLog2(v);\r\n}\r\nexport function fasterLog(v) {\r\n    return 0.6931471805599453 * fasterLog2(v);\r\n}\r\nexport function fastLog10(v) {\r\n    return 0.30102999566398114 * fastLog2(v);\r\n}\r\nexport function fasterLog10(v) {\r\n    return 0.30102999566398114 * fasterLog2(v);\r\n}\r\nexport function fastSinh(v) {\r\n    return 0.5 * (fastExp(v) - fastExp(-v));\r\n}\r\nexport function fasterSinh(v) {\r\n    return 0.5 * (fasterExp(v) - fasterExp(-v));\r\n}\r\nexport function fastCosh(v) {\r\n    return 0.5 * (fastExp(v) + fastExp(-v));\r\n}\r\nexport function fasterCosh(v) {\r\n    return 0.5 * (fasterExp(v) + fasterExp(-v));\r\n}\r\nexport function fastTanh(v) {\r\n    return -1.0 + 2.0 / (1.0 + fastExp(-2.0 * v));\r\n}\r\nexport function fasterTanh(v) {\r\n    return -1.0 + 2.0 / (1.0 + fasterExp(-2.0 * v));\r\n}\r\nvar halfPi = Math.PI / 2;\r\nvar twoPi = 2 * Math.PI;\r\nvar invTwoPi = 1 / (2 * Math.PI);\r\nvar twoOverPi = 2 / Math.PI;\r\nvar fourOverPi = 4 / Math.PI;\r\nvar fourOverPiSq = 4 / (Math.PI * Math.PI);\r\nvar halfPiMinusTwoPi = Math.PI / 2 - 2 * Math.PI;\r\nvar _q_fastHalfSin = 0.78444488374548933;\r\nvar _a_fastHalfSin = new ArrayBuffer(16);\r\nvar _i_fastHalfSin = new Int32Array(_a_fastHalfSin);\r\nvar _f_fastHalfSin = new Float32Array(_a_fastHalfSin);\r\nfunction fastHalfSin(v) {\r\n    _f_fastHalfSin[0] = 0.20363937680730309;\r\n    _f_fastHalfSin[1] = 0.015124940802184233;\r\n    _f_fastHalfSin[2] = -0.0032225901625579573;\r\n    _f_fastHalfSin[3] = v;\r\n    var sign = _i_fastHalfSin[3] & 0x80000000;\r\n    _i_fastHalfSin[3] = _i_fastHalfSin[3] & 0x7FFFFFFF;\r\n    var qpprox = fourOverPi * v - fourOverPiSq * v * _f_fastHalfSin[3];\r\n    var qpproxsq = qpprox * qpprox;\r\n    _i_fastHalfSin[0] |= sign;\r\n    _i_fastHalfSin[1] |= sign;\r\n    _i_fastHalfSin[2] ^= sign;\r\n    return _q_fastHalfSin * qpprox + qpproxsq * (_f_fastHalfSin[0] + qpproxsq * (_f_fastHalfSin[1] + qpproxsq * _f_fastHalfSin[2]));\r\n}\r\nvar _q_fasterHalfSin = 0.78444488374548933;\r\nvar _a_fasterHalfSin = new ArrayBuffer(8);\r\nvar _i_fasterHalfSin = new Int32Array(_a_fasterHalfSin);\r\nvar _f_fasterHalfSin = new Float32Array(_a_fasterHalfSin);\r\nfunction fasterHalfSin(v) {\r\n    _f_fasterHalfSin[0] = 0.22308510060189463;\r\n    _f_fasterHalfSin[1] = v;\r\n    var sign = _i_fasterHalfSin[1] & 0x80000000;\r\n    _i_fasterHalfSin[1] &= 0x7FFFFFFF;\r\n    var qpprox = fourOverPi * v - fourOverPiSq * v * _f_fasterHalfSin[1];\r\n    _i_fasterHalfSin[0] |= sign;\r\n    return qpprox * (_q_fasterHalfSin + _f_fasterHalfSin[0] * qpprox);\r\n}\r\nexport function fastSin(v) {\r\n    var k = (v * invTwoPi) | 0;\r\n    var half = (v < 0) ? -0.5 : 0.5;\r\n    return fastHalfSin((half + k) * twoPi - v);\r\n}\r\nexport function fasterSin(v) {\r\n    var k = (v * invTwoPi) | 0;\r\n    var half = (v < 0) ? -0.5 : 0.5;\r\n    return fasterHalfSin((half + k) * twoPi - v);\r\n}\r\nexport function fastCos(v) {\r\n    return fastSin(v + halfPi);\r\n}\r\nexport function fasterCos(v) {\r\n    return fasterSin(v + halfPi);\r\n}\r\nfunction fastHalfCos(v) {\r\n    var offset = (v > halfPi) ? halfPiMinusTwoPi : halfPi;\r\n    return fastHalfSin(v + offset);\r\n}\r\nvar _p_fasterHalfCos = 0.54641335845679634;\r\nvar _a_fasterHalfCos = new ArrayBuffer(4);\r\nvar _i_fasterHalfCos = new Int32Array(_a_fasterHalfCos);\r\nvar _f_fasterHalfCos = new Float32Array(_a_fasterHalfCos);\r\nfunction fasterHalfCos(v) {\r\n    _f_fasterHalfCos[0] = v;\r\n    _i_fasterHalfCos[0] &= 0x7FFFFFFF;\r\n    var qpprox = 1.0 - twoOverPi * _f_fasterHalfCos[0];\r\n    return qpprox + _p_fasterHalfCos * qpprox * (1.0 - qpprox * qpprox);\r\n}\r\nexport function fastTan(v) {\r\n    var k = (v * invTwoPi) | 0;\r\n    var half = (v < 0) ? -0.5 : 0.5;\r\n    var x = v - (half + k) * twoPi;\r\n    return fastHalfSin(x) / fastHalfCos(x);\r\n}\r\nexport function fasterTan(v) {\r\n    var k = (v * invTwoPi) | 0;\r\n    var half = (v < 0) ? -0.5 : 0.5;\r\n    var x = v - (half + k) * twoPi;\r\n    return fasterHalfSin(x) / fasterHalfCos(x);\r\n}\r\nvar piOverFour = Math.PI / 4;\r\n/**\r\n * Adapted from:\r\n * \"Efficient approximations for the arctangent function\"\r\n * Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006\r\n */\r\nexport function fastAtan(v) {\r\n    return piOverFour * v - v * (Math.abs(v) - 1) * (0.2447 + 0.0663 * Math.abs(v));\r\n}\r\nexport function fastAtan2(y, x) {\r\n    // reduce range to [-1, 1] by flipping y/x so the larger is up\r\n    var t = Math.abs(x); // used to undo flipping\r\n    var opposite = Math.abs(y);\r\n    var adjacent = Math.max(t, opposite);\r\n    opposite = Math.min(t, opposite);\r\n    t = fastAtan(opposite / adjacent);\r\n    // undo flipping\r\n    t = Math.abs(y) > Math.abs(x) ? halfPi - t : t;\r\n    t = x < 0.0 ? Math.PI - t : t;\r\n    t = y < 0.0 ? -t : t;\r\n    return t;\r\n}\r\n//# sourceMappingURL=approx.js.map"]},"metadata":{},"sourceType":"module"}