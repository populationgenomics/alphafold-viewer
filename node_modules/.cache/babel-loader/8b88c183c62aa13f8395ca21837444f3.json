{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createComputeRenderable } from '../../renderable';\nimport { createComputeRenderItem } from '../../webgl/render-item';\nimport { TextureSpec } from '../../renderable/schema';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { ValueCell } from '../../../mol-util';\nimport { decodeFloatRGB } from '../../../mol-util/float-packing';\nimport { QuadSchema, QuadValues } from '../util';\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\nimport { sum_frag } from '../../../mol-gl/shader/histogram-pyramid/sum.frag';\nimport { isWebGL2 } from '../../webgl/compat';\n\nvar HistopyramidSumSchema = __assign(__assign({}, QuadSchema), {\n  tTexture: TextureSpec('texture', 'rgba', 'float', 'nearest')\n});\n\nvar HistopyramidSumName = 'histopyramid-sum';\n\nfunction getHistopyramidSumRenderable(ctx, texture) {\n  if (ctx.namedComputeRenderables[HistopyramidSumName]) {\n    var v = ctx.namedComputeRenderables[HistopyramidSumName].values;\n    ValueCell.update(v.tTexture, texture);\n    ctx.namedComputeRenderables[HistopyramidSumName].update();\n  } else {\n    ctx.namedComputeRenderables[HistopyramidSumName] = createHistopyramidSumRenderable(ctx, texture);\n  }\n\n  return ctx.namedComputeRenderables[HistopyramidSumName];\n}\n\nfunction createHistopyramidSumRenderable(ctx, texture) {\n  var values = __assign(__assign({}, QuadValues), {\n    tTexture: ValueCell.create(texture)\n  });\n\n  var schema = __assign({}, HistopyramidSumSchema);\n\n  var shaderCode = ShaderCode('sum', quad_vert, sum_frag, {}, {\n    0: 'ivec4'\n  });\n  var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setRenderingDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.disable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.disable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.colorMask(true, true, true, true);\n  state.clearColor(0, 0, 0, 0);\n}\n\nvar sumBytes = new Uint8Array(4);\nvar sumInts = new Int32Array(4);\nexport function getHistopyramidSum(ctx, pyramidTopTexture) {\n  var gl = ctx.gl,\n      resources = ctx.resources;\n  var renderable = getHistopyramidSumRenderable(ctx, pyramidTopTexture);\n  ctx.state.currentRenderItemId = -1;\n\n  if (!ctx.namedFramebuffers[HistopyramidSumName]) {\n    ctx.namedFramebuffers[HistopyramidSumName] = resources.framebuffer();\n  }\n\n  var framebuffer = ctx.namedFramebuffers[HistopyramidSumName];\n\n  if (!ctx.namedTextures[HistopyramidSumName]) {\n    ctx.namedTextures[HistopyramidSumName] = isWebGL2(gl) ? resources.texture('image-int32', 'rgba', 'int', 'nearest') : resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\n    ctx.namedTextures[HistopyramidSumName].define(1, 1);\n  }\n\n  var sumTexture = ctx.namedTextures[HistopyramidSumName];\n  sumTexture.attachFramebuffer(framebuffer, 0);\n  setRenderingDefaults(ctx);\n  gl.viewport(0, 0, 1, 1);\n  renderable.render();\n  gl.finish();\n  ctx.readPixels(0, 0, 1, 1, isWebGL2(gl) ? sumInts : sumBytes);\n  ctx.unbindFramebuffer();\n  return isWebGL2(gl) ? sumInts[0] : decodeFloatRGB(sumBytes[0], sumBytes[1], sumBytes[2]);\n}","map":{"version":3,"sources":["../../../../src/mol-gl/compute/histogram-pyramid/sum.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAA4B,uBAA5B,QAA2D,kBAA3D;AAEA,SAAS,uBAAT,QAAwC,yBAAxC;AACA,SAAiB,WAAjB,QAAoC,yBAApC;AAEA,SAAS,UAAT,QAA2B,6BAA3B;AACA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,cAAT,QAA+B,iCAA/B;AACA,SAAS,UAAT,EAAqB,UAArB,QAAuC,SAAvC;AACA,SAAS,SAAT,QAA0B,kCAA1B;AACA,SAAS,QAAT,QAAyB,mDAAzB;AACA,SAAS,QAAT,QAAyB,oBAAzB;;AAEA,IAAM,qBAAqB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACpB,UADoB,CAAA,EACV;AACb,EAAA,QAAQ,EAAE,WAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,SAA7B;AADR,CADU,CAA3B;;AAMA,IAAM,mBAAmB,GAAG,kBAA5B;;AAEA,SAAS,4BAAT,CAAsC,GAAtC,EAAyD,OAAzD,EAAyE;AACrE,MAAI,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,CAAJ,EAAsD;AAClD,QAAM,CAAC,GAAG,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,EAAiD,MAA3D;AAEA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,QAAnB,EAA6B,OAA7B;AAEA,IAAA,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,EAAiD,MAAjD;AACH,GAND,MAMO;AACH,IAAA,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,IAAmD,+BAA+B,CAAC,GAAD,EAAM,OAAN,CAAlF;AACH;;AACD,SAAO,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,CAAP;AACH;;AAED,SAAS,+BAAT,CAAyC,GAAzC,EAA4D,OAA5D,EAA4E;AACxE,MAAM,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACL,UADK,CAAA,EACK;AACb,IAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,OAAjB;AADG,GADL,CAAZ;;AAKA,MAAM,MAAM,GAAA,QAAA,CAAA,EAAA,EAAQ,qBAAR,CAAZ;;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,EAA7B,EAAiC;AAAE,OAAG;AAAL,GAAjC,CAA7B;AACA,MAAM,UAAU,GAAG,uBAAuB,CAAC,GAAD,EAAM,WAAN,EAAmB,UAAnB,EAA+B,MAA/B,EAAuC,MAAvC,CAA1C;AAEA,SAAO,uBAAuB,CAAC,UAAD,EAAa,MAAb,CAA9B;AACH;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAA+C;AACnC,MAAA,EAAE,GAAY,GAAG,CAAf,EAAF;AAAA,MAAI,KAAK,GAAK,GAAG,CAAR,KAAT;AACR,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,SAAjB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,KAAjB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,UAAjB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,YAAjB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC;AACA,EAAA,KAAK,CAAC,UAAN,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACH;;AAED,IAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAjB;AACA,IAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAhB;AAEA,OAAM,SAAU,kBAAV,CAA6B,GAA7B,EAAgD,iBAAhD,EAA0E;AACpE,MAAA,EAAE,GAAgB,GAAG,CAAnB,EAAF;AAAA,MAAI,SAAS,GAAK,GAAG,CAAR,SAAb;AAER,MAAM,UAAU,GAAG,4BAA4B,CAAC,GAAD,EAAM,iBAAN,CAA/C;AACA,EAAA,GAAG,CAAC,KAAJ,CAAU,mBAAV,GAAgC,CAAC,CAAjC;;AAEA,MAAI,CAAC,GAAG,CAAC,iBAAJ,CAAsB,mBAAtB,CAAL,EAAiD;AAC7C,IAAA,GAAG,CAAC,iBAAJ,CAAsB,mBAAtB,IAA6C,SAAS,CAAC,WAAV,EAA7C;AACH;;AACD,MAAM,WAAW,GAAG,GAAG,CAAC,iBAAJ,CAAsB,mBAAtB,CAApB;;AAEA,MAAI,CAAC,GAAG,CAAC,aAAJ,CAAkB,mBAAlB,CAAL,EAA6C;AACzC,IAAA,GAAG,CAAC,aAAJ,CAAkB,mBAAlB,IAAyC,QAAQ,CAAC,EAAD,CAAR,GACnC,SAAS,CAAC,OAAV,CAAkB,aAAlB,EAAiC,MAAjC,EAAyC,KAAzC,EAAgD,SAAhD,CADmC,GAEnC,SAAS,CAAC,OAAV,CAAkB,aAAlB,EAAiC,MAAjC,EAAyC,OAAzC,EAAkD,SAAlD,CAFN;AAGA,IAAA,GAAG,CAAC,aAAJ,CAAkB,mBAAlB,EAAuC,MAAvC,CAA8C,CAA9C,EAAiD,CAAjD;AACH;;AACD,MAAM,UAAU,GAAG,GAAG,CAAC,aAAJ,CAAkB,mBAAlB,CAAnB;AACA,EAAA,UAAU,CAAC,iBAAX,CAA6B,WAA7B,EAA0C,CAA1C;AAEA,EAAA,oBAAoB,CAAC,GAAD,CAApB;AAEA,EAAA,EAAE,CAAC,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB;AACA,EAAA,UAAU,CAAC,MAAX;AACA,EAAA,EAAE,CAAC,MAAH;AAEA,EAAA,GAAG,CAAC,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,QAAQ,CAAC,EAAD,CAAR,GAAe,OAAf,GAAyB,QAApD;AACA,EAAA,GAAG,CAAC,iBAAJ;AAEA,SAAO,QAAQ,CAAC,EAAD,CAAR,GACD,OAAO,CAAC,CAAD,CADN,GAED,cAAc,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,QAAQ,CAAC,CAAD,CAAtB,EAA2B,QAAQ,CAAC,CAAD,CAAnC,CAFpB;AAGH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createComputeRenderable } from '../../renderable';\r\nimport { createComputeRenderItem } from '../../webgl/render-item';\r\nimport { TextureSpec } from '../../renderable/schema';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { decodeFloatRGB } from '../../../mol-util/float-packing';\r\nimport { QuadSchema, QuadValues } from '../util';\r\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\r\nimport { sum_frag } from '../../../mol-gl/shader/histogram-pyramid/sum.frag';\r\nimport { isWebGL2 } from '../../webgl/compat';\r\nvar HistopyramidSumSchema = __assign(__assign({}, QuadSchema), { tTexture: TextureSpec('texture', 'rgba', 'float', 'nearest') });\r\nvar HistopyramidSumName = 'histopyramid-sum';\r\nfunction getHistopyramidSumRenderable(ctx, texture) {\r\n    if (ctx.namedComputeRenderables[HistopyramidSumName]) {\r\n        var v = ctx.namedComputeRenderables[HistopyramidSumName].values;\r\n        ValueCell.update(v.tTexture, texture);\r\n        ctx.namedComputeRenderables[HistopyramidSumName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[HistopyramidSumName] = createHistopyramidSumRenderable(ctx, texture);\r\n    }\r\n    return ctx.namedComputeRenderables[HistopyramidSumName];\r\n}\r\nfunction createHistopyramidSumRenderable(ctx, texture) {\r\n    var values = __assign(__assign({}, QuadValues), { tTexture: ValueCell.create(texture) });\r\n    var schema = __assign({}, HistopyramidSumSchema);\r\n    var shaderCode = ShaderCode('sum', quad_vert, sum_frag, {}, { 0: 'ivec4' });\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setRenderingDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.disable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.disable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.colorMask(true, true, true, true);\r\n    state.clearColor(0, 0, 0, 0);\r\n}\r\nvar sumBytes = new Uint8Array(4);\r\nvar sumInts = new Int32Array(4);\r\nexport function getHistopyramidSum(ctx, pyramidTopTexture) {\r\n    var gl = ctx.gl, resources = ctx.resources;\r\n    var renderable = getHistopyramidSumRenderable(ctx, pyramidTopTexture);\r\n    ctx.state.currentRenderItemId = -1;\r\n    if (!ctx.namedFramebuffers[HistopyramidSumName]) {\r\n        ctx.namedFramebuffers[HistopyramidSumName] = resources.framebuffer();\r\n    }\r\n    var framebuffer = ctx.namedFramebuffers[HistopyramidSumName];\r\n    if (!ctx.namedTextures[HistopyramidSumName]) {\r\n        ctx.namedTextures[HistopyramidSumName] = isWebGL2(gl)\r\n            ? resources.texture('image-int32', 'rgba', 'int', 'nearest')\r\n            : resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\r\n        ctx.namedTextures[HistopyramidSumName].define(1, 1);\r\n    }\r\n    var sumTexture = ctx.namedTextures[HistopyramidSumName];\r\n    sumTexture.attachFramebuffer(framebuffer, 0);\r\n    setRenderingDefaults(ctx);\r\n    gl.viewport(0, 0, 1, 1);\r\n    renderable.render();\r\n    gl.finish();\r\n    ctx.readPixels(0, 0, 1, 1, isWebGL2(gl) ? sumInts : sumBytes);\r\n    ctx.unbindFramebuffer();\r\n    return isWebGL2(gl)\r\n        ? sumInts[0]\r\n        : decodeFloatRGB(sumBytes[0], sumBytes[1], sumBytes[2]);\r\n}\r\n//# sourceMappingURL=sum.js.map"]},"metadata":{},"sourceType":"module"}