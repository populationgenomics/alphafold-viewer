{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { idFactory } from '../../mol-util/id-factory';\nimport { isDebugMode } from '../../mol-util/debug';\nvar getNextShaderId = idFactory();\n\nfunction addLineNumbers(source) {\n  var lines = source.split('\\n');\n\n  for (var i = 0; i < lines.length; ++i) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n\n  return lines.join('\\n');\n}\n\nexport function getShader(gl, props) {\n  var type = props.type,\n      source = props.source;\n  var shader = gl.createShader(type === 'vert' ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\n\n  if (shader === null) {\n    throw new Error(\"Error creating \" + type + \" shader\");\n  }\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (isDebugMode && gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n    console.warn(\"'\" + type + \"' shader info log '\" + gl.getShaderInfoLog(shader) + \"'\\n\" + addLineNumbers(source));\n    throw new Error(\"Error compiling \" + type + \" shader\");\n  }\n\n  return shader;\n}\nexport function createShader(gl, props) {\n  var shader = getShader(gl, props);\n  return {\n    id: getNextShaderId(),\n    attach: function (program) {\n      gl.attachShader(program, shader);\n    },\n    reset: function () {\n      shader = getShader(gl, props);\n    },\n    destroy: function () {\n      gl.deleteShader(shader);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/shader.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,SAAT,QAA0B,2BAA1B;AAEA,SAAS,WAAT,QAA4B,sBAA5B;AAEA,IAAM,eAAe,GAAG,SAAS,EAAjC;;AAEA,SAAS,cAAT,CAAwB,MAAxB,EAAsC;AAClC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACnC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAY,CAAC,GAAG,CAAL,GAAU,IAAV,GAAiB,KAAK,CAAC,CAAD,CAAjC;AACH;;AACD,SAAO,KAAK,CAAC,IAAN,CAAW,IAAX,CAAP;AACH;;AAWD,OAAM,SAAU,SAAV,CAAoB,EAApB,EAA4C,KAA5C,EAA8D;AACxD,MAAA,IAAI,GAAa,KAAK,CAAlB,IAAJ;AAAA,MAAM,MAAM,GAAK,KAAK,CAAV,MAAZ;AACR,MAAM,MAAM,GAAG,EAAE,CAAC,YAAH,CAAgB,IAAI,KAAK,MAAT,GAAkB,EAAE,CAAC,aAArB,GAAqC,EAAE,CAAC,eAAxD,CAAf;;AACA,MAAI,MAAM,KAAK,IAAf,EAAqB;AACjB,UAAM,IAAI,KAAJ,CAAU,oBAAkB,IAAlB,GAAsB,SAAhC,CAAN;AACH;;AAED,EAAA,EAAE,CAAC,YAAH,CAAgB,MAAhB,EAAwB,MAAxB;AACA,EAAA,EAAE,CAAC,aAAH,CAAiB,MAAjB;;AAEA,MAAI,WAAW,IAAI,EAAE,CAAC,kBAAH,CAAsB,MAAtB,EAA8B,EAAE,CAAC,cAAjC,MAAqD,KAAxE,EAA+E;AAC3E,IAAA,OAAO,CAAC,IAAR,CAAa,MAAI,IAAJ,GAAQ,qBAAR,GAA8B,EAAE,CAAC,gBAAH,CAAoB,MAApB,CAA9B,GAAyD,KAAzD,GAA+D,cAAc,CAAC,MAAD,CAA1F;AACA,UAAM,IAAI,KAAJ,CAAU,qBAAmB,IAAnB,GAAuB,SAAjC,CAAN;AACH;;AAED,SAAO,MAAP;AACH;AAED,OAAM,SAAU,YAAV,CAAuB,EAAvB,EAA+C,KAA/C,EAAiE;AACnE,MAAI,MAAM,GAAG,SAAS,CAAC,EAAD,EAAK,KAAL,CAAtB;AAEA,SAAO;AACH,IAAA,EAAE,EAAE,eAAe,EADhB;AAEH,IAAA,MAAM,EAAE,UAAC,OAAD,EAAsB;AAC1B,MAAA,EAAE,CAAC,YAAH,CAAgB,OAAhB,EAAyB,MAAzB;AACH,KAJE;AAMH,IAAA,KAAK,EAAE,YAAA;AACH,MAAA,MAAM,GAAG,SAAS,CAAC,EAAD,EAAK,KAAL,CAAlB;AACH,KARE;AASH,IAAA,OAAO,EAAE,YAAA;AACL,MAAA,EAAE,CAAC,YAAH,CAAgB,MAAhB;AACH;AAXE,GAAP;AAaH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { idFactory } from '../../mol-util/id-factory';\r\nimport { isDebugMode } from '../../mol-util/debug';\r\nvar getNextShaderId = idFactory();\r\nfunction addLineNumbers(source) {\r\n    var lines = source.split('\\n');\r\n    for (var i = 0; i < lines.length; ++i) {\r\n        lines[i] = (i + 1) + ': ' + lines[i];\r\n    }\r\n    return lines.join('\\n');\r\n}\r\nexport function getShader(gl, props) {\r\n    var type = props.type, source = props.source;\r\n    var shader = gl.createShader(type === 'vert' ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\r\n    if (shader === null) {\r\n        throw new Error(\"Error creating \" + type + \" shader\");\r\n    }\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (isDebugMode && gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n        console.warn(\"'\" + type + \"' shader info log '\" + gl.getShaderInfoLog(shader) + \"'\\n\" + addLineNumbers(source));\r\n        throw new Error(\"Error compiling \" + type + \" shader\");\r\n    }\r\n    return shader;\r\n}\r\nexport function createShader(gl, props) {\r\n    var shader = getShader(gl, props);\r\n    return {\r\n        id: getNextShaderId(),\r\n        attach: function (program) {\r\n            gl.attachShader(program, shader);\r\n        },\r\n        reset: function () {\r\n            shader = getShader(gl, props);\r\n        },\r\n        destroy: function () {\r\n            gl.deleteShader(shader);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=shader.js.map"]},"metadata":{},"sourceType":"module"}