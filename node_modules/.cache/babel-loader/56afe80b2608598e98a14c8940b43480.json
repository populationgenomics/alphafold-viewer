{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Column } from '../../../../mol-data/db';\nimport { CifWriter } from '../../../../mol-io/writer/cif';\nimport { getModelMmCifCategory, getUniqueResidueNamesFromStructures } from './utils';\nvar CifCategory = CifWriter.Category;\nexport var _chem_comp = {\n  name: 'chem_comp',\n  instance: function (_a) {\n    var firstModel = _a.firstModel,\n        structures = _a.structures,\n        cache = _a.cache;\n    var chem_comp = getModelMmCifCategory(structures[0].model, 'chem_comp');\n    if (!chem_comp) return CifCategory.Empty;\n    var id = chem_comp.id;\n    var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\n    var indices = Column.indicesOf(id, function (id) {\n      return names.has(id);\n    });\n    return CifCategory.ofTable(chem_comp, indices);\n  }\n};\nexport var _chem_comp_bond = {\n  name: 'chem_comp_bond',\n  instance: function (_a) {\n    var firstModel = _a.firstModel,\n        structures = _a.structures,\n        cache = _a.cache;\n    var chem_comp_bond = getModelMmCifCategory(structures[0].model, 'chem_comp_bond');\n    if (!chem_comp_bond) return CifCategory.Empty;\n    var comp_id = chem_comp_bond.comp_id;\n    var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\n    var indices = Column.indicesOf(comp_id, function (id) {\n      return names.has(id);\n    });\n    return CifCategory.ofTable(chem_comp_bond, indices);\n  }\n};\nexport var _pdbx_chem_comp_identifier = {\n  name: 'pdbx_chem_comp_identifier',\n  instance: function (_a) {\n    var firstModel = _a.firstModel,\n        structures = _a.structures,\n        cache = _a.cache;\n    var pdbx_chem_comp_identifier = getModelMmCifCategory(firstModel, 'pdbx_chem_comp_identifier');\n    if (!pdbx_chem_comp_identifier) return CifCategory.Empty;\n    var comp_id = pdbx_chem_comp_identifier.comp_id;\n    var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\n    var indices = Column.indicesOf(comp_id, function (id) {\n      return names.has(id);\n    });\n    return CifCategory.ofTable(pdbx_chem_comp_identifier, indices);\n  }\n};\nexport var _pdbx_nonpoly_scheme = {\n  name: 'pdbx_nonpoly_scheme',\n  instance: function (_a) {\n    var firstModel = _a.firstModel,\n        structures = _a.structures,\n        cache = _a.cache;\n    var pdbx_nonpoly_scheme = getModelMmCifCategory(firstModel, 'pdbx_nonpoly_scheme');\n    if (!pdbx_nonpoly_scheme) return CifCategory.Empty; // TODO: filter?\n\n    return CifCategory.ofTable(pdbx_nonpoly_scheme);\n  }\n};","map":{"version":3,"sources":["../../../../../src/mol-model/structure/export/categories/misc.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,MAAT,QAAuB,yBAAvB;AACA,SAAS,SAAT,QAA0B,+BAA1B;AAEA,SAAS,qBAAT,EAAgC,mCAAhC,QAA2E,SAA3E;AACA,IAAO,WAAW,GAAG,SAAS,CAAC,QAA/B;AAEA,OAAO,IAAM,UAAU,GAAkC;AACrD,EAAA,IAAI,EAAE,WAD+C;AAErD,EAAA,QAAQ,EAAA,UAAC,EAAD,EAAkC;QAA/B,UAAU,GAAA,EAAA,CAAA,U;QAAE,UAAU,GAAA,EAAA,CAAA,U;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpC,QAAM,SAAS,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,KAAf,EAAsB,WAAtB,CAAvC;AACA,QAAI,CAAC,SAAL,EAAgB,OAAO,WAAW,CAAC,KAAnB;AACR,QAAA,EAAE,GAAK,SAAS,CAAd,EAAF;AACR,QAAM,KAAK,GAAG,KAAK,CAAC,kBAAN,KAA6B,KAAK,CAAC,kBAAN,GAA2B,mCAAmC,CAAC,UAAD,CAA3F,CAAd;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,EAAjB,EAAqB,UAAA,EAAA,EAAE;AAAI,aAAA,KAAK,CAAC,GAAN,CAAA,EAAA,CAAA;AAAa,KAAxC,CAAhB;AACA,WAAO,WAAW,CAAC,OAAZ,CAAoB,SAApB,EAA+B,OAA/B,CAAP;AACH;AAToD,CAAlD;AAYP,OAAO,IAAM,eAAe,GAAkC;AAC1D,EAAA,IAAI,EAAE,gBADoD;AAE1D,EAAA,QAAQ,EAAA,UAAC,EAAD,EAAkC;QAA/B,UAAU,GAAA,EAAA,CAAA,U;QAAE,UAAU,GAAA,EAAA,CAAA,U;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpC,QAAM,cAAc,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,KAAf,EAAsB,gBAAtB,CAA5C;AACA,QAAI,CAAC,cAAL,EAAqB,OAAO,WAAW,CAAC,KAAnB;AACb,QAAA,OAAO,GAAK,cAAc,CAAnB,OAAP;AACR,QAAM,KAAK,GAAG,KAAK,CAAC,kBAAN,KAA6B,KAAK,CAAC,kBAAN,GAA2B,mCAAmC,CAAC,UAAD,CAA3F,CAAd;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,UAAA,EAAA,EAAE;AAAI,aAAA,KAAK,CAAC,GAAN,CAAA,EAAA,CAAA;AAAa,KAA7C,CAAhB;AACA,WAAO,WAAW,CAAC,OAAZ,CAAoB,cAApB,EAAoC,OAApC,CAAP;AACH;AATyD,CAAvD;AAYP,OAAO,IAAM,0BAA0B,GAAkC;AACrE,EAAA,IAAI,EAAE,2BAD+D;AAErE,EAAA,QAAQ,EAAA,UAAC,EAAD,EAAkC;QAA/B,UAAU,GAAA,EAAA,CAAA,U;QAAE,UAAU,GAAA,EAAA,CAAA,U;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpC,QAAM,yBAAyB,GAAG,qBAAqB,CAAC,UAAD,EAAa,2BAAb,CAAvD;AACA,QAAI,CAAC,yBAAL,EAAgC,OAAO,WAAW,CAAC,KAAnB;AACxB,QAAA,OAAO,GAAK,yBAAyB,CAA9B,OAAP;AACR,QAAM,KAAK,GAAG,KAAK,CAAC,kBAAN,KAA6B,KAAK,CAAC,kBAAN,GAA2B,mCAAmC,CAAC,UAAD,CAA3F,CAAd;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,UAAA,EAAA,EAAE;AAAI,aAAA,KAAK,CAAC,GAAN,CAAA,EAAA,CAAA;AAAa,KAA7C,CAAhB;AACA,WAAO,WAAW,CAAC,OAAZ,CAAoB,yBAApB,EAA+C,OAA/C,CAAP;AACH;AAToE,CAAlE;AAYP,OAAO,IAAM,oBAAoB,GAAkC;AAC/D,EAAA,IAAI,EAAE,qBADyD;AAE/D,EAAA,QAAQ,EAAA,UAAC,EAAD,EAAkC;QAA/B,UAAU,GAAA,EAAA,CAAA,U;QAAE,UAAU,GAAA,EAAA,CAAA,U;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpC,QAAM,mBAAmB,GAAG,qBAAqB,CAAC,UAAD,EAAa,qBAAb,CAAjD;AACA,QAAI,CAAC,mBAAL,EAA0B,OAAO,WAAW,CAAC,KAAnB,CAFY,CAGtC;;AACA,WAAO,WAAW,CAAC,OAAZ,CAAoB,mBAApB,CAAP;AACH;AAP8D,CAA5D","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Column } from '../../../../mol-data/db';\r\nimport { CifWriter } from '../../../../mol-io/writer/cif';\r\nimport { getModelMmCifCategory, getUniqueResidueNamesFromStructures } from './utils';\r\nvar CifCategory = CifWriter.Category;\r\nexport var _chem_comp = {\r\n    name: 'chem_comp',\r\n    instance: function (_a) {\r\n        var firstModel = _a.firstModel, structures = _a.structures, cache = _a.cache;\r\n        var chem_comp = getModelMmCifCategory(structures[0].model, 'chem_comp');\r\n        if (!chem_comp)\r\n            return CifCategory.Empty;\r\n        var id = chem_comp.id;\r\n        var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\r\n        var indices = Column.indicesOf(id, function (id) { return names.has(id); });\r\n        return CifCategory.ofTable(chem_comp, indices);\r\n    }\r\n};\r\nexport var _chem_comp_bond = {\r\n    name: 'chem_comp_bond',\r\n    instance: function (_a) {\r\n        var firstModel = _a.firstModel, structures = _a.structures, cache = _a.cache;\r\n        var chem_comp_bond = getModelMmCifCategory(structures[0].model, 'chem_comp_bond');\r\n        if (!chem_comp_bond)\r\n            return CifCategory.Empty;\r\n        var comp_id = chem_comp_bond.comp_id;\r\n        var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\r\n        var indices = Column.indicesOf(comp_id, function (id) { return names.has(id); });\r\n        return CifCategory.ofTable(chem_comp_bond, indices);\r\n    }\r\n};\r\nexport var _pdbx_chem_comp_identifier = {\r\n    name: 'pdbx_chem_comp_identifier',\r\n    instance: function (_a) {\r\n        var firstModel = _a.firstModel, structures = _a.structures, cache = _a.cache;\r\n        var pdbx_chem_comp_identifier = getModelMmCifCategory(firstModel, 'pdbx_chem_comp_identifier');\r\n        if (!pdbx_chem_comp_identifier)\r\n            return CifCategory.Empty;\r\n        var comp_id = pdbx_chem_comp_identifier.comp_id;\r\n        var names = cache.uniqueResidueNames || (cache.uniqueResidueNames = getUniqueResidueNamesFromStructures(structures));\r\n        var indices = Column.indicesOf(comp_id, function (id) { return names.has(id); });\r\n        return CifCategory.ofTable(pdbx_chem_comp_identifier, indices);\r\n    }\r\n};\r\nexport var _pdbx_nonpoly_scheme = {\r\n    name: 'pdbx_nonpoly_scheme',\r\n    instance: function (_a) {\r\n        var firstModel = _a.firstModel, structures = _a.structures, cache = _a.cache;\r\n        var pdbx_nonpoly_scheme = getModelMmCifCategory(firstModel, 'pdbx_nonpoly_scheme');\r\n        if (!pdbx_nonpoly_scheme)\r\n            return CifCategory.Empty;\r\n        // TODO: filter?\r\n        return CifCategory.ofTable(pdbx_nonpoly_scheme);\r\n    }\r\n};\r\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}