{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Matrix } from './matrix'; // svd method adapted from http://inspirit.github.io/jsfeat/ MIT Eugene Zatepyakin\n\nexport function swap(A, i0, i1, t) {\n  t = A[i0];\n  A[i0] = A[i1];\n  A[i1] = t;\n}\nexport function hypot(a, b) {\n  a = Math.abs(a);\n  b = Math.abs(b);\n\n  if (a > b) {\n    b /= a;\n    return a * Math.sqrt(1.0 + b * b);\n  }\n\n  if (b > 0) {\n    a /= b;\n    return b * Math.sqrt(1.0 + a * a);\n  }\n\n  return 0.0;\n}\nvar EPSILON = 0.0000001192092896;\nvar FLT_MIN = 1E-37;\nexport function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {\n  var eps = EPSILON * 2.0;\n  var minval = FLT_MIN;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var iter = 0;\n  var maxIter = Math.max(m, 30);\n  var Ai = 0;\n  var Aj = 0;\n  var Vi = 0;\n  var Vj = 0;\n  var changed = 0;\n  var c = 0.0;\n  var s = 0.0;\n  var t = 0.0;\n  var t0 = 0.0;\n  var t1 = 0.0;\n  var sd = 0.0;\n  var beta = 0.0;\n  var gamma = 0.0;\n  var delta = 0.0;\n  var a = 0.0;\n  var p = 0.0;\n  var b = 0.0;\n  var seed = 0x1234;\n  var val = 0.0;\n  var val0 = 0.0;\n  var asum = 0.0;\n  var W = new Float64Array(n << 3);\n\n  for (; i < n; i++) {\n    for (k = 0, sd = 0; k < m; k++) {\n      t = At[i * astep + k];\n      sd += t * t;\n    }\n\n    W[i] = sd;\n\n    if (Vt) {\n      for (k = 0; k < n; k++) {\n        Vt[i * vstep + k] = 0;\n      }\n\n      Vt[i * vstep + i] = 1;\n    }\n  }\n\n  for (; iter < maxIter; iter++) {\n    changed = 0;\n\n    for (i = 0; i < n - 1; i++) {\n      for (j = i + 1; j < n; j++) {\n        Ai = i * astep | 0;\n        Aj = j * astep | 0;\n        a = W[i];\n        p = 0;\n        b = W[j];\n        k = 2;\n        p += At[Ai] * At[Aj];\n        p += At[Ai + 1] * At[Aj + 1];\n\n        for (; k < m; k++) {\n          p += At[Ai + k] * At[Aj + k];\n        }\n\n        if (Math.abs(p) <= eps * Math.sqrt(a * b)) continue;\n        p *= 2.0;\n        beta = a - b;\n        gamma = hypot(p, beta);\n\n        if (beta < 0) {\n          delta = (gamma - beta) * 0.5;\n          s = Math.sqrt(delta / gamma);\n          c = p / (gamma * s * 2.0);\n        } else {\n          c = Math.sqrt((gamma + beta) / (gamma * 2.0));\n          s = p / (gamma * c * 2.0);\n        }\n\n        a = 0.0;\n        b = 0.0;\n        k = 2; // unroll\n\n        t0 = c * At[Ai] + s * At[Aj];\n        t1 = -s * At[Ai] + c * At[Aj];\n        At[Ai] = t0;\n        At[Aj] = t1;\n        a += t0 * t0;\n        b += t1 * t1;\n        t0 = c * At[Ai + 1] + s * At[Aj + 1];\n        t1 = -s * At[Ai + 1] + c * At[Aj + 1];\n        At[Ai + 1] = t0;\n        At[Aj + 1] = t1;\n        a += t0 * t0;\n        b += t1 * t1;\n\n        for (; k < m; k++) {\n          t0 = c * At[Ai + k] + s * At[Aj + k];\n          t1 = -s * At[Ai + k] + c * At[Aj + k];\n          At[Ai + k] = t0;\n          At[Aj + k] = t1;\n          a += t0 * t0;\n          b += t1 * t1;\n        }\n\n        W[i] = a;\n        W[j] = b;\n        changed = 1;\n\n        if (Vt) {\n          Vi = i * vstep | 0;\n          Vj = j * vstep | 0;\n          k = 2;\n          t0 = c * Vt[Vi] + s * Vt[Vj];\n          t1 = -s * Vt[Vi] + c * Vt[Vj];\n          Vt[Vi] = t0;\n          Vt[Vj] = t1;\n          t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];\n          t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];\n          Vt[Vi + 1] = t0;\n          Vt[Vj + 1] = t1;\n\n          for (; k < n; k++) {\n            t0 = c * Vt[Vi + k] + s * Vt[Vj + k];\n            t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];\n            Vt[Vi + k] = t0;\n            Vt[Vj + k] = t1;\n          }\n        }\n      }\n    }\n\n    if (changed === 0) break;\n  }\n\n  for (i = 0; i < n; i++) {\n    for (k = 0, sd = 0; k < m; k++) {\n      t = At[i * astep + k];\n      sd += t * t;\n    }\n\n    W[i] = Math.sqrt(sd);\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    j = i;\n\n    for (k = i + 1; k < n; k++) {\n      if (W[j] < W[k]) {\n        j = k;\n      }\n    }\n\n    if (i !== j) {\n      swap(W, i, j, sd);\n\n      if (Vt) {\n        for (k = 0; k < m; k++) {\n          swap(At, i * astep + k, j * astep + k, t);\n        }\n\n        for (k = 0; k < n; k++) {\n          swap(Vt, i * vstep + k, j * vstep + k, t);\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    _W[i] = W[i];\n  }\n\n  if (!Vt) {\n    return;\n  }\n\n  for (i = 0; i < n1; i++) {\n    sd = i < n ? W[i] : 0;\n\n    while (sd <= minval) {\n      // if we got a zero singular value, then in order to get the corresponding left singular vector\n      // we generate a random vector, project it to the previously computed left singular vectors,\n      // subtract the projection and normalize the difference.\n      val0 = 1.0 / m;\n\n      for (k = 0; k < m; k++) {\n        seed = seed * 214013 + 2531011;\n        val = (seed >> 16 & 0x7fff & 256) !== 0 ? val0 : -val0;\n        At[i * astep + k] = val;\n      }\n\n      for (iter = 0; iter < 2; iter++) {\n        for (j = 0; j < i; j++) {\n          sd = 0;\n\n          for (k = 0; k < m; k++) {\n            sd += At[i * astep + k] * At[j * astep + k];\n          }\n\n          asum = 0.0;\n\n          for (k = 0; k < m; k++) {\n            t = At[i * astep + k] - sd * At[j * astep + k];\n            At[i * astep + k] = t;\n            asum += Math.abs(t);\n          }\n\n          asum = asum ? 1.0 / asum : 0;\n\n          for (k = 0; k < m; k++) {\n            At[i * astep + k] *= asum;\n          }\n        }\n      }\n\n      sd = 0;\n\n      for (k = 0; k < m; k++) {\n        t = At[i * astep + k];\n        sd += t * t;\n      }\n\n      sd = Math.sqrt(sd);\n    }\n\n    s = 1.0 / sd;\n\n    for (k = 0; k < m; k++) {\n      At[i * astep + k] *= s;\n    }\n  }\n}\nexport function svd(A, W, U, V) {\n  var at = 0;\n  var i = 0;\n  var _m = A.rows;\n  var _n = A.cols;\n  var m = _m;\n  var n = _n;\n\n  if (m < n) {\n    at = 1;\n    i = m;\n    m = n;\n    n = i;\n  }\n\n  var amt = Matrix.create(m, m);\n  var wmt = Matrix.create(1, n);\n  var vmt = Matrix.create(n, n);\n\n  if (at === 0) {\n    Matrix.transpose(amt, A);\n  } else {\n    for (i = 0; i < _n * _m; i++) {\n      amt.data[i] = A.data[i];\n    }\n\n    for (; i < n * m; i++) {\n      amt.data[i] = 0;\n    }\n  }\n\n  JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);\n\n  if (W) {\n    for (i = 0; i < n; i++) {\n      W.data[i] = wmt.data[i];\n    }\n\n    for (; i < _n; i++) {\n      W.data[i] = 0;\n    }\n  }\n\n  if (at === 0) {\n    if (U) Matrix.transpose(U, amt);\n    if (V) Matrix.transpose(V, vmt);\n  } else {\n    if (U) Matrix.transpose(U, vmt);\n    if (V) Matrix.transpose(V, amt);\n  }\n}","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/matrix/svd.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Matrix } from './matrix';\r\n// svd method adapted from http://inspirit.github.io/jsfeat/ MIT Eugene Zatepyakin\r\nexport function swap(A, i0, i1, t) {\r\n    t = A[i0];\r\n    A[i0] = A[i1];\r\n    A[i1] = t;\r\n}\r\nexport function hypot(a, b) {\r\n    a = Math.abs(a);\r\n    b = Math.abs(b);\r\n    if (a > b) {\r\n        b /= a;\r\n        return a * Math.sqrt(1.0 + b * b);\r\n    }\r\n    if (b > 0) {\r\n        a /= b;\r\n        return b * Math.sqrt(1.0 + a * a);\r\n    }\r\n    return 0.0;\r\n}\r\nvar EPSILON = 0.0000001192092896;\r\nvar FLT_MIN = 1E-37;\r\nexport function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {\r\n    var eps = EPSILON * 2.0;\r\n    var minval = FLT_MIN;\r\n    var i = 0;\r\n    var j = 0;\r\n    var k = 0;\r\n    var iter = 0;\r\n    var maxIter = Math.max(m, 30);\r\n    var Ai = 0;\r\n    var Aj = 0;\r\n    var Vi = 0;\r\n    var Vj = 0;\r\n    var changed = 0;\r\n    var c = 0.0;\r\n    var s = 0.0;\r\n    var t = 0.0;\r\n    var t0 = 0.0;\r\n    var t1 = 0.0;\r\n    var sd = 0.0;\r\n    var beta = 0.0;\r\n    var gamma = 0.0;\r\n    var delta = 0.0;\r\n    var a = 0.0;\r\n    var p = 0.0;\r\n    var b = 0.0;\r\n    var seed = 0x1234;\r\n    var val = 0.0;\r\n    var val0 = 0.0;\r\n    var asum = 0.0;\r\n    var W = new Float64Array(n << 3);\r\n    for (; i < n; i++) {\r\n        for (k = 0, sd = 0; k < m; k++) {\r\n            t = At[i * astep + k];\r\n            sd += t * t;\r\n        }\r\n        W[i] = sd;\r\n        if (Vt) {\r\n            for (k = 0; k < n; k++) {\r\n                Vt[i * vstep + k] = 0;\r\n            }\r\n            Vt[i * vstep + i] = 1;\r\n        }\r\n    }\r\n    for (; iter < maxIter; iter++) {\r\n        changed = 0;\r\n        for (i = 0; i < n - 1; i++) {\r\n            for (j = i + 1; j < n; j++) {\r\n                Ai = (i * astep) | 0;\r\n                Aj = (j * astep) | 0;\r\n                a = W[i];\r\n                p = 0;\r\n                b = W[j];\r\n                k = 2;\r\n                p += At[Ai] * At[Aj];\r\n                p += At[Ai + 1] * At[Aj + 1];\r\n                for (; k < m; k++) {\r\n                    p += At[Ai + k] * At[Aj + k];\r\n                }\r\n                if (Math.abs(p) <= eps * Math.sqrt(a * b))\r\n                    continue;\r\n                p *= 2.0;\r\n                beta = a - b;\r\n                gamma = hypot(p, beta);\r\n                if (beta < 0) {\r\n                    delta = (gamma - beta) * 0.5;\r\n                    s = Math.sqrt(delta / gamma);\r\n                    c = (p / (gamma * s * 2.0));\r\n                }\r\n                else {\r\n                    c = Math.sqrt((gamma + beta) / (gamma * 2.0));\r\n                    s = (p / (gamma * c * 2.0));\r\n                }\r\n                a = 0.0;\r\n                b = 0.0;\r\n                k = 2; // unroll\r\n                t0 = c * At[Ai] + s * At[Aj];\r\n                t1 = -s * At[Ai] + c * At[Aj];\r\n                At[Ai] = t0;\r\n                At[Aj] = t1;\r\n                a += t0 * t0;\r\n                b += t1 * t1;\r\n                t0 = c * At[Ai + 1] + s * At[Aj + 1];\r\n                t1 = -s * At[Ai + 1] + c * At[Aj + 1];\r\n                At[Ai + 1] = t0;\r\n                At[Aj + 1] = t1;\r\n                a += t0 * t0;\r\n                b += t1 * t1;\r\n                for (; k < m; k++) {\r\n                    t0 = c * At[Ai + k] + s * At[Aj + k];\r\n                    t1 = -s * At[Ai + k] + c * At[Aj + k];\r\n                    At[Ai + k] = t0;\r\n                    At[Aj + k] = t1;\r\n                    a += t0 * t0;\r\n                    b += t1 * t1;\r\n                }\r\n                W[i] = a;\r\n                W[j] = b;\r\n                changed = 1;\r\n                if (Vt) {\r\n                    Vi = (i * vstep) | 0;\r\n                    Vj = (j * vstep) | 0;\r\n                    k = 2;\r\n                    t0 = c * Vt[Vi] + s * Vt[Vj];\r\n                    t1 = -s * Vt[Vi] + c * Vt[Vj];\r\n                    Vt[Vi] = t0;\r\n                    Vt[Vj] = t1;\r\n                    t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];\r\n                    t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];\r\n                    Vt[Vi + 1] = t0;\r\n                    Vt[Vj + 1] = t1;\r\n                    for (; k < n; k++) {\r\n                        t0 = c * Vt[Vi + k] + s * Vt[Vj + k];\r\n                        t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];\r\n                        Vt[Vi + k] = t0;\r\n                        Vt[Vj + k] = t1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (changed === 0)\r\n            break;\r\n    }\r\n    for (i = 0; i < n; i++) {\r\n        for (k = 0, sd = 0; k < m; k++) {\r\n            t = At[i * astep + k];\r\n            sd += t * t;\r\n        }\r\n        W[i] = Math.sqrt(sd);\r\n    }\r\n    for (i = 0; i < n - 1; i++) {\r\n        j = i;\r\n        for (k = i + 1; k < n; k++) {\r\n            if (W[j] < W[k]) {\r\n                j = k;\r\n            }\r\n        }\r\n        if (i !== j) {\r\n            swap(W, i, j, sd);\r\n            if (Vt) {\r\n                for (k = 0; k < m; k++) {\r\n                    swap(At, i * astep + k, j * astep + k, t);\r\n                }\r\n                for (k = 0; k < n; k++) {\r\n                    swap(Vt, i * vstep + k, j * vstep + k, t);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (i = 0; i < n; i++) {\r\n        _W[i] = W[i];\r\n    }\r\n    if (!Vt) {\r\n        return;\r\n    }\r\n    for (i = 0; i < n1; i++) {\r\n        sd = i < n ? W[i] : 0;\r\n        while (sd <= minval) {\r\n            // if we got a zero singular value, then in order to get the corresponding left singular vector\r\n            // we generate a random vector, project it to the previously computed left singular vectors,\r\n            // subtract the projection and normalize the difference.\r\n            val0 = (1.0 / m);\r\n            for (k = 0; k < m; k++) {\r\n                seed = (seed * 214013 + 2531011);\r\n                val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;\r\n                At[i * astep + k] = val;\r\n            }\r\n            for (iter = 0; iter < 2; iter++) {\r\n                for (j = 0; j < i; j++) {\r\n                    sd = 0;\r\n                    for (k = 0; k < m; k++) {\r\n                        sd += At[i * astep + k] * At[j * astep + k];\r\n                    }\r\n                    asum = 0.0;\r\n                    for (k = 0; k < m; k++) {\r\n                        t = (At[i * astep + k] - sd * At[j * astep + k]);\r\n                        At[i * astep + k] = t;\r\n                        asum += Math.abs(t);\r\n                    }\r\n                    asum = asum ? 1.0 / asum : 0;\r\n                    for (k = 0; k < m; k++) {\r\n                        At[i * astep + k] *= asum;\r\n                    }\r\n                }\r\n            }\r\n            sd = 0;\r\n            for (k = 0; k < m; k++) {\r\n                t = At[i * astep + k];\r\n                sd += t * t;\r\n            }\r\n            sd = Math.sqrt(sd);\r\n        }\r\n        s = (1.0 / sd);\r\n        for (k = 0; k < m; k++) {\r\n            At[i * astep + k] *= s;\r\n        }\r\n    }\r\n}\r\nexport function svd(A, W, U, V) {\r\n    var at = 0;\r\n    var i = 0;\r\n    var _m = A.rows;\r\n    var _n = A.cols;\r\n    var m = _m;\r\n    var n = _n;\r\n    if (m < n) {\r\n        at = 1;\r\n        i = m;\r\n        m = n;\r\n        n = i;\r\n    }\r\n    var amt = Matrix.create(m, m);\r\n    var wmt = Matrix.create(1, n);\r\n    var vmt = Matrix.create(n, n);\r\n    if (at === 0) {\r\n        Matrix.transpose(amt, A);\r\n    }\r\n    else {\r\n        for (i = 0; i < _n * _m; i++) {\r\n            amt.data[i] = A.data[i];\r\n        }\r\n        for (; i < n * m; i++) {\r\n            amt.data[i] = 0;\r\n        }\r\n    }\r\n    JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);\r\n    if (W) {\r\n        for (i = 0; i < n; i++) {\r\n            W.data[i] = wmt.data[i];\r\n        }\r\n        for (; i < _n; i++) {\r\n            W.data[i] = 0;\r\n        }\r\n    }\r\n    if (at === 0) {\r\n        if (U)\r\n            Matrix.transpose(U, amt);\r\n        if (V)\r\n            Matrix.transpose(V, vmt);\r\n    }\r\n    else {\r\n        if (U)\r\n            Matrix.transpose(U, vmt);\r\n        if (V)\r\n            Matrix.transpose(V, amt);\r\n    }\r\n}\r\n//# sourceMappingURL=svd.js.map"]},"metadata":{},"sourceType":"module"}