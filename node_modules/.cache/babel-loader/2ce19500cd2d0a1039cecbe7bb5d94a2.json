{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsLinesVisual, UnitsLinesParams } from '../units-visual';\nimport { MolecularSurfaceCalculationParams } from '../../../mol-math/geometry/molecular-surface';\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\nimport { computeUnitMolecularSurface } from './util/molecular-surface';\nimport { computeMarchingCubesLines } from '../../../mol-geo/util/marching-cubes/algorithm';\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\nimport { CommonSurfaceParams, getUnitExtraRadius } from './util/common';\nimport { Sphere3D } from '../../../mol-math/geometry';\nexport var MolecularSurfaceWireframeParams = __assign(__assign(__assign(__assign({}, UnitsLinesParams), MolecularSurfaceCalculationParams), CommonSurfaceParams), {\n  sizeFactor: PD.Numeric(1.5, {\n    min: 0,\n    max: 10,\n    step: 0.1\n  })\n}); //\n\nfunction createMolecularSurfaceWireframe(ctx, unit, structure, theme, props, lines) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, transform, field, idField, params, wireframe, sphere;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , computeUnitMolecularSurface(structure, unit, props).runInContext(ctx.runtime)];\n\n        case 1:\n          _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField;\n          params = {\n            isoLevel: props.probeRadius,\n            scalarField: field,\n            idField: idField\n          };\n          return [4\n          /*yield*/\n          , computeMarchingCubesLines(params, lines).runAsChild(ctx.runtime)];\n\n        case 2:\n          wireframe = _b.sent();\n          Lines.transform(wireframe, transform);\n          sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.probeRadius + getUnitExtraRadius(unit));\n          wireframe.setBoundingSphere(sphere);\n          return [2\n          /*return*/\n          , wireframe];\n      }\n    });\n  });\n}\n\nexport function MolecularSurfaceWireframeVisual(materialId) {\n  return UnitsLinesVisual({\n    defaultProps: PD.getDefaultValues(MolecularSurfaceWireframeParams),\n    createGeometry: createMolecularSurfaceWireframe,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      if (newProps.resolution !== currentProps.resolution) state.createGeometry = true;\n      if (newProps.probeRadius !== currentProps.probeRadius) state.createGeometry = true;\n      if (newProps.probePositions !== currentProps.probePositions) state.createGeometry = true;\n      if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens) state.createGeometry = true;\n      if (newProps.includeParent !== currentProps.includeParent) state.createGeometry = true;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/molecular-surface-wireframe.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsLinesVisual, UnitsLinesParams } from '../units-visual';\r\nimport { MolecularSurfaceCalculationParams } from '../../../mol-math/geometry/molecular-surface';\r\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\r\nimport { computeUnitMolecularSurface } from './util/molecular-surface';\r\nimport { computeMarchingCubesLines } from '../../../mol-geo/util/marching-cubes/algorithm';\r\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\r\nimport { CommonSurfaceParams, getUnitExtraRadius } from './util/common';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nexport var MolecularSurfaceWireframeParams = __assign(__assign(__assign(__assign({}, UnitsLinesParams), MolecularSurfaceCalculationParams), CommonSurfaceParams), { sizeFactor: PD.Numeric(1.5, { min: 0, max: 10, step: 0.1 }) });\r\n//\r\nfunction createMolecularSurfaceWireframe(ctx, unit, structure, theme, props, lines) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, transform, field, idField, params, wireframe, sphere;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, computeUnitMolecularSurface(structure, unit, props).runInContext(ctx.runtime)];\r\n                case 1:\r\n                    _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField;\r\n                    params = {\r\n                        isoLevel: props.probeRadius,\r\n                        scalarField: field,\r\n                        idField: idField\r\n                    };\r\n                    return [4 /*yield*/, computeMarchingCubesLines(params, lines).runAsChild(ctx.runtime)];\r\n                case 2:\r\n                    wireframe = _b.sent();\r\n                    Lines.transform(wireframe, transform);\r\n                    sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.probeRadius + getUnitExtraRadius(unit));\r\n                    wireframe.setBoundingSphere(sphere);\r\n                    return [2 /*return*/, wireframe];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function MolecularSurfaceWireframeVisual(materialId) {\r\n    return UnitsLinesVisual({\r\n        defaultProps: PD.getDefaultValues(MolecularSurfaceWireframeParams),\r\n        createGeometry: createMolecularSurfaceWireframe,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            if (newProps.resolution !== currentProps.resolution)\r\n                state.createGeometry = true;\r\n            if (newProps.probeRadius !== currentProps.probeRadius)\r\n                state.createGeometry = true;\r\n            if (newProps.probePositions !== currentProps.probePositions)\r\n                state.createGeometry = true;\r\n            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)\r\n                state.createGeometry = true;\r\n            if (newProps.includeParent !== currentProps.includeParent)\r\n                state.createGeometry = true;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=molecular-surface-wireframe.js.map"]},"metadata":{},"sourceType":"module"}