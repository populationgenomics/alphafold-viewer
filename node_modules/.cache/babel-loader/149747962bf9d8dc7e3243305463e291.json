{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { arrayFind } from '../../../../mol-data/util';\nimport { Spacegroup } from '../../../../mol-math/geometry';\nimport { ModelSymmetry } from '../../../../mol-model-formats/structure/property/symmetry';\nimport { radToDeg } from '../../../../mol-math/misc';\n\nvar Assembly =\n/** @class */\nfunction () {\n  function Assembly(id, details, operatorsProvider) {\n    this.operatorsProvider = operatorsProvider;\n    this.id = id;\n    this.details = details;\n  }\n\n  Object.defineProperty(Assembly.prototype, \"operatorGroups\", {\n    get: function () {\n      if (this._operators) return this._operators;\n      this._operators = this.operatorsProvider();\n      return this._operators;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Assembly;\n}();\n\nexport { Assembly };\n\n(function (Assembly) {\n  function create(id, details, operatorsProvider) {\n    return new Assembly(id, details, operatorsProvider);\n  }\n\n  Assembly.create = create;\n})(Assembly || (Assembly = {}));\n\nvar Symmetry;\n\n(function (Symmetry) {\n  Symmetry.Default = {\n    assemblies: [],\n    spacegroup: Spacegroup.ZeroP1,\n    isNonStandardCrystalFrame: false\n  };\n\n  function findAssembly(model, id) {\n    var _id = id.toLocaleLowerCase();\n\n    var symmetry = ModelSymmetry.Provider.get(model);\n    return symmetry ? arrayFind(symmetry.assemblies, function (a) {\n      return a.id.toLowerCase() === _id;\n    }) : undefined;\n  }\n\n  Symmetry.findAssembly = findAssembly;\n\n  function getUnitcellLabel(symmetry) {\n    var _a = symmetry.spacegroup,\n        cell = _a.cell,\n        name = _a.name,\n        num = _a.num;\n    var size = cell.size,\n        anglesInRadians = cell.anglesInRadians;\n    var a = size[0].toFixed(2);\n    var b = size[1].toFixed(2);\n    var c = size[2].toFixed(2);\n    var alpha = radToDeg(anglesInRadians[0]).toFixed(2);\n    var beta = radToDeg(anglesInRadians[1]).toFixed(2);\n    var gamma = radToDeg(anglesInRadians[2]).toFixed(2);\n    var label = []; // name\n\n    label.push(\"Unit Cell <b>\" + name + \"</b> #\" + num); // sizes\n\n    label.push(a + \"\\u00D7\" + b + \"\\u00D7\" + c + \" \\u212B\"); // angles\n\n    label.push(\"\\u03B1=\" + alpha + \"\\u00B0 \\u03B2=\" + beta + \"\\u00B0 \\u03B3=\" + gamma + \"\\u00B0\");\n    return label.join(' | ');\n  }\n\n  Symmetry.getUnitcellLabel = getUnitcellLabel;\n})(Symmetry || (Symmetry = {}));\n\nexport { Symmetry };","map":{"version":3,"sources":["../../../../../src/mol-model/structure/model/properties/symmetry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { arrayFind } from '../../../../mol-data/util';\r\nimport { Spacegroup } from '../../../../mol-math/geometry';\r\nimport { ModelSymmetry } from '../../../../mol-model-formats/structure/property/symmetry';\r\nimport { radToDeg } from '../../../../mol-math/misc';\r\nvar Assembly = /** @class */ (function () {\r\n    function Assembly(id, details, operatorsProvider) {\r\n        this.operatorsProvider = operatorsProvider;\r\n        this.id = id;\r\n        this.details = details;\r\n    }\r\n    Object.defineProperty(Assembly.prototype, \"operatorGroups\", {\r\n        get: function () {\r\n            if (this._operators)\r\n                return this._operators;\r\n            this._operators = this.operatorsProvider();\r\n            return this._operators;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Assembly;\r\n}());\r\nexport { Assembly };\r\n(function (Assembly) {\r\n    function create(id, details, operatorsProvider) {\r\n        return new Assembly(id, details, operatorsProvider);\r\n    }\r\n    Assembly.create = create;\r\n})(Assembly || (Assembly = {}));\r\nvar Symmetry;\r\n(function (Symmetry) {\r\n    Symmetry.Default = { assemblies: [], spacegroup: Spacegroup.ZeroP1, isNonStandardCrystalFrame: false };\r\n    function findAssembly(model, id) {\r\n        var _id = id.toLocaleLowerCase();\r\n        var symmetry = ModelSymmetry.Provider.get(model);\r\n        return symmetry ? arrayFind(symmetry.assemblies, function (a) { return a.id.toLowerCase() === _id; }) : undefined;\r\n    }\r\n    Symmetry.findAssembly = findAssembly;\r\n    function getUnitcellLabel(symmetry) {\r\n        var _a = symmetry.spacegroup, cell = _a.cell, name = _a.name, num = _a.num;\r\n        var size = cell.size, anglesInRadians = cell.anglesInRadians;\r\n        var a = size[0].toFixed(2);\r\n        var b = size[1].toFixed(2);\r\n        var c = size[2].toFixed(2);\r\n        var alpha = radToDeg(anglesInRadians[0]).toFixed(2);\r\n        var beta = radToDeg(anglesInRadians[1]).toFixed(2);\r\n        var gamma = radToDeg(anglesInRadians[2]).toFixed(2);\r\n        var label = [];\r\n        // name\r\n        label.push(\"Unit Cell <b>\" + name + \"</b> #\" + num);\r\n        // sizes\r\n        label.push(a + \"\\u00D7\" + b + \"\\u00D7\" + c + \" \\u212B\");\r\n        // angles\r\n        label.push(\"\\u03B1=\" + alpha + \"\\u00B0 \\u03B2=\" + beta + \"\\u00B0 \\u03B3=\" + gamma + \"\\u00B0\");\r\n        return label.join(' | ');\r\n    }\r\n    Symmetry.getUnitcellLabel = getUnitcellLabel;\r\n})(Symmetry || (Symmetry = {}));\r\nexport { Symmetry };\r\n//# sourceMappingURL=symmetry.js.map"]},"metadata":{},"sourceType":"module"}