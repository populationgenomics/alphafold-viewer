/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { __assign } from "tslib";
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { UnitsPointsParams, UnitsPointsVisual } from '../units-visual';
import { Points } from '../../../mol-geo/geometry/points/points';
import { PointsBuilder } from '../../../mol-geo/geometry/points/points-builder';
import { Vec3 } from '../../../mol-math/linear-algebra';
import { ElementIterator, getElementLoci, eachElement, makeElementIgnoreTest } from './util/element';
import { Sphere3D } from '../../../mol-math/geometry';
export var ElementPointParams = __assign(__assign({}, UnitsPointsParams), { pointSizeAttenuation: PD.Boolean(false), ignoreHydrogens: PD.Boolean(false), traceOnly: PD.Boolean(false) });
// TODO size
export function createElementPoint(ctx, unit, structure, theme, props, points) {
    // TODO sizeFactor
    var child = structure.child;
    if (child && !child.unitMap.get(unit.id))
        return Points.createEmpty(points);
    var elements = unit.elements;
    var n = elements.length;
    var builder = PointsBuilder.create(n, n / 10, points);
    var p = Vec3();
    var pos = unit.conformation.invariantPosition;
    var ignore = makeElementIgnoreTest(structure, unit, props);
    if (ignore) {
        for (var i = 0; i < n; ++i) {
            if (ignore(elements[i]))
                continue;
            pos(elements[i], p);
            builder.add(p[0], p[1], p[2], i);
        }
    }
    else {
        for (var i = 0; i < n; ++i) {
            pos(elements[i], p);
            builder.add(p[0], p[1], p[2], i);
        }
    }
    var pt = builder.getPoints();
    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);
    pt.setBoundingSphere(sphere);
    return pt;
}
export function ElementPointVisual(materialId) {
    return UnitsPointsVisual({
        defaultProps: PD.getDefaultValues(ElementPointParams),
        createGeometry: createElementPoint,
        createLocationIterator: ElementIterator.fromGroup,
        getLoci: getElementLoci,
        eachLocation: eachElement,
        setUpdateState: function (state, newProps, currentProps) {
            state.createGeometry = (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||
                newProps.traceOnly !== currentProps.traceOnly);
        }
    }, materialId);
}
//# sourceMappingURL=element-point.js.map