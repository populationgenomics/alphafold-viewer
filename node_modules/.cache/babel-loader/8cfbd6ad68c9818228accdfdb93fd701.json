{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\nimport { DSSPType } from './common';\n\nfunction isHelixType(f) {\n  return DSSPType.is(f, 8\n  /* G */\n  ) || DSSPType.is(f, 1\n  /* H */\n  ) || DSSPType.is(f, 16\n  /* I */\n  );\n}\n/**\r\n * sheet=: set of one or more ladders connected by shared residues\r\n *\r\n * Type: E\r\n */\n\n\nexport function assignSheets(ctx) {\n  var ladders = ctx.ladders,\n      flags = ctx.flags;\n\n  for (var ladderIndex = 0; ladderIndex < ladders.length; ladderIndex++) {\n    var ladder = ladders[ladderIndex];\n\n    for (var lcount = ladder.firstStart; lcount <= ladder.firstEnd; lcount++) {\n      var diff = ladder.firstStart - lcount;\n      var l2count = ladder.secondStart - diff;\n\n      if (ladder.firstStart !== ladder.firstEnd) {\n        flags[lcount] |= 4\n        /* E */\n        ;\n        flags[l2count] |= 4\n        /* E */\n        ;\n      } else {\n        if (!isHelixType(flags[lcount]) && DSSPType.is(flags[lcount], 4\n        /* E */\n        )) {\n          flags[lcount] |= 2\n          /* B */\n          ;\n        }\n\n        if (!isHelixType(flags[l2count]) && DSSPType.is(flags[l2count], 4\n        /* E */\n        )) {\n          flags[l2count] |= 2\n          /* B */\n          ;\n        }\n      }\n    }\n\n    if (ladder.nextLadder === 0) continue;\n    var conladder = ladders[ladder.nextLadder];\n\n    for (var lcount = ladder.firstStart; lcount <= conladder.firstEnd; lcount++) {\n      flags[lcount] |= 4\n      /* E */\n      ;\n    }\n\n    if (ladder.type === 0\n    /* PARALLEL */\n    ) {\n      for (var lcount = ladder.secondStart; lcount <= conladder.secondEnd; lcount++) {\n        flags[lcount] |= 4\n        /* E */\n        ;\n      }\n    } else {\n      for (var lcount = conladder.secondEnd; lcount <= ladder.secondStart; lcount++) {\n        flags[lcount] |= 4\n        /* E */\n        ;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/secondary-structure/dssp/sheets.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAsB,QAAtB,QAAkD,UAAlD;;AAEA,SAAS,WAAT,CAAqB,CAArB,EAAgC;AAC5B,SAAO,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,OAAmC,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAnC,IAAsE,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAA7E;AACH;AAED;;;;AAIG;;;AACH,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAuC;AACjC,MAAA,OAAO,GAAY,GAAG,CAAf,OAAP;AAAA,MAAS,KAAK,GAAK,GAAG,CAAR,KAAd;;AACR,OAAK,IAAI,WAAW,GAAG,CAAvB,EAA0B,WAAW,GAAG,OAAO,CAAC,MAAhD,EAAwD,WAAW,EAAnE,EAAuE;AACnE,QAAM,MAAM,GAAG,OAAO,CAAC,WAAD,CAAtB;;AACA,SAAK,IAAI,MAAM,GAAG,MAAM,CAAC,UAAzB,EAAqC,MAAM,IAAI,MAAM,CAAC,QAAtD,EAAgE,MAAM,EAAtE,EAA0E;AACtE,UAAM,IAAI,GAAG,MAAM,CAAC,UAAP,GAAoB,MAAjC;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,WAAP,GAAqB,IAArC;;AAEA,UAAI,MAAM,CAAC,UAAP,KAAsB,MAAM,CAAC,QAAjC,EAA2C;AACvC,QAAA,KAAK,CAAC,MAAD,CAAL,IAAa;AAAA;AAAb;AACA,QAAA,KAAK,CAAC,OAAD,CAAL,IAAc;AAAA;AAAd;AACH,OAHD,MAGO;AACH,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAD,CAAN,CAAZ,IAA+B,QAAQ,CAAC,EAAT,CAAY,KAAK,CAAC,MAAD,CAAjB,EAAyB;AAAA;AAAzB,SAAnC,EAAgF;AAC5E,UAAA,KAAK,CAAC,MAAD,CAAL,IAAa;AAAA;AAAb;AACH;;AACD,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAD,CAAN,CAAZ,IAAgC,QAAQ,CAAC,EAAT,CAAY,KAAK,CAAC,OAAD,CAAjB,EAA0B;AAAA;AAA1B,SAApC,EAAkF;AAC9E,UAAA,KAAK,CAAC,OAAD,CAAL,IAAc;AAAA;AAAd;AACH;AACJ;AACJ;;AAED,QAAI,MAAM,CAAC,UAAP,KAAsB,CAA1B,EAA6B;AAE7B,QAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,UAAR,CAAzB;;AACA,SAAK,IAAI,MAAM,GAAG,MAAM,CAAC,UAAzB,EAAqC,MAAM,IAAI,SAAS,CAAC,QAAzD,EAAmE,MAAM,EAAzE,EAA6E;AACzE,MAAA,KAAK,CAAC,MAAD,CAAL,IAAa;AAAA;AAAb;AACH;;AACD,QAAI,MAAM,CAAC,IAAP,KAAW;AAAA;AAAf,MAAyC;AACrC,WAAK,IAAI,MAAM,GAAG,MAAM,CAAC,WAAzB,EAAsC,MAAM,IAAI,SAAS,CAAC,SAA1D,EAAqE,MAAM,EAA3E,EAA+E;AAC3E,QAAA,KAAK,CAAC,MAAD,CAAL,IAAa;AAAA;AAAb;AACH;AACJ,KAJD,MAIO;AACH,WAAK,IAAI,MAAM,GAAG,SAAS,CAAC,SAA5B,EAAuC,MAAM,IAAI,MAAM,CAAC,WAAxD,EAAqE,MAAM,EAA3E,EAA+E;AAC3E,QAAA,KAAK,CAAC,MAAD,CAAL,IAAa;AAAA;AAAb;AACH;AACJ;AACJ;AACJ","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\r\nimport { DSSPType } from './common';\r\nfunction isHelixType(f) {\r\n    return DSSPType.is(f, 8 /* G */) || DSSPType.is(f, 1 /* H */) || DSSPType.is(f, 16 /* I */);\r\n}\r\n/**\r\n * sheet=: set of one or more ladders connected by shared residues\r\n *\r\n * Type: E\r\n */\r\nexport function assignSheets(ctx) {\r\n    var ladders = ctx.ladders, flags = ctx.flags;\r\n    for (var ladderIndex = 0; ladderIndex < ladders.length; ladderIndex++) {\r\n        var ladder = ladders[ladderIndex];\r\n        for (var lcount = ladder.firstStart; lcount <= ladder.firstEnd; lcount++) {\r\n            var diff = ladder.firstStart - lcount;\r\n            var l2count = ladder.secondStart - diff;\r\n            if (ladder.firstStart !== ladder.firstEnd) {\r\n                flags[lcount] |= 4 /* E */;\r\n                flags[l2count] |= 4 /* E */;\r\n            }\r\n            else {\r\n                if (!isHelixType(flags[lcount]) && DSSPType.is(flags[lcount], 4 /* E */)) {\r\n                    flags[lcount] |= 2 /* B */;\r\n                }\r\n                if (!isHelixType(flags[l2count]) && DSSPType.is(flags[l2count], 4 /* E */)) {\r\n                    flags[l2count] |= 2 /* B */;\r\n                }\r\n            }\r\n        }\r\n        if (ladder.nextLadder === 0)\r\n            continue;\r\n        var conladder = ladders[ladder.nextLadder];\r\n        for (var lcount = ladder.firstStart; lcount <= conladder.firstEnd; lcount++) {\r\n            flags[lcount] |= 4 /* E */;\r\n        }\r\n        if (ladder.type === 0 /* PARALLEL */) {\r\n            for (var lcount = ladder.secondStart; lcount <= conladder.secondEnd; lcount++) {\r\n                flags[lcount] |= 4 /* E */;\r\n            }\r\n        }\r\n        else {\r\n            for (var lcount = conladder.secondEnd; lcount <= ladder.secondStart; lcount++) {\r\n                flags[lcount] |= 4 /* E */;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=sheets.js.map"]},"metadata":{},"sourceType":"module"}