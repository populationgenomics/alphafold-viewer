{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3, Mat3 } from '../../linear-algebra';\n\nfunction Axes3D() {\n  return Axes3D.empty();\n}\n\n(function (Axes3D) {\n  function create(origin, dirA, dirB, dirC) {\n    return {\n      origin: origin,\n      dirA: dirA,\n      dirB: dirB,\n      dirC: dirC\n    };\n  }\n\n  Axes3D.create = create;\n\n  function empty() {\n    return {\n      origin: Vec3(),\n      dirA: Vec3(),\n      dirB: Vec3(),\n      dirC: Vec3()\n    };\n  }\n\n  Axes3D.empty = empty;\n\n  function copy(out, a) {\n    Vec3.copy(out.origin, a.origin);\n    Vec3.copy(out.dirA, a.dirA);\n    Vec3.copy(out.dirB, a.dirB);\n    Vec3.copy(out.dirC, a.dirC);\n    return out;\n  }\n\n  Axes3D.copy = copy;\n\n  function clone(a) {\n    return copy(empty(), a);\n  }\n\n  Axes3D.clone = clone;\n  /** Get size of each direction */\n\n  function size(size, axes) {\n    return Vec3.set(size, Vec3.magnitude(axes.dirA) * 2, Vec3.magnitude(axes.dirB) * 2, Vec3.magnitude(axes.dirC) * 2);\n  }\n\n  Axes3D.size = size;\n  var tmpSizeV = Vec3();\n  /** Get volume of the oriented box wrapping the axes */\n\n  function volume(axes) {\n    size(tmpSizeV, axes);\n    return tmpSizeV[0] * tmpSizeV[1] * tmpSizeV[2];\n  }\n\n  Axes3D.volume = volume;\n\n  function normalize(out, a) {\n    Vec3.copy(out.origin, a.origin);\n    Vec3.normalize(out.dirA, a.dirA);\n    Vec3.normalize(out.dirB, a.dirB);\n    Vec3.normalize(out.dirC, a.dirC);\n    return out;\n  }\n\n  Axes3D.normalize = normalize;\n  var tmpTransformMat3 = Mat3.zero();\n  /** Transform axes with a Mat4 */\n\n  function transform(out, a, m) {\n    Vec3.transformMat4(out.origin, a.origin, m);\n    var n = Mat3.directionTransform(tmpTransformMat3, m);\n    Vec3.transformMat3(out.dirA, a.dirA, n);\n    Vec3.transformMat3(out.dirB, a.dirB, n);\n    Vec3.transformMat3(out.dirC, a.dirC, n);\n    return out;\n  }\n\n  Axes3D.transform = transform;\n})(Axes3D || (Axes3D = {}));\n\nexport { Axes3D };","map":{"version":3,"sources":["../../../../src/mol-math/geometry/primitives/axes3d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3, Mat3 } from '../../linear-algebra';\r\nfunction Axes3D() {\r\n    return Axes3D.empty();\r\n}\r\n(function (Axes3D) {\r\n    function create(origin, dirA, dirB, dirC) { return { origin: origin, dirA: dirA, dirB: dirB, dirC: dirC }; }\r\n    Axes3D.create = create;\r\n    function empty() { return { origin: Vec3(), dirA: Vec3(), dirB: Vec3(), dirC: Vec3() }; }\r\n    Axes3D.empty = empty;\r\n    function copy(out, a) {\r\n        Vec3.copy(out.origin, a.origin);\r\n        Vec3.copy(out.dirA, a.dirA);\r\n        Vec3.copy(out.dirB, a.dirB);\r\n        Vec3.copy(out.dirC, a.dirC);\r\n        return out;\r\n    }\r\n    Axes3D.copy = copy;\r\n    function clone(a) {\r\n        return copy(empty(), a);\r\n    }\r\n    Axes3D.clone = clone;\r\n    /** Get size of each direction */\r\n    function size(size, axes) {\r\n        return Vec3.set(size, Vec3.magnitude(axes.dirA) * 2, Vec3.magnitude(axes.dirB) * 2, Vec3.magnitude(axes.dirC) * 2);\r\n    }\r\n    Axes3D.size = size;\r\n    var tmpSizeV = Vec3();\r\n    /** Get volume of the oriented box wrapping the axes */\r\n    function volume(axes) {\r\n        size(tmpSizeV, axes);\r\n        return tmpSizeV[0] * tmpSizeV[1] * tmpSizeV[2];\r\n    }\r\n    Axes3D.volume = volume;\r\n    function normalize(out, a) {\r\n        Vec3.copy(out.origin, a.origin);\r\n        Vec3.normalize(out.dirA, a.dirA);\r\n        Vec3.normalize(out.dirB, a.dirB);\r\n        Vec3.normalize(out.dirC, a.dirC);\r\n        return out;\r\n    }\r\n    Axes3D.normalize = normalize;\r\n    var tmpTransformMat3 = Mat3.zero();\r\n    /** Transform axes with a Mat4 */\r\n    function transform(out, a, m) {\r\n        Vec3.transformMat4(out.origin, a.origin, m);\r\n        var n = Mat3.directionTransform(tmpTransformMat3, m);\r\n        Vec3.transformMat3(out.dirA, a.dirA, n);\r\n        Vec3.transformMat3(out.dirB, a.dirB, n);\r\n        Vec3.transformMat3(out.dirC, a.dirC, n);\r\n        return out;\r\n    }\r\n    Axes3D.transform = transform;\r\n})(Axes3D || (Axes3D = {}));\r\nexport { Axes3D };\r\n//# sourceMappingURL=axes3d.js.map"]},"metadata":{},"sourceType":"module"}