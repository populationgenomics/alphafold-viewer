{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ValueCell } from '../../mol-util/value-cell';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { createTextureImage } from '../../mol-gl/renderable/util';\nexport function applyTransparencyValue(array, start, end, value) {\n  for (var i = start; i < end; ++i) {\n    array[i] = value * 255;\n  }\n\n  return true;\n}\nexport function getTransparencyAverage(array, count) {\n  var sum = 0;\n\n  for (var i = 0; i < count; ++i) {\n    sum += array[i];\n  }\n\n  return sum / (255 * count);\n}\nexport function clearTransparency(array, start, end) {\n  array.fill(0, start, end);\n}\nexport function createTransparency(count, transparencyData) {\n  var transparency = createTextureImage(Math.max(1, count), 1, Uint8Array, transparencyData && transparencyData.tTransparency.ref.value.array);\n\n  if (transparencyData) {\n    ValueCell.update(transparencyData.tTransparency, transparency);\n    ValueCell.update(transparencyData.uTransparencyTexDim, Vec2.create(transparency.width, transparency.height));\n    ValueCell.updateIfChanged(transparencyData.dTransparency, count > 0);\n    ValueCell.updateIfChanged(transparencyData.transparencyAverage, getTransparencyAverage(transparency.array, count));\n    return transparencyData;\n  } else {\n    return {\n      tTransparency: ValueCell.create(transparency),\n      uTransparencyTexDim: ValueCell.create(Vec2.create(transparency.width, transparency.height)),\n      dTransparency: ValueCell.create(count > 0),\n      transparencyAverage: ValueCell.create(0)\n    };\n  }\n}\nvar emptyTransparencyTexture = {\n  array: new Uint8Array(1),\n  width: 1,\n  height: 1\n};\nexport function createEmptyTransparency(transparencyData) {\n  if (transparencyData) {\n    ValueCell.update(transparencyData.tTransparency, emptyTransparencyTexture);\n    ValueCell.update(transparencyData.uTransparencyTexDim, Vec2.create(1, 1));\n    return transparencyData;\n  } else {\n    return {\n      tTransparency: ValueCell.create(emptyTransparencyTexture),\n      uTransparencyTexDim: ValueCell.create(Vec2.create(1, 1)),\n      dTransparency: ValueCell.create(false),\n      transparencyAverage: ValueCell.create(0)\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/mol-geo/geometry/transparency-data.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,SAAT,QAA0B,2BAA1B;AACA,SAAS,IAAT,QAAqB,+BAArB;AACA,SAAuB,kBAAvB,QAAiD,8BAAjD;AASA,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAAoD,KAApD,EAAmE,GAAnE,EAAgF,KAAhF,EAA6F;AAC/F,OAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,GAAxB,EAA6B,EAAE,CAA/B,EAAkC;AAC9B,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,GAAG,GAAnB;AACH;;AACD,SAAO,IAAP;AACH;AAED,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAAoD,KAApD,EAAiE;AACnE,MAAI,GAAG,GAAG,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;AAC5B,IAAA,GAAG,IAAI,KAAK,CAAC,CAAD,CAAZ;AACH;;AACD,SAAO,GAAG,IAAI,MAAM,KAAV,CAAV;AACH;AAED,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAA+C,KAA/C,EAA8D,GAA9D,EAAyE;AAC3E,EAAA,KAAK,CAAC,IAAN,CAAW,CAAX,EAAc,KAAd,EAAqB,GAArB;AACH;AAED,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA4C,gBAA5C,EAA+E;AACjF,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAZ,CAAD,EAAqB,CAArB,EAAwB,UAAxB,EAAoC,gBAAgB,IAAI,gBAAgB,CAAC,aAAjB,CAA+B,GAA/B,CAAmC,KAAnC,CAAyC,KAAjG,CAAvC;;AACA,MAAI,gBAAJ,EAAsB;AAClB,IAAA,SAAS,CAAC,MAAV,CAAiB,gBAAgB,CAAC,aAAlC,EAAiD,YAAjD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,gBAAgB,CAAC,mBAAlC,EAAuD,IAAI,CAAC,MAAL,CAAY,YAAY,CAAC,KAAzB,EAAgC,YAAY,CAAC,MAA7C,CAAvD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,gBAAgB,CAAC,aAA3C,EAA0D,KAAK,GAAG,CAAlE;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,gBAAgB,CAAC,mBAA3C,EAAgE,sBAAsB,CAAC,YAAY,CAAC,KAAd,EAAqB,KAArB,CAAtF;AACA,WAAO,gBAAP;AACH,GAND,MAMO;AACH,WAAO;AACH,MAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,YAAjB,CADZ;AAEH,MAAA,mBAAmB,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,MAAL,CAAY,YAAY,CAAC,KAAzB,EAAgC,YAAY,CAAC,MAA7C,CAAjB,CAFlB;AAGH,MAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,GAAG,CAAzB,CAHZ;AAIH,MAAA,mBAAmB,EAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB;AAJlB,KAAP;AAMH;AACJ;AAED,IAAM,wBAAwB,GAAG;AAAE,EAAA,KAAK,EAAE,IAAI,UAAJ,CAAe,CAAf,CAAT;AAA4B,EAAA,KAAK,EAAE,CAAnC;AAAsC,EAAA,MAAM,EAAE;AAA9C,CAAjC;AACA,OAAM,SAAU,uBAAV,CAAkC,gBAAlC,EAAqE;AACvE,MAAI,gBAAJ,EAAsB;AAClB,IAAA,SAAS,CAAC,MAAV,CAAiB,gBAAgB,CAAC,aAAlC,EAAiD,wBAAjD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,gBAAgB,CAAC,mBAAlC,EAAuD,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAvD;AACA,WAAO,gBAAP;AACH,GAJD,MAIO;AACH,WAAO;AACH,MAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,wBAAjB,CADZ;AAEH,MAAA,mBAAmB,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAjB,CAFlB;AAGH,MAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAjB,CAHZ;AAIH,MAAA,mBAAmB,EAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB;AAJlB,KAAP;AAMH;AACJ","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ValueCell } from '../../mol-util/value-cell';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { createTextureImage } from '../../mol-gl/renderable/util';\r\nexport function applyTransparencyValue(array, start, end, value) {\r\n    for (var i = start; i < end; ++i) {\r\n        array[i] = value * 255;\r\n    }\r\n    return true;\r\n}\r\nexport function getTransparencyAverage(array, count) {\r\n    var sum = 0;\r\n    for (var i = 0; i < count; ++i) {\r\n        sum += array[i];\r\n    }\r\n    return sum / (255 * count);\r\n}\r\nexport function clearTransparency(array, start, end) {\r\n    array.fill(0, start, end);\r\n}\r\nexport function createTransparency(count, transparencyData) {\r\n    var transparency = createTextureImage(Math.max(1, count), 1, Uint8Array, transparencyData && transparencyData.tTransparency.ref.value.array);\r\n    if (transparencyData) {\r\n        ValueCell.update(transparencyData.tTransparency, transparency);\r\n        ValueCell.update(transparencyData.uTransparencyTexDim, Vec2.create(transparency.width, transparency.height));\r\n        ValueCell.updateIfChanged(transparencyData.dTransparency, count > 0);\r\n        ValueCell.updateIfChanged(transparencyData.transparencyAverage, getTransparencyAverage(transparency.array, count));\r\n        return transparencyData;\r\n    }\r\n    else {\r\n        return {\r\n            tTransparency: ValueCell.create(transparency),\r\n            uTransparencyTexDim: ValueCell.create(Vec2.create(transparency.width, transparency.height)),\r\n            dTransparency: ValueCell.create(count > 0),\r\n            transparencyAverage: ValueCell.create(0),\r\n        };\r\n    }\r\n}\r\nvar emptyTransparencyTexture = { array: new Uint8Array(1), width: 1, height: 1 };\r\nexport function createEmptyTransparency(transparencyData) {\r\n    if (transparencyData) {\r\n        ValueCell.update(transparencyData.tTransparency, emptyTransparencyTexture);\r\n        ValueCell.update(transparencyData.uTransparencyTexDim, Vec2.create(1, 1));\r\n        return transparencyData;\r\n    }\r\n    else {\r\n        return {\r\n            tTransparency: ValueCell.create(emptyTransparencyTexture),\r\n            uTransparencyTexDim: ValueCell.create(Vec2.create(1, 1)),\r\n            dTransparency: ValueCell.create(false),\r\n            transparencyAverage: ValueCell.create(0),\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=transparency-data.js.map"]},"metadata":{},"sourceType":"module"}