{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\nimport { BitFlags } from '../../../../mol-util';\nexport { DSSPType };\nvar DSSPType;\n\n(function (DSSPType) {\n  DSSPType.is = BitFlags.has;\n  DSSPType.create = BitFlags.create;\n})(DSSPType || (DSSPType = {}));\n\nvar Bridge =\n/** @class */\nfunction () {\n  function Bridge(p1, p2, type) {\n    this.partner1 = Math.min(p1, p2);\n    this.partner2 = Math.max(p1, p2);\n    this.type = type;\n  }\n\n  return Bridge;\n}();\n\nexport { Bridge };","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/secondary-structure/dssp/common.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,QAAT,QAAyB,sBAAzB;AAyBA,SAAS,QAAT;AAEA,IAAU,QAAV;;AAAA,CAAA,UAAU,QAAV,EAAkB;AACD,EAAA,QAAA,CAAA,EAAA,GAAwC,QAAQ,CAAC,GAAjD;AACA,EAAA,QAAA,CAAA,MAAA,GAAgC,QAAQ,CAAC,MAAzC;AAiBhB,CAnBD,EAAU,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAlB;;AAsCA,IAAA,MAAA;AAAA;AAAA,YAAA;AAKI,WAAA,MAAA,CAAY,EAAZ,EAAwB,EAAxB,EAAoC,IAApC,EAAoD;AAChD,SAAK,QAAL,GAAgB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,CAAhB;AACA,SAAK,QAAL,GAAgB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,CAAhB;AACA,SAAK,IAAL,GAAY,IAAZ;AACH;;AACL,SAAA,MAAA;AAAC,CAVD,EAAA","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\r\nimport { BitFlags } from '../../../../mol-util';\r\nexport { DSSPType };\r\nvar DSSPType;\r\n(function (DSSPType) {\r\n    DSSPType.is = BitFlags.has;\r\n    DSSPType.create = BitFlags.create;\r\n})(DSSPType || (DSSPType = {}));\r\nvar Bridge = /** @class */ (function () {\r\n    function Bridge(p1, p2, type) {\r\n        this.partner1 = Math.min(p1, p2);\r\n        this.partner2 = Math.max(p1, p2);\r\n        this.type = type;\r\n    }\r\n    return Bridge;\r\n}());\r\nexport { Bridge };\r\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}