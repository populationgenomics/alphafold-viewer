{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\nimport { createComputeRenderable } from '../../mol-gl/renderable';\nimport { TextureSpec, UniformSpec, DefineSpec } from '../../mol-gl/renderable/schema';\nimport { ShaderCode } from '../../mol-gl/shader-code';\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { ValueCell } from '../../mol-util';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\nimport { fxaa_frag } from '../../mol-gl/shader/fxaa.frag';\nexport var FxaaParams = {\n  edgeThresholdMin: PD.Numeric(0.0312, {\n    min: 0.0312,\n    max: 0.0833,\n    step: 0.0001\n  }, {\n    description: 'Trims the algorithm from processing darks.'\n  }),\n  edgeThresholdMax: PD.Numeric(0.063, {\n    min: 0.063,\n    max: 0.333,\n    step: 0.001\n  }, {\n    description: 'The minimum amount of local contrast required to apply algorithm.'\n  }),\n  iterations: PD.Numeric(12, {\n    min: 0,\n    max: 16,\n    step: 1\n  }, {\n    description: 'Number of edge exploration steps.'\n  }),\n  subpixelQuality: PD.Numeric(0.30, {\n    min: 0.00,\n    max: 1.00,\n    step: 0.01\n  }, {\n    description: 'Choose the amount of sub-pixel aliasing removal.'\n  })\n};\n\nvar FxaaPass =\n/** @class */\nfunction () {\n  function FxaaPass(webgl, input) {\n    this.webgl = webgl;\n    this.renderable = getFxaaRenderable(webgl, input);\n  }\n\n  FxaaPass.prototype.updateState = function (viewport) {\n    var _a = this.webgl,\n        gl = _a.gl,\n        state = _a.state;\n    state.enable(gl.SCISSOR_TEST);\n    state.disable(gl.BLEND);\n    state.disable(gl.DEPTH_TEST);\n    state.depthMask(false);\n    var x = viewport.x,\n        y = viewport.y,\n        width = viewport.width,\n        height = viewport.height;\n    gl.viewport(x, y, width, height);\n    gl.scissor(x, y, width, height);\n    state.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  };\n\n  FxaaPass.prototype.setSize = function (width, height) {\n    ValueCell.update(this.renderable.values.uTexSizeInv, Vec2.set(this.renderable.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\n  };\n\n  FxaaPass.prototype.update = function (input, props) {\n    var values = this.renderable.values;\n    var edgeThresholdMin = props.edgeThresholdMin,\n        edgeThresholdMax = props.edgeThresholdMax,\n        iterations = props.iterations,\n        subpixelQuality = props.subpixelQuality;\n    var needsUpdate = false;\n\n    if (values.tColor.ref.value !== input) {\n      ValueCell.update(this.renderable.values.tColor, input);\n      needsUpdate = true;\n    }\n\n    if (values.dEdgeThresholdMin.ref.value !== edgeThresholdMin) needsUpdate = true;\n    ValueCell.updateIfChanged(values.dEdgeThresholdMin, edgeThresholdMin);\n    if (values.dEdgeThresholdMax.ref.value !== edgeThresholdMax) needsUpdate = true;\n    ValueCell.updateIfChanged(values.dEdgeThresholdMax, edgeThresholdMax);\n    if (values.dIterations.ref.value !== iterations) needsUpdate = true;\n    ValueCell.updateIfChanged(values.dIterations, iterations);\n    if (values.dSubpixelQuality.ref.value !== subpixelQuality) needsUpdate = true;\n    ValueCell.updateIfChanged(values.dSubpixelQuality, subpixelQuality);\n\n    if (needsUpdate) {\n      this.renderable.update();\n    }\n  };\n\n  FxaaPass.prototype.render = function (viewport, target) {\n    if (target) {\n      target.bind();\n    } else {\n      this.webgl.unbindFramebuffer();\n    }\n\n    this.updateState(viewport);\n    this.renderable.render();\n  };\n\n  return FxaaPass;\n}();\n\nexport { FxaaPass }; //\n\nvar FxaaSchema = __assign(__assign({}, QuadSchema), {\n  tColor: TextureSpec('texture', 'rgba', 'ubyte', 'linear'),\n  uTexSizeInv: UniformSpec('v2'),\n  dEdgeThresholdMin: DefineSpec('number'),\n  dEdgeThresholdMax: DefineSpec('number'),\n  dIterations: DefineSpec('number'),\n  dSubpixelQuality: DefineSpec('number')\n});\n\nvar FxaaShaderCode = ShaderCode('fxaa', quad_vert, fxaa_frag);\n\nfunction getFxaaRenderable(ctx, colorTexture) {\n  var width = colorTexture.getWidth();\n  var height = colorTexture.getHeight();\n\n  var values = __assign(__assign({}, QuadValues), {\n    tColor: ValueCell.create(colorTexture),\n    uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)),\n    dEdgeThresholdMin: ValueCell.create(0.0312),\n    dEdgeThresholdMax: ValueCell.create(0.125),\n    dIterations: ValueCell.create(12),\n    dSubpixelQuality: ValueCell.create(0.3)\n  });\n\n  var schema = __assign({}, FxaaSchema);\n\n  var renderItem = createComputeRenderItem(ctx, 'triangles', FxaaShaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}","map":{"version":3,"sources":["../../../src/mol-canvas3d/passes/fxaa.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\r\nimport { createComputeRenderable } from '../../mol-gl/renderable';\r\nimport { TextureSpec, UniformSpec, DefineSpec } from '../../mol-gl/renderable/schema';\r\nimport { ShaderCode } from '../../mol-gl/shader-code';\r\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\r\nimport { fxaa_frag } from '../../mol-gl/shader/fxaa.frag';\r\nexport var FxaaParams = {\r\n    edgeThresholdMin: PD.Numeric(0.0312, { min: 0.0312, max: 0.0833, step: 0.0001 }, { description: 'Trims the algorithm from processing darks.' }),\r\n    edgeThresholdMax: PD.Numeric(0.063, { min: 0.063, max: 0.333, step: 0.001 }, { description: 'The minimum amount of local contrast required to apply algorithm.' }),\r\n    iterations: PD.Numeric(12, { min: 0, max: 16, step: 1 }, { description: 'Number of edge exploration steps.' }),\r\n    subpixelQuality: PD.Numeric(0.30, { min: 0.00, max: 1.00, step: 0.01 }, { description: 'Choose the amount of sub-pixel aliasing removal.' }),\r\n};\r\nvar FxaaPass = /** @class */ (function () {\r\n    function FxaaPass(webgl, input) {\r\n        this.webgl = webgl;\r\n        this.renderable = getFxaaRenderable(webgl, input);\r\n    }\r\n    FxaaPass.prototype.updateState = function (viewport) {\r\n        var _a = this.webgl, gl = _a.gl, state = _a.state;\r\n        state.enable(gl.SCISSOR_TEST);\r\n        state.disable(gl.BLEND);\r\n        state.disable(gl.DEPTH_TEST);\r\n        state.depthMask(false);\r\n        var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;\r\n        gl.viewport(x, y, width, height);\r\n        gl.scissor(x, y, width, height);\r\n        state.clearColor(0, 0, 0, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    };\r\n    FxaaPass.prototype.setSize = function (width, height) {\r\n        ValueCell.update(this.renderable.values.uTexSizeInv, Vec2.set(this.renderable.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\r\n    };\r\n    FxaaPass.prototype.update = function (input, props) {\r\n        var values = this.renderable.values;\r\n        var edgeThresholdMin = props.edgeThresholdMin, edgeThresholdMax = props.edgeThresholdMax, iterations = props.iterations, subpixelQuality = props.subpixelQuality;\r\n        var needsUpdate = false;\r\n        if (values.tColor.ref.value !== input) {\r\n            ValueCell.update(this.renderable.values.tColor, input);\r\n            needsUpdate = true;\r\n        }\r\n        if (values.dEdgeThresholdMin.ref.value !== edgeThresholdMin)\r\n            needsUpdate = true;\r\n        ValueCell.updateIfChanged(values.dEdgeThresholdMin, edgeThresholdMin);\r\n        if (values.dEdgeThresholdMax.ref.value !== edgeThresholdMax)\r\n            needsUpdate = true;\r\n        ValueCell.updateIfChanged(values.dEdgeThresholdMax, edgeThresholdMax);\r\n        if (values.dIterations.ref.value !== iterations)\r\n            needsUpdate = true;\r\n        ValueCell.updateIfChanged(values.dIterations, iterations);\r\n        if (values.dSubpixelQuality.ref.value !== subpixelQuality)\r\n            needsUpdate = true;\r\n        ValueCell.updateIfChanged(values.dSubpixelQuality, subpixelQuality);\r\n        if (needsUpdate) {\r\n            this.renderable.update();\r\n        }\r\n    };\r\n    FxaaPass.prototype.render = function (viewport, target) {\r\n        if (target) {\r\n            target.bind();\r\n        }\r\n        else {\r\n            this.webgl.unbindFramebuffer();\r\n        }\r\n        this.updateState(viewport);\r\n        this.renderable.render();\r\n    };\r\n    return FxaaPass;\r\n}());\r\nexport { FxaaPass };\r\n//\r\nvar FxaaSchema = __assign(__assign({}, QuadSchema), { tColor: TextureSpec('texture', 'rgba', 'ubyte', 'linear'), uTexSizeInv: UniformSpec('v2'), dEdgeThresholdMin: DefineSpec('number'), dEdgeThresholdMax: DefineSpec('number'), dIterations: DefineSpec('number'), dSubpixelQuality: DefineSpec('number') });\r\nvar FxaaShaderCode = ShaderCode('fxaa', quad_vert, fxaa_frag);\r\nfunction getFxaaRenderable(ctx, colorTexture) {\r\n    var width = colorTexture.getWidth();\r\n    var height = colorTexture.getHeight();\r\n    var values = __assign(__assign({}, QuadValues), { tColor: ValueCell.create(colorTexture), uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)), dEdgeThresholdMin: ValueCell.create(0.0312), dEdgeThresholdMax: ValueCell.create(0.125), dIterations: ValueCell.create(12), dSubpixelQuality: ValueCell.create(0.3) });\r\n    var schema = __assign({}, FxaaSchema);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', FxaaShaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\n//# sourceMappingURL=fxaa.js.map"]},"metadata":{},"sourceType":"module"}