{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { idFactory } from '../mol-util/id-factory';\nimport { isWebGL2 } from './webgl/compat';\nvar shaderCodeId = idFactory();\nimport { apply_fog } from './shader/chunks/apply-fog.glsl';\nimport { apply_interior_color } from './shader/chunks/apply-interior-color.glsl';\nimport { apply_light_color } from './shader/chunks/apply-light-color.glsl';\nimport { apply_marker_color } from './shader/chunks/apply-marker-color.glsl';\nimport { assign_clipping_varying } from './shader/chunks/assign-clipping-varying.glsl';\nimport { assign_color_varying } from './shader/chunks/assign-color-varying.glsl';\nimport { assign_group } from './shader/chunks/assign-group.glsl';\nimport { assign_marker_varying } from './shader/chunks/assign-marker-varying.glsl';\nimport { assign_material_color } from './shader/chunks/assign-material-color.glsl';\nimport { assign_position } from './shader/chunks/assign-position.glsl';\nimport { assign_size } from './shader/chunks/assign-size.glsl';\nimport { check_picking_alpha } from './shader/chunks/check-picking-alpha.glsl';\nimport { clip_instance } from './shader/chunks/clip-instance.glsl';\nimport { clip_pixel } from './shader/chunks/clip-pixel.glsl';\nimport { color_frag_params } from './shader/chunks/color-frag-params.glsl';\nimport { color_vert_params } from './shader/chunks/color-vert-params.glsl';\nimport { common_clip } from './shader/chunks/common-clip.glsl';\nimport { common_frag_params } from './shader/chunks/common-frag-params.glsl';\nimport { common_vert_params } from './shader/chunks/common-vert-params.glsl';\nimport { common } from './shader/chunks/common.glsl';\nimport { float_to_rgba } from './shader/chunks/float-to-rgba.glsl';\nimport { light_frag_params } from './shader/chunks/light-frag-params.glsl';\nimport { matrix_scale } from './shader/chunks/matrix-scale.glsl';\nimport { normal_frag_params } from './shader/chunks/normal-frag-params.glsl';\nimport { read_from_texture } from './shader/chunks/read-from-texture.glsl';\nimport { rgba_to_float } from './shader/chunks/rgba-to-float.glsl';\nimport { size_vert_params } from './shader/chunks/size-vert-params.glsl';\nimport { texture3d_from_1d_trilinear } from './shader/chunks/texture3d-from-1d-trilinear.glsl';\nimport { texture3d_from_2d_linear } from './shader/chunks/texture3d-from-2d-linear.glsl';\nimport { texture3d_from_2d_nearest } from './shader/chunks/texture3d-from-2d-nearest.glsl';\nimport { wboit_write } from './shader/chunks/wboit-write.glsl';\nvar ShaderChunks = {\n  apply_fog: apply_fog,\n  apply_interior_color: apply_interior_color,\n  apply_light_color: apply_light_color,\n  apply_marker_color: apply_marker_color,\n  assign_clipping_varying: assign_clipping_varying,\n  assign_color_varying: assign_color_varying,\n  assign_group: assign_group,\n  assign_marker_varying: assign_marker_varying,\n  assign_material_color: assign_material_color,\n  assign_position: assign_position,\n  assign_size: assign_size,\n  check_picking_alpha: check_picking_alpha,\n  clip_instance: clip_instance,\n  clip_pixel: clip_pixel,\n  color_frag_params: color_frag_params,\n  color_vert_params: color_vert_params,\n  common_clip: common_clip,\n  common_frag_params: common_frag_params,\n  common_vert_params: common_vert_params,\n  common: common,\n  float_to_rgba: float_to_rgba,\n  light_frag_params: light_frag_params,\n  matrix_scale: matrix_scale,\n  normal_frag_params: normal_frag_params,\n  read_from_texture: read_from_texture,\n  rgba_to_float: rgba_to_float,\n  size_vert_params: size_vert_params,\n  texture3d_from_1d_trilinear: texture3d_from_1d_trilinear,\n  texture3d_from_2d_linear: texture3d_from_2d_linear,\n  texture3d_from_2d_nearest: texture3d_from_2d_nearest,\n  wboit_write: wboit_write\n};\nvar reInclude = /^(?!\\/\\/)\\s*#include\\s+(\\S+)/gmi;\nvar reSingleLineComment = /[ \\t]*\\/\\/.*\\n/g;\nvar reMultiLineComment = /[ \\t]*\\/\\*[\\s\\S]*?\\*\\//g;\nvar reMultipleLinebreaks = /\\n{2,}/g;\n\nfunction addIncludes(text) {\n  return text.replace(reInclude, function (_, p1) {\n    var chunk = ShaderChunks[p1];\n    if (!chunk) throw new Error(\"empty chunk, '\" + p1 + \"'\");\n    return chunk;\n  }).trim().replace(reSingleLineComment, '\\n').replace(reMultiLineComment, '\\n').replace(reMultipleLinebreaks, '\\n');\n}\n\nexport function ShaderCode(name, vert, frag, extensions, outTypes) {\n  if (extensions === void 0) {\n    extensions = {};\n  }\n\n  if (outTypes === void 0) {\n    outTypes = {};\n  }\n\n  return {\n    id: shaderCodeId(),\n    name: name,\n    vert: addIncludes(vert),\n    frag: addIncludes(frag),\n    extensions: extensions,\n    outTypes: outTypes\n  };\n} // Note: `drawBuffers` need to be 'optional' for wboit\n\nimport { points_vert } from './shader/points.vert';\nimport { points_frag } from './shader/points.frag';\nexport var PointsShaderCode = ShaderCode('points', points_vert, points_frag, {\n  drawBuffers: 'optional'\n});\nimport { spheres_vert } from './shader/spheres.vert';\nimport { spheres_frag } from './shader/spheres.frag';\nexport var SpheresShaderCode = ShaderCode('spheres', spheres_vert, spheres_frag, {\n  fragDepth: 'required',\n  drawBuffers: 'optional'\n});\nimport { cylinders_vert } from './shader/cylinders.vert';\nimport { cylinders_frag } from './shader/cylinders.frag';\nexport var CylindersShaderCode = ShaderCode('cylinders', cylinders_vert, cylinders_frag, {\n  fragDepth: 'required',\n  drawBuffers: 'optional'\n});\nimport { text_vert } from './shader/text.vert';\nimport { text_frag } from './shader/text.frag';\nexport var TextShaderCode = ShaderCode('text', text_vert, text_frag, {\n  standardDerivatives: 'required',\n  drawBuffers: 'optional'\n});\nimport { lines_vert } from './shader/lines.vert';\nimport { lines_frag } from './shader/lines.frag';\nexport var LinesShaderCode = ShaderCode('lines', lines_vert, lines_frag, {\n  drawBuffers: 'optional'\n});\nimport { mesh_vert } from './shader/mesh.vert';\nimport { mesh_frag } from './shader/mesh.frag';\nexport var MeshShaderCode = ShaderCode('mesh', mesh_vert, mesh_frag, {\n  standardDerivatives: 'optional',\n  drawBuffers: 'optional'\n});\nimport { directVolume_vert } from './shader/direct-volume.vert';\nimport { directVolume_frag } from './shader/direct-volume.frag';\nexport var DirectVolumeShaderCode = ShaderCode('direct-volume', directVolume_vert, directVolume_frag, {\n  fragDepth: 'optional',\n  drawBuffers: 'optional'\n});\nimport { image_vert } from './shader/image.vert';\nimport { image_frag } from './shader/image.frag';\nexport var ImageShaderCode = ShaderCode('image', image_vert, image_frag, {\n  drawBuffers: 'optional'\n});\n\nfunction getDefinesCode(defines) {\n  if (defines === undefined) return '';\n  var lines = [];\n\n  for (var name_1 in defines) {\n    var define = defines[name_1];\n    var v = define.ref.value;\n\n    if (v !== undefined) {\n      if (typeof v === 'string') {\n        lines.push(\"#define \" + name_1 + \"_\" + v);\n      } else if (typeof v === 'number') {\n        lines.push(\"#define \" + name_1 + \" \" + v);\n      } else if (typeof v === 'boolean') {\n        if (v) lines.push(\"#define \" + name_1);\n      } else {\n        throw new Error('unknown define type');\n      }\n    }\n  }\n\n  return lines.join('\\n') + '\\n';\n}\n\nfunction getGlsl100FragPrefix(extensions, shaderExtensions) {\n  var prefix = [];\n\n  if (shaderExtensions.standardDerivatives) {\n    prefix.push('#extension GL_OES_standard_derivatives : enable');\n    prefix.push('#define enabledStandardDerivatives');\n  }\n\n  if (shaderExtensions.fragDepth) {\n    if (extensions.fragDepth) {\n      prefix.push('#extension GL_EXT_frag_depth : enable');\n      prefix.push('#define enabledFragDepth');\n    } else if (shaderExtensions.fragDepth === 'required') {\n      throw new Error(\"required 'GL_EXT_frag_depth' extension not available\");\n    }\n  }\n\n  if (shaderExtensions.drawBuffers) {\n    if (extensions.drawBuffers) {\n      prefix.push('#extension GL_EXT_draw_buffers : require');\n      prefix.push('#define requiredDrawBuffers');\n      prefix.push('#define gl_FragColor gl_FragData[0]');\n    } else if (shaderExtensions.drawBuffers === 'required') {\n      throw new Error(\"required 'GL_EXT_draw_buffers' extension not available\");\n    }\n  }\n\n  if (shaderExtensions.shaderTextureLod) {\n    if (extensions.shaderTextureLod) {\n      prefix.push('#extension GL_EXT_shader_texture_lod : enable');\n      prefix.push('#define enabledShaderTextureLod');\n    } else if (shaderExtensions.shaderTextureLod === 'required') {\n      throw new Error(\"required 'GL_EXT_shader_texture_lod' extension not available\");\n    }\n  }\n\n  if (extensions.depthTexture) {\n    prefix.push('#define depthTextureSupport');\n  }\n\n  return prefix.join('\\n') + '\\n';\n}\n\nvar glsl300VertPrefix = \"#version 300 es\\n#define attribute in\\n#define varying out\\n#define texture2D texture\\n\";\nvar glsl300FragPrefixCommon = \"\\n#define varying in\\n#define texture2D texture\\n#define texture2DLodEXT textureLod\\n\\n#define gl_FragColor out_FragData0\\n#define gl_FragDepthEXT gl_FragDepth\\n\\n#define depthTextureSupport\\n\";\n\nfunction getGlsl300FragPrefix(gl, extensions, shaderExtensions, outTypes) {\n  var prefix = ['#version 300 es', \"layout(location = 0) out highp \" + (outTypes[0] || 'vec4') + \" out_FragData0;\"];\n\n  if (shaderExtensions.standardDerivatives) {\n    prefix.push('#define enabledStandardDerivatives');\n  }\n\n  if (shaderExtensions.fragDepth) {\n    prefix.push('#define enabledFragDepth');\n  }\n\n  if (shaderExtensions.drawBuffers) {\n    prefix.push('#define requiredDrawBuffers');\n    var maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);\n\n    for (var i = 1, il = maxDrawBuffers; i < il; ++i) {\n      prefix.push(\"layout(location = \" + i + \") out highp \" + (outTypes[i] || 'vec4') + \" out_FragData\" + i + \";\");\n    }\n  }\n\n  if (shaderExtensions.shaderTextureLod) {\n    prefix.push('#define enabledShaderTextureLod');\n  }\n\n  prefix.push(glsl300FragPrefixCommon);\n  return prefix.join('\\n') + '\\n';\n}\n\nfunction transformGlsl300Frag(frag) {\n  return frag.replace(/gl_FragData\\[([0-9]+)\\]/g, 'out_FragData$1');\n}\n\nexport function addShaderDefines(gl, extensions, defines, shaders) {\n  var header = getDefinesCode(defines);\n  var vertPrefix = isWebGL2(gl) ? glsl300VertPrefix : '';\n  var fragPrefix = isWebGL2(gl) ? getGlsl300FragPrefix(gl, extensions, shaders.extensions, shaders.outTypes) : getGlsl100FragPrefix(extensions, shaders.extensions);\n  var frag = isWebGL2(gl) ? transformGlsl300Frag(shaders.frag) : shaders.frag;\n  return {\n    id: shaderCodeId(),\n    name: shaders.name,\n    vert: \"\" + vertPrefix + header + shaders.vert,\n    frag: \"\" + fragPrefix + header + frag,\n    extensions: shaders.extensions,\n    outTypes: shaders.outTypes\n  };\n}","map":{"version":3,"sources":["../../src/mol-gl/shader-code.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { idFactory } from '../mol-util/id-factory';\r\nimport { isWebGL2 } from './webgl/compat';\r\nvar shaderCodeId = idFactory();\r\nimport { apply_fog } from './shader/chunks/apply-fog.glsl';\r\nimport { apply_interior_color } from './shader/chunks/apply-interior-color.glsl';\r\nimport { apply_light_color } from './shader/chunks/apply-light-color.glsl';\r\nimport { apply_marker_color } from './shader/chunks/apply-marker-color.glsl';\r\nimport { assign_clipping_varying } from './shader/chunks/assign-clipping-varying.glsl';\r\nimport { assign_color_varying } from './shader/chunks/assign-color-varying.glsl';\r\nimport { assign_group } from './shader/chunks/assign-group.glsl';\r\nimport { assign_marker_varying } from './shader/chunks/assign-marker-varying.glsl';\r\nimport { assign_material_color } from './shader/chunks/assign-material-color.glsl';\r\nimport { assign_position } from './shader/chunks/assign-position.glsl';\r\nimport { assign_size } from './shader/chunks/assign-size.glsl';\r\nimport { check_picking_alpha } from './shader/chunks/check-picking-alpha.glsl';\r\nimport { clip_instance } from './shader/chunks/clip-instance.glsl';\r\nimport { clip_pixel } from './shader/chunks/clip-pixel.glsl';\r\nimport { color_frag_params } from './shader/chunks/color-frag-params.glsl';\r\nimport { color_vert_params } from './shader/chunks/color-vert-params.glsl';\r\nimport { common_clip } from './shader/chunks/common-clip.glsl';\r\nimport { common_frag_params } from './shader/chunks/common-frag-params.glsl';\r\nimport { common_vert_params } from './shader/chunks/common-vert-params.glsl';\r\nimport { common } from './shader/chunks/common.glsl';\r\nimport { float_to_rgba } from './shader/chunks/float-to-rgba.glsl';\r\nimport { light_frag_params } from './shader/chunks/light-frag-params.glsl';\r\nimport { matrix_scale } from './shader/chunks/matrix-scale.glsl';\r\nimport { normal_frag_params } from './shader/chunks/normal-frag-params.glsl';\r\nimport { read_from_texture } from './shader/chunks/read-from-texture.glsl';\r\nimport { rgba_to_float } from './shader/chunks/rgba-to-float.glsl';\r\nimport { size_vert_params } from './shader/chunks/size-vert-params.glsl';\r\nimport { texture3d_from_1d_trilinear } from './shader/chunks/texture3d-from-1d-trilinear.glsl';\r\nimport { texture3d_from_2d_linear } from './shader/chunks/texture3d-from-2d-linear.glsl';\r\nimport { texture3d_from_2d_nearest } from './shader/chunks/texture3d-from-2d-nearest.glsl';\r\nimport { wboit_write } from './shader/chunks/wboit-write.glsl';\r\nvar ShaderChunks = {\r\n    apply_fog: apply_fog,\r\n    apply_interior_color: apply_interior_color,\r\n    apply_light_color: apply_light_color,\r\n    apply_marker_color: apply_marker_color,\r\n    assign_clipping_varying: assign_clipping_varying,\r\n    assign_color_varying: assign_color_varying,\r\n    assign_group: assign_group,\r\n    assign_marker_varying: assign_marker_varying,\r\n    assign_material_color: assign_material_color,\r\n    assign_position: assign_position,\r\n    assign_size: assign_size,\r\n    check_picking_alpha: check_picking_alpha,\r\n    clip_instance: clip_instance,\r\n    clip_pixel: clip_pixel,\r\n    color_frag_params: color_frag_params,\r\n    color_vert_params: color_vert_params,\r\n    common_clip: common_clip,\r\n    common_frag_params: common_frag_params,\r\n    common_vert_params: common_vert_params,\r\n    common: common,\r\n    float_to_rgba: float_to_rgba,\r\n    light_frag_params: light_frag_params,\r\n    matrix_scale: matrix_scale,\r\n    normal_frag_params: normal_frag_params,\r\n    read_from_texture: read_from_texture,\r\n    rgba_to_float: rgba_to_float,\r\n    size_vert_params: size_vert_params,\r\n    texture3d_from_1d_trilinear: texture3d_from_1d_trilinear,\r\n    texture3d_from_2d_linear: texture3d_from_2d_linear,\r\n    texture3d_from_2d_nearest: texture3d_from_2d_nearest,\r\n    wboit_write: wboit_write\r\n};\r\nvar reInclude = /^(?!\\/\\/)\\s*#include\\s+(\\S+)/gmi;\r\nvar reSingleLineComment = /[ \\t]*\\/\\/.*\\n/g;\r\nvar reMultiLineComment = /[ \\t]*\\/\\*[\\s\\S]*?\\*\\//g;\r\nvar reMultipleLinebreaks = /\\n{2,}/g;\r\nfunction addIncludes(text) {\r\n    return text\r\n        .replace(reInclude, function (_, p1) {\r\n        var chunk = ShaderChunks[p1];\r\n        if (!chunk)\r\n            throw new Error(\"empty chunk, '\" + p1 + \"'\");\r\n        return chunk;\r\n    })\r\n        .trim()\r\n        .replace(reSingleLineComment, '\\n')\r\n        .replace(reMultiLineComment, '\\n')\r\n        .replace(reMultipleLinebreaks, '\\n');\r\n}\r\nexport function ShaderCode(name, vert, frag, extensions, outTypes) {\r\n    if (extensions === void 0) { extensions = {}; }\r\n    if (outTypes === void 0) { outTypes = {}; }\r\n    return { id: shaderCodeId(), name: name, vert: addIncludes(vert), frag: addIncludes(frag), extensions: extensions, outTypes: outTypes };\r\n}\r\n// Note: `drawBuffers` need to be 'optional' for wboit\r\nimport { points_vert } from './shader/points.vert';\r\nimport { points_frag } from './shader/points.frag';\r\nexport var PointsShaderCode = ShaderCode('points', points_vert, points_frag, { drawBuffers: 'optional' });\r\nimport { spheres_vert } from './shader/spheres.vert';\r\nimport { spheres_frag } from './shader/spheres.frag';\r\nexport var SpheresShaderCode = ShaderCode('spheres', spheres_vert, spheres_frag, { fragDepth: 'required', drawBuffers: 'optional' });\r\nimport { cylinders_vert } from './shader/cylinders.vert';\r\nimport { cylinders_frag } from './shader/cylinders.frag';\r\nexport var CylindersShaderCode = ShaderCode('cylinders', cylinders_vert, cylinders_frag, { fragDepth: 'required', drawBuffers: 'optional' });\r\nimport { text_vert } from './shader/text.vert';\r\nimport { text_frag } from './shader/text.frag';\r\nexport var TextShaderCode = ShaderCode('text', text_vert, text_frag, { standardDerivatives: 'required', drawBuffers: 'optional' });\r\nimport { lines_vert } from './shader/lines.vert';\r\nimport { lines_frag } from './shader/lines.frag';\r\nexport var LinesShaderCode = ShaderCode('lines', lines_vert, lines_frag, { drawBuffers: 'optional' });\r\nimport { mesh_vert } from './shader/mesh.vert';\r\nimport { mesh_frag } from './shader/mesh.frag';\r\nexport var MeshShaderCode = ShaderCode('mesh', mesh_vert, mesh_frag, { standardDerivatives: 'optional', drawBuffers: 'optional' });\r\nimport { directVolume_vert } from './shader/direct-volume.vert';\r\nimport { directVolume_frag } from './shader/direct-volume.frag';\r\nexport var DirectVolumeShaderCode = ShaderCode('direct-volume', directVolume_vert, directVolume_frag, { fragDepth: 'optional', drawBuffers: 'optional' });\r\nimport { image_vert } from './shader/image.vert';\r\nimport { image_frag } from './shader/image.frag';\r\nexport var ImageShaderCode = ShaderCode('image', image_vert, image_frag, { drawBuffers: 'optional' });\r\nfunction getDefinesCode(defines) {\r\n    if (defines === undefined)\r\n        return '';\r\n    var lines = [];\r\n    for (var name_1 in defines) {\r\n        var define = defines[name_1];\r\n        var v = define.ref.value;\r\n        if (v !== undefined) {\r\n            if (typeof v === 'string') {\r\n                lines.push(\"#define \" + name_1 + \"_\" + v);\r\n            }\r\n            else if (typeof v === 'number') {\r\n                lines.push(\"#define \" + name_1 + \" \" + v);\r\n            }\r\n            else if (typeof v === 'boolean') {\r\n                if (v)\r\n                    lines.push(\"#define \" + name_1);\r\n            }\r\n            else {\r\n                throw new Error('unknown define type');\r\n            }\r\n        }\r\n    }\r\n    return lines.join('\\n') + '\\n';\r\n}\r\nfunction getGlsl100FragPrefix(extensions, shaderExtensions) {\r\n    var prefix = [];\r\n    if (shaderExtensions.standardDerivatives) {\r\n        prefix.push('#extension GL_OES_standard_derivatives : enable');\r\n        prefix.push('#define enabledStandardDerivatives');\r\n    }\r\n    if (shaderExtensions.fragDepth) {\r\n        if (extensions.fragDepth) {\r\n            prefix.push('#extension GL_EXT_frag_depth : enable');\r\n            prefix.push('#define enabledFragDepth');\r\n        }\r\n        else if (shaderExtensions.fragDepth === 'required') {\r\n            throw new Error(\"required 'GL_EXT_frag_depth' extension not available\");\r\n        }\r\n    }\r\n    if (shaderExtensions.drawBuffers) {\r\n        if (extensions.drawBuffers) {\r\n            prefix.push('#extension GL_EXT_draw_buffers : require');\r\n            prefix.push('#define requiredDrawBuffers');\r\n            prefix.push('#define gl_FragColor gl_FragData[0]');\r\n        }\r\n        else if (shaderExtensions.drawBuffers === 'required') {\r\n            throw new Error(\"required 'GL_EXT_draw_buffers' extension not available\");\r\n        }\r\n    }\r\n    if (shaderExtensions.shaderTextureLod) {\r\n        if (extensions.shaderTextureLod) {\r\n            prefix.push('#extension GL_EXT_shader_texture_lod : enable');\r\n            prefix.push('#define enabledShaderTextureLod');\r\n        }\r\n        else if (shaderExtensions.shaderTextureLod === 'required') {\r\n            throw new Error(\"required 'GL_EXT_shader_texture_lod' extension not available\");\r\n        }\r\n    }\r\n    if (extensions.depthTexture) {\r\n        prefix.push('#define depthTextureSupport');\r\n    }\r\n    return prefix.join('\\n') + '\\n';\r\n}\r\nvar glsl300VertPrefix = \"#version 300 es\\n#define attribute in\\n#define varying out\\n#define texture2D texture\\n\";\r\nvar glsl300FragPrefixCommon = \"\\n#define varying in\\n#define texture2D texture\\n#define texture2DLodEXT textureLod\\n\\n#define gl_FragColor out_FragData0\\n#define gl_FragDepthEXT gl_FragDepth\\n\\n#define depthTextureSupport\\n\";\r\nfunction getGlsl300FragPrefix(gl, extensions, shaderExtensions, outTypes) {\r\n    var prefix = [\r\n        '#version 300 es',\r\n        \"layout(location = 0) out highp \" + (outTypes[0] || 'vec4') + \" out_FragData0;\"\r\n    ];\r\n    if (shaderExtensions.standardDerivatives) {\r\n        prefix.push('#define enabledStandardDerivatives');\r\n    }\r\n    if (shaderExtensions.fragDepth) {\r\n        prefix.push('#define enabledFragDepth');\r\n    }\r\n    if (shaderExtensions.drawBuffers) {\r\n        prefix.push('#define requiredDrawBuffers');\r\n        var maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);\r\n        for (var i = 1, il = maxDrawBuffers; i < il; ++i) {\r\n            prefix.push(\"layout(location = \" + i + \") out highp \" + (outTypes[i] || 'vec4') + \" out_FragData\" + i + \";\");\r\n        }\r\n    }\r\n    if (shaderExtensions.shaderTextureLod) {\r\n        prefix.push('#define enabledShaderTextureLod');\r\n    }\r\n    prefix.push(glsl300FragPrefixCommon);\r\n    return prefix.join('\\n') + '\\n';\r\n}\r\nfunction transformGlsl300Frag(frag) {\r\n    return frag.replace(/gl_FragData\\[([0-9]+)\\]/g, 'out_FragData$1');\r\n}\r\nexport function addShaderDefines(gl, extensions, defines, shaders) {\r\n    var header = getDefinesCode(defines);\r\n    var vertPrefix = isWebGL2(gl) ? glsl300VertPrefix : '';\r\n    var fragPrefix = isWebGL2(gl)\r\n        ? getGlsl300FragPrefix(gl, extensions, shaders.extensions, shaders.outTypes)\r\n        : getGlsl100FragPrefix(extensions, shaders.extensions);\r\n    var frag = isWebGL2(gl) ? transformGlsl300Frag(shaders.frag) : shaders.frag;\r\n    return {\r\n        id: shaderCodeId(),\r\n        name: shaders.name,\r\n        vert: \"\" + vertPrefix + header + shaders.vert,\r\n        frag: \"\" + fragPrefix + header + frag,\r\n        extensions: shaders.extensions,\r\n        outTypes: shaders.outTypes\r\n    };\r\n}\r\n//# sourceMappingURL=shader-code.js.map"]},"metadata":{},"sourceType":"module"}