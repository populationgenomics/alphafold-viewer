{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { createRangeArray, makeBuckets } from '../../../mol-data/util';\nimport { Column, Table } from '../../../mol-data/db';\nimport { arrayIsIdentity } from '../../../mol-util/array';\nexport function sortAtomSite(ctx, atom_site, start, end) {\n  return __awaiter(this, void 0, void 0, function () {\n    var indices, label_entity_id, label_asym_id, label_seq_id, entityBuckets, ei, _eI, chainBuckets, cI, _cI, aI;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          indices = createRangeArray(start, end - 1);\n          label_entity_id = atom_site.label_entity_id, label_asym_id = atom_site.label_asym_id, label_seq_id = atom_site.label_seq_id;\n          entityBuckets = makeBuckets(indices, label_entity_id.value);\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , ctx.update()];\n\n        case 1:\n          _a.sent();\n\n          _a.label = 2;\n\n        case 2:\n          ei = 0, _eI = entityBuckets.length - 1;\n          _a.label = 3;\n\n        case 3:\n          if (!(ei < _eI)) return [3\n          /*break*/\n          , 10];\n          chainBuckets = makeBuckets(indices, label_asym_id.value, {\n            start: entityBuckets[ei],\n            end: entityBuckets[ei + 1]\n          });\n          cI = 0, _cI = chainBuckets.length - 1;\n          _a.label = 4;\n\n        case 4:\n          if (!(cI < _cI)) return [3\n          /*break*/\n          , 7];\n          aI = chainBuckets[cI]; // are we in HETATM territory?\n\n          if (label_seq_id.valueKind(aI) !== 0\n          /* Present */\n          ) return [3\n          /*break*/\n          , 6];\n          makeBuckets(indices, label_seq_id.value, {\n            sort: true,\n            start: aI,\n            end: chainBuckets[cI + 1]\n          });\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , ctx.update()];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          cI++;\n          return [3\n          /*break*/\n          , 4];\n\n        case 7:\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 9];\n          return [4\n          /*yield*/\n          , ctx.update()];\n\n        case 8:\n          _a.sent();\n\n          _a.label = 9;\n\n        case 9:\n          ei++;\n          return [3\n          /*break*/\n          , 3];\n\n        case 10:\n          if (arrayIsIdentity(indices) && indices.length === atom_site._rowCount) {\n            return [2\n            /*return*/\n            , {\n              atom_site: atom_site,\n              sourceIndex: Column.ofIntArray(indices)\n            }];\n          }\n\n          return [2\n          /*return*/\n          , {\n            atom_site: Table.view(atom_site, atom_site._schema, indices),\n            sourceIndex: Column.ofIntArray(indices)\n          }];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/sort.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { createRangeArray, makeBuckets } from '../../../mol-data/util';\r\nimport { Column, Table } from '../../../mol-data/db';\r\nimport { arrayIsIdentity } from '../../../mol-util/array';\r\nexport function sortAtomSite(ctx, atom_site, start, end) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var indices, label_entity_id, label_asym_id, label_seq_id, entityBuckets, ei, _eI, chainBuckets, cI, _cI, aI;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    indices = createRangeArray(start, end - 1);\r\n                    label_entity_id = atom_site.label_entity_id, label_asym_id = atom_site.label_asym_id, label_seq_id = atom_site.label_seq_id;\r\n                    entityBuckets = makeBuckets(indices, label_entity_id.value);\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, ctx.update()];\r\n                case 1:\r\n                    _a.sent();\r\n                    _a.label = 2;\r\n                case 2:\r\n                    ei = 0, _eI = entityBuckets.length - 1;\r\n                    _a.label = 3;\r\n                case 3:\r\n                    if (!(ei < _eI)) return [3 /*break*/, 10];\r\n                    chainBuckets = makeBuckets(indices, label_asym_id.value, { start: entityBuckets[ei], end: entityBuckets[ei + 1] });\r\n                    cI = 0, _cI = chainBuckets.length - 1;\r\n                    _a.label = 4;\r\n                case 4:\r\n                    if (!(cI < _cI)) return [3 /*break*/, 7];\r\n                    aI = chainBuckets[cI];\r\n                    // are we in HETATM territory?\r\n                    if (label_seq_id.valueKind(aI) !== 0 /* Present */)\r\n                        return [3 /*break*/, 6];\r\n                    makeBuckets(indices, label_seq_id.value, { sort: true, start: aI, end: chainBuckets[cI + 1] });\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, ctx.update()];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6:\r\n                    cI++;\r\n                    return [3 /*break*/, 4];\r\n                case 7:\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 9];\r\n                    return [4 /*yield*/, ctx.update()];\r\n                case 8:\r\n                    _a.sent();\r\n                    _a.label = 9;\r\n                case 9:\r\n                    ei++;\r\n                    return [3 /*break*/, 3];\r\n                case 10:\r\n                    if (arrayIsIdentity(indices) && indices.length === atom_site._rowCount) {\r\n                        return [2 /*return*/, { atom_site: atom_site, sourceIndex: Column.ofIntArray(indices) }];\r\n                    }\r\n                    return [2 /*return*/, {\r\n                            atom_site: Table.view(atom_site, atom_site._schema, indices),\r\n                            sourceIndex: Column.ofIntArray(indices)\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=sort.js.map"]},"metadata":{},"sourceType":"module"}