{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n// http://paulbourke.net/dataformats/ply/\n// https://en.wikipedia.org/wiki/PLY_(file_format)\nexport var PlyTypeByteLength = {\n  'char': 1,\n  'uchar': 1,\n  'short': 2,\n  'ushort': 2,\n  'int': 4,\n  'uint': 4,\n  'float': 4,\n  'double': 8,\n  'int8': 1,\n  'uint8': 1,\n  'int16': 2,\n  'uint16': 2,\n  'int32': 4,\n  'uint32': 4,\n  'float32': 4,\n  'float64': 8\n};\nexport var PlyTypes = new Set(Object.keys(PlyTypeByteLength));\nexport function PlyType(str) {\n  if (!PlyTypes.has(str)) throw new Error(\"unknown ply type '\" + str + \"'\");\n  return str;\n}\nexport function PlyFile(elements, elementNames, comments) {\n  var elementMap = new Map();\n\n  for (var i = 0, il = elementNames.length; i < il; ++i) {\n    elementMap.set(elementNames[i], elements[i]);\n  }\n\n  return {\n    comments: comments,\n    elementNames: elementNames,\n    getElement: function (name) {\n      return elementMap.get(name);\n    }\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/ply/schema.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAIH;AACA;AAEA,OAAO,IAAM,iBAAiB,GAAG;AAC7B,UAAQ,CADqB;AAE7B,WAAS,CAFoB;AAG7B,WAAS,CAHoB;AAI7B,YAAU,CAJmB;AAK7B,SAAO,CALsB;AAM7B,UAAQ,CANqB;AAO7B,WAAS,CAPoB;AAQ7B,YAAU,CARmB;AAU7B,UAAQ,CAVqB;AAW7B,WAAS,CAXoB;AAY7B,WAAS,CAZoB;AAa7B,YAAU,CAbmB;AAc7B,WAAS,CAdoB;AAe7B,YAAU,CAfmB;AAgB7B,aAAW,CAhBkB;AAiB7B,aAAW;AAjBkB,CAA1B;AAoBP,OAAO,IAAM,QAAQ,GAAG,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,iBAAZ,CAAR,CAAjB;AACP,OAAM,SAAU,OAAV,CAAkB,GAAlB,EAA6B;AAC/B,MAAI,CAAC,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAL,EAAwB,MAAM,IAAI,KAAJ,CAAU,uBAAqB,GAArB,GAAwB,GAAlC,CAAN;AACxB,SAAO,GAAP;AACH;AAQD,OAAM,SAAU,OAAV,CAAkB,QAAlB,EAA0C,YAA1C,EAAkE,QAAlE,EAAoF;AACtF,MAAM,UAAU,GAAG,IAAI,GAAJ,EAAnB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,YAAY,CAAC,MAAlC,EAA0C,CAAC,GAAG,EAA9C,EAAkD,EAAE,CAApD,EAAuD;AACnD,IAAA,UAAU,CAAC,GAAX,CAAe,YAAY,CAAC,CAAD,CAA3B,EAAgC,QAAQ,CAAC,CAAD,CAAxC;AACH;;AACD,SAAO;AACH,IAAA,QAAQ,EAAA,QADL;AAEH,IAAA,YAAY,EAAA,YAFT;AAGH,IAAA,UAAU,EAAE,UAAC,IAAD,EAAa;AACrB,aAAO,UAAU,CAAC,GAAX,CAAe,IAAf,CAAP;AACH;AALE,GAAP;AAOH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n// http://paulbourke.net/dataformats/ply/\r\n// https://en.wikipedia.org/wiki/PLY_(file_format)\r\nexport var PlyTypeByteLength = {\r\n    'char': 1,\r\n    'uchar': 1,\r\n    'short': 2,\r\n    'ushort': 2,\r\n    'int': 4,\r\n    'uint': 4,\r\n    'float': 4,\r\n    'double': 8,\r\n    'int8': 1,\r\n    'uint8': 1,\r\n    'int16': 2,\r\n    'uint16': 2,\r\n    'int32': 4,\r\n    'uint32': 4,\r\n    'float32': 4,\r\n    'float64': 8\r\n};\r\nexport var PlyTypes = new Set(Object.keys(PlyTypeByteLength));\r\nexport function PlyType(str) {\r\n    if (!PlyTypes.has(str))\r\n        throw new Error(\"unknown ply type '\" + str + \"'\");\r\n    return str;\r\n}\r\nexport function PlyFile(elements, elementNames, comments) {\r\n    var elementMap = new Map();\r\n    for (var i = 0, il = elementNames.length; i < il; ++i) {\r\n        elementMap.set(elementNames[i], elements[i]);\r\n    }\r\n    return {\r\n        comments: comments,\r\n        elementNames: elementNames,\r\n        getElement: function (name) {\r\n            return elementMap.get(name);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"module"}