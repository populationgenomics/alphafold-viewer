{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Visual } from '../visual';\nimport { Volume } from '../../mol-model/volume';\nimport { Geometry } from '../../mol-geo/geometry/geometry';\nimport { Theme } from '../../mol-theme/theme';\nimport { createIdentityTransform } from '../../mol-geo/geometry/transform-data';\nimport { createRenderObject, getNextMaterialId } from '../../mol-gl/render-object';\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\nimport { Interval } from '../../mol-data/int';\nimport { getQualityProps, VisualUpdateState } from '../util';\nimport { ColorTheme } from '../../mol-theme/color';\nimport { ValueCell } from '../../mol-util';\nimport { createSizes } from '../../mol-geo/geometry/size-data';\nimport { createColors } from '../../mol-geo/geometry/color-data';\nimport { Representation } from '../representation';\nimport { BaseGeometry } from '../../mol-geo/geometry/base';\nimport { Subject } from 'rxjs';\nimport { Task } from '../../mol-task';\nimport { isPromiseLike } from '../../mol-util/type-helpers';\n\nfunction createVolumeRenderObject(volume, geometry, locationIt, theme, props, materialId) {\n  var _a = Geometry.getUtils(geometry),\n      createValues = _a.createValues,\n      createRenderableState = _a.createRenderableState;\n\n  var transform = createIdentityTransform();\n  var values = createValues(geometry, transform, locationIt, theme, props);\n  var state = createRenderableState(props);\n  return createRenderObject(geometry.kind, values, state, materialId);\n}\n\nexport function VolumeVisual(builder, materialId) {\n  var defaultProps = builder.defaultProps,\n      createGeometry = builder.createGeometry,\n      createLocationIterator = builder.createLocationIterator,\n      getLoci = builder.getLoci,\n      eachLocation = builder.eachLocation,\n      setUpdateState = builder.setUpdateState,\n      mustRecreate = builder.mustRecreate,\n      dispose = builder.dispose;\n  var _a = builder.geometryUtils,\n      updateValues = _a.updateValues,\n      updateBoundingSphere = _a.updateBoundingSphere,\n      updateRenderableState = _a.updateRenderableState,\n      createPositionIterator = _a.createPositionIterator;\n  var updateState = VisualUpdateState.create();\n  var renderObject;\n  var newProps;\n  var newTheme;\n  var newVolume;\n  var currentProps = Object.assign({}, defaultProps);\n  var currentTheme = Theme.createEmpty();\n  var currentVolume;\n  var geometry;\n  var locationIt;\n  var positionIt;\n\n  function prepareUpdate(theme, props, volume) {\n    if (!volume && !currentVolume) {\n      throw new Error('missing volume');\n    }\n\n    newProps = Object.assign({}, currentProps, props);\n    newTheme = theme;\n    newVolume = volume;\n    VisualUpdateState.reset(updateState);\n\n    if (!renderObject) {\n      updateState.createNew = true;\n    } else if (!currentVolume || !Volume.areEquivalent(newVolume, currentVolume)) {\n      updateState.createNew = true;\n    }\n\n    if (updateState.createNew) {\n      updateState.createGeometry = true;\n      return;\n    }\n\n    setUpdateState(updateState, volume, newProps, currentProps, newTheme, currentTheme);\n    if (!ColorTheme.areEqual(theme.color, currentTheme.color)) updateState.updateColor = true;\n\n    if (updateState.createGeometry) {\n      updateState.updateColor = true;\n    }\n  }\n\n  function update(newGeometry) {\n    if (updateState.createNew) {\n      locationIt = createLocationIterator(newVolume);\n\n      if (newGeometry) {\n        renderObject = createVolumeRenderObject(newVolume, newGeometry, locationIt, newTheme, newProps, materialId);\n        positionIt = createPositionIterator(newGeometry, renderObject.values);\n      } else {\n        throw new Error('expected geometry to be given');\n      }\n    } else {\n      if (!renderObject) {\n        throw new Error('expected renderObject to be available');\n      }\n\n      locationIt.reset();\n\n      if (updateState.createGeometry) {\n        if (newGeometry) {\n          ValueCell.updateIfChanged(renderObject.values.drawCount, Geometry.getDrawCount(newGeometry));\n          ValueCell.updateIfChanged(renderObject.values.uVertexCount, Geometry.getVertexCount(newGeometry));\n        } else {\n          throw new Error('expected geometry to be given');\n        }\n      }\n\n      if (updateState.updateTransform || updateState.createGeometry) {\n        updateBoundingSphere(renderObject.values, newGeometry || geometry);\n        positionIt = createPositionIterator(newGeometry || geometry, renderObject.values);\n      }\n\n      if (updateState.updateSize) {\n        // not all geometries have size data, so check here\n        if ('uSize' in renderObject.values) {\n          createSizes(locationIt, newTheme.size, renderObject.values);\n        }\n      }\n\n      if (updateState.updateColor) {\n        createColors(locationIt, positionIt, newTheme.color, renderObject.values);\n      }\n\n      updateValues(renderObject.values, newProps);\n      updateRenderableState(renderObject.state, newProps);\n    }\n\n    currentProps = newProps;\n    currentTheme = newTheme;\n    currentVolume = newVolume;\n    if (newGeometry) geometry = newGeometry;\n  }\n\n  function lociApply(loci, apply) {\n    if (isEveryLoci(loci)) {\n      return apply(Interval.ofBounds(0, locationIt.groupCount * locationIt.instanceCount));\n    } else {\n      return eachLocation(loci, currentVolume, currentProps, apply);\n    }\n  }\n\n  return {\n    get groupCount() {\n      return locationIt ? locationIt.count : 0;\n    },\n\n    get renderObject() {\n      return renderObject;\n    },\n\n    createOrUpdate: function (ctx, theme, props, volume) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        var newGeometry;\n        return __generator(this, function (_a) {\n          prepareUpdate(theme, props, volume || currentVolume);\n\n          if (updateState.createGeometry) {\n            newGeometry = createGeometry(ctx, newVolume, newTheme, newProps, geometry);\n            return [2\n            /*return*/\n            , isPromiseLike(newGeometry) ? newGeometry.then(update) : update(newGeometry)];\n          } else {\n            update();\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    },\n    getLoci: function (pickingId) {\n      return renderObject ? getLoci(pickingId, currentVolume, currentProps, renderObject.id) : EmptyLoci;\n    },\n    mark: function (loci, action) {\n      return Visual.mark(renderObject, loci, action, lociApply);\n    },\n    setVisibility: function (visible) {\n      Visual.setVisibility(renderObject, visible);\n    },\n    setAlphaFactor: function (alphaFactor) {\n      Visual.setAlphaFactor(renderObject, alphaFactor);\n    },\n    setPickable: function (pickable) {\n      Visual.setPickable(renderObject, pickable);\n    },\n    setColorOnly: function (colorOnly) {\n      Visual.setColorOnly(renderObject, colorOnly);\n    },\n    setTransform: function (matrix, instanceMatrices) {\n      Visual.setTransform(renderObject, matrix, instanceMatrices);\n    },\n    setOverpaint: function (overpaint) {\n      return Visual.setOverpaint(renderObject, overpaint, lociApply, true);\n    },\n    setTransparency: function (transparency) {\n      return Visual.setTransparency(renderObject, transparency, lociApply, true);\n    },\n    setClipping: function (clipping) {\n      return Visual.setClipping(renderObject, clipping, lociApply, true);\n    },\n    destroy: function () {\n      dispose === null || dispose === void 0 ? void 0 : dispose(geometry);\n\n      if (renderObject) {\n        renderObject.state.disposed = true;\n        renderObject = undefined;\n      }\n    },\n    mustRecreate: mustRecreate\n  };\n}\nexport function VolumeRepresentationProvider(p) {\n  return p;\n} //\n\nexport var VolumeParams = __assign({}, BaseGeometry.Params);\nexport function VolumeRepresentation(label, ctx, getParams, visualCtor, getLoci) {\n  var version = 0;\n  var webgl = ctx.webgl;\n  var updated = new Subject();\n  var materialId = getNextMaterialId();\n  var renderObjects = [];\n\n  var _state = Representation.createState();\n\n  var visual;\n\n  var _volume;\n\n  var _params;\n\n  var _props;\n\n  var _theme = Theme.createEmpty();\n\n  function createOrUpdate(props, volume) {\n    var _this = this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (volume && volume !== _volume) {\n      _params = getParams(ctx, volume);\n      _volume = volume;\n      if (!_props) _props = PD.getDefaultValues(_params);\n    }\n\n    var qualityProps = getQualityProps(Object.assign({}, _props, props), _volume);\n    Object.assign(_props, props, qualityProps);\n    return Task.create('Creating or updating VolumeRepresentation', function (runtime) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var promise;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!visual) {\n                visual = visualCtor(materialId, _volume, _props, webgl);\n              } else if ((_a = visual.mustRecreate) === null || _a === void 0 ? void 0 : _a.call(visual, _volume, _props, webgl)) {\n                visual.destroy();\n                visual = visualCtor(materialId, _volume, _props, webgl);\n              }\n\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, volume);\n              if (!promise) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 1:\n              _b.sent();\n\n              _b.label = 2;\n\n            case 2:\n              // update list of renderObjects\n              renderObjects.length = 0;\n              if (visual && visual.renderObject) renderObjects.push(visual.renderObject); // increment version\n\n              updated.next(version++);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  function mark(loci, action) {\n    return visual ? visual.mark(loci, action) : false;\n  }\n\n  function setState(state) {\n    if (state.visible !== undefined && visual) visual.setVisibility(state.visible);\n    if (state.alphaFactor !== undefined && visual) visual.setAlphaFactor(state.alphaFactor);\n    if (state.pickable !== undefined && visual) visual.setPickable(state.pickable);\n    if (state.overpaint !== undefined && visual) visual.setOverpaint(state.overpaint);\n    if (state.transparency !== undefined && visual) visual.setTransparency(state.transparency);\n    if (state.transform !== undefined && visual) visual.setTransform(state.transform);\n    Representation.updateState(_state, state);\n  }\n\n  function setTheme(theme) {\n    _theme = theme;\n  }\n\n  function destroy() {\n    if (visual) visual.destroy();\n  }\n\n  return {\n    label: label,\n\n    get groupCount() {\n      return visual ? visual.groupCount : 0;\n    },\n\n    get props() {\n      return _props;\n    },\n\n    get params() {\n      return _params;\n    },\n\n    get state() {\n      return _state;\n    },\n\n    get theme() {\n      return _theme;\n    },\n\n    renderObjects: renderObjects,\n    updated: updated,\n    createOrUpdate: createOrUpdate,\n    setState: setState,\n    setTheme: setTheme,\n    getLoci: function (pickingId) {\n      if (pickingId === undefined) return getLoci(_volume, _props);\n      return visual ? visual.getLoci(pickingId) : EmptyLoci;\n    },\n    mark: mark,\n    destroy: destroy\n  };\n}","map":{"version":3,"sources":["../../../src/mol-repr/volume/representation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Visual } from '../visual';\r\nimport { Volume } from '../../mol-model/volume';\r\nimport { Geometry } from '../../mol-geo/geometry/geometry';\r\nimport { Theme } from '../../mol-theme/theme';\r\nimport { createIdentityTransform } from '../../mol-geo/geometry/transform-data';\r\nimport { createRenderObject, getNextMaterialId } from '../../mol-gl/render-object';\r\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\r\nimport { Interval } from '../../mol-data/int';\r\nimport { getQualityProps, VisualUpdateState } from '../util';\r\nimport { ColorTheme } from '../../mol-theme/color';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { createSizes } from '../../mol-geo/geometry/size-data';\r\nimport { createColors } from '../../mol-geo/geometry/color-data';\r\nimport { Representation } from '../representation';\r\nimport { BaseGeometry } from '../../mol-geo/geometry/base';\r\nimport { Subject } from 'rxjs';\r\nimport { Task } from '../../mol-task';\r\nimport { isPromiseLike } from '../../mol-util/type-helpers';\r\nfunction createVolumeRenderObject(volume, geometry, locationIt, theme, props, materialId) {\r\n    var _a = Geometry.getUtils(geometry), createValues = _a.createValues, createRenderableState = _a.createRenderableState;\r\n    var transform = createIdentityTransform();\r\n    var values = createValues(geometry, transform, locationIt, theme, props);\r\n    var state = createRenderableState(props);\r\n    return createRenderObject(geometry.kind, values, state, materialId);\r\n}\r\nexport function VolumeVisual(builder, materialId) {\r\n    var defaultProps = builder.defaultProps, createGeometry = builder.createGeometry, createLocationIterator = builder.createLocationIterator, getLoci = builder.getLoci, eachLocation = builder.eachLocation, setUpdateState = builder.setUpdateState, mustRecreate = builder.mustRecreate, dispose = builder.dispose;\r\n    var _a = builder.geometryUtils, updateValues = _a.updateValues, updateBoundingSphere = _a.updateBoundingSphere, updateRenderableState = _a.updateRenderableState, createPositionIterator = _a.createPositionIterator;\r\n    var updateState = VisualUpdateState.create();\r\n    var renderObject;\r\n    var newProps;\r\n    var newTheme;\r\n    var newVolume;\r\n    var currentProps = Object.assign({}, defaultProps);\r\n    var currentTheme = Theme.createEmpty();\r\n    var currentVolume;\r\n    var geometry;\r\n    var locationIt;\r\n    var positionIt;\r\n    function prepareUpdate(theme, props, volume) {\r\n        if (!volume && !currentVolume) {\r\n            throw new Error('missing volume');\r\n        }\r\n        newProps = Object.assign({}, currentProps, props);\r\n        newTheme = theme;\r\n        newVolume = volume;\r\n        VisualUpdateState.reset(updateState);\r\n        if (!renderObject) {\r\n            updateState.createNew = true;\r\n        }\r\n        else if (!currentVolume || !Volume.areEquivalent(newVolume, currentVolume)) {\r\n            updateState.createNew = true;\r\n        }\r\n        if (updateState.createNew) {\r\n            updateState.createGeometry = true;\r\n            return;\r\n        }\r\n        setUpdateState(updateState, volume, newProps, currentProps, newTheme, currentTheme);\r\n        if (!ColorTheme.areEqual(theme.color, currentTheme.color))\r\n            updateState.updateColor = true;\r\n        if (updateState.createGeometry) {\r\n            updateState.updateColor = true;\r\n        }\r\n    }\r\n    function update(newGeometry) {\r\n        if (updateState.createNew) {\r\n            locationIt = createLocationIterator(newVolume);\r\n            if (newGeometry) {\r\n                renderObject = createVolumeRenderObject(newVolume, newGeometry, locationIt, newTheme, newProps, materialId);\r\n                positionIt = createPositionIterator(newGeometry, renderObject.values);\r\n            }\r\n            else {\r\n                throw new Error('expected geometry to be given');\r\n            }\r\n        }\r\n        else {\r\n            if (!renderObject) {\r\n                throw new Error('expected renderObject to be available');\r\n            }\r\n            locationIt.reset();\r\n            if (updateState.createGeometry) {\r\n                if (newGeometry) {\r\n                    ValueCell.updateIfChanged(renderObject.values.drawCount, Geometry.getDrawCount(newGeometry));\r\n                    ValueCell.updateIfChanged(renderObject.values.uVertexCount, Geometry.getVertexCount(newGeometry));\r\n                }\r\n                else {\r\n                    throw new Error('expected geometry to be given');\r\n                }\r\n            }\r\n            if (updateState.updateTransform || updateState.createGeometry) {\r\n                updateBoundingSphere(renderObject.values, newGeometry || geometry);\r\n                positionIt = createPositionIterator(newGeometry || geometry, renderObject.values);\r\n            }\r\n            if (updateState.updateSize) {\r\n                // not all geometries have size data, so check here\r\n                if ('uSize' in renderObject.values) {\r\n                    createSizes(locationIt, newTheme.size, renderObject.values);\r\n                }\r\n            }\r\n            if (updateState.updateColor) {\r\n                createColors(locationIt, positionIt, newTheme.color, renderObject.values);\r\n            }\r\n            updateValues(renderObject.values, newProps);\r\n            updateRenderableState(renderObject.state, newProps);\r\n        }\r\n        currentProps = newProps;\r\n        currentTheme = newTheme;\r\n        currentVolume = newVolume;\r\n        if (newGeometry)\r\n            geometry = newGeometry;\r\n    }\r\n    function lociApply(loci, apply) {\r\n        if (isEveryLoci(loci)) {\r\n            return apply(Interval.ofBounds(0, locationIt.groupCount * locationIt.instanceCount));\r\n        }\r\n        else {\r\n            return eachLocation(loci, currentVolume, currentProps, apply);\r\n        }\r\n    }\r\n    return {\r\n        get groupCount() { return locationIt ? locationIt.count : 0; },\r\n        get renderObject() { return renderObject; },\r\n        createOrUpdate: function (ctx, theme, props, volume) {\r\n            if (props === void 0) { props = {}; }\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var newGeometry;\r\n                return __generator(this, function (_a) {\r\n                    prepareUpdate(theme, props, volume || currentVolume);\r\n                    if (updateState.createGeometry) {\r\n                        newGeometry = createGeometry(ctx, newVolume, newTheme, newProps, geometry);\r\n                        return [2 /*return*/, isPromiseLike(newGeometry) ? newGeometry.then(update) : update(newGeometry)];\r\n                    }\r\n                    else {\r\n                        update();\r\n                    }\r\n                    return [2 /*return*/];\r\n                });\r\n            });\r\n        },\r\n        getLoci: function (pickingId) {\r\n            return renderObject ? getLoci(pickingId, currentVolume, currentProps, renderObject.id) : EmptyLoci;\r\n        },\r\n        mark: function (loci, action) {\r\n            return Visual.mark(renderObject, loci, action, lociApply);\r\n        },\r\n        setVisibility: function (visible) {\r\n            Visual.setVisibility(renderObject, visible);\r\n        },\r\n        setAlphaFactor: function (alphaFactor) {\r\n            Visual.setAlphaFactor(renderObject, alphaFactor);\r\n        },\r\n        setPickable: function (pickable) {\r\n            Visual.setPickable(renderObject, pickable);\r\n        },\r\n        setColorOnly: function (colorOnly) {\r\n            Visual.setColorOnly(renderObject, colorOnly);\r\n        },\r\n        setTransform: function (matrix, instanceMatrices) {\r\n            Visual.setTransform(renderObject, matrix, instanceMatrices);\r\n        },\r\n        setOverpaint: function (overpaint) {\r\n            return Visual.setOverpaint(renderObject, overpaint, lociApply, true);\r\n        },\r\n        setTransparency: function (transparency) {\r\n            return Visual.setTransparency(renderObject, transparency, lociApply, true);\r\n        },\r\n        setClipping: function (clipping) {\r\n            return Visual.setClipping(renderObject, clipping, lociApply, true);\r\n        },\r\n        destroy: function () {\r\n            dispose === null || dispose === void 0 ? void 0 : dispose(geometry);\r\n            if (renderObject) {\r\n                renderObject.state.disposed = true;\r\n                renderObject = undefined;\r\n            }\r\n        },\r\n        mustRecreate: mustRecreate\r\n    };\r\n}\r\nexport function VolumeRepresentationProvider(p) { return p; }\r\n//\r\nexport var VolumeParams = __assign({}, BaseGeometry.Params);\r\nexport function VolumeRepresentation(label, ctx, getParams, visualCtor, getLoci) {\r\n    var version = 0;\r\n    var webgl = ctx.webgl;\r\n    var updated = new Subject();\r\n    var materialId = getNextMaterialId();\r\n    var renderObjects = [];\r\n    var _state = Representation.createState();\r\n    var visual;\r\n    var _volume;\r\n    var _params;\r\n    var _props;\r\n    var _theme = Theme.createEmpty();\r\n    function createOrUpdate(props, volume) {\r\n        var _this = this;\r\n        if (props === void 0) { props = {}; }\r\n        if (volume && volume !== _volume) {\r\n            _params = getParams(ctx, volume);\r\n            _volume = volume;\r\n            if (!_props)\r\n                _props = PD.getDefaultValues(_params);\r\n        }\r\n        var qualityProps = getQualityProps(Object.assign({}, _props, props), _volume);\r\n        Object.assign(_props, props, qualityProps);\r\n        return Task.create('Creating or updating VolumeRepresentation', function (runtime) { return __awaiter(_this, void 0, void 0, function () {\r\n            var promise;\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        if (!visual) {\r\n                            visual = visualCtor(materialId, _volume, _props, webgl);\r\n                        }\r\n                        else if ((_a = visual.mustRecreate) === null || _a === void 0 ? void 0 : _a.call(visual, _volume, _props, webgl)) {\r\n                            visual.destroy();\r\n                            visual = visualCtor(materialId, _volume, _props, webgl);\r\n                        }\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, volume);\r\n                        if (!promise) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, promise];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        // update list of renderObjects\r\n                        renderObjects.length = 0;\r\n                        if (visual && visual.renderObject)\r\n                            renderObjects.push(visual.renderObject);\r\n                        // increment version\r\n                        updated.next(version++);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    function mark(loci, action) {\r\n        return visual ? visual.mark(loci, action) : false;\r\n    }\r\n    function setState(state) {\r\n        if (state.visible !== undefined && visual)\r\n            visual.setVisibility(state.visible);\r\n        if (state.alphaFactor !== undefined && visual)\r\n            visual.setAlphaFactor(state.alphaFactor);\r\n        if (state.pickable !== undefined && visual)\r\n            visual.setPickable(state.pickable);\r\n        if (state.overpaint !== undefined && visual)\r\n            visual.setOverpaint(state.overpaint);\r\n        if (state.transparency !== undefined && visual)\r\n            visual.setTransparency(state.transparency);\r\n        if (state.transform !== undefined && visual)\r\n            visual.setTransform(state.transform);\r\n        Representation.updateState(_state, state);\r\n    }\r\n    function setTheme(theme) {\r\n        _theme = theme;\r\n    }\r\n    function destroy() {\r\n        if (visual)\r\n            visual.destroy();\r\n    }\r\n    return {\r\n        label: label,\r\n        get groupCount() {\r\n            return visual ? visual.groupCount : 0;\r\n        },\r\n        get props() { return _props; },\r\n        get params() { return _params; },\r\n        get state() { return _state; },\r\n        get theme() { return _theme; },\r\n        renderObjects: renderObjects,\r\n        updated: updated,\r\n        createOrUpdate: createOrUpdate,\r\n        setState: setState,\r\n        setTheme: setTheme,\r\n        getLoci: function (pickingId) {\r\n            if (pickingId === undefined)\r\n                return getLoci(_volume, _props);\r\n            return visual ? visual.getLoci(pickingId) : EmptyLoci;\r\n        },\r\n        mark: mark,\r\n        destroy: destroy\r\n    };\r\n}\r\n//# sourceMappingURL=representation.js.map"]},"metadata":{},"sourceType":"module"}