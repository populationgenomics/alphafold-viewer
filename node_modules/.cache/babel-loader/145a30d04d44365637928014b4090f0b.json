{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { StateAction } from '../../mol-state';\nimport { Task } from '../../mol-task';\nimport { getFileInfo } from '../../mol-util/file-info';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject } from '../objects';\nexport var OpenFiles = StateAction.build({\n  display: {\n    name: 'Open Files',\n    description: 'Load one or more files and optionally create default visuals'\n  },\n  from: PluginStateObject.Root,\n  params: function (a, ctx) {\n    var _a = ctx.dataFormats,\n        extensions = _a.extensions,\n        options = _a.options;\n    return {\n      files: PD.FileList({\n        accept: Array.from(extensions.values()).map(function (e) {\n          return \".\" + e;\n        }).join(',') + ',.gz,.zip',\n        multiple: true\n      }),\n      format: PD.MappedStatic('auto', {\n        auto: PD.EmptyGroup(),\n        specific: PD.Select(options[0][0], options)\n      }),\n      visuals: PD.Boolean(true, {\n        description: 'Add default visuals'\n      })\n    };\n  }\n})(function (_a, plugin) {\n  var params = _a.params,\n      state = _a.state;\n  return Task.create('Open Files', function (taskCtx) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            plugin.behaviors.layout.leftPanelTabName.next('data');\n            return [4\n            /*yield*/\n            , state.transaction(function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var _i, _a, file, info, isBinary, data, provider, parsed, e_1;\n\n                var _b, _c;\n\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      if (params.files === null) {\n                        plugin.log.error('No file(s) selected');\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      _i = 0, _a = params.files;\n                      _d.label = 1;\n\n                    case 1:\n                      if (!(_i < _a.length)) return [3\n                      /*break*/\n                      , 9];\n                      file = _a[_i];\n                      _d.label = 2;\n\n                    case 2:\n                      _d.trys.push([2, 7,, 8]);\n\n                      info = getFileInfo(file.file);\n                      isBinary = plugin.dataFormats.binaryExtensions.has(info.ext);\n                      return [4\n                      /*yield*/\n                      , plugin.builders.data.readFile({\n                        file: file,\n                        isBinary: isBinary\n                      })];\n\n                    case 3:\n                      data = _d.sent().data;\n                      provider = params.format.name === 'auto' ? plugin.dataFormats.auto(info, (_b = data.cell) === null || _b === void 0 ? void 0 : _b.obj) : plugin.dataFormats.get(params.format.params);\n\n                      if (!provider) {\n                        plugin.log.warn(\"OpenFiles: could not find data provider for '\" + info.name + \".\" + info.ext + \"'\");\n                        return [3\n                        /*break*/\n                        , 8];\n                      }\n\n                      return [4\n                      /*yield*/\n                      , provider.parse(plugin, data)];\n\n                    case 4:\n                      parsed = _d.sent();\n                      if (!params.visuals) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , (_c = provider.visuals) === null || _c === void 0 ? void 0 : _c.call(provider, plugin, parsed)];\n\n                    case 5:\n                      _d.sent();\n\n                      _d.label = 6;\n\n                    case 6:\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 7:\n                      e_1 = _d.sent();\n                      plugin.log.error(e_1);\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 8:\n                      _i++;\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 9:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }).runInContext(taskCtx)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n});\nexport var DownloadFile = StateAction.build({\n  display: {\n    name: 'Download File',\n    description: 'Load one or more file from an URL'\n  },\n  from: PluginStateObject.Root,\n  params: function (a, ctx) {\n    var options = ctx.dataFormats.options;\n    return {\n      url: PD.Url(''),\n      format: PD.Select(options[0][0], options),\n      isBinary: PD.Boolean(false),\n      visuals: PD.Boolean(true, {\n        description: 'Add default visuals'\n      })\n    };\n  }\n})(function (_a, plugin) {\n  var params = _a.params,\n      state = _a.state;\n  return Task.create('Open Files', function (taskCtx) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            plugin.behaviors.layout.leftPanelTabName.next('data');\n            return [4\n            /*yield*/\n            , state.transaction(function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var provider, data, parsed, e_2;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 5,, 6]);\n\n                      provider = plugin.dataFormats.get(params.format);\n\n                      if (!provider) {\n                        plugin.log.warn(\"DownloadFile: could not find data provider for '\" + params.format + \"'\");\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      return [4\n                      /*yield*/\n                      , plugin.builders.data.download({\n                        url: params.url,\n                        isBinary: params.isBinary\n                      })];\n\n                    case 1:\n                      data = _b.sent();\n                      return [4\n                      /*yield*/\n                      , provider.parse(plugin, data)];\n\n                    case 2:\n                      parsed = _b.sent();\n                      if (!params.visuals) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , (_a = provider.visuals) === null || _a === void 0 ? void 0 : _a.call(provider, plugin, parsed)];\n\n                    case 3:\n                      _b.sent();\n\n                      _b.label = 4;\n\n                    case 4:\n                      return [3\n                      /*break*/\n                      , 6];\n\n                    case 5:\n                      e_2 = _b.sent();\n                      plugin.log.error(e_2);\n                      return [3\n                      /*break*/\n                      , 6];\n\n                    case 6:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }).runInContext(taskCtx)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n});","map":{"version":3,"sources":["../../../src/mol-plugin-state/actions/file.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { StateAction } from '../../mol-state';\r\nimport { Task } from '../../mol-task';\r\nimport { getFileInfo } from '../../mol-util/file-info';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject } from '../objects';\r\nexport var OpenFiles = StateAction.build({\r\n    display: { name: 'Open Files', description: 'Load one or more files and optionally create default visuals' },\r\n    from: PluginStateObject.Root,\r\n    params: function (a, ctx) {\r\n        var _a = ctx.dataFormats, extensions = _a.extensions, options = _a.options;\r\n        return {\r\n            files: PD.FileList({ accept: Array.from(extensions.values()).map(function (e) { return \".\" + e; }).join(',') + ',.gz,.zip', multiple: true }),\r\n            format: PD.MappedStatic('auto', {\r\n                auto: PD.EmptyGroup(),\r\n                specific: PD.Select(options[0][0], options)\r\n            }),\r\n            visuals: PD.Boolean(true, { description: 'Add default visuals' }),\r\n        };\r\n    }\r\n})(function (_a, plugin) {\r\n    var params = _a.params, state = _a.state;\r\n    return Task.create('Open Files', function (taskCtx) { return __awaiter(void 0, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    plugin.behaviors.layout.leftPanelTabName.next('data');\r\n                    return [4 /*yield*/, state.transaction(function () { return __awaiter(void 0, void 0, void 0, function () {\r\n                            var _i, _a, file, info, isBinary, data, provider, parsed, e_1;\r\n                            var _b, _c;\r\n                            return __generator(this, function (_d) {\r\n                                switch (_d.label) {\r\n                                    case 0:\r\n                                        if (params.files === null) {\r\n                                            plugin.log.error('No file(s) selected');\r\n                                            return [2 /*return*/];\r\n                                        }\r\n                                        _i = 0, _a = params.files;\r\n                                        _d.label = 1;\r\n                                    case 1:\r\n                                        if (!(_i < _a.length)) return [3 /*break*/, 9];\r\n                                        file = _a[_i];\r\n                                        _d.label = 2;\r\n                                    case 2:\r\n                                        _d.trys.push([2, 7, , 8]);\r\n                                        info = getFileInfo(file.file);\r\n                                        isBinary = plugin.dataFormats.binaryExtensions.has(info.ext);\r\n                                        return [4 /*yield*/, plugin.builders.data.readFile({ file: file, isBinary: isBinary })];\r\n                                    case 3:\r\n                                        data = (_d.sent()).data;\r\n                                        provider = params.format.name === 'auto'\r\n                                            ? plugin.dataFormats.auto(info, (_b = data.cell) === null || _b === void 0 ? void 0 : _b.obj)\r\n                                            : plugin.dataFormats.get(params.format.params);\r\n                                        if (!provider) {\r\n                                            plugin.log.warn(\"OpenFiles: could not find data provider for '\" + info.name + \".\" + info.ext + \"'\");\r\n                                            return [3 /*break*/, 8];\r\n                                        }\r\n                                        return [4 /*yield*/, provider.parse(plugin, data)];\r\n                                    case 4:\r\n                                        parsed = _d.sent();\r\n                                        if (!params.visuals) return [3 /*break*/, 6];\r\n                                        return [4 /*yield*/, ((_c = provider.visuals) === null || _c === void 0 ? void 0 : _c.call(provider, plugin, parsed))];\r\n                                    case 5:\r\n                                        _d.sent();\r\n                                        _d.label = 6;\r\n                                    case 6: return [3 /*break*/, 8];\r\n                                    case 7:\r\n                                        e_1 = _d.sent();\r\n                                        plugin.log.error(e_1);\r\n                                        return [3 /*break*/, 8];\r\n                                    case 8:\r\n                                        _i++;\r\n                                        return [3 /*break*/, 1];\r\n                                    case 9: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }).runInContext(taskCtx)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\nexport var DownloadFile = StateAction.build({\r\n    display: { name: 'Download File', description: 'Load one or more file from an URL' },\r\n    from: PluginStateObject.Root,\r\n    params: function (a, ctx) {\r\n        var options = ctx.dataFormats.options;\r\n        return {\r\n            url: PD.Url(''),\r\n            format: PD.Select(options[0][0], options),\r\n            isBinary: PD.Boolean(false),\r\n            visuals: PD.Boolean(true, { description: 'Add default visuals' }),\r\n        };\r\n    }\r\n})(function (_a, plugin) {\r\n    var params = _a.params, state = _a.state;\r\n    return Task.create('Open Files', function (taskCtx) { return __awaiter(void 0, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    plugin.behaviors.layout.leftPanelTabName.next('data');\r\n                    return [4 /*yield*/, state.transaction(function () { return __awaiter(void 0, void 0, void 0, function () {\r\n                            var provider, data, parsed, e_2;\r\n                            var _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        _b.trys.push([0, 5, , 6]);\r\n                                        provider = plugin.dataFormats.get(params.format);\r\n                                        if (!provider) {\r\n                                            plugin.log.warn(\"DownloadFile: could not find data provider for '\" + params.format + \"'\");\r\n                                            return [2 /*return*/];\r\n                                        }\r\n                                        return [4 /*yield*/, plugin.builders.data.download({ url: params.url, isBinary: params.isBinary })];\r\n                                    case 1:\r\n                                        data = _b.sent();\r\n                                        return [4 /*yield*/, provider.parse(plugin, data)];\r\n                                    case 2:\r\n                                        parsed = _b.sent();\r\n                                        if (!params.visuals) return [3 /*break*/, 4];\r\n                                        return [4 /*yield*/, ((_a = provider.visuals) === null || _a === void 0 ? void 0 : _a.call(provider, plugin, parsed))];\r\n                                    case 3:\r\n                                        _b.sent();\r\n                                        _b.label = 4;\r\n                                    case 4: return [3 /*break*/, 6];\r\n                                    case 5:\r\n                                        e_2 = _b.sent();\r\n                                        plugin.log.error(e_2);\r\n                                        return [3 /*break*/, 6];\r\n                                    case 6: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }).runInContext(taskCtx)];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\n//# sourceMappingURL=file.js.map"]},"metadata":{},"sourceType":"module"}