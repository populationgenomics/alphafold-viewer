{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { calcMeshColorSmoothing } from '../../../../mol-geo/geometry/mesh/color-smoothing';\nimport { calcTextureMeshColorSmoothing } from '../../../../mol-geo/geometry/texture-mesh/color-smoothing';\nimport { smoothstep } from '../../../../mol-math/interpolate';\nimport { ValueCell } from '../../../../mol-util';\nimport { ParamDefinition as PD } from '../../../../mol-util/param-definition';\nexport var ColorSmoothingParams = {\n  smoothColors: PD.MappedStatic('auto', {\n    auto: PD.Group({}),\n    on: PD.Group({\n      resolutionFactor: PD.Numeric(2, {\n        min: 0.5,\n        max: 6,\n        step: 0.1\n      }),\n      sampleStride: PD.Numeric(3, {\n        min: 1,\n        max: 12,\n        step: 1\n      })\n    }),\n    off: PD.Group({})\n  })\n};\nexport function getColorSmoothingProps(props, theme, resolution) {\n  if ((props.smoothColors.name === 'on' || props.smoothColors.name === 'auto' && theme.color.preferSmoothing) && resolution && resolution < 3) {\n    var stride = 3;\n\n    if (props.smoothColors.name === 'on') {\n      resolution *= props.smoothColors.params.resolutionFactor;\n      stride = props.smoothColors.params.sampleStride;\n    } else {\n      // https://graphtoy.com/?f1(x,t)=(2-smoothstep(0,1.1,x))*x&coords=0.7,0.6,1.8\n      resolution *= 2 - smoothstep(0, 1.1, resolution);\n      resolution = Math.max(0.5, resolution);\n      if (resolution > 1.2) stride = 2;\n    }\n\n    return {\n      resolution: resolution,\n      stride: stride\n    };\n  }\n\n  ;\n}\n\nfunction isSupportedColorType(x) {\n  return x === 'group' || x === 'groupInstance';\n}\n\nexport function applyMeshColorSmoothing(values, resolution, stride, webgl, colorTexture) {\n  if (!isSupportedColorType(values.dColorType.ref.value)) return;\n  var smoothingData = calcMeshColorSmoothing({\n    vertexCount: values.uVertexCount.ref.value,\n    instanceCount: values.uInstanceCount.ref.value,\n    groupCount: values.uGroupCount.ref.value,\n    transformBuffer: values.aTransform.ref.value,\n    instanceBuffer: values.aInstance.ref.value,\n    positionBuffer: values.aPosition.ref.value,\n    groupBuffer: values.aGroup.ref.value,\n    colorData: values.tColor.ref.value,\n    colorType: values.dColorType.ref.value,\n    boundingSphere: values.boundingSphere.ref.value,\n    invariantBoundingSphere: values.invariantBoundingSphere.ref.value\n  }, resolution, stride, webgl, colorTexture);\n\n  if (smoothingData.kind === 'volume') {\n    ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\n    ValueCell.update(values.tColorGrid, smoothingData.texture);\n    ValueCell.update(values.uColorTexDim, smoothingData.gridTexDim);\n    ValueCell.update(values.uColorGridDim, smoothingData.gridDim);\n    ValueCell.update(values.uColorGridTransform, smoothingData.gridTransform);\n  } else if (smoothingData.kind === 'vertex') {\n    ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\n    ValueCell.update(values.tColor, smoothingData.texture);\n    ValueCell.update(values.uColorTexDim, smoothingData.texDim);\n  }\n}\nexport function applyTextureMeshColorSmoothing(values, resolution, stride, webgl, colorTexture) {\n  if (!isSupportedColorType(values.dColorType.ref.value)) return;\n  stride *= 3; // triple because TextureMesh is never indexed (no elements buffer)\n\n  var smoothingData = calcTextureMeshColorSmoothing({\n    vertexCount: values.uVertexCount.ref.value,\n    instanceCount: values.uInstanceCount.ref.value,\n    groupCount: values.uGroupCount.ref.value,\n    transformBuffer: values.aTransform.ref.value,\n    instanceBuffer: values.aInstance.ref.value,\n    positionTexture: values.tPosition.ref.value,\n    groupTexture: values.tGroup.ref.value,\n    colorData: values.tColor.ref.value,\n    colorType: values.dColorType.ref.value,\n    boundingSphere: values.boundingSphere.ref.value,\n    invariantBoundingSphere: values.invariantBoundingSphere.ref.value\n  }, resolution, stride, webgl, colorTexture);\n  ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\n  ValueCell.update(values.tColorGrid, smoothingData.texture);\n  ValueCell.update(values.uColorTexDim, smoothingData.gridTexDim);\n  ValueCell.update(values.uColorGridDim, smoothingData.gridDim);\n  ValueCell.update(values.uColorGridTransform, smoothingData.gridTransform);\n}","map":{"version":3,"sources":["../../../../../src/mol-repr/structure/visual/util/color.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,sBAAT,QAAuC,mDAAvC;AACA,SAAS,6BAAT,QAA8C,2DAA9C;AAKA,SAAS,UAAT,QAA2B,kCAA3B;AAEA,SAAS,SAAT,QAA0B,sBAA1B;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,uCAAtC;AAEA,OAAO,IAAM,oBAAoB,GAAG;AAChC,EAAA,YAAY,EAAE,EAAE,CAAC,YAAH,CAAgB,MAAhB,EAAwB;AAClC,IAAA,IAAI,EAAE,EAAE,CAAC,KAAH,CAAS,EAAT,CAD4B;AAElC,IAAA,EAAE,EAAE,EAAE,CAAC,KAAH,CAAS;AACT,MAAA,gBAAgB,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,QAAA,GAAG,EAAE,GAAP;AAAY,QAAA,GAAG,EAAE,CAAjB;AAAoB,QAAA,IAAI,EAAE;AAA1B,OAAd,CADT;AAET,MAAA,YAAY,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE,EAAf;AAAmB,QAAA,IAAI,EAAE;AAAzB,OAAd;AAFL,KAAT,CAF8B;AAMlC,IAAA,GAAG,EAAE,EAAE,CAAC,KAAH,CAAS,EAAT;AAN6B,GAAxB;AADkB,CAA7B;AAYP,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAAyE,KAAzE,EAAuF,UAAvF,EAA0G;AAC5G,MAAI,CAAC,KAAK,CAAC,YAAN,CAAmB,IAAnB,KAA4B,IAA5B,IAAqC,KAAK,CAAC,YAAN,CAAmB,IAAnB,KAA4B,MAA5B,IAAsC,KAAK,CAAC,KAAN,CAAY,eAAxF,KAA6G,UAA7G,IAA2H,UAAU,GAAG,CAA5I,EAA+I;AAC3I,QAAI,MAAM,GAAG,CAAb;;AACA,QAAI,KAAK,CAAC,YAAN,CAAmB,IAAnB,KAA4B,IAAhC,EAAsC;AAClC,MAAA,UAAU,IAAI,KAAK,CAAC,YAAN,CAAmB,MAAnB,CAA0B,gBAAxC;AACA,MAAA,MAAM,GAAG,KAAK,CAAC,YAAN,CAAmB,MAAnB,CAA0B,YAAnC;AACH,KAHD,MAGO;AACH;AACA,MAAA,UAAU,IAAI,IAAI,UAAU,CAAC,CAAD,EAAI,GAAJ,EAAS,UAAT,CAA5B;AACA,MAAA,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,UAAd,CAAb;AACA,UAAI,UAAU,GAAG,GAAjB,EAAsB,MAAM,GAAG,CAAT;AACzB;;AACD,WAAO;AAAE,MAAA,UAAU,EAAA,UAAZ;AAAc,MAAA,MAAM,EAAA;AAApB,KAAP;AACH;;AAAA;AACJ;;AAED,SAAS,oBAAT,CAA8B,CAA9B,EAAuC;AACnC,SAAO,CAAC,KAAK,OAAN,IAAiB,CAAC,KAAK,eAA9B;AACH;;AAED,OAAM,SAAU,uBAAV,CAAkC,MAAlC,EAAsD,UAAtD,EAA0E,MAA1E,EAA0F,KAA1F,EAAgH,YAAhH,EAAsI;AACxI,MAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAAvB,CAAzB,EAAwD;AAExD,MAAM,aAAa,GAAG,sBAAsB,CAAC;AACzC,IAAA,WAAW,EAAE,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAwB,KADI;AAEzC,IAAA,aAAa,EAAE,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAFA;AAGzC,IAAA,UAAU,EAAE,MAAM,CAAC,WAAP,CAAmB,GAAnB,CAAuB,KAHM;AAIzC,IAAA,eAAe,EAAE,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAJE;AAKzC,IAAA,cAAc,EAAE,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KALI;AAMzC,IAAA,cAAc,EAAE,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KANI;AAOzC,IAAA,WAAW,EAAE,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAPU;AAQzC,IAAA,SAAS,EAAE,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KARY;AASzC,IAAA,SAAS,EAAE,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KATQ;AAUzC,IAAA,cAAc,EAAE,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAVD;AAWzC,IAAA,uBAAuB,EAAE,MAAM,CAAC,uBAAP,CAA+B,GAA/B,CAAmC;AAXnB,GAAD,EAYzC,UAZyC,EAY7B,MAZ6B,EAYrB,KAZqB,EAYd,YAZc,CAA5C;;AAcA,MAAI,aAAa,CAAC,IAAd,KAAuB,QAA3B,EAAqC;AACjC,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,UAAjC,EAA6C,aAAa,CAAC,IAA3D;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,UAAxB,EAAoC,aAAa,CAAC,OAAlD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,YAAxB,EAAsC,aAAa,CAAC,UAApD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,aAAxB,EAAuC,aAAa,CAAC,OAArD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,mBAAxB,EAA6C,aAAa,CAAC,aAA3D;AACH,GAND,MAMO,IAAI,aAAa,CAAC,IAAd,KAAuB,QAA3B,EAAqC;AACxC,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,UAAjC,EAA6C,aAAa,CAAC,IAA3D;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,MAAxB,EAAgC,aAAa,CAAC,OAA9C;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,YAAxB,EAAsC,aAAa,CAAC,MAApD;AACH;AACJ;AAED,OAAM,SAAU,8BAAV,CAAyC,MAAzC,EAAoE,UAApE,EAAwF,MAAxF,EAAwG,KAAxG,EAA6H,YAA7H,EAAmJ;AACrJ,MAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAAvB,CAAzB,EAAwD;AAExD,EAAA,MAAM,IAAI,CAAV,CAHqJ,CAGxI;;AAEb,MAAM,aAAa,GAAG,6BAA6B,CAAC;AAChD,IAAA,WAAW,EAAE,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAwB,KADW;AAEhD,IAAA,aAAa,EAAE,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAFO;AAGhD,IAAA,UAAU,EAAE,MAAM,CAAC,WAAP,CAAmB,GAAnB,CAAuB,KAHa;AAIhD,IAAA,eAAe,EAAE,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAJS;AAKhD,IAAA,cAAc,EAAE,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KALW;AAMhD,IAAA,eAAe,EAAE,MAAM,CAAC,SAAP,CAAiB,GAAjB,CAAqB,KANU;AAOhD,IAAA,YAAY,EAAE,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAPgB;AAQhD,IAAA,SAAS,EAAE,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KARmB;AAShD,IAAA,SAAS,EAAE,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KATe;AAUhD,IAAA,cAAc,EAAE,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAVM;AAWhD,IAAA,uBAAuB,EAAE,MAAM,CAAC,uBAAP,CAA+B,GAA/B,CAAmC;AAXZ,GAAD,EAYhD,UAZgD,EAYpC,MAZoC,EAY5B,KAZ4B,EAYrB,YAZqB,CAAnD;AAcA,EAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,UAAjC,EAA6C,aAAa,CAAC,IAA3D;AACA,EAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,UAAxB,EAAoC,aAAa,CAAC,OAAlD;AACA,EAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,YAAxB,EAAsC,aAAa,CAAC,UAApD;AACA,EAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,aAAxB,EAAuC,aAAa,CAAC,OAArD;AACA,EAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,mBAAxB,EAA6C,aAAa,CAAC,aAA3D;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { calcMeshColorSmoothing } from '../../../../mol-geo/geometry/mesh/color-smoothing';\r\nimport { calcTextureMeshColorSmoothing } from '../../../../mol-geo/geometry/texture-mesh/color-smoothing';\r\nimport { smoothstep } from '../../../../mol-math/interpolate';\r\nimport { ValueCell } from '../../../../mol-util';\r\nimport { ParamDefinition as PD } from '../../../../mol-util/param-definition';\r\nexport var ColorSmoothingParams = {\r\n    smoothColors: PD.MappedStatic('auto', {\r\n        auto: PD.Group({}),\r\n        on: PD.Group({\r\n            resolutionFactor: PD.Numeric(2, { min: 0.5, max: 6, step: 0.1 }),\r\n            sampleStride: PD.Numeric(3, { min: 1, max: 12, step: 1 }),\r\n        }),\r\n        off: PD.Group({})\r\n    }),\r\n};\r\nexport function getColorSmoothingProps(props, theme, resolution) {\r\n    if ((props.smoothColors.name === 'on' || (props.smoothColors.name === 'auto' && theme.color.preferSmoothing)) && resolution && resolution < 3) {\r\n        var stride = 3;\r\n        if (props.smoothColors.name === 'on') {\r\n            resolution *= props.smoothColors.params.resolutionFactor;\r\n            stride = props.smoothColors.params.sampleStride;\r\n        }\r\n        else {\r\n            // https://graphtoy.com/?f1(x,t)=(2-smoothstep(0,1.1,x))*x&coords=0.7,0.6,1.8\r\n            resolution *= 2 - smoothstep(0, 1.1, resolution);\r\n            resolution = Math.max(0.5, resolution);\r\n            if (resolution > 1.2)\r\n                stride = 2;\r\n        }\r\n        return { resolution: resolution, stride: stride };\r\n    }\r\n    ;\r\n}\r\nfunction isSupportedColorType(x) {\r\n    return x === 'group' || x === 'groupInstance';\r\n}\r\nexport function applyMeshColorSmoothing(values, resolution, stride, webgl, colorTexture) {\r\n    if (!isSupportedColorType(values.dColorType.ref.value))\r\n        return;\r\n    var smoothingData = calcMeshColorSmoothing({\r\n        vertexCount: values.uVertexCount.ref.value,\r\n        instanceCount: values.uInstanceCount.ref.value,\r\n        groupCount: values.uGroupCount.ref.value,\r\n        transformBuffer: values.aTransform.ref.value,\r\n        instanceBuffer: values.aInstance.ref.value,\r\n        positionBuffer: values.aPosition.ref.value,\r\n        groupBuffer: values.aGroup.ref.value,\r\n        colorData: values.tColor.ref.value,\r\n        colorType: values.dColorType.ref.value,\r\n        boundingSphere: values.boundingSphere.ref.value,\r\n        invariantBoundingSphere: values.invariantBoundingSphere.ref.value,\r\n    }, resolution, stride, webgl, colorTexture);\r\n    if (smoothingData.kind === 'volume') {\r\n        ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\r\n        ValueCell.update(values.tColorGrid, smoothingData.texture);\r\n        ValueCell.update(values.uColorTexDim, smoothingData.gridTexDim);\r\n        ValueCell.update(values.uColorGridDim, smoothingData.gridDim);\r\n        ValueCell.update(values.uColorGridTransform, smoothingData.gridTransform);\r\n    }\r\n    else if (smoothingData.kind === 'vertex') {\r\n        ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\r\n        ValueCell.update(values.tColor, smoothingData.texture);\r\n        ValueCell.update(values.uColorTexDim, smoothingData.texDim);\r\n    }\r\n}\r\nexport function applyTextureMeshColorSmoothing(values, resolution, stride, webgl, colorTexture) {\r\n    if (!isSupportedColorType(values.dColorType.ref.value))\r\n        return;\r\n    stride *= 3; // triple because TextureMesh is never indexed (no elements buffer)\r\n    var smoothingData = calcTextureMeshColorSmoothing({\r\n        vertexCount: values.uVertexCount.ref.value,\r\n        instanceCount: values.uInstanceCount.ref.value,\r\n        groupCount: values.uGroupCount.ref.value,\r\n        transformBuffer: values.aTransform.ref.value,\r\n        instanceBuffer: values.aInstance.ref.value,\r\n        positionTexture: values.tPosition.ref.value,\r\n        groupTexture: values.tGroup.ref.value,\r\n        colorData: values.tColor.ref.value,\r\n        colorType: values.dColorType.ref.value,\r\n        boundingSphere: values.boundingSphere.ref.value,\r\n        invariantBoundingSphere: values.invariantBoundingSphere.ref.value,\r\n    }, resolution, stride, webgl, colorTexture);\r\n    ValueCell.updateIfChanged(values.dColorType, smoothingData.type);\r\n    ValueCell.update(values.tColorGrid, smoothingData.texture);\r\n    ValueCell.update(values.uColorTexDim, smoothingData.gridTexDim);\r\n    ValueCell.update(values.uColorGridDim, smoothingData.gridDim);\r\n    ValueCell.update(values.uColorGridTransform, smoothingData.gridTransform);\r\n}\r\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}