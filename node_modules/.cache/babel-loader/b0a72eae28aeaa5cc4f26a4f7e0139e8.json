{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { Segmentation } from '../../../../mol-data/int';\nimport { CifWriter } from '../../../../mol-io/writer/cif';\nimport { StructureElement, Unit } from '../../structure';\nvar CifField = CifWriter.Field;\nimport { residueIdFields } from './atom_site';\nimport { ModelSecondaryStructure } from '../../../../mol-model-formats/structure/property/secondary-structure';\nexport var _struct_conf = {\n  name: 'struct_conf',\n  instance: function (ctx) {\n    var elements = findElements(ctx, 'helix');\n    return {\n      fields: struct_conf_fields(),\n      source: [{\n        data: elements,\n        rowCount: elements.length\n      }]\n    };\n  }\n};\nexport var _struct_sheet_range = {\n  name: 'struct_sheet_range',\n  instance: function (ctx) {\n    var elements = findElements(ctx, 'sheet').sort(compare_ssr);\n    return {\n      fields: struct_sheet_range_fields(),\n      source: [{\n        data: elements,\n        rowCount: elements.length\n      }]\n    };\n  }\n};\n\nfunction compare_ssr(x, y) {\n  var a = x.element,\n      b = y.element;\n  return a.sheet_id < b.sheet_id ? -1 : a.sheet_id === b.sheet_id ? x.start.element - y.start.element : 1;\n}\n\n;\n\nvar struct_conf_fields = function () {\n  return __spreadArray(__spreadArray(__spreadArray([CifField.str('conf_type_id', function (i, data) {\n    return data[i].element.type_id;\n  }), CifField.str('id', function (i, data, idx) {\n    return \"\" + data[i].element.type_id + (idx + 1);\n  })], residueIdFields(function (i, e) {\n    return e[i].start;\n  }, {\n    prefix: 'beg'\n  }), true), residueIdFields(function (i, e) {\n    return e[i].end;\n  }, {\n    prefix: 'end'\n  }), true), [CifField.str('pdbx_PDB_helix_class', function (i, data) {\n    return data[i].element.helix_class;\n  }), CifField.str('details', function (i, data) {\n    return data[i].element.details || '';\n  }, {\n    valueKind: function (i, d) {\n      return !!d[i].element.details ? 0\n      /* Present */\n      : 2\n      /* Unknown */\n      ;\n    }\n  }), CifField.int('pdbx_PDB_helix_length', function (i, data) {\n    return data[i].length;\n  })], false);\n};\n\nvar struct_sheet_range_fields = function () {\n  return __spreadArray(__spreadArray(__spreadArray([CifField.str('sheet_id', function (i, data) {\n    return data[i].element.sheet_id;\n  }), CifField.index('id')], residueIdFields(function (i, e) {\n    return e[i].start;\n  }, {\n    prefix: 'beg'\n  }), true), residueIdFields(function (i, e) {\n    return e[i].end;\n  }, {\n    prefix: 'end'\n  }), true), [CifField.str('symmetry', function (i, data) {\n    return '';\n  }, {\n    valueKind: function (i, d) {\n      return 2\n      /* Unknown */\n      ;\n    }\n  })], false);\n};\n\nfunction findElements(ctx, kind) {\n  // TODO: encode secondary structure for different models?\n  var secondaryStructure = ModelSecondaryStructure.Provider.get(ctx.firstModel);\n  if (!secondaryStructure) return [];\n  var key = secondaryStructure.key,\n      elements = secondaryStructure.elements;\n  var ssElements = [];\n  var structure = ctx.structures[0];\n\n  for (var _i = 0, _a = structure.units; _i < _a.length; _i++) {\n    var unit = _a[_i]; // currently can only support this for \"identity\" operators.\n\n    if (!Unit.isAtomic(unit) || !unit.conformation.operator.isIdentity) continue;\n    var segs = unit.model.atomicHierarchy.residueAtomSegments;\n    var residues = Segmentation.transientSegments(segs, unit.elements);\n    var current = void 0,\n        move = true;\n\n    while (residues.hasNext) {\n      if (move) current = residues.move();\n      var start = current.index;\n      var startIdx = key[start];\n      var element = elements[startIdx];\n\n      if (element.kind !== kind) {\n        move = true;\n        continue;\n      }\n\n      var prev = start;\n\n      while (residues.hasNext) {\n        prev = current.index;\n        current = residues.move();\n\n        if (startIdx !== key[current.index]) {\n          move = false;\n          ssElements[ssElements.length] = {\n            start: StructureElement.Location.create(structure, unit, segs.offsets[start]),\n            end: StructureElement.Location.create(structure, unit, segs.offsets[prev]),\n            length: prev - start + 1,\n            element: element\n          };\n          break;\n        }\n      }\n    }\n  }\n\n  return ssElements;\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/export/categories/secondary-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { Segmentation } from '../../../../mol-data/int';\r\nimport { CifWriter } from '../../../../mol-io/writer/cif';\r\nimport { StructureElement, Unit } from '../../structure';\r\nvar CifField = CifWriter.Field;\r\nimport { residueIdFields } from './atom_site';\r\nimport { ModelSecondaryStructure } from '../../../../mol-model-formats/structure/property/secondary-structure';\r\nexport var _struct_conf = {\r\n    name: 'struct_conf',\r\n    instance: function (ctx) {\r\n        var elements = findElements(ctx, 'helix');\r\n        return {\r\n            fields: struct_conf_fields(),\r\n            source: [{ data: elements, rowCount: elements.length }]\r\n        };\r\n    }\r\n};\r\nexport var _struct_sheet_range = {\r\n    name: 'struct_sheet_range',\r\n    instance: function (ctx) {\r\n        var elements = findElements(ctx, 'sheet').sort(compare_ssr);\r\n        return {\r\n            fields: struct_sheet_range_fields(),\r\n            source: [{ data: elements, rowCount: elements.length }]\r\n        };\r\n    }\r\n};\r\nfunction compare_ssr(x, y) {\r\n    var a = x.element, b = y.element;\r\n    return a.sheet_id < b.sheet_id ? -1 : a.sheet_id === b.sheet_id ? x.start.element - y.start.element : 1;\r\n}\r\n;\r\nvar struct_conf_fields = function () { return __spreadArray(__spreadArray(__spreadArray([\r\n    CifField.str('conf_type_id', function (i, data) { return data[i].element.type_id; }),\r\n    CifField.str('id', function (i, data, idx) { return \"\" + data[i].element.type_id + (idx + 1); })\r\n], residueIdFields(function (i, e) { return e[i].start; }, { prefix: 'beg' }), true), residueIdFields(function (i, e) { return e[i].end; }, { prefix: 'end' }), true), [\r\n    CifField.str('pdbx_PDB_helix_class', function (i, data) { return data[i].element.helix_class; }),\r\n    CifField.str('details', function (i, data) { return data[i].element.details || ''; }, {\r\n        valueKind: function (i, d) { return !!d[i].element.details ? 0 /* Present */ : 2 /* Unknown */; }\r\n    }),\r\n    CifField.int('pdbx_PDB_helix_length', function (i, data) { return data[i].length; })\r\n], false); };\r\nvar struct_sheet_range_fields = function () { return __spreadArray(__spreadArray(__spreadArray([\r\n    CifField.str('sheet_id', function (i, data) { return data[i].element.sheet_id; }),\r\n    CifField.index('id')\r\n], residueIdFields(function (i, e) { return e[i].start; }, { prefix: 'beg' }), true), residueIdFields(function (i, e) { return e[i].end; }, { prefix: 'end' }), true), [\r\n    CifField.str('symmetry', function (i, data) { return ''; }, { valueKind: function (i, d) { return 2 /* Unknown */; } })\r\n], false); };\r\nfunction findElements(ctx, kind) {\r\n    // TODO: encode secondary structure for different models?\r\n    var secondaryStructure = ModelSecondaryStructure.Provider.get(ctx.firstModel);\r\n    if (!secondaryStructure)\r\n        return [];\r\n    var key = secondaryStructure.key, elements = secondaryStructure.elements;\r\n    var ssElements = [];\r\n    var structure = ctx.structures[0];\r\n    for (var _i = 0, _a = structure.units; _i < _a.length; _i++) {\r\n        var unit = _a[_i];\r\n        // currently can only support this for \"identity\" operators.\r\n        if (!Unit.isAtomic(unit) || !unit.conformation.operator.isIdentity)\r\n            continue;\r\n        var segs = unit.model.atomicHierarchy.residueAtomSegments;\r\n        var residues = Segmentation.transientSegments(segs, unit.elements);\r\n        var current = void 0, move = true;\r\n        while (residues.hasNext) {\r\n            if (move)\r\n                current = residues.move();\r\n            var start = current.index;\r\n            var startIdx = key[start];\r\n            var element = elements[startIdx];\r\n            if (element.kind !== kind) {\r\n                move = true;\r\n                continue;\r\n            }\r\n            var prev = start;\r\n            while (residues.hasNext) {\r\n                prev = current.index;\r\n                current = residues.move();\r\n                if (startIdx !== key[current.index]) {\r\n                    move = false;\r\n                    ssElements[ssElements.length] = {\r\n                        start: StructureElement.Location.create(structure, unit, segs.offsets[start]),\r\n                        end: StructureElement.Location.create(structure, unit, segs.offsets[prev]),\r\n                        length: prev - start + 1,\r\n                        element: element\r\n                    };\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ssElements;\r\n}\r\n//# sourceMappingURL=secondary-structure.js.map"]},"metadata":{},"sourceType":"module"}