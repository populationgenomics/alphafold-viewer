{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Color } from '../../mol-util/color';\nimport { StructureElement, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nvar DefaultList = 'many-distinct';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = \"Assigns a color based on the operator name of a transformed chain.\";\nexport var OperatorNameColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: DefaultList\n}));\nexport function getOperatorNameColorThemeParams(ctx) {\n  var params = PD.clone(OperatorNameColorThemeParams);\n  return params;\n}\n\nfunction getOperatorNameSerialMap(structure) {\n  var map = new Map();\n\n  for (var i = 0, il = structure.units.length; i < il; ++i) {\n    var name_1 = structure.units[i].conformation.operator.name;\n    if (!map.has(name_1)) map.set(name_1, map.size);\n  }\n\n  return map;\n}\n\nexport function OperatorNameColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var operatorNameSerialMap_1 = getOperatorNameSerialMap(ctx.structure.root);\n    var labelTable_1 = Array.from(operatorNameSerialMap_1.keys());\n\n    var valueLabel = function (i) {\n      return labelTable_1[i];\n    };\n\n    var palette_1 = getPalette(operatorNameSerialMap_1.size, props, {\n      valueLabel: valueLabel\n    });\n    legend = palette_1.legend;\n\n    color = function (location) {\n      var serial = undefined;\n\n      if (StructureElement.Location.is(location)) {\n        var name_2 = location.unit.conformation.operator.name;\n        serial = operatorNameSerialMap_1.get(name_2);\n      } else if (Bond.isLocation(location)) {\n        var name_3 = location.aUnit.conformation.operator.name;\n        serial = operatorNameSerialMap_1.get(name_3);\n      }\n\n      return serial === undefined ? DefaultColor : palette_1.color(serial);\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: OperatorNameColorTheme,\n    granularity: 'instance',\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var OperatorNameColorThemeProvider = {\n  name: 'operator-name',\n  label: 'Operator Name',\n  category: \"Symmetry\"\n  /* Symmetry */\n  ,\n  factory: OperatorNameColorTheme,\n  getParams: getOperatorNameColorThemeParams,\n  defaultValues: PD.getDefaultValues(OperatorNameColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/operator-name.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,gBAAT,EAA2B,IAA3B,QAAkD,2BAAlD;AAGA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AAEA,SAAS,gBAAT,EAA2B,UAA3B,QAA6C,8BAA7C;AAGA,IAAM,WAAW,GAAG,eAApB;AACA,IAAM,YAAY,GAAG,KAAK,CAAC,QAAD,CAA1B;AACA,IAAM,WAAW,GAAG,oEAApB;AAEA,OAAO,IAAM,4BAA4B,GAAA,QAAA,CAAA,EAAA,EAClC,gBAAgB,CAAC;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,SAAS,EAAE;AAA7B,CAAD,CADkB,CAAlC;AAIP,OAAM,SAAU,+BAAV,CAA0C,GAA1C,EAA+D;AACjE,MAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAS,4BAAT,CAAf;AACA,SAAO,MAAP;AACH;;AAED,SAAS,wBAAT,CAAkC,SAAlC,EAAsD;AAClD,MAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,CAAC,KAAV,CAAgB,MAArC,EAA6C,CAAC,GAAG,EAAjD,EAAqD,EAAE,CAAvD,EAA0D;AACtD,QAAM,MAAI,GAAG,SAAS,CAAC,KAAV,CAAgB,CAAhB,EAAmB,YAAnB,CAAgC,QAAhC,CAAyC,IAAtD;AACA,QAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,MAAR,CAAL,EAAoB,GAAG,CAAC,GAAJ,CAAQ,MAAR,EAAc,GAAG,CAAC,IAAlB;AACvB;;AACD,SAAO,GAAP;AACH;;AAED,OAAM,SAAU,sBAAV,CAAiC,GAAjC,EAAwD,KAAxD,EAAsG;AACxG,MAAI,KAAJ;AACA,MAAI,MAAJ;;AAEA,MAAI,GAAG,CAAC,SAAR,EAAmB;AACf,QAAM,uBAAqB,GAAG,wBAAwB,CAAC,GAAG,CAAC,SAAJ,CAAc,IAAf,CAAtD;AAEA,QAAM,YAAU,GAAG,KAAK,CAAC,IAAN,CAAW,uBAAqB,CAAC,IAAtB,EAAX,CAAnB;;AACA,QAAM,UAAU,GAAG,UAAC,CAAD,EAAU;AAAK,aAAA,YAAU,CAAV,CAAU,CAAV;AAAa,KAA/C;;AAEA,QAAM,SAAO,GAAG,UAAU,CAAC,uBAAqB,CAAC,IAAvB,EAA6B,KAA7B,EAAoC;AAAE,MAAA,UAAU,EAAA;AAAZ,KAApC,CAA1B;AACA,IAAA,MAAM,GAAG,SAAO,CAAC,MAAjB;;AAEA,IAAA,KAAK,GAAG,UAAC,QAAD,EAAmB;AACvB,UAAI,MAAM,GAAuB,SAAjC;;AACA,UAAI,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,CAA6B,QAA7B,CAAJ,EAA4C;AACxC,YAAM,MAAI,GAAG,QAAQ,CAAC,IAAT,CAAc,YAAd,CAA2B,QAA3B,CAAoC,IAAjD;AACA,QAAA,MAAM,GAAG,uBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAT;AACH,OAHD,MAGO,IAAI,IAAI,CAAC,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAClC,YAAM,MAAI,GAAG,QAAQ,CAAC,KAAT,CAAe,YAAf,CAA4B,QAA5B,CAAqC,IAAlD;AACA,QAAA,MAAM,GAAG,uBAAqB,CAAC,GAAtB,CAA0B,MAA1B,CAAT;AACH;;AACD,aAAO,MAAM,KAAK,SAAX,GAAuB,YAAvB,GAAsC,SAAO,CAAC,KAAR,CAAc,MAAd,CAA7C;AACH,KAVD;AAWH,GApBD,MAoBO;AACH,IAAA,KAAK,GAAG,YAAA;AAAM,aAAA,YAAA;AAAY,KAA1B;AACH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,sBADN;AAEH,IAAA,WAAW,EAAE,UAFV;AAGH,IAAA,KAAK,EAAA,KAHF;AAIH,IAAA,KAAK,EAAA,KAJF;AAKH,IAAA,WAAW,EAAE,WALV;AAMH,IAAA,MAAM,EAAA;AANH,GAAP;AAQH;AAED,OAAO,IAAM,8BAA8B,GAAuE;AAC9G,EAAA,IAAI,EAAE,eADwG;AAE9G,EAAA,KAAK,EAAE,eAFuG;AAG9G,EAAA,QAAQ,EAAA;AAAA;AAHsG;AAI9G,EAAA,OAAO,EAAE,sBAJqG;AAK9G,EAAA,SAAS,EAAE,+BALmG;AAM9G,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,4BAApB,CAN+F;AAO9G,EAAA,YAAY,EAAE,UAAC,GAAD,EAAsB;AAAK,WAAA,CAAC,CAAC,GAAG,CAAL,SAAA;AAAe;AAPsD,CAA3G","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Color } from '../../mol-util/color';\r\nimport { StructureElement, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nvar DefaultList = 'many-distinct';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = \"Assigns a color based on the operator name of a transformed chain.\";\r\nexport var OperatorNameColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: DefaultList }));\r\nexport function getOperatorNameColorThemeParams(ctx) {\r\n    var params = PD.clone(OperatorNameColorThemeParams);\r\n    return params;\r\n}\r\nfunction getOperatorNameSerialMap(structure) {\r\n    var map = new Map();\r\n    for (var i = 0, il = structure.units.length; i < il; ++i) {\r\n        var name_1 = structure.units[i].conformation.operator.name;\r\n        if (!map.has(name_1))\r\n            map.set(name_1, map.size);\r\n    }\r\n    return map;\r\n}\r\nexport function OperatorNameColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var operatorNameSerialMap_1 = getOperatorNameSerialMap(ctx.structure.root);\r\n        var labelTable_1 = Array.from(operatorNameSerialMap_1.keys());\r\n        var valueLabel = function (i) { return labelTable_1[i]; };\r\n        var palette_1 = getPalette(operatorNameSerialMap_1.size, props, { valueLabel: valueLabel });\r\n        legend = palette_1.legend;\r\n        color = function (location) {\r\n            var serial = undefined;\r\n            if (StructureElement.Location.is(location)) {\r\n                var name_2 = location.unit.conformation.operator.name;\r\n                serial = operatorNameSerialMap_1.get(name_2);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                var name_3 = location.aUnit.conformation.operator.name;\r\n                serial = operatorNameSerialMap_1.get(name_3);\r\n            }\r\n            return serial === undefined ? DefaultColor : palette_1.color(serial);\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: OperatorNameColorTheme,\r\n        granularity: 'instance',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var OperatorNameColorThemeProvider = {\r\n    name: 'operator-name',\r\n    label: 'Operator Name',\r\n    category: \"Symmetry\" /* Symmetry */,\r\n    factory: OperatorNameColorTheme,\r\n    getParams: getOperatorNameColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(OperatorNameColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=operator-name.js.map"]},"metadata":{},"sourceType":"module"}