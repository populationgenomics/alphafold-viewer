{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { RxEventHelper } from '../../mol-util/rx-event-helper';\nimport { now } from '../../mol-util/now';\nimport { CreateObservableCtx, ExecuteInContext } from '../../mol-task/execution/observable';\nimport { arrayRemoveInPlace } from '../../mol-util/array';\nexport { TaskManager };\n\nvar TaskManager =\n/** @class */\nfunction () {\n  function TaskManager() {\n    this.ev = RxEventHelper.create();\n    this.id = 0;\n    this.runningTasks = new Set();\n    this.abortRequests = new Map();\n    this.options = new Map();\n    this.currentContext = [];\n    this.events = {\n      progress: this.ev(),\n      finished: this.ev()\n    };\n  }\n\n  TaskManager.prototype.tryGetAbortTaskId = function (node) {\n    if (this.abortRequests.has(node.progress.taskId)) return node.progress.taskId;\n\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n      var c = _a[_i];\n      var abort = this.tryGetAbortTaskId(c);\n      if (abort !== void 0) return abort;\n    }\n\n    return void 0;\n  };\n\n  TaskManager.prototype.track = function (internalId, taskId) {\n    var _this = this;\n\n    return function (progress) {\n      var _a;\n\n      if (progress.canAbort && progress.requestAbort) {\n        var abortTaskId = _this.tryGetAbortTaskId(progress.root);\n\n        if (abortTaskId !== void 0) progress.requestAbort(_this.abortRequests.get(abortTaskId));\n      }\n\n      var elapsed = now() - progress.root.progress.startedTime;\n\n      _this.events.progress.next({\n        id: internalId,\n        useOverlay: (_a = _this.options.get(taskId)) === null || _a === void 0 ? void 0 : _a.useOverlay,\n        level: elapsed < 250 ? 'none' : 'background',\n        progress: progress\n      });\n    };\n  };\n\n  TaskManager.prototype.run = function (task, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var id, ctx, ret;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            id = this.id++;\n\n            if ((params === null || params === void 0 ? void 0 : params.createNewContext) || this.currentContext.length === 0) {\n              ctx = {\n                ctx: CreateObservableCtx(task, this.track(id, task.id), 100),\n                refCount: 1\n              };\n            } else {\n              ctx = this.currentContext[this.currentContext.length - 1];\n              ctx.refCount++;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            this.options.set(task.id, {\n              useOverlay: !!(params === null || params === void 0 ? void 0 : params.useOverlay)\n            });\n            this.runningTasks.add(task.id);\n            return [4\n            /*yield*/\n            , ExecuteInContext(ctx.ctx, task)];\n\n          case 2:\n            ret = _a.sent();\n            return [2\n            /*return*/\n            , ret];\n\n          case 3:\n            this.options.delete(task.id);\n            this.runningTasks.delete(task.id);\n            this.events.finished.next({\n              id: id\n            });\n            this.abortRequests.delete(task.id);\n            ctx.refCount--;\n            if (ctx.refCount === 0) arrayRemoveInPlace(this.currentContext, ctx);\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TaskManager.prototype.requestAbortAll = function (reason) {\n    var _this = this;\n\n    this.runningTasks.forEach(function (id) {\n      return _this.abortRequests.set(id, reason);\n    });\n  };\n\n  TaskManager.prototype.requestAbort = function (taskIdOrProgress, reason) {\n    var id = typeof taskIdOrProgress === 'number' ? taskIdOrProgress : taskIdOrProgress.root.progress.taskId;\n    this.abortRequests.set(id, reason);\n  };\n\n  TaskManager.prototype.dispose = function () {\n    this.ev.dispose();\n  };\n\n  return TaskManager;\n}();\n\n(function (TaskManager) {\n  function delay(time) {\n    return new Promise(function (res) {\n      return setTimeout(res, time);\n    });\n  }\n\n  function testTask(N) {\n    var _this = this;\n\n    return Task.create('Test', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var i;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              i = 0;\n              _a.label = 1;\n\n            case 1:\n              if (!(i < N)) return [3\n              /*break*/\n              , 5];\n              return [4\n              /*yield*/\n              , delay(100 + Math.random() * 200)];\n\n            case 2:\n              _a.sent();\n\n              if (!ctx.shouldUpdate) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , ctx.update({\n                message: 'Step ' + i,\n                current: i,\n                max: N,\n                isIndeterminate: false\n              })];\n\n            case 3:\n              _a.sent();\n\n              _a.label = 4;\n\n            case 4:\n              i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  TaskManager.testTask = testTask;\n})(TaskManager || (TaskManager = {}));","map":{"version":3,"sources":["../../../src/mol-plugin/util/task-manager.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,IAAT,QAA+C,gBAA/C;AACA,SAAS,aAAT,QAA8B,gCAA9B;AACA,SAAS,GAAT,QAAoB,oBAApB;AACA,SAAS,mBAAT,EAA8B,gBAA9B,QAAsD,qCAAtD;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,SAAS,WAAT;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA;AACY,SAAA,EAAA,GAAK,aAAa,CAAC,MAAd,EAAL;AACA,SAAA,EAAA,GAAK,CAAL;AACA,SAAA,YAAA,GAAe,IAAI,GAAJ,EAAf;AACA,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AACA,SAAA,OAAA,GAAU,IAAI,GAAJ,EAAV;AACA,SAAA,cAAA,GAA8D,EAA9D;AAEC,SAAA,MAAA,GAAS;AACd,MAAA,QAAQ,EAAE,KAAK,EAAL,EADI;AAEd,MAAA,QAAQ,EAAE,KAAK,EAAL;AAFI,KAAT;AAuEZ;;AAlEW,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,IAA1B,EAA6C;AACzC,QAAI,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAI,CAAC,QAAL,CAAc,MAArC,CAAJ,EAAkD,OAAO,IAAI,CAAC,QAAL,CAAc,MAArB;;AAClD,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,IAAI,CAAC,QAArB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA+B;AAA1B,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,UAAM,KAAK,GAAG,KAAK,iBAAL,CAAuB,CAAvB,CAAd;AACA,UAAI,KAAK,KAAK,KAAK,CAAnB,EAAsB,OAAO,KAAP;AACzB;;AACD,WAAO,KAAK,CAAZ;AACH,GAPO;;AASA,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAR,UAAc,UAAd,EAAkC,MAAlC,EAAgD;AAAhD,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,UAAC,QAAD,EAAmB;;;AACtB,UAAI,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,YAAlC,EAAgD;AAC5C,YAAM,WAAW,GAAG,KAAI,CAAC,iBAAL,CAAuB,QAAQ,CAAC,IAAhC,CAApB;;AACA,YAAI,WAAW,KAAK,KAAK,CAAzB,EAA4B,QAAQ,CAAC,YAAT,CAAsB,KAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,WAAvB,CAAtB;AAC/B;;AACD,UAAM,OAAO,GAAG,GAAG,KAAK,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,WAA/C;;AACA,MAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,IAArB,CAA0B;AACtB,QAAA,EAAE,EAAE,UADkB;AAEtB,QAAA,UAAU,EAAE,CAAA,EAAA,GAAA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB,CAAA,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,UAFhB;AAGtB,QAAA,KAAK,EAAE,OAAO,GAAG,GAAV,GAAgB,MAAhB,GAAyB,YAHV;AAItB,QAAA,QAAQ,EAAA;AAJc,OAA1B;AAMH,KAZD;AAaH,GAdO;;AAgBF,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAN,UAAa,IAAb,EAA4B,MAA5B,EAAyF;;;;;;AAC/E,YAAA,EAAE,GAAG,KAAK,EAAL,EAAL;;AAIN,gBAAI,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,gBAAR,KAA4B,KAAK,cAAL,CAAoB,MAApB,KAA+B,CAA/D,EAAkE;AAC9D,cAAA,GAAG,GAAG;AAAE,gBAAA,GAAG,EAAE,mBAAmB,CAAC,IAAD,EAAO,KAAK,KAAL,CAAW,EAAX,EAAe,IAAI,CAAC,EAApB,CAAP,EAAgC,GAAhC,CAA1B;AAAgE,gBAAA,QAAQ,EAAE;AAA1E,eAAN;AACH,aAFD,MAEO;AACH,cAAA,GAAG,GAAG,KAAK,cAAL,CAAoB,KAAK,cAAL,CAAoB,MAApB,GAA6B,CAAjD,CAAN;AACA,cAAA,GAAG,CAAC,QAAJ;AACH;;;;;;;AAGG,iBAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,EAAtB,EAA0B;AAAE,cAAA,UAAU,EAAE,CAAC,EAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,UAAT;AAAf,aAA1B;AACA,iBAAK,YAAL,CAAkB,GAAlB,CAAsB,IAAI,CAAC,EAA3B;AACY,mBAAA,CAAA;AAAA;AAAA,cAAM,gBAAgB,CAAC,GAAG,CAAC,GAAL,EAAU,IAAV,CAAtB,CAAA;;;AAAN,YAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,GAAP,CAAA;;;AAEA,iBAAK,OAAL,CAAa,MAAb,CAAoB,IAAI,CAAC,EAAzB;AACA,iBAAK,YAAL,CAAkB,MAAlB,CAAyB,IAAI,CAAC,EAA9B;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,IAArB,CAA0B;AAAE,cAAA,EAAE,EAAA;AAAJ,aAA1B;AACA,iBAAK,aAAL,CAAmB,MAAnB,CAA0B,IAAI,CAAC,EAA/B;AACA,YAAA,GAAG,CAAC,QAAJ;AACA,gBAAI,GAAG,CAAC,QAAJ,KAAiB,CAArB,EAAwB,kBAAkB,CAAC,KAAK,cAAN,EAAsB,GAAtB,CAAlB;;;;;;;;;;;;AAE/B,GAzBK;;AA2BN,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,MAAhB,EAA+B;AAA/B,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,YAAL,CAAkB,OAAlB,CAA0B,UAAA,EAAA,EAAE;AAAI,aAAA,KAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,EAAvB,EAAA,MAAA,CAAA;AAAkC,KAAlE;AACH,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,gBAAb,EAAkD,MAAlD,EAAiE;AAC7D,QAAM,EAAE,GAAG,OAAO,gBAAP,KAA4B,QAA5B,GACL,gBADK,GAEL,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,MAFrC;AAGA,SAAK,aAAL,CAAmB,GAAnB,CAAuB,EAAvB,EAA2B,MAA3B;AACH,GALD;;AAOA,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACI,SAAK,EAAL,CAAQ,OAAR;AACH,GAFD;;AAGJ,SAAA,WAAA;AAAC,CA/ED,EAAA;;AAiFA,CAAA,UAAU,WAAV,EAAqB;AAUjB,WAAS,KAAT,CAAe,IAAf,EAA2B;AACvB,WAAO,IAAI,OAAJ,CAAY,UAAA,GAAA,EAAG;AAAI,aAAA,UAAU,CAAC,GAAD,EAAV,IAAU,CAAV;AAAqB,KAAxC,CAAP;AACH;;AACD,WAAgB,QAAhB,CAAyB,CAAzB,EAAkC;AAAlC,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,CAAC,MAAL,CAAY,MAAZ,EAAoB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC5B,cAAA,CAAC,GAAG,CAAJ;;;;kBACG,EAAA,CAAC,GAAG,CAAJ,C,EAAK,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACR,qBAAA,CAAA;AAAA;AAAA,gBAAM,KAAK,CAAC,MAAM,IAAI,CAAC,MAAL,KAAgB,GAAvB,CAAX,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;mBACI,GAAG,CAAC,Y,EAAJ,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAM,GAAG,CAAC,MAAJ,CAAW;AAAE,gBAAA,OAAO,EAAE,UAAU,CAArB;AAAwB,gBAAA,OAAO,EAAE,CAAjC;AAAoC,gBAAA,GAAG,EAAE,CAAzC;AAA4C,gBAAA,eAAe,EAAE;AAA7D,eAAX,CAAN,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;;;;AAEJ,cAAA,CAAC;;;;;;;;;;;OAP2B,CAAA;AASnC,KATM,CAAP;AAUH;;AAXe,EAAA,WAAA,CAAA,QAAA,GAAQ,QAAR;AAYnB,CAzBD,EAAU,WAAW,KAAX,WAAW,GAAA,EAAA,CAArB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { RxEventHelper } from '../../mol-util/rx-event-helper';\r\nimport { now } from '../../mol-util/now';\r\nimport { CreateObservableCtx, ExecuteInContext } from '../../mol-task/execution/observable';\r\nimport { arrayRemoveInPlace } from '../../mol-util/array';\r\nexport { TaskManager };\r\nvar TaskManager = /** @class */ (function () {\r\n    function TaskManager() {\r\n        this.ev = RxEventHelper.create();\r\n        this.id = 0;\r\n        this.runningTasks = new Set();\r\n        this.abortRequests = new Map();\r\n        this.options = new Map();\r\n        this.currentContext = [];\r\n        this.events = {\r\n            progress: this.ev(),\r\n            finished: this.ev()\r\n        };\r\n    }\r\n    TaskManager.prototype.tryGetAbortTaskId = function (node) {\r\n        if (this.abortRequests.has(node.progress.taskId))\r\n            return node.progress.taskId;\r\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\r\n            var c = _a[_i];\r\n            var abort = this.tryGetAbortTaskId(c);\r\n            if (abort !== void 0)\r\n                return abort;\r\n        }\r\n        return void 0;\r\n    };\r\n    TaskManager.prototype.track = function (internalId, taskId) {\r\n        var _this = this;\r\n        return function (progress) {\r\n            var _a;\r\n            if (progress.canAbort && progress.requestAbort) {\r\n                var abortTaskId = _this.tryGetAbortTaskId(progress.root);\r\n                if (abortTaskId !== void 0)\r\n                    progress.requestAbort(_this.abortRequests.get(abortTaskId));\r\n            }\r\n            var elapsed = now() - progress.root.progress.startedTime;\r\n            _this.events.progress.next({\r\n                id: internalId,\r\n                useOverlay: (_a = _this.options.get(taskId)) === null || _a === void 0 ? void 0 : _a.useOverlay,\r\n                level: elapsed < 250 ? 'none' : 'background',\r\n                progress: progress\r\n            });\r\n        };\r\n    };\r\n    TaskManager.prototype.run = function (task, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var id, ctx, ret;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        id = this.id++;\r\n                        if ((params === null || params === void 0 ? void 0 : params.createNewContext) || this.currentContext.length === 0) {\r\n                            ctx = { ctx: CreateObservableCtx(task, this.track(id, task.id), 100), refCount: 1 };\r\n                        }\r\n                        else {\r\n                            ctx = this.currentContext[this.currentContext.length - 1];\r\n                            ctx.refCount++;\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, , 3, 4]);\r\n                        this.options.set(task.id, { useOverlay: !!(params === null || params === void 0 ? void 0 : params.useOverlay) });\r\n                        this.runningTasks.add(task.id);\r\n                        return [4 /*yield*/, ExecuteInContext(ctx.ctx, task)];\r\n                    case 2:\r\n                        ret = _a.sent();\r\n                        return [2 /*return*/, ret];\r\n                    case 3:\r\n                        this.options.delete(task.id);\r\n                        this.runningTasks.delete(task.id);\r\n                        this.events.finished.next({ id: id });\r\n                        this.abortRequests.delete(task.id);\r\n                        ctx.refCount--;\r\n                        if (ctx.refCount === 0)\r\n                            arrayRemoveInPlace(this.currentContext, ctx);\r\n                        return [7 /*endfinally*/];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TaskManager.prototype.requestAbortAll = function (reason) {\r\n        var _this = this;\r\n        this.runningTasks.forEach(function (id) { return _this.abortRequests.set(id, reason); });\r\n    };\r\n    TaskManager.prototype.requestAbort = function (taskIdOrProgress, reason) {\r\n        var id = typeof taskIdOrProgress === 'number'\r\n            ? taskIdOrProgress\r\n            : taskIdOrProgress.root.progress.taskId;\r\n        this.abortRequests.set(id, reason);\r\n    };\r\n    TaskManager.prototype.dispose = function () {\r\n        this.ev.dispose();\r\n    };\r\n    return TaskManager;\r\n}());\r\n(function (TaskManager) {\r\n    function delay(time) {\r\n        return new Promise(function (res) { return setTimeout(res, time); });\r\n    }\r\n    function testTask(N) {\r\n        var _this = this;\r\n        return Task.create('Test', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var i;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        i = 0;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(i < N)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, delay(100 + Math.random() * 200)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        if (!ctx.shouldUpdate) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, ctx.update({ message: 'Step ' + i, current: i, max: N, isIndeterminate: false })];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    TaskManager.testTask = testTask;\r\n})(TaskManager || (TaskManager = {}));\r\n//# sourceMappingURL=task-manager.js.map"]},"metadata":{},"sourceType":"module"}