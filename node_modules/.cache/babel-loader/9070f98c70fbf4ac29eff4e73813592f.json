{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { SortedRanges } from '../../../../../mol-data/int/sorted-ranges';\nimport { OrderedSet } from '../../../../../mol-data/int';\n\nfunction getElementKey(map, key, counter) {\n  if (map.has(key)) return map.get(key);\n  var ret = counter.index++;\n  map.set(key, ret);\n  return ret;\n}\n\nfunction getElementSubstructureKeyMap(map, key) {\n  if (map.has(key)) return map.get(key);\n  var ret = new Map();\n  map.set(key, ret);\n  return ret;\n}\n\nfunction createLookUp(entities, chain, seq) {\n  var getEntKey = entities.getEntityIndex;\n\n  var findChainKey = function (e, c) {\n    var eKey = getEntKey(e);\n    if (eKey < 0) return -1;\n    var cm = chain.get(eKey);\n    if (!cm.has(c)) return -1;\n    return cm.get(c);\n  };\n\n  var findSequenceKey = function (e, c, s) {\n    var eKey = getEntKey(e);\n    if (eKey < 0) return -1;\n    var cm = chain.get(eKey);\n    if (cm === undefined) return -1;\n    var cKey = cm.get(c);\n    if (cKey === undefined) return -1;\n    var sm = seq.get(cKey);\n    var elementIndices = sm.elementIndices,\n        seqRanges = sm.seqRanges;\n    var idx = SortedRanges.firstIntersectionIndex(seqRanges, OrderedSet.ofSingleton(s));\n    return idx !== -1 ? elementIndices[idx] : -1;\n  };\n\n  return {\n    findChainKey: findChainKey,\n    findSequenceKey: findSequenceKey\n  };\n}\n\nfunction missingEntity(k) {\n  throw new Error(\"Missing entity entry for entity id '\" + k + \"'.\");\n}\n\nexport function getCoarseKeys(data, entities) {\n  var entity_id = data.entity_id,\n      asym_id = data.asym_id,\n      seq_id_begin = data.seq_id_begin,\n      seq_id_end = data.seq_id_end,\n      count = data.count,\n      chainElementSegments = data.chainElementSegments;\n  var seqMaps = new Map();\n  var chainMaps = new Map(),\n      chainCounter = {\n    index: 0\n  };\n  var chainKey = new Int32Array(count);\n  var entityKey = new Int32Array(count);\n  var chainToEntity = new Int32Array(chainElementSegments.count);\n\n  for (var i = 0; i < count; i++) {\n    entityKey[i] = entities.getEntityIndex(entity_id.value(i));\n    if (entityKey[i] < 0) missingEntity(entity_id.value(i));\n  }\n\n  for (var cI = 0; cI < chainElementSegments.count; cI++) {\n    var start = chainElementSegments.offsets[cI];\n    var end = chainElementSegments.offsets[cI + 1];\n    var eK = entityKey[start];\n    chainToEntity[cI] = eK;\n    var map = getElementSubstructureKeyMap(chainMaps, eK);\n    var key = getElementKey(map, asym_id.value(start), chainCounter);\n\n    for (var i = start; i < end; i++) chainKey[i] = key; // create seq_id map for the ranges defined by seq_id_begin and seq_id_end\n\n\n    var elementIndices = [];\n    var seqRanges = [];\n\n    for (var i = start; i < end; i++) {\n      var seqStart = seq_id_begin.value(i);\n      var seqEnd = seq_id_end.value(i);\n      elementIndices.push(i);\n      seqRanges.push(seqStart, seqEnd);\n    }\n\n    var seqMap = {\n      elementIndices: elementIndices,\n      seqRanges: SortedRanges.ofSortedRanges(seqRanges)\n    };\n    seqMaps.set(key, seqMap);\n  }\n\n  var _a = createLookUp(entities, chainMaps, seqMaps),\n      findChainKey = _a.findChainKey,\n      findSequenceKey = _a.findSequenceKey;\n\n  var getEntityFromChain = function (c) {\n    return chainToEntity[c];\n  };\n\n  return {\n    chainKey: chainKey,\n    entityKey: entityKey,\n    findSequenceKey: findSequenceKey,\n    findChainKey: findChainKey,\n    getEntityFromChain: getEntityFromChain\n  };\n}","map":{"version":3,"sources":["../../../../../../src/mol-model/structure/model/properties/utils/coarse-keys.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAKH,SAAS,YAAT,QAA6B,2CAA7B;AACA,SAAS,UAAT,QAA2B,6BAA3B;;AAEA,SAAS,aAAT,CAAuB,GAAvB,EAAiD,GAAjD,EAA8D,OAA9D,EAAwF;AACpF,MAAI,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAJ,EAAkB,OAAO,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAP;AAClB,MAAM,GAAG,GAAG,OAAO,CAAC,KAAR,EAAZ;AACA,EAAA,GAAG,CAAC,GAAJ,CAAQ,GAAR,EAAa,GAAb;AACA,SAAO,GAAP;AACH;;AAED,SAAS,4BAAT,CAAsC,GAAtC,EAA6E,GAA7E,EAAwF;AACpF,MAAI,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAJ,EAAkB,OAAO,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAAP;AAClB,MAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AACA,EAAA,GAAG,CAAC,GAAJ,CAAQ,GAAR,EAAa,GAAb;AACA,SAAO,GAAP;AACH;;AAED,SAAS,YAAT,CAAsB,QAAtB,EAA0C,KAA1C,EAAmF,GAAnF,EAA2G;AACvG,MAAM,SAAS,GAAG,QAAQ,CAAC,cAA3B;;AACA,MAAM,YAAY,GAAuC,UAAC,CAAD,EAAI,CAAJ,EAAK;AAC1D,QAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;AACA,QAAI,IAAI,GAAG,CAAX,EAAc,OAAO,CAAC,CAAR;AACd,QAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,IAAV,CAAX;AACA,QAAI,CAAC,EAAE,CAAC,GAAH,CAAO,CAAP,CAAL,EAAgB,OAAO,CAAC,CAAR;AAChB,WAAO,EAAE,CAAC,GAAH,CAAO,CAAP,CAAP;AACH,GAND;;AAOA,MAAM,eAAe,GAA0C,UAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAQ;AACnE,QAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;AACA,QAAI,IAAI,GAAG,CAAX,EAAc,OAAO,CAAC,CAAR;AACd,QAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,IAAV,CAAX;AACA,QAAI,EAAE,KAAK,SAAX,EAAsB,OAAO,CAAC,CAAR;AACtB,QAAM,IAAI,GAAG,EAAE,CAAC,GAAH,CAAO,CAAP,CAAb;AACA,QAAI,IAAI,KAAK,SAAb,EAAwB,OAAO,CAAC,CAAR;AACxB,QAAM,EAAE,GAAG,GAAG,CAAC,GAAJ,CAAQ,IAAR,CAAX;AACQ,QAAA,cAAc,GAAgB,EAAE,CAAlB,cAAd;AAAA,QAAgB,SAAS,GAAK,EAAE,CAAP,SAAzB;AACR,QAAM,GAAG,GAAG,YAAY,CAAC,sBAAb,CAAoC,SAApC,EAA+C,UAAU,CAAC,WAAX,CAAuB,CAAvB,CAA/C,CAAZ;AACA,WAAQ,GAAG,KAAK,CAAC,CAAT,GAAa,cAAc,CAAC,GAAD,CAA3B,GAAmC,CAAC,CAA5C;AACH,GAXD;;AAYA,SAAO;AAAE,IAAA,YAAY,EAAA,YAAd;AAAgB,IAAA,eAAe,EAAA;AAA/B,GAAP;AACH;;AAED,SAAS,aAAT,CAAuB,CAAvB,EAAgC;AAC5B,QAAM,IAAI,KAAJ,CAAU,yCAAuC,CAAvC,GAAwC,IAAlD,CAAN;AACH;;AAID,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAiD,QAAjD,EAAmE;AAC7D,MAAA,SAAS,GAAqE,IAAI,CAAzE,SAAT;AAAA,MAAW,OAAO,GAA4D,IAAI,CAAhE,OAAlB;AAAA,MAAoB,YAAY,GAA8C,IAAI,CAAlD,YAAhC;AAAA,MAAkC,UAAU,GAAkC,IAAI,CAAtC,UAA5C;AAAA,MAA8C,KAAK,GAA2B,IAAI,CAA/B,KAAnD;AAAA,MAAqD,oBAAoB,GAAK,IAAI,CAAT,oBAAzE;AAER,MAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;AACA,MAAM,SAAS,GAAG,IAAI,GAAJ,EAAlB;AAAA,MAA0D,YAAY,GAAG;AAAE,IAAA,KAAK,EAAE;AAAT,GAAzE;AAEA,MAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,KAAf,CAAjB;AACA,MAAM,SAAS,GAAG,IAAI,UAAJ,CAAe,KAAf,CAAlB;AAEA,MAAM,aAAa,GAAG,IAAI,UAAJ,CAAe,oBAAoB,CAAC,KAApC,CAAtB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,IAAA,SAAS,CAAC,CAAD,CAAT,GAAe,QAAQ,CAAC,cAAT,CAAwB,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAAxB,CAAf;AACA,QAAI,SAAS,CAAC,CAAD,CAAT,GAAe,CAAnB,EAAsB,aAAa,CAAC,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAAD,CAAb;AACzB;;AAED,OAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,oBAAoB,CAAC,KAA3C,EAAkD,EAAE,EAApD,EAAwD;AACpD,QAAM,KAAK,GAAG,oBAAoB,CAAC,OAArB,CAA6B,EAA7B,CAAd;AACA,QAAM,GAAG,GAAG,oBAAoB,CAAC,OAArB,CAA6B,EAAE,GAAG,CAAlC,CAAZ;AACA,QAAM,EAAE,GAAG,SAAS,CAAC,KAAD,CAApB;AAEA,IAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,EAApB;AAEA,QAAM,GAAG,GAAG,4BAA4B,CAAC,SAAD,EAAY,EAAZ,CAAxC;AACA,QAAM,GAAG,GAAG,aAAa,CAAC,GAAD,EAAM,OAAO,CAAC,KAAR,CAAc,KAAd,CAAN,EAA4B,YAA5B,CAAzB;;AACA,SAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,GAAxB,EAA6B,CAAC,EAA9B,EAAkC,QAAQ,CAAC,CAAD,CAAR,GAAc,GAAd,CATkB,CAWpD;;;AACA,QAAM,cAAc,GAAa,EAAjC;AACA,QAAM,SAAS,GAAa,EAA5B;;AACA,SAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,GAAxB,EAA6B,CAAC,EAA9B,EAAkC;AAC9B,UAAM,QAAQ,GAAG,YAAY,CAAC,KAAb,CAAmB,CAAnB,CAAjB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAAf;AACA,MAAA,cAAc,CAAC,IAAf,CAAoB,CAApB;AACA,MAAA,SAAS,CAAC,IAAV,CAAe,QAAf,EAAyB,MAAzB;AACH;;AACD,QAAM,MAAM,GAAG;AAAE,MAAA,cAAc,EAAA,cAAhB;AAAkB,MAAA,SAAS,EAAE,YAAY,CAAC,cAAb,CAA4B,SAA5B;AAA7B,KAAf;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,GAAZ,EAAiB,MAAjB;AACH;;AAEK,MAAA,EAAA,GAAoC,YAAY,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,CAAhD;AAAA,MAAE,YAAY,GAAA,EAAA,CAAA,YAAd;AAAA,MAAgB,eAAe,GAAA,EAAA,CAAA,eAA/B;;AAEN,MAAM,kBAAkB,GAA6C,UAAA,CAAA,EAAC;AAClE,WAAO,aAAa,CAAC,CAAD,CAApB;AACH,GAFD;;AAIA,SAAO;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,SAAS,EAAA,SAArB;AAAuB,IAAA,eAAe,EAAA,eAAtC;AAAwC,IAAA,YAAY,EAAA,YAApD;AAAsD,IAAA,kBAAkB,EAAA;AAAxE,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { SortedRanges } from '../../../../../mol-data/int/sorted-ranges';\r\nimport { OrderedSet } from '../../../../../mol-data/int';\r\nfunction getElementKey(map, key, counter) {\r\n    if (map.has(key))\r\n        return map.get(key);\r\n    var ret = counter.index++;\r\n    map.set(key, ret);\r\n    return ret;\r\n}\r\nfunction getElementSubstructureKeyMap(map, key) {\r\n    if (map.has(key))\r\n        return map.get(key);\r\n    var ret = new Map();\r\n    map.set(key, ret);\r\n    return ret;\r\n}\r\nfunction createLookUp(entities, chain, seq) {\r\n    var getEntKey = entities.getEntityIndex;\r\n    var findChainKey = function (e, c) {\r\n        var eKey = getEntKey(e);\r\n        if (eKey < 0)\r\n            return -1;\r\n        var cm = chain.get(eKey);\r\n        if (!cm.has(c))\r\n            return -1;\r\n        return cm.get(c);\r\n    };\r\n    var findSequenceKey = function (e, c, s) {\r\n        var eKey = getEntKey(e);\r\n        if (eKey < 0)\r\n            return -1;\r\n        var cm = chain.get(eKey);\r\n        if (cm === undefined)\r\n            return -1;\r\n        var cKey = cm.get(c);\r\n        if (cKey === undefined)\r\n            return -1;\r\n        var sm = seq.get(cKey);\r\n        var elementIndices = sm.elementIndices, seqRanges = sm.seqRanges;\r\n        var idx = SortedRanges.firstIntersectionIndex(seqRanges, OrderedSet.ofSingleton(s));\r\n        return (idx !== -1 ? elementIndices[idx] : -1);\r\n    };\r\n    return { findChainKey: findChainKey, findSequenceKey: findSequenceKey };\r\n}\r\nfunction missingEntity(k) {\r\n    throw new Error(\"Missing entity entry for entity id '\" + k + \"'.\");\r\n}\r\nexport function getCoarseKeys(data, entities) {\r\n    var entity_id = data.entity_id, asym_id = data.asym_id, seq_id_begin = data.seq_id_begin, seq_id_end = data.seq_id_end, count = data.count, chainElementSegments = data.chainElementSegments;\r\n    var seqMaps = new Map();\r\n    var chainMaps = new Map(), chainCounter = { index: 0 };\r\n    var chainKey = new Int32Array(count);\r\n    var entityKey = new Int32Array(count);\r\n    var chainToEntity = new Int32Array(chainElementSegments.count);\r\n    for (var i = 0; i < count; i++) {\r\n        entityKey[i] = entities.getEntityIndex(entity_id.value(i));\r\n        if (entityKey[i] < 0)\r\n            missingEntity(entity_id.value(i));\r\n    }\r\n    for (var cI = 0; cI < chainElementSegments.count; cI++) {\r\n        var start = chainElementSegments.offsets[cI];\r\n        var end = chainElementSegments.offsets[cI + 1];\r\n        var eK = entityKey[start];\r\n        chainToEntity[cI] = eK;\r\n        var map = getElementSubstructureKeyMap(chainMaps, eK);\r\n        var key = getElementKey(map, asym_id.value(start), chainCounter);\r\n        for (var i = start; i < end; i++)\r\n            chainKey[i] = key;\r\n        // create seq_id map for the ranges defined by seq_id_begin and seq_id_end\r\n        var elementIndices = [];\r\n        var seqRanges = [];\r\n        for (var i = start; i < end; i++) {\r\n            var seqStart = seq_id_begin.value(i);\r\n            var seqEnd = seq_id_end.value(i);\r\n            elementIndices.push(i);\r\n            seqRanges.push(seqStart, seqEnd);\r\n        }\r\n        var seqMap = { elementIndices: elementIndices, seqRanges: SortedRanges.ofSortedRanges(seqRanges) };\r\n        seqMaps.set(key, seqMap);\r\n    }\r\n    var _a = createLookUp(entities, chainMaps, seqMaps), findChainKey = _a.findChainKey, findSequenceKey = _a.findSequenceKey;\r\n    var getEntityFromChain = function (c) {\r\n        return chainToEntity[c];\r\n    };\r\n    return { chainKey: chainKey, entityKey: entityKey, findSequenceKey: findSequenceKey, findChainKey: findChainKey, getEntityFromChain: getEntityFromChain };\r\n}\r\n//# sourceMappingURL=coarse-keys.js.map"]},"metadata":{},"sourceType":"module"}