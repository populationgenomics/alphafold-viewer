/**
 * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { __awaiter, __generator, __spreadArray } from "tslib";
import { StateAction, StateSelection } from '../../mol-state';
import { Task } from '../../mol-task';
import { ParamDefinition as PD } from '../../mol-util/param-definition';
import { PresetStructureRepresentations, StructureRepresentationPresetProvider } from '../builder/structure/representation-preset';
import { BuiltInTrajectoryFormats } from '../formats/trajectory';
import { RootStructureDefinition } from '../helpers/root-structure';
import { PluginStateObject } from '../objects';
import { StateTransforms } from '../transforms';
import { CustomModelProperties, CustomStructureProperties, TrajectoryFromModelAndCoordinates } from '../transforms/model';
import { Asset } from '../../mol-util/assets';
import { PluginConfig } from '../../mol-plugin/config';
var DownloadModelRepresentationOptions = function (plugin) { return PD.Group({
    type: RootStructureDefinition.getParams(void 0, 'auto').type,
    representation: PD.Select(PresetStructureRepresentations.auto.id, plugin.builders.structure.representation.getPresets().map(function (p) { return [p.id, p.display.name, p.display.group]; }), { description: 'Which representation preset to use.' }),
    representationParams: PD.Group(StructureRepresentationPresetProvider.CommonParams, { isHidden: true }),
    asTrajectory: PD.Optional(PD.Boolean(false, { description: 'Load all entries into a single trajectory.' }))
}, { isExpanded: false }); };
export var PdbDownloadProvider = {
    'rcsb': PD.Group({
        encoding: PD.Select('bcif', [['cif', 'cif'], ['bcif', 'bcif']]),
    }, { label: 'RCSB PDB', isFlat: true }),
    'pdbe': PD.Group({
        variant: PD.Select('updated-bcif', [['updated-bcif', 'Updated (bcif)'], ['updated', 'Updated'], ['archival', 'Archival']]),
    }, { label: 'PDBe', isFlat: true }),
};
export { DownloadStructure };
var DownloadStructure = StateAction.build({
    from: PluginStateObject.Root,
    display: { name: 'Download Structure', description: 'Load a structure from the provided source and create its representation.' },
    params: function (_, plugin) {
        var options = DownloadModelRepresentationOptions(plugin);
        var defaultPdbProvider = plugin.config.get(PluginConfig.Download.DefaultPdbProvider) || 'pdbe';
        return {
            source: PD.MappedStatic('pdb', {
                'pdb': PD.Group({
                    provider: PD.Group({
                        id: PD.Text('1tqn', { label: 'PDB Id(s)', description: 'One or more comma/space separated PDB ids.' }),
                        server: PD.MappedStatic(defaultPdbProvider, PdbDownloadProvider),
                    }, { pivot: 'id' }),
                    options: options
                }, { isFlat: true, label: 'PDB' }),
                'pdb-dev': PD.Group({
                    provider: PD.Group({
                        id: PD.Text('PDBDEV_00000001', { label: 'PDBDev Id(s)', description: 'One or more comma/space separated ids.' }),
                        encoding: PD.Select('bcif', [['cif', 'cif'], ['bcif', 'bcif']]),
                    }, { pivot: 'id' }),
                    options: options
                }, { isFlat: true, label: 'PDBDEV' }),
                'swissmodel': PD.Group({
                    id: PD.Text('Q9Y2I8', { label: 'UniProtKB AC(s)', description: 'One or more comma/space separated ACs.' }),
                    options: options
                }, { isFlat: true, label: 'SWISS-MODEL', description: 'Loads the best homology model or experimental structure' }),
                'pubchem': PD.Group({
                    id: PD.Text('2244,2245', { label: 'PubChem ID', description: 'One or more comma/space separated IDs.' }),
                    options: options
                }, { isFlat: true, label: 'PubChem', description: 'Loads 3D conformer from PubChem.' }),
                'url': PD.Group({
                    url: PD.Url(''),
                    format: PD.Select('mmcif', PD.arrayToOptions(BuiltInTrajectoryFormats.map(function (f) { return f[0]; }), function (f) { return f; })),
                    isBinary: PD.Boolean(false),
                    options: options
                }, { isFlat: true, label: 'URL' })
            })
        };
    }
})(function (_a, plugin) {
    var params = _a.params, state = _a.state;
    return Task.create('Download Structure', function (ctx) { return __awaiter(void 0, void 0, void 0, function () {
        var src, downloadParams, asTrajectory, format, representationPreset, showUnitcell, structure;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    plugin.behaviors.layout.leftPanelTabName.next('data');
                    src = params.source;
                    asTrajectory = false, format = 'mmcif';
                    switch (src.name) {
                        case 'url':
                            downloadParams = [{ url: src.params.url, isBinary: src.params.isBinary }];
                            format = src.params.format;
                            break;
                        case 'pdb':
                            downloadParams = src.params.provider.server.name === 'pdbe'
                                ? src.params.provider.server.params.variant === 'updated'
                                    ? getDownloadParams(src.params.provider.id, function (id) { return "https://www.ebi.ac.uk/pdbe/static/entry/" + id.toLowerCase() + "_updated.cif"; }, function (id) { return "PDBe: " + id + " (updated cif)"; }, false)
                                    : src.params.provider.server.params.variant === 'updated-bcif'
                                        ? getDownloadParams(src.params.provider.id, function (id) { return "https://www.ebi.ac.uk/pdbe/entry-files/download/" + id.toLowerCase() + ".bcif"; }, function (id) { return "PDBe: " + id + " (updated cif)"; }, true)
                                        : getDownloadParams(src.params.provider.id, function (id) { return "https://www.ebi.ac.uk/pdbe/static/entry/" + id.toLowerCase() + ".cif"; }, function (id) { return "PDBe: " + id + " (cif)"; }, false)
                                : src.params.provider.server.params.encoding === 'cif'
                                    ? getDownloadParams(src.params.provider.id, function (id) { return "https://files.rcsb.org/download/" + id.toUpperCase() + ".cif"; }, function (id) { return "RCSB: " + id + " (cif)"; }, false)
                                    : getDownloadParams(src.params.provider.id, function (id) { return "https://models.rcsb.org/" + id.toUpperCase() + ".bcif"; }, function (id) { return "RCSB: " + id + " (bcif)"; }, true);
                            asTrajectory = !!src.params.options.asTrajectory;
                            break;
                        case 'pdb-dev':
                            downloadParams = getDownloadParams(src.params.provider.id, function (id) {
                                var nId = id.toUpperCase().startsWith('PDBDEV_') ? id : "PDBDEV_" + id.padStart(8, '0');
                                return src.params.provider.encoding === 'bcif'
                                    ? "https://pdb-dev.wwpdb.org/bcif/" + nId.toUpperCase() + ".bcif"
                                    : "https://pdb-dev.wwpdb.org/cif/" + nId.toUpperCase() + ".cif";
                            }, function (id) { return id.toUpperCase().startsWith('PDBDEV_') ? id : "PDBDEV_" + id.padStart(8, '0'); }, src.params.provider.encoding === 'bcif');
                            asTrajectory = !!src.params.options.asTrajectory;
                            break;
                        case 'swissmodel':
                            downloadParams = getDownloadParams(src.params.id, function (id) { return "https://swissmodel.expasy.org/repository/uniprot/" + id.toUpperCase() + ".pdb"; }, function (id) { return "SWISS-MODEL: " + id; }, false);
                            asTrajectory = !!src.params.options.asTrajectory;
                            format = 'pdb';
                            break;
                        case 'pubchem':
                            downloadParams = getDownloadParams(src.params.id, function (id) { return "https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/CID/" + id.trim() + "/record/SDF/?record_type=3d"; }, function (id) { return "PubChem: " + id; }, false);
                            asTrajectory = !!src.params.options.asTrajectory;
                            format = 'mol';
                            break;
                        default: throw new Error(src.name + " not supported.");
                    }
                    representationPreset = params.source.params.options.representation || PresetStructureRepresentations.auto.id;
                    showUnitcell = representationPreset !== PresetStructureRepresentations.empty.id;
                    structure = src.params.options.type.name === 'auto' ? void 0 : src.params.options.type;
                    return [4 /*yield*/, state.transaction(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var blob, trajectory, _i, downloadParams_1, download, data, trajectory;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(downloadParams.length > 0 && asTrajectory)) return [3 /*break*/, 4];
                                        return [4 /*yield*/, plugin.builders.data.downloadBlob({
                                                sources: downloadParams.map(function (src, i) { return ({ id: '' + i, url: src.url, isBinary: src.isBinary }); }),
                                                maxConcurrency: 6
                                            }, { state: { isGhost: true } })];
                                    case 1:
                                        blob = _a.sent();
                                        return [4 /*yield*/, plugin.builders.structure.parseTrajectory(blob, { formats: downloadParams.map(function (_, i) { return ({ id: '' + i, format: 'cif' }); }) })];
                                    case 2:
                                        trajectory = _a.sent();
                                        return [4 /*yield*/, plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default', {
                                                structure: structure,
                                                showUnitcell: showUnitcell,
                                                representationPreset: representationPreset,
                                                representationPresetParams: params.source.params.options.representationParams
                                            })];
                                    case 3:
                                        _a.sent();
                                        return [3 /*break*/, 10];
                                    case 4:
                                        _i = 0, downloadParams_1 = downloadParams;
                                        _a.label = 5;
                                    case 5:
                                        if (!(_i < downloadParams_1.length)) return [3 /*break*/, 10];
                                        download = downloadParams_1[_i];
                                        return [4 /*yield*/, plugin.builders.data.download(download, { state: { isGhost: true } })];
                                    case 6:
                                        data = _a.sent();
                                        return [4 /*yield*/, plugin.builders.structure.parseTrajectory(data, format)];
                                    case 7:
                                        trajectory = _a.sent();
                                        return [4 /*yield*/, plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default', {
                                                structure: structure,
                                                showUnitcell: showUnitcell,
                                                representationPreset: representationPreset,
                                                representationPresetParams: params.source.params.options.representationParams
                                            })];
                                    case 8:
                                        _a.sent();
                                        _a.label = 9;
                                    case 9:
                                        _i++;
                                        return [3 /*break*/, 5];
                                    case 10: return [2 /*return*/];
                                }
                            });
                        }); }).runInContext(ctx)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
function getDownloadParams(src, url, label, isBinary) {
    var ids = src.split(/[,\s]/).map(function (id) { return id.trim(); }).filter(function (id) { return !!id && (id.length >= 4 || /^[1-9][0-9]*$/.test(id)); });
    var ret = [];
    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
        var id = ids_1[_i];
        ret.push({ url: Asset.Url(url(id)), isBinary: isBinary, label: label(id) });
    }
    return ret;
}
export var UpdateTrajectory = StateAction.build({
    display: { name: 'Update Trajectory' },
    params: {
        action: PD.Select('advance', [['advance', 'Advance'], ['reset', 'Reset']]),
        by: PD.Optional(PD.Numeric(1, { min: -1, max: 1, step: 1 }))
    }
})(function (_a) {
    var params = _a.params, state = _a.state;
    var models = state.selectQ(function (q) { return q.ofTransformer(StateTransforms.Model.ModelFromTrajectory); });
    var update = state.build();
    if (params.action === 'reset') {
        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {
            var m = models_1[_i];
            update.to(m).update({ modelIndex: 0 });
        }
    }
    else {
        var _loop_1 = function (m) {
            var parent_1 = StateSelection.findAncestorOfType(state.tree, state.cells, m.transform.ref, PluginStateObject.Molecule.Trajectory);
            if (!parent_1 || !parent_1.obj)
                return "continue";
            var traj = parent_1.obj;
            update.to(m).update(function (old) {
                var modelIndex = (old.modelIndex + params.by) % traj.data.frameCount;
                if (modelIndex < 0)
                    modelIndex += traj.data.frameCount;
                return { modelIndex: modelIndex };
            });
        };
        for (var _b = 0, models_2 = models; _b < models_2.length; _b++) {
            var m = models_2[_b];
            _loop_1(m);
        }
    }
    return state.updateTree(update);
});
export var EnableModelCustomProps = StateAction.build({
    display: { name: 'Custom Model Properties', description: 'Enable parameters for custom properties of the model.' },
    from: PluginStateObject.Molecule.Model,
    params: function (a, ctx) {
        return ctx.customModelProperties.getParams(a === null || a === void 0 ? void 0 : a.data);
    },
    isApplicable: function (a, t, ctx) {
        return t.transformer !== CustomModelProperties;
    }
})(function (_a, ctx) {
    var ref = _a.ref, params = _a.params;
    return ctx.builders.structure.insertModelProperties(ref, params);
});
export var EnableStructureCustomProps = StateAction.build({
    display: { name: 'Custom Structure Properties', description: 'Enable parameters for custom properties of the structure.' },
    from: PluginStateObject.Molecule.Structure,
    params: function (a, ctx) {
        return ctx.customStructureProperties.getParams(a === null || a === void 0 ? void 0 : a.data);
    },
    isApplicable: function (a, t, ctx) {
        return t.transformer !== CustomStructureProperties;
    }
})(function (_a, ctx) {
    var ref = _a.ref, params = _a.params;
    return ctx.builders.structure.insertStructureProperties(ref, params);
});
export var AddTrajectory = StateAction.build({
    display: { name: 'Add Trajectory', description: 'Add trajectory from existing model/topology and coordinates.' },
    from: PluginStateObject.Root,
    params: function (a, ctx) {
        var state = ctx.state.data;
        var models = __spreadArray(__spreadArray([], state.selectQ(function (q) { return q.rootsOfType(PluginStateObject.Molecule.Model); }), true), state.selectQ(function (q) { return q.rootsOfType(PluginStateObject.Molecule.Topology); }), true);
        var modelOptions = models.map(function (t) { return [t.transform.ref, t.obj.label]; });
        var coords = state.selectQ(function (q) { return q.rootsOfType(PluginStateObject.Molecule.Coordinates); });
        var coordOptions = coords.map(function (c) { return [c.transform.ref, c.obj.label]; });
        return {
            model: PD.Select(modelOptions.length ? modelOptions[0][0] : '', modelOptions),
            coordinates: PD.Select(coordOptions.length ? coordOptions[0][0] : '', coordOptions)
        };
    }
})(function (_a, ctx) {
    var params = _a.params, state = _a.state;
    return Task.create('Add Trajectory', function (taskCtx) {
        return state.transaction(function () { return __awaiter(void 0, void 0, void 0, function () {
            var dependsOn, model, structure;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dependsOn = [params.model, params.coordinates];
                        model = state.build().toRoot()
                            .apply(TrajectoryFromModelAndCoordinates, {
                            modelRef: params.model,
                            coordinatesRef: params.coordinates
                        }, { dependsOn: dependsOn })
                            .apply(StateTransforms.Model.ModelFromTrajectory, { modelIndex: 0 });
                        return [4 /*yield*/, state.updateTree(model).runInContext(taskCtx)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, ctx.builders.structure.createStructure(model.selector)];
                    case 2:
                        structure = _a.sent();
                        return [4 /*yield*/, ctx.builders.structure.representation.applyPreset(structure, 'auto')];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }).runInContext(taskCtx);
    });
});
//# sourceMappingURL=structure.js.map