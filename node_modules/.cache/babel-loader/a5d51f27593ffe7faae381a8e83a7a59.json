{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\nimport { computeUnitGaussianDensity, GaussianDensityParams } from './util/gaussian';\nimport { computeMarchingCubesLines } from '../../../mol-geo/util/marching-cubes/algorithm';\nimport { UnitsLinesParams, UnitsLinesVisual } from '../units-visual';\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { getUnitExtraRadius } from './util/common';\n\nfunction createGaussianWireframe(ctx, unit, structure, theme, props, lines) {\n  return __awaiter(this, void 0, void 0, function () {\n    var smoothness, _a, transform, field, idField, params, wireframe, sphere;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          smoothness = props.smoothness;\n          return [4\n          /*yield*/\n          , computeUnitGaussianDensity(structure, unit, props).runInContext(ctx.runtime)];\n\n        case 1:\n          _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField;\n          params = {\n            isoLevel: Math.exp(-smoothness),\n            scalarField: field,\n            idField: idField\n          };\n          return [4\n          /*yield*/\n          , computeMarchingCubesLines(params, lines).runAsChild(ctx.runtime)];\n\n        case 2:\n          wireframe = _b.sent();\n          Lines.transform(wireframe, transform);\n          sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.radiusOffset + getUnitExtraRadius(unit));\n          wireframe.setBoundingSphere(sphere);\n          return [2\n          /*return*/\n          , wireframe];\n      }\n    });\n  });\n}\n\nexport var GaussianWireframeParams = __assign(__assign(__assign({}, UnitsLinesParams), GaussianDensityParams), {\n  sizeFactor: PD.Numeric(3, {\n    min: 0,\n    max: 10,\n    step: 0.1\n  }),\n  lineSizeAttenuation: PD.Boolean(false),\n  ignoreHydrogens: PD.Boolean(false),\n  includeParent: PD.Boolean(false, {\n    isHidden: true\n  })\n});\nexport function GaussianWireframeVisual(materialId) {\n  return UnitsLinesVisual({\n    defaultProps: PD.getDefaultValues(GaussianWireframeParams),\n    createGeometry: createGaussianWireframe,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      if (newProps.resolution !== currentProps.resolution) state.createGeometry = true;\n      if (newProps.radiusOffset !== currentProps.radiusOffset) state.createGeometry = true;\n      if (newProps.smoothness !== currentProps.smoothness) state.createGeometry = true;\n      if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens) state.createGeometry = true;\n      if (newProps.traceOnly !== currentProps.traceOnly) state.createGeometry = true;\n      if (newProps.includeParent !== currentProps.includeParent) state.createGeometry = true;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/gaussian-surface-wireframe.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\r\nimport { computeUnitGaussianDensity, GaussianDensityParams } from './util/gaussian';\r\nimport { computeMarchingCubesLines } from '../../../mol-geo/util/marching-cubes/algorithm';\r\nimport { UnitsLinesParams, UnitsLinesVisual } from '../units-visual';\r\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { getUnitExtraRadius } from './util/common';\r\nfunction createGaussianWireframe(ctx, unit, structure, theme, props, lines) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var smoothness, _a, transform, field, idField, params, wireframe, sphere;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    smoothness = props.smoothness;\r\n                    return [4 /*yield*/, computeUnitGaussianDensity(structure, unit, props).runInContext(ctx.runtime)];\r\n                case 1:\r\n                    _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField;\r\n                    params = {\r\n                        isoLevel: Math.exp(-smoothness),\r\n                        scalarField: field,\r\n                        idField: idField\r\n                    };\r\n                    return [4 /*yield*/, computeMarchingCubesLines(params, lines).runAsChild(ctx.runtime)];\r\n                case 2:\r\n                    wireframe = _b.sent();\r\n                    Lines.transform(wireframe, transform);\r\n                    sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.radiusOffset + getUnitExtraRadius(unit));\r\n                    wireframe.setBoundingSphere(sphere);\r\n                    return [2 /*return*/, wireframe];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport var GaussianWireframeParams = __assign(__assign(__assign({}, UnitsLinesParams), GaussianDensityParams), { sizeFactor: PD.Numeric(3, { min: 0, max: 10, step: 0.1 }), lineSizeAttenuation: PD.Boolean(false), ignoreHydrogens: PD.Boolean(false), includeParent: PD.Boolean(false, { isHidden: true }) });\r\nexport function GaussianWireframeVisual(materialId) {\r\n    return UnitsLinesVisual({\r\n        defaultProps: PD.getDefaultValues(GaussianWireframeParams),\r\n        createGeometry: createGaussianWireframe,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            if (newProps.resolution !== currentProps.resolution)\r\n                state.createGeometry = true;\r\n            if (newProps.radiusOffset !== currentProps.radiusOffset)\r\n                state.createGeometry = true;\r\n            if (newProps.smoothness !== currentProps.smoothness)\r\n                state.createGeometry = true;\r\n            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)\r\n                state.createGeometry = true;\r\n            if (newProps.traceOnly !== currentProps.traceOnly)\r\n                state.createGeometry = true;\r\n            if (newProps.includeParent !== currentProps.includeParent)\r\n                state.createGeometry = true;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=gaussian-surface-wireframe.js.map"]},"metadata":{},"sourceType":"module"}