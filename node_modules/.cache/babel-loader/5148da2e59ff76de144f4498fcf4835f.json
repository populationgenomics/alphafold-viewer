{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>\r\n */\nexport var wboit_write = \"\\n#if defined(dRenderVariant_colorWboit)\\n    if (!uRenderWboit) {\\n        if (preFogAlpha < 1.0) {\\n            discard;\\n        }\\n    } else if (uRenderWboit) {\\n        // the 'fragmentDepth > 0.99' check is to handle precision issues with packed depth\\n        if (preFogAlpha != 1.0 && !interior && (fragmentDepth < getDepth(gl_FragCoord.xy / uDrawingBufferSize) || fragmentDepth > 0.99)) {\\n            float alpha = gl_FragColor.a;\\n            float wboitWeight = alpha * clamp(pow(1.0 - fragmentDepth, 2.0), 0.01, 1.0);\\n            gl_FragColor = vec4(gl_FragColor.rgb * alpha * wboitWeight, alpha);\\n            // extra alpha is to handle pre-multiplied alpha\\n            #if !defined(dRenderMode_volume) && !defined(dRenderMode_isosurface)\\n                gl_FragData[1] = vec4((uTransparentBackground ? alpha : 1.0) * alpha * wboitWeight);\\n            #else\\n                gl_FragData[1] = vec4(alpha * alpha * wboitWeight);\\n            #endif\\n        } else {\\n            discard;\\n        }\\n    }\\n#endif\\n\";","map":{"version":3,"sources":["../../../../src/mol-gl/shader/chunks/wboit-write.glsl.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,OAAO,IAAM,WAAW,GAAG,4gCAApB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>\r\n */\r\nexport var wboit_write = \"\\n#if defined(dRenderVariant_colorWboit)\\n    if (!uRenderWboit) {\\n        if (preFogAlpha < 1.0) {\\n            discard;\\n        }\\n    } else if (uRenderWboit) {\\n        // the 'fragmentDepth > 0.99' check is to handle precision issues with packed depth\\n        if (preFogAlpha != 1.0 && !interior && (fragmentDepth < getDepth(gl_FragCoord.xy / uDrawingBufferSize) || fragmentDepth > 0.99)) {\\n            float alpha = gl_FragColor.a;\\n            float wboitWeight = alpha * clamp(pow(1.0 - fragmentDepth, 2.0), 0.01, 1.0);\\n            gl_FragColor = vec4(gl_FragColor.rgb * alpha * wboitWeight, alpha);\\n            // extra alpha is to handle pre-multiplied alpha\\n            #if !defined(dRenderMode_volume) && !defined(dRenderMode_isosurface)\\n                gl_FragData[1] = vec4((uTransparentBackground ? alpha : 1.0) * alpha * wboitWeight);\\n            #else\\n                gl_FragData[1] = vec4(alpha * alpha * wboitWeight);\\n            #endif\\n        } else {\\n            discard;\\n        }\\n    }\\n#endif\\n\";\r\n//# sourceMappingURL=wboit-write.glsl.js.map"]},"metadata":{},"sourceType":"module"}