{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { ReaderResult as Result } from '../result';\nimport { Task } from '../../../mol-task';\nimport { PlyFile, PlyType } from './schema';\nimport { Tokenizer, TokenBuilder } from '../common/text/tokenizer';\nimport { Column } from '../../../mol-data/db';\nimport { TokenColumn } from '../common/text/column/token';\n\nfunction State(data, runtimeCtx) {\n  var tokenizer = Tokenizer(data);\n  return {\n    data: data,\n    tokenizer: tokenizer,\n    runtimeCtx: runtimeCtx,\n    comments: [],\n    elementSpecs: [],\n    elements: []\n  };\n}\n\nfunction markHeader(tokenizer) {\n  var endHeaderIndex = tokenizer.data.indexOf('end_header', tokenizer.position);\n  if (endHeaderIndex === -1) throw new Error(\"no 'end_header' record found\"); // TODO set `tokenizer.lineNumber` correctly\n\n  tokenizer.tokenStart = tokenizer.position;\n  tokenizer.tokenEnd = endHeaderIndex;\n  tokenizer.position = endHeaderIndex;\n  Tokenizer.eatLine(tokenizer);\n}\n\nfunction parseHeader(state) {\n  var tokenizer = state.tokenizer,\n      comments = state.comments,\n      elementSpecs = state.elementSpecs;\n  markHeader(tokenizer);\n  var headerLines = Tokenizer.getTokenString(tokenizer).split(/\\r?\\n/);\n  if (headerLines[0] !== 'ply') throw new Error(\"data not starting with 'ply'\");\n  if (headerLines[1] !== 'format ascii 1.0') throw new Error(\"format not 'ascii 1.0'\");\n  var currentName;\n  var currentCount;\n  var currentProperties;\n\n  function addCurrentElementSchema() {\n    if (currentName !== undefined && currentCount !== undefined && currentProperties !== undefined) {\n      var isList = false;\n\n      for (var i = 0, il = currentProperties.length; i < il; ++i) {\n        var p = currentProperties[i];\n\n        if (p.kind === 'list') {\n          isList = true;\n          break;\n        }\n      }\n\n      if (isList && currentProperties.length !== 1) {// TODO handle lists with appended properties\n        //      currently only the list part will be accessible\n      }\n\n      if (isList) {\n        elementSpecs.push({\n          kind: 'list',\n          name: currentName,\n          count: currentCount,\n          property: currentProperties[0]\n        });\n      } else {\n        elementSpecs.push({\n          kind: 'table',\n          name: currentName,\n          count: currentCount,\n          properties: currentProperties\n        });\n      }\n    }\n  }\n\n  for (var i = 2, il = headerLines.length; i < il; ++i) {\n    var l = headerLines[i];\n    var ls = l.split(' ');\n\n    if (l.startsWith('comment')) {\n      comments.push(l.substr(8));\n    } else if (l.startsWith('element')) {\n      addCurrentElementSchema();\n      currentProperties = [];\n      currentName = ls[1];\n      currentCount = parseInt(ls[2]);\n    } else if (l.startsWith('property')) {\n      if (currentProperties === undefined) throw new Error(\"properties outside of element\");\n\n      if (ls[1] === 'list') {\n        currentProperties.push({\n          kind: 'list',\n          countType: PlyType(ls[2]),\n          dataType: PlyType(ls[3]),\n          name: ls[4]\n        });\n      } else {\n        currentProperties.push({\n          kind: 'column',\n          type: PlyType(ls[1]),\n          name: ls[2]\n        });\n      }\n    } else if (l.startsWith('end_header')) {\n      addCurrentElementSchema();\n    } else {\n      console.warn('unknown header line');\n    }\n  }\n}\n\nfunction parseElements(state) {\n  var elementSpecs = state.elementSpecs;\n\n  for (var i = 0, il = elementSpecs.length; i < il; ++i) {\n    var spec = elementSpecs[i];\n    if (spec.kind === 'table') parseTableElement(state, spec);else if (spec.kind === 'list') parseListElement(state, spec);\n  }\n}\n\nfunction getColumnSchema(type) {\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'int8':\n    case 'uint8':\n    case 'short':\n    case 'ushort':\n    case 'int16':\n    case 'uint16':\n    case 'int':\n    case 'uint':\n    case 'int32':\n    case 'uint32':\n      return Column.Schema.int;\n\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      return Column.Schema.float;\n  }\n}\n\nfunction parseTableElement(state, spec) {\n  var elements = state.elements,\n      tokenizer = state.tokenizer;\n  var count = spec.count,\n      properties = spec.properties;\n  var propertyCount = properties.length;\n  var propertyNames = [];\n  var propertyTypes = [];\n  var propertyTokens = [];\n  var propertyColumns = new Map();\n\n  for (var i = 0, il = propertyCount; i < il; ++i) {\n    var tokens = TokenBuilder.create(tokenizer.data, count * 2);\n    propertyTokens.push(tokens);\n  }\n\n  for (var i = 0, il = count; i < il; ++i) {\n    for (var j = 0, jl = propertyCount; j < jl; ++j) {\n      Tokenizer.skipWhitespace(tokenizer);\n      Tokenizer.markStart(tokenizer);\n      Tokenizer.eatValue(tokenizer);\n      TokenBuilder.addUnchecked(propertyTokens[j], tokenizer.tokenStart, tokenizer.tokenEnd);\n    }\n  }\n\n  for (var i = 0, il = propertyCount; i < il; ++i) {\n    var _a = properties[i],\n        type = _a.type,\n        name_1 = _a.name;\n    var column = TokenColumn(propertyTokens[i], getColumnSchema(type));\n    propertyNames.push(name_1);\n    propertyTypes.push(type);\n    propertyColumns.set(name_1, column);\n  }\n\n  elements.push({\n    kind: 'table',\n    rowCount: count,\n    propertyNames: propertyNames,\n    propertyTypes: propertyTypes,\n    getProperty: function (name) {\n      return propertyColumns.get(name);\n    }\n  });\n}\n\nfunction parseListElement(state, spec) {\n  var elements = state.elements,\n      tokenizer = state.tokenizer;\n  var count = spec.count,\n      property = spec.property; // initial tokens size assumes triangle index data\n\n  var tokens = TokenBuilder.create(tokenizer.data, count * 2 * 3);\n  var offsets = new Uint32Array(count + 1);\n  var entryCount = 0;\n\n  for (var i = 0, il = count; i < il; ++i) {\n    Tokenizer.skipWhitespace(tokenizer);\n    Tokenizer.markStart(tokenizer);\n\n    while (Tokenizer.skipWhitespace(tokenizer) !== 10) {\n      ++entryCount;\n      Tokenizer.markStart(tokenizer);\n      Tokenizer.eatValue(tokenizer);\n      TokenBuilder.addToken(tokens, tokenizer);\n    }\n\n    offsets[i + 1] = entryCount;\n  }\n  /** holds row value entries transiently */\n\n\n  var listValue = {\n    entries: [],\n    count: 0\n  };\n  var column = TokenColumn(tokens, getColumnSchema(property.dataType));\n  elements.push({\n    kind: 'list',\n    rowCount: count,\n    name: property.name,\n    type: property.dataType,\n    value: function (row) {\n      var offset = offsets[row] + 1;\n      var count = column.value(offset - 1);\n\n      for (var i = offset, il = offset + count; i < il; ++i) {\n        listValue.entries[i - offset] = column.value(i);\n      }\n\n      listValue.count = count;\n      return listValue;\n    }\n  });\n}\n\nfunction parseInternal(data, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var state, elements, elementSpecs, comments, elementNames, result;\n    return __generator(this, function (_a) {\n      state = State(data, ctx);\n      ctx.update({\n        message: 'Parsing...',\n        current: 0,\n        max: data.length\n      });\n      parseHeader(state);\n      parseElements(state);\n      elements = state.elements, elementSpecs = state.elementSpecs, comments = state.comments;\n      elementNames = elementSpecs.map(function (s) {\n        return s.name;\n      });\n      result = PlyFile(elements, elementNames, comments);\n      return [2\n      /*return*/\n      , Result.success(result)];\n    });\n  });\n}\n\nexport function parsePly(data) {\n  var _this = this;\n\n  return Task.create('Parse PLY', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , parseInternal(data, ctx)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/ply/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { ReaderResult as Result } from '../result';\r\nimport { Task } from '../../../mol-task';\r\nimport { PlyFile, PlyType } from './schema';\r\nimport { Tokenizer, TokenBuilder } from '../common/text/tokenizer';\r\nimport { Column } from '../../../mol-data/db';\r\nimport { TokenColumn } from '../common/text/column/token';\r\nfunction State(data, runtimeCtx) {\r\n    var tokenizer = Tokenizer(data);\r\n    return {\r\n        data: data,\r\n        tokenizer: tokenizer,\r\n        runtimeCtx: runtimeCtx,\r\n        comments: [],\r\n        elementSpecs: [],\r\n        elements: []\r\n    };\r\n}\r\nfunction markHeader(tokenizer) {\r\n    var endHeaderIndex = tokenizer.data.indexOf('end_header', tokenizer.position);\r\n    if (endHeaderIndex === -1)\r\n        throw new Error(\"no 'end_header' record found\");\r\n    // TODO set `tokenizer.lineNumber` correctly\r\n    tokenizer.tokenStart = tokenizer.position;\r\n    tokenizer.tokenEnd = endHeaderIndex;\r\n    tokenizer.position = endHeaderIndex;\r\n    Tokenizer.eatLine(tokenizer);\r\n}\r\nfunction parseHeader(state) {\r\n    var tokenizer = state.tokenizer, comments = state.comments, elementSpecs = state.elementSpecs;\r\n    markHeader(tokenizer);\r\n    var headerLines = Tokenizer.getTokenString(tokenizer).split(/\\r?\\n/);\r\n    if (headerLines[0] !== 'ply')\r\n        throw new Error(\"data not starting with 'ply'\");\r\n    if (headerLines[1] !== 'format ascii 1.0')\r\n        throw new Error(\"format not 'ascii 1.0'\");\r\n    var currentName;\r\n    var currentCount;\r\n    var currentProperties;\r\n    function addCurrentElementSchema() {\r\n        if (currentName !== undefined && currentCount !== undefined && currentProperties !== undefined) {\r\n            var isList = false;\r\n            for (var i = 0, il = currentProperties.length; i < il; ++i) {\r\n                var p = currentProperties[i];\r\n                if (p.kind === 'list') {\r\n                    isList = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isList && currentProperties.length !== 1) {\r\n                // TODO handle lists with appended properties\r\n                //      currently only the list part will be accessible\r\n            }\r\n            if (isList) {\r\n                elementSpecs.push({\r\n                    kind: 'list',\r\n                    name: currentName,\r\n                    count: currentCount,\r\n                    property: currentProperties[0]\r\n                });\r\n            }\r\n            else {\r\n                elementSpecs.push({\r\n                    kind: 'table',\r\n                    name: currentName,\r\n                    count: currentCount,\r\n                    properties: currentProperties\r\n                });\r\n            }\r\n        }\r\n    }\r\n    for (var i = 2, il = headerLines.length; i < il; ++i) {\r\n        var l = headerLines[i];\r\n        var ls = l.split(' ');\r\n        if (l.startsWith('comment')) {\r\n            comments.push(l.substr(8));\r\n        }\r\n        else if (l.startsWith('element')) {\r\n            addCurrentElementSchema();\r\n            currentProperties = [];\r\n            currentName = ls[1];\r\n            currentCount = parseInt(ls[2]);\r\n        }\r\n        else if (l.startsWith('property')) {\r\n            if (currentProperties === undefined)\r\n                throw new Error(\"properties outside of element\");\r\n            if (ls[1] === 'list') {\r\n                currentProperties.push({\r\n                    kind: 'list',\r\n                    countType: PlyType(ls[2]),\r\n                    dataType: PlyType(ls[3]),\r\n                    name: ls[4]\r\n                });\r\n            }\r\n            else {\r\n                currentProperties.push({\r\n                    kind: 'column',\r\n                    type: PlyType(ls[1]),\r\n                    name: ls[2]\r\n                });\r\n            }\r\n        }\r\n        else if (l.startsWith('end_header')) {\r\n            addCurrentElementSchema();\r\n        }\r\n        else {\r\n            console.warn('unknown header line');\r\n        }\r\n    }\r\n}\r\nfunction parseElements(state) {\r\n    var elementSpecs = state.elementSpecs;\r\n    for (var i = 0, il = elementSpecs.length; i < il; ++i) {\r\n        var spec = elementSpecs[i];\r\n        if (spec.kind === 'table')\r\n            parseTableElement(state, spec);\r\n        else if (spec.kind === 'list')\r\n            parseListElement(state, spec);\r\n    }\r\n}\r\nfunction getColumnSchema(type) {\r\n    switch (type) {\r\n        case 'char':\r\n        case 'uchar':\r\n        case 'int8':\r\n        case 'uint8':\r\n        case 'short':\r\n        case 'ushort':\r\n        case 'int16':\r\n        case 'uint16':\r\n        case 'int':\r\n        case 'uint':\r\n        case 'int32':\r\n        case 'uint32':\r\n            return Column.Schema.int;\r\n        case 'float':\r\n        case 'double':\r\n        case 'float32':\r\n        case 'float64':\r\n            return Column.Schema.float;\r\n    }\r\n}\r\nfunction parseTableElement(state, spec) {\r\n    var elements = state.elements, tokenizer = state.tokenizer;\r\n    var count = spec.count, properties = spec.properties;\r\n    var propertyCount = properties.length;\r\n    var propertyNames = [];\r\n    var propertyTypes = [];\r\n    var propertyTokens = [];\r\n    var propertyColumns = new Map();\r\n    for (var i = 0, il = propertyCount; i < il; ++i) {\r\n        var tokens = TokenBuilder.create(tokenizer.data, count * 2);\r\n        propertyTokens.push(tokens);\r\n    }\r\n    for (var i = 0, il = count; i < il; ++i) {\r\n        for (var j = 0, jl = propertyCount; j < jl; ++j) {\r\n            Tokenizer.skipWhitespace(tokenizer);\r\n            Tokenizer.markStart(tokenizer);\r\n            Tokenizer.eatValue(tokenizer);\r\n            TokenBuilder.addUnchecked(propertyTokens[j], tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        }\r\n    }\r\n    for (var i = 0, il = propertyCount; i < il; ++i) {\r\n        var _a = properties[i], type = _a.type, name_1 = _a.name;\r\n        var column = TokenColumn(propertyTokens[i], getColumnSchema(type));\r\n        propertyNames.push(name_1);\r\n        propertyTypes.push(type);\r\n        propertyColumns.set(name_1, column);\r\n    }\r\n    elements.push({\r\n        kind: 'table',\r\n        rowCount: count,\r\n        propertyNames: propertyNames,\r\n        propertyTypes: propertyTypes,\r\n        getProperty: function (name) { return propertyColumns.get(name); }\r\n    });\r\n}\r\nfunction parseListElement(state, spec) {\r\n    var elements = state.elements, tokenizer = state.tokenizer;\r\n    var count = spec.count, property = spec.property;\r\n    // initial tokens size assumes triangle index data\r\n    var tokens = TokenBuilder.create(tokenizer.data, count * 2 * 3);\r\n    var offsets = new Uint32Array(count + 1);\r\n    var entryCount = 0;\r\n    for (var i = 0, il = count; i < il; ++i) {\r\n        Tokenizer.skipWhitespace(tokenizer);\r\n        Tokenizer.markStart(tokenizer);\r\n        while (Tokenizer.skipWhitespace(tokenizer) !== 10) {\r\n            ++entryCount;\r\n            Tokenizer.markStart(tokenizer);\r\n            Tokenizer.eatValue(tokenizer);\r\n            TokenBuilder.addToken(tokens, tokenizer);\r\n        }\r\n        offsets[i + 1] = entryCount;\r\n    }\r\n    /** holds row value entries transiently */\r\n    var listValue = {\r\n        entries: [],\r\n        count: 0\r\n    };\r\n    var column = TokenColumn(tokens, getColumnSchema(property.dataType));\r\n    elements.push({\r\n        kind: 'list',\r\n        rowCount: count,\r\n        name: property.name,\r\n        type: property.dataType,\r\n        value: function (row) {\r\n            var offset = offsets[row] + 1;\r\n            var count = column.value(offset - 1);\r\n            for (var i = offset, il = offset + count; i < il; ++i) {\r\n                listValue.entries[i - offset] = column.value(i);\r\n            }\r\n            listValue.count = count;\r\n            return listValue;\r\n        }\r\n    });\r\n}\r\nfunction parseInternal(data, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var state, elements, elementSpecs, comments, elementNames, result;\r\n        return __generator(this, function (_a) {\r\n            state = State(data, ctx);\r\n            ctx.update({ message: 'Parsing...', current: 0, max: data.length });\r\n            parseHeader(state);\r\n            parseElements(state);\r\n            elements = state.elements, elementSpecs = state.elementSpecs, comments = state.comments;\r\n            elementNames = elementSpecs.map(function (s) { return s.name; });\r\n            result = PlyFile(elements, elementNames, comments);\r\n            return [2 /*return*/, Result.success(result)];\r\n        });\r\n    });\r\n}\r\nexport function parsePly(data) {\r\n    var _this = this;\r\n    return Task.create('Parse PLY', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, parseInternal(data, ctx)];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}