{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { arrayMinMax } from '../mol-util/array';\nexport function calculateHistogram(data, binCount, options) {\n  if (!options) {\n    var _a = arrayMinMax(data),\n        min = _a[0],\n        max = _a[1];\n\n    return _calcHistogram(data, binCount, min, max);\n  } else {\n    return _calcHistogram(data, binCount, options.min, options.max);\n  }\n}\n\nfunction _calcHistogram(data, binCount, min, max) {\n  var binWidth = (max - min) / binCount;\n  if (binWidth === 0) binWidth = 1;\n  var counts = new Int32Array(binCount);\n\n  for (var i = 0, _i = data.length; i < _i; i++) {\n    var bin = Math.floor((data[i] - min) / binWidth);\n    if (bin >= binCount) bin = binCount - 1;else if (bin < 0) bin = 0;\n    counts[bin]++;\n  }\n\n  return {\n    min: min,\n    max: max,\n    binWidth: binWidth,\n    counts: counts\n  };\n}","map":{"version":3,"sources":["../../src/mol-math/histogram.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,WAAT,QAA4B,mBAA5B;AASA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAAsD,QAAtD,EAAwE,OAAxE,EAA+G;AACjH,MAAI,CAAC,OAAL,EAAc;AACJ,QAAA,EAAA,GAAa,WAAW,CAAC,IAAD,CAAxB;AAAA,QAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;AAAA,QAAM,GAAG,GAAA,EAAA,CAAA,CAAA,CAAT;;AACN,WAAO,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,GAAjB,EAAsB,GAAtB,CAArB;AACH,GAHD,MAGO;AACH,WAAO,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,OAAO,CAAC,GAAzB,EAA8B,OAAO,CAAC,GAAtC,CAArB;AACH;AACJ;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAAiD,QAAjD,EAAmE,GAAnE,EAAgF,GAAhF,EAA2F;AACvF,MAAI,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAP,IAAc,QAA7B;AACA,MAAI,QAAQ,KAAK,CAAjB,EAAoB,QAAQ,GAAG,CAAX;AAEpB,MAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,QAAf,CAAf;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,QAAI,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAX,IAAkB,QAA7B,CAAV;AACA,QAAI,GAAG,IAAI,QAAX,EAAqB,GAAG,GAAG,QAAQ,GAAG,CAAjB,CAArB,KACK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,CAAN;AAClB,IAAA,MAAM,CAAC,GAAD,CAAN;AACH;;AAED,SAAO;AAAE,IAAA,GAAG,EAAA,GAAL;AAAO,IAAA,GAAG,EAAA,GAAV;AAAY,IAAA,QAAQ,EAAA,QAApB;AAAsB,IAAA,MAAM,EAAA;AAA5B,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { arrayMinMax } from '../mol-util/array';\r\nexport function calculateHistogram(data, binCount, options) {\r\n    if (!options) {\r\n        var _a = arrayMinMax(data), min = _a[0], max = _a[1];\r\n        return _calcHistogram(data, binCount, min, max);\r\n    }\r\n    else {\r\n        return _calcHistogram(data, binCount, options.min, options.max);\r\n    }\r\n}\r\nfunction _calcHistogram(data, binCount, min, max) {\r\n    var binWidth = (max - min) / binCount;\r\n    if (binWidth === 0)\r\n        binWidth = 1;\r\n    var counts = new Int32Array(binCount);\r\n    for (var i = 0, _i = data.length; i < _i; i++) {\r\n        var bin = Math.floor((data[i] - min) / binWidth);\r\n        if (bin >= binCount)\r\n            bin = binCount - 1;\r\n        else if (bin < 0)\r\n            bin = 0;\r\n        counts[bin]++;\r\n    }\r\n    return { min: min, max: max, binWidth: binWidth, counts: counts };\r\n}\r\n//# sourceMappingURL=histogram.js.map"]},"metadata":{},"sourceType":"module"}