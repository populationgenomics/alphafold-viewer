{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { Column } from './column';\nimport { sortArray } from '../util/sort';\nimport { StringBuilder } from '../../mol-util';\n/** An immutable table */\n\nvar Table;\n\n(function (Table) {\n  function is(t) {\n    return t && typeof t._rowCount === 'number' && !!t._columns && !!t._schema;\n  }\n\n  Table.is = is;\n\n  function pickColumns(schema, table, guard) {\n    if (guard === void 0) {\n      guard = {};\n    }\n\n    var ret = Object.create(null);\n    var keys = Object.keys(schema);\n    ret._rowCount = table._rowCount;\n    ret._columns = keys;\n    ret._schema = schema;\n\n    for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n      var k = keys_1[_a];\n      if (!!table[k]) ret[k] = table[k];else if (!!guard[k]) ret[k] = guard[k];else throw Error(\"Cannot find column '\" + k + \"'.\");\n    }\n\n    return ret;\n  }\n\n  Table.pickColumns = pickColumns;\n\n  function ofColumns(schema, columns) {\n    var _columns = Object.keys(columns);\n\n    var _rowCount = columns[_columns[0]].rowCount;\n    return __assign({\n      _rowCount: _rowCount,\n      _columns: _columns,\n      _schema: schema\n    }, columns);\n  }\n\n  Table.ofColumns = ofColumns;\n\n  function ofPartialColumns(schema, partialColumns, rowCount) {\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = rowCount;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    for (var _a = 0, columns_1 = columns; _a < columns_1.length; _a++) {\n      var k = columns_1[_a];\n      if (k in partialColumns) ret[k] = partialColumns[k];else ret[k] = Column.Undefined(rowCount, schema[k]);\n    }\n\n    return ret;\n  }\n\n  Table.ofPartialColumns = ofPartialColumns;\n\n  function ofUndefinedColumns(schema, rowCount) {\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = rowCount;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    for (var _a = 0, columns_2 = columns; _a < columns_2.length; _a++) {\n      var k = columns_2[_a];\n      ret[k] = Column.Undefined(rowCount, schema[k]);\n    }\n\n    return ret;\n  }\n\n  Table.ofUndefinedColumns = ofUndefinedColumns;\n\n  function ofRows(schema, rows) {\n    var ret = Object.create(null);\n    var rowCount = rows.length;\n    var columns = Object.keys(schema);\n    ret._rowCount = rowCount;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    var _loop_1 = function (k) {\n      ret[k] = Column.ofLambda({\n        rowCount: rowCount,\n        schema: schema[k],\n        value: function (r) {\n          return rows[r][k];\n        },\n        valueKind: function (r) {\n          return typeof rows[r][k] === 'undefined' ? 1\n          /* NotPresent */\n          : 0\n          /* Present */\n          ;\n        }\n      });\n    };\n\n    for (var _a = 0, columns_3 = columns; _a < columns_3.length; _a++) {\n      var k = columns_3[_a];\n\n      _loop_1(k);\n    }\n\n    return ret;\n  }\n\n  Table.ofRows = ofRows;\n\n  function ofArrays(schema, arrays) {\n    var _a;\n\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = 0;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    for (var _b = 0, columns_4 = columns; _b < columns_4.length; _b++) {\n      var k = columns_4[_b];\n\n      if (typeof arrays[k] !== 'undefined') {\n        ret[k] = Column.ofArray({\n          array: arrays[k],\n          schema: schema[k]\n        });\n        ret._rowCount = (_a = arrays[k]) === null || _a === void 0 ? void 0 : _a.length;\n      } else {\n        ret[k] = Column.Undefined(ret._rowCount, schema[k]);\n      }\n    }\n\n    return ret;\n  }\n\n  Table.ofArrays = ofArrays;\n\n  function view(table, schema, view) {\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = view.length;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    for (var _a = 0, columns_5 = columns; _a < columns_5.length; _a++) {\n      var k = columns_5[_a];\n      ret[k] = Column.view(table[k], view);\n    }\n\n    return ret;\n  }\n\n  Table.view = view;\n\n  function pick(table, schema, test) {\n    var _view = [];\n\n    for (var i = 0, il = table._rowCount; i < il; ++i) {\n      if (test(i)) _view.push(i);\n    }\n\n    return view(table, schema, _view);\n  }\n\n  Table.pick = pick;\n\n  function window(table, schema, start, end) {\n    if (start === 0 && end === table._rowCount) return table;\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = end - start;\n    ret._columns = columns;\n    ret._schema = schema;\n\n    for (var _a = 0, columns_6 = columns; _a < columns_6.length; _a++) {\n      var k = columns_6[_a];\n      ret[k] = Column.window(table[k], start, end);\n    }\n\n    return ret;\n  }\n\n  Table.window = window;\n\n  function concat(tables, schema) {\n    var ret = Object.create(null);\n    var columns = Object.keys(schema);\n    ret._rowCount = 0;\n\n    for (var _a = 0, tables_1 = tables; _a < tables_1.length; _a++) {\n      var table = tables_1[_a];\n      ret._rowCount += table._rowCount;\n    }\n\n    var arrays = {};\n\n    for (var _b = 0, columns_7 = columns; _b < columns_7.length; _b++) {\n      var column = columns_7[_b];\n      arrays[column] = new Array(ret._rowCount);\n    }\n\n    ret._columns = columns;\n    ret._schema = schema;\n    var offset = 0;\n\n    for (var _c = 0, tables_2 = tables; _c < tables_2.length; _c++) {\n      var table = tables_2[_c];\n\n      for (var _d = 0, columns_8 = columns; _d < columns_8.length; _d++) {\n        var k = columns_8[_d];\n        Column.copyToArray(table[k], arrays[k], offset);\n      }\n\n      offset += table._rowCount;\n    }\n\n    for (var _e = 0, columns_9 = columns; _e < columns_9.length; _e++) {\n      var k = columns_9[_e];\n      ret[k] = Column.ofArray({\n        array: arrays[k],\n        schema: schema[k]\n      });\n    }\n\n    return ret;\n  }\n\n  Table.concat = concat;\n\n  function columnToArray(table, name, array) {\n    table[name] = Column.asArrayColumn(table[name], array);\n  }\n\n  Table.columnToArray = columnToArray;\n  /** Sort and return a new table */\n\n  function sort(table, cmp) {\n    var indices = new Int32Array(table._rowCount);\n\n    for (var i = 0, _i = indices.length; i < _i; i++) indices[i] = i;\n\n    sortArray(indices, function (_, i, j) {\n      return cmp(i, j);\n    });\n    var isIdentity = true;\n\n    for (var i = 0, _i = indices.length; i < _i; i++) {\n      if (indices[i] !== i) {\n        isIdentity = false;\n        break;\n      }\n    }\n\n    if (isIdentity) return table;\n    var ret = Object.create(null);\n    ret._rowCount = table._rowCount;\n    ret._columns = table._columns;\n    ret._schema = table._schema;\n\n    for (var _a = 0, _b = table._columns; _a < _b.length; _a++) {\n      var c = _b[_a];\n      ret[c] = Column.view(table[c], indices, false);\n    }\n\n    return ret;\n  }\n\n  Table.sort = sort;\n\n  function areEqual(a, b) {\n    if (a._rowCount !== b._rowCount) return false;\n    if (a._columns.length !== b._columns.length) return false;\n\n    for (var _a = 0, _b = a._columns; _a < _b.length; _a++) {\n      var c = _b[_a];\n      if (!b[c]) return false;\n    }\n\n    for (var _c = 0, _d = a._columns; _c < _d.length; _c++) {\n      var c = _d[_c];\n      if (!Column.areEqual(a[c], b[c])) return false;\n    }\n\n    return true;\n  }\n\n  Table.areEqual = areEqual;\n  /** Allocate a new object with the given row values. */\n\n  function getRow(table, index) {\n    var row = Object.create(null);\n    var cols = table._columns;\n\n    for (var i = 0; i < cols.length; i++) {\n      var c = cols[i];\n      row[c] = table[c].value(index);\n    }\n\n    return row;\n  }\n\n  Table.getRow = getRow;\n  /** Pick the first row for which `test` evaluates to true */\n\n  function pickRow(table, test) {\n    for (var i = 0, il = table._rowCount; i < il; ++i) {\n      if (test(i)) return getRow(table, i);\n    }\n  }\n\n  Table.pickRow = pickRow;\n\n  function getRows(table) {\n    var ret = [];\n    var c = table._rowCount;\n\n    for (var i = 0; i < c; i++) {\n      ret[i] = getRow(table, i);\n    }\n\n    return ret;\n  }\n\n  Table.getRows = getRows;\n\n  function toArrays(table) {\n    var arrays = {};\n    var _columns = table._columns;\n\n    for (var i = 0; i < _columns.length; i++) {\n      var c = _columns[i];\n      arrays[c] = table[c].toArray();\n    }\n\n    return arrays;\n  }\n\n  Table.toArrays = toArrays;\n\n  function formatToString(table) {\n    var sb = StringBuilder.create();\n    var cols = table._columns,\n        _rowCount = table._rowCount;\n    var headerLength = 1;\n    StringBuilder.write(sb, '|');\n\n    for (var i = 0; i < cols.length; i++) {\n      StringBuilder.write(sb, cols[i]);\n      StringBuilder.write(sb, '|');\n      headerLength += cols[i].length + 1;\n    }\n\n    StringBuilder.newline(sb);\n    StringBuilder.write(sb, new Array(headerLength + 1).join('-'));\n    StringBuilder.newline(sb);\n\n    for (var r = 0; r < _rowCount; r++) {\n      StringBuilder.write(sb, '|');\n\n      for (var i = 0; i < cols.length; i++) {\n        var c = table[cols[i]];\n\n        if (c.valueKind(r) === 0\n        /* Present */\n        ) {\n          StringBuilder.write(sb, c.value(r));\n          StringBuilder.write(sb, '|');\n        } else {\n          StringBuilder.write(sb, '.|');\n        }\n      }\n\n      StringBuilder.newline(sb);\n    }\n\n    return StringBuilder.getString(sb);\n  }\n\n  Table.formatToString = formatToString;\n})(Table || (Table = {}));\n\nexport { Table };","map":{"version":3,"sources":["../../../src/mol-data/db/table.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Column } from './column';\r\nimport { sortArray } from '../util/sort';\r\nimport { StringBuilder } from '../../mol-util';\r\n/** An immutable table */\r\nvar Table;\r\n(function (Table) {\r\n    function is(t) {\r\n        return t && typeof t._rowCount === 'number' && !!t._columns && !!t._schema;\r\n    }\r\n    Table.is = is;\r\n    function pickColumns(schema, table, guard) {\r\n        if (guard === void 0) { guard = {}; }\r\n        var ret = Object.create(null);\r\n        var keys = Object.keys(schema);\r\n        ret._rowCount = table._rowCount;\r\n        ret._columns = keys;\r\n        ret._schema = schema;\r\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\r\n            var k = keys_1[_a];\r\n            if (!!table[k])\r\n                ret[k] = table[k];\r\n            else if (!!guard[k])\r\n                ret[k] = guard[k];\r\n            else\r\n                throw Error(\"Cannot find column '\" + k + \"'.\");\r\n        }\r\n        return ret;\r\n    }\r\n    Table.pickColumns = pickColumns;\r\n    function ofColumns(schema, columns) {\r\n        var _columns = Object.keys(columns);\r\n        var _rowCount = columns[_columns[0]].rowCount;\r\n        return __assign({ _rowCount: _rowCount, _columns: _columns, _schema: schema }, columns);\r\n    }\r\n    Table.ofColumns = ofColumns;\r\n    function ofPartialColumns(schema, partialColumns, rowCount) {\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = rowCount;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        for (var _a = 0, columns_1 = columns; _a < columns_1.length; _a++) {\r\n            var k = columns_1[_a];\r\n            if (k in partialColumns)\r\n                ret[k] = partialColumns[k];\r\n            else\r\n                ret[k] = Column.Undefined(rowCount, schema[k]);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.ofPartialColumns = ofPartialColumns;\r\n    function ofUndefinedColumns(schema, rowCount) {\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = rowCount;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        for (var _a = 0, columns_2 = columns; _a < columns_2.length; _a++) {\r\n            var k = columns_2[_a];\r\n            ret[k] = Column.Undefined(rowCount, schema[k]);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.ofUndefinedColumns = ofUndefinedColumns;\r\n    function ofRows(schema, rows) {\r\n        var ret = Object.create(null);\r\n        var rowCount = rows.length;\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = rowCount;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        var _loop_1 = function (k) {\r\n            ret[k] = Column.ofLambda({\r\n                rowCount: rowCount,\r\n                schema: schema[k],\r\n                value: function (r) { return rows[r][k]; },\r\n                valueKind: function (r) { return typeof rows[r][k] === 'undefined' ? 1 /* NotPresent */ : 0 /* Present */; }\r\n            });\r\n        };\r\n        for (var _a = 0, columns_3 = columns; _a < columns_3.length; _a++) {\r\n            var k = columns_3[_a];\r\n            _loop_1(k);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.ofRows = ofRows;\r\n    function ofArrays(schema, arrays) {\r\n        var _a;\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = 0;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        for (var _b = 0, columns_4 = columns; _b < columns_4.length; _b++) {\r\n            var k = columns_4[_b];\r\n            if (typeof arrays[k] !== 'undefined') {\r\n                ret[k] = Column.ofArray({ array: arrays[k], schema: schema[k] });\r\n                ret._rowCount = (_a = arrays[k]) === null || _a === void 0 ? void 0 : _a.length;\r\n            }\r\n            else {\r\n                ret[k] = Column.Undefined(ret._rowCount, schema[k]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    Table.ofArrays = ofArrays;\r\n    function view(table, schema, view) {\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = view.length;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        for (var _a = 0, columns_5 = columns; _a < columns_5.length; _a++) {\r\n            var k = columns_5[_a];\r\n            ret[k] = Column.view(table[k], view);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.view = view;\r\n    function pick(table, schema, test) {\r\n        var _view = [];\r\n        for (var i = 0, il = table._rowCount; i < il; ++i) {\r\n            if (test(i))\r\n                _view.push(i);\r\n        }\r\n        return view(table, schema, _view);\r\n    }\r\n    Table.pick = pick;\r\n    function window(table, schema, start, end) {\r\n        if (start === 0 && end === table._rowCount)\r\n            return table;\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = end - start;\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        for (var _a = 0, columns_6 = columns; _a < columns_6.length; _a++) {\r\n            var k = columns_6[_a];\r\n            ret[k] = Column.window(table[k], start, end);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.window = window;\r\n    function concat(tables, schema) {\r\n        var ret = Object.create(null);\r\n        var columns = Object.keys(schema);\r\n        ret._rowCount = 0;\r\n        for (var _a = 0, tables_1 = tables; _a < tables_1.length; _a++) {\r\n            var table = tables_1[_a];\r\n            ret._rowCount += table._rowCount;\r\n        }\r\n        var arrays = {};\r\n        for (var _b = 0, columns_7 = columns; _b < columns_7.length; _b++) {\r\n            var column = columns_7[_b];\r\n            arrays[column] = new Array(ret._rowCount);\r\n        }\r\n        ret._columns = columns;\r\n        ret._schema = schema;\r\n        var offset = 0;\r\n        for (var _c = 0, tables_2 = tables; _c < tables_2.length; _c++) {\r\n            var table = tables_2[_c];\r\n            for (var _d = 0, columns_8 = columns; _d < columns_8.length; _d++) {\r\n                var k = columns_8[_d];\r\n                Column.copyToArray(table[k], arrays[k], offset);\r\n            }\r\n            offset += table._rowCount;\r\n        }\r\n        for (var _e = 0, columns_9 = columns; _e < columns_9.length; _e++) {\r\n            var k = columns_9[_e];\r\n            ret[k] = Column.ofArray({ array: arrays[k], schema: schema[k] });\r\n        }\r\n        return ret;\r\n    }\r\n    Table.concat = concat;\r\n    function columnToArray(table, name, array) {\r\n        table[name] = Column.asArrayColumn(table[name], array);\r\n    }\r\n    Table.columnToArray = columnToArray;\r\n    /** Sort and return a new table */\r\n    function sort(table, cmp) {\r\n        var indices = new Int32Array(table._rowCount);\r\n        for (var i = 0, _i = indices.length; i < _i; i++)\r\n            indices[i] = i;\r\n        sortArray(indices, function (_, i, j) { return cmp(i, j); });\r\n        var isIdentity = true;\r\n        for (var i = 0, _i = indices.length; i < _i; i++) {\r\n            if (indices[i] !== i) {\r\n                isIdentity = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isIdentity)\r\n            return table;\r\n        var ret = Object.create(null);\r\n        ret._rowCount = table._rowCount;\r\n        ret._columns = table._columns;\r\n        ret._schema = table._schema;\r\n        for (var _a = 0, _b = table._columns; _a < _b.length; _a++) {\r\n            var c = _b[_a];\r\n            ret[c] = Column.view(table[c], indices, false);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.sort = sort;\r\n    function areEqual(a, b) {\r\n        if (a._rowCount !== b._rowCount)\r\n            return false;\r\n        if (a._columns.length !== b._columns.length)\r\n            return false;\r\n        for (var _a = 0, _b = a._columns; _a < _b.length; _a++) {\r\n            var c = _b[_a];\r\n            if (!b[c])\r\n                return false;\r\n        }\r\n        for (var _c = 0, _d = a._columns; _c < _d.length; _c++) {\r\n            var c = _d[_c];\r\n            if (!Column.areEqual(a[c], b[c]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Table.areEqual = areEqual;\r\n    /** Allocate a new object with the given row values. */\r\n    function getRow(table, index) {\r\n        var row = Object.create(null);\r\n        var cols = table._columns;\r\n        for (var i = 0; i < cols.length; i++) {\r\n            var c = cols[i];\r\n            row[c] = table[c].value(index);\r\n        }\r\n        return row;\r\n    }\r\n    Table.getRow = getRow;\r\n    /** Pick the first row for which `test` evaluates to true */\r\n    function pickRow(table, test) {\r\n        for (var i = 0, il = table._rowCount; i < il; ++i) {\r\n            if (test(i))\r\n                return getRow(table, i);\r\n        }\r\n    }\r\n    Table.pickRow = pickRow;\r\n    function getRows(table) {\r\n        var ret = [];\r\n        var c = table._rowCount;\r\n        for (var i = 0; i < c; i++) {\r\n            ret[i] = getRow(table, i);\r\n        }\r\n        return ret;\r\n    }\r\n    Table.getRows = getRows;\r\n    function toArrays(table) {\r\n        var arrays = {};\r\n        var _columns = table._columns;\r\n        for (var i = 0; i < _columns.length; i++) {\r\n            var c = _columns[i];\r\n            arrays[c] = table[c].toArray();\r\n        }\r\n        return arrays;\r\n    }\r\n    Table.toArrays = toArrays;\r\n    function formatToString(table) {\r\n        var sb = StringBuilder.create();\r\n        var cols = table._columns, _rowCount = table._rowCount;\r\n        var headerLength = 1;\r\n        StringBuilder.write(sb, '|');\r\n        for (var i = 0; i < cols.length; i++) {\r\n            StringBuilder.write(sb, cols[i]);\r\n            StringBuilder.write(sb, '|');\r\n            headerLength += cols[i].length + 1;\r\n        }\r\n        StringBuilder.newline(sb);\r\n        StringBuilder.write(sb, new Array(headerLength + 1).join('-'));\r\n        StringBuilder.newline(sb);\r\n        for (var r = 0; r < _rowCount; r++) {\r\n            StringBuilder.write(sb, '|');\r\n            for (var i = 0; i < cols.length; i++) {\r\n                var c = table[cols[i]];\r\n                if (c.valueKind(r) === 0 /* Present */) {\r\n                    StringBuilder.write(sb, c.value(r));\r\n                    StringBuilder.write(sb, '|');\r\n                }\r\n                else {\r\n                    StringBuilder.write(sb, '.|');\r\n                }\r\n            }\r\n            StringBuilder.newline(sb);\r\n        }\r\n        return StringBuilder.getString(sb);\r\n    }\r\n    Table.formatToString = formatToString;\r\n})(Table || (Table = {}));\r\nexport { Table };\r\n//# sourceMappingURL=table.js.map"]},"metadata":{},"sourceType":"module"}