{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { StateTransforms } from '../transforms';\nimport { DataFormatProvider, guessCifVariant } from './provider';\nimport { VolumeRepresentation3DHelpers } from '../transforms/representation';\nimport { ColorNames } from '../../mol-util/color/names';\nimport { Volume } from '../../mol-model/volume';\nimport { createVolumeRepresentationParams } from '../helpers/volume-representation-params';\nimport { objectForEach } from '../../mol-util/object';\nimport { RecommendedIsoValue } from '../../mol-model-formats/volume/property';\nimport { getContourLevelEmdb } from '../../mol-plugin/behavior/dynamic/volume-streaming/util';\nimport { Task } from '../../mol-task';\nimport { DscifFormat } from '../../mol-model-formats/volume/density-server';\nexport var VolumeFormatCategory = 'Volume';\n\nfunction tryObtainRecommendedIsoValue(plugin, volume) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entryId;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      if (!volume) return [2\n      /*return*/\n      ];\n      entryId = volume.entryId;\n      if (!entryId || !entryId.toLowerCase().startsWith('emd')) return [2\n      /*return*/\n      ];\n      return [2\n      /*return*/\n      , plugin.runTask(Task.create('Try Set Recommended IsoValue', function (ctx) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var absIsoLevel, e_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , getContourLevelEmdb(plugin, ctx, entryId)];\n\n              case 1:\n                absIsoLevel = _a.sent();\n                RecommendedIsoValue.Provider.set(volume, Volume.IsoValue.absolute(absIsoLevel));\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                e_1 = _a.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }))];\n    });\n  });\n}\n\nfunction tryGetRecomendedIsoValue(volume) {\n  var recommendedIsoValue = RecommendedIsoValue.Provider.get(volume);\n  if (!recommendedIsoValue) return;\n  if (recommendedIsoValue.kind === 'relative') return recommendedIsoValue;\n  var stats = volume.grid.stats;\n\n  if (DscifFormat.is(volume.sourceData)) {\n    stats = {\n      min: volume.sourceData.data.volume_data_3d_info.min_source.value(0),\n      max: volume.sourceData.data.volume_data_3d_info.max_source.value(0),\n      mean: volume.sourceData.data.volume_data_3d_info.mean_source.value(0),\n      sigma: volume.sourceData.data.volume_data_3d_info.sigma_source.value(0)\n    };\n  }\n\n  return Volume.IsoValue.toRelative(recommendedIsoValue, stats);\n}\n\nfunction defaultVisuals(plugin, data) {\n  return __awaiter(this, void 0, void 0, function () {\n    var typeParams, isoValue, visual;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          typeParams = {};\n          isoValue = data.volume.data && tryGetRecomendedIsoValue(data.volume.data);\n          if (isoValue) typeParams.isoValue = isoValue;\n          visual = plugin.build().to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, data.volume.data, {\n            type: 'isosurface',\n            typeParams: typeParams\n          }));\n          return [4\n          /*yield*/\n          , visual.commit()];\n\n        case 1:\n          return [2\n          /*return*/\n          , [_a.sent()]];\n      }\n    });\n  });\n}\n\nexport var Ccp4Provider = DataFormatProvider({\n  label: 'CCP4/MRC/MAP',\n  description: 'CCP4/MRC/MAP',\n  category: VolumeFormatCategory,\n  binaryExtensions: ['ccp4', 'mrc', 'map'],\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, volume;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.build().to(data).apply(StateTransforms.Data.ParseCcp4, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            volume = format.apply(StateTransforms.Volume.VolumeFromCcp4, {\n              entryId: params === null || params === void 0 ? void 0 : params.entryId\n            });\n            return [4\n            /*yield*/\n            , format.commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              format: format.selector,\n              volume: volume.selector\n            }];\n        }\n      });\n    });\n  },\n  visuals: defaultVisuals\n});\nexport var Dsn6Provider = DataFormatProvider({\n  label: 'DSN6/BRIX',\n  description: 'DSN6/BRIX',\n  category: VolumeFormatCategory,\n  binaryExtensions: ['dsn6', 'brix'],\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, volume;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.build().to(data).apply(StateTransforms.Data.ParseDsn6, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            volume = format.apply(StateTransforms.Volume.VolumeFromDsn6, {\n              entryId: params === null || params === void 0 ? void 0 : params.entryId\n            });\n            return [4\n            /*yield*/\n            , format.commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              format: format.selector,\n              volume: volume.selector\n            }];\n        }\n      });\n    });\n  },\n  visuals: defaultVisuals\n});\nexport var DxProvider = DataFormatProvider({\n  label: 'DX',\n  description: 'DX',\n  category: VolumeFormatCategory,\n  stringExtensions: ['dx'],\n  binaryExtensions: ['dxbin'],\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, volume;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.build().to(data).apply(StateTransforms.Data.ParseDx, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            volume = format.apply(StateTransforms.Volume.VolumeFromDx, {\n              entryId: params === null || params === void 0 ? void 0 : params.entryId\n            });\n            return [4\n            /*yield*/\n            , volume.commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              volume: volume.selector\n            }];\n        }\n      });\n    });\n  },\n  visuals: defaultVisuals\n});\nexport var CubeProvider = DataFormatProvider({\n  label: 'Cube',\n  description: 'Cube',\n  category: VolumeFormatCategory,\n  stringExtensions: ['cub', 'cube'],\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, volume, structure;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.build().to(data).apply(StateTransforms.Data.ParseCube, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            volume = format.apply(StateTransforms.Volume.VolumeFromCube, {\n              entryId: params === null || params === void 0 ? void 0 : params.entryId\n            });\n            structure = format.apply(StateTransforms.Model.TrajectoryFromCube, void 0, {\n              state: {\n                isGhost: true\n              }\n            }).apply(StateTransforms.Model.ModelFromTrajectory).apply(StateTransforms.Model.StructureFromModel);\n            return [4\n            /*yield*/\n            , format.commit({\n              revertOnError: true\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              format: format.selector,\n              volume: volume.selector,\n              structure: structure.selector\n            }];\n        }\n      });\n    });\n  },\n  visuals: function (plugin, data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var surfaces, volumeReprs, volumeData, volumePos, volumeNeg, volume, structure, structureReprs;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            surfaces = plugin.build();\n            volumeReprs = [];\n            volumeData = (_b = (_a = data.volume.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\n\n            if (volumeData && Volume.isOrbitals(volumeData)) {\n              volumePos = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\n                type: 'isosurface',\n                typeParams: {\n                  isoValue: Volume.IsoValue.relative(1),\n                  alpha: 0.4\n                },\n                color: 'uniform',\n                colorParams: {\n                  value: ColorNames.blue\n                }\n              }));\n              volumeNeg = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\n                type: 'isosurface',\n                typeParams: {\n                  isoValue: Volume.IsoValue.relative(-1),\n                  alpha: 0.4\n                },\n                color: 'uniform',\n                colorParams: {\n                  value: ColorNames.red\n                }\n              }));\n              volumeReprs.push(volumePos.selector, volumeNeg.selector);\n            } else {\n              volume = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\n                type: 'isosurface',\n                typeParams: {\n                  isoValue: Volume.IsoValue.relative(2),\n                  alpha: 0.4\n                },\n                color: 'uniform',\n                colorParams: {\n                  value: ColorNames.grey\n                }\n              }));\n              volumeReprs.push(volume.selector);\n            }\n\n            return [4\n            /*yield*/\n            , plugin.builders.structure.representation.applyPreset(data.structure, 'auto')];\n\n          case 1:\n            structure = _c.sent();\n            return [4\n            /*yield*/\n            , surfaces.commit()];\n\n          case 2:\n            _c.sent();\n\n            structureReprs = [];\n            objectForEach(structure === null || structure === void 0 ? void 0 : structure.representations, function (r) {\n              if (r) structureReprs.push(r);\n            });\n            return [2\n            /*return*/\n            , __spreadArray(__spreadArray([], volumeReprs, true), structureReprs, true)];\n        }\n      });\n    });\n  }\n});\nexport var DscifProvider = DataFormatProvider({\n  label: 'DensityServer CIF',\n  description: 'DensityServer CIF',\n  category: VolumeFormatCategory,\n  stringExtensions: ['cif'],\n  binaryExtensions: ['bcif'],\n  isApplicable: function (info, data) {\n    return guessCifVariant(info, data) === 'dscif' ? true : false;\n  },\n  parse: function (plugin, data, params) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var cifCell, b, blocks, volumes, i, _i, blocks_1, block, entryId, _a, volumes_1, v;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit()];\n\n          case 1:\n            cifCell = _b.sent();\n            b = plugin.build().to(cifCell);\n            blocks = cifCell.obj.data.blocks.slice(1);\n            if (blocks.length !== 1 && blocks.length !== 2) throw new Error('unknown number of blocks');\n            volumes = [];\n            i = 0;\n\n            for (_i = 0, blocks_1 = blocks; _i < blocks_1.length; _i++) {\n              block = blocks_1[_i];\n              entryId = Array.isArray(params === null || params === void 0 ? void 0 : params.entryId) ? params === null || params === void 0 ? void 0 : params.entryId[i] : params === null || params === void 0 ? void 0 : params.entryId;\n              volumes.push(b.apply(StateTransforms.Volume.VolumeFromDensityServerCif, {\n                blockHeader: block.header,\n                entryId: entryId\n              }).selector);\n              i++;\n            }\n\n            return [4\n            /*yield*/\n            , b.commit()];\n\n          case 2:\n            _b.sent();\n\n            _a = 0, volumes_1 = volumes;\n            _b.label = 3;\n\n          case 3:\n            if (!(_a < volumes_1.length)) return [3\n            /*break*/\n            , 6];\n            v = volumes_1[_a];\n            return [4\n            /*yield*/\n            , tryObtainRecommendedIsoValue(plugin, v.data)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            _a++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [2\n            /*return*/\n            , {\n              volumes: volumes\n            }];\n        }\n      });\n    });\n  },\n  visuals: function (plugin, data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var volumes, tree, visuals, isoValue, posParams, negParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            volumes = data.volumes;\n            tree = plugin.build();\n            visuals = [];\n\n            if (volumes.length > 0) {\n              isoValue = volumes[0].data && tryGetRecomendedIsoValue(volumes[0].data) || Volume.IsoValue.relative(1.5);\n              visuals[0] = tree.to(volumes[0]).apply(StateTransforms.Representation.VolumeRepresentation3D, VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', {\n                isoValue: isoValue,\n                alpha: 1\n              }, 'uniform', {\n                value: ColorNames.teal\n              })).selector;\n            }\n\n            if (volumes.length > 1) {\n              posParams = VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', {\n                isoValue: Volume.IsoValue.relative(3),\n                alpha: 0.3\n              }, 'uniform', {\n                value: ColorNames.green\n              });\n              negParams = VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', {\n                isoValue: Volume.IsoValue.relative(-3),\n                alpha: 0.3\n              }, 'uniform', {\n                value: ColorNames.red\n              });\n              visuals[visuals.length] = tree.to(volumes[1]).apply(StateTransforms.Representation.VolumeRepresentation3D, posParams).selector;\n              visuals[visuals.length] = tree.to(volumes[1]).apply(StateTransforms.Representation.VolumeRepresentation3D, negParams).selector;\n            }\n\n            return [4\n            /*yield*/\n            , tree.commit()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , visuals];\n        }\n      });\n    });\n  }\n});\nexport var BuiltInVolumeFormats = [['ccp4', Ccp4Provider], ['dsn6', Dsn6Provider], ['cube', CubeProvider], ['dx', DxProvider], ['dscif', DscifProvider]];","map":{"version":3,"sources":["../../../src/mol-plugin-state/formats/volume.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\r\nimport { StateTransforms } from '../transforms';\r\nimport { DataFormatProvider, guessCifVariant } from './provider';\r\nimport { VolumeRepresentation3DHelpers } from '../transforms/representation';\r\nimport { ColorNames } from '../../mol-util/color/names';\r\nimport { Volume } from '../../mol-model/volume';\r\nimport { createVolumeRepresentationParams } from '../helpers/volume-representation-params';\r\nimport { objectForEach } from '../../mol-util/object';\r\nimport { RecommendedIsoValue } from '../../mol-model-formats/volume/property';\r\nimport { getContourLevelEmdb } from '../../mol-plugin/behavior/dynamic/volume-streaming/util';\r\nimport { Task } from '../../mol-task';\r\nimport { DscifFormat } from '../../mol-model-formats/volume/density-server';\r\nexport var VolumeFormatCategory = 'Volume';\r\nfunction tryObtainRecommendedIsoValue(plugin, volume) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var entryId;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            if (!volume)\r\n                return [2 /*return*/];\r\n            entryId = volume.entryId;\r\n            if (!entryId || !entryId.toLowerCase().startsWith('emd'))\r\n                return [2 /*return*/];\r\n            return [2 /*return*/, plugin.runTask(Task.create('Try Set Recommended IsoValue', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n                    var absIsoLevel, e_1;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                _a.trys.push([0, 2, , 3]);\r\n                                return [4 /*yield*/, getContourLevelEmdb(plugin, ctx, entryId)];\r\n                            case 1:\r\n                                absIsoLevel = _a.sent();\r\n                                RecommendedIsoValue.Provider.set(volume, Volume.IsoValue.absolute(absIsoLevel));\r\n                                return [3 /*break*/, 3];\r\n                            case 2:\r\n                                e_1 = _a.sent();\r\n                                return [3 /*break*/, 3];\r\n                            case 3: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                }); }))];\r\n        });\r\n    });\r\n}\r\nfunction tryGetRecomendedIsoValue(volume) {\r\n    var recommendedIsoValue = RecommendedIsoValue.Provider.get(volume);\r\n    if (!recommendedIsoValue)\r\n        return;\r\n    if (recommendedIsoValue.kind === 'relative')\r\n        return recommendedIsoValue;\r\n    var stats = volume.grid.stats;\r\n    if (DscifFormat.is(volume.sourceData)) {\r\n        stats = {\r\n            min: volume.sourceData.data.volume_data_3d_info.min_source.value(0),\r\n            max: volume.sourceData.data.volume_data_3d_info.max_source.value(0),\r\n            mean: volume.sourceData.data.volume_data_3d_info.mean_source.value(0),\r\n            sigma: volume.sourceData.data.volume_data_3d_info.sigma_source.value(0),\r\n        };\r\n    }\r\n    return Volume.IsoValue.toRelative(recommendedIsoValue, stats);\r\n}\r\nfunction defaultVisuals(plugin, data) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var typeParams, isoValue, visual;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    typeParams = {};\r\n                    isoValue = data.volume.data && tryGetRecomendedIsoValue(data.volume.data);\r\n                    if (isoValue)\r\n                        typeParams.isoValue = isoValue;\r\n                    visual = plugin.build().to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, data.volume.data, {\r\n                        type: 'isosurface',\r\n                        typeParams: typeParams,\r\n                    }));\r\n                    return [4 /*yield*/, visual.commit()];\r\n                case 1: return [2 /*return*/, [_a.sent()]];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport var Ccp4Provider = DataFormatProvider({\r\n    label: 'CCP4/MRC/MAP',\r\n    description: 'CCP4/MRC/MAP',\r\n    category: VolumeFormatCategory,\r\n    binaryExtensions: ['ccp4', 'mrc', 'map'],\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, volume;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParseCcp4, {}, { state: { isGhost: true } });\r\n                    volume = format.apply(StateTransforms.Volume.VolumeFromCcp4, { entryId: params === null || params === void 0 ? void 0 : params.entryId });\r\n                    return [4 /*yield*/, format.commit({ revertOnError: true })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { format: format.selector, volume: volume.selector }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: defaultVisuals\r\n});\r\nexport var Dsn6Provider = DataFormatProvider({\r\n    label: 'DSN6/BRIX',\r\n    description: 'DSN6/BRIX',\r\n    category: VolumeFormatCategory,\r\n    binaryExtensions: ['dsn6', 'brix'],\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, volume;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParseDsn6, {}, { state: { isGhost: true } });\r\n                    volume = format.apply(StateTransforms.Volume.VolumeFromDsn6, { entryId: params === null || params === void 0 ? void 0 : params.entryId });\r\n                    return [4 /*yield*/, format.commit({ revertOnError: true })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { format: format.selector, volume: volume.selector }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: defaultVisuals\r\n});\r\nexport var DxProvider = DataFormatProvider({\r\n    label: 'DX',\r\n    description: 'DX',\r\n    category: VolumeFormatCategory,\r\n    stringExtensions: ['dx'],\r\n    binaryExtensions: ['dxbin'],\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, volume;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParseDx, {}, { state: { isGhost: true } });\r\n                    volume = format.apply(StateTransforms.Volume.VolumeFromDx, { entryId: params === null || params === void 0 ? void 0 : params.entryId });\r\n                    return [4 /*yield*/, volume.commit({ revertOnError: true })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { volume: volume.selector }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: defaultVisuals\r\n});\r\nexport var CubeProvider = DataFormatProvider({\r\n    label: 'Cube',\r\n    description: 'Cube',\r\n    category: VolumeFormatCategory,\r\n    stringExtensions: ['cub', 'cube'],\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, volume, structure;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParseCube, {}, { state: { isGhost: true } });\r\n                    volume = format.apply(StateTransforms.Volume.VolumeFromCube, { entryId: params === null || params === void 0 ? void 0 : params.entryId });\r\n                    structure = format\r\n                        .apply(StateTransforms.Model.TrajectoryFromCube, void 0, { state: { isGhost: true } })\r\n                        .apply(StateTransforms.Model.ModelFromTrajectory)\r\n                        .apply(StateTransforms.Model.StructureFromModel);\r\n                    return [4 /*yield*/, format.commit({ revertOnError: true })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, tryObtainRecommendedIsoValue(plugin, volume.selector.data)];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { format: format.selector, volume: volume.selector, structure: structure.selector }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: function (plugin, data) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var surfaces, volumeReprs, volumeData, volumePos, volumeNeg, volume, structure, structureReprs;\r\n        var _a, _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    surfaces = plugin.build();\r\n                    volumeReprs = [];\r\n                    volumeData = (_b = (_a = data.volume.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\r\n                    if (volumeData && Volume.isOrbitals(volumeData)) {\r\n                        volumePos = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\r\n                            type: 'isosurface',\r\n                            typeParams: { isoValue: Volume.IsoValue.relative(1), alpha: 0.4 },\r\n                            color: 'uniform',\r\n                            colorParams: { value: ColorNames.blue }\r\n                        }));\r\n                        volumeNeg = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\r\n                            type: 'isosurface',\r\n                            typeParams: { isoValue: Volume.IsoValue.relative(-1), alpha: 0.4 },\r\n                            color: 'uniform',\r\n                            colorParams: { value: ColorNames.red }\r\n                        }));\r\n                        volumeReprs.push(volumePos.selector, volumeNeg.selector);\r\n                    }\r\n                    else {\r\n                        volume = surfaces.to(data.volume).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(plugin, volumeData, {\r\n                            type: 'isosurface',\r\n                            typeParams: { isoValue: Volume.IsoValue.relative(2), alpha: 0.4 },\r\n                            color: 'uniform',\r\n                            colorParams: { value: ColorNames.grey }\r\n                        }));\r\n                        volumeReprs.push(volume.selector);\r\n                    }\r\n                    return [4 /*yield*/, plugin.builders.structure.representation.applyPreset(data.structure, 'auto')];\r\n                case 1:\r\n                    structure = _c.sent();\r\n                    return [4 /*yield*/, surfaces.commit()];\r\n                case 2:\r\n                    _c.sent();\r\n                    structureReprs = [];\r\n                    objectForEach(structure === null || structure === void 0 ? void 0 : structure.representations, function (r) {\r\n                        if (r)\r\n                            structureReprs.push(r);\r\n                    });\r\n                    return [2 /*return*/, __spreadArray(__spreadArray([], volumeReprs, true), structureReprs, true)];\r\n            }\r\n        });\r\n    }); }\r\n});\r\nexport var DscifProvider = DataFormatProvider({\r\n    label: 'DensityServer CIF',\r\n    description: 'DensityServer CIF',\r\n    category: VolumeFormatCategory,\r\n    stringExtensions: ['cif'],\r\n    binaryExtensions: ['bcif'],\r\n    isApplicable: function (info, data) {\r\n        return guessCifVariant(info, data) === 'dscif' ? true : false;\r\n    },\r\n    parse: function (plugin, data, params) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var cifCell, b, blocks, volumes, i, _i, blocks_1, block, entryId, _a, volumes_1, v;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, plugin.build().to(data).apply(StateTransforms.Data.ParseCif).commit()];\r\n                case 1:\r\n                    cifCell = _b.sent();\r\n                    b = plugin.build().to(cifCell);\r\n                    blocks = cifCell.obj.data.blocks.slice(1);\r\n                    if (blocks.length !== 1 && blocks.length !== 2)\r\n                        throw new Error('unknown number of blocks');\r\n                    volumes = [];\r\n                    i = 0;\r\n                    for (_i = 0, blocks_1 = blocks; _i < blocks_1.length; _i++) {\r\n                        block = blocks_1[_i];\r\n                        entryId = Array.isArray(params === null || params === void 0 ? void 0 : params.entryId) ? params === null || params === void 0 ? void 0 : params.entryId[i] : params === null || params === void 0 ? void 0 : params.entryId;\r\n                        volumes.push(b.apply(StateTransforms.Volume.VolumeFromDensityServerCif, { blockHeader: block.header, entryId: entryId }).selector);\r\n                        i++;\r\n                    }\r\n                    return [4 /*yield*/, b.commit()];\r\n                case 2:\r\n                    _b.sent();\r\n                    _a = 0, volumes_1 = volumes;\r\n                    _b.label = 3;\r\n                case 3:\r\n                    if (!(_a < volumes_1.length)) return [3 /*break*/, 6];\r\n                    v = volumes_1[_a];\r\n                    return [4 /*yield*/, tryObtainRecommendedIsoValue(plugin, v.data)];\r\n                case 4:\r\n                    _b.sent();\r\n                    _b.label = 5;\r\n                case 5:\r\n                    _a++;\r\n                    return [3 /*break*/, 3];\r\n                case 6: return [2 /*return*/, { volumes: volumes }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: function (plugin, data) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var volumes, tree, visuals, isoValue, posParams, negParams;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    volumes = data.volumes;\r\n                    tree = plugin.build();\r\n                    visuals = [];\r\n                    if (volumes.length > 0) {\r\n                        isoValue = (volumes[0].data && tryGetRecomendedIsoValue(volumes[0].data)) || Volume.IsoValue.relative(1.5);\r\n                        visuals[0] = tree\r\n                            .to(volumes[0])\r\n                            .apply(StateTransforms.Representation.VolumeRepresentation3D, VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', { isoValue: isoValue, alpha: 1 }, 'uniform', { value: ColorNames.teal }))\r\n                            .selector;\r\n                    }\r\n                    if (volumes.length > 1) {\r\n                        posParams = VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', { isoValue: Volume.IsoValue.relative(3), alpha: 0.3 }, 'uniform', { value: ColorNames.green });\r\n                        negParams = VolumeRepresentation3DHelpers.getDefaultParamsStatic(plugin, 'isosurface', { isoValue: Volume.IsoValue.relative(-3), alpha: 0.3 }, 'uniform', { value: ColorNames.red });\r\n                        visuals[visuals.length] = tree.to(volumes[1]).apply(StateTransforms.Representation.VolumeRepresentation3D, posParams).selector;\r\n                        visuals[visuals.length] = tree.to(volumes[1]).apply(StateTransforms.Representation.VolumeRepresentation3D, negParams).selector;\r\n                    }\r\n                    return [4 /*yield*/, tree.commit()];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/, visuals];\r\n            }\r\n        });\r\n    }); }\r\n});\r\nexport var BuiltInVolumeFormats = [\r\n    ['ccp4', Ccp4Provider],\r\n    ['dsn6', Dsn6Provider],\r\n    ['cube', CubeProvider],\r\n    ['dx', DxProvider],\r\n    ['dscif', DscifProvider],\r\n];\r\n//# sourceMappingURL=volume.js.map"]},"metadata":{},"sourceType":"module"}