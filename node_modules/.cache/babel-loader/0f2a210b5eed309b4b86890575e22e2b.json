{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ElementSphereVisual, ElementSphereParams } from '../visual/element-sphere';\nimport { UnitsRepresentation } from '../units-representation';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nvar SpacefillVisuals = {\n  'element-sphere': function (ctx, getParams) {\n    return UnitsRepresentation('Sphere mesh', ctx, getParams, ElementSphereVisual);\n  }\n};\nexport var SpacefillParams = __assign({}, ElementSphereParams);\nexport function getSpacefillParams(ctx, structure) {\n  var params = PD.clone(SpacefillParams);\n\n  if (structure.isCoarseGrained) {\n    params.sizeFactor.defaultValue = 2;\n  }\n\n  return params;\n}\nexport function SpacefillRepresentation(ctx, getParams) {\n  return Representation.createMulti('Spacefill', ctx, getParams, StructureRepresentationStateBuilder, SpacefillVisuals);\n}\nexport var SpacefillRepresentationProvider = StructureRepresentationProvider({\n  name: 'spacefill',\n  label: 'Spacefill',\n  description: 'Displays atomic/coarse elements as spheres.',\n  factory: SpacefillRepresentation,\n  getParams: getSpacefillParams,\n  defaultValues: PD.getDefaultValues(SpacefillParams),\n  defaultColorTheme: {\n    name: 'element-symbol'\n  },\n  defaultSizeTheme: {\n    name: 'physical'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/spacefill.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,mBAAT,EAA8B,mBAA9B,QAAyD,0BAAzD;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAkC,+BAAlC,EAAmE,mCAAnE,QAA8G,mBAA9G;AACA,SAA4D,cAA5D,QAAkF,kCAAlF;AAIA,IAAM,gBAAgB,GAAG;AACrB,oBAAkB,UAAC,GAAD,EAA6B,SAA7B,EAAkG;AAAK,WAAA,mBAAmB,CAAC,aAAD,EAAgB,GAAhB,EAAqB,SAArB,EAAnB,mBAAmB,CAAnB;AAAuE;AAD3K,CAAzB;AAIA,OAAO,IAAM,eAAe,GAAA,QAAA,CAAA,EAAA,EACrB,mBADqB,CAArB;AAIP,OAAM,SAAU,kBAAV,CAA6B,GAA7B,EAAwD,SAAxD,EAA4E;AAC9E,MAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAS,eAAT,CAAf;;AACA,MAAI,SAAS,CAAC,eAAd,EAA+B;AAC3B,IAAA,MAAM,CAAC,UAAP,CAAkB,YAAlB,GAAiC,CAAjC;AACH;;AACD,SAAO,MAAP;AACH;AAGD,OAAM,SAAU,uBAAV,CAAkC,GAAlC,EAA8D,SAA9D,EAA+H;AACjI,SAAO,cAAc,CAAC,WAAf,CAA2B,WAA3B,EAAwC,GAAxC,EAA6C,SAA7C,EAAwD,mCAAxD,EAA6F,gBAA7F,CAAP;AACH;AAED,OAAO,IAAM,+BAA+B,GAAG,+BAA+B,CAAC;AAC3E,EAAA,IAAI,EAAE,WADqE;AAE3E,EAAA,KAAK,EAAE,WAFoE;AAG3E,EAAA,WAAW,EAAE,6CAH8D;AAI3E,EAAA,OAAO,EAAE,uBAJkE;AAK3E,EAAA,SAAS,EAAE,kBALgE;AAM3E,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,eAApB,CAN4D;AAO3E,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAPwD;AAQ3E,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GARyD;AAS3E,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATS,CAAD,CAAvE","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ElementSphereVisual, ElementSphereParams } from '../visual/element-sphere';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nvar SpacefillVisuals = {\r\n    'element-sphere': function (ctx, getParams) { return UnitsRepresentation('Sphere mesh', ctx, getParams, ElementSphereVisual); },\r\n};\r\nexport var SpacefillParams = __assign({}, ElementSphereParams);\r\nexport function getSpacefillParams(ctx, structure) {\r\n    var params = PD.clone(SpacefillParams);\r\n    if (structure.isCoarseGrained) {\r\n        params.sizeFactor.defaultValue = 2;\r\n    }\r\n    return params;\r\n}\r\nexport function SpacefillRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Spacefill', ctx, getParams, StructureRepresentationStateBuilder, SpacefillVisuals);\r\n}\r\nexport var SpacefillRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'spacefill',\r\n    label: 'Spacefill',\r\n    description: 'Displays atomic/coarse elements as spheres.',\r\n    factory: SpacefillRepresentation,\r\n    getParams: getSpacefillParams,\r\n    defaultValues: PD.getDefaultValues(SpacefillParams),\r\n    defaultColorTheme: { name: 'element-symbol' },\r\n    defaultSizeTheme: { name: 'physical' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=spacefill.js.map"]},"metadata":{},"sourceType":"module"}