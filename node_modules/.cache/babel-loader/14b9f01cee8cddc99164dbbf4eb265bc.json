{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nexport function splitValues(schema, values) {\n  var attributeValues = {};\n  var defineValues = {};\n  var textureValues = {};\n  var uniformValues = {};\n  var materialUniformValues = {};\n  var bufferedUniformValues = {};\n  Object.keys(schema).forEach(function (k) {\n    var spec = schema[k];\n    if (spec.type === 'attribute') attributeValues[k] = values[k];\n    if (spec.type === 'define') defineValues[k] = values[k]; // check if k exists in values to exclude global textures\n\n    if (spec.type === 'texture' && values[k] !== undefined) textureValues[k] = values[k]; // check if k exists in values to exclude global uniforms\n\n    if (spec.type === 'uniform' && values[k] !== undefined) {\n      if (spec.variant === 'material') materialUniformValues[k] = values[k];else if (spec.variant === 'buffered') bufferedUniformValues[k] = values[k];else uniformValues[k] = values[k];\n    }\n  });\n  return {\n    attributeValues: attributeValues,\n    defineValues: defineValues,\n    textureValues: textureValues,\n    uniformValues: uniformValues,\n    materialUniformValues: materialUniformValues,\n    bufferedUniformValues: bufferedUniformValues\n  };\n}\nexport function getValueVersions(values) {\n  var versions = {};\n  Object.keys(values).forEach(function (k) {\n    versions[k] = values[k].ref.version;\n  });\n  return versions;\n}\nexport function AttributeSpec(kind, itemSize, divisor) {\n  return {\n    type: 'attribute',\n    kind: kind,\n    itemSize: itemSize,\n    divisor: divisor\n  };\n}\nexport function UniformSpec(kind, variant) {\n  return {\n    type: 'uniform',\n    kind: kind,\n    variant: variant\n  };\n}\nexport function TextureSpec(kind, format, dataType, filter) {\n  return {\n    type: 'texture',\n    kind: kind,\n    format: format,\n    dataType: dataType,\n    filter: filter\n  };\n}\nexport function ElementsSpec(kind) {\n  return {\n    type: 'elements',\n    kind: kind\n  };\n}\nexport function DefineSpec(kind, options) {\n  return {\n    type: 'define',\n    kind: kind,\n    options: options\n  };\n}\nexport function ValueSpec(kind) {\n  return {\n    type: 'value',\n    kind: kind\n  };\n} //\n\nexport var GlobalUniformSchema = {\n  uModel: UniformSpec('m4'),\n  uView: UniformSpec('m4'),\n  uInvView: UniformSpec('m4'),\n  uModelView: UniformSpec('m4'),\n  uInvModelView: UniformSpec('m4'),\n  uProjection: UniformSpec('m4'),\n  uInvProjection: UniformSpec('m4'),\n  uModelViewProjection: UniformSpec('m4'),\n  uInvModelViewProjection: UniformSpec('m4'),\n  uIsOrtho: UniformSpec('f'),\n  uPixelRatio: UniformSpec('f'),\n  uViewport: UniformSpec('v4'),\n  uViewOffset: UniformSpec('v2'),\n  uDrawingBufferSize: UniformSpec('v2'),\n  uCameraPosition: UniformSpec('v3'),\n  uCameraDir: UniformSpec('v3'),\n  uNear: UniformSpec('f'),\n  uFar: UniformSpec('f'),\n  uFogNear: UniformSpec('f'),\n  uFogFar: UniformSpec('f'),\n  uFogColor: UniformSpec('v3'),\n  uTransparentBackground: UniformSpec('b'),\n  uClipObjectType: UniformSpec('i[]'),\n  uClipObjectInvert: UniformSpec('b[]'),\n  uClipObjectPosition: UniformSpec('v3[]'),\n  uClipObjectRotation: UniformSpec('v4[]'),\n  uClipObjectScale: UniformSpec('v3[]'),\n  // all the following could in principle be per object\n  // as a kind of 'material' parameter set\n  // would need to test performance implications\n  uLightIntensity: UniformSpec('f'),\n  uAmbientIntensity: UniformSpec('f'),\n  uMetalness: UniformSpec('f'),\n  uRoughness: UniformSpec('f'),\n  uReflectivity: UniformSpec('f'),\n  uPickingAlphaThreshold: UniformSpec('f'),\n  uInteriorDarkening: UniformSpec('f'),\n  uInteriorColorFlag: UniformSpec('b'),\n  uInteriorColor: UniformSpec('v3'),\n  uHighlightColor: UniformSpec('v3'),\n  uSelectColor: UniformSpec('v3'),\n  uHighlightStrength: UniformSpec('f'),\n  uSelectStrength: UniformSpec('f'),\n  uMarkerPriority: UniformSpec('i'),\n  uXrayEdgeFalloff: UniformSpec('f'),\n  uRenderWboit: UniformSpec('b'),\n  uMarkingDepthTest: UniformSpec('b')\n};\nexport var GlobalTextureSchema = {\n  tDepth: TextureSpec('texture', 'depth', 'ushort', 'nearest')\n};\nexport var InternalSchema = {\n  uObjectId: UniformSpec('i')\n};\nexport var ColorSchema = {\n  // aColor: AttributeSpec('float32', 3, 0), // TODO\n  uColor: UniformSpec('v3', 'material'),\n  uColorTexDim: UniformSpec('v2'),\n  uColorGridDim: UniformSpec('v3'),\n  uColorGridTransform: UniformSpec('v4'),\n  tColor: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\n  tPalette: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\n  tColorGrid: TextureSpec('texture', 'rgb', 'ubyte', 'linear'),\n  dColorType: DefineSpec('string', ['uniform', 'attribute', 'instance', 'group', 'groupInstance', 'vertex', 'vertexInstance', 'volume', 'volumeInstance']),\n  dUsePalette: DefineSpec('boolean')\n};\nexport var SizeSchema = {\n  // aSize: AttributeSpec('float32', 1, 0), // TODO\n  uSize: UniformSpec('f', 'material'),\n  uSizeTexDim: UniformSpec('v2'),\n  tSize: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\n  dSizeType: DefineSpec('string', ['uniform', 'attribute', 'instance', 'group', 'groupInstance']),\n  uSizeFactor: UniformSpec('f')\n};\nexport var MarkerSchema = {\n  uMarker: UniformSpec('f'),\n  uMarkerTexDim: UniformSpec('v2'),\n  tMarker: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\n  dMarkerType: DefineSpec('string', ['uniform', 'groupInstance']),\n  markerAverage: ValueSpec('number'),\n  markerStatus: ValueSpec('number')\n};\nexport var OverpaintSchema = {\n  uOverpaintTexDim: UniformSpec('v2'),\n  tOverpaint: TextureSpec('image-uint8', 'rgba', 'ubyte', 'nearest'),\n  dOverpaint: DefineSpec('boolean')\n};\nexport var TransparencySchema = {\n  uTransparencyTexDim: UniformSpec('v2'),\n  tTransparency: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\n  dTransparency: DefineSpec('boolean'),\n  transparencyAverage: ValueSpec('number')\n};\nexport var ClippingSchema = {\n  dClipObjectCount: DefineSpec('number'),\n  dClipVariant: DefineSpec('string', ['instance', 'pixel']),\n  uClippingTexDim: UniformSpec('v2'),\n  tClipping: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\n  dClipping: DefineSpec('boolean')\n};\nexport var BaseSchema = __assign(__assign(__assign(__assign(__assign(__assign({}, ColorSchema), MarkerSchema), OverpaintSchema), TransparencySchema), ClippingSchema), {\n  aInstance: AttributeSpec('float32', 1, 1),\n\n  /**\r\n   * final per-instance transform calculated for instance `i` as\r\n   * `aTransform[i] = matrix * transform[i] * extraTransform[i]`\r\n   */\n  aTransform: AttributeSpec('float32', 16, 1),\n\n  /**\r\n   * final alpha, calculated as `values.alpha * state.alpha`\r\n   */\n  uAlpha: UniformSpec('f', 'material'),\n  uVertexCount: UniformSpec('i'),\n  uInstanceCount: UniformSpec('i'),\n  uGroupCount: UniformSpec('i'),\n  uInvariantBoundingSphere: UniformSpec('v4'),\n  drawCount: ValueSpec('number'),\n  instanceCount: ValueSpec('number'),\n\n  /** base alpha, see uAlpha  */\n  alpha: ValueSpec('number'),\n\n  /** global transform, see aTransform */\n  matrix: ValueSpec('m4'),\n\n  /** base per-instance transform, see aTransform */\n  transform: ValueSpec('float32'),\n\n  /** additional per-instance transform, see aTransform */\n  extraTransform: ValueSpec('float32'),\n\n  /** denotes reflection in transform */\n  hasReflection: ValueSpec('boolean'),\n\n  /** bounding sphere taking aTransform into account and encompases all instances */\n  boundingSphere: ValueSpec('sphere'),\n\n  /** bounding sphere NOT taking aTransform into account */\n  invariantBoundingSphere: ValueSpec('sphere')\n});","map":{"version":3,"sources":["../../../src/mol-gl/renderable/schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nexport function splitValues(schema, values) {\r\n    var attributeValues = {};\r\n    var defineValues = {};\r\n    var textureValues = {};\r\n    var uniformValues = {};\r\n    var materialUniformValues = {};\r\n    var bufferedUniformValues = {};\r\n    Object.keys(schema).forEach(function (k) {\r\n        var spec = schema[k];\r\n        if (spec.type === 'attribute')\r\n            attributeValues[k] = values[k];\r\n        if (spec.type === 'define')\r\n            defineValues[k] = values[k];\r\n        // check if k exists in values to exclude global textures\r\n        if (spec.type === 'texture' && values[k] !== undefined)\r\n            textureValues[k] = values[k];\r\n        // check if k exists in values to exclude global uniforms\r\n        if (spec.type === 'uniform' && values[k] !== undefined) {\r\n            if (spec.variant === 'material')\r\n                materialUniformValues[k] = values[k];\r\n            else if (spec.variant === 'buffered')\r\n                bufferedUniformValues[k] = values[k];\r\n            else\r\n                uniformValues[k] = values[k];\r\n        }\r\n    });\r\n    return { attributeValues: attributeValues, defineValues: defineValues, textureValues: textureValues, uniformValues: uniformValues, materialUniformValues: materialUniformValues, bufferedUniformValues: bufferedUniformValues };\r\n}\r\nexport function getValueVersions(values) {\r\n    var versions = {};\r\n    Object.keys(values).forEach(function (k) {\r\n        versions[k] = values[k].ref.version;\r\n    });\r\n    return versions;\r\n}\r\nexport function AttributeSpec(kind, itemSize, divisor) {\r\n    return { type: 'attribute', kind: kind, itemSize: itemSize, divisor: divisor };\r\n}\r\nexport function UniformSpec(kind, variant) {\r\n    return { type: 'uniform', kind: kind, variant: variant };\r\n}\r\nexport function TextureSpec(kind, format, dataType, filter) {\r\n    return { type: 'texture', kind: kind, format: format, dataType: dataType, filter: filter };\r\n}\r\nexport function ElementsSpec(kind) {\r\n    return { type: 'elements', kind: kind };\r\n}\r\nexport function DefineSpec(kind, options) {\r\n    return { type: 'define', kind: kind, options: options };\r\n}\r\nexport function ValueSpec(kind) {\r\n    return { type: 'value', kind: kind };\r\n}\r\n//\r\nexport var GlobalUniformSchema = {\r\n    uModel: UniformSpec('m4'),\r\n    uView: UniformSpec('m4'),\r\n    uInvView: UniformSpec('m4'),\r\n    uModelView: UniformSpec('m4'),\r\n    uInvModelView: UniformSpec('m4'),\r\n    uProjection: UniformSpec('m4'),\r\n    uInvProjection: UniformSpec('m4'),\r\n    uModelViewProjection: UniformSpec('m4'),\r\n    uInvModelViewProjection: UniformSpec('m4'),\r\n    uIsOrtho: UniformSpec('f'),\r\n    uPixelRatio: UniformSpec('f'),\r\n    uViewport: UniformSpec('v4'),\r\n    uViewOffset: UniformSpec('v2'),\r\n    uDrawingBufferSize: UniformSpec('v2'),\r\n    uCameraPosition: UniformSpec('v3'),\r\n    uCameraDir: UniformSpec('v3'),\r\n    uNear: UniformSpec('f'),\r\n    uFar: UniformSpec('f'),\r\n    uFogNear: UniformSpec('f'),\r\n    uFogFar: UniformSpec('f'),\r\n    uFogColor: UniformSpec('v3'),\r\n    uTransparentBackground: UniformSpec('b'),\r\n    uClipObjectType: UniformSpec('i[]'),\r\n    uClipObjectInvert: UniformSpec('b[]'),\r\n    uClipObjectPosition: UniformSpec('v3[]'),\r\n    uClipObjectRotation: UniformSpec('v4[]'),\r\n    uClipObjectScale: UniformSpec('v3[]'),\r\n    // all the following could in principle be per object\r\n    // as a kind of 'material' parameter set\r\n    // would need to test performance implications\r\n    uLightIntensity: UniformSpec('f'),\r\n    uAmbientIntensity: UniformSpec('f'),\r\n    uMetalness: UniformSpec('f'),\r\n    uRoughness: UniformSpec('f'),\r\n    uReflectivity: UniformSpec('f'),\r\n    uPickingAlphaThreshold: UniformSpec('f'),\r\n    uInteriorDarkening: UniformSpec('f'),\r\n    uInteriorColorFlag: UniformSpec('b'),\r\n    uInteriorColor: UniformSpec('v3'),\r\n    uHighlightColor: UniformSpec('v3'),\r\n    uSelectColor: UniformSpec('v3'),\r\n    uHighlightStrength: UniformSpec('f'),\r\n    uSelectStrength: UniformSpec('f'),\r\n    uMarkerPriority: UniformSpec('i'),\r\n    uXrayEdgeFalloff: UniformSpec('f'),\r\n    uRenderWboit: UniformSpec('b'),\r\n    uMarkingDepthTest: UniformSpec('b'),\r\n};\r\nexport var GlobalTextureSchema = {\r\n    tDepth: TextureSpec('texture', 'depth', 'ushort', 'nearest'),\r\n};\r\nexport var InternalSchema = {\r\n    uObjectId: UniformSpec('i'),\r\n};\r\nexport var ColorSchema = {\r\n    // aColor: AttributeSpec('float32', 3, 0), // TODO\r\n    uColor: UniformSpec('v3', 'material'),\r\n    uColorTexDim: UniformSpec('v2'),\r\n    uColorGridDim: UniformSpec('v3'),\r\n    uColorGridTransform: UniformSpec('v4'),\r\n    tColor: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\r\n    tPalette: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\r\n    tColorGrid: TextureSpec('texture', 'rgb', 'ubyte', 'linear'),\r\n    dColorType: DefineSpec('string', ['uniform', 'attribute', 'instance', 'group', 'groupInstance', 'vertex', 'vertexInstance', 'volume', 'volumeInstance']),\r\n    dUsePalette: DefineSpec('boolean'),\r\n};\r\nexport var SizeSchema = {\r\n    // aSize: AttributeSpec('float32', 1, 0), // TODO\r\n    uSize: UniformSpec('f', 'material'),\r\n    uSizeTexDim: UniformSpec('v2'),\r\n    tSize: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\r\n    dSizeType: DefineSpec('string', ['uniform', 'attribute', 'instance', 'group', 'groupInstance']),\r\n    uSizeFactor: UniformSpec('f'),\r\n};\r\nexport var MarkerSchema = {\r\n    uMarker: UniformSpec('f'),\r\n    uMarkerTexDim: UniformSpec('v2'),\r\n    tMarker: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\r\n    dMarkerType: DefineSpec('string', ['uniform', 'groupInstance']),\r\n    markerAverage: ValueSpec('number'),\r\n    markerStatus: ValueSpec('number'),\r\n};\r\nexport var OverpaintSchema = {\r\n    uOverpaintTexDim: UniformSpec('v2'),\r\n    tOverpaint: TextureSpec('image-uint8', 'rgba', 'ubyte', 'nearest'),\r\n    dOverpaint: DefineSpec('boolean'),\r\n};\r\nexport var TransparencySchema = {\r\n    uTransparencyTexDim: UniformSpec('v2'),\r\n    tTransparency: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\r\n    dTransparency: DefineSpec('boolean'),\r\n    transparencyAverage: ValueSpec('number'),\r\n};\r\nexport var ClippingSchema = {\r\n    dClipObjectCount: DefineSpec('number'),\r\n    dClipVariant: DefineSpec('string', ['instance', 'pixel']),\r\n    uClippingTexDim: UniformSpec('v2'),\r\n    tClipping: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\r\n    dClipping: DefineSpec('boolean'),\r\n};\r\nexport var BaseSchema = __assign(__assign(__assign(__assign(__assign(__assign({}, ColorSchema), MarkerSchema), OverpaintSchema), TransparencySchema), ClippingSchema), { aInstance: AttributeSpec('float32', 1, 1), \r\n    /**\r\n     * final per-instance transform calculated for instance `i` as\r\n     * `aTransform[i] = matrix * transform[i] * extraTransform[i]`\r\n     */\r\n    aTransform: AttributeSpec('float32', 16, 1), \r\n    /**\r\n     * final alpha, calculated as `values.alpha * state.alpha`\r\n     */\r\n    uAlpha: UniformSpec('f', 'material'), uVertexCount: UniformSpec('i'), uInstanceCount: UniformSpec('i'), uGroupCount: UniformSpec('i'), uInvariantBoundingSphere: UniformSpec('v4'), drawCount: ValueSpec('number'), instanceCount: ValueSpec('number'), \r\n    /** base alpha, see uAlpha  */\r\n    alpha: ValueSpec('number'), \r\n    /** global transform, see aTransform */\r\n    matrix: ValueSpec('m4'), \r\n    /** base per-instance transform, see aTransform */\r\n    transform: ValueSpec('float32'), \r\n    /** additional per-instance transform, see aTransform */\r\n    extraTransform: ValueSpec('float32'), \r\n    /** denotes reflection in transform */\r\n    hasReflection: ValueSpec('boolean'), \r\n    /** bounding sphere taking aTransform into account and encompases all instances */\r\n    boundingSphere: ValueSpec('sphere'), \r\n    /** bounding sphere NOT taking aTransform into account */\r\n    invariantBoundingSphere: ValueSpec('sphere') });\r\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"module"}