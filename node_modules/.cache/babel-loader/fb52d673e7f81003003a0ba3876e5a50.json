{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { EPSILON } from './common';\n\nfunction Vec4() {\n  return Vec4.zero();\n}\n\n(function (Vec4) {\n  function zero() {\n    // force double backing array by 0.1.\n    var ret = [0.1, 0, 0, 0];\n    ret[0] = 0.0;\n    return ret;\n  }\n\n  Vec4.zero = zero;\n\n  function clone(a) {\n    var out = zero();\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  Vec4.clone = clone;\n\n  function create(x, y, z, w) {\n    var out = zero();\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  Vec4.create = create;\n\n  function fromSphere(out, sphere) {\n    out[0] = sphere.center[0];\n    out[1] = sphere.center[1];\n    out[2] = sphere.center[2];\n    out[3] = sphere.radius;\n    return out;\n  }\n\n  Vec4.fromSphere = fromSphere;\n\n  function ofSphere(sphere) {\n    return fromSphere(zero(), sphere);\n  }\n\n  Vec4.ofSphere = ofSphere;\n\n  function hasNaN(a) {\n    return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]) || isNaN(a[3]);\n  }\n\n  Vec4.hasNaN = hasNaN;\n\n  function toArray(a, out, offset) {\n    out[offset + 0] = a[0];\n    out[offset + 1] = a[1];\n    out[offset + 2] = a[2];\n    out[offset + 3] = a[3];\n    return out;\n  }\n\n  Vec4.toArray = toArray;\n\n  function fromArray(a, array, offset) {\n    a[0] = array[offset + 0];\n    a[1] = array[offset + 1];\n    a[2] = array[offset + 2];\n    a[3] = array[offset + 3];\n    return a;\n  }\n\n  Vec4.fromArray = fromArray;\n\n  function toVec3Array(a, out, offset) {\n    out[offset + 0] = a[0];\n    out[offset + 1] = a[1];\n    out[offset + 2] = a[2];\n  }\n\n  Vec4.toVec3Array = toVec3Array;\n\n  function fromVec3Array(a, array, offset) {\n    a[0] = array[offset + 0];\n    a[1] = array[offset + 1];\n    a[2] = array[offset + 2];\n    a[3] = 0;\n    return a;\n  }\n\n  Vec4.fromVec3Array = fromVec3Array;\n\n  function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  }\n\n  Vec4.copy = copy;\n\n  function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  Vec4.set = set;\n\n  function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  }\n\n  Vec4.add = add;\n\n  function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  Vec4.distance = distance;\n\n  function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[4] = a[4] * b;\n    return out;\n  }\n\n  Vec4.scale = scale;\n  /**\r\n   * Math.round the components of a Vec4\r\n   */\n\n  function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n  }\n\n  Vec4.round = round;\n  /**\r\n   * Math.ceil the components of a Vec4\r\n   */\n\n  function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n  }\n\n  Vec4.ceil = ceil;\n  /**\r\n   * Math.floor the components of a Vec3\r\n   */\n\n  function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n  }\n\n  Vec4.floor = floor;\n\n  function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n\n  Vec4.squaredDistance = squaredDistance;\n\n  function norm(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  Vec4.norm = norm;\n\n  function squaredNorm(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x * x + y * y + z * z + w * w;\n  }\n\n  Vec4.squaredNorm = squaredNorm;\n\n  function transformMat4(out, a, m) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n  }\n\n  Vec4.transformMat4 = transformMat4;\n\n  function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n\n  Vec4.dot = dot;\n  /**\r\n   * Returns the inverse of the components of a Vec4\r\n   */\n\n  function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n  }\n\n  Vec4.inverse = inverse;\n  /**\r\n   * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n   */\n\n  function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  }\n\n  Vec4.exactEquals = exactEquals;\n  /**\r\n   * Returns whether or not the vectors have approximately the same elements in the same position.\r\n   */\n\n  function equals(a, b) {\n    var a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    var b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n  }\n\n  Vec4.equals = equals;\n\n  function toString(a, precision) {\n    return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \" \" + a[2].toPrecision(precision) + \"  \" + a[3].toPrecision(precision) + \"]\";\n  }\n\n  Vec4.toString = toString;\n})(Vec4 || (Vec4 = {}));\n\nexport { Vec4 };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/3d/vec4.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { EPSILON } from './common';\r\nfunction Vec4() {\r\n    return Vec4.zero();\r\n}\r\n(function (Vec4) {\r\n    function zero() {\r\n        // force double backing array by 0.1.\r\n        var ret = [0.1, 0, 0, 0];\r\n        ret[0] = 0.0;\r\n        return ret;\r\n    }\r\n    Vec4.zero = zero;\r\n    function clone(a) {\r\n        var out = zero();\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        return out;\r\n    }\r\n    Vec4.clone = clone;\r\n    function create(x, y, z, w) {\r\n        var out = zero();\r\n        out[0] = x;\r\n        out[1] = y;\r\n        out[2] = z;\r\n        out[3] = w;\r\n        return out;\r\n    }\r\n    Vec4.create = create;\r\n    function fromSphere(out, sphere) {\r\n        out[0] = sphere.center[0];\r\n        out[1] = sphere.center[1];\r\n        out[2] = sphere.center[2];\r\n        out[3] = sphere.radius;\r\n        return out;\r\n    }\r\n    Vec4.fromSphere = fromSphere;\r\n    function ofSphere(sphere) {\r\n        return fromSphere(zero(), sphere);\r\n    }\r\n    Vec4.ofSphere = ofSphere;\r\n    function hasNaN(a) {\r\n        return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]) || isNaN(a[3]);\r\n    }\r\n    Vec4.hasNaN = hasNaN;\r\n    function toArray(a, out, offset) {\r\n        out[offset + 0] = a[0];\r\n        out[offset + 1] = a[1];\r\n        out[offset + 2] = a[2];\r\n        out[offset + 3] = a[3];\r\n        return out;\r\n    }\r\n    Vec4.toArray = toArray;\r\n    function fromArray(a, array, offset) {\r\n        a[0] = array[offset + 0];\r\n        a[1] = array[offset + 1];\r\n        a[2] = array[offset + 2];\r\n        a[3] = array[offset + 3];\r\n        return a;\r\n    }\r\n    Vec4.fromArray = fromArray;\r\n    function toVec3Array(a, out, offset) {\r\n        out[offset + 0] = a[0];\r\n        out[offset + 1] = a[1];\r\n        out[offset + 2] = a[2];\r\n    }\r\n    Vec4.toVec3Array = toVec3Array;\r\n    function fromVec3Array(a, array, offset) {\r\n        a[0] = array[offset + 0];\r\n        a[1] = array[offset + 1];\r\n        a[2] = array[offset + 2];\r\n        a[3] = 0;\r\n        return a;\r\n    }\r\n    Vec4.fromVec3Array = fromVec3Array;\r\n    function copy(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        return out;\r\n    }\r\n    Vec4.copy = copy;\r\n    function set(out, x, y, z, w) {\r\n        out[0] = x;\r\n        out[1] = y;\r\n        out[2] = z;\r\n        out[3] = w;\r\n        return out;\r\n    }\r\n    Vec4.set = set;\r\n    function add(out, a, b) {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        out[3] = a[3] + b[3];\r\n        return out;\r\n    }\r\n    Vec4.add = add;\r\n    function distance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    }\r\n    Vec4.distance = distance;\r\n    function scale(out, a, b) {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        out[4] = a[4] * b;\r\n        return out;\r\n    }\r\n    Vec4.scale = scale;\r\n    /**\r\n     * Math.round the components of a Vec4\r\n     */\r\n    function round(out, a) {\r\n        out[0] = Math.round(a[0]);\r\n        out[1] = Math.round(a[1]);\r\n        out[2] = Math.round(a[2]);\r\n        out[3] = Math.round(a[3]);\r\n        return out;\r\n    }\r\n    Vec4.round = round;\r\n    /**\r\n     * Math.ceil the components of a Vec4\r\n     */\r\n    function ceil(out, a) {\r\n        out[0] = Math.ceil(a[0]);\r\n        out[1] = Math.ceil(a[1]);\r\n        out[2] = Math.ceil(a[2]);\r\n        out[3] = Math.ceil(a[3]);\r\n        return out;\r\n    }\r\n    Vec4.ceil = ceil;\r\n    /**\r\n     * Math.floor the components of a Vec3\r\n     */\r\n    function floor(out, a) {\r\n        out[0] = Math.floor(a[0]);\r\n        out[1] = Math.floor(a[1]);\r\n        out[2] = Math.floor(a[2]);\r\n        out[3] = Math.floor(a[3]);\r\n        return out;\r\n    }\r\n    Vec4.floor = floor;\r\n    function squaredDistance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n    Vec4.squaredDistance = squaredDistance;\r\n    function norm(a) {\r\n        var x = a[0], y = a[1], z = a[2], w = a[3];\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    }\r\n    Vec4.norm = norm;\r\n    function squaredNorm(a) {\r\n        var x = a[0], y = a[1], z = a[2], w = a[3];\r\n        return x * x + y * y + z * z + w * w;\r\n    }\r\n    Vec4.squaredNorm = squaredNorm;\r\n    function transformMat4(out, a, m) {\r\n        var x = a[0], y = a[1], z = a[2], w = a[3];\r\n        out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n        out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n        out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n        out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n        return out;\r\n    }\r\n    Vec4.transformMat4 = transformMat4;\r\n    function dot(a, b) {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n    }\r\n    Vec4.dot = dot;\r\n    /**\r\n     * Returns the inverse of the components of a Vec4\r\n     */\r\n    function inverse(out, a) {\r\n        out[0] = 1.0 / a[0];\r\n        out[1] = 1.0 / a[1];\r\n        out[2] = 1.0 / a[2];\r\n        out[3] = 1.0 / a[3];\r\n        return out;\r\n    }\r\n    Vec4.inverse = inverse;\r\n    /**\r\n     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n     */\r\n    function exactEquals(a, b) {\r\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n    }\r\n    Vec4.exactEquals = exactEquals;\r\n    /**\r\n     * Returns whether or not the vectors have approximately the same elements in the same position.\r\n     */\r\n    function equals(a, b) {\r\n        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n            Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));\r\n    }\r\n    Vec4.equals = equals;\r\n    function toString(a, precision) {\r\n        return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \" \" + a[2].toPrecision(precision) + \"  \" + a[3].toPrecision(precision) + \"]\";\r\n    }\r\n    Vec4.toString = toString;\r\n})(Vec4 || (Vec4 = {}));\r\nexport { Vec4 };\r\n//# sourceMappingURL=vec4.js.map"]},"metadata":{},"sourceType":"module"}