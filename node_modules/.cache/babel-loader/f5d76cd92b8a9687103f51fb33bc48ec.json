{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { arrayMinMax } from '../../../mol-util/array';\nexport function calcModelCenter(atomicConformation, coarseConformation) {\n  var rangesX = [];\n  var rangesY = [];\n  var rangesZ = [];\n\n  if (atomicConformation.x.length) {\n    rangesX.push.apply(rangesX, arrayMinMax(atomicConformation.x));\n    rangesY.push.apply(rangesY, arrayMinMax(atomicConformation.y));\n    rangesZ.push.apply(rangesZ, arrayMinMax(atomicConformation.z));\n  }\n\n  if (coarseConformation) {\n    if (coarseConformation.spheres.x.length) {\n      rangesX.push.apply(rangesX, arrayMinMax(coarseConformation.spheres.x));\n      rangesY.push.apply(rangesY, arrayMinMax(coarseConformation.spheres.y));\n      rangesZ.push.apply(rangesZ, arrayMinMax(coarseConformation.spheres.z));\n    }\n\n    if (coarseConformation.gaussians.x.length) {\n      rangesX.push.apply(rangesX, arrayMinMax(coarseConformation.gaussians.x));\n      rangesY.push.apply(rangesY, arrayMinMax(coarseConformation.gaussians.y));\n      rangesZ.push.apply(rangesZ, arrayMinMax(coarseConformation.gaussians.z));\n    }\n  }\n\n  var _a = arrayMinMax(rangesX),\n      minX = _a[0],\n      maxX = _a[1];\n\n  var _b = arrayMinMax(rangesY),\n      minY = _b[0],\n      maxY = _b[1];\n\n  var _c = arrayMinMax(rangesZ),\n      minZ = _c[0],\n      maxZ = _c[1];\n\n  var x = minX + (maxX - minX) / 2;\n  var y = minY + (maxY - minY) / 2;\n  var z = minZ + (maxZ - minZ) / 2;\n  return Vec3.create(x, y, z);\n}\nexport function getAsymIdCount(model) {\n  var auth = new Set();\n  var label = new Set();\n  model.properties.structAsymMap.forEach(function (_a, label_id) {\n    var auth_id = _a.auth_id;\n    auth.add(auth_id);\n    label.add(label_id);\n  });\n  return {\n    auth: auth.size,\n    label: label.size\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model/structure/model/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { arrayMinMax } from '../../../mol-util/array';\r\nexport function calcModelCenter(atomicConformation, coarseConformation) {\r\n    var rangesX = [];\r\n    var rangesY = [];\r\n    var rangesZ = [];\r\n    if (atomicConformation.x.length) {\r\n        rangesX.push.apply(rangesX, arrayMinMax(atomicConformation.x));\r\n        rangesY.push.apply(rangesY, arrayMinMax(atomicConformation.y));\r\n        rangesZ.push.apply(rangesZ, arrayMinMax(atomicConformation.z));\r\n    }\r\n    if (coarseConformation) {\r\n        if (coarseConformation.spheres.x.length) {\r\n            rangesX.push.apply(rangesX, arrayMinMax(coarseConformation.spheres.x));\r\n            rangesY.push.apply(rangesY, arrayMinMax(coarseConformation.spheres.y));\r\n            rangesZ.push.apply(rangesZ, arrayMinMax(coarseConformation.spheres.z));\r\n        }\r\n        if (coarseConformation.gaussians.x.length) {\r\n            rangesX.push.apply(rangesX, arrayMinMax(coarseConformation.gaussians.x));\r\n            rangesY.push.apply(rangesY, arrayMinMax(coarseConformation.gaussians.y));\r\n            rangesZ.push.apply(rangesZ, arrayMinMax(coarseConformation.gaussians.z));\r\n        }\r\n    }\r\n    var _a = arrayMinMax(rangesX), minX = _a[0], maxX = _a[1];\r\n    var _b = arrayMinMax(rangesY), minY = _b[0], maxY = _b[1];\r\n    var _c = arrayMinMax(rangesZ), minZ = _c[0], maxZ = _c[1];\r\n    var x = minX + (maxX - minX) / 2;\r\n    var y = minY + (maxY - minY) / 2;\r\n    var z = minZ + (maxZ - minZ) / 2;\r\n    return Vec3.create(x, y, z);\r\n}\r\nexport function getAsymIdCount(model) {\r\n    var auth = new Set();\r\n    var label = new Set();\r\n    model.properties.structAsymMap.forEach(function (_a, label_id) {\r\n        var auth_id = _a.auth_id;\r\n        auth.add(auth_id);\r\n        label.add(label_id);\r\n    });\r\n    return { auth: auth.size, label: label.size };\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}