{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Color } from '../../mol-util/color';\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { ChainIdColorTheme, ChainIdColorThemeParams } from './chain-id';\nvar DefaultIllustrativeColor = Color(0xEEEEEE);\nvar Description = \"Assigns an illustrative color that gives every chain a unique color with lighter carbons (inspired by David Goodsell's Molecule of the Month style).\";\nexport var IllustrativeColorThemeParams = __assign({}, ChainIdColorThemeParams);\nexport function getIllustrativeColorThemeParams(ctx) {\n  return IllustrativeColorThemeParams; // TODO return copy\n}\nexport function IllustrativeColorTheme(ctx, props) {\n  var _a = ChainIdColorTheme(ctx, props),\n      chainIdColor = _a.color,\n      legend = _a.legend;\n\n  function illustrativeColor(location, typeSymbol) {\n    var baseColor = chainIdColor(location, false);\n    return typeSymbol === 'C' ? Color.lighten(baseColor, 0.8) : baseColor;\n  }\n\n  function color(location) {\n    if (StructureElement.Location.is(location) && Unit.isAtomic(location.unit)) {\n      var typeSymbol = location.unit.model.atomicHierarchy.atoms.type_symbol.value(location.element);\n      return illustrativeColor(location, typeSymbol);\n    } else if (Bond.isLocation(location) && Unit.isAtomic(location.aUnit)) {\n      var elementIndex = location.aUnit.elements[location.aIndex];\n      var typeSymbol = location.aUnit.model.atomicHierarchy.atoms.type_symbol.value(elementIndex);\n      return illustrativeColor(location, typeSymbol);\n    }\n\n    return DefaultIllustrativeColor;\n  }\n\n  return {\n    factory: IllustrativeColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var IllustrativeColorThemeProvider = {\n  name: 'illustrative',\n  label: 'Illustrative',\n  category: \"Miscellaneous\"\n  /* Misc */\n  ,\n  factory: IllustrativeColorTheme,\n  getParams: getIllustrativeColorThemeParams,\n  defaultValues: PD.getDefaultValues(IllustrativeColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/illustrative.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAGH,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,gBAAT,EAA2B,IAA3B,EAAiC,IAAjC,QAA6C,2BAA7C;AAGA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AAEA,SAAS,iBAAT,EAA4B,uBAA5B,QAA2D,YAA3D;AAEA,IAAM,wBAAwB,GAAG,KAAK,CAAC,QAAD,CAAtC;AACA,IAAM,WAAW,GAAG,sJAApB;AAEA,OAAO,IAAM,4BAA4B,GAAA,QAAA,CAAA,EAAA,EAClC,uBADkC,CAAlC;AAIP,OAAM,SAAU,+BAAV,CAA0C,GAA1C,EAA+D;AACjE,SAAO,4BAAP,CADiE,CAC5B;AACxC;AAED,OAAM,SAAU,sBAAV,CAAiC,GAAjC,EAAwD,KAAxD,EAAsG;AAClG,MAAA,EAAA,GAAkC,iBAAiB,CAAC,GAAD,EAAM,KAAN,CAAnD;AAAA,MAAS,YAAY,GAAA,EAAA,CAAA,KAArB;AAAA,MAAuB,MAAM,GAAA,EAAA,CAAA,MAA7B;;AAEN,WAAS,iBAAT,CAA2B,QAA3B,EAA+C,UAA/C,EAAwE;AACpE,QAAM,SAAS,GAAG,YAAY,CAAC,QAAD,EAAW,KAAX,CAA9B;AACA,WAAO,UAAU,KAAK,GAAf,GAAqB,KAAK,CAAC,OAAN,CAAc,SAAd,EAAyB,GAAzB,CAArB,GAAqD,SAA5D;AACH;;AAED,WAAS,KAAT,CAAe,QAAf,EAAiC;AAC7B,QAAI,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,CAA6B,QAA7B,KAA0C,IAAI,CAAC,QAAL,CAAc,QAAQ,CAAC,IAAvB,CAA9C,EAA4E;AACxE,UAAM,UAAU,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,eAApB,CAAoC,KAApC,CAA0C,WAA1C,CAAsD,KAAtD,CAA4D,QAAQ,CAAC,OAArE,CAAnB;AACA,aAAO,iBAAiB,CAAC,QAAD,EAAW,UAAX,CAAxB;AACH,KAHD,MAGO,IAAI,IAAI,CAAC,UAAL,CAAgB,QAAhB,KAA6B,IAAI,CAAC,QAAL,CAAc,QAAQ,CAAC,KAAvB,CAAjC,EAAgE;AACnE,UAAM,YAAY,GAAG,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,QAAQ,CAAC,MAAjC,CAArB;AACA,UAAM,UAAU,GAAG,QAAQ,CAAC,KAAT,CAAe,KAAf,CAAqB,eAArB,CAAqC,KAArC,CAA2C,WAA3C,CAAuD,KAAvD,CAA6D,YAA7D,CAAnB;AACA,aAAO,iBAAiB,CAAC,QAAD,EAAW,UAAX,CAAxB;AACH;;AACD,WAAO,wBAAP;AACH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,sBADN;AAEH,IAAA,WAAW,EAAE,OAFV;AAGH,IAAA,eAAe,EAAE,IAHd;AAIH,IAAA,KAAK,EAAA,KAJF;AAKH,IAAA,KAAK,EAAA,KALF;AAMH,IAAA,WAAW,EAAE,WANV;AAOH,IAAA,MAAM,EAAA;AAPH,GAAP;AASH;AAED,OAAO,IAAM,8BAA8B,GAAsE;AAC7G,EAAA,IAAI,EAAE,cADuG;AAE7G,EAAA,KAAK,EAAE,cAFsG;AAG7G,EAAA,QAAQ,EAAA;AAAA;AAHqG;AAI7G,EAAA,OAAO,EAAE,sBAJoG;AAK7G,EAAA,SAAS,EAAE,+BALkG;AAM7G,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,4BAApB,CAN8F;AAO7G,EAAA,YAAY,EAAE,UAAC,GAAD,EAAsB;AAAK,WAAA,CAAC,CAAC,GAAG,CAAL,SAAA;AAAe;AAPqD,CAA1G","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Color } from '../../mol-util/color';\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { ChainIdColorTheme, ChainIdColorThemeParams } from './chain-id';\r\nvar DefaultIllustrativeColor = Color(0xEEEEEE);\r\nvar Description = \"Assigns an illustrative color that gives every chain a unique color with lighter carbons (inspired by David Goodsell's Molecule of the Month style).\";\r\nexport var IllustrativeColorThemeParams = __assign({}, ChainIdColorThemeParams);\r\nexport function getIllustrativeColorThemeParams(ctx) {\r\n    return IllustrativeColorThemeParams; // TODO return copy\r\n}\r\nexport function IllustrativeColorTheme(ctx, props) {\r\n    var _a = ChainIdColorTheme(ctx, props), chainIdColor = _a.color, legend = _a.legend;\r\n    function illustrativeColor(location, typeSymbol) {\r\n        var baseColor = chainIdColor(location, false);\r\n        return typeSymbol === 'C' ? Color.lighten(baseColor, 0.8) : baseColor;\r\n    }\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location) && Unit.isAtomic(location.unit)) {\r\n            var typeSymbol = location.unit.model.atomicHierarchy.atoms.type_symbol.value(location.element);\r\n            return illustrativeColor(location, typeSymbol);\r\n        }\r\n        else if (Bond.isLocation(location) && Unit.isAtomic(location.aUnit)) {\r\n            var elementIndex = location.aUnit.elements[location.aIndex];\r\n            var typeSymbol = location.aUnit.model.atomicHierarchy.atoms.type_symbol.value(elementIndex);\r\n            return illustrativeColor(location, typeSymbol);\r\n        }\r\n        return DefaultIllustrativeColor;\r\n    }\r\n    return {\r\n        factory: IllustrativeColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var IllustrativeColorThemeProvider = {\r\n    name: 'illustrative',\r\n    label: 'Illustrative',\r\n    category: \"Miscellaneous\" /* Misc */,\r\n    factory: IllustrativeColorTheme,\r\n    getParams: getIllustrativeColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(IllustrativeColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=illustrative.js.map"]},"metadata":{},"sourceType":"module"}