{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { ReaderResult as Result } from '../result';\nimport { Task } from '../../../mol-task';\nimport { uint8ToString } from '../../common/binary';\nexport function _parseDcd(data) {\n  // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html\n  // The DCD format is structured as follows\n  //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):\n  // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS\n  // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)\n  //                         interval\n  // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT\n  // ==========================================================================\n  // NTITLE          TITLE\n  // INT (=2)        C*MAXTITL\n  //                 (=32)\n  // ==========================================================================\n  // NATOM\n  // #atoms\n  // INT\n  // ==========================================================================\n  // X(I), I=1,NATOM         (DOUBLE)\n  // Y(I), I=1,NATOM\n  // Z(I), I=1,NATOM\n  // ==========================================================================\n  var dv = new DataView(data.buffer);\n  var header = Object.create(null);\n  var frames = [];\n  var nextPos = 0; // header block\n\n  var intView = new Int32Array(data.buffer, 0, 23);\n  var ef = intView[0] !== dv.getInt32(0); // endianess flag\n  // swap byte order when big endian (84 indicates little endian)\n\n  if (intView[0] !== 84) {\n    var n = data.byteLength;\n\n    for (var i = 0; i < n; i += 4) {\n      dv.setFloat32(i, dv.getFloat32(i), true);\n    }\n  }\n\n  if (intView[0] !== 84) {\n    throw new Error('dcd bad format, header block start');\n  } // format indicator, should read 'CORD'\n\n\n  var formatString = String.fromCharCode(dv.getUint8(4), dv.getUint8(5), dv.getUint8(6), dv.getUint8(7));\n\n  if (formatString !== 'CORD') {\n    throw new Error('dcd bad format, format string');\n  }\n\n  var isCharmm = false;\n  var extraBlock = false;\n  var fourDims = false; // version field in charmm, unused in X-PLOR\n\n  if (intView[22] !== 0) {\n    isCharmm = true;\n    if (intView[12] !== 0) extraBlock = true;\n    if (intView[13] === 1) fourDims = true;\n  }\n\n  header.NSET = intView[2];\n  header.ISTART = intView[3];\n  header.NSAVC = intView[4];\n  header.NAMNF = intView[10];\n\n  if (isCharmm) {\n    header.DELTA = dv.getFloat32(44, ef);\n  } else {\n    header.DELTA = dv.getFloat64(44, ef);\n  }\n\n  if (intView[22] !== 84) {\n    throw new Error('dcd bad format, header block end');\n  }\n\n  nextPos = nextPos + 21 * 4 + 8; // title block\n\n  var titleEnd = dv.getInt32(nextPos, ef);\n  var titleStart = nextPos + 1;\n\n  if ((titleEnd - 4) % 80 !== 0) {\n    throw new Error('dcd bad format, title block start');\n  }\n\n  header.TITLE = uint8ToString(data.subarray(titleStart, titleEnd));\n\n  if (dv.getInt32(titleStart + titleEnd + 4 - 1, ef) !== titleEnd) {\n    throw new Error('dcd bad format, title block end');\n  }\n\n  nextPos = nextPos + titleEnd + 8; // natom block\n\n  if (dv.getInt32(nextPos, ef) !== 4) {\n    throw new Error('dcd bad format, natom block start');\n  }\n\n  header.NATOM = dv.getInt32(nextPos + 4, ef);\n\n  if (dv.getInt32(nextPos + 8, ef) !== 4) {\n    throw new Error('dcd bad format, natom block end');\n  }\n\n  nextPos = nextPos + 4 + 8; // fixed atoms block\n\n  if (header.NAMNF > 0) {\n    // TODO read coordinates and indices of fixed atoms\n    throw new Error('dcd format with fixed atoms unsupported, aborting');\n  } // frames\n\n\n  var natom = header.NATOM;\n  var natom4 = natom * 4;\n\n  for (var i = 0, n = header.NSET; i < n; ++i) {\n    var frame = Object.create(null);\n    frame.elementCount = natom;\n\n    if (extraBlock) {\n      nextPos += 4; // block start\n\n      frame.cell = [dv.getFloat64(nextPos, ef), dv.getFloat64(nextPos + 1, ef), dv.getFloat64(nextPos + 2 * 8, ef), dv.getFloat64(nextPos + 3 * 8, ef), dv.getFloat64(nextPos + 4 * 8, ef), dv.getFloat64(nextPos + 5 * 8, ef)];\n      nextPos += 48;\n      nextPos += 4; // block end\n    } // xyz coordinates\n\n\n    for (var j = 0; j < 3; ++j) {\n      if (dv.getInt32(nextPos, ef) !== natom4) {\n        throw new Error(\"dcd bad format, coord block start: \" + i + \", \" + j);\n      }\n\n      nextPos += 4; // block start\n\n      var c = new Float32Array(data.buffer, nextPos, natom);\n      if (j === 0) frame.x = c;else if (j === 1) frame.y = c;else frame.z = c;\n      nextPos += natom4;\n\n      if (dv.getInt32(nextPos, ef) !== natom4) {\n        throw new Error(\"dcd bad format, coord block end: \" + i + \", \" + j);\n      }\n\n      nextPos += 4; // block end\n    }\n\n    if (fourDims) {\n      var bytes = dv.getInt32(nextPos, ef);\n      nextPos += 4 + bytes + 4; // block start + skip + block end\n    }\n\n    frames.push(frame);\n  }\n\n  return {\n    header: header,\n    frames: frames\n  };\n}\nexport function parseDcd(data) {\n  var _this = this;\n\n  return Task.create('Parse DCD', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var dcdFile;\n      return __generator(this, function (_a) {\n        try {\n          dcdFile = _parseDcd(data);\n          return [2\n          /*return*/\n          , Result.success(dcdFile)];\n        } catch (e) {\n          return [2\n          /*return*/\n          , Result.error(e)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/dcd/parser.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,YAAY,IAAI,MAAzB,QAAuC,WAAvC;AACA,SAAS,IAAT,QAAqB,mBAArB;AAEA,SAAS,aAAT,QAA8B,qBAA9B;AA6BA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAoC;AACtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM,EAAE,GAAG,IAAI,QAAJ,CAAa,IAAI,CAAC,MAAlB,CAAX;AAEA,MAAM,MAAM,GAAuB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAnC;AACA,MAAM,MAAM,GAAe,EAA3B;AAEA,MAAI,OAAO,GAAG,CAAd,CA5BsC,CA8BtC;;AAEA,MAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,IAAI,CAAC,MAApB,EAA4B,CAA5B,EAA+B,EAA/B,CAAhB;AACA,MAAM,EAAE,GAAG,OAAO,CAAC,CAAD,CAAP,KAAe,EAAE,CAAC,QAAH,CAAY,CAAZ,CAA1B,CAjCsC,CAiCI;AAC1C;;AACA,MAAI,OAAO,CAAC,CAAD,CAAP,KAAe,EAAnB,EAAuB;AACnB,QAAM,CAAC,GAAG,IAAI,CAAC,UAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;AAC3B,MAAA,EAAE,CAAC,UAAH,CAAc,CAAd,EAAiB,EAAE,CAAC,UAAH,CAAc,CAAd,CAAjB,EAAmC,IAAnC;AACH;AACJ;;AACD,MAAI,OAAO,CAAC,CAAD,CAAP,KAAe,EAAnB,EAAuB;AACnB,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH,GA3CqC,CA6CtC;;;AACA,MAAM,YAAY,GAAG,MAAM,CAAC,YAAP,CACjB,EAAE,CAAC,QAAH,CAAY,CAAZ,CADiB,EACD,EAAE,CAAC,QAAH,CAAY,CAAZ,CADC,EAEjB,EAAE,CAAC,QAAH,CAAY,CAAZ,CAFiB,EAED,EAAE,CAAC,QAAH,CAAY,CAAZ,CAFC,CAArB;;AAIA,MAAI,YAAY,KAAK,MAArB,EAA6B;AACzB,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACD,MAAI,QAAQ,GAAG,KAAf;AACA,MAAI,UAAU,GAAG,KAAjB;AACA,MAAI,QAAQ,GAAG,KAAf,CAvDsC,CAwDtC;;AACA,MAAI,OAAO,CAAC,EAAD,CAAP,KAAgB,CAApB,EAAuB;AACnB,IAAA,QAAQ,GAAG,IAAX;AACA,QAAI,OAAO,CAAC,EAAD,CAAP,KAAgB,CAApB,EAAuB,UAAU,GAAG,IAAb;AACvB,QAAI,OAAO,CAAC,EAAD,CAAP,KAAgB,CAApB,EAAuB,QAAQ,GAAG,IAAX;AAC1B;;AACD,EAAA,MAAM,CAAC,IAAP,GAAc,OAAO,CAAC,CAAD,CAArB;AACA,EAAA,MAAM,CAAC,MAAP,GAAgB,OAAO,CAAC,CAAD,CAAvB;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,CAAD,CAAtB;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,EAAD,CAAtB;;AAEA,MAAI,QAAJ,EAAc;AACV,IAAA,MAAM,CAAC,KAAP,GAAe,EAAE,CAAC,UAAH,CAAc,EAAd,EAAkB,EAAlB,CAAf;AACH,GAFD,MAEO;AACH,IAAA,MAAM,CAAC,KAAP,GAAe,EAAE,CAAC,UAAH,CAAc,EAAd,EAAkB,EAAlB,CAAf;AACH;;AAED,MAAI,OAAO,CAAC,EAAD,CAAP,KAAgB,EAApB,EAAwB;AACpB,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,EAAA,OAAO,GAAG,OAAO,GAAG,KAAK,CAAf,GAAmB,CAA7B,CA5EsC,CA8EtC;;AAEA,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,EAArB,CAAjB;AACA,MAAM,UAAU,GAAG,OAAO,GAAG,CAA7B;;AACA,MAAI,CAAC,QAAQ,GAAG,CAAZ,IAAiB,EAAjB,KAAwB,CAA5B,EAA+B;AAC3B,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACD,EAAA,MAAM,CAAC,KAAP,GAAe,aAAa,CAAC,IAAI,CAAC,QAAL,CAAc,UAAd,EAA0B,QAA1B,CAAD,CAA5B;;AACA,MAAI,EAAE,CAAC,QAAH,CAAY,UAAU,GAAG,QAAb,GAAwB,CAAxB,GAA4B,CAAxC,EAA2C,EAA3C,MAAmD,QAAvD,EAAiE;AAC7D,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACH;;AAED,EAAA,OAAO,GAAG,OAAO,GAAG,QAAV,GAAqB,CAA/B,CA1FsC,CA4FtC;;AAEA,MAAI,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,EAArB,MAA6B,CAAjC,EAAoC;AAChC,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACD,EAAA,MAAM,CAAC,KAAP,GAAe,EAAE,CAAC,QAAH,CAAY,OAAO,GAAG,CAAtB,EAAyB,EAAzB,CAAf;;AACA,MAAI,EAAE,CAAC,QAAH,CAAY,OAAO,GAAG,CAAtB,EAAyB,EAAzB,MAAiC,CAArC,EAAwC;AACpC,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,EAAA,OAAO,GAAG,OAAO,GAAG,CAAV,GAAc,CAAxB,CArGsC,CAuGtC;;AAEA,MAAI,MAAM,CAAC,KAAP,GAAe,CAAnB,EAAsB;AAClB;AACA,UAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;AACH,GA5GqC,CA8GtC;;;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,KAArB;AACA,MAAM,MAAM,GAAG,KAAK,GAAG,CAAvB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,MAAM,CAAC,IAA3B,EAAiC,CAAC,GAAG,CAArC,EAAwC,EAAE,CAA1C,EAA6C;AACzC,QAAM,KAAK,GAAsB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAjC;AACA,IAAA,KAAK,CAAC,YAAN,GAAqB,KAArB;;AAEA,QAAI,UAAJ,EAAgB;AACZ,MAAA,OAAO,IAAI,CAAX,CADY,CACE;;AACd,MAAA,KAAK,CAAC,IAAN,GAAa,CACT,EAAE,CAAC,UAAH,CAAc,OAAd,EAAuB,EAAvB,CADS,EAET,EAAE,CAAC,UAAH,CAAc,OAAO,GAAG,CAAxB,EAA2B,EAA3B,CAFS,EAGT,EAAE,CAAC,UAAH,CAAc,OAAO,GAAG,IAAI,CAA5B,EAA+B,EAA/B,CAHS,EAIT,EAAE,CAAC,UAAH,CAAc,OAAO,GAAG,IAAI,CAA5B,EAA+B,EAA/B,CAJS,EAKT,EAAE,CAAC,UAAH,CAAc,OAAO,GAAG,IAAI,CAA5B,EAA+B,EAA/B,CALS,EAMT,EAAE,CAAC,UAAH,CAAc,OAAO,GAAG,IAAI,CAA5B,EAA+B,EAA/B,CANS,CAAb;AAQA,MAAA,OAAO,IAAI,EAAX;AACA,MAAA,OAAO,IAAI,CAAX,CAXY,CAWE;AACjB,KAhBwC,CAkBzC;;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,UAAI,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,EAArB,MAA6B,MAAjC,EAAyC;AACrC,cAAM,IAAI,KAAJ,CAAU,wCAAsC,CAAtC,GAAuC,IAAvC,GAA4C,CAAtD,CAAN;AACH;;AACD,MAAA,OAAO,IAAI,CAAX,CAJwB,CAIV;;AACd,UAAM,CAAC,GAAG,IAAI,YAAJ,CAAiB,IAAI,CAAC,MAAtB,EAA8B,OAA9B,EAAuC,KAAvC,CAAV;AACA,UAAI,CAAC,KAAK,CAAV,EAAa,KAAK,CAAC,CAAN,GAAU,CAAV,CAAb,KACK,IAAI,CAAC,KAAK,CAAV,EAAa,KAAK,CAAC,CAAN,GAAU,CAAV,CAAb,KACA,KAAK,CAAC,CAAN,GAAU,CAAV;AAEL,MAAA,OAAO,IAAI,MAAX;;AACA,UAAI,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,EAArB,MAA6B,MAAjC,EAAyC;AACrC,cAAM,IAAI,KAAJ,CAAU,sCAAoC,CAApC,GAAqC,IAArC,GAA0C,CAApD,CAAN;AACH;;AACD,MAAA,OAAO,IAAI,CAAX,CAdwB,CAcV;AACjB;;AAED,QAAI,QAAJ,EAAc;AACV,UAAM,KAAK,GAAG,EAAE,CAAC,QAAH,CAAY,OAAZ,EAAqB,EAArB,CAAd;AACA,MAAA,OAAO,IAAI,IAAI,KAAJ,GAAY,CAAvB,CAFU,CAEgB;AAC7B;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACH;;AACD,SAAO;AAAE,IAAA,MAAM,EAAA,MAAR;AAAU,IAAA,MAAM,EAAA;AAAhB,GAAP;AACH;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAAmC;AAAzC,MAAA,KAAA,GAAA,IAAA;;AACI,SAAO,IAAI,CAAC,MAAL,CAA6B,WAA7B,EAA0C,UAAM,GAAN,EAAS;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AACtD,YAAI;AACM,UAAA,OAAO,GAAG,SAAS,CAAC,IAAD,CAAnB;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,MAAM,CAAC,OAAP,CAAe,OAAf,CAAP,CAAA;AACH,SAHD,CAGE,OAAO,CAAP,EAAU;AACR,iBAAA,CAAA;AAAA;AAAA,YAAO,MAAM,CAAC,KAAP,CAAa,CAAb,CAAP,CAAA;AACH;;;;;;KANqD,CAAA;AAOzD,GAPM,CAAP;AAQH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { ReaderResult as Result } from '../result';\r\nimport { Task } from '../../../mol-task';\r\nimport { uint8ToString } from '../../common/binary';\r\nexport function _parseDcd(data) {\r\n    // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html\r\n    // The DCD format is structured as follows\r\n    //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):\r\n    // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS\r\n    // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)\r\n    //                         interval\r\n    // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT\r\n    // ==========================================================================\r\n    // NTITLE          TITLE\r\n    // INT (=2)        C*MAXTITL\r\n    //                 (=32)\r\n    // ==========================================================================\r\n    // NATOM\r\n    // #atoms\r\n    // INT\r\n    // ==========================================================================\r\n    // X(I), I=1,NATOM         (DOUBLE)\r\n    // Y(I), I=1,NATOM\r\n    // Z(I), I=1,NATOM\r\n    // ==========================================================================\r\n    var dv = new DataView(data.buffer);\r\n    var header = Object.create(null);\r\n    var frames = [];\r\n    var nextPos = 0;\r\n    // header block\r\n    var intView = new Int32Array(data.buffer, 0, 23);\r\n    var ef = intView[0] !== dv.getInt32(0); // endianess flag\r\n    // swap byte order when big endian (84 indicates little endian)\r\n    if (intView[0] !== 84) {\r\n        var n = data.byteLength;\r\n        for (var i = 0; i < n; i += 4) {\r\n            dv.setFloat32(i, dv.getFloat32(i), true);\r\n        }\r\n    }\r\n    if (intView[0] !== 84) {\r\n        throw new Error('dcd bad format, header block start');\r\n    }\r\n    // format indicator, should read 'CORD'\r\n    var formatString = String.fromCharCode(dv.getUint8(4), dv.getUint8(5), dv.getUint8(6), dv.getUint8(7));\r\n    if (formatString !== 'CORD') {\r\n        throw new Error('dcd bad format, format string');\r\n    }\r\n    var isCharmm = false;\r\n    var extraBlock = false;\r\n    var fourDims = false;\r\n    // version field in charmm, unused in X-PLOR\r\n    if (intView[22] !== 0) {\r\n        isCharmm = true;\r\n        if (intView[12] !== 0)\r\n            extraBlock = true;\r\n        if (intView[13] === 1)\r\n            fourDims = true;\r\n    }\r\n    header.NSET = intView[2];\r\n    header.ISTART = intView[3];\r\n    header.NSAVC = intView[4];\r\n    header.NAMNF = intView[10];\r\n    if (isCharmm) {\r\n        header.DELTA = dv.getFloat32(44, ef);\r\n    }\r\n    else {\r\n        header.DELTA = dv.getFloat64(44, ef);\r\n    }\r\n    if (intView[22] !== 84) {\r\n        throw new Error('dcd bad format, header block end');\r\n    }\r\n    nextPos = nextPos + 21 * 4 + 8;\r\n    // title block\r\n    var titleEnd = dv.getInt32(nextPos, ef);\r\n    var titleStart = nextPos + 1;\r\n    if ((titleEnd - 4) % 80 !== 0) {\r\n        throw new Error('dcd bad format, title block start');\r\n    }\r\n    header.TITLE = uint8ToString(data.subarray(titleStart, titleEnd));\r\n    if (dv.getInt32(titleStart + titleEnd + 4 - 1, ef) !== titleEnd) {\r\n        throw new Error('dcd bad format, title block end');\r\n    }\r\n    nextPos = nextPos + titleEnd + 8;\r\n    // natom block\r\n    if (dv.getInt32(nextPos, ef) !== 4) {\r\n        throw new Error('dcd bad format, natom block start');\r\n    }\r\n    header.NATOM = dv.getInt32(nextPos + 4, ef);\r\n    if (dv.getInt32(nextPos + 8, ef) !== 4) {\r\n        throw new Error('dcd bad format, natom block end');\r\n    }\r\n    nextPos = nextPos + 4 + 8;\r\n    // fixed atoms block\r\n    if (header.NAMNF > 0) {\r\n        // TODO read coordinates and indices of fixed atoms\r\n        throw new Error('dcd format with fixed atoms unsupported, aborting');\r\n    }\r\n    // frames\r\n    var natom = header.NATOM;\r\n    var natom4 = natom * 4;\r\n    for (var i = 0, n = header.NSET; i < n; ++i) {\r\n        var frame = Object.create(null);\r\n        frame.elementCount = natom;\r\n        if (extraBlock) {\r\n            nextPos += 4; // block start\r\n            frame.cell = [\r\n                dv.getFloat64(nextPos, ef),\r\n                dv.getFloat64(nextPos + 1, ef),\r\n                dv.getFloat64(nextPos + 2 * 8, ef),\r\n                dv.getFloat64(nextPos + 3 * 8, ef),\r\n                dv.getFloat64(nextPos + 4 * 8, ef),\r\n                dv.getFloat64(nextPos + 5 * 8, ef)\r\n            ];\r\n            nextPos += 48;\r\n            nextPos += 4; // block end\r\n        }\r\n        // xyz coordinates\r\n        for (var j = 0; j < 3; ++j) {\r\n            if (dv.getInt32(nextPos, ef) !== natom4) {\r\n                throw new Error(\"dcd bad format, coord block start: \" + i + \", \" + j);\r\n            }\r\n            nextPos += 4; // block start\r\n            var c = new Float32Array(data.buffer, nextPos, natom);\r\n            if (j === 0)\r\n                frame.x = c;\r\n            else if (j === 1)\r\n                frame.y = c;\r\n            else\r\n                frame.z = c;\r\n            nextPos += natom4;\r\n            if (dv.getInt32(nextPos, ef) !== natom4) {\r\n                throw new Error(\"dcd bad format, coord block end: \" + i + \", \" + j);\r\n            }\r\n            nextPos += 4; // block end\r\n        }\r\n        if (fourDims) {\r\n            var bytes = dv.getInt32(nextPos, ef);\r\n            nextPos += 4 + bytes + 4; // block start + skip + block end\r\n        }\r\n        frames.push(frame);\r\n    }\r\n    return { header: header, frames: frames };\r\n}\r\nexport function parseDcd(data) {\r\n    var _this = this;\r\n    return Task.create('Parse DCD', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var dcdFile;\r\n        return __generator(this, function (_a) {\r\n            try {\r\n                dcdFile = _parseDcd(data);\r\n                return [2 /*return*/, Result.success(dcdFile)];\r\n            }\r\n            catch (e) {\r\n                return [2 /*return*/, Result.error(e)];\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}