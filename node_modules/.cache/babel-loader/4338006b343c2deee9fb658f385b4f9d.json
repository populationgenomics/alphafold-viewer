{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { defaults } from '../../mol-util';\nexport var SimpleBuffer;\n\n(function (SimpleBuffer) {\n  function fromUint8Array(array) {\n    var dv = new DataView(array.buffer);\n    return Object.assign(array.subarray(0), {\n      readInt8: function (offset) {\n        return dv.getInt8(offset);\n      },\n      readUInt8: function (offset) {\n        return dv.getUint8(offset);\n      },\n      writeInt8: function (value, offset) {\n        return dv.setInt8(offset, value);\n      },\n      writeUInt8: function (value, offset) {\n        return dv.setUint8(offset, value);\n      },\n      readInt16LE: function (offset) {\n        return dv.getInt16(offset, true);\n      },\n      readInt32LE: function (offset) {\n        return dv.getInt32(offset, true);\n      },\n      readUInt16LE: function (offset) {\n        return dv.getUint16(offset, true);\n      },\n      readUInt32LE: function (offset) {\n        return dv.getUint32(offset, true);\n      },\n      readFloatLE: function (offset) {\n        return dv.getFloat32(offset, true);\n      },\n      readDoubleLE: function (offset) {\n        return dv.getFloat64(offset, true);\n      },\n      writeInt16LE: function (value, offset) {\n        return dv.setInt16(offset, value, true);\n      },\n      writeInt32LE: function (value, offset) {\n        return dv.setInt32(offset, value, true);\n      },\n      writeUInt16LE: function (value, offset) {\n        return dv.setUint16(offset, value, true);\n      },\n      writeUInt32LE: function (value, offset) {\n        return dv.setUint32(offset, value, true);\n      },\n      writeFloatLE: function (value, offset) {\n        return dv.setFloat32(offset, value, true);\n      },\n      writeDoubleLE: function (value, offset) {\n        return dv.setFloat64(offset, value, true);\n      },\n      readInt16BE: function (offset) {\n        return dv.getInt16(offset, false);\n      },\n      readInt32BE: function (offset) {\n        return dv.getInt32(offset, false);\n      },\n      readUInt16BE: function (offset) {\n        return dv.getUint16(offset, false);\n      },\n      readUInt32BE: function (offset) {\n        return dv.getUint32(offset, false);\n      },\n      readFloatBE: function (offset) {\n        return dv.getFloat32(offset, false);\n      },\n      readDoubleBE: function (offset) {\n        return dv.getFloat64(offset, false);\n      },\n      writeInt16BE: function (value, offset) {\n        return dv.setInt16(offset, value, false);\n      },\n      writeInt32BE: function (value, offset) {\n        return dv.setInt32(offset, value, false);\n      },\n      writeUInt16BE: function (value, offset) {\n        return dv.setUint16(offset, value, false);\n      },\n      writeUInt32BE: function (value, offset) {\n        return dv.setUint32(offset, value, false);\n      },\n      writeFloatBE: function (value, offset) {\n        return dv.setFloat32(offset, value, false);\n      },\n      writeDoubleBE: function (value, offset) {\n        return dv.setFloat64(offset, value, false);\n      },\n      copy: function (targetBuffer, targetStart, sourceStart, sourceEnd) {\n        targetStart = defaults(targetStart, 0);\n        sourceStart = defaults(sourceStart, 0);\n        sourceEnd = defaults(sourceEnd, array.length);\n        targetBuffer.set(array.subarray(sourceStart, sourceEnd), targetStart);\n        return sourceEnd - sourceStart;\n      }\n    });\n  }\n\n  SimpleBuffer.fromUint8Array = fromUint8Array;\n\n  function fromArrayBuffer(arrayBuffer) {\n    return fromUint8Array(new Uint8Array(arrayBuffer));\n  }\n\n  SimpleBuffer.fromArrayBuffer = fromArrayBuffer;\n\n  function fromBuffer(buffer) {\n    return buffer;\n  }\n\n  SimpleBuffer.fromBuffer = fromBuffer;\n  SimpleBuffer.IsNativeEndianLittle = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;\n  /** source and target can't be the same */\n\n  function flipByteOrder(source, target, byteCount, elementByteSize, offset) {\n    for (var i = 0, n = byteCount; i < n; i += elementByteSize) {\n      for (var j = 0; j < elementByteSize; j++) {\n        target[offset + i + elementByteSize - j - 1] = source[offset + i + j];\n      }\n    }\n  }\n\n  SimpleBuffer.flipByteOrder = flipByteOrder;\n\n  function flipByteOrderInPlace2(buffer, byteOffset, length) {\n    if (byteOffset === void 0) {\n      byteOffset = 0;\n    }\n\n    var intView = new Int16Array(buffer, byteOffset, length);\n\n    for (var i = 0, n = intView.length; i < n; ++i) {\n      var val = intView[i];\n      intView[i] = (val & 0xff) << 8 | val >> 8 & 0xff;\n    }\n  }\n\n  SimpleBuffer.flipByteOrderInPlace2 = flipByteOrderInPlace2;\n\n  function ensureLittleEndian(source, target, byteCount, elementByteSize, offset) {\n    if (SimpleBuffer.IsNativeEndianLittle) return;\n    if (!byteCount || elementByteSize <= 1) return;\n    flipByteOrder(source, target, byteCount, elementByteSize, offset);\n  }\n\n  SimpleBuffer.ensureLittleEndian = ensureLittleEndian;\n})(SimpleBuffer || (SimpleBuffer = {}));","map":{"version":3,"sources":["../../../src/mol-io/common/simple-buffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { defaults } from '../../mol-util';\r\nexport var SimpleBuffer;\r\n(function (SimpleBuffer) {\r\n    function fromUint8Array(array) {\r\n        var dv = new DataView(array.buffer);\r\n        return Object.assign(array.subarray(0), {\r\n            readInt8: function (offset) { return dv.getInt8(offset); },\r\n            readUInt8: function (offset) { return dv.getUint8(offset); },\r\n            writeInt8: function (value, offset) { return dv.setInt8(offset, value); },\r\n            writeUInt8: function (value, offset) { return dv.setUint8(offset, value); },\r\n            readInt16LE: function (offset) { return dv.getInt16(offset, true); },\r\n            readInt32LE: function (offset) { return dv.getInt32(offset, true); },\r\n            readUInt16LE: function (offset) { return dv.getUint16(offset, true); },\r\n            readUInt32LE: function (offset) { return dv.getUint32(offset, true); },\r\n            readFloatLE: function (offset) { return dv.getFloat32(offset, true); },\r\n            readDoubleLE: function (offset) { return dv.getFloat64(offset, true); },\r\n            writeInt16LE: function (value, offset) { return dv.setInt16(offset, value, true); },\r\n            writeInt32LE: function (value, offset) { return dv.setInt32(offset, value, true); },\r\n            writeUInt16LE: function (value, offset) { return dv.setUint16(offset, value, true); },\r\n            writeUInt32LE: function (value, offset) { return dv.setUint32(offset, value, true); },\r\n            writeFloatLE: function (value, offset) { return dv.setFloat32(offset, value, true); },\r\n            writeDoubleLE: function (value, offset) { return dv.setFloat64(offset, value, true); },\r\n            readInt16BE: function (offset) { return dv.getInt16(offset, false); },\r\n            readInt32BE: function (offset) { return dv.getInt32(offset, false); },\r\n            readUInt16BE: function (offset) { return dv.getUint16(offset, false); },\r\n            readUInt32BE: function (offset) { return dv.getUint32(offset, false); },\r\n            readFloatBE: function (offset) { return dv.getFloat32(offset, false); },\r\n            readDoubleBE: function (offset) { return dv.getFloat64(offset, false); },\r\n            writeInt16BE: function (value, offset) { return dv.setInt16(offset, value, false); },\r\n            writeInt32BE: function (value, offset) { return dv.setInt32(offset, value, false); },\r\n            writeUInt16BE: function (value, offset) { return dv.setUint16(offset, value, false); },\r\n            writeUInt32BE: function (value, offset) { return dv.setUint32(offset, value, false); },\r\n            writeFloatBE: function (value, offset) { return dv.setFloat32(offset, value, false); },\r\n            writeDoubleBE: function (value, offset) { return dv.setFloat64(offset, value, false); },\r\n            copy: function (targetBuffer, targetStart, sourceStart, sourceEnd) {\r\n                targetStart = defaults(targetStart, 0);\r\n                sourceStart = defaults(sourceStart, 0);\r\n                sourceEnd = defaults(sourceEnd, array.length);\r\n                targetBuffer.set(array.subarray(sourceStart, sourceEnd), targetStart);\r\n                return sourceEnd - sourceStart;\r\n            }\r\n        });\r\n    }\r\n    SimpleBuffer.fromUint8Array = fromUint8Array;\r\n    function fromArrayBuffer(arrayBuffer) {\r\n        return fromUint8Array(new Uint8Array(arrayBuffer));\r\n    }\r\n    SimpleBuffer.fromArrayBuffer = fromArrayBuffer;\r\n    function fromBuffer(buffer) {\r\n        return buffer;\r\n    }\r\n    SimpleBuffer.fromBuffer = fromBuffer;\r\n    SimpleBuffer.IsNativeEndianLittle = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;\r\n    /** source and target can't be the same */\r\n    function flipByteOrder(source, target, byteCount, elementByteSize, offset) {\r\n        for (var i = 0, n = byteCount; i < n; i += elementByteSize) {\r\n            for (var j = 0; j < elementByteSize; j++) {\r\n                target[offset + i + elementByteSize - j - 1] = source[offset + i + j];\r\n            }\r\n        }\r\n    }\r\n    SimpleBuffer.flipByteOrder = flipByteOrder;\r\n    function flipByteOrderInPlace2(buffer, byteOffset, length) {\r\n        if (byteOffset === void 0) { byteOffset = 0; }\r\n        var intView = new Int16Array(buffer, byteOffset, length);\r\n        for (var i = 0, n = intView.length; i < n; ++i) {\r\n            var val = intView[i];\r\n            intView[i] = ((val & 0xff) << 8) | ((val >> 8) & 0xff);\r\n        }\r\n    }\r\n    SimpleBuffer.flipByteOrderInPlace2 = flipByteOrderInPlace2;\r\n    function ensureLittleEndian(source, target, byteCount, elementByteSize, offset) {\r\n        if (SimpleBuffer.IsNativeEndianLittle)\r\n            return;\r\n        if (!byteCount || elementByteSize <= 1)\r\n            return;\r\n        flipByteOrder(source, target, byteCount, elementByteSize, offset);\r\n    }\r\n    SimpleBuffer.ensureLittleEndian = ensureLittleEndian;\r\n})(SimpleBuffer || (SimpleBuffer = {}));\r\n//# sourceMappingURL=simple-buffer.js.map"]},"metadata":{},"sourceType":"module"}