{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { getMoleculeType, getDefaultChemicalComponent } from '../../../mol-model/structure/model/types';\nimport { SaccharidesSnfgMap, SaccharideCompIdMap, UnknownSaccharideComponent } from '../../../mol-model/structure/structure/carbohydrates/constants';\nimport { memoize1 } from '../../../mol-util/memoize';\nimport { Table } from '../../../mol-data/db';\n\nfunction getMissingResidues(data) {\n  var map = new Map();\n\n  var getKey = function (model_num, asym_id, seq_id) {\n    return model_num + \"|\" + asym_id + \"|\" + seq_id;\n  };\n\n  var c = data.pdbx_unobs_or_zero_occ_residues;\n\n  for (var i = 0, il = c._rowCount; i < il; ++i) {\n    var key = getKey(c.PDB_model_num.value(i), c.label_asym_id.value(i), c.label_seq_id.value(i));\n    map.set(key, {\n      polymer_flag: c.polymer_flag.value(i),\n      occupancy_flag: c.occupancy_flag.value(i)\n    });\n  }\n\n  return {\n    has: function (model_num, asym_id, seq_id) {\n      return map.has(getKey(model_num, asym_id, seq_id));\n    },\n    get: function (model_num, asym_id, seq_id) {\n      return map.get(getKey(model_num, asym_id, seq_id));\n    },\n    size: map.size\n  };\n}\n\nfunction getChemicalComponentMap(data) {\n  var map = new Map();\n\n  if (data.chem_comp._rowCount > 0) {\n    var id = data.chem_comp.id;\n\n    for (var i = 0, il = id.rowCount; i < il; ++i) {\n      map.set(id.value(i), Table.getRow(data.chem_comp, i));\n    }\n  } else {\n    var uniqueNames = getUniqueComponentNames(data);\n    uniqueNames.forEach(function (n) {\n      map.set(n, getDefaultChemicalComponent(n));\n    });\n  }\n\n  return map;\n}\n\nfunction getSaccharideComponentMap(data) {\n  var map = new Map();\n\n  if (data.pdbx_chem_comp_identifier._rowCount > 0) {\n    // note that `pdbx_chem_comp_identifier` does not contain\n    // a 'SNFG CARBOHYDRATE SYMBOL' entry for 'Unknown' saccharide components\n    // so we always need to check `chem_comp` for those\n    var _a = data.pdbx_chem_comp_identifier,\n        comp_id = _a.comp_id,\n        type = _a.type,\n        identifier = _a.identifier;\n\n    for (var i = 0, il = comp_id.rowCount; i < il; ++i) {\n      if (type.value(i) === 'SNFG CARBOHYDRATE SYMBOL' || type.value(i) === 'SNFG CARB SYMBOL' // legacy, to be removed from mmCIF dictionary\n      ) {\n        var snfgName = identifier.value(i);\n        var saccharideComp = SaccharidesSnfgMap.get(snfgName);\n\n        if (saccharideComp) {\n          map.set(comp_id.value(i), saccharideComp);\n        } else {\n          console.warn(\"Unknown SNFG name '\" + snfgName + \"'\");\n        }\n      }\n    }\n  }\n\n  if (data.chem_comp._rowCount > 0) {\n    var _b = data.chem_comp,\n        id = _b.id,\n        type = _b.type;\n\n    for (var i = 0, il = id.rowCount; i < il; ++i) {\n      var _id = id.value(i);\n\n      if (map.has(_id)) continue;\n\n      var _type = type.value(i);\n\n      if (SaccharideCompIdMap.has(_id)) {\n        map.set(_id, SaccharideCompIdMap.get(_id));\n      } else if (getMoleculeType(_type, _id) === 9\n      /* Saccharide */\n      ) {\n        map.set(_id, UnknownSaccharideComponent);\n      }\n    }\n  } else {\n    var uniqueNames_1 = getUniqueComponentNames(data);\n    SaccharideCompIdMap.forEach(function (v, k) {\n      if (!map.has(k) && uniqueNames_1.has(k)) map.set(k, v);\n    });\n  }\n\n  return map;\n}\n\nvar getUniqueComponentNames = memoize1(function (data) {\n  var uniqueNames = new Set();\n  var _a = data.atom_site,\n      label_comp_id = _a.label_comp_id,\n      auth_comp_id = _a.auth_comp_id;\n  var comp_id = label_comp_id.isDefined ? label_comp_id : auth_comp_id;\n\n  for (var i = 0, il = comp_id.rowCount; i < il; ++i) {\n    uniqueNames.add(comp_id.value(i));\n  }\n\n  return uniqueNames;\n});\n\nfunction getStructAsymMap(data) {\n  var map = new Map();\n  var _a = data.atom_site,\n      label_asym_id = _a.label_asym_id,\n      auth_asym_id = _a.auth_asym_id,\n      label_entity_id = _a.label_entity_id;\n\n  for (var i = 0, il = label_asym_id.rowCount; i < il; ++i) {\n    var id = label_asym_id.value(i);\n\n    if (!map.has(id)) {\n      map.set(id, {\n        id: id,\n        auth_id: auth_asym_id.value(i),\n        entity_id: label_entity_id.value(i)\n      });\n    }\n  }\n\n  if (data.struct_asym._rowCount > 0) {\n    var _b = data.struct_asym,\n        id = _b.id,\n        entity_id = _b.entity_id;\n\n    for (var i = 0, il = id.rowCount; i < il; ++i) {\n      var _id = id.value(i);\n\n      if (!map.has(_id)) {\n        map.set(_id, {\n          id: _id,\n          auth_id: '',\n          entity_id: entity_id.value(i)\n        });\n      }\n    }\n  }\n\n  return map;\n}\n\nexport function getProperties(data) {\n  return {\n    missingResidues: getMissingResidues(data),\n    chemicalComponentMap: getChemicalComponentMap(data),\n    saccharideComponentMap: getSaccharideComponentMap(data),\n    structAsymMap: getStructAsymMap(data)\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/properties.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { getMoleculeType, getDefaultChemicalComponent } from '../../../mol-model/structure/model/types';\r\nimport { SaccharidesSnfgMap, SaccharideCompIdMap, UnknownSaccharideComponent } from '../../../mol-model/structure/structure/carbohydrates/constants';\r\nimport { memoize1 } from '../../../mol-util/memoize';\r\nimport { Table } from '../../../mol-data/db';\r\nfunction getMissingResidues(data) {\r\n    var map = new Map();\r\n    var getKey = function (model_num, asym_id, seq_id) {\r\n        return model_num + \"|\" + asym_id + \"|\" + seq_id;\r\n    };\r\n    var c = data.pdbx_unobs_or_zero_occ_residues;\r\n    for (var i = 0, il = c._rowCount; i < il; ++i) {\r\n        var key = getKey(c.PDB_model_num.value(i), c.label_asym_id.value(i), c.label_seq_id.value(i));\r\n        map.set(key, { polymer_flag: c.polymer_flag.value(i), occupancy_flag: c.occupancy_flag.value(i) });\r\n    }\r\n    return {\r\n        has: function (model_num, asym_id, seq_id) {\r\n            return map.has(getKey(model_num, asym_id, seq_id));\r\n        },\r\n        get: function (model_num, asym_id, seq_id) {\r\n            return map.get(getKey(model_num, asym_id, seq_id));\r\n        },\r\n        size: map.size\r\n    };\r\n}\r\nfunction getChemicalComponentMap(data) {\r\n    var map = new Map();\r\n    if (data.chem_comp._rowCount > 0) {\r\n        var id = data.chem_comp.id;\r\n        for (var i = 0, il = id.rowCount; i < il; ++i) {\r\n            map.set(id.value(i), Table.getRow(data.chem_comp, i));\r\n        }\r\n    }\r\n    else {\r\n        var uniqueNames = getUniqueComponentNames(data);\r\n        uniqueNames.forEach(function (n) {\r\n            map.set(n, getDefaultChemicalComponent(n));\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction getSaccharideComponentMap(data) {\r\n    var map = new Map();\r\n    if (data.pdbx_chem_comp_identifier._rowCount > 0) {\r\n        // note that `pdbx_chem_comp_identifier` does not contain\r\n        // a 'SNFG CARBOHYDRATE SYMBOL' entry for 'Unknown' saccharide components\r\n        // so we always need to check `chem_comp` for those\r\n        var _a = data.pdbx_chem_comp_identifier, comp_id = _a.comp_id, type = _a.type, identifier = _a.identifier;\r\n        for (var i = 0, il = comp_id.rowCount; i < il; ++i) {\r\n            if (type.value(i) === 'SNFG CARBOHYDRATE SYMBOL' ||\r\n                type.value(i) === 'SNFG CARB SYMBOL' // legacy, to be removed from mmCIF dictionary\r\n            ) {\r\n                var snfgName = identifier.value(i);\r\n                var saccharideComp = SaccharidesSnfgMap.get(snfgName);\r\n                if (saccharideComp) {\r\n                    map.set(comp_id.value(i), saccharideComp);\r\n                }\r\n                else {\r\n                    console.warn(\"Unknown SNFG name '\" + snfgName + \"'\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data.chem_comp._rowCount > 0) {\r\n        var _b = data.chem_comp, id = _b.id, type = _b.type;\r\n        for (var i = 0, il = id.rowCount; i < il; ++i) {\r\n            var _id = id.value(i);\r\n            if (map.has(_id))\r\n                continue;\r\n            var _type = type.value(i);\r\n            if (SaccharideCompIdMap.has(_id)) {\r\n                map.set(_id, SaccharideCompIdMap.get(_id));\r\n            }\r\n            else if (getMoleculeType(_type, _id) === 9 /* Saccharide */) {\r\n                map.set(_id, UnknownSaccharideComponent);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        var uniqueNames_1 = getUniqueComponentNames(data);\r\n        SaccharideCompIdMap.forEach(function (v, k) {\r\n            if (!map.has(k) && uniqueNames_1.has(k))\r\n                map.set(k, v);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nvar getUniqueComponentNames = memoize1(function (data) {\r\n    var uniqueNames = new Set();\r\n    var _a = data.atom_site, label_comp_id = _a.label_comp_id, auth_comp_id = _a.auth_comp_id;\r\n    var comp_id = label_comp_id.isDefined ? label_comp_id : auth_comp_id;\r\n    for (var i = 0, il = comp_id.rowCount; i < il; ++i) {\r\n        uniqueNames.add(comp_id.value(i));\r\n    }\r\n    return uniqueNames;\r\n});\r\nfunction getStructAsymMap(data) {\r\n    var map = new Map();\r\n    var _a = data.atom_site, label_asym_id = _a.label_asym_id, auth_asym_id = _a.auth_asym_id, label_entity_id = _a.label_entity_id;\r\n    for (var i = 0, il = label_asym_id.rowCount; i < il; ++i) {\r\n        var id = label_asym_id.value(i);\r\n        if (!map.has(id)) {\r\n            map.set(id, {\r\n                id: id,\r\n                auth_id: auth_asym_id.value(i),\r\n                entity_id: label_entity_id.value(i)\r\n            });\r\n        }\r\n    }\r\n    if (data.struct_asym._rowCount > 0) {\r\n        var _b = data.struct_asym, id = _b.id, entity_id = _b.entity_id;\r\n        for (var i = 0, il = id.rowCount; i < il; ++i) {\r\n            var _id = id.value(i);\r\n            if (!map.has(_id)) {\r\n                map.set(_id, {\r\n                    id: _id,\r\n                    auth_id: '',\r\n                    entity_id: entity_id.value(i)\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return map;\r\n}\r\nexport function getProperties(data) {\r\n    return {\r\n        missingResidues: getMissingResidues(data),\r\n        chemicalComponentMap: getChemicalComponentMap(data),\r\n        saccharideComponentMap: getSaccharideComponentMap(data),\r\n        structAsymMap: getStructAsymMap(data)\r\n    };\r\n}\r\n//# sourceMappingURL=properties.js.map"]},"metadata":{},"sourceType":"module"}