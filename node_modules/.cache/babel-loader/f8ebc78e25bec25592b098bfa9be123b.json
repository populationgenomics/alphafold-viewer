{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { StateTransforms } from '../transforms';\nimport { DataFormatProvider } from './provider';\nexport var ShapeFormatCategory = 'Shape';\nexport var PlyProvider = DataFormatProvider({\n  label: 'PLY',\n  description: 'PLY',\n  category: ShapeFormatCategory,\n  stringExtensions: ['ply'],\n  parse: function (plugin, data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, shape;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.state.data.build().to(data).apply(StateTransforms.Data.ParsePly, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            shape = format.apply(StateTransforms.Model.ShapeFromPly);\n            return [4\n            /*yield*/\n            , format.commit()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              format: format.selector,\n              shape: shape.selector\n            }];\n        }\n      });\n    });\n  },\n  visuals: function (plugin, data) {\n    var repr = plugin.state.data.build().to(data.shape).apply(StateTransforms.Representation.ShapeRepresentation3D);\n    return repr.commit();\n  }\n});\nexport var BuiltInShapeFormats = [['ply', PlyProvider]];","map":{"version":3,"sources":["../../../src/mol-plugin-state/formats/shape.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,eAAT,QAAgC,eAAhC;AACA,SAAS,kBAAT,QAAmC,YAAnC;AAKA,OAAO,IAAM,mBAAmB,GAAG,OAA5B;AAEP,OAAO,IAAM,WAAW,GAAG,kBAAkB,CAAC;AAC1C,EAAA,KAAK,EAAE,KADmC;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,QAAQ,EAAE,mBAHgC;AAI1C,EAAA,gBAAgB,EAAE,CAAC,KAAD,CAJwB;AAK1C,EAAA,KAAK,EAAE,UAAO,MAAP,EAAe,IAAf,EAAmB;AAAA,WAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAChB,YAAA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,KAAlB,GACV,EADU,CACP,IADO,EAEV,KAFU,CAEJ,eAAe,CAAC,IAAhB,CAAqB,QAFjB,EAE2B,EAF3B,EAE+B;AAAE,cAAA,KAAK,EAAE;AAAE,gBAAA,OAAO,EAAE;AAAX;AAAT,aAF/B,CAAT;AAIA,YAAA,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,eAAe,CAAC,KAAhB,CAAsB,YAAnC,CAAR;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,MAAP,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO;AAAE,cAAA,MAAM,EAAE,MAAM,CAAC,QAAjB;AAA2B,cAAA,KAAK,EAAE,KAAK,CAAC;AAAxC,aAAP,CAAA;;;KATsB,CAAA;AAUzB,GAfyC;AAgB1C,EAAA,OAAO,EAAP,UAAQ,MAAR,EAA+B,IAA/B,EAAgG;AAC5F,QAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,KAAlB,GACR,EADQ,CACL,IAAI,CAAC,KADA,EAER,KAFQ,CAEF,eAAe,CAAC,cAAhB,CAA+B,qBAF7B,CAAb;AAGA,WAAO,IAAI,CAAC,MAAL,EAAP;AACH;AArByC,CAAD,CAAtC;AAwBP,OAAO,IAAM,mBAAmB,GAAG,CAC/B,CAAC,KAAD,EAAQ,WAAR,CAD+B,CAA5B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { StateTransforms } from '../transforms';\r\nimport { DataFormatProvider } from './provider';\r\nexport var ShapeFormatCategory = 'Shape';\r\nexport var PlyProvider = DataFormatProvider({\r\n    label: 'PLY',\r\n    description: 'PLY',\r\n    category: ShapeFormatCategory,\r\n    stringExtensions: ['ply'],\r\n    parse: function (plugin, data) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, shape;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.state.data.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParsePly, {}, { state: { isGhost: true } });\r\n                    shape = format.apply(StateTransforms.Model.ShapeFromPly);\r\n                    return [4 /*yield*/, format.commit()];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { format: format.selector, shape: shape.selector }];\r\n            }\r\n        });\r\n    }); },\r\n    visuals: function (plugin, data) {\r\n        var repr = plugin.state.data.build()\r\n            .to(data.shape)\r\n            .apply(StateTransforms.Representation.ShapeRepresentation3D);\r\n        return repr.commit();\r\n    }\r\n});\r\nexport var BuiltInShapeFormats = [\r\n    ['ply', PlyProvider],\r\n];\r\n//# sourceMappingURL=shape.js.map"]},"metadata":{},"sourceType":"module"}