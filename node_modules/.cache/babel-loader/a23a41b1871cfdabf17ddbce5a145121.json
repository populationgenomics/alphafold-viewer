{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createComputeRenderable } from '../../renderable';\nimport { createComputeRenderItem } from '../../webgl/render-item';\nimport { TextureSpec, UniformSpec, DefineSpec } from '../../renderable/schema';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { ValueCell } from '../../../mol-util';\nimport { QuadSchema, QuadValues } from '../util';\nimport { createHistogramPyramid } from '../histogram-pyramid/reduction';\nimport { getTriIndices } from './tables';\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\nimport { isosurface_frag } from '../../../mol-gl/shader/marching-cubes/isosurface.frag';\nimport { calcActiveVoxels } from './active-voxels';\nimport { isWebGL2 } from '../../webgl/compat';\n\nvar IsosurfaceSchema = __assign(__assign({}, QuadSchema), {\n  tTriIndices: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\n  tActiveVoxelsPyramid: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  tActiveVoxelsBase: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  tVolumeData: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),\n  uIsoValue: UniformSpec('f'),\n  uSize: UniformSpec('f'),\n  uLevels: UniformSpec('f'),\n  uCount: UniformSpec('f'),\n  uInvert: UniformSpec('b'),\n  uGridDim: UniformSpec('v3'),\n  uGridTexDim: UniformSpec('v3'),\n  uGridTransform: UniformSpec('m4'),\n  uScale: UniformSpec('v2'),\n  dPackedGroup: DefineSpec('boolean')\n});\n\nvar IsosurfaceName = 'isosurface';\n\nfunction getIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup) {\n  if (ctx.namedComputeRenderables[IsosurfaceName]) {\n    var v = ctx.namedComputeRenderables[IsosurfaceName].values;\n    ValueCell.update(v.tActiveVoxelsPyramid, activeVoxelsPyramid);\n    ValueCell.update(v.tActiveVoxelsBase, activeVoxelsBase);\n    ValueCell.update(v.tVolumeData, volumeData);\n    ValueCell.updateIfChanged(v.uIsoValue, isoValue);\n    ValueCell.updateIfChanged(v.uSize, Math.pow(2, levels));\n    ValueCell.updateIfChanged(v.uLevels, levels);\n    ValueCell.updateIfChanged(v.uCount, count);\n    ValueCell.updateIfChanged(v.uInvert, invert);\n    ValueCell.update(v.uGridDim, gridDim);\n    ValueCell.update(v.uGridTexDim, gridTexDim);\n    ValueCell.update(v.uGridTransform, transform);\n    ValueCell.update(v.uScale, scale);\n    ValueCell.update(v.dPackedGroup, packedGroup);\n    ctx.namedComputeRenderables[IsosurfaceName].update();\n  } else {\n    ctx.namedComputeRenderables[IsosurfaceName] = createIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup);\n  }\n\n  return ctx.namedComputeRenderables[IsosurfaceName];\n}\n\nfunction createIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup) {\n  // console.log('uSize', Math.pow(2, levels))\n  var values = __assign(__assign({}, QuadValues), {\n    tTriIndices: ValueCell.create(getTriIndices()),\n    tActiveVoxelsPyramid: ValueCell.create(activeVoxelsPyramid),\n    tActiveVoxelsBase: ValueCell.create(activeVoxelsBase),\n    tVolumeData: ValueCell.create(volumeData),\n    uIsoValue: ValueCell.create(isoValue),\n    uSize: ValueCell.create(Math.pow(2, levels)),\n    uLevels: ValueCell.create(levels),\n    uCount: ValueCell.create(count),\n    uInvert: ValueCell.create(invert),\n    uGridDim: ValueCell.create(gridDim),\n    uGridTexDim: ValueCell.create(gridTexDim),\n    uGridTransform: ValueCell.create(transform),\n    uScale: ValueCell.create(scale),\n    dPackedGroup: ValueCell.create(packedGroup)\n  });\n\n  var schema = __assign({}, IsosurfaceSchema);\n\n  var shaderCode = ShaderCode('isosurface', quad_vert, isosurface_frag, {\n    drawBuffers: 'required'\n  });\n  var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setRenderingDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.disable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.disable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.colorMask(true, true, true, true);\n  state.clearColor(0, 0, 0, 0);\n}\n\nexport function createIsosurfaceBuffers(ctx, activeVoxelsBase, volumeData, histogramPyramid, gridDim, gridTexDim, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture) {\n  var gl = ctx.gl,\n      resources = ctx.resources,\n      extensions = ctx.extensions;\n  var pyramidTex = histogramPyramid.pyramidTex,\n      height = histogramPyramid.height,\n      levels = histogramPyramid.levels,\n      scale = histogramPyramid.scale,\n      count = histogramPyramid.count;\n  var width = pyramidTex.getWidth(); // console.log('width', width, 'height', height);\n  // console.log('iso', 'gridDim', gridDim, 'scale', scale, 'gridTexDim', gridTexDim);\n  // console.log('iso volumeData', volumeData);\n\n  if (!ctx.namedFramebuffers[IsosurfaceName]) {\n    ctx.namedFramebuffers[IsosurfaceName] = resources.framebuffer();\n  }\n\n  var framebuffer = ctx.namedFramebuffers[IsosurfaceName];\n\n  if (isWebGL2(gl)) {\n    if (!vertexTexture) {\n      vertexTexture = extensions.colorBufferHalfFloat && extensions.textureHalfFloat ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest') : resources.texture('image-float32', 'rgba', 'float', 'nearest');\n    }\n\n    if (!groupTexture) {\n      groupTexture = resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\n    }\n\n    if (!normalTexture) {\n      normalTexture = extensions.colorBufferHalfFloat && extensions.textureHalfFloat ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest') : resources.texture('image-float32', 'rgba', 'float', 'nearest');\n    }\n  } else {\n    // in webgl1 drawbuffers must be in the same format for some reason\n    // this is quite wasteful but good enough for medium size meshes\n    if (!vertexTexture) {\n      vertexTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\n    }\n\n    if (!groupTexture) {\n      groupTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\n    }\n\n    if (!normalTexture) {\n      normalTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\n    }\n  }\n\n  vertexTexture.define(width, height);\n  groupTexture.define(width, height);\n  normalTexture.define(width, height);\n  vertexTexture.attachFramebuffer(framebuffer, 0);\n  groupTexture.attachFramebuffer(framebuffer, 1);\n  normalTexture.attachFramebuffer(framebuffer, 2);\n  var renderable = getIsosurfaceRenderable(ctx, pyramidTex, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup);\n  ctx.state.currentRenderItemId = -1;\n  var drawBuffers = ctx.extensions.drawBuffers;\n  if (!drawBuffers) throw new Error('need WebGL draw buffers');\n  framebuffer.bind();\n  drawBuffers.drawBuffers([drawBuffers.COLOR_ATTACHMENT0, drawBuffers.COLOR_ATTACHMENT1, drawBuffers.COLOR_ATTACHMENT2]);\n  setRenderingDefaults(ctx);\n  gl.viewport(0, 0, width, height);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  renderable.render();\n  gl.finish();\n  return {\n    vertexTexture: vertexTexture,\n    groupTexture: groupTexture,\n    normalTexture: normalTexture,\n    vertexCount: count\n  };\n} //\n\n/**\r\n * GPU isosurface extraction\r\n *\r\n * Algorithm from \"High‚Äêspeed Marching Cubes using HistoPyramids\"\r\n * by C Dyken, G Ziegler, C Theobalt, HP Seidel\r\n * https://doi.org/10.1111/j.1467-8659.2008.01182.x\r\n *\r\n * Implementation based on http://www.miaumiau.cat/2016/10/stream-compaction-in-webgl/\r\n */\n\nexport function extractIsosurface(ctx, volumeData, gridDim, gridTexDim, gridTexScale, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture) {\n  // console.time('calcActiveVoxels');\n  var activeVoxelsTex = calcActiveVoxels(ctx, volumeData, gridDim, gridTexDim, isoValue, gridTexScale); // ctx.waitForGpuCommandsCompleteSync();\n  // console.timeEnd('calcActiveVoxels');\n  // console.time('createHistogramPyramid');\n\n  var compacted = createHistogramPyramid(ctx, activeVoxelsTex, gridTexScale, gridTexDim); // ctx.waitForGpuCommandsCompleteSync();\n  // console.timeEnd('createHistogramPyramid');\n  // console.time('createIsosurfaceBuffers');\n\n  var gv = createIsosurfaceBuffers(ctx, activeVoxelsTex, volumeData, compacted, gridDim, gridTexDim, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture); // ctx.waitForGpuCommandsCompleteSync();\n  // console.timeEnd('createIsosurfaceBuffers');\n\n  return gv;\n}","map":{"version":3,"sources":["../../../../src/mol-gl/compute/marching-cubes/isosurface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createComputeRenderable } from '../../renderable';\r\nimport { createComputeRenderItem } from '../../webgl/render-item';\r\nimport { TextureSpec, UniformSpec, DefineSpec } from '../../renderable/schema';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { QuadSchema, QuadValues } from '../util';\r\nimport { createHistogramPyramid } from '../histogram-pyramid/reduction';\r\nimport { getTriIndices } from './tables';\r\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\r\nimport { isosurface_frag } from '../../../mol-gl/shader/marching-cubes/isosurface.frag';\r\nimport { calcActiveVoxels } from './active-voxels';\r\nimport { isWebGL2 } from '../../webgl/compat';\r\nvar IsosurfaceSchema = __assign(__assign({}, QuadSchema), { tTriIndices: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'), tActiveVoxelsPyramid: TextureSpec('texture', 'rgba', 'float', 'nearest'), tActiveVoxelsBase: TextureSpec('texture', 'rgba', 'float', 'nearest'), tVolumeData: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'), uIsoValue: UniformSpec('f'), uSize: UniformSpec('f'), uLevels: UniformSpec('f'), uCount: UniformSpec('f'), uInvert: UniformSpec('b'), uGridDim: UniformSpec('v3'), uGridTexDim: UniformSpec('v3'), uGridTransform: UniformSpec('m4'), uScale: UniformSpec('v2'), dPackedGroup: DefineSpec('boolean') });\r\nvar IsosurfaceName = 'isosurface';\r\nfunction getIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup) {\r\n    if (ctx.namedComputeRenderables[IsosurfaceName]) {\r\n        var v = ctx.namedComputeRenderables[IsosurfaceName].values;\r\n        ValueCell.update(v.tActiveVoxelsPyramid, activeVoxelsPyramid);\r\n        ValueCell.update(v.tActiveVoxelsBase, activeVoxelsBase);\r\n        ValueCell.update(v.tVolumeData, volumeData);\r\n        ValueCell.updateIfChanged(v.uIsoValue, isoValue);\r\n        ValueCell.updateIfChanged(v.uSize, Math.pow(2, levels));\r\n        ValueCell.updateIfChanged(v.uLevels, levels);\r\n        ValueCell.updateIfChanged(v.uCount, count);\r\n        ValueCell.updateIfChanged(v.uInvert, invert);\r\n        ValueCell.update(v.uGridDim, gridDim);\r\n        ValueCell.update(v.uGridTexDim, gridTexDim);\r\n        ValueCell.update(v.uGridTransform, transform);\r\n        ValueCell.update(v.uScale, scale);\r\n        ValueCell.update(v.dPackedGroup, packedGroup);\r\n        ctx.namedComputeRenderables[IsosurfaceName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[IsosurfaceName] = createIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup);\r\n    }\r\n    return ctx.namedComputeRenderables[IsosurfaceName];\r\n}\r\nfunction createIsosurfaceRenderable(ctx, activeVoxelsPyramid, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup) {\r\n    // console.log('uSize', Math.pow(2, levels))\r\n    var values = __assign(__assign({}, QuadValues), { tTriIndices: ValueCell.create(getTriIndices()), tActiveVoxelsPyramid: ValueCell.create(activeVoxelsPyramid), tActiveVoxelsBase: ValueCell.create(activeVoxelsBase), tVolumeData: ValueCell.create(volumeData), uIsoValue: ValueCell.create(isoValue), uSize: ValueCell.create(Math.pow(2, levels)), uLevels: ValueCell.create(levels), uCount: ValueCell.create(count), uInvert: ValueCell.create(invert), uGridDim: ValueCell.create(gridDim), uGridTexDim: ValueCell.create(gridTexDim), uGridTransform: ValueCell.create(transform), uScale: ValueCell.create(scale), dPackedGroup: ValueCell.create(packedGroup) });\r\n    var schema = __assign({}, IsosurfaceSchema);\r\n    var shaderCode = ShaderCode('isosurface', quad_vert, isosurface_frag, { drawBuffers: 'required' });\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setRenderingDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.disable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.disable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.colorMask(true, true, true, true);\r\n    state.clearColor(0, 0, 0, 0);\r\n}\r\nexport function createIsosurfaceBuffers(ctx, activeVoxelsBase, volumeData, histogramPyramid, gridDim, gridTexDim, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture) {\r\n    var gl = ctx.gl, resources = ctx.resources, extensions = ctx.extensions;\r\n    var pyramidTex = histogramPyramid.pyramidTex, height = histogramPyramid.height, levels = histogramPyramid.levels, scale = histogramPyramid.scale, count = histogramPyramid.count;\r\n    var width = pyramidTex.getWidth();\r\n    // console.log('width', width, 'height', height);\r\n    // console.log('iso', 'gridDim', gridDim, 'scale', scale, 'gridTexDim', gridTexDim);\r\n    // console.log('iso volumeData', volumeData);\r\n    if (!ctx.namedFramebuffers[IsosurfaceName]) {\r\n        ctx.namedFramebuffers[IsosurfaceName] = resources.framebuffer();\r\n    }\r\n    var framebuffer = ctx.namedFramebuffers[IsosurfaceName];\r\n    if (isWebGL2(gl)) {\r\n        if (!vertexTexture) {\r\n            vertexTexture = extensions.colorBufferHalfFloat && extensions.textureHalfFloat\r\n                ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest')\r\n                : resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n        }\r\n        if (!groupTexture) {\r\n            groupTexture = resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\r\n        }\r\n        if (!normalTexture) {\r\n            normalTexture = extensions.colorBufferHalfFloat && extensions.textureHalfFloat\r\n                ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest')\r\n                : resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n        }\r\n    }\r\n    else {\r\n        // in webgl1 drawbuffers must be in the same format for some reason\r\n        // this is quite wasteful but good enough for medium size meshes\r\n        if (!vertexTexture) {\r\n            vertexTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n        }\r\n        if (!groupTexture) {\r\n            groupTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n        }\r\n        if (!normalTexture) {\r\n            normalTexture = resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n        }\r\n    }\r\n    vertexTexture.define(width, height);\r\n    groupTexture.define(width, height);\r\n    normalTexture.define(width, height);\r\n    vertexTexture.attachFramebuffer(framebuffer, 0);\r\n    groupTexture.attachFramebuffer(framebuffer, 1);\r\n    normalTexture.attachFramebuffer(framebuffer, 2);\r\n    var renderable = getIsosurfaceRenderable(ctx, pyramidTex, activeVoxelsBase, volumeData, gridDim, gridTexDim, transform, isoValue, levels, scale, count, invert, packedGroup);\r\n    ctx.state.currentRenderItemId = -1;\r\n    var drawBuffers = ctx.extensions.drawBuffers;\r\n    if (!drawBuffers)\r\n        throw new Error('need WebGL draw buffers');\r\n    framebuffer.bind();\r\n    drawBuffers.drawBuffers([\r\n        drawBuffers.COLOR_ATTACHMENT0,\r\n        drawBuffers.COLOR_ATTACHMENT1,\r\n        drawBuffers.COLOR_ATTACHMENT2,\r\n    ]);\r\n    setRenderingDefaults(ctx);\r\n    gl.viewport(0, 0, width, height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    renderable.render();\r\n    gl.finish();\r\n    return { vertexTexture: vertexTexture, groupTexture: groupTexture, normalTexture: normalTexture, vertexCount: count };\r\n}\r\n//\r\n/**\r\n * GPU isosurface extraction\r\n *\r\n * Algorithm from \"High‚Äêspeed Marching Cubes using HistoPyramids\"\r\n * by C Dyken, G Ziegler, C Theobalt, HP Seidel\r\n * https://doi.org/10.1111/j.1467-8659.2008.01182.x\r\n *\r\n * Implementation based on http://www.miaumiau.cat/2016/10/stream-compaction-in-webgl/\r\n */\r\nexport function extractIsosurface(ctx, volumeData, gridDim, gridTexDim, gridTexScale, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture) {\r\n    // console.time('calcActiveVoxels');\r\n    var activeVoxelsTex = calcActiveVoxels(ctx, volumeData, gridDim, gridTexDim, isoValue, gridTexScale);\r\n    // ctx.waitForGpuCommandsCompleteSync();\r\n    // console.timeEnd('calcActiveVoxels');\r\n    // console.time('createHistogramPyramid');\r\n    var compacted = createHistogramPyramid(ctx, activeVoxelsTex, gridTexScale, gridTexDim);\r\n    // ctx.waitForGpuCommandsCompleteSync();\r\n    // console.timeEnd('createHistogramPyramid');\r\n    // console.time('createIsosurfaceBuffers');\r\n    var gv = createIsosurfaceBuffers(ctx, activeVoxelsTex, volumeData, compacted, gridDim, gridTexDim, transform, isoValue, invert, packedGroup, vertexTexture, groupTexture, normalTexture);\r\n    // ctx.waitForGpuCommandsCompleteSync();\r\n    // console.timeEnd('createIsosurfaceBuffers');\r\n    return gv;\r\n}\r\n//# sourceMappingURL=isosurface.js.map"]},"metadata":{},"sourceType":"module"}