{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { SetUtils } from '../../../../mol-util/set';\nimport { Unit } from '../../structure';\nimport { StructureSelection } from '../selection';\nimport { structureAreIntersecting } from '../utils/structure-set';\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { checkStructureMaxRadiusDistance, checkStructureMinMaxDistance } from '../utils/structure-distance';\nimport { Structure } from '../../structure/structure';\nimport { SortedArray } from '../../../../mol-data/int';\nexport function pick(query, pred) {\n  return function (ctx) {\n    var sel = query(ctx);\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n    ctx.pushCurrentElement();\n    StructureSelection.forEach(sel, function (s, i) {\n      ctx.currentStructure = s;\n      if (pred(ctx)) ret.add(s);\n      if (i % 100) ctx.throwIfTimedOut();\n    });\n    ctx.popCurrentStructure();\n    return ret.getSelection();\n  };\n}\nexport function first(query) {\n  return function (ctx) {\n    var sel = query(ctx);\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n\n    if (sel.kind === 'singletons') {\n      if (sel.structure.elementCount > 0) {\n        var u = sel.structure.units[0];\n        var s = Structure.create([u.getChild(SortedArray.ofSingleton(u.elements[0]))], {\n          parent: ctx.inputStructure\n        });\n        ret.add(s);\n      }\n    } else {\n      if (sel.structures.length > 0) {\n        ret.add(sel.structures[0]);\n      }\n    }\n\n    return ret.getSelection();\n  };\n}\nexport function getCurrentStructureProperties(ctx, props, set) {\n  var units = ctx.currentStructure.units;\n  var l = ctx.pushCurrentElement();\n  l.structure = ctx.currentStructure;\n\n  for (var _a = 0, units_1 = units; _a < units_1.length; _a++) {\n    var unit = units_1[_a];\n    l.unit = unit;\n    var elements = unit.elements;\n    var fn = void 0;\n    if (Unit.isAtomic(unit)) fn = props.atomic;else fn = props.coarse;\n    if (!fn) continue;\n\n    for (var j = 0, _j = elements.length; j < _j; j++) {\n      l.element = elements[j];\n      set.add(fn(ctx));\n    }\n\n    ctx.throwIfTimedOut();\n  }\n\n  ctx.popCurrentElement();\n  return set;\n}\n\nfunction getSelectionProperties(ctx, query, props) {\n  var set = new Set();\n  var sel = query(ctx);\n  ctx.pushCurrentElement();\n  StructureSelection.forEach(sel, function (s, i) {\n    ctx.currentStructure = s;\n    getCurrentStructureProperties(ctx, props, set);\n    if (i % 10) ctx.throwIfTimedOut();\n  });\n  ctx.popCurrentElement();\n  return set;\n}\n\nexport function withSameAtomProperties(query, propertySource, props) {\n  return function (ctx) {\n    var sel = query(ctx);\n    var propSet = getSelectionProperties(ctx, propertySource, props);\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n    ctx.pushCurrentStructure();\n    StructureSelection.forEach(sel, function (s, i) {\n      ctx.currentStructure = s;\n      var currentProps = getCurrentStructureProperties(ctx, props, new Set());\n\n      if (SetUtils.isSuperset(currentProps, propSet)) {\n        ret.add(s);\n      }\n\n      if (i % 10) ctx.throwIfTimedOut();\n    });\n    ctx.popCurrentStructure();\n    return ret.getSelection();\n  };\n}\nexport function areIntersectedBy(query, by) {\n  return function (ctx) {\n    var mask = StructureSelection.unionStructure(by(ctx));\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n    StructureSelection.forEach(query(ctx), function (s, i) {\n      if (structureAreIntersecting(mask, s)) ret.add(s);\n      if (i % 10) ctx.throwIfTimedOut();\n    });\n    return ret.getSelection();\n  };\n}\nexport function within(params) {\n  return function (queryCtx) {\n    var ctx = {\n      queryCtx: queryCtx,\n      selection: params.query(queryCtx),\n      target: params.target(queryCtx),\n      maxRadius: params.maxRadius,\n      minRadius: params.minRadius ? Math.max(0, params.minRadius) : 0,\n      elementRadius: params.elementRadius,\n      invert: !!params.invert\n    };\n\n    if (ctx.minRadius === 0 && typeof params.minRadius === 'undefined') {\n      return withinMaxRadiusLookup(ctx);\n    } else if (ctx.minRadius === 0) {\n      return withinMaxRadius(ctx);\n    } else {\n      return withinMinMaxRadius(ctx);\n    }\n  };\n}\n\nfunction withinMaxRadiusLookup(_a) {\n  var queryCtx = _a.queryCtx,\n      selection = _a.selection,\n      target = _a.target,\n      maxRadius = _a.maxRadius,\n      invert = _a.invert;\n  var targetLookup = StructureSelection.unionStructure(target).lookup3d;\n  var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\n  var pos = Vec3.zero();\n  StructureSelection.forEach(selection, function (s, sI) {\n    var units = s.units;\n    var withinRadius = false;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      var unit = units[i];\n      var elements = unit.elements,\n          _a = unit.conformation,\n          position = _a.position,\n          r = _a.r;\n\n      for (var i_1 = 0, _i_1 = elements.length; i_1 < _i_1; i_1++) {\n        var e = elements[i_1];\n        position(e, pos);\n\n        if (targetLookup.check(pos[0], pos[1], pos[2], maxRadius + r(e))) {\n          withinRadius = true;\n          break;\n        }\n      }\n\n      if (withinRadius) break;\n    }\n\n    if (invert) withinRadius = !withinRadius;\n    if (withinRadius) ret.add(s);\n    if (sI % 10 === 0) queryCtx.throwIfTimedOut();\n  });\n  return ret.getSelection();\n}\n\nfunction withinMaxRadius(_a) {\n  var queryCtx = _a.queryCtx,\n      selection = _a.selection,\n      target = _a.target,\n      maxRadius = _a.maxRadius,\n      invert = _a.invert,\n      elementRadius = _a.elementRadius;\n  var targetStructure = StructureSelection.unionStructure(target);\n  var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\n  queryCtx.pushCurrentElement();\n  StructureSelection.forEach(selection, function (s, sI) {\n    var withinRadius = checkStructureMaxRadiusDistance(queryCtx, targetStructure, s, maxRadius, elementRadius);\n    if (invert) withinRadius = !withinRadius;\n    if (withinRadius) ret.add(s);\n    if (sI % 10 === 0) queryCtx.throwIfTimedOut();\n  });\n  queryCtx.popCurrentElement();\n  return ret.getSelection();\n}\n\nfunction withinMinMaxRadius(_a) {\n  var queryCtx = _a.queryCtx,\n      selection = _a.selection,\n      target = _a.target,\n      minRadius = _a.minRadius,\n      maxRadius = _a.maxRadius,\n      invert = _a.invert,\n      elementRadius = _a.elementRadius;\n  var targetStructure = StructureSelection.unionStructure(target);\n  var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\n  queryCtx.pushCurrentElement();\n  StructureSelection.forEach(selection, function (s, sI) {\n    var withinRadius = checkStructureMinMaxDistance(queryCtx, targetStructure, s, minRadius, maxRadius, elementRadius);\n    if (invert) withinRadius = !withinRadius;\n    if (withinRadius) ret.add(s);\n    if (sI % 10 === 0) queryCtx.throwIfTimedOut();\n  });\n  queryCtx.popCurrentElement();\n  return ret.getSelection();\n}\n\nfunction checkConnected(ctx, structure) {\n  var queryCtx = ctx.queryCtx,\n      input = ctx.input,\n      target = ctx.target,\n      disjunct = ctx.disjunct;\n  var atomicBond = queryCtx.atomicBond;\n  var interBonds = input.interUnitBonds;\n  atomicBond.setStructure(input);\n\n  for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n    if (!Unit.isAtomic(unit)) continue;\n    var inputUnit = input.unitMap.get(unit.id);\n    var _c = inputUnit.bonds,\n        offset = _c.offset,\n        b = _c.b,\n        _d = _c.edgeProps,\n        flags = _d.flags,\n        order = _d.order;\n    var bondedUnits = interBonds.getConnectedUnits(unit.id);\n    var buCount = bondedUnits.length;\n    var srcElements = unit.elements;\n    var inputElements = inputUnit.elements;\n\n    for (var i = 0, _i = srcElements.length; i < _i; i++) {\n      var inputIndex = SortedArray.indexOf(inputElements, srcElements[i]);\n      atomicBond.a.unit = inputUnit;\n      atomicBond.b.unit = inputUnit; // tElement.unit = unit;\n\n      for (var l = offset[inputIndex], _l = offset[inputIndex + 1]; l < _l; l++) {\n        // tElement.element = inputElements[b[l]];\n        atomicBond.b.element = inputUnit.elements[b[l]];\n        if (disjunct && SortedArray.has(unit.elements, atomicBond.b.element)) continue;\n        if (!target.hasElement(atomicBond.b)) continue;\n        atomicBond.aIndex = inputIndex;\n        atomicBond.a.element = srcElements[i];\n        atomicBond.bIndex = b[l];\n        atomicBond.type = flags[l];\n        atomicBond.order = order[l];\n        if (atomicBond.test(queryCtx, true)) return true;\n      }\n\n      for (var li = 0; li < buCount; li++) {\n        var lu = bondedUnits[li];\n        var bUnit = input.unitMap.get(lu.unitB);\n        var bElements = bUnit.elements;\n        var bonds = lu.getEdges(inputIndex);\n\n        for (var bi = 0, _bi = bonds.length; bi < _bi; bi++) {\n          var bond = bonds[bi];\n          atomicBond.b.unit = bUnit;\n          atomicBond.b.element = bElements[bond.indexB];\n          if (!target.hasElement(atomicBond.b)) continue;\n          if (disjunct && structure.hasElement(atomicBond.b)) continue;\n          atomicBond.a.unit = inputUnit;\n          atomicBond.aIndex = inputIndex;\n          atomicBond.a.element = srcElements[i];\n          atomicBond.bIndex = bond.indexB;\n          atomicBond.type = bond.props.flag;\n          atomicBond.order = bond.props.order;\n          if (atomicBond.test(queryCtx, true)) return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function isConnectedTo(_a) {\n  var query = _a.query,\n      target = _a.target,\n      disjunct = _a.disjunct,\n      invert = _a.invert,\n      bondTest = _a.bondTest;\n  return function (ctx) {\n    var targetSel = target(ctx);\n    if (StructureSelection.isEmpty(targetSel)) return targetSel;\n    var selection = query(ctx);\n    if (StructureSelection.isEmpty(selection)) return selection;\n    var connCtx = {\n      queryCtx: ctx,\n      input: ctx.inputStructure,\n      disjunct: disjunct,\n      target: StructureSelection.unionStructure(targetSel)\n    };\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n    ctx.pushCurrentBond();\n    ctx.atomicBond.setTestFn(bondTest);\n    StructureSelection.forEach(selection, function (s, sI) {\n      if (checkConnected(connCtx, s)) {\n        ret.add(s);\n      } else if (invert) {\n        ret.add(s);\n      }\n\n      if (sI % 5 === 0) ctx.throwIfTimedOut();\n    });\n    ctx.popCurrentBond();\n    return ret.getSelection();\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/query/queries/filters.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { SetUtils } from '../../../../mol-util/set';\r\nimport { Unit } from '../../structure';\r\nimport { StructureSelection } from '../selection';\r\nimport { structureAreIntersecting } from '../utils/structure-set';\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { checkStructureMaxRadiusDistance, checkStructureMinMaxDistance } from '../utils/structure-distance';\r\nimport { Structure } from '../../structure/structure';\r\nimport { SortedArray } from '../../../../mol-data/int';\r\nexport function pick(query, pred) {\r\n    return function (ctx) {\r\n        var sel = query(ctx);\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        ctx.pushCurrentElement();\r\n        StructureSelection.forEach(sel, function (s, i) {\r\n            ctx.currentStructure = s;\r\n            if (pred(ctx))\r\n                ret.add(s);\r\n            if (i % 100)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        ctx.popCurrentStructure();\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function first(query) {\r\n    return function (ctx) {\r\n        var sel = query(ctx);\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        if (sel.kind === 'singletons') {\r\n            if (sel.structure.elementCount > 0) {\r\n                var u = sel.structure.units[0];\r\n                var s = Structure.create([u.getChild(SortedArray.ofSingleton(u.elements[0]))], { parent: ctx.inputStructure });\r\n                ret.add(s);\r\n            }\r\n        }\r\n        else {\r\n            if (sel.structures.length > 0) {\r\n                ret.add(sel.structures[0]);\r\n            }\r\n        }\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function getCurrentStructureProperties(ctx, props, set) {\r\n    var units = ctx.currentStructure.units;\r\n    var l = ctx.pushCurrentElement();\r\n    l.structure = ctx.currentStructure;\r\n    for (var _a = 0, units_1 = units; _a < units_1.length; _a++) {\r\n        var unit = units_1[_a];\r\n        l.unit = unit;\r\n        var elements = unit.elements;\r\n        var fn = void 0;\r\n        if (Unit.isAtomic(unit))\r\n            fn = props.atomic;\r\n        else\r\n            fn = props.coarse;\r\n        if (!fn)\r\n            continue;\r\n        for (var j = 0, _j = elements.length; j < _j; j++) {\r\n            l.element = elements[j];\r\n            set.add(fn(ctx));\r\n        }\r\n        ctx.throwIfTimedOut();\r\n    }\r\n    ctx.popCurrentElement();\r\n    return set;\r\n}\r\nfunction getSelectionProperties(ctx, query, props) {\r\n    var set = new Set();\r\n    var sel = query(ctx);\r\n    ctx.pushCurrentElement();\r\n    StructureSelection.forEach(sel, function (s, i) {\r\n        ctx.currentStructure = s;\r\n        getCurrentStructureProperties(ctx, props, set);\r\n        if (i % 10)\r\n            ctx.throwIfTimedOut();\r\n    });\r\n    ctx.popCurrentElement();\r\n    return set;\r\n}\r\nexport function withSameAtomProperties(query, propertySource, props) {\r\n    return function (ctx) {\r\n        var sel = query(ctx);\r\n        var propSet = getSelectionProperties(ctx, propertySource, props);\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        ctx.pushCurrentStructure();\r\n        StructureSelection.forEach(sel, function (s, i) {\r\n            ctx.currentStructure = s;\r\n            var currentProps = getCurrentStructureProperties(ctx, props, new Set());\r\n            if (SetUtils.isSuperset(currentProps, propSet)) {\r\n                ret.add(s);\r\n            }\r\n            if (i % 10)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        ctx.popCurrentStructure();\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function areIntersectedBy(query, by) {\r\n    return function (ctx) {\r\n        var mask = StructureSelection.unionStructure(by(ctx));\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        StructureSelection.forEach(query(ctx), function (s, i) {\r\n            if (structureAreIntersecting(mask, s))\r\n                ret.add(s);\r\n            if (i % 10)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function within(params) {\r\n    return function (queryCtx) {\r\n        var ctx = {\r\n            queryCtx: queryCtx,\r\n            selection: params.query(queryCtx),\r\n            target: params.target(queryCtx),\r\n            maxRadius: params.maxRadius,\r\n            minRadius: params.minRadius ? Math.max(0, params.minRadius) : 0,\r\n            elementRadius: params.elementRadius,\r\n            invert: !!params.invert,\r\n        };\r\n        if (ctx.minRadius === 0 && typeof params.minRadius === 'undefined') {\r\n            return withinMaxRadiusLookup(ctx);\r\n        }\r\n        else if (ctx.minRadius === 0) {\r\n            return withinMaxRadius(ctx);\r\n        }\r\n        else {\r\n            return withinMinMaxRadius(ctx);\r\n        }\r\n    };\r\n}\r\nfunction withinMaxRadiusLookup(_a) {\r\n    var queryCtx = _a.queryCtx, selection = _a.selection, target = _a.target, maxRadius = _a.maxRadius, invert = _a.invert;\r\n    var targetLookup = StructureSelection.unionStructure(target).lookup3d;\r\n    var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\r\n    var pos = Vec3.zero();\r\n    StructureSelection.forEach(selection, function (s, sI) {\r\n        var units = s.units;\r\n        var withinRadius = false;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            var unit = units[i];\r\n            var elements = unit.elements, _a = unit.conformation, position = _a.position, r = _a.r;\r\n            for (var i_1 = 0, _i_1 = elements.length; i_1 < _i_1; i_1++) {\r\n                var e = elements[i_1];\r\n                position(e, pos);\r\n                if (targetLookup.check(pos[0], pos[1], pos[2], maxRadius + r(e))) {\r\n                    withinRadius = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (withinRadius)\r\n                break;\r\n        }\r\n        if (invert)\r\n            withinRadius = !withinRadius;\r\n        if (withinRadius)\r\n            ret.add(s);\r\n        if (sI % 10 === 0)\r\n            queryCtx.throwIfTimedOut();\r\n    });\r\n    return ret.getSelection();\r\n}\r\nfunction withinMaxRadius(_a) {\r\n    var queryCtx = _a.queryCtx, selection = _a.selection, target = _a.target, maxRadius = _a.maxRadius, invert = _a.invert, elementRadius = _a.elementRadius;\r\n    var targetStructure = StructureSelection.unionStructure(target);\r\n    var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\r\n    queryCtx.pushCurrentElement();\r\n    StructureSelection.forEach(selection, function (s, sI) {\r\n        var withinRadius = checkStructureMaxRadiusDistance(queryCtx, targetStructure, s, maxRadius, elementRadius);\r\n        if (invert)\r\n            withinRadius = !withinRadius;\r\n        if (withinRadius)\r\n            ret.add(s);\r\n        if (sI % 10 === 0)\r\n            queryCtx.throwIfTimedOut();\r\n    });\r\n    queryCtx.popCurrentElement();\r\n    return ret.getSelection();\r\n}\r\nfunction withinMinMaxRadius(_a) {\r\n    var queryCtx = _a.queryCtx, selection = _a.selection, target = _a.target, minRadius = _a.minRadius, maxRadius = _a.maxRadius, invert = _a.invert, elementRadius = _a.elementRadius;\r\n    var targetStructure = StructureSelection.unionStructure(target);\r\n    var ret = StructureSelection.LinearBuilder(queryCtx.inputStructure);\r\n    queryCtx.pushCurrentElement();\r\n    StructureSelection.forEach(selection, function (s, sI) {\r\n        var withinRadius = checkStructureMinMaxDistance(queryCtx, targetStructure, s, minRadius, maxRadius, elementRadius);\r\n        if (invert)\r\n            withinRadius = !withinRadius;\r\n        if (withinRadius)\r\n            ret.add(s);\r\n        if (sI % 10 === 0)\r\n            queryCtx.throwIfTimedOut();\r\n    });\r\n    queryCtx.popCurrentElement();\r\n    return ret.getSelection();\r\n}\r\nfunction checkConnected(ctx, structure) {\r\n    var queryCtx = ctx.queryCtx, input = ctx.input, target = ctx.target, disjunct = ctx.disjunct;\r\n    var atomicBond = queryCtx.atomicBond;\r\n    var interBonds = input.interUnitBonds;\r\n    atomicBond.setStructure(input);\r\n    for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        if (!Unit.isAtomic(unit))\r\n            continue;\r\n        var inputUnit = input.unitMap.get(unit.id);\r\n        var _c = inputUnit.bonds, offset = _c.offset, b = _c.b, _d = _c.edgeProps, flags = _d.flags, order = _d.order;\r\n        var bondedUnits = interBonds.getConnectedUnits(unit.id);\r\n        var buCount = bondedUnits.length;\r\n        var srcElements = unit.elements;\r\n        var inputElements = inputUnit.elements;\r\n        for (var i = 0, _i = srcElements.length; i < _i; i++) {\r\n            var inputIndex = SortedArray.indexOf(inputElements, srcElements[i]);\r\n            atomicBond.a.unit = inputUnit;\r\n            atomicBond.b.unit = inputUnit;\r\n            // tElement.unit = unit;\r\n            for (var l = offset[inputIndex], _l = offset[inputIndex + 1]; l < _l; l++) {\r\n                // tElement.element = inputElements[b[l]];\r\n                atomicBond.b.element = inputUnit.elements[b[l]];\r\n                if (disjunct && SortedArray.has(unit.elements, atomicBond.b.element))\r\n                    continue;\r\n                if (!target.hasElement(atomicBond.b))\r\n                    continue;\r\n                atomicBond.aIndex = inputIndex;\r\n                atomicBond.a.element = srcElements[i];\r\n                atomicBond.bIndex = b[l];\r\n                atomicBond.type = flags[l];\r\n                atomicBond.order = order[l];\r\n                if (atomicBond.test(queryCtx, true))\r\n                    return true;\r\n            }\r\n            for (var li = 0; li < buCount; li++) {\r\n                var lu = bondedUnits[li];\r\n                var bUnit = input.unitMap.get(lu.unitB);\r\n                var bElements = bUnit.elements;\r\n                var bonds = lu.getEdges(inputIndex);\r\n                for (var bi = 0, _bi = bonds.length; bi < _bi; bi++) {\r\n                    var bond = bonds[bi];\r\n                    atomicBond.b.unit = bUnit;\r\n                    atomicBond.b.element = bElements[bond.indexB];\r\n                    if (!target.hasElement(atomicBond.b))\r\n                        continue;\r\n                    if (disjunct && structure.hasElement(atomicBond.b))\r\n                        continue;\r\n                    atomicBond.a.unit = inputUnit;\r\n                    atomicBond.aIndex = inputIndex;\r\n                    atomicBond.a.element = srcElements[i];\r\n                    atomicBond.bIndex = bond.indexB;\r\n                    atomicBond.type = bond.props.flag;\r\n                    atomicBond.order = bond.props.order;\r\n                    if (atomicBond.test(queryCtx, true))\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function isConnectedTo(_a) {\r\n    var query = _a.query, target = _a.target, disjunct = _a.disjunct, invert = _a.invert, bondTest = _a.bondTest;\r\n    return function (ctx) {\r\n        var targetSel = target(ctx);\r\n        if (StructureSelection.isEmpty(targetSel))\r\n            return targetSel;\r\n        var selection = query(ctx);\r\n        if (StructureSelection.isEmpty(selection))\r\n            return selection;\r\n        var connCtx = {\r\n            queryCtx: ctx,\r\n            input: ctx.inputStructure,\r\n            disjunct: disjunct,\r\n            target: StructureSelection.unionStructure(targetSel)\r\n        };\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        ctx.pushCurrentBond();\r\n        ctx.atomicBond.setTestFn(bondTest);\r\n        StructureSelection.forEach(selection, function (s, sI) {\r\n            if (checkConnected(connCtx, s)) {\r\n                ret.add(s);\r\n            }\r\n            else if (invert) {\r\n                ret.add(s);\r\n            }\r\n            if (sI % 5 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        ctx.popCurrentBond();\r\n        return ret.getSelection();\r\n    };\r\n}\r\n//# sourceMappingURL=filters.js.map"]},"metadata":{},"sourceType":"module"}