{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { SecondaryStructure } from '../../../mol-model/structure/model/properties/seconday-structure';\nimport { SecondaryStructureType } from '../../../mol-model/structure/model/types';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { assignBends } from './dssp/bends';\nimport { calcUnitBackboneHbonds } from './dssp/backbone-hbonds';\nimport { DSSPType } from './dssp/common';\nimport { assignTurns } from './dssp/turns';\nimport { assignHelices } from './dssp/helices';\nimport { assignLadders } from './dssp/ladders';\nimport { assignBridges } from './dssp/bridges';\nimport { assignSheets } from './dssp/sheets';\nimport { calculateUnitDihedralAngles } from './dssp/dihedral-angles';\nimport { calcUnitProteinTraceLookup3D } from './dssp/trace-lookup';\nimport { getUnitProteinInfo } from './dssp/protein-info';\nimport { SortedArray } from '../../../mol-data/int';\n/**\r\n * TODO bugs to fix:\r\n * - some turns are not detected correctly: see e.g. pdb:1acj - maybe more than 2 hbonds require some residue to donate electrons\r\n * - some sheets are not extended correctly: see e.g. pdb:1acj\r\n * - validate new helix definition\r\n * - validate new ordering of secondary structure elements\r\n */\n\nexport var DSSPComputationParams = {\n  oldDefinition: PD.Boolean(true, {\n    description: 'Whether to use the old DSSP convention for the annotation of turns and helices, causes them to be two residues shorter'\n  }),\n  oldOrdering: PD.Boolean(true, {\n    description: 'Alpha-helices are preferred over 3-10 helices'\n  })\n};\nexport function computeUnitDSSP(unit, params) {\n  return __awaiter(this, void 0, void 0, function () {\n    var proteinInfo, residueIndices, lookup3d, hbonds, residueCount, flags, torsionAngles, ladders, bridges, getResidueFlag, getFlagName, ctx, assignment, type, keys, elements, getIndex, i, il, assign, flag;\n    return __generator(this, function (_a) {\n      proteinInfo = getUnitProteinInfo(unit);\n      residueIndices = proteinInfo.residueIndices;\n      lookup3d = calcUnitProteinTraceLookup3D(unit, residueIndices);\n      hbonds = calcUnitBackboneHbonds(unit, proteinInfo, lookup3d);\n      residueCount = residueIndices.length;\n      flags = new Uint32Array(residueCount);\n      torsionAngles = calculateUnitDihedralAngles(unit, proteinInfo);\n      ladders = [];\n      bridges = [];\n      getResidueFlag = params.oldDefinition ? getOriginalResidueFlag : getUpdatedResidueFlag;\n      getFlagName = params.oldOrdering ? getOriginalFlagName : getUpdatedFlagName;\n      ctx = {\n        params: params,\n        getResidueFlag: getResidueFlag,\n        getFlagName: getFlagName,\n        unit: unit,\n        proteinInfo: proteinInfo,\n        flags: flags,\n        hbonds: hbonds,\n        torsionAngles: torsionAngles,\n        ladders: ladders,\n        bridges: bridges\n      };\n      assignTurns(ctx);\n      assignHelices(ctx);\n      assignBends(ctx);\n      assignBridges(ctx);\n      assignLadders(ctx);\n      assignSheets(ctx);\n      assignment = getDSSPAssignment(flags, getResidueFlag);\n      type = new Uint32Array(residueCount);\n      keys = [];\n      elements = [];\n\n      getIndex = function (rI) {\n        return SortedArray.indexOf(residueIndices, rI);\n      };\n\n      for (i = 0, il = residueIndices.length; i < il; ++i) {\n        assign = assignment[i];\n        type[i] = assign;\n        flag = getResidueFlag(flags[i]); // console.log(i, SortedArray.indexOf(residueIndices, i), getFlagName(flags[i]))\n        // TODO is this expected behavior? elements will be strictly split depending on 'winning' flag\n\n        if (elements.length === 0\n        /* would fail at very start */\n        || flag !== elements[elements.length - 1].flags\n        /* flag changed */\n        ) {\n          elements[elements.length] = createElement(mapToKind(assign), flags[i], getResidueFlag);\n        }\n\n        keys[i] = elements.length - 1;\n      }\n\n      return [2\n      /*return*/\n      , SecondaryStructure(type, keys, elements, getIndex)];\n    });\n  });\n}\n\nfunction createElement(kind, flag, getResidueFlag) {\n  // TODO would be nice to add more detailed information\n  if (kind === 'helix') {\n    return {\n      kind: 'helix',\n      flags: getResidueFlag(flag)\n    };\n  } else if (kind === 'sheet') {\n    return {\n      kind: 'sheet',\n      flags: getResidueFlag(flag)\n    };\n  } else if (kind === 'turn' || kind === 'bend') {\n    return {\n      kind: 'turn',\n      flags: getResidueFlag(flag)\n    };\n  } else {\n    return {\n      kind: 'none'\n    };\n  }\n}\n\nfunction mapToKind(assignment) {\n  if (assignment === SecondaryStructureType.SecondaryStructureDssp.H || assignment === SecondaryStructureType.SecondaryStructureDssp.G || assignment === SecondaryStructureType.SecondaryStructureDssp.I) {\n    return 'helix';\n  } else if (assignment === SecondaryStructureType.SecondaryStructureDssp.B || assignment === SecondaryStructureType.SecondaryStructureDssp.E) {\n    return 'sheet';\n  } else if (assignment === SecondaryStructureType.SecondaryStructureDssp.T) {\n    return 'turn';\n  } else if (assignment === SecondaryStructureType.SecondaryStructureDssp.S) {\n    return 'bend';\n  } else {\n    return 'none';\n  }\n}\n/** Original priority: H,B,E,G,I,T,S */\n\n\nfunction getOriginalResidueFlag(f) {\n  if (DSSPType.is(f, 1\n  /* H */\n  )) return SecondaryStructureType.SecondaryStructureDssp.H;\n  if (DSSPType.is(f, 4\n  /* E */\n  )) return SecondaryStructureType.SecondaryStructureDssp.E;\n  if (DSSPType.is(f, 2\n  /* B */\n  )) return SecondaryStructureType.SecondaryStructureDssp.B;\n  if (DSSPType.is(f, 8\n  /* G */\n  )) return SecondaryStructureType.SecondaryStructureDssp.G;\n  if (DSSPType.is(f, 16\n  /* I */\n  )) return SecondaryStructureType.SecondaryStructureDssp.I;\n  if (DSSPType.is(f, 64\n  /* T */\n  )) return SecondaryStructureType.SecondaryStructureDssp.T;\n  if (DSSPType.is(f, 32\n  /* S */\n  )) return SecondaryStructureType.SecondaryStructureDssp.S;\n  return 0\n  /* None */\n  ;\n}\n\nfunction getOriginalFlagName(f) {\n  if (DSSPType.is(f, 1\n  /* H */\n  )) return 'H';\n  if (DSSPType.is(f, 4\n  /* E */\n  )) return 'E';\n  if (DSSPType.is(f, 2\n  /* B */\n  )) return 'B';\n  if (DSSPType.is(f, 8\n  /* G */\n  )) return 'G';\n  if (DSSPType.is(f, 16\n  /* I */\n  )) return 'I';\n  if (DSSPType.is(f, 64\n  /* T */\n  )) return 'T';\n  if (DSSPType.is(f, 32\n  /* S */\n  )) return 'S';\n  return '-';\n}\n/** Version 2.1.0 priority: I,H,B,E,G,T,S */\n\n\nfunction getUpdatedResidueFlag(f) {\n  if (DSSPType.is(f, 16\n  /* I */\n  )) return SecondaryStructureType.SecondaryStructureDssp.I;\n  if (DSSPType.is(f, 1\n  /* H */\n  )) return SecondaryStructureType.SecondaryStructureDssp.H;\n  if (DSSPType.is(f, 4\n  /* E */\n  )) return SecondaryStructureType.SecondaryStructureDssp.E;\n  if (DSSPType.is(f, 2\n  /* B */\n  )) return SecondaryStructureType.SecondaryStructureDssp.B;\n  if (DSSPType.is(f, 8\n  /* G */\n  )) return SecondaryStructureType.SecondaryStructureDssp.G;\n  if (DSSPType.is(f, 64\n  /* T */\n  )) return SecondaryStructureType.SecondaryStructureDssp.T;\n  if (DSSPType.is(f, 32\n  /* S */\n  )) return SecondaryStructureType.SecondaryStructureDssp.S;\n  return 0\n  /* None */\n  ;\n}\n\nfunction getUpdatedFlagName(f) {\n  if (DSSPType.is(f, 16\n  /* I */\n  )) return 'I';\n  if (DSSPType.is(f, 1\n  /* H */\n  )) return 'H';\n  if (DSSPType.is(f, 4\n  /* E */\n  )) return 'E';\n  if (DSSPType.is(f, 2\n  /* B */\n  )) return 'B';\n  if (DSSPType.is(f, 8\n  /* G */\n  )) return 'G';\n  if (DSSPType.is(f, 64\n  /* T */\n  )) return 'T';\n  if (DSSPType.is(f, 32\n  /* S */\n  )) return 'S';\n  return '-';\n}\n\nfunction getDSSPAssignment(flags, getResidueFlag) {\n  var type = new Uint32Array(flags.length);\n\n  for (var i = 0, il = flags.length; i < il; ++i) {\n    var f = DSSPType.create(flags[i]);\n    type[i] = getResidueFlag(f);\n  }\n\n  return type;\n}","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/secondary-structure/dssp.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,kBAAT,QAAmC,kEAAnC;AACA,SAAS,sBAAT,QAAuC,0CAAvC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAS,WAAT,QAA4B,cAA5B;AACA,SAAS,sBAAT,QAAuC,wBAAvC;AACA,SAAsC,QAAtC,QAAsD,eAAtD;AACA,SAAS,WAAT,QAA4B,cAA5B;AACA,SAAS,aAAT,QAA8B,gBAA9B;AACA,SAAS,aAAT,QAA8B,gBAA9B;AACA,SAAS,aAAT,QAA8B,gBAA9B;AACA,SAAS,YAAT,QAA6B,eAA7B;AACA,SAAS,2BAAT,QAA4C,wBAA5C;AACA,SAAS,4BAAT,QAA6C,qBAA7C;AAEA,SAAS,kBAAT,QAAmC,qBAAnC;AAEA,SAAS,WAAT,QAA4B,uBAA5B;AAEA;;;;;;AAMG;;AAEH,OAAO,IAAM,qBAAqB,GAAG;AACjC,EAAA,aAAa,EAAE,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB;AAAE,IAAA,WAAW,EAAE;AAAf,GAAjB,CADkB;AAEjC,EAAA,WAAW,EAAE,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB;AAAE,IAAA,WAAW,EAAE;AAAf,GAAjB;AAFoB,CAA9B;AAOP,OAAM,SAAgB,eAAhB,CAAgC,IAAhC,EAAmD,MAAnD,EAA+E;;;;AAC3E,MAAA,WAAW,GAAG,kBAAkB,CAAC,IAAD,CAAhC;AACE,MAAA,cAAc,GAAK,WAAW,CAAhB,cAAd;AACF,MAAA,QAAQ,GAAG,4BAA4B,CAAC,IAAD,EAAO,cAAP,CAAvC;AAEA,MAAA,MAAM,GAAG,sBAAsB,CAAC,IAAD,EAAO,WAAP,EAAoB,QAApB,CAA/B;AAEA,MAAA,YAAY,GAAG,cAAc,CAAC,MAA9B;AACA,MAAA,KAAK,GAAG,IAAI,WAAJ,CAAgB,YAAhB,CAAR;AAIA,MAAA,aAAa,GAAG,2BAA2B,CAAC,IAAD,EAAO,WAAP,CAA3C;AAEA,MAAA,OAAO,GAAa,EAApB;AACA,MAAA,OAAO,GAAa,EAApB;AAEA,MAAA,cAAc,GAAG,MAAM,CAAC,aAAP,GAAuB,sBAAvB,GAAgD,qBAAjE;AACA,MAAA,WAAW,GAAG,MAAM,CAAC,WAAP,GAAqB,mBAArB,GAA2C,kBAAzD;AAEA,MAAA,GAAG,GAAgB;AACrB,QAAA,MAAM,EAAA,MADe;AAErB,QAAA,cAAc,EAAA,cAFO;AAGrB,QAAA,WAAW,EAAA,WAHU;AAKrB,QAAA,IAAI,EAAA,IALiB;AAMrB,QAAA,WAAW,EAAA,WANU;AAOrB,QAAA,KAAK,EAAA,KAPgB;AAQrB,QAAA,MAAM,EAAA,MARe;AAUrB,QAAA,aAAa,EAAA,aAVQ;AAWrB,QAAA,OAAO,EAAA,OAXc;AAYrB,QAAA,OAAO,EAAA;AAZc,OAAnB;AAeN,MAAA,WAAW,CAAC,GAAD,CAAX;AACA,MAAA,aAAa,CAAC,GAAD,CAAb;AACA,MAAA,WAAW,CAAC,GAAD,CAAX;AACA,MAAA,aAAa,CAAC,GAAD,CAAb;AACA,MAAA,aAAa,CAAC,GAAD,CAAb;AACA,MAAA,YAAY,CAAC,GAAD,CAAZ;AAEM,MAAA,UAAU,GAAG,iBAAiB,CAAC,KAAD,EAAQ,cAAR,CAA9B;AACA,MAAA,IAAI,GAAG,IAAI,WAAJ,CAAgB,YAAhB,CAAP;AACA,MAAA,IAAI,GAAa,EAAjB;AACA,MAAA,QAAQ,GAAiC,EAAzC;;AACA,MAAA,QAAQ,GAAG,UAAC,EAAD,EAAiB;AAAK,eAAA,WAAW,CAAC,OAAZ,CAAoB,cAApB,EAAA,EAAA,CAAA;AAAuC,OAAxE;;AAEN,WAAS,CAAC,GAAG,CAAJ,EAAO,EAAE,GAAG,cAAc,CAAC,MAApC,EAA4C,CAAC,GAAG,EAAhD,EAAoD,EAAE,CAAtD,EAAyD;AAC/C,QAAA,MAAM,GAAG,UAAU,CAAC,CAAD,CAAnB;AACN,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,MAAV;AACM,QAAA,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,CAAD,CAAN,CAArB,CAH+C,CAIrD;AACA;;AACA,YAAI,QAAQ,CAAC,MAAT,KAAoB;AAAE;AAAtB,WAAwD,IAAI,KAAM,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAR,CAAgH;AAAM;AAA5L,UAAgN;AAC5M,UAAA,QAAQ,CAAC,QAAQ,CAAC,MAAV,CAAR,GAA4B,aAAa,CAAC,SAAS,CAAC,MAAD,CAAV,EAAoB,KAAK,CAAC,CAAD,CAAzB,EAA8B,cAA9B,CAAzC;AACH;;AACD,QAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,QAAQ,CAAC,MAAT,GAAkB,CAA5B;AACH;;AACD,aAAA,CAAA;AAAA;AAAA,QAAO,kBAAkB,CAAC,IAAD,EAAO,IAAP,EAAa,QAAb,EAAuB,QAAvB,CAAzB,CAAA;;;AACH;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAAqC,IAArC,EAA0D,cAA1D,EAAiH;AAC7G;AACA,MAAI,IAAI,KAAK,OAAb,EAAsB;AAClB,WAAO;AACH,MAAA,IAAI,EAAE,OADH;AAEH,MAAA,KAAK,EAAE,cAAc,CAAC,IAAD;AAFlB,KAAP;AAIH,GALD,MAKO,IAAI,IAAI,KAAK,OAAb,EAAsB;AACzB,WAAO;AACH,MAAA,IAAI,EAAE,OADH;AAEH,MAAA,KAAK,EAAE,cAAc,CAAC,IAAD;AAFlB,KAAP;AAIH,GALM,MAKA,IAAI,IAAI,KAAK,MAAT,IAAmB,IAAI,KAAK,MAAhC,EAAwC;AAC3C,WAAO;AACH,MAAA,IAAI,EAAE,MADH;AAEH,MAAA,KAAK,EAAE,cAAc,CAAC,IAAD;AAFlB,KAAP;AAIH,GALM,MAKA;AACH,WAAO;AACH,MAAA,IAAI,EAAE;AADH,KAAP;AAGH;AACJ;;AAED,SAAS,SAAT,CAAmB,UAAnB,EAA0D;AACtD,MAAI,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAA7D,IAAkE,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAA/H,IAAoI,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAArM,EAAwM;AACpM,WAAO,OAAP;AACH,GAFD,MAEO,IAAI,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAA7D,IAAkE,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAAnI,EAAsI;AACzI,WAAO,OAAP;AACH,GAFM,MAEA,IAAI,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAAjE,EAAoE;AACvE,WAAO,MAAP;AACH,GAFM,MAEA,IAAI,UAAU,KAAK,sBAAsB,CAAC,sBAAvB,CAA8C,CAAjE,EAAoE;AACvE,WAAO,MAAP;AACH,GAFM,MAEA;AACH,WAAO,MAAP;AACH;AACJ;AAED;;;AACA,SAAS,sBAAT,CAAgC,CAAhC,EAA2C;AACvC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,SAAA;AAAA;AAAA;AACH;;AAED,SAAS,mBAAT,CAA6B,CAA7B,EAAwC;AACpC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,SAAO,GAAP;AACH;AAED;;;AACA,SAAS,qBAAT,CAA+B,CAA/B,EAA0C;AACtC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,sBAAsB,CAAC,sBAAvB,CAA8C,CAArD;AACrC,SAAA;AAAA;AAAA;AACH;;AAED,SAAS,kBAAT,CAA4B,CAA5B,EAAuC;AACnC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,MAAI,QAAQ,CAAC,EAAT,CAAY,CAAZ,EAAa;AAAA;AAAb,GAAJ,EAAqC,OAAO,GAAP;AACrC,SAAO,GAAP;AACH;;AAED,SAAS,iBAAT,CAA2B,KAA3B,EAA+C,cAA/C,EAAsG;AAClG,MAAM,IAAI,GAAG,IAAI,WAAJ,CAAgB,KAAK,CAAC,MAAtB,CAAb;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,EAAE,CAA7C,EAAgD;AAC5C,QAAM,CAAC,GAAG,QAAQ,CAAC,MAAT,CAAgB,KAAK,CAAC,CAAD,CAArB,CAAV;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,cAAc,CAAC,CAAD,CAAxB;AACH;;AAED,SAAO,IAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { SecondaryStructure } from '../../../mol-model/structure/model/properties/seconday-structure';\r\nimport { SecondaryStructureType } from '../../../mol-model/structure/model/types';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { assignBends } from './dssp/bends';\r\nimport { calcUnitBackboneHbonds } from './dssp/backbone-hbonds';\r\nimport { DSSPType } from './dssp/common';\r\nimport { assignTurns } from './dssp/turns';\r\nimport { assignHelices } from './dssp/helices';\r\nimport { assignLadders } from './dssp/ladders';\r\nimport { assignBridges } from './dssp/bridges';\r\nimport { assignSheets } from './dssp/sheets';\r\nimport { calculateUnitDihedralAngles } from './dssp/dihedral-angles';\r\nimport { calcUnitProteinTraceLookup3D } from './dssp/trace-lookup';\r\nimport { getUnitProteinInfo } from './dssp/protein-info';\r\nimport { SortedArray } from '../../../mol-data/int';\r\n/**\r\n * TODO bugs to fix:\r\n * - some turns are not detected correctly: see e.g. pdb:1acj - maybe more than 2 hbonds require some residue to donate electrons\r\n * - some sheets are not extended correctly: see e.g. pdb:1acj\r\n * - validate new helix definition\r\n * - validate new ordering of secondary structure elements\r\n */\r\nexport var DSSPComputationParams = {\r\n    oldDefinition: PD.Boolean(true, { description: 'Whether to use the old DSSP convention for the annotation of turns and helices, causes them to be two residues shorter' }),\r\n    oldOrdering: PD.Boolean(true, { description: 'Alpha-helices are preferred over 3-10 helices' })\r\n};\r\nexport function computeUnitDSSP(unit, params) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var proteinInfo, residueIndices, lookup3d, hbonds, residueCount, flags, torsionAngles, ladders, bridges, getResidueFlag, getFlagName, ctx, assignment, type, keys, elements, getIndex, i, il, assign, flag;\r\n        return __generator(this, function (_a) {\r\n            proteinInfo = getUnitProteinInfo(unit);\r\n            residueIndices = proteinInfo.residueIndices;\r\n            lookup3d = calcUnitProteinTraceLookup3D(unit, residueIndices);\r\n            hbonds = calcUnitBackboneHbonds(unit, proteinInfo, lookup3d);\r\n            residueCount = residueIndices.length;\r\n            flags = new Uint32Array(residueCount);\r\n            torsionAngles = calculateUnitDihedralAngles(unit, proteinInfo);\r\n            ladders = [];\r\n            bridges = [];\r\n            getResidueFlag = params.oldDefinition ? getOriginalResidueFlag : getUpdatedResidueFlag;\r\n            getFlagName = params.oldOrdering ? getOriginalFlagName : getUpdatedFlagName;\r\n            ctx = {\r\n                params: params,\r\n                getResidueFlag: getResidueFlag,\r\n                getFlagName: getFlagName,\r\n                unit: unit,\r\n                proteinInfo: proteinInfo,\r\n                flags: flags,\r\n                hbonds: hbonds,\r\n                torsionAngles: torsionAngles,\r\n                ladders: ladders,\r\n                bridges: bridges\r\n            };\r\n            assignTurns(ctx);\r\n            assignHelices(ctx);\r\n            assignBends(ctx);\r\n            assignBridges(ctx);\r\n            assignLadders(ctx);\r\n            assignSheets(ctx);\r\n            assignment = getDSSPAssignment(flags, getResidueFlag);\r\n            type = new Uint32Array(residueCount);\r\n            keys = [];\r\n            elements = [];\r\n            getIndex = function (rI) { return SortedArray.indexOf(residueIndices, rI); };\r\n            for (i = 0, il = residueIndices.length; i < il; ++i) {\r\n                assign = assignment[i];\r\n                type[i] = assign;\r\n                flag = getResidueFlag(flags[i]);\r\n                // console.log(i, SortedArray.indexOf(residueIndices, i), getFlagName(flags[i]))\r\n                // TODO is this expected behavior? elements will be strictly split depending on 'winning' flag\r\n                if (elements.length === 0 /* would fail at very start */ || flag !== elements[elements.length - 1].flags /* flag changed */) {\r\n                    elements[elements.length] = createElement(mapToKind(assign), flags[i], getResidueFlag);\r\n                }\r\n                keys[i] = elements.length - 1;\r\n            }\r\n            return [2 /*return*/, SecondaryStructure(type, keys, elements, getIndex)];\r\n        });\r\n    });\r\n}\r\nfunction createElement(kind, flag, getResidueFlag) {\r\n    // TODO would be nice to add more detailed information\r\n    if (kind === 'helix') {\r\n        return {\r\n            kind: 'helix',\r\n            flags: getResidueFlag(flag)\r\n        };\r\n    }\r\n    else if (kind === 'sheet') {\r\n        return {\r\n            kind: 'sheet',\r\n            flags: getResidueFlag(flag)\r\n        };\r\n    }\r\n    else if (kind === 'turn' || kind === 'bend') {\r\n        return {\r\n            kind: 'turn',\r\n            flags: getResidueFlag(flag)\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            kind: 'none'\r\n        };\r\n    }\r\n}\r\nfunction mapToKind(assignment) {\r\n    if (assignment === SecondaryStructureType.SecondaryStructureDssp.H || assignment === SecondaryStructureType.SecondaryStructureDssp.G || assignment === SecondaryStructureType.SecondaryStructureDssp.I) {\r\n        return 'helix';\r\n    }\r\n    else if (assignment === SecondaryStructureType.SecondaryStructureDssp.B || assignment === SecondaryStructureType.SecondaryStructureDssp.E) {\r\n        return 'sheet';\r\n    }\r\n    else if (assignment === SecondaryStructureType.SecondaryStructureDssp.T) {\r\n        return 'turn';\r\n    }\r\n    else if (assignment === SecondaryStructureType.SecondaryStructureDssp.S) {\r\n        return 'bend';\r\n    }\r\n    else {\r\n        return 'none';\r\n    }\r\n}\r\n/** Original priority: H,B,E,G,I,T,S */\r\nfunction getOriginalResidueFlag(f) {\r\n    if (DSSPType.is(f, 1 /* H */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.H;\r\n    if (DSSPType.is(f, 4 /* E */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.E;\r\n    if (DSSPType.is(f, 2 /* B */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.B;\r\n    if (DSSPType.is(f, 8 /* G */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.G;\r\n    if (DSSPType.is(f, 16 /* I */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.I;\r\n    if (DSSPType.is(f, 64 /* T */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.T;\r\n    if (DSSPType.is(f, 32 /* S */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.S;\r\n    return 0 /* None */;\r\n}\r\nfunction getOriginalFlagName(f) {\r\n    if (DSSPType.is(f, 1 /* H */))\r\n        return 'H';\r\n    if (DSSPType.is(f, 4 /* E */))\r\n        return 'E';\r\n    if (DSSPType.is(f, 2 /* B */))\r\n        return 'B';\r\n    if (DSSPType.is(f, 8 /* G */))\r\n        return 'G';\r\n    if (DSSPType.is(f, 16 /* I */))\r\n        return 'I';\r\n    if (DSSPType.is(f, 64 /* T */))\r\n        return 'T';\r\n    if (DSSPType.is(f, 32 /* S */))\r\n        return 'S';\r\n    return '-';\r\n}\r\n/** Version 2.1.0 priority: I,H,B,E,G,T,S */\r\nfunction getUpdatedResidueFlag(f) {\r\n    if (DSSPType.is(f, 16 /* I */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.I;\r\n    if (DSSPType.is(f, 1 /* H */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.H;\r\n    if (DSSPType.is(f, 4 /* E */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.E;\r\n    if (DSSPType.is(f, 2 /* B */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.B;\r\n    if (DSSPType.is(f, 8 /* G */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.G;\r\n    if (DSSPType.is(f, 64 /* T */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.T;\r\n    if (DSSPType.is(f, 32 /* S */))\r\n        return SecondaryStructureType.SecondaryStructureDssp.S;\r\n    return 0 /* None */;\r\n}\r\nfunction getUpdatedFlagName(f) {\r\n    if (DSSPType.is(f, 16 /* I */))\r\n        return 'I';\r\n    if (DSSPType.is(f, 1 /* H */))\r\n        return 'H';\r\n    if (DSSPType.is(f, 4 /* E */))\r\n        return 'E';\r\n    if (DSSPType.is(f, 2 /* B */))\r\n        return 'B';\r\n    if (DSSPType.is(f, 8 /* G */))\r\n        return 'G';\r\n    if (DSSPType.is(f, 64 /* T */))\r\n        return 'T';\r\n    if (DSSPType.is(f, 32 /* S */))\r\n        return 'S';\r\n    return '-';\r\n}\r\nfunction getDSSPAssignment(flags, getResidueFlag) {\r\n    var type = new Uint32Array(flags.length);\r\n    for (var i = 0, il = flags.length; i < il; ++i) {\r\n        var f = DSSPType.create(flags[i]);\r\n        type[i] = getResidueFlag(f);\r\n    }\r\n    return type;\r\n}\r\n//# sourceMappingURL=dssp.js.map"]},"metadata":{},"sourceType":"module"}