{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { StateTransformer } from '../../mol-state';\nimport { shallowEqualObjects } from '../../mol-util';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\nexport { CreateGroup };\nvar CreateGroup = PluginStateTransform.BuiltIn({\n  name: 'create-group',\n  display: {\n    name: 'Group'\n  },\n  from: [],\n  to: SO.Group,\n  params: {\n    label: PD.Text('Group'),\n    description: PD.Optional(PD.Text(''))\n  }\n})({\n  apply: function (_a) {\n    var params = _a.params;\n    return new SO.Group({}, params);\n  },\n  update: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n    if (shallowEqualObjects(oldParams, newParams)) return StateTransformer.UpdateResult.Unchanged;\n    b.label = newParams.label;\n    b.description = newParams.description;\n    return StateTransformer.UpdateResult.Updated;\n  }\n}); // export { ValueRefTest };\n// type ValueRefTest = typeof ValueRefTest\n// const ValueRefTest = PluginStateTransform.BuiltIn({\n//     name: 'value-ref-test',\n//     display: { name: 'ValueRef Test' },\n//     from: SO.Root,\n//     to: SO.Data.String,\n//     params: (_, ctx: PluginContext) => {\n//         const getOptions = () => ctx.state.data.selectQ(q => q.rootsOfType(SO.Molecule.Model)).map(m => [m.transform.ref, m.obj?.label || m.transform.ref] as [string, string]);\n//         return {\n//             ref: PD.ValueRef<SO.Molecule.Model>(getOptions, ctx.state.data.tryGetCellData, { defaultRef: getOptions()[0]?.[0] })\n//         };\n//     }\n// })({\n//     apply({ params }) {\n//         const model = params.ref.getValue();\n//         console.log(model);\n//         return new SO.Data.String(`Model: ${model.label}`, { label: model.label });\n//     }\n// });","map":{"version":3,"sources":["../../../src/mol-plugin-state/transforms/misc.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,mBAAT,QAAoC,gBAApC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AACA,SAAS,iBAAiB,IAAI,EAA9B,EAAkC,oBAAlC,QAA8D,YAA9D;AAEA,SAAS,WAAT;AAEA,IAAM,WAAW,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC7C,EAAA,IAAI,EAAE,cADuC;AAE7C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAFoC;AAG7C,EAAA,IAAI,EAAE,EAHuC;AAI7C,EAAA,EAAE,EAAE,EAAE,CAAC,KAJsC;AAK7C,EAAA,MAAM,EAAE;AACJ,IAAA,KAAK,EAAE,EAAE,CAAC,IAAH,CAAQ,OAAR,CADH;AAEJ,IAAA,WAAW,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ;AAFT;AALqC,CAA7B,EASjB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAW;QAAR,MAAM,GAAA,EAAA,CAAA,M;AACV,WAAO,IAAI,EAAE,CAAC,KAAP,CAAa,EAAb,EAAiB,MAAjB,CAAP;AACH,GAHF;AAIC,EAAA,MAAM,EAAA,UAAC,EAAD,EAA4B;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;AAC5B,QAAI,mBAAmB,CAAC,SAAD,EAAY,SAAZ,CAAvB,EAA+C,OAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AAC/C,IAAA,CAAC,CAAC,KAAF,GAAU,SAAS,CAAC,KAApB;AACA,IAAA,CAAC,CAAC,WAAF,GAAgB,SAAS,CAAC,WAA1B;AACA,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;AATF,CATiB,CAApB,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { StateTransformer } from '../../mol-state';\r\nimport { shallowEqualObjects } from '../../mol-util';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\r\nexport { CreateGroup };\r\nvar CreateGroup = PluginStateTransform.BuiltIn({\r\n    name: 'create-group',\r\n    display: { name: 'Group' },\r\n    from: [],\r\n    to: SO.Group,\r\n    params: {\r\n        label: PD.Text('Group'),\r\n        description: PD.Optional(PD.Text(''))\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var params = _a.params;\r\n        return new SO.Group({}, params);\r\n    },\r\n    update: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (shallowEqualObjects(oldParams, newParams))\r\n            return StateTransformer.UpdateResult.Unchanged;\r\n        b.label = newParams.label;\r\n        b.description = newParams.description;\r\n        return StateTransformer.UpdateResult.Updated;\r\n    }\r\n});\r\n// export { ValueRefTest };\r\n// type ValueRefTest = typeof ValueRefTest\r\n// const ValueRefTest = PluginStateTransform.BuiltIn({\r\n//     name: 'value-ref-test',\r\n//     display: { name: 'ValueRef Test' },\r\n//     from: SO.Root,\r\n//     to: SO.Data.String,\r\n//     params: (_, ctx: PluginContext) => {\r\n//         const getOptions = () => ctx.state.data.selectQ(q => q.rootsOfType(SO.Molecule.Model)).map(m => [m.transform.ref, m.obj?.label || m.transform.ref] as [string, string]);\r\n//         return {\r\n//             ref: PD.ValueRef<SO.Molecule.Model>(getOptions, ctx.state.data.tryGetCellData, { defaultRef: getOptions()[0]?.[0] })\r\n//         };\r\n//     }\r\n// })({\r\n//     apply({ params }) {\r\n//         const model = params.ref.getValue();\r\n//         console.log(model);\r\n//         return new SO.Data.String(`Model: ${model.label}`, { label: model.label });\r\n//     }\r\n// });\r\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}