{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { Vec3, Mat4, EPSILON } from '../../linear-algebra';\nimport { OrderedSet } from '../../../mol-data/int';\n\nfunction Sphere3D() {\n  return Sphere3D.zero();\n}\n\n(function (Sphere3D) {\n  function hasExtrema(sphere) {\n    return sphere.extrema !== undefined;\n  }\n\n  Sphere3D.hasExtrema = hasExtrema;\n\n  function create(center, radius) {\n    return {\n      center: center,\n      radius: radius\n    };\n  }\n\n  Sphere3D.create = create;\n\n  function zero() {\n    return {\n      center: Vec3(),\n      radius: 0\n    };\n  }\n\n  Sphere3D.zero = zero;\n\n  function clone(a) {\n    var out = create(Vec3.clone(a.center), a.radius);\n    if (hasExtrema(a)) out.extrema = a.extrema.map(function (e) {\n      return Vec3.clone(e);\n    });\n    return out;\n  }\n\n  Sphere3D.clone = clone;\n\n  function set(out, center, radius) {\n    Vec3.copy(out.center, center);\n    out.radius = radius;\n    return out;\n  }\n\n  Sphere3D.set = set;\n\n  function copy(out, a) {\n    Vec3.copy(out.center, a.center);\n    out.radius = a.radius;\n    if (hasExtrema(a)) setExtrema(out, a.extrema.map(function (e) {\n      return Vec3.clone(e);\n    }));\n    return out;\n  }\n\n  Sphere3D.copy = copy;\n  /** Note that `extrema` must not be reused elsewhere */\n\n  function setExtrema(out, extrema) {\n    var _a;\n\n    if (out.extrema !== undefined) {\n      out.extrema.length = 0;\n\n      (_a = out.extrema).push.apply(_a, extrema);\n    } else {\n      out.extrema = extrema;\n    }\n\n    return out;\n  }\n\n  Sphere3D.setExtrema = setExtrema;\n\n  function computeBounding(data) {\n    var x = data.x,\n        y = data.y,\n        z = data.z,\n        indices = data.indices;\n    var cx = 0,\n        cy = 0,\n        cz = 0;\n    var radiusSq = 0;\n    var size = OrderedSet.size(indices);\n\n    for (var t = 0; t < size; t++) {\n      var i = OrderedSet.getAt(indices, t);\n      cx += x[i];\n      cy += y[i];\n      cz += z[i];\n    }\n\n    if (size > 0) {\n      cx /= size;\n      cy /= size;\n      cz /= size;\n    }\n\n    for (var t = 0; t < size; t++) {\n      var i = OrderedSet.getAt(indices, t);\n      var dx = x[i] - cx,\n          dy = y[i] - cy,\n          dz = z[i] - cz;\n      var d = dx * dx + dy * dy + dz * dz;\n      if (d > radiusSq) radiusSq = d;\n    }\n\n    return {\n      center: Vec3.create(cx, cy, cz),\n      radius: Math.sqrt(radiusSq)\n    };\n  }\n\n  Sphere3D.computeBounding = computeBounding;\n  /** Transform sphere with a Mat4 */\n\n  function transform(out, sphere, m) {\n    Vec3.transformMat4(out.center, sphere.center, m);\n    out.radius = sphere.radius * Mat4.getMaxScaleOnAxis(m);\n\n    if (hasExtrema(sphere)) {\n      setExtrema(out, sphere.extrema.map(function (e) {\n        return Vec3.transformMat4(Vec3(), e, m);\n      }));\n    }\n\n    return out;\n  }\n\n  Sphere3D.transform = transform;\n  /** Translate sphere by Vec3 */\n\n  function translate(out, sphere, v) {\n    Vec3.add(out.center, sphere.center, v);\n\n    if (hasExtrema(sphere)) {\n      setExtrema(out, sphere.extrema.map(function (e) {\n        return Vec3.add(Vec3(), e, v);\n      }));\n    }\n\n    return out;\n  }\n\n  Sphere3D.translate = translate;\n\n  function toArray(s, out, offset) {\n    Vec3.toArray(s.center, out, offset);\n    out[offset + 3] = s.radius;\n  }\n\n  Sphere3D.toArray = toArray;\n\n  function fromArray(out, array, offset) {\n    Vec3.fromArray(out.center, array, offset);\n    out.radius = array[offset + 3];\n    return out;\n  }\n\n  Sphere3D.fromArray = fromArray;\n\n  function fromBox3D(out, box) {\n    Vec3.scale(out.center, Vec3.add(out.center, box.max, box.min), 0.5);\n    out.radius = Vec3.distance(out.center, box.max);\n    Sphere3D.setExtrema(out, [Vec3.create(box.min[0], box.min[1], box.min[2]), Vec3.create(box.max[0], box.max[1], box.max[2]), Vec3.create(box.max[0], box.min[1], box.min[2]), Vec3.create(box.min[0], box.max[1], box.max[2]), Vec3.create(box.min[0], box.min[1], box.max[2]), Vec3.create(box.max[0], box.min[1], box.max[2]), Vec3.create(box.max[0], box.max[1], box.min[2]), Vec3.create(box.min[0], box.max[1], box.min[2])]);\n    return out;\n  }\n\n  Sphere3D.fromBox3D = fromBox3D;\n\n  function fromAxes3D(out, axes) {\n    Vec3.copy(out.center, axes.origin);\n    out.radius = Math.max(Vec3.magnitude(axes.dirA), Vec3.magnitude(axes.dirB), Vec3.magnitude(axes.dirC));\n    return out;\n  }\n\n  Sphere3D.fromAxes3D = fromAxes3D;\n  var tmpCenter = Vec3();\n  /** Get a tight sphere around a transformed box */\n\n  function fromDimensionsAndTransform(out, dimensions, transform) {\n    var x = dimensions[0],\n        y = dimensions[1],\n        z = dimensions[2];\n    var cpA = Vec3.create(0, 0, 0);\n    Vec3.transformMat4(cpA, cpA, transform);\n    var cpB = Vec3.create(x, y, z);\n    Vec3.transformMat4(cpB, cpB, transform);\n    var cpC = Vec3.create(x, 0, 0);\n    Vec3.transformMat4(cpC, cpC, transform);\n    var cpD = Vec3.create(0, y, z);\n    Vec3.transformMat4(cpD, cpD, transform);\n    var cpE = Vec3.create(0, 0, z);\n    Vec3.transformMat4(cpE, cpE, transform);\n    var cpF = Vec3.create(x, 0, z);\n    Vec3.transformMat4(cpF, cpF, transform);\n    var cpG = Vec3.create(x, y, 0);\n    Vec3.transformMat4(cpG, cpG, transform);\n    var cpH = Vec3.create(0, y, 0);\n    Vec3.transformMat4(cpH, cpH, transform);\n    Vec3.add(tmpCenter, cpA, cpB);\n    Vec3.scale(tmpCenter, tmpCenter, 0.5);\n    var d = Math.max(Vec3.distance(cpA, cpB), Vec3.distance(cpC, cpD));\n    Sphere3D.set(out, tmpCenter, d / 2);\n    Sphere3D.setExtrema(out, [cpA, cpB, cpC, cpD, cpE, cpF, cpG, cpH]);\n    return out;\n  }\n\n  Sphere3D.fromDimensionsAndTransform = fromDimensionsAndTransform;\n  var tmpAddVec3 = Vec3();\n\n  function addVec3(out, s, v) {\n    var d = Vec3.distance(s.center, v);\n    if (d < s.radius) return Sphere3D.copy(out, s);\n    Vec3.sub(tmpAddVec3, s.center, v);\n    Vec3.sub(tmpAddVec3, s.center, tmpAddVec3);\n    Vec3.setMagnitude(tmpAddVec3, tmpAddVec3, s.radius);\n    Vec3.scale(out.center, Vec3.add(tmpAddVec3, tmpAddVec3, v), 0.5);\n    out.radius = Vec3.distance(out.center, v);\n    return out;\n  }\n\n  Sphere3D.addVec3 = addVec3;\n  /** Expand sphere radius by another sphere */\n\n  function expandBySphere(out, sphere, by) {\n    Vec3.copy(out.center, sphere.center);\n    out.radius = Math.max(sphere.radius, Vec3.distance(sphere.center, by.center) + by.radius);\n\n    if (hasExtrema(sphere) && hasExtrema(by)) {\n      setExtrema(out, __spreadArray(__spreadArray([], sphere.extrema.map(function (e) {\n        return Vec3.clone(e);\n      }), true), by.extrema.map(function (e) {\n        return Vec3.clone(e);\n      }), true));\n    }\n\n    return out;\n  }\n\n  Sphere3D.expandBySphere = expandBySphere;\n  var tmpDir = Vec3();\n  /** Expand sphere radius by delta */\n\n  function expand(out, sphere, delta) {\n    var _a, _b;\n\n    Vec3.copy(out.center, sphere.center);\n    out.radius = sphere.radius + delta;\n\n    if (sphere.radius < 1e-12 || ((_b = (_a = sphere.extrema) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) <= 1) {\n      out.extrema = void 0;\n      return out;\n    }\n\n    if (hasExtrema(sphere)) {\n      setExtrema(out, sphere.extrema.map(function (e) {\n        Vec3.sub(tmpDir, e, sphere.center);\n        var dist = Vec3.distance(sphere.center, e);\n        Vec3.normalize(tmpDir, tmpDir);\n        return Vec3.scaleAndAdd(Vec3(), sphere.center, tmpDir, dist + delta);\n      }));\n    }\n\n    return out;\n  }\n\n  Sphere3D.expand = expand;\n  /**\r\n   * Returns whether or not the spheres have exactly the same center and radius (when compared with ===)\r\n   */\n\n  function exactEquals(a, b) {\n    return a.radius === b.radius && Vec3.exactEquals(a.center, b.center);\n  }\n\n  Sphere3D.exactEquals = exactEquals;\n  /**\r\n   * Returns whether or not the spheres have approximately the same center and radius.\r\n   */\n\n  function equals(a, b) {\n    var ar = a.radius;\n    var br = b.radius;\n    return Math.abs(ar - br) <= EPSILON * Math.max(1.0, Math.abs(ar), Math.abs(br)) && Vec3.equals(a.center, b.center);\n  }\n\n  Sphere3D.equals = equals;\n  /**\r\n   * Check if `a` includes `b`, use `extrema` of `b` when available\r\n   */\n\n  function includes(a, b) {\n    if (hasExtrema(b)) {\n      for (var _i = 0, _a = b.extrema; _i < _a.length; _i++) {\n        var e = _a[_i];\n        if (Vec3.distance(a.center, e) > a.radius) return false;\n      }\n\n      return true;\n    } else {\n      return Vec3.distance(a.center, b.center) + b.radius <= a.radius;\n    }\n  }\n\n  Sphere3D.includes = includes;\n  /** Check if `a` and `b` are overlapping */\n\n  function overlaps(a, b) {\n    return Vec3.distance(a.center, b.center) <= a.radius + b.radius;\n  }\n\n  Sphere3D.overlaps = overlaps;\n  /** Get the signed distance of `a` and `b` */\n\n  function distance(a, b) {\n    return Vec3.distance(a.center, b.center) - a.radius + b.radius;\n  }\n\n  Sphere3D.distance = distance;\n})(Sphere3D || (Sphere3D = {}));\n\nexport { Sphere3D };","map":{"version":3,"sources":["../../../../src/mol-math/geometry/primitives/sphere3d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { Vec3, Mat4, EPSILON } from '../../linear-algebra';\r\nimport { OrderedSet } from '../../../mol-data/int';\r\nfunction Sphere3D() {\r\n    return Sphere3D.zero();\r\n}\r\n(function (Sphere3D) {\r\n    function hasExtrema(sphere) {\r\n        return sphere.extrema !== undefined;\r\n    }\r\n    Sphere3D.hasExtrema = hasExtrema;\r\n    function create(center, radius) { return { center: center, radius: radius }; }\r\n    Sphere3D.create = create;\r\n    function zero() { return { center: Vec3(), radius: 0 }; }\r\n    Sphere3D.zero = zero;\r\n    function clone(a) {\r\n        var out = create(Vec3.clone(a.center), a.radius);\r\n        if (hasExtrema(a))\r\n            out.extrema = a.extrema.map(function (e) { return Vec3.clone(e); });\r\n        return out;\r\n    }\r\n    Sphere3D.clone = clone;\r\n    function set(out, center, radius) {\r\n        Vec3.copy(out.center, center);\r\n        out.radius = radius;\r\n        return out;\r\n    }\r\n    Sphere3D.set = set;\r\n    function copy(out, a) {\r\n        Vec3.copy(out.center, a.center);\r\n        out.radius = a.radius;\r\n        if (hasExtrema(a))\r\n            setExtrema(out, a.extrema.map(function (e) { return Vec3.clone(e); }));\r\n        return out;\r\n    }\r\n    Sphere3D.copy = copy;\r\n    /** Note that `extrema` must not be reused elsewhere */\r\n    function setExtrema(out, extrema) {\r\n        var _a;\r\n        if (out.extrema !== undefined) {\r\n            out.extrema.length = 0;\r\n            (_a = out.extrema).push.apply(_a, extrema);\r\n        }\r\n        else {\r\n            out.extrema = extrema;\r\n        }\r\n        return out;\r\n    }\r\n    Sphere3D.setExtrema = setExtrema;\r\n    function computeBounding(data) {\r\n        var x = data.x, y = data.y, z = data.z, indices = data.indices;\r\n        var cx = 0, cy = 0, cz = 0;\r\n        var radiusSq = 0;\r\n        var size = OrderedSet.size(indices);\r\n        for (var t = 0; t < size; t++) {\r\n            var i = OrderedSet.getAt(indices, t);\r\n            cx += x[i];\r\n            cy += y[i];\r\n            cz += z[i];\r\n        }\r\n        if (size > 0) {\r\n            cx /= size;\r\n            cy /= size;\r\n            cz /= size;\r\n        }\r\n        for (var t = 0; t < size; t++) {\r\n            var i = OrderedSet.getAt(indices, t);\r\n            var dx = x[i] - cx, dy = y[i] - cy, dz = z[i] - cz;\r\n            var d = dx * dx + dy * dy + dz * dz;\r\n            if (d > radiusSq)\r\n                radiusSq = d;\r\n        }\r\n        return { center: Vec3.create(cx, cy, cz), radius: Math.sqrt(radiusSq) };\r\n    }\r\n    Sphere3D.computeBounding = computeBounding;\r\n    /** Transform sphere with a Mat4 */\r\n    function transform(out, sphere, m) {\r\n        Vec3.transformMat4(out.center, sphere.center, m);\r\n        out.radius = sphere.radius * Mat4.getMaxScaleOnAxis(m);\r\n        if (hasExtrema(sphere)) {\r\n            setExtrema(out, sphere.extrema.map(function (e) { return Vec3.transformMat4(Vec3(), e, m); }));\r\n        }\r\n        return out;\r\n    }\r\n    Sphere3D.transform = transform;\r\n    /** Translate sphere by Vec3 */\r\n    function translate(out, sphere, v) {\r\n        Vec3.add(out.center, sphere.center, v);\r\n        if (hasExtrema(sphere)) {\r\n            setExtrema(out, sphere.extrema.map(function (e) { return Vec3.add(Vec3(), e, v); }));\r\n        }\r\n        return out;\r\n    }\r\n    Sphere3D.translate = translate;\r\n    function toArray(s, out, offset) {\r\n        Vec3.toArray(s.center, out, offset);\r\n        out[offset + 3] = s.radius;\r\n    }\r\n    Sphere3D.toArray = toArray;\r\n    function fromArray(out, array, offset) {\r\n        Vec3.fromArray(out.center, array, offset);\r\n        out.radius = array[offset + 3];\r\n        return out;\r\n    }\r\n    Sphere3D.fromArray = fromArray;\r\n    function fromBox3D(out, box) {\r\n        Vec3.scale(out.center, Vec3.add(out.center, box.max, box.min), 0.5);\r\n        out.radius = Vec3.distance(out.center, box.max);\r\n        Sphere3D.setExtrema(out, [\r\n            Vec3.create(box.min[0], box.min[1], box.min[2]),\r\n            Vec3.create(box.max[0], box.max[1], box.max[2]),\r\n            Vec3.create(box.max[0], box.min[1], box.min[2]),\r\n            Vec3.create(box.min[0], box.max[1], box.max[2]),\r\n            Vec3.create(box.min[0], box.min[1], box.max[2]),\r\n            Vec3.create(box.max[0], box.min[1], box.max[2]),\r\n            Vec3.create(box.max[0], box.max[1], box.min[2]),\r\n            Vec3.create(box.min[0], box.max[1], box.min[2]),\r\n        ]);\r\n        return out;\r\n    }\r\n    Sphere3D.fromBox3D = fromBox3D;\r\n    function fromAxes3D(out, axes) {\r\n        Vec3.copy(out.center, axes.origin);\r\n        out.radius = Math.max(Vec3.magnitude(axes.dirA), Vec3.magnitude(axes.dirB), Vec3.magnitude(axes.dirC));\r\n        return out;\r\n    }\r\n    Sphere3D.fromAxes3D = fromAxes3D;\r\n    var tmpCenter = Vec3();\r\n    /** Get a tight sphere around a transformed box */\r\n    function fromDimensionsAndTransform(out, dimensions, transform) {\r\n        var x = dimensions[0], y = dimensions[1], z = dimensions[2];\r\n        var cpA = Vec3.create(0, 0, 0);\r\n        Vec3.transformMat4(cpA, cpA, transform);\r\n        var cpB = Vec3.create(x, y, z);\r\n        Vec3.transformMat4(cpB, cpB, transform);\r\n        var cpC = Vec3.create(x, 0, 0);\r\n        Vec3.transformMat4(cpC, cpC, transform);\r\n        var cpD = Vec3.create(0, y, z);\r\n        Vec3.transformMat4(cpD, cpD, transform);\r\n        var cpE = Vec3.create(0, 0, z);\r\n        Vec3.transformMat4(cpE, cpE, transform);\r\n        var cpF = Vec3.create(x, 0, z);\r\n        Vec3.transformMat4(cpF, cpF, transform);\r\n        var cpG = Vec3.create(x, y, 0);\r\n        Vec3.transformMat4(cpG, cpG, transform);\r\n        var cpH = Vec3.create(0, y, 0);\r\n        Vec3.transformMat4(cpH, cpH, transform);\r\n        Vec3.add(tmpCenter, cpA, cpB);\r\n        Vec3.scale(tmpCenter, tmpCenter, 0.5);\r\n        var d = Math.max(Vec3.distance(cpA, cpB), Vec3.distance(cpC, cpD));\r\n        Sphere3D.set(out, tmpCenter, d / 2);\r\n        Sphere3D.setExtrema(out, [cpA, cpB, cpC, cpD, cpE, cpF, cpG, cpH]);\r\n        return out;\r\n    }\r\n    Sphere3D.fromDimensionsAndTransform = fromDimensionsAndTransform;\r\n    var tmpAddVec3 = Vec3();\r\n    function addVec3(out, s, v) {\r\n        var d = Vec3.distance(s.center, v);\r\n        if (d < s.radius)\r\n            return Sphere3D.copy(out, s);\r\n        Vec3.sub(tmpAddVec3, s.center, v);\r\n        Vec3.sub(tmpAddVec3, s.center, tmpAddVec3);\r\n        Vec3.setMagnitude(tmpAddVec3, tmpAddVec3, s.radius);\r\n        Vec3.scale(out.center, Vec3.add(tmpAddVec3, tmpAddVec3, v), 0.5);\r\n        out.radius = Vec3.distance(out.center, v);\r\n        return out;\r\n    }\r\n    Sphere3D.addVec3 = addVec3;\r\n    /** Expand sphere radius by another sphere */\r\n    function expandBySphere(out, sphere, by) {\r\n        Vec3.copy(out.center, sphere.center);\r\n        out.radius = Math.max(sphere.radius, Vec3.distance(sphere.center, by.center) + by.radius);\r\n        if (hasExtrema(sphere) && hasExtrema(by)) {\r\n            setExtrema(out, __spreadArray(__spreadArray([], sphere.extrema.map(function (e) { return Vec3.clone(e); }), true), by.extrema.map(function (e) { return Vec3.clone(e); }), true));\r\n        }\r\n        return out;\r\n    }\r\n    Sphere3D.expandBySphere = expandBySphere;\r\n    var tmpDir = Vec3();\r\n    /** Expand sphere radius by delta */\r\n    function expand(out, sphere, delta) {\r\n        var _a, _b;\r\n        Vec3.copy(out.center, sphere.center);\r\n        out.radius = sphere.radius + delta;\r\n        if (sphere.radius < 1e-12 || ((_b = (_a = sphere.extrema) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) <= 1) {\r\n            out.extrema = void 0;\r\n            return out;\r\n        }\r\n        if (hasExtrema(sphere)) {\r\n            setExtrema(out, sphere.extrema.map(function (e) {\r\n                Vec3.sub(tmpDir, e, sphere.center);\r\n                var dist = Vec3.distance(sphere.center, e);\r\n                Vec3.normalize(tmpDir, tmpDir);\r\n                return Vec3.scaleAndAdd(Vec3(), sphere.center, tmpDir, dist + delta);\r\n            }));\r\n        }\r\n        return out;\r\n    }\r\n    Sphere3D.expand = expand;\r\n    /**\r\n     * Returns whether or not the spheres have exactly the same center and radius (when compared with ===)\r\n     */\r\n    function exactEquals(a, b) {\r\n        return a.radius === b.radius && Vec3.exactEquals(a.center, b.center);\r\n    }\r\n    Sphere3D.exactEquals = exactEquals;\r\n    /**\r\n     * Returns whether or not the spheres have approximately the same center and radius.\r\n     */\r\n    function equals(a, b) {\r\n        var ar = a.radius;\r\n        var br = b.radius;\r\n        return (Math.abs(ar - br) <= EPSILON * Math.max(1.0, Math.abs(ar), Math.abs(br)) &&\r\n            Vec3.equals(a.center, b.center));\r\n    }\r\n    Sphere3D.equals = equals;\r\n    /**\r\n     * Check if `a` includes `b`, use `extrema` of `b` when available\r\n     */\r\n    function includes(a, b) {\r\n        if (hasExtrema(b)) {\r\n            for (var _i = 0, _a = b.extrema; _i < _a.length; _i++) {\r\n                var e = _a[_i];\r\n                if (Vec3.distance(a.center, e) > a.radius)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return Vec3.distance(a.center, b.center) + b.radius <= a.radius;\r\n        }\r\n    }\r\n    Sphere3D.includes = includes;\r\n    /** Check if `a` and `b` are overlapping */\r\n    function overlaps(a, b) {\r\n        return Vec3.distance(a.center, b.center) <= a.radius + b.radius;\r\n    }\r\n    Sphere3D.overlaps = overlaps;\r\n    /** Get the signed distance of `a` and `b` */\r\n    function distance(a, b) {\r\n        return Vec3.distance(a.center, b.center) - a.radius + b.radius;\r\n    }\r\n    Sphere3D.distance = distance;\r\n})(Sphere3D || (Sphere3D = {}));\r\nexport { Sphere3D };\r\n//# sourceMappingURL=sphere3d.js.map"]},"metadata":{},"sourceType":"module"}