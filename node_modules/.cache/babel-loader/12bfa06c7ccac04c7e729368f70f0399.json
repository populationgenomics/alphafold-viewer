{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { OrderedSet, SortedArray, Interval } from '../../../../mol-data/int';\nimport { Structure } from '../structure';\nimport { hashFnv32a, hash2 } from '../../../../mol-data/util';\nimport { SortedRanges } from '../../../../mol-data/int/sorted-ranges';\nimport { Loci } from './loci';\nimport { MolScriptBuilder as MS } from '../../../../mol-script/language/builder';\nimport { StructureSelection } from '../../query';\nexport var Bundle;\n\n(function (Bundle) {\n  Bundle.Empty = {\n    hash: -1,\n    elements: []\n  };\n\n  function fromSubStructure(parent, structure) {\n    return fromLoci(StructureSelection.toLociWithSourceUnits(StructureSelection.Singletons(parent, structure)));\n  }\n\n  Bundle.fromSubStructure = fromSubStructure;\n\n  function fromSelection(selection) {\n    return fromLoci(StructureSelection.toLociWithSourceUnits(selection));\n  }\n\n  Bundle.fromSelection = fromSelection;\n\n  function fromLoci(loci) {\n    var _elements = [];\n\n    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n      var e = _a[_i];\n      var unit = e.unit,\n          indices = e.indices;\n      if (OrderedSet.size(indices) === 0) continue;\n      var ranges = [];\n      var set = [];\n\n      if (OrderedSet.isInterval(indices)) {\n        if (OrderedSet.size(indices) === 1) {\n          set.push(Interval.min(indices));\n        } else {\n          ranges.push(Interval.min(indices), Interval.max(indices));\n        }\n      } else {\n        var i = 0;\n        var len = indices.length;\n\n        while (i < len) {\n          var start = i;\n          i++;\n\n          while (i < len && indices[i - 1] + 1 === indices[i]) i++;\n\n          var end = i;\n\n          if (end - start > 2) {\n            ranges.push(indices[start], indices[end - 1]);\n          } else {\n            for (var j = start; j < end; j++) {\n              set[set.length] = indices[j];\n            }\n          }\n        }\n      }\n\n      _elements.push({\n        unit: unit,\n        set: SortedArray.ofSortedArray(set),\n        ranges: SortedRanges.ofSortedRanges(ranges)\n      });\n    }\n\n    var elementGroups = new Map();\n\n    for (var i = 0, il = _elements.length; i < il; ++i) {\n      var e = _elements[i];\n      var key = hash2(hashFnv32a(e.ranges), hashFnv32a(e.set));\n\n      if (elementGroups.has(key)) {\n        var groupedUnits = elementGroups.get(key).groupedUnits;\n\n        if (groupedUnits.has(e.unit.invariantId)) {\n          groupedUnits.get(e.unit.invariantId).push(e.unit.id);\n        } else {\n          groupedUnits.set(e.unit.invariantId, [e.unit.id]);\n        }\n      } else {\n        var groupedUnits = new Map();\n        groupedUnits.set(e.unit.invariantId, [e.unit.id]);\n        elementGroups.set(key, {\n          groupedUnits: groupedUnits,\n          set: e.set,\n          ranges: e.ranges\n        });\n      }\n    }\n\n    var elements = [];\n    elementGroups.forEach(function (e) {\n      var groupedUnits = [];\n      e.groupedUnits.forEach(function (g) {\n        return groupedUnits.push(SortedArray.ofUnsortedArray(g));\n      });\n      groupedUnits.sort(function (a, b) {\n        return a[0] - b[0];\n      }); // sort by first unit id of each group\n\n      elements.push({\n        groupedUnits: groupedUnits,\n        set: e.set,\n        ranges: e.ranges\n      });\n    });\n    return {\n      hash: loci.structure.hashCode,\n      elements: elements\n    };\n  }\n\n  Bundle.fromLoci = fromLoci;\n\n  function getUnitsFromIds(unitIds, structure) {\n    var units = [];\n\n    for (var i = 0, il = unitIds.length; i < il; ++i) {\n      var unitId = unitIds[i];\n      if (structure.unitMap.has(unitId)) units.push(structure.unitMap.get(unitId));\n    }\n\n    return units;\n  }\n\n  function toLoci(bundle, structure) {\n    if (bundle.hash !== -1 && bundle.hash !== structure.hashCode) {\n      new Error('Bundle not compatible with given structure');\n    }\n\n    var elements = [];\n\n    for (var _i = 0, _a = bundle.elements; _i < _a.length; _i++) {\n      var e = _a[_i];\n\n      var _loop_1 = function (g) {\n        var units = getUnitsFromIds(g, structure);\n        if (units.length === 0) return \"continue\";\n        var indices = void 0;\n\n        if (e.ranges.length === 0) {\n          indices = e.set;\n        } else if (e.set.length === 0) {\n          if (e.ranges.length === 2) {\n            indices = Interval.ofRange(e.ranges[0], e.ranges[1]);\n          } else {\n            var _indices_1 = new Int32Array(SortedRanges.size(e.ranges));\n\n            SortedRanges.forEach(e.ranges, function (v, i) {\n              return _indices_1[i] = v;\n            });\n            indices = SortedArray.ofSortedArray(_indices_1);\n          }\n        } else {\n          var rangesSize = SortedRanges.size(e.ranges);\n\n          var _indices_2 = new Int32Array(e.set.length + rangesSize);\n\n          SortedRanges.forEach(e.ranges, function (v, i) {\n            return _indices_2[i] = v;\n          });\n\n          _indices_2.set(e.set, rangesSize);\n\n          indices = SortedArray.ofUnsortedArray(_indices_2); // requires sort\n        }\n\n        for (var _d = 0, units_1 = units; _d < units_1.length; _d++) {\n          var unit = units_1[_d];\n          elements.push({\n            unit: unit,\n            indices: indices\n          });\n        }\n      };\n\n      for (var _b = 0, _c = e.groupedUnits; _b < _c.length; _b++) {\n        var g = _c[_b];\n\n        _loop_1(g);\n      }\n    }\n\n    return Loci(structure, elements);\n  }\n\n  Bundle.toLoci = toLoci;\n\n  function toStructure(bundle, parent) {\n    if (bundle.hash !== -1 && bundle.hash !== parent.hashCode) {\n      new Error('Bundle not compatible with given structure');\n    }\n\n    var units = [];\n\n    for (var _i = 0, _a = bundle.elements; _i < _a.length; _i++) {\n      var e = _a[_i];\n\n      var _loop_2 = function (g) {\n        var _units = getUnitsFromIds(g, parent);\n\n        if (_units.length === 0) return \"continue\";\n        var ue = _units[0].elements; // the elements are grouped by unit.invariantId\n\n        var rangesSize = SortedRanges.size(e.ranges);\n        var setSize = e.set.length;\n\n        var _indices = new Int32Array(setSize + rangesSize);\n\n        var indices = void 0;\n\n        if (rangesSize === 0) {\n          for (var i = 0, il = setSize; i < il; ++i) {\n            _indices[i] = ue[e.set[i]];\n          }\n\n          indices = SortedArray.ofSortedArray(_indices);\n        } else if (setSize === 0) {\n          SortedRanges.forEach(e.ranges, function (v, i) {\n            return _indices[i] = ue[v];\n          });\n          indices = SortedArray.ofSortedArray(_indices);\n        } else {\n          if (SortedArray.min(e.set) > SortedRanges.max(e.ranges)) {\n            SortedRanges.forEach(e.ranges, function (v, i) {\n              return _indices[i] = ue[v];\n            });\n\n            for (var i = 0, il = setSize; i < il; ++i) {\n              _indices[i + rangesSize] = ue[e.set[i]];\n            }\n\n            indices = SortedArray.ofSortedArray(_indices);\n          } else if (SortedRanges.min(e.ranges) > SortedArray.max(e.set)) {\n            for (var i = 0, il = setSize; i < il; ++i) {\n              _indices[i] = ue[e.set[i]];\n            }\n\n            SortedRanges.forEach(e.ranges, function (v, i) {\n              return _indices[i + setSize] = ue[v];\n            });\n            indices = SortedArray.ofSortedArray(_indices);\n          } else {\n            SortedRanges.forEach(e.ranges, function (v, i) {\n              return _indices[i] = ue[v];\n            });\n\n            for (var i = 0, il = setSize; i < il; ++i) {\n              _indices[i + rangesSize] = ue[e.set[i]];\n            }\n\n            indices = SortedArray.ofUnsortedArray(_indices); // requires sort\n          }\n        }\n\n        for (var _d = 0, _units_1 = _units; _d < _units_1.length; _d++) {\n          var unit = _units_1[_d];\n          units.push(unit.getChild(indices));\n        }\n      };\n\n      for (var _b = 0, _c = e.groupedUnits; _b < _c.length; _b++) {\n        var g = _c[_b];\n\n        _loop_2(g);\n      }\n    }\n\n    return Structure.create(units, {\n      parent: parent\n    });\n  }\n\n  Bundle.toStructure = toStructure;\n\n  function elementToExpression(e) {\n    return MS.internal.generator.bundleElement({\n      groupedUnits: MS.core.type.list(e.groupedUnits.map(function (u) {\n        return MS.core.type.list(u);\n      })),\n      ranges: MS.core.type.list(e.ranges),\n      set: MS.core.type.list(e.set)\n    });\n  }\n\n  function toExpression(bundle) {\n    return MS.internal.generator.bundle({\n      elements: MS.core.type.list(bundle.elements.map(elementToExpression))\n    });\n  }\n\n  Bundle.toExpression = toExpression;\n\n  function areEqual(a, b) {\n    if (a.elements.length !== b.elements.length) return false;\n\n    for (var i = 0, il = a.elements.length; i < il; ++i) {\n      var elementA = a.elements[i],\n          elementB = b.elements[i];\n      if (elementA.groupedUnits.length !== elementB.groupedUnits.length) return false;\n\n      for (var j = 0, jl = elementB.groupedUnits.length; j < jl; ++j) {\n        if (!SortedArray.areEqual(elementA.groupedUnits[j], elementB.groupedUnits[j])) return false;\n      }\n\n      if (!SortedArray.areEqual(elementA.set, elementB.set)) return false;\n      if (!SortedRanges.areEqual(elementA.ranges, elementB.ranges)) return false;\n    }\n\n    return true;\n  }\n\n  Bundle.areEqual = areEqual;\n})(Bundle || (Bundle = {}));","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/element/bundle.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { OrderedSet, SortedArray, Interval } from '../../../../mol-data/int';\r\nimport { Structure } from '../structure';\r\nimport { hashFnv32a, hash2 } from '../../../../mol-data/util';\r\nimport { SortedRanges } from '../../../../mol-data/int/sorted-ranges';\r\nimport { Loci } from './loci';\r\nimport { MolScriptBuilder as MS } from '../../../../mol-script/language/builder';\r\nimport { StructureSelection } from '../../query';\r\nexport var Bundle;\r\n(function (Bundle) {\r\n    Bundle.Empty = { hash: -1, elements: [] };\r\n    function fromSubStructure(parent, structure) {\r\n        return fromLoci(StructureSelection.toLociWithSourceUnits(StructureSelection.Singletons(parent, structure)));\r\n    }\r\n    Bundle.fromSubStructure = fromSubStructure;\r\n    function fromSelection(selection) {\r\n        return fromLoci(StructureSelection.toLociWithSourceUnits(selection));\r\n    }\r\n    Bundle.fromSelection = fromSelection;\r\n    function fromLoci(loci) {\r\n        var _elements = [];\r\n        for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n            var e = _a[_i];\r\n            var unit = e.unit, indices = e.indices;\r\n            if (OrderedSet.size(indices) === 0)\r\n                continue;\r\n            var ranges = [];\r\n            var set = [];\r\n            if (OrderedSet.isInterval(indices)) {\r\n                if (OrderedSet.size(indices) === 1) {\r\n                    set.push(Interval.min(indices));\r\n                }\r\n                else {\r\n                    ranges.push(Interval.min(indices), Interval.max(indices));\r\n                }\r\n            }\r\n            else {\r\n                var i = 0;\r\n                var len = indices.length;\r\n                while (i < len) {\r\n                    var start = i;\r\n                    i++;\r\n                    while (i < len && indices[i - 1] + 1 === indices[i])\r\n                        i++;\r\n                    var end = i;\r\n                    if (end - start > 2) {\r\n                        ranges.push(indices[start], indices[end - 1]);\r\n                    }\r\n                    else {\r\n                        for (var j = start; j < end; j++) {\r\n                            set[set.length] = indices[j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _elements.push({\r\n                unit: unit,\r\n                set: SortedArray.ofSortedArray(set),\r\n                ranges: SortedRanges.ofSortedRanges(ranges)\r\n            });\r\n        }\r\n        var elementGroups = new Map();\r\n        for (var i = 0, il = _elements.length; i < il; ++i) {\r\n            var e = _elements[i];\r\n            var key = hash2(hashFnv32a(e.ranges), hashFnv32a(e.set));\r\n            if (elementGroups.has(key)) {\r\n                var groupedUnits = elementGroups.get(key).groupedUnits;\r\n                if (groupedUnits.has(e.unit.invariantId)) {\r\n                    groupedUnits.get(e.unit.invariantId).push(e.unit.id);\r\n                }\r\n                else {\r\n                    groupedUnits.set(e.unit.invariantId, [e.unit.id]);\r\n                }\r\n            }\r\n            else {\r\n                var groupedUnits = new Map();\r\n                groupedUnits.set(e.unit.invariantId, [e.unit.id]);\r\n                elementGroups.set(key, { groupedUnits: groupedUnits, set: e.set, ranges: e.ranges });\r\n            }\r\n        }\r\n        var elements = [];\r\n        elementGroups.forEach(function (e) {\r\n            var groupedUnits = [];\r\n            e.groupedUnits.forEach(function (g) { return groupedUnits.push(SortedArray.ofUnsortedArray(g)); });\r\n            groupedUnits.sort(function (a, b) { return a[0] - b[0]; }); // sort by first unit id of each group\r\n            elements.push({ groupedUnits: groupedUnits, set: e.set, ranges: e.ranges });\r\n        });\r\n        return { hash: loci.structure.hashCode, elements: elements };\r\n    }\r\n    Bundle.fromLoci = fromLoci;\r\n    function getUnitsFromIds(unitIds, structure) {\r\n        var units = [];\r\n        for (var i = 0, il = unitIds.length; i < il; ++i) {\r\n            var unitId = unitIds[i];\r\n            if (structure.unitMap.has(unitId))\r\n                units.push(structure.unitMap.get(unitId));\r\n        }\r\n        return units;\r\n    }\r\n    function toLoci(bundle, structure) {\r\n        if (bundle.hash !== -1 && bundle.hash !== structure.hashCode) {\r\n            new Error('Bundle not compatible with given structure');\r\n        }\r\n        var elements = [];\r\n        for (var _i = 0, _a = bundle.elements; _i < _a.length; _i++) {\r\n            var e = _a[_i];\r\n            var _loop_1 = function (g) {\r\n                var units = getUnitsFromIds(g, structure);\r\n                if (units.length === 0)\r\n                    return \"continue\";\r\n                var indices = void 0;\r\n                if (e.ranges.length === 0) {\r\n                    indices = e.set;\r\n                }\r\n                else if (e.set.length === 0) {\r\n                    if (e.ranges.length === 2) {\r\n                        indices = Interval.ofRange(e.ranges[0], e.ranges[1]);\r\n                    }\r\n                    else {\r\n                        var _indices_1 = new Int32Array(SortedRanges.size(e.ranges));\r\n                        SortedRanges.forEach(e.ranges, function (v, i) { return _indices_1[i] = v; });\r\n                        indices = SortedArray.ofSortedArray(_indices_1);\r\n                    }\r\n                }\r\n                else {\r\n                    var rangesSize = SortedRanges.size(e.ranges);\r\n                    var _indices_2 = new Int32Array(e.set.length + rangesSize);\r\n                    SortedRanges.forEach(e.ranges, function (v, i) { return _indices_2[i] = v; });\r\n                    _indices_2.set(e.set, rangesSize);\r\n                    indices = SortedArray.ofUnsortedArray(_indices_2); // requires sort\r\n                }\r\n                for (var _d = 0, units_1 = units; _d < units_1.length; _d++) {\r\n                    var unit = units_1[_d];\r\n                    elements.push({ unit: unit, indices: indices });\r\n                }\r\n            };\r\n            for (var _b = 0, _c = e.groupedUnits; _b < _c.length; _b++) {\r\n                var g = _c[_b];\r\n                _loop_1(g);\r\n            }\r\n        }\r\n        return Loci(structure, elements);\r\n    }\r\n    Bundle.toLoci = toLoci;\r\n    function toStructure(bundle, parent) {\r\n        if (bundle.hash !== -1 && bundle.hash !== parent.hashCode) {\r\n            new Error('Bundle not compatible with given structure');\r\n        }\r\n        var units = [];\r\n        for (var _i = 0, _a = bundle.elements; _i < _a.length; _i++) {\r\n            var e = _a[_i];\r\n            var _loop_2 = function (g) {\r\n                var _units = getUnitsFromIds(g, parent);\r\n                if (_units.length === 0)\r\n                    return \"continue\";\r\n                var ue = _units[0].elements; // the elements are grouped by unit.invariantId\r\n                var rangesSize = SortedRanges.size(e.ranges);\r\n                var setSize = e.set.length;\r\n                var _indices = new Int32Array(setSize + rangesSize);\r\n                var indices = void 0;\r\n                if (rangesSize === 0) {\r\n                    for (var i = 0, il = setSize; i < il; ++i) {\r\n                        _indices[i] = ue[e.set[i]];\r\n                    }\r\n                    indices = SortedArray.ofSortedArray(_indices);\r\n                }\r\n                else if (setSize === 0) {\r\n                    SortedRanges.forEach(e.ranges, function (v, i) { return _indices[i] = ue[v]; });\r\n                    indices = SortedArray.ofSortedArray(_indices);\r\n                }\r\n                else {\r\n                    if (SortedArray.min(e.set) > SortedRanges.max(e.ranges)) {\r\n                        SortedRanges.forEach(e.ranges, function (v, i) { return _indices[i] = ue[v]; });\r\n                        for (var i = 0, il = setSize; i < il; ++i) {\r\n                            _indices[i + rangesSize] = ue[e.set[i]];\r\n                        }\r\n                        indices = SortedArray.ofSortedArray(_indices);\r\n                    }\r\n                    else if (SortedRanges.min(e.ranges) > SortedArray.max(e.set)) {\r\n                        for (var i = 0, il = setSize; i < il; ++i) {\r\n                            _indices[i] = ue[e.set[i]];\r\n                        }\r\n                        SortedRanges.forEach(e.ranges, function (v, i) { return _indices[i + setSize] = ue[v]; });\r\n                        indices = SortedArray.ofSortedArray(_indices);\r\n                    }\r\n                    else {\r\n                        SortedRanges.forEach(e.ranges, function (v, i) { return _indices[i] = ue[v]; });\r\n                        for (var i = 0, il = setSize; i < il; ++i) {\r\n                            _indices[i + rangesSize] = ue[e.set[i]];\r\n                        }\r\n                        indices = SortedArray.ofUnsortedArray(_indices); // requires sort\r\n                    }\r\n                }\r\n                for (var _d = 0, _units_1 = _units; _d < _units_1.length; _d++) {\r\n                    var unit = _units_1[_d];\r\n                    units.push(unit.getChild(indices));\r\n                }\r\n            };\r\n            for (var _b = 0, _c = e.groupedUnits; _b < _c.length; _b++) {\r\n                var g = _c[_b];\r\n                _loop_2(g);\r\n            }\r\n        }\r\n        return Structure.create(units, { parent: parent });\r\n    }\r\n    Bundle.toStructure = toStructure;\r\n    function elementToExpression(e) {\r\n        return MS.internal.generator.bundleElement({\r\n            groupedUnits: MS.core.type.list(e.groupedUnits.map(function (u) { return MS.core.type.list(u); })),\r\n            ranges: MS.core.type.list(e.ranges),\r\n            set: MS.core.type.list(e.set),\r\n        });\r\n    }\r\n    function toExpression(bundle) {\r\n        return MS.internal.generator.bundle({\r\n            elements: MS.core.type.list(bundle.elements.map(elementToExpression))\r\n        });\r\n    }\r\n    Bundle.toExpression = toExpression;\r\n    function areEqual(a, b) {\r\n        if (a.elements.length !== b.elements.length)\r\n            return false;\r\n        for (var i = 0, il = a.elements.length; i < il; ++i) {\r\n            var elementA = a.elements[i], elementB = b.elements[i];\r\n            if (elementA.groupedUnits.length !== elementB.groupedUnits.length)\r\n                return false;\r\n            for (var j = 0, jl = elementB.groupedUnits.length; j < jl; ++j) {\r\n                if (!SortedArray.areEqual(elementA.groupedUnits[j], elementB.groupedUnits[j]))\r\n                    return false;\r\n            }\r\n            if (!SortedArray.areEqual(elementA.set, elementB.set))\r\n                return false;\r\n            if (!SortedRanges.areEqual(elementA.ranges, elementB.ranges))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Bundle.areEqual = areEqual;\r\n})(Bundle || (Bundle = {}));\r\n//# sourceMappingURL=bundle.js.map"]},"metadata":{},"sourceType":"module"}