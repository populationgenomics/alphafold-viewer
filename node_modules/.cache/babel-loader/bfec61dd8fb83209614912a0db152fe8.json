{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { sortArray, hash3, hash4, createRangeArray } from '../../util';\nimport { Interval } from '../interval';\nexport var Empty = [];\nexport function ofSingleton(v) {\n  return [v];\n}\nexport function ofSortedArray(xs) {\n  return xs;\n}\nexport function ofUnsortedArray(xs) {\n  sortArray(xs);\n  return xs;\n}\nexport function ofRange(min, max) {\n  if (max < min) return [];\n  var ret = new Int32Array(max - min + 1);\n\n  for (var i = min; i <= max; i++) ret[i - min] = i;\n\n  return ret;\n}\nexport function is(xs) {\n  return xs && (Array.isArray(xs) || !!xs.buffer);\n}\nexport function isRange(xs) {\n  return xs[xs.length - 1] - xs[0] + 1 === xs.length;\n}\nexport function start(xs) {\n  return xs[0];\n}\nexport function end(xs) {\n  return xs[xs.length - 1] + 1;\n}\nexport function min(xs) {\n  return xs[0];\n}\nexport function max(xs) {\n  return xs[xs.length - 1];\n}\nexport function size(xs) {\n  return xs.length;\n}\nexport function hashCode(xs) {\n  // hash of tuple (size, min, max, mid)\n  var s = xs.length;\n  if (!s) return 0;\n  if (s > 2) return hash4(s, xs[0], xs[s - 1], xs[s >> 1]);\n  return hash3(s, xs[0], xs[s - 1]);\n}\nexport function toString(xs) {\n  var s = xs.length;\n  if (s > 5) return \"[\" + xs[0] + \", \" + xs[1] + \", ..., \" + xs[s - 1] + \"], length \" + s;\n  return \"[\" + xs.join(', ') + \"]\";\n}\n/** Returns the index of `x` in `set` or -1 if not found. */\n\nexport function indexOf(xs, v) {\n  var l = xs.length;\n  return l === 0 ? -1 : xs[0] <= v && v <= xs[l - 1] ? binarySearchRange(xs, v, 0, l) : -1;\n}\nexport function indexOfInInterval(xs, v, bounds) {\n  return indexOfInRange(xs, v, Interval.start(bounds), Interval.end(bounds));\n}\nexport function indexOfInRange(xs, v, s, e) {\n  var l = xs.length;\n  return l === 0 || e <= s ? -1 : xs[s] <= v && v <= xs[e - 1] ? binarySearchRange(xs, v, s, e) : -1;\n}\nexport function has(xs, v) {\n  return indexOf(xs, v) >= 0;\n}\nexport function getAt(xs, i) {\n  return xs[i];\n}\nexport function areEqual(a, b) {\n  if (a === b) return true;\n  var aSize = a.length;\n  if (aSize !== b.length || a[0] !== b[0] || a[aSize - 1] !== b[aSize - 1]) return false;\n  if (isRange(a)) return true;\n  aSize--;\n\n  for (var i = 1; i < aSize; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\n/**\r\n * Returns 0 if `v` is smaller or equal the first element of `xs`\r\n * Returns length of `xs` if `v` is bigger than the last element of `xs`\r\n * Otherwise returns the first index where the value of `xs` is equal or bigger than `v`\r\n */\n\nexport function findPredecessorIndex(xs, v) {\n  var len = xs.length;\n  if (v <= xs[0]) return 0;\n  if (v > xs[len - 1]) return len;\n  return binarySearchPredIndexRange(xs, v, 0, len);\n}\nexport function findPredecessorIndexInInterval(xs, v, bounds) {\n  var s = Interval.start(bounds),\n      e = Interval.end(bounds);\n  var sv = xs[s];\n  if (v <= sv) return s;\n  if (e > s && v > xs[e - 1]) return e; // do a linear search if there are only 10 or less items remaining\n\n  if (v - sv <= 11) return linearSearchPredInRange(xs, v, s + 1, e);\n  return binarySearchPredIndexRange(xs, v, s, e);\n}\nexport function findRange(xs, min, max) {\n  return Interval.ofBounds(findPredecessorIndex(xs, min), findPredecessorIndex(xs, max + 1));\n}\n\nfunction binarySearchRange(xs, value, start, end) {\n  var min = start,\n      max = end - 1;\n\n  while (min <= max) {\n    // do a linear search if there are only 10 or less items remaining\n    if (min + 11 > max) {\n      for (var i = min; i <= max; i++) {\n        if (value === xs[i]) return i;\n      }\n\n      return -1;\n    }\n\n    var mid = min + max >> 1;\n    var v = xs[mid];\n    if (value < v) max = mid - 1;else if (value > v) min = mid + 1;else return mid;\n  }\n\n  return -1;\n}\n\nfunction binarySearchPredIndexRange(xs, value, start, end) {\n  var min = start,\n      max = end - 1;\n\n  while (min < max) {\n    // do a linear search if there are only 10 or less items remaining\n    if (min + 11 > max) {\n      for (var i = min; i <= max; i++) {\n        if (value <= xs[i]) return i;\n      }\n\n      return max + 1;\n    }\n\n    var mid = min + max >> 1;\n    var v = xs[mid];\n    if (value < v) max = mid - 1;else if (value > v) min = mid + 1;else return mid;\n  }\n\n  if (min > max) return max + 1;\n  return xs[min] >= value ? min : min + 1;\n}\n\nfunction linearSearchPredInRange(xs, value, start, end) {\n  for (var i = start; i < end; i++) {\n    if (value <= xs[i]) return i;\n  }\n\n  return end;\n}\n\nexport function areIntersecting(a, b) {\n  if (a === b) return true;\n\n  var _a = getSuitableIntersectionRange(a, b),\n      i = _a.startI,\n      j = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n    if (x < y) i++;else if (x > y) j++;else return true;\n  }\n\n  return false;\n}\nexport function isSubset(a, b) {\n  if (a === b) return true;\n  var lenB = b.length;\n\n  var _a = getSuitableIntersectionRange(a, b),\n      i = _a.startI,\n      j = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ; // must be able to advance by lenB elements\n\n\n  if (endJ - j < lenB || endI - i < lenB) return false;\n  var equal = 0;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      i++;\n      j++;\n      equal++;\n    }\n  }\n\n  return equal === lenB;\n}\nexport function union(a, b) {\n  if (a === b) return a;\n  var lenA = a.length,\n      lenB = b.length;\n  if (lenA === 0) return b;\n  if (lenB === 0) return a;\n  if (a[0] > b[0]) return union(b, a);\n\n  var _a = getSuitableIntersectionRange(a, b),\n      startI = _a.startI,\n      startJ = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  var commonCount = getCommonCount(a, b, startI, startJ, endI, endJ); // A === B || B is subset of A ==> A\n\n  if (commonCount === lenA && commonCount === lenB || commonCount === lenB) return a; // A is subset of B ===> B\n\n  if (commonCount === lenA) return b;\n  var indices = new Int32Array(lenA + lenB - commonCount);\n  var i = 0,\n      j = 0,\n      offset = 0; // insert the \"prefixes\"\n\n  for (i = 0; i < startI; i++) indices[offset++] = a[i];\n\n  while (j < endJ && a[startI] > b[j]) indices[offset++] = b[j++]; // insert the common part\n\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      indices[offset++] = x;\n      i++;\n    } else if (x > y) {\n      indices[offset++] = y;\n      j++;\n    } else {\n      indices[offset++] = x;\n      i++;\n      j++;\n    }\n  } // insert the remaining common part\n\n\n  for (; i < endI; i++) indices[offset++] = a[i];\n\n  for (; j < endJ; j++) indices[offset++] = b[j]; // insert the \"tail\"\n\n\n  for (; i < lenA; i++) indices[offset++] = a[i];\n\n  for (; j < lenB; j++) indices[offset++] = b[j];\n\n  return ofSortedArray(indices);\n}\nexport function intersectionSize(a, b) {\n  if (a === b) return size(a);\n\n  var _a = getSuitableIntersectionRange(a, b),\n      startI = _a.startI,\n      startJ = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  return getCommonCount(a, b, startI, startJ, endI, endJ);\n}\n\nfunction getCommonCount(a, b, startI, startJ, endI, endJ) {\n  var i = startI,\n      j = startJ;\n  var commonCount = 0;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      i++;\n      j++;\n      commonCount++;\n    }\n  }\n\n  return commonCount;\n}\n\nexport function intersect(a, b) {\n  if (a === b) return a;\n\n  var _a = getSuitableIntersectionRange(a, b),\n      startI = _a.startI,\n      startJ = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  var commonCount = getCommonCount(a, b, startI, startJ, endI, endJ);\n  var lenA = a.length,\n      lenB = b.length; // no common elements\n\n  if (!commonCount) return Empty; // A === B || B is subset of A ==> B\n\n  if (commonCount === lenA && commonCount === lenB || commonCount === lenB) return b; // A is subset of B ==> A\n\n  if (commonCount === lenA) return a;\n  var indices = new Int32Array(commonCount);\n  var offset = 0;\n  var i = startI;\n  var j = startJ;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      indices[offset++] = x;\n      i++;\n      j++;\n    }\n  }\n\n  return ofSortedArray(indices);\n}\nexport function subtract(a, b) {\n  if (a === b) return Empty;\n  var lenA = a.length;\n\n  var _a = getSuitableIntersectionRange(a, b),\n      sI = _a.startI,\n      sJ = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  var i = sI,\n      j = sJ;\n  var commonCount = 0;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      i++;\n      j++;\n      commonCount++;\n    }\n  } // A isnt intersecting B ===> A\n\n\n  if (!commonCount) return a; // A === B || A is subset of B ===> Empty\n\n  if (commonCount >= lenA) return Empty;\n  var indices = new Int32Array(lenA - commonCount);\n  var offset = 0; // insert the \"prefix\"\n\n  for (var k = 0; k < sI; k++) indices[offset++] = a[k];\n\n  i = sI;\n  j = sJ;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      indices[offset++] = x;\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  } // insert the \"tail\"\n\n\n  for (; i < lenA; i++) indices[offset++] = a[i];\n\n  return ofSortedArray(indices);\n}\nexport function deduplicate(xs) {\n  if (xs.length < 2) return xs;\n  var count = 1;\n\n  for (var i = 0, _i = xs.length - 1; i < _i; i++) {\n    if (xs[i] !== xs[i + 1]) count++;\n  }\n\n  if (count === xs.length) return xs;\n  var ret = new Int32Array(count);\n  var o = 0;\n\n  for (var i = 0, _i = xs.length - 1; i < _i; i++) {\n    if (xs[i] !== xs[i + 1]) ret[o++] = xs[i];\n  }\n\n  ret[o] = xs[xs.length - 1];\n  return ret;\n}\nexport function indicesOf(a, b) {\n  if (areEqual(a, b)) return ofSortedArray(createRangeArray(0, a.length - 1));\n\n  var _a = getSuitableIntersectionRange(a, b),\n      sI = _a.startI,\n      sJ = _a.startJ,\n      endI = _a.endI,\n      endJ = _a.endJ;\n\n  var i = sI,\n      j = sJ;\n  var commonCount = 0;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      i++;\n      j++;\n      commonCount++;\n    }\n  }\n\n  var lenA = a.length; // no common elements\n\n  if (!commonCount) return Empty; // A is subset of B ==> A\n\n  if (commonCount === lenA) return ofSortedArray(createRangeArray(0, a.length - 1));\n  var indices = new Int32Array(commonCount);\n  var offset = 0;\n  i = sI;\n  j = sJ;\n\n  while (i < endI && j < endJ) {\n    var x = a[i],\n        y = b[j];\n\n    if (x < y) {\n      i++;\n    } else if (x > y) {\n      j++;\n    } else {\n      indices[offset++] = i;\n      i++;\n      j++;\n    }\n  }\n\n  return ofSortedArray(indices);\n}\nvar _maxIntRangeRet = {\n  startI: 0,\n  startJ: 0,\n  endI: 0,\n  endJ: 0\n}; // for small sets, just gets the whole range, for large sets does a bunch of binary searches\n\nfunction getSuitableIntersectionRange(a, b) {\n  var la = a.length,\n      lb = b.length;\n  var ratio = la / lb;\n\n  if (la >= 128 || lb >= 128 || ratio <= 0.34 || ratio >= 2.99) {\n    _maxIntRangeRet.startI = findPredecessorIndex(a, start(b));\n    _maxIntRangeRet.startJ = findPredecessorIndex(b, start(a));\n    _maxIntRangeRet.endI = findPredecessorIndex(a, end(b));\n    _maxIntRangeRet.endJ = findPredecessorIndex(b, end(a));\n  } else {\n    _maxIntRangeRet.startI = 0;\n    _maxIntRangeRet.startJ = 0;\n    _maxIntRangeRet.endI = la;\n    _maxIntRangeRet.endJ = lb;\n  }\n\n  return _maxIntRangeRet;\n}","map":{"version":3,"sources":["../../../../src/mol-data/int/impl/sorted-array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { sortArray, hash3, hash4, createRangeArray } from '../../util';\r\nimport { Interval } from '../interval';\r\nexport var Empty = [];\r\nexport function ofSingleton(v) { return [v]; }\r\nexport function ofSortedArray(xs) { return xs; }\r\nexport function ofUnsortedArray(xs) { sortArray(xs); return xs; }\r\nexport function ofRange(min, max) {\r\n    if (max < min)\r\n        return [];\r\n    var ret = new Int32Array(max - min + 1);\r\n    for (var i = min; i <= max; i++)\r\n        ret[i - min] = i;\r\n    return ret;\r\n}\r\nexport function is(xs) { return xs && (Array.isArray(xs) || !!xs.buffer); }\r\nexport function isRange(xs) { return xs[xs.length - 1] - xs[0] + 1 === xs.length; }\r\nexport function start(xs) { return xs[0]; }\r\nexport function end(xs) { return xs[xs.length - 1] + 1; }\r\nexport function min(xs) { return xs[0]; }\r\nexport function max(xs) { return xs[xs.length - 1]; }\r\nexport function size(xs) { return xs.length; }\r\nexport function hashCode(xs) {\r\n    // hash of tuple (size, min, max, mid)\r\n    var s = xs.length;\r\n    if (!s)\r\n        return 0;\r\n    if (s > 2)\r\n        return hash4(s, xs[0], xs[s - 1], xs[s >> 1]);\r\n    return hash3(s, xs[0], xs[s - 1]);\r\n}\r\nexport function toString(xs) {\r\n    var s = xs.length;\r\n    if (s > 5)\r\n        return \"[\" + xs[0] + \", \" + xs[1] + \", ..., \" + xs[s - 1] + \"], length \" + s;\r\n    return \"[\" + xs.join(', ') + \"]\";\r\n}\r\n/** Returns the index of `x` in `set` or -1 if not found. */\r\nexport function indexOf(xs, v) {\r\n    var l = xs.length;\r\n    return l === 0 ? -1 : xs[0] <= v && v <= xs[l - 1] ? binarySearchRange(xs, v, 0, l) : -1;\r\n}\r\nexport function indexOfInInterval(xs, v, bounds) {\r\n    return indexOfInRange(xs, v, Interval.start(bounds), Interval.end(bounds));\r\n}\r\nexport function indexOfInRange(xs, v, s, e) {\r\n    var l = xs.length;\r\n    return l === 0 || e <= s ? -1 : xs[s] <= v && v <= xs[e - 1] ? binarySearchRange(xs, v, s, e) : -1;\r\n}\r\nexport function has(xs, v) { return indexOf(xs, v) >= 0; }\r\nexport function getAt(xs, i) { return xs[i]; }\r\nexport function areEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    var aSize = a.length;\r\n    if (aSize !== b.length || a[0] !== b[0] || a[aSize - 1] !== b[aSize - 1])\r\n        return false;\r\n    if (isRange(a))\r\n        return true;\r\n    aSize--;\r\n    for (var i = 1; i < aSize; i++) {\r\n        if (a[i] !== b[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns 0 if `v` is smaller or equal the first element of `xs`\r\n * Returns length of `xs` if `v` is bigger than the last element of `xs`\r\n * Otherwise returns the first index where the value of `xs` is equal or bigger than `v`\r\n */\r\nexport function findPredecessorIndex(xs, v) {\r\n    var len = xs.length;\r\n    if (v <= xs[0])\r\n        return 0;\r\n    if (v > xs[len - 1])\r\n        return len;\r\n    return binarySearchPredIndexRange(xs, v, 0, len);\r\n}\r\nexport function findPredecessorIndexInInterval(xs, v, bounds) {\r\n    var s = Interval.start(bounds), e = Interval.end(bounds);\r\n    var sv = xs[s];\r\n    if (v <= sv)\r\n        return s;\r\n    if (e > s && v > xs[e - 1])\r\n        return e;\r\n    // do a linear search if there are only 10 or less items remaining\r\n    if (v - sv <= 11)\r\n        return linearSearchPredInRange(xs, v, s + 1, e);\r\n    return binarySearchPredIndexRange(xs, v, s, e);\r\n}\r\nexport function findRange(xs, min, max) {\r\n    return Interval.ofBounds(findPredecessorIndex(xs, min), findPredecessorIndex(xs, max + 1));\r\n}\r\nfunction binarySearchRange(xs, value, start, end) {\r\n    var min = start, max = end - 1;\r\n    while (min <= max) {\r\n        // do a linear search if there are only 10 or less items remaining\r\n        if (min + 11 > max) {\r\n            for (var i = min; i <= max; i++) {\r\n                if (value === xs[i])\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n        var mid = (min + max) >> 1;\r\n        var v = xs[mid];\r\n        if (value < v)\r\n            max = mid - 1;\r\n        else if (value > v)\r\n            min = mid + 1;\r\n        else\r\n            return mid;\r\n    }\r\n    return -1;\r\n}\r\nfunction binarySearchPredIndexRange(xs, value, start, end) {\r\n    var min = start, max = end - 1;\r\n    while (min < max) {\r\n        // do a linear search if there are only 10 or less items remaining\r\n        if (min + 11 > max) {\r\n            for (var i = min; i <= max; i++) {\r\n                if (value <= xs[i])\r\n                    return i;\r\n            }\r\n            return max + 1;\r\n        }\r\n        var mid = (min + max) >> 1;\r\n        var v = xs[mid];\r\n        if (value < v)\r\n            max = mid - 1;\r\n        else if (value > v)\r\n            min = mid + 1;\r\n        else\r\n            return mid;\r\n    }\r\n    if (min > max)\r\n        return max + 1;\r\n    return xs[min] >= value ? min : min + 1;\r\n}\r\nfunction linearSearchPredInRange(xs, value, start, end) {\r\n    for (var i = start; i < end; i++) {\r\n        if (value <= xs[i])\r\n            return i;\r\n    }\r\n    return end;\r\n}\r\nexport function areIntersecting(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    var _a = getSuitableIntersectionRange(a, b), i = _a.startI, j = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y)\r\n            i++;\r\n        else if (x > y)\r\n            j++;\r\n        else\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nexport function isSubset(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    var lenB = b.length;\r\n    var _a = getSuitableIntersectionRange(a, b), i = _a.startI, j = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    // must be able to advance by lenB elements\r\n    if (endJ - j < lenB || endI - i < lenB)\r\n        return false;\r\n    var equal = 0;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            i++;\r\n            j++;\r\n            equal++;\r\n        }\r\n    }\r\n    return equal === lenB;\r\n}\r\nexport function union(a, b) {\r\n    if (a === b)\r\n        return a;\r\n    var lenA = a.length, lenB = b.length;\r\n    if (lenA === 0)\r\n        return b;\r\n    if (lenB === 0)\r\n        return a;\r\n    if (a[0] > b[0])\r\n        return union(b, a);\r\n    var _a = getSuitableIntersectionRange(a, b), startI = _a.startI, startJ = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    var commonCount = getCommonCount(a, b, startI, startJ, endI, endJ);\r\n    // A === B || B is subset of A ==> A\r\n    if ((commonCount === lenA && commonCount === lenB) || commonCount === lenB)\r\n        return a;\r\n    // A is subset of B ===> B\r\n    if (commonCount === lenA)\r\n        return b;\r\n    var indices = new Int32Array(lenA + lenB - commonCount);\r\n    var i = 0, j = 0, offset = 0;\r\n    // insert the \"prefixes\"\r\n    for (i = 0; i < startI; i++)\r\n        indices[offset++] = a[i];\r\n    while (j < endJ && a[startI] > b[j])\r\n        indices[offset++] = b[j++];\r\n    // insert the common part\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            indices[offset++] = x;\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            indices[offset++] = y;\r\n            j++;\r\n        }\r\n        else {\r\n            indices[offset++] = x;\r\n            i++;\r\n            j++;\r\n        }\r\n    }\r\n    // insert the remaining common part\r\n    for (; i < endI; i++)\r\n        indices[offset++] = a[i];\r\n    for (; j < endJ; j++)\r\n        indices[offset++] = b[j];\r\n    // insert the \"tail\"\r\n    for (; i < lenA; i++)\r\n        indices[offset++] = a[i];\r\n    for (; j < lenB; j++)\r\n        indices[offset++] = b[j];\r\n    return ofSortedArray(indices);\r\n}\r\nexport function intersectionSize(a, b) {\r\n    if (a === b)\r\n        return size(a);\r\n    var _a = getSuitableIntersectionRange(a, b), startI = _a.startI, startJ = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    return getCommonCount(a, b, startI, startJ, endI, endJ);\r\n}\r\nfunction getCommonCount(a, b, startI, startJ, endI, endJ) {\r\n    var i = startI, j = startJ;\r\n    var commonCount = 0;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            i++;\r\n            j++;\r\n            commonCount++;\r\n        }\r\n    }\r\n    return commonCount;\r\n}\r\nexport function intersect(a, b) {\r\n    if (a === b)\r\n        return a;\r\n    var _a = getSuitableIntersectionRange(a, b), startI = _a.startI, startJ = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    var commonCount = getCommonCount(a, b, startI, startJ, endI, endJ);\r\n    var lenA = a.length, lenB = b.length;\r\n    // no common elements\r\n    if (!commonCount)\r\n        return Empty;\r\n    // A === B || B is subset of A ==> B\r\n    if ((commonCount === lenA && commonCount === lenB) || commonCount === lenB)\r\n        return b;\r\n    // A is subset of B ==> A\r\n    if (commonCount === lenA)\r\n        return a;\r\n    var indices = new Int32Array(commonCount);\r\n    var offset = 0;\r\n    var i = startI;\r\n    var j = startJ;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            indices[offset++] = x;\r\n            i++;\r\n            j++;\r\n        }\r\n    }\r\n    return ofSortedArray(indices);\r\n}\r\nexport function subtract(a, b) {\r\n    if (a === b)\r\n        return Empty;\r\n    var lenA = a.length;\r\n    var _a = getSuitableIntersectionRange(a, b), sI = _a.startI, sJ = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    var i = sI, j = sJ;\r\n    var commonCount = 0;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            i++;\r\n            j++;\r\n            commonCount++;\r\n        }\r\n    }\r\n    // A isnt intersecting B ===> A\r\n    if (!commonCount)\r\n        return a;\r\n    // A === B || A is subset of B ===> Empty\r\n    if (commonCount >= lenA)\r\n        return Empty;\r\n    var indices = new Int32Array(lenA - commonCount);\r\n    var offset = 0;\r\n    // insert the \"prefix\"\r\n    for (var k = 0; k < sI; k++)\r\n        indices[offset++] = a[k];\r\n    i = sI;\r\n    j = sJ;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            indices[offset++] = x;\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            i++;\r\n            j++;\r\n        }\r\n    }\r\n    // insert the \"tail\"\r\n    for (; i < lenA; i++)\r\n        indices[offset++] = a[i];\r\n    return ofSortedArray(indices);\r\n}\r\nexport function deduplicate(xs) {\r\n    if (xs.length < 2)\r\n        return xs;\r\n    var count = 1;\r\n    for (var i = 0, _i = xs.length - 1; i < _i; i++) {\r\n        if (xs[i] !== xs[i + 1])\r\n            count++;\r\n    }\r\n    if (count === xs.length)\r\n        return xs;\r\n    var ret = new Int32Array(count);\r\n    var o = 0;\r\n    for (var i = 0, _i = xs.length - 1; i < _i; i++) {\r\n        if (xs[i] !== xs[i + 1])\r\n            ret[o++] = xs[i];\r\n    }\r\n    ret[o] = xs[xs.length - 1];\r\n    return ret;\r\n}\r\nexport function indicesOf(a, b) {\r\n    if (areEqual(a, b))\r\n        return ofSortedArray(createRangeArray(0, a.length - 1));\r\n    var _a = getSuitableIntersectionRange(a, b), sI = _a.startI, sJ = _a.startJ, endI = _a.endI, endJ = _a.endJ;\r\n    var i = sI, j = sJ;\r\n    var commonCount = 0;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            i++;\r\n            j++;\r\n            commonCount++;\r\n        }\r\n    }\r\n    var lenA = a.length;\r\n    // no common elements\r\n    if (!commonCount)\r\n        return Empty;\r\n    // A is subset of B ==> A\r\n    if (commonCount === lenA)\r\n        return ofSortedArray(createRangeArray(0, a.length - 1));\r\n    var indices = new Int32Array(commonCount);\r\n    var offset = 0;\r\n    i = sI;\r\n    j = sJ;\r\n    while (i < endI && j < endJ) {\r\n        var x = a[i], y = b[j];\r\n        if (x < y) {\r\n            i++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            indices[offset++] = i;\r\n            i++;\r\n            j++;\r\n        }\r\n    }\r\n    return ofSortedArray(indices);\r\n}\r\nvar _maxIntRangeRet = { startI: 0, startJ: 0, endI: 0, endJ: 0 };\r\n// for small sets, just gets the whole range, for large sets does a bunch of binary searches\r\nfunction getSuitableIntersectionRange(a, b) {\r\n    var la = a.length, lb = b.length;\r\n    var ratio = la / lb;\r\n    if (la >= 128 || lb >= 128 || ratio <= 0.34 || ratio >= 2.99) {\r\n        _maxIntRangeRet.startI = findPredecessorIndex(a, start(b));\r\n        _maxIntRangeRet.startJ = findPredecessorIndex(b, start(a));\r\n        _maxIntRangeRet.endI = findPredecessorIndex(a, end(b));\r\n        _maxIntRangeRet.endJ = findPredecessorIndex(b, end(a));\r\n    }\r\n    else {\r\n        _maxIntRangeRet.startI = 0;\r\n        _maxIntRangeRet.startJ = 0;\r\n        _maxIntRangeRet.endI = la;\r\n        _maxIntRangeRet.endJ = lb;\r\n    }\r\n    return _maxIntRangeRet;\r\n}\r\n//# sourceMappingURL=sorted-array.js.map"]},"metadata":{},"sourceType":"module"}