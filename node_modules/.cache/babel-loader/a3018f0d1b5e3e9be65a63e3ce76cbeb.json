{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { createRenderable } from './render-object';\nimport { Object3D } from './object3d';\nimport { Sphere3D } from '../mol-math/geometry';\nimport { CommitQueue } from './commit-queue';\nimport { now } from '../mol-util/now';\nimport { arraySetRemove } from '../mol-util/array';\nimport { BoundaryHelper } from '../mol-math/geometry/boundary-helper';\nimport { hash1 } from '../mol-data/util';\nvar boundaryHelper = new BoundaryHelper('98');\n\nfunction calculateBoundingSphere(renderables, boundingSphere, onlyVisible) {\n  boundaryHelper.reset();\n\n  for (var i = 0, il = renderables.length; i < il; ++i) {\n    if (onlyVisible && !renderables[i].state.visible) continue;\n    var boundingSphere_1 = renderables[i].values.boundingSphere.ref.value;\n    if (!boundingSphere_1.radius) continue;\n    boundaryHelper.includeSphere(boundingSphere_1);\n  }\n\n  boundaryHelper.finishedIncludeStep();\n\n  for (var i = 0, il = renderables.length; i < il; ++i) {\n    if (onlyVisible && !renderables[i].state.visible) continue;\n    var boundingSphere_2 = renderables[i].values.boundingSphere.ref.value;\n    if (!boundingSphere_2.radius) continue;\n    boundaryHelper.radiusSphere(boundingSphere_2);\n  }\n\n  return boundaryHelper.getSphere(boundingSphere);\n}\n\nfunction renderableSort(a, b) {\n  var drawProgramIdA = a.getProgram('colorBlended').id;\n  var drawProgramIdB = b.getProgram('colorBlended').id;\n  var materialIdA = a.materialId;\n  var materialIdB = b.materialId;\n\n  if (drawProgramIdA !== drawProgramIdB) {\n    // sort by program id to minimize gl state changes\n    return drawProgramIdA - drawProgramIdB;\n  } else if (materialIdA !== materialIdB) {\n    // sort by material id to minimize gl state changes\n    return materialIdA - materialIdB;\n  } else {\n    return a.id - b.id;\n  }\n}\n\nvar Scene;\n\n(function (Scene) {\n  function create(ctx) {\n    var renderableMap = new Map();\n    var renderables = [];\n    var boundingSphere = Sphere3D();\n    var boundingSphereVisible = Sphere3D();\n    var primitives = [];\n    var volumes = [];\n    var boundingSphereDirty = true;\n    var boundingSphereVisibleDirty = true;\n    var object3d = Object3D.create();\n    var view = object3d.view,\n        position = object3d.position,\n        direction = object3d.direction,\n        up = object3d.up;\n\n    function add(o) {\n      if (!renderableMap.has(o)) {\n        var renderable = createRenderable(ctx, o);\n        renderables.push(renderable);\n\n        if (o.type === 'direct-volume') {\n          volumes.push(renderable);\n        } else {\n          primitives.push(renderable);\n        }\n\n        renderableMap.set(o, renderable);\n        boundingSphereDirty = true;\n        boundingSphereVisibleDirty = true;\n        return renderable;\n      } else {\n        console.warn(\"RenderObject with id '\" + o.id + \"' already present\");\n        return renderableMap.get(o);\n      }\n    }\n\n    function remove(o) {\n      var renderable = renderableMap.get(o);\n\n      if (renderable) {\n        renderable.dispose();\n        arraySetRemove(renderables, renderable);\n        arraySetRemove(primitives, renderable);\n        arraySetRemove(volumes, renderable);\n        renderableMap.delete(o);\n        boundingSphereDirty = true;\n        boundingSphereVisibleDirty = true;\n      }\n    }\n\n    var commitBulkSize = 100;\n\n    function commit(maxTimeMs) {\n      var start = now();\n      var i = 0;\n\n      while (true) {\n        var o = commitQueue.tryGetRemove();\n        if (!o) break;\n        remove(o);\n        if (++i % commitBulkSize === 0 && now() - start > maxTimeMs) return false;\n      }\n\n      while (true) {\n        var o = commitQueue.tryGetAdd();\n        if (!o) break;\n        add(o);\n        if (++i % commitBulkSize === 0 && now() - start > maxTimeMs) return false;\n      }\n\n      renderables.sort(renderableSort);\n      return true;\n    }\n\n    var commitQueue = new CommitQueue();\n    var visibleHash = -1;\n\n    function computeVisibleHash() {\n      var hash = 23;\n\n      for (var i = 0, il = renderables.length; i < il; ++i) {\n        if (!renderables[i].state.visible) continue;\n        hash = 31 * hash + renderables[i].id | 0;\n      }\n\n      hash = hash1(hash);\n      if (hash === -1) hash = 0;\n      return hash;\n    }\n\n    function syncVisibility() {\n      var newVisibleHash = computeVisibleHash();\n\n      if (newVisibleHash !== visibleHash) {\n        boundingSphereVisibleDirty = true;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return {\n      view: view,\n      position: position,\n      direction: direction,\n      up: up,\n      renderables: renderables,\n      primitives: {\n        view: view,\n        position: position,\n        direction: direction,\n        up: up,\n        renderables: primitives\n      },\n      volumes: {\n        view: view,\n        position: position,\n        direction: direction,\n        up: up,\n        renderables: volumes\n      },\n      syncVisibility: syncVisibility,\n      update: function (objects, keepBoundingSphere) {\n        var _a;\n\n        Object3D.update(object3d);\n\n        if (objects) {\n          for (var i = 0, il = objects.length; i < il; ++i) {\n            (_a = renderableMap.get(objects[i])) === null || _a === void 0 ? void 0 : _a.update();\n          }\n        } else {\n          for (var i = 0, il = renderables.length; i < il; ++i) {\n            renderables[i].update();\n          }\n        }\n\n        if (!keepBoundingSphere) {\n          boundingSphereDirty = true;\n          boundingSphereVisibleDirty = true;\n        } else {\n          syncVisibility();\n        }\n      },\n      add: function (o) {\n        return commitQueue.add(o);\n      },\n      remove: function (o) {\n        return commitQueue.remove(o);\n      },\n      commit: function (maxTime) {\n        if (maxTime === void 0) {\n          maxTime = Number.MAX_VALUE;\n        }\n\n        return commit(maxTime);\n      },\n\n      get needsCommit() {\n        return !commitQueue.isEmpty;\n      },\n\n      has: function (o) {\n        return renderableMap.has(o);\n      },\n      clear: function () {\n        for (var i = 0, il = renderables.length; i < il; ++i) {\n          renderables[i].dispose();\n        }\n\n        renderables.length = 0;\n        renderableMap.clear();\n        boundingSphereDirty = true;\n        boundingSphereVisibleDirty = true;\n      },\n      forEach: function (callbackFn) {\n        renderableMap.forEach(callbackFn);\n      },\n\n      get count() {\n        return renderables.length;\n      },\n\n      get boundingSphere() {\n        if (boundingSphereDirty) {\n          calculateBoundingSphere(renderables, boundingSphere, false);\n          boundingSphereDirty = false;\n        }\n\n        return boundingSphere;\n      },\n\n      get boundingSphereVisible() {\n        if (boundingSphereVisibleDirty) {\n          calculateBoundingSphere(renderables, boundingSphereVisible, true);\n          boundingSphereVisibleDirty = false;\n          visibleHash = computeVisibleHash();\n        }\n\n        return boundingSphereVisible;\n      }\n\n    };\n  }\n\n  Scene.create = create;\n})(Scene || (Scene = {}));\n\nexport { Scene };","map":{"version":3,"sources":["../../src/mol-gl/scene.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { createRenderable } from './render-object';\r\nimport { Object3D } from './object3d';\r\nimport { Sphere3D } from '../mol-math/geometry';\r\nimport { CommitQueue } from './commit-queue';\r\nimport { now } from '../mol-util/now';\r\nimport { arraySetRemove } from '../mol-util/array';\r\nimport { BoundaryHelper } from '../mol-math/geometry/boundary-helper';\r\nimport { hash1 } from '../mol-data/util';\r\nvar boundaryHelper = new BoundaryHelper('98');\r\nfunction calculateBoundingSphere(renderables, boundingSphere, onlyVisible) {\r\n    boundaryHelper.reset();\r\n    for (var i = 0, il = renderables.length; i < il; ++i) {\r\n        if (onlyVisible && !renderables[i].state.visible)\r\n            continue;\r\n        var boundingSphere_1 = renderables[i].values.boundingSphere.ref.value;\r\n        if (!boundingSphere_1.radius)\r\n            continue;\r\n        boundaryHelper.includeSphere(boundingSphere_1);\r\n    }\r\n    boundaryHelper.finishedIncludeStep();\r\n    for (var i = 0, il = renderables.length; i < il; ++i) {\r\n        if (onlyVisible && !renderables[i].state.visible)\r\n            continue;\r\n        var boundingSphere_2 = renderables[i].values.boundingSphere.ref.value;\r\n        if (!boundingSphere_2.radius)\r\n            continue;\r\n        boundaryHelper.radiusSphere(boundingSphere_2);\r\n    }\r\n    return boundaryHelper.getSphere(boundingSphere);\r\n}\r\nfunction renderableSort(a, b) {\r\n    var drawProgramIdA = a.getProgram('colorBlended').id;\r\n    var drawProgramIdB = b.getProgram('colorBlended').id;\r\n    var materialIdA = a.materialId;\r\n    var materialIdB = b.materialId;\r\n    if (drawProgramIdA !== drawProgramIdB) {\r\n        // sort by program id to minimize gl state changes\r\n        return drawProgramIdA - drawProgramIdB;\r\n    }\r\n    else if (materialIdA !== materialIdB) {\r\n        // sort by material id to minimize gl state changes\r\n        return materialIdA - materialIdB;\r\n    }\r\n    else {\r\n        return a.id - b.id;\r\n    }\r\n}\r\nvar Scene;\r\n(function (Scene) {\r\n    function create(ctx) {\r\n        var renderableMap = new Map();\r\n        var renderables = [];\r\n        var boundingSphere = Sphere3D();\r\n        var boundingSphereVisible = Sphere3D();\r\n        var primitives = [];\r\n        var volumes = [];\r\n        var boundingSphereDirty = true;\r\n        var boundingSphereVisibleDirty = true;\r\n        var object3d = Object3D.create();\r\n        var view = object3d.view, position = object3d.position, direction = object3d.direction, up = object3d.up;\r\n        function add(o) {\r\n            if (!renderableMap.has(o)) {\r\n                var renderable = createRenderable(ctx, o);\r\n                renderables.push(renderable);\r\n                if (o.type === 'direct-volume') {\r\n                    volumes.push(renderable);\r\n                }\r\n                else {\r\n                    primitives.push(renderable);\r\n                }\r\n                renderableMap.set(o, renderable);\r\n                boundingSphereDirty = true;\r\n                boundingSphereVisibleDirty = true;\r\n                return renderable;\r\n            }\r\n            else {\r\n                console.warn(\"RenderObject with id '\" + o.id + \"' already present\");\r\n                return renderableMap.get(o);\r\n            }\r\n        }\r\n        function remove(o) {\r\n            var renderable = renderableMap.get(o);\r\n            if (renderable) {\r\n                renderable.dispose();\r\n                arraySetRemove(renderables, renderable);\r\n                arraySetRemove(primitives, renderable);\r\n                arraySetRemove(volumes, renderable);\r\n                renderableMap.delete(o);\r\n                boundingSphereDirty = true;\r\n                boundingSphereVisibleDirty = true;\r\n            }\r\n        }\r\n        var commitBulkSize = 100;\r\n        function commit(maxTimeMs) {\r\n            var start = now();\r\n            var i = 0;\r\n            while (true) {\r\n                var o = commitQueue.tryGetRemove();\r\n                if (!o)\r\n                    break;\r\n                remove(o);\r\n                if (++i % commitBulkSize === 0 && now() - start > maxTimeMs)\r\n                    return false;\r\n            }\r\n            while (true) {\r\n                var o = commitQueue.tryGetAdd();\r\n                if (!o)\r\n                    break;\r\n                add(o);\r\n                if (++i % commitBulkSize === 0 && now() - start > maxTimeMs)\r\n                    return false;\r\n            }\r\n            renderables.sort(renderableSort);\r\n            return true;\r\n        }\r\n        var commitQueue = new CommitQueue();\r\n        var visibleHash = -1;\r\n        function computeVisibleHash() {\r\n            var hash = 23;\r\n            for (var i = 0, il = renderables.length; i < il; ++i) {\r\n                if (!renderables[i].state.visible)\r\n                    continue;\r\n                hash = (31 * hash + renderables[i].id) | 0;\r\n            }\r\n            hash = hash1(hash);\r\n            if (hash === -1)\r\n                hash = 0;\r\n            return hash;\r\n        }\r\n        function syncVisibility() {\r\n            var newVisibleHash = computeVisibleHash();\r\n            if (newVisibleHash !== visibleHash) {\r\n                boundingSphereVisibleDirty = true;\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return {\r\n            view: view,\r\n            position: position,\r\n            direction: direction,\r\n            up: up,\r\n            renderables: renderables,\r\n            primitives: { view: view, position: position, direction: direction, up: up, renderables: primitives },\r\n            volumes: { view: view, position: position, direction: direction, up: up, renderables: volumes },\r\n            syncVisibility: syncVisibility,\r\n            update: function (objects, keepBoundingSphere) {\r\n                var _a;\r\n                Object3D.update(object3d);\r\n                if (objects) {\r\n                    for (var i = 0, il = objects.length; i < il; ++i) {\r\n                        (_a = renderableMap.get(objects[i])) === null || _a === void 0 ? void 0 : _a.update();\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = 0, il = renderables.length; i < il; ++i) {\r\n                        renderables[i].update();\r\n                    }\r\n                }\r\n                if (!keepBoundingSphere) {\r\n                    boundingSphereDirty = true;\r\n                    boundingSphereVisibleDirty = true;\r\n                }\r\n                else {\r\n                    syncVisibility();\r\n                }\r\n            },\r\n            add: function (o) { return commitQueue.add(o); },\r\n            remove: function (o) { return commitQueue.remove(o); },\r\n            commit: function (maxTime) {\r\n                if (maxTime === void 0) { maxTime = Number.MAX_VALUE; }\r\n                return commit(maxTime);\r\n            },\r\n            get needsCommit() { return !commitQueue.isEmpty; },\r\n            has: function (o) {\r\n                return renderableMap.has(o);\r\n            },\r\n            clear: function () {\r\n                for (var i = 0, il = renderables.length; i < il; ++i) {\r\n                    renderables[i].dispose();\r\n                }\r\n                renderables.length = 0;\r\n                renderableMap.clear();\r\n                boundingSphereDirty = true;\r\n                boundingSphereVisibleDirty = true;\r\n            },\r\n            forEach: function (callbackFn) {\r\n                renderableMap.forEach(callbackFn);\r\n            },\r\n            get count() {\r\n                return renderables.length;\r\n            },\r\n            get boundingSphere() {\r\n                if (boundingSphereDirty) {\r\n                    calculateBoundingSphere(renderables, boundingSphere, false);\r\n                    boundingSphereDirty = false;\r\n                }\r\n                return boundingSphere;\r\n            },\r\n            get boundingSphereVisible() {\r\n                if (boundingSphereVisibleDirty) {\r\n                    calculateBoundingSphere(renderables, boundingSphereVisible, true);\r\n                    boundingSphereVisibleDirty = false;\r\n                    visibleHash = computeVisibleHash();\r\n                }\r\n                return boundingSphereVisible;\r\n            }\r\n        };\r\n    }\r\n    Scene.create = create;\r\n})(Scene || (Scene = {}));\r\nexport { Scene };\r\n//# sourceMappingURL=scene.js.map"]},"metadata":{},"sourceType":"module"}