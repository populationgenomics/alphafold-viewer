{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { OrderedSet } from '../../../mol-data/int';\nimport { BoundaryHelper } from '../../../mol-math/geometry/boundary-helper';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { PrincipalAxes } from '../../../mol-math/linear-algebra/matrix/principal-axes';\nimport { EmptyLoci, Loci } from '../../../mol-model/loci';\nimport { QueryContext, Structure, StructureElement, StructureSelection } from '../../../mol-model/structure';\nimport { StateObjectRef } from '../../../mol-state';\nimport { Task } from '../../../mol-task';\nimport { structureElementStatsLabel } from '../../../mol-theme/label';\nimport { arrayRemoveAtInPlace } from '../../../mol-util/array';\nimport { StatefulPluginComponent } from '../../component';\nimport { PluginStateObject as PSO } from '../../objects';\nimport { UUID } from '../../../mol-util';\nvar boundaryHelper = new BoundaryHelper('98');\nvar HISTORY_CAPACITY = 24;\n\nvar StructureSelectionManager =\n/** @class */\nfunction (_super) {\n  __extends(StructureSelectionManager, _super);\n\n  function StructureSelectionManager(plugin) {\n    var _this = _super.call(this, {\n      entries: new Map(),\n      additionsHistory: [],\n      stats: SelectionStats()\n    }) || this;\n\n    _this.plugin = plugin;\n    _this.events = {\n      changed: _this.ev(),\n      additionsHistoryUpdated: _this.ev(),\n      loci: {\n        add: _this.ev(),\n        remove: _this.ev(),\n        clear: _this.ev()\n      }\n    }; // listen to events from substructureParent helper to ensure it is updated\n\n    plugin.helpers.substructureParent.events.removed.subscribe(function (e) {\n      return _this.onRemove(e.ref, e.obj);\n    });\n    plugin.helpers.substructureParent.events.updated.subscribe(function (e) {\n      return _this.onUpdate(e.ref, e.oldObj, e.obj);\n    });\n    return _this;\n  }\n\n  Object.defineProperty(StructureSelectionManager.prototype, \"entries\", {\n    get: function () {\n      return this.state.entries;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StructureSelectionManager.prototype, \"additionsHistory\", {\n    get: function () {\n      return this.state.additionsHistory;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StructureSelectionManager.prototype, \"stats\", {\n    get: function () {\n      if (this.state.stats) return this.state.stats;\n      this.state.stats = this.calcStats();\n      return this.state.stats;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StructureSelectionManager.prototype.getEntry = function (s) {\n    // ignore decorators to get stable ref\n    var cell = this.plugin.helpers.substructureParent.get(s, true);\n    if (!cell) return;\n    var ref = cell.transform.ref;\n\n    if (!this.entries.has(ref)) {\n      var entry = new SelectionEntry(StructureElement.Loci(s, []));\n      this.entries.set(ref, entry);\n      return entry;\n    }\n\n    return this.entries.get(ref);\n  };\n\n  StructureSelectionManager.prototype.calcStats = function () {\n    var structureCount = 0;\n    var elementCount = 0;\n    var stats = StructureElement.Stats.create();\n    this.entries.forEach(function (v) {\n      var elements = v.selection.elements;\n\n      if (elements.length) {\n        structureCount += 1;\n\n        for (var i = 0, il = elements.length; i < il; ++i) {\n          elementCount += OrderedSet.size(elements[i].indices);\n        }\n\n        StructureElement.Stats.add(stats, stats, StructureElement.Stats.ofLoci(v.selection));\n      }\n    });\n    var label = structureElementStatsLabel(stats, {\n      countsOnly: true\n    });\n    return {\n      structureCount: structureCount,\n      elementCount: elementCount,\n      label: label\n    };\n  };\n\n  StructureSelectionManager.prototype.add = function (loci) {\n    if (!StructureElement.Loci.is(loci)) return false;\n    var entry = this.getEntry(loci.structure);\n    if (!entry) return false;\n    var sel = entry.selection;\n    entry.selection = StructureElement.Loci.union(entry.selection, loci);\n    this.tryAddHistory(loci);\n    this.referenceLoci = loci;\n    this.events.loci.add.next(loci);\n    return !StructureElement.Loci.areEqual(sel, entry.selection);\n  };\n\n  StructureSelectionManager.prototype.remove = function (loci) {\n    if (!StructureElement.Loci.is(loci)) return false;\n    var entry = this.getEntry(loci.structure);\n    if (!entry) return false;\n    var sel = entry.selection;\n    entry.selection = StructureElement.Loci.subtract(entry.selection, loci); // this.addHistory(loci);\n\n    this.referenceLoci = loci;\n    this.events.loci.remove.next(loci);\n    return !StructureElement.Loci.areEqual(sel, entry.selection);\n  };\n\n  StructureSelectionManager.prototype.intersect = function (loci) {\n    if (!StructureElement.Loci.is(loci)) return false;\n    var entry = this.getEntry(loci.structure);\n    if (!entry) return false;\n    var sel = entry.selection;\n    entry.selection = StructureElement.Loci.intersect(entry.selection, loci); // this.addHistory(loci);\n\n    this.referenceLoci = loci;\n    return !StructureElement.Loci.areEqual(sel, entry.selection);\n  };\n\n  StructureSelectionManager.prototype.set = function (loci) {\n    if (!StructureElement.Loci.is(loci)) return false;\n    var entry = this.getEntry(loci.structure);\n    if (!entry) return false;\n    var sel = entry.selection;\n    entry.selection = loci;\n    this.tryAddHistory(loci);\n    this.referenceLoci = undefined;\n    return !StructureElement.Loci.areEqual(sel, entry.selection);\n  };\n\n  StructureSelectionManager.prototype.modifyHistory = function (entry, action, modulus, groupByStructure) {\n    if (groupByStructure === void 0) {\n      groupByStructure = false;\n    }\n\n    var history = this.additionsHistory;\n    var idx = history.indexOf(entry);\n    if (idx < 0) return;\n    var swapWith = void 0;\n\n    switch (action) {\n      case 'remove':\n        arrayRemoveAtInPlace(history, idx);\n        break;\n\n      case 'up':\n        swapWith = idx - 1;\n        break;\n\n      case 'down':\n        swapWith = idx + 1;\n        break;\n    }\n\n    if (swapWith !== void 0) {\n      var mod = modulus ? Math.min(history.length, modulus) : history.length;\n\n      while (true) {\n        swapWith = swapWith % mod;\n        if (swapWith < 0) swapWith += mod;\n\n        if (!groupByStructure || history[idx].loci.structure === history[swapWith].loci.structure) {\n          var t = history[idx];\n          history[idx] = history[swapWith];\n          history[swapWith] = t;\n          break;\n        } else {\n          swapWith += action === 'up' ? -1 : +1;\n        }\n      }\n    }\n\n    this.events.additionsHistoryUpdated.next(void 0);\n  };\n\n  StructureSelectionManager.prototype.tryAddHistory = function (loci) {\n    if (Loci.isEmpty(loci)) return;\n    var idx = 0,\n        entry = void 0;\n\n    for (var _i = 0, _a = this.additionsHistory; _i < _a.length; _i++) {\n      var l = _a[_i];\n\n      if (Loci.areEqual(l.loci, loci)) {\n        entry = l;\n        break;\n      }\n\n      idx++;\n    }\n\n    if (entry) {\n      // move to top\n      arrayRemoveAtInPlace(this.additionsHistory, idx);\n      this.additionsHistory.unshift(entry);\n      this.events.additionsHistoryUpdated.next(void 0);\n      return;\n    }\n\n    var stats = StructureElement.Stats.ofLoci(loci);\n    var label = structureElementStatsLabel(stats, {\n      reverse: true\n    });\n    this.additionsHistory.unshift({\n      id: UUID.create22(),\n      loci: loci,\n      label: label\n    });\n    if (this.additionsHistory.length > HISTORY_CAPACITY) this.additionsHistory.pop();\n    this.events.additionsHistoryUpdated.next(void 0);\n  };\n\n  StructureSelectionManager.prototype.clearHistory = function () {\n    if (this.state.additionsHistory.length !== 0) {\n      this.state.additionsHistory = [];\n      this.events.additionsHistoryUpdated.next(void 0);\n    }\n  };\n\n  StructureSelectionManager.prototype.clearHistoryForStructure = function (structure) {\n    var historyEntryToRemove = [];\n\n    for (var _i = 0, _a = this.state.additionsHistory; _i < _a.length; _i++) {\n      var e = _a[_i];\n\n      if (e.loci.structure.root === structure.root) {\n        historyEntryToRemove.push(e);\n      }\n    }\n\n    for (var _b = 0, historyEntryToRemove_1 = historyEntryToRemove; _b < historyEntryToRemove_1.length; _b++) {\n      var e = historyEntryToRemove_1[_b];\n      this.modifyHistory(e, 'remove');\n    }\n\n    if (historyEntryToRemove.length !== 0) {\n      this.events.additionsHistoryUpdated.next(void 0);\n    }\n  };\n\n  StructureSelectionManager.prototype.onRemove = function (ref, obj) {\n    var _a;\n\n    if (this.entries.has(ref)) {\n      this.entries.delete(ref);\n\n      if (obj === null || obj === void 0 ? void 0 : obj.data) {\n        this.clearHistoryForStructure(obj.data);\n      }\n\n      if (((_a = this.referenceLoci) === null || _a === void 0 ? void 0 : _a.structure) === (obj === null || obj === void 0 ? void 0 : obj.data)) {\n        this.referenceLoci = undefined;\n      }\n\n      this.state.stats = void 0;\n      this.events.changed.next(void 0);\n    }\n  };\n\n  StructureSelectionManager.prototype.onUpdate = function (ref, oldObj, obj) {\n    var _a, _b, _c, _d; // no change to structure\n\n\n    if (oldObj === obj || (oldObj === null || oldObj === void 0 ? void 0 : oldObj.data) === obj.data) return; // ignore decorators to get stable ref\n\n    var cell = this.plugin.helpers.substructureParent.get(obj.data, true);\n    if (!cell) return;\n    ref = cell.transform.ref;\n    if (!this.entries.has(ref)) return; // use structure from last decorator as reference\n\n    var structure = (_b = (_a = this.plugin.helpers.substructureParent.get(obj.data)) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\n    if (!structure) return; // oldObj is not defined for inserts (e.g. TransformStructureConformation)\n\n    if (!(oldObj === null || oldObj === void 0 ? void 0 : oldObj.data) || Structure.areUnitIdsAndIndicesEqual(oldObj.data, obj.data)) {\n      this.entries.set(ref, remapSelectionEntry(this.entries.get(ref), structure)); // remap referenceLoci & prevHighlight if needed and possible\n\n      if (((_c = this.referenceLoci) === null || _c === void 0 ? void 0 : _c.structure.root) === structure.root) {\n        this.referenceLoci = StructureElement.Loci.remap(this.referenceLoci, structure);\n      } // remap history locis if needed and possible\n\n\n      var changedHistory = false;\n\n      for (var _i = 0, _f = this.state.additionsHistory; _i < _f.length; _i++) {\n        var e = _f[_i];\n\n        if (e.loci.structure.root === structure.root) {\n          e.loci = StructureElement.Loci.remap(e.loci, structure);\n          changedHistory = true;\n        }\n      }\n\n      if (changedHistory) this.events.additionsHistoryUpdated.next(void 0);\n    } else {\n      // clear the selection for ref\n      this.entries.set(ref, new SelectionEntry(StructureElement.Loci(structure, [])));\n\n      if (((_d = this.referenceLoci) === null || _d === void 0 ? void 0 : _d.structure.root) === structure.root) {\n        this.referenceLoci = undefined;\n      }\n\n      this.clearHistoryForStructure(structure);\n      this.state.stats = void 0;\n      this.events.changed.next(void 0);\n    }\n  };\n  /** Removes all selections and returns them */\n\n\n  StructureSelectionManager.prototype.clear = function () {\n    var keys = this.entries.keys();\n    var selections = [];\n\n    while (true) {\n      var k = keys.next();\n      if (k.done) break;\n      var s = this.entries.get(k.value);\n      if (!StructureElement.Loci.isEmpty(s.selection)) selections.push(s.selection);\n      s.selection = StructureElement.Loci(s.selection.structure, []);\n    }\n\n    this.referenceLoci = undefined;\n    this.state.stats = void 0;\n    this.events.changed.next(void 0);\n    this.events.loci.clear.next(void 0);\n    this.clearHistory();\n    return selections;\n  };\n\n  StructureSelectionManager.prototype.getLoci = function (structure) {\n    var entry = this.getEntry(structure);\n    if (!entry) return EmptyLoci;\n    return entry.selection;\n  };\n\n  StructureSelectionManager.prototype.getStructure = function (structure) {\n    var entry = this.getEntry(structure);\n    if (!entry) return;\n    return entry.structure;\n  };\n\n  StructureSelectionManager.prototype.structureHasSelection = function (structure) {\n    var _a, _b;\n\n    var s = (_b = (_a = structure.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\n    if (!s) return false;\n    var entry = this.getEntry(s);\n    return !!entry && !StructureElement.Loci.isEmpty(entry.selection);\n  };\n\n  StructureSelectionManager.prototype.has = function (loci) {\n    if (StructureElement.Loci.is(loci)) {\n      var entry = this.getEntry(loci.structure);\n\n      if (entry) {\n        return StructureElement.Loci.isSubset(entry.selection, loci);\n      }\n    }\n\n    return false;\n  };\n\n  StructureSelectionManager.prototype.tryGetRange = function (loci) {\n    if (!StructureElement.Loci.is(loci)) return;\n    if (loci.elements.length !== 1) return;\n    var entry = this.getEntry(loci.structure);\n    if (!entry) return;\n    var xs = loci.elements[0];\n    if (!xs) return;\n    var ref = this.referenceLoci;\n    if (!ref || !StructureElement.Loci.is(ref) || ref.structure !== loci.structure) return;\n    var e;\n\n    for (var _i = 0, _a = ref.elements; _i < _a.length; _i++) {\n      var _e = _a[_i];\n\n      if (xs.unit === _e.unit) {\n        e = _e;\n        break;\n      }\n    }\n\n    if (!e) return;\n    if (xs.unit !== e.unit) return;\n    return getElementRange(loci.structure, e, xs);\n  };\n  /** Count of all selected elements */\n\n\n  StructureSelectionManager.prototype.elementCount = function () {\n    var count = 0;\n    this.entries.forEach(function (v) {\n      count += StructureElement.Loci.size(v.selection);\n    });\n    return count;\n  };\n\n  StructureSelectionManager.prototype.getBoundary = function () {\n    var min = Vec3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    var max = Vec3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    boundaryHelper.reset();\n    var boundaries = [];\n    this.entries.forEach(function (v) {\n      var loci = v.selection;\n\n      if (!StructureElement.Loci.isEmpty(loci)) {\n        boundaries.push(StructureElement.Loci.getBoundary(loci));\n      }\n    });\n\n    for (var i = 0, il = boundaries.length; i < il; ++i) {\n      var _a = boundaries[i],\n          box = _a.box,\n          sphere = _a.sphere;\n      Vec3.min(min, min, box.min);\n      Vec3.max(max, max, box.max);\n      boundaryHelper.includePositionRadius(sphere.center, sphere.radius);\n    }\n\n    boundaryHelper.finishedIncludeStep();\n\n    for (var i = 0, il = boundaries.length; i < il; ++i) {\n      var sphere = boundaries[i].sphere;\n      boundaryHelper.radiusPositionRadius(sphere.center, sphere.radius);\n    }\n\n    return {\n      box: {\n        min: min,\n        max: max\n      },\n      sphere: boundaryHelper.getSphere()\n    };\n  };\n\n  StructureSelectionManager.prototype.getPrincipalAxes = function () {\n    var elementCount = this.elementCount();\n    var positions = new Float32Array(3 * elementCount);\n    var offset = 0;\n    this.entries.forEach(function (v) {\n      StructureElement.Loci.toPositionsArray(v.selection, positions, offset);\n      offset += StructureElement.Loci.size(v.selection) * 3;\n    });\n    return PrincipalAxes.ofPositions(positions);\n  };\n\n  StructureSelectionManager.prototype.modify = function (modifier, loci) {\n    var changed = false;\n\n    switch (modifier) {\n      case 'add':\n        changed = this.add(loci);\n        break;\n\n      case 'remove':\n        changed = this.remove(loci);\n        break;\n\n      case 'intersect':\n        changed = this.intersect(loci);\n        break;\n\n      case 'set':\n        changed = this.set(loci);\n        break;\n    }\n\n    if (changed) {\n      this.state.stats = void 0;\n      this.events.changed.next(void 0);\n    }\n  };\n\n  Object.defineProperty(StructureSelectionManager.prototype, \"applicableStructures\", {\n    get: function () {\n      return this.plugin.managers.structure.hierarchy.selection.structures.filter(function (s) {\n        return !!s.cell.obj;\n      }).map(function (s) {\n        return s.cell.obj.data;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StructureSelectionManager.prototype.triggerInteraction = function (modifier, loci, applyGranularity) {\n    if (applyGranularity === void 0) {\n      applyGranularity = true;\n    }\n\n    switch (modifier) {\n      case 'add':\n        this.plugin.managers.interactivity.lociSelects.select({\n          loci: loci\n        }, applyGranularity);\n        break;\n\n      case 'remove':\n        this.plugin.managers.interactivity.lociSelects.deselect({\n          loci: loci\n        }, applyGranularity);\n        break;\n\n      case 'intersect':\n        this.plugin.managers.interactivity.lociSelects.selectJoin({\n          loci: loci\n        }, applyGranularity);\n        break;\n\n      case 'set':\n        this.plugin.managers.interactivity.lociSelects.selectOnly({\n          loci: loci\n        }, applyGranularity);\n        break;\n    }\n  };\n\n  StructureSelectionManager.prototype.fromLoci = function (modifier, loci, applyGranularity) {\n    if (applyGranularity === void 0) {\n      applyGranularity = true;\n    }\n\n    this.triggerInteraction(modifier, loci, applyGranularity);\n  };\n\n  StructureSelectionManager.prototype.fromCompiledQuery = function (modifier, query, applyGranularity) {\n    if (applyGranularity === void 0) {\n      applyGranularity = true;\n    }\n\n    for (var _i = 0, _a = this.applicableStructures; _i < _a.length; _i++) {\n      var s = _a[_i];\n      var loci = query(new QueryContext(s));\n      this.triggerInteraction(modifier, StructureSelection.toLociWithSourceUnits(loci), applyGranularity);\n    }\n  };\n\n  StructureSelectionManager.prototype.fromSelectionQuery = function (modifier, query, applyGranularity) {\n    var _this = this;\n\n    if (applyGranularity === void 0) {\n      applyGranularity = true;\n    }\n\n    this.plugin.runTask(Task.create('Structure Selection', function (runtime) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _i, _a, s, loci;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _i = 0, _a = this.applicableStructures;\n              _b.label = 1;\n\n            case 1:\n              if (!(_i < _a.length)) return [3\n              /*break*/\n              , 4];\n              s = _a[_i];\n              return [4\n              /*yield*/\n              , query.getSelection(this.plugin, runtime, s)];\n\n            case 2:\n              loci = _b.sent();\n              this.triggerInteraction(modifier, StructureSelection.toLociWithSourceUnits(loci), applyGranularity);\n              _b.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }));\n  };\n\n  StructureSelectionManager.prototype.fromSelections = function (ref) {\n    var _a;\n\n    var cell = StateObjectRef.resolveAndCheck(this.plugin.state.data, ref);\n    if (!cell || !cell.obj) return;\n\n    if (!PSO.Molecule.Structure.Selections.is(cell.obj)) {\n      console.warn('fromSelections applied to wrong object type.', cell.obj);\n      return;\n    }\n\n    this.clear();\n\n    for (var _i = 0, _b = (_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data; _i < _b.length; _i++) {\n      var s = _b[_i];\n      this.fromLoci('set', s.loci);\n    }\n  };\n\n  return StructureSelectionManager;\n}(StatefulPluginComponent);\n\nexport { StructureSelectionManager };\n\nfunction SelectionStats() {\n  return {\n    structureCount: 0,\n    elementCount: 0,\n    label: 'Nothing Selected'\n  };\n}\n\n;\n\nvar SelectionEntry =\n/** @class */\nfunction () {\n  function SelectionEntry(selection) {\n    this._structure = void 0;\n    this._selection = selection;\n  }\n\n  Object.defineProperty(SelectionEntry.prototype, \"selection\", {\n    get: function () {\n      return this._selection;\n    },\n    set: function (value) {\n      this._selection = value;\n      this._structure = void 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SelectionEntry.prototype, \"structure\", {\n    get: function () {\n      if (this._structure) return this._structure;\n\n      if (Loci.isEmpty(this._selection)) {\n        this._structure = void 0;\n      } else {\n        this._structure = StructureElement.Loci.toStructure(this._selection);\n      }\n\n      return this._structure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SelectionEntry;\n}();\n/** remap `selection-entry` to be related to `structure` if possible */\n\n\nfunction remapSelectionEntry(e, s) {\n  return new SelectionEntry(StructureElement.Loci.remap(e.selection, s));\n}\n/**\r\n * Assumes `ref` and `ext` belong to the same unit in the same structure\r\n */\n\n\nfunction getElementRange(structure, ref, ext) {\n  var min = Math.min(OrderedSet.min(ref.indices), OrderedSet.min(ext.indices));\n  var max = Math.max(OrderedSet.max(ref.indices), OrderedSet.max(ext.indices));\n  return StructureElement.Loci(structure, [{\n    unit: ref.unit,\n    indices: OrderedSet.ofRange(min, max)\n  }]);\n}","map":{"version":3,"sources":["../../../../src/mol-plugin-state/manager/structure/selection.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,UAAT,QAA2B,uBAA3B;AACA,SAAS,cAAT,QAA+B,4CAA/B;AACA,SAAS,IAAT,QAAqB,kCAArB;AACA,SAAS,aAAT,QAA8B,wDAA9B;AACA,SAAS,SAAT,EAAoB,IAApB,QAAgC,yBAAhC;AACA,SAAS,YAAT,EAAuB,SAAvB,EAAkC,gBAAlC,EAAoE,kBAApE,QAA8F,8BAA9F;AAEA,SAAS,cAAT,QAA+B,oBAA/B;AACA,SAAS,IAAT,QAAqB,mBAArB;AACA,SAAS,0BAAT,QAA2C,0BAA3C;AACA,SAAS,oBAAT,QAAqC,yBAArC;AACA,SAAS,uBAAT,QAAwC,iBAAxC;AAEA,SAAS,iBAAiB,IAAI,GAA9B,QAAyC,eAAzC;AACA,SAAS,IAAT,QAAqB,mBAArB;AAUA,IAAM,cAAc,GAAG,IAAI,cAAJ,CAAmB,IAAnB,CAAvB;AACA,IAAM,gBAAgB,GAAG,EAAzB;;AAIA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;;AAsc3C,WAAA,yBAAA,CAAoB,MAApB,EAAyC;AAAzC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AAAE,MAAA,OAAO,EAAE,IAAI,GAAJ,EAAX;AAAsB,MAAA,gBAAgB,EAAE,EAAxC;AAA4C,MAAA,KAAK,EAAE,cAAc;AAAjE,KAAN,KAA4E,IADhF;;AAAoB,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AArcX,IAAA,KAAA,CAAA,MAAA,GAAS;AACd,MAAA,OAAO,EAAE,KAAI,CAAC,EAAL,EADK;AAEd,MAAA,uBAAuB,EAAE,KAAI,CAAC,EAAL,EAFX;AAId,MAAA,IAAI,EAAE;AACF,QAAA,GAAG,EAAE,KAAI,CAAC,EAAL,EADH;AAEF,QAAA,MAAM,EAAE,KAAI,CAAC,EAAL,EAFN;AAGF,QAAA,KAAK,EAAE,KAAI,CAAC,EAAL;AAHL;AAJQ,KAAT,CAqcgC,CAGrC;;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,kBAAf,CAAkC,MAAlC,CAAyC,OAAzC,CAAiD,SAAjD,CAA2D,UAAA,CAAA,EAAC;AAAI,aAAA,KAAI,CAAC,QAAL,CAAc,CAAC,CAAC,GAAhB,EAAqB,CAAC,CAAtB,GAAA,CAAA;AAA2B,KAA3F;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,kBAAf,CAAkC,MAAlC,CAAyC,OAAzC,CAAiD,SAAjD,CAA2D,UAAA,CAAA,EAAC;AAAI,aAAA,KAAI,CAAC,QAAL,CAAc,CAAC,CAAC,GAAhB,EAAqB,CAAC,CAAC,MAAvB,EAA+B,CAAC,CAAhC,GAAA,CAAA;AAAqC,KAArG;;AACH;;AA9bD,EAAA,MAAA,CAAA,cAAA,CAAI,yBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;SAAX,YAAA;AAAgB,aAAO,KAAK,KAAL,CAAW,OAAlB;AAA4B,KAAjC;qBAAA;;AAAA,GAAX;AACA,EAAA,MAAA,CAAA,cAAA,CAAI,yBAAA,CAAA,SAAJ,EAAI,kBAAJ,EAAoB;SAApB,YAAA;AAAyB,aAAO,KAAK,KAAL,CAAW,gBAAlB;AAAqC,KAA1C;qBAAA;;AAAA,GAApB;AACA,EAAA,MAAA,CAAA,cAAA,CAAI,yBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAAT,YAAA;AACI,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB,OAAO,KAAK,KAAL,CAAW,KAAlB;AACtB,WAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,SAAL,EAAnB;AACA,aAAO,KAAK,KAAL,CAAW,KAAlB;AACH,KAJQ;qBAAA;;AAAA,GAAT;;AAMQ,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,CAAjB,EAA6B;AACzB;AACA,QAAM,IAAI,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,kBAApB,CAAuC,GAAvC,CAA2C,CAA3C,EAA8C,IAA9C,CAAb;AACA,QAAI,CAAC,IAAL,EAAW;AACX,QAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,GAA3B;;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAL,EAA4B;AACxB,UAAM,KAAK,GAAG,IAAI,cAAJ,CAAmB,gBAAgB,CAAC,IAAjB,CAAsB,CAAtB,EAAyB,EAAzB,CAAnB,CAAd;AACA,WAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,KAAtB;AACA,aAAO,KAAP;AACH;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAP;AACH,GAZO;;AAcA,EAAA,yBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AACI,QAAI,cAAc,GAAG,CAArB;AACA,QAAI,YAAY,GAAG,CAAnB;AACA,QAAM,KAAK,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,MAAvB,EAAd;AAEA,SAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,CAAA,EAAC;AACV,UAAA,QAAQ,GAAK,CAAC,CAAC,SAAF,CAAL,QAAR;;AACR,UAAI,QAAQ,CAAC,MAAb,EAAqB;AACjB,QAAA,cAAc,IAAI,CAAlB;;AACA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,EAAE,CAAhD,EAAmD;AAC/C,UAAA,YAAY,IAAI,UAAU,CAAC,IAAX,CAAgB,QAAQ,CAAC,CAAD,CAAR,CAAY,OAA5B,CAAhB;AACH;;AACD,QAAA,gBAAgB,CAAC,KAAjB,CAAuB,GAAvB,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,gBAAgB,CAAC,KAAjB,CAAuB,MAAvB,CAA8B,CAAC,CAAC,SAAhC,CAAzC;AACH;AACJ,KATD;AAWA,QAAM,KAAK,GAAG,0BAA0B,CAAC,KAAD,EAAQ;AAAE,MAAA,UAAU,EAAE;AAAd,KAAR,CAAxC;AAEA,WAAO;AAAE,MAAA,cAAc,EAAA,cAAhB;AAAkB,MAAA,YAAY,EAAA,YAA9B;AAAgC,MAAA,KAAK,EAAA;AAArC,KAAP;AACH,GAnBO;;AAqBA,EAAA,yBAAA,CAAA,SAAA,CAAA,GAAA,GAAR,UAAY,IAAZ,EAAsB;AAClB,QAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAL,EAAqC,OAAO,KAAP;AAErC,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AAEZ,QAAM,GAAG,GAAG,KAAK,CAAC,SAAlB;AACA,IAAA,KAAK,CAAC,SAAN,GAAkB,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,CAA4B,KAAK,CAAC,SAAlC,EAA6C,IAA7C,CAAlB;AACA,SAAK,aAAL,CAAmB,IAAnB;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,IAArB,CAA0B,IAA1B;AACA,WAAO,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,GAA/B,EAAoC,KAAK,CAAC,SAA1C,CAAR;AACH,GAZO;;AAcA,EAAA,yBAAA,CAAA,SAAA,CAAA,MAAA,GAAR,UAAe,IAAf,EAAyB;AACrB,QAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAL,EAAqC,OAAO,KAAP;AAErC,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AAEZ,QAAM,GAAG,GAAG,KAAK,CAAC,SAAlB;AACA,IAAA,KAAK,CAAC,SAAN,GAAkB,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,KAAK,CAAC,SAArC,EAAgD,IAAhD,CAAlB,CAPqB,CAQrB;;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,MAAjB,CAAwB,IAAxB,CAA6B,IAA7B;AACA,WAAO,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,GAA/B,EAAoC,KAAK,CAAC,SAA1C,CAAR;AACH,GAZO;;AAcA,EAAA,yBAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,IAAlB,EAA4B;AACxB,QAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAL,EAAqC,OAAO,KAAP;AAErC,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AAEZ,QAAM,GAAG,GAAG,KAAK,CAAC,SAAlB;AACA,IAAA,KAAK,CAAC,SAAN,GAAkB,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,CAAgC,KAAK,CAAC,SAAtC,EAAiD,IAAjD,CAAlB,CAPwB,CAQxB;;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,WAAO,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,GAA/B,EAAoC,KAAK,CAAC,SAA1C,CAAR;AACH,GAXO;;AAaA,EAAA,yBAAA,CAAA,SAAA,CAAA,GAAA,GAAR,UAAY,IAAZ,EAAsB;AAClB,QAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAL,EAAqC,OAAO,KAAP;AAErC,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,OAAO,KAAP;AAEZ,QAAM,GAAG,GAAG,KAAK,CAAC,SAAlB;AACA,IAAA,KAAK,CAAC,SAAN,GAAkB,IAAlB;AACA,SAAK,aAAL,CAAmB,IAAnB;AACA,SAAK,aAAL,GAAqB,SAArB;AACA,WAAO,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,GAA/B,EAAoC,KAAK,CAAC,SAA1C,CAAR;AACH,GAXO;;AAaR,EAAA,yBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAAqD,MAArD,EAAuF,OAAvF,EAAyG,gBAAzG,EAAiI;AAAxB,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAC7H,QAAM,OAAO,GAAG,KAAK,gBAArB;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAZ;AACA,QAAI,GAAG,GAAG,CAAV,EAAa;AAEb,QAAI,QAAQ,GAAuB,KAAK,CAAxC;;AAEA,YAAQ,MAAR;AACI,WAAK,QAAL;AAAe,QAAA,oBAAoB,CAAC,OAAD,EAAU,GAAV,CAApB;AAAoC;;AACnD,WAAK,IAAL;AAAW,QAAA,QAAQ,GAAG,GAAG,GAAG,CAAjB;AAAoB;;AAC/B,WAAK,MAAL;AAAa,QAAA,QAAQ,GAAG,GAAG,GAAG,CAAjB;AAAoB;AAHrC;;AAMA,QAAI,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACrB,UAAM,GAAG,GAAG,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAjB,EAAyB,OAAzB,CAAH,GAAuC,OAAO,CAAC,MAAlE;;AACA,aAAO,IAAP,EAAa;AACT,QAAA,QAAQ,GAAG,QAAQ,GAAG,GAAtB;AACA,YAAI,QAAQ,GAAG,CAAf,EAAkB,QAAQ,IAAI,GAAZ;;AAElB,YAAI,CAAC,gBAAD,IAAqB,OAAO,CAAC,GAAD,CAAP,CAAa,IAAb,CAAkB,SAAlB,KAAgC,OAAO,CAAC,QAAD,CAAP,CAAkB,IAAlB,CAAuB,SAAhF,EAA2F;AACvF,cAAM,CAAC,GAAG,OAAO,CAAC,GAAD,CAAjB;AACA,UAAA,OAAO,CAAC,GAAD,CAAP,GAAe,OAAO,CAAC,QAAD,CAAtB;AACA,UAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,CAApB;AACA;AACH,SALD,MAKO;AACH,UAAA,QAAQ,IAAI,MAAM,KAAK,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAC,CAApC;AACH;AACJ;AACJ;;AAED,SAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACH,GA/BD;;AAiCQ,EAAA,yBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,IAAtB,EAAiD;AAC7C,QAAI,IAAI,CAAC,OAAL,CAAa,IAAb,CAAJ,EAAwB;AAExB,QAAI,GAAG,GAAG,CAAV;AAAA,QAAa,KAAK,GAA+C,KAAK,CAAtE;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,gBAArB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAuC;AAAlC,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;;AACD,UAAI,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,EAAsB,IAAtB,CAAJ,EAAiC;AAC7B,QAAA,KAAK,GAAG,CAAR;AACA;AACH;;AACD,MAAA,GAAG;AACN;;AAED,QAAI,KAAJ,EAAW;AACP;AACA,MAAA,oBAAoB,CAAC,KAAK,gBAAN,EAAwB,GAAxB,CAApB;AACA,WAAK,gBAAL,CAAsB,OAAtB,CAA8B,KAA9B;AACA,WAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACA;AACH;;AAED,QAAM,KAAK,GAAG,gBAAgB,CAAC,KAAjB,CAAuB,MAAvB,CAA8B,IAA9B,CAAd;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,KAAD,EAAQ;AAAE,MAAA,OAAO,EAAE;AAAX,KAAR,CAAxC;AAEA,SAAK,gBAAL,CAAsB,OAAtB,CAA8B;AAAE,MAAA,EAAE,EAAE,IAAI,CAAC,QAAL,EAAN;AAAuB,MAAA,IAAI,EAAA,IAA3B;AAA6B,MAAA,KAAK,EAAA;AAAlC,KAA9B;AACA,QAAI,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,gBAAnC,EAAqD,KAAK,gBAAL,CAAsB,GAAtB;AAErD,SAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACH,GA3BO;;AA6BA,EAAA,yBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,gBAAX,CAA4B,MAA5B,KAAuC,CAA3C,EAA8C;AAC1C,WAAK,KAAL,CAAW,gBAAX,GAA8B,EAA9B;AACA,WAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACH;AACJ,GALO;;AAOA,EAAA,yBAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,UAAiC,SAAjC,EAAqD;AACjD,QAAM,oBAAoB,GAAqC,EAA/D;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,KAAL,CAAW,gBAA3B,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA6C;AAAxC,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;;AACD,UAAI,CAAC,CAAC,IAAF,CAAO,SAAP,CAAiB,IAAjB,KAA0B,SAAS,CAAC,IAAxC,EAA8C;AAC1C,QAAA,oBAAoB,CAAC,IAArB,CAA0B,CAA1B;AACH;AACJ;;AACD,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,sBAAA,GAAA,oBAAhB,EAAgB,EAAA,GAAA,sBAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAsC;AAAjC,UAAM,CAAC,GAAA,sBAAA,CAAA,EAAA,CAAP;AACD,WAAK,aAAL,CAAmB,CAAnB,EAAsB,QAAtB;AACH;;AACD,QAAI,oBAAoB,CAAC,MAArB,KAAgC,CAApC,EAAuC;AACnC,WAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACH;AACJ,GAbO;;AAeA,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,GAAjB,EAA8B,GAA9B,EAAqE;;;AACjE,QAAI,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAJ,EAA2B;AACvB,WAAK,OAAL,CAAa,MAAb,CAAoB,GAApB;;AACA,UAAI,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,IAAT,EAAe;AACX,aAAK,wBAAL,CAA8B,GAAG,CAAC,IAAlC;AACH;;AACD,UAAI,CAAA,CAAA,EAAA,GAAA,KAAK,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,SAApB,OAAkC,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,IAAvC,CAAJ,EAAiD;AAC7C,aAAK,aAAL,GAAqB,SAArB;AACH;;AACD,WAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,CAAxB;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,KAAK,CAA9B;AACH;AACJ,GAZO;;AAcA,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,GAAjB,EAA8B,MAA9B,EAA0E,GAA1E,EAAqG;uBAAA,CAEjG;;;AACA,QAAI,MAAM,KAAK,GAAX,IAAkB,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,MAAiB,GAAG,CAAC,IAA3C,EAAiD,OAHgD,CAKjG;;AACA,QAAM,IAAI,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,kBAApB,CAAuC,GAAvC,CAA2C,GAAG,CAAC,IAA/C,EAAqD,IAArD,CAAb;AACA,QAAI,CAAC,IAAL,EAAW;AAEX,IAAA,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,GAArB;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAL,EAA4B,OAVqE,CAYjG;;AACA,QAAM,SAAS,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,MAAL,CAAY,OAAZ,CAAoB,kBAApB,CAAuC,GAAvC,CAA2C,GAAG,CAAC,IAA/C,CAAA,MAAoD,IAApD,IAAoD,EAAA,KAAA,KAAA,CAApD,GAAoD,KAAA,CAApD,GAAoD,EAAA,CAAE,GAAtD,MAAyD,IAAzD,IAAyD,EAAA,KAAA,KAAA,CAAzD,GAAyD,KAAA,CAAzD,GAAyD,EAAA,CAAE,IAA7E;AACA,QAAI,CAAC,SAAL,EAAgB,OAdiF,CAgBjG;;AACA,QAAI,EAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAT,KAAiB,SAAS,CAAC,yBAAV,CAAoC,MAAM,CAAC,IAA3C,EAAiD,GAAG,CAAC,IAArD,CAArB,EAAiF;AAC7E,WAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,mBAAmB,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAD,EAAyB,SAAzB,CAAzC,EAD6E,CAG7E;;AACA,UAAI,CAAA,CAAA,EAAA,GAAA,KAAK,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,SAAF,CAAY,IAA9B,MAAuC,SAAS,CAAC,IAArD,EAA2D;AACvD,aAAK,aAAL,GAAqB,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,CAA4B,KAAK,aAAjC,EAAgD,SAAhD,CAArB;AACH,OAN4E,CAQ7E;;;AACA,UAAI,cAAc,GAAG,KAArB;;AACA,WAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,KAAL,CAAW,gBAA3B,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA6C;AAAxC,YAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;;AACD,YAAI,CAAC,CAAC,IAAF,CAAO,SAAP,CAAiB,IAAjB,KAA0B,SAAS,CAAC,IAAxC,EAA8C;AAC1C,UAAA,CAAC,CAAC,IAAF,GAAS,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,CAA4B,CAAC,CAAC,IAA9B,EAAoC,SAApC,CAAT;AACA,UAAA,cAAc,GAAG,IAAjB;AACH;AACJ;;AACD,UAAI,cAAJ,EAAoB,KAAK,MAAL,CAAY,uBAAZ,CAAoC,IAApC,CAAyC,KAAK,CAA9C;AACvB,KAjBD,MAiBO;AACH;AACA,WAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,IAAI,cAAJ,CAAmB,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,EAAiC,EAAjC,CAAnB,CAAtB;;AAEA,UAAI,CAAA,CAAA,EAAA,GAAA,KAAK,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,SAAF,CAAY,IAA9B,MAAuC,SAAS,CAAC,IAArD,EAA2D;AACvD,aAAK,aAAL,GAAqB,SAArB;AACH;;AAED,WAAK,wBAAL,CAA8B,SAA9B;AAEA,WAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,CAAxB;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,KAAK,CAA9B;AACH;AACJ,GA/CO;AAiDR;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACI,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAAb,EAAb;AACA,QAAM,UAAU,GAA4B,EAA5C;;AACA,WAAO,IAAP,EAAa;AACT,UAAM,CAAC,GAAG,IAAI,CAAC,IAAL,EAAV;AACA,UAAI,CAAC,CAAC,IAAN,EAAY;AACZ,UAAM,CAAC,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,CAAC,CAAC,KAAnB,CAAV;AACA,UAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAA8B,CAAC,CAAC,SAAhC,CAAL,EAAiD,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAC,SAAlB;AACjD,MAAA,CAAC,CAAC,SAAF,GAAc,gBAAgB,CAAC,IAAjB,CAAsB,CAAC,CAAC,SAAF,CAAY,SAAlC,EAA6C,EAA7C,CAAd;AACH;;AACD,SAAK,aAAL,GAAqB,SAArB;AACA,SAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,CAAxB;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,KAAK,CAA9B;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAuB,IAAvB,CAA4B,KAAK,CAAjC;AACA,SAAK,YAAL;AACA,WAAO,UAAP;AACH,GAhBD;;AAkBA,EAAA,yBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAA4B;AACxB,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,SAAd,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,OAAO,SAAP;AACZ,WAAO,KAAK,CAAC,SAAb;AACH,GAJD;;AAMA,EAAA,yBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,SAAb,EAAiC;AAC7B,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,SAAd,CAAd;AACA,QAAI,CAAC,KAAL,EAAY;AACZ,WAAO,KAAK,CAAC,SAAb;AACH,GAJD;;AAMA,EAAA,yBAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,SAAtB,EAA6C;;;AACzC,QAAM,CAAC,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,SAAS,CAAC,IAAV,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,GAAhB,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,IAA/B;AACA,QAAI,CAAC,CAAL,EAAQ,OAAO,KAAP;AACR,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,CAAd,CAAd;AACA,WAAO,CAAC,CAAC,KAAF,IAAW,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAA8B,KAAK,CAAC,SAApC,CAAnB;AACH,GALD;;AAOA,EAAA,yBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAc;AACV,QAAI,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAJ,EAAoC;AAChC,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;;AACA,UAAI,KAAJ,EAAW;AACP,eAAO,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CAA+B,KAAK,CAAC,SAArC,EAAgD,IAAhD,CAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GARD;;AAUA,EAAA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,IAAZ,EAAsB;AAClB,QAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,IAAzB,CAAL,EAAqC;AACrC,QAAI,IAAI,CAAC,QAAL,CAAc,MAAd,KAAyB,CAA7B,EAAgC;AAChC,QAAM,KAAK,GAAG,KAAK,QAAL,CAAc,IAAI,CAAC,SAAnB,CAAd;AACA,QAAI,CAAC,KAAL,EAAY;AAEZ,QAAM,EAAE,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAX;AACA,QAAI,CAAC,EAAL,EAAS;AAET,QAAM,GAAG,GAAG,KAAK,aAAjB;AACA,QAAI,CAAC,GAAD,IAAQ,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,EAAtB,CAAyB,GAAzB,CAAT,IAA0C,GAAG,CAAC,SAAJ,KAAkB,IAAI,CAAC,SAArE,EAAgF;AAEhF,QAAI,CAAJ;;AACA,SAAiB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAG,CAAC,QAArB,EAAiB,EAAA,GAAA,EAAA,CAAA,MAAjB,EAAiB,EAAA,EAAjB,EAA+B;AAA1B,UAAM,EAAE,GAAA,EAAA,CAAA,EAAA,CAAR;;AACD,UAAI,EAAE,CAAC,IAAH,KAAY,EAAE,CAAC,IAAnB,EAAyB;AACrB,QAAA,CAAC,GAAG,EAAJ;AACA;AACH;AACJ;;AACD,QAAI,CAAC,CAAL,EAAQ;AAER,QAAI,EAAE,CAAC,IAAH,KAAY,CAAC,CAAC,IAAlB,EAAwB;AAExB,WAAO,eAAe,CAAC,IAAI,CAAC,SAAN,EAAiB,CAAjB,EAAoB,EAApB,CAAtB;AACH,GAxBD;AA0BA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACI,QAAI,KAAK,GAAG,CAAZ;AACA,SAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,CAAA,EAAC;AAClB,MAAA,KAAK,IAAI,gBAAgB,CAAC,IAAjB,CAAsB,IAAtB,CAA2B,CAAC,CAAC,SAA7B,CAAT;AACH,KAFD;AAGA,WAAO,KAAP;AACH,GAND;;AAQA,EAAA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACI,QAAM,GAAG,GAAG,IAAI,CAAC,MAAL,CAAY,MAAM,CAAC,SAAnB,EAA8B,MAAM,CAAC,SAArC,EAAgD,MAAM,CAAC,SAAvD,CAAZ;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,MAAL,CAAY,CAAC,MAAM,CAAC,SAApB,EAA+B,CAAC,MAAM,CAAC,SAAvC,EAAkD,CAAC,MAAM,CAAC,SAA1D,CAAZ;AAEA,IAAA,cAAc,CAAC,KAAf;AAEA,QAAM,UAAU,GAAe,EAA/B;AACA,SAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,CAAA,EAAC;AAClB,UAAM,IAAI,GAAG,CAAC,CAAC,SAAf;;AACA,UAAI,CAAC,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAA8B,IAA9B,CAAL,EAA0C;AACtC,QAAA,UAAU,CAAC,IAAX,CAAgB,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB,CAAkC,IAAlC,CAAhB;AACH;AACJ,KALD;;AAOA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,UAAU,CAAC,MAAhC,EAAwC,CAAC,GAAG,EAA5C,EAAgD,EAAE,CAAlD,EAAqD;AAC3C,UAAA,EAAA,GAAkB,UAAU,CAAC,CAAD,CAA5B;AAAA,UAAE,GAAG,GAAA,EAAA,CAAA,GAAL;AAAA,UAAO,MAAM,GAAA,EAAA,CAAA,MAAb;AACN,MAAA,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,GAAd,EAAmB,GAAG,CAAC,GAAvB;AACA,MAAA,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,GAAd,EAAmB,GAAG,CAAC,GAAvB;AACA,MAAA,cAAc,CAAC,qBAAf,CAAqC,MAAM,CAAC,MAA5C,EAAoD,MAAM,CAAC,MAA3D;AACH;;AACD,IAAA,cAAc,CAAC,mBAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,UAAU,CAAC,MAAhC,EAAwC,CAAC,GAAG,EAA5C,EAAgD,EAAE,CAAlD,EAAqD;AACzC,UAAA,MAAM,GAAK,UAAU,CAAC,CAAD,CAAV,CAAL,MAAN;AACR,MAAA,cAAc,CAAC,oBAAf,CAAoC,MAAM,CAAC,MAA3C,EAAmD,MAAM,CAAC,MAA1D;AACH;;AAED,WAAO;AAAE,MAAA,GAAG,EAAE;AAAE,QAAA,GAAG,EAAA,GAAL;AAAO,QAAA,GAAG,EAAA;AAAV,OAAP;AAAqB,MAAA,MAAM,EAAE,cAAc,CAAC,SAAf;AAA7B,KAAP;AACH,GA3BD;;AA6BA,EAAA,yBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACI,QAAM,YAAY,GAAG,KAAK,YAAL,EAArB;AACA,QAAM,SAAS,GAAG,IAAI,YAAJ,CAAiB,IAAI,YAArB,CAAlB;AACA,QAAI,MAAM,GAAG,CAAb;AACA,SAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,CAAA,EAAC;AAClB,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,gBAAtB,CAAuC,CAAC,CAAC,SAAzC,EAAoD,SAApD,EAA+D,MAA/D;AACA,MAAA,MAAM,IAAI,gBAAgB,CAAC,IAAjB,CAAsB,IAAtB,CAA2B,CAAC,CAAC,SAA7B,IAA0C,CAApD;AACH,KAHD;AAIA,WAAO,aAAa,CAAC,WAAd,CAA0B,SAA1B,CAAP;AACH,GATD;;AAWA,EAAA,yBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,QAAP,EAA6C,IAA7C,EAAuD;AACnD,QAAI,OAAO,GAAG,KAAd;;AACA,YAAQ,QAAR;AACI,WAAK,KAAL;AAAY,QAAA,OAAO,GAAG,KAAK,GAAL,CAAS,IAAT,CAAV;AAA0B;;AACtC,WAAK,QAAL;AAAe,QAAA,OAAO,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAV;AAA6B;;AAC5C,WAAK,WAAL;AAAkB,QAAA,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAV;AAAgC;;AAClD,WAAK,KAAL;AAAY,QAAA,OAAO,GAAG,KAAK,GAAL,CAAS,IAAT,CAAV;AAA0B;AAJ1C;;AAOA,QAAI,OAAJ,EAAa;AACT,WAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,CAAxB;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,KAAK,CAA9B;AACH;AACJ,GAbD;;AAeA,EAAA,MAAA,CAAA,cAAA,CAAY,yBAAA,CAAA,SAAZ,EAAY,sBAAZ,EAAgC;SAAhC,YAAA;AACI,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAA+B,SAA/B,CAAyC,SAAzC,CAAmD,UAAnD,CACF,MADE,CACK,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,CAAC,CAAC,IAAF,CAAF,GAAA;AAAY,OADtB,EAEF,GAFE,CAEE,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,IAAF,CAAO,GAAP,CAAA,IAAA;AAAgB,OAFvB,CAAP;AAGH,KAJ+B;qBAAA;;AAAA,GAAhC;;AAMQ,EAAA,yBAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,QAA3B,EAAiE,IAAjE,EAA6E,gBAA7E,EAAoG;AAAvB,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,IAAA;AAAuB;;AAChG,YAAQ,QAAR;AACI,WAAK,KAAL;AACI,aAAK,MAAL,CAAY,QAAZ,CAAqB,aAArB,CAAmC,WAAnC,CAA+C,MAA/C,CAAsD;AAAE,UAAA,IAAI,EAAA;AAAN,SAAtD,EAAgE,gBAAhE;AACA;;AACJ,WAAK,QAAL;AACI,aAAK,MAAL,CAAY,QAAZ,CAAqB,aAArB,CAAmC,WAAnC,CAA+C,QAA/C,CAAwD;AAAE,UAAA,IAAI,EAAA;AAAN,SAAxD,EAAkE,gBAAlE;AACA;;AACJ,WAAK,WAAL;AACI,aAAK,MAAL,CAAY,QAAZ,CAAqB,aAArB,CAAmC,WAAnC,CAA+C,UAA/C,CAA0D;AAAE,UAAA,IAAI,EAAA;AAAN,SAA1D,EAAoE,gBAApE;AACA;;AACJ,WAAK,KAAL;AACI,aAAK,MAAL,CAAY,QAAZ,CAAqB,aAArB,CAAmC,WAAnC,CAA+C,UAA/C,CAA0D;AAAE,UAAA,IAAI,EAAA;AAAN,SAA1D,EAAoE,gBAApE;AACA;AAZR;AAcH,GAfO;;AAiBR,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAA+C,IAA/C,EAA2D,gBAA3D,EAAkF;AAAvB,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,IAAA;AAAuB;;AAC9E,SAAK,kBAAL,CAAwB,QAAxB,EAAkC,IAAlC,EAAwC,gBAAxC;AACH,GAFD;;AAIA,EAAA,yBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAAwD,KAAxD,EAA+E,gBAA/E,EAAsG;AAAvB,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,IAAA;AAAuB;;AAClG,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,oBAArB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA2C;AAAtC,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,UAAM,IAAI,GAAG,KAAK,CAAC,IAAI,YAAJ,CAAiB,CAAjB,CAAD,CAAlB;AACA,WAAK,kBAAL,CAAwB,QAAxB,EAAkC,kBAAkB,CAAC,qBAAnB,CAAyC,IAAzC,CAAlC,EAAkF,gBAAlF;AACH;AACJ,GALD;;AAOA,EAAA,yBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,QAAnB,EAAyD,KAAzD,EAAyF,gBAAzF,EAAgH;AAAhH,QAAA,KAAA,GAAA,IAAA;;AAAyF,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,IAAA;AAAuB;;AAC5G,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAAI,CAAC,MAAL,CAAY,qBAAZ,EAAmC,UAAM,OAAN,EAAa;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;mBACvB,C,EAAzB,EAAA,GAAA,KAAK,oB;;;;kBAAL,EAAA,EAAA,GAAA,EAAA,CAAA,MAAA,C,EAAyB,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AAA9B,cAAA,CAAC,GAAA,EAAA,CAAA,EAAA,CAAD;AACM,qBAAA,CAAA;AAAA;AAAA,gBAAM,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAxB,EAAgC,OAAhC,EAAyC,CAAzC,CAAN,CAAA;;;AAAP,cAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,mBAAK,kBAAL,CAAwB,QAAxB,EAAkC,kBAAkB,CAAC,qBAAnB,CAAyC,IAAzC,CAAlC,EAAkF,gBAAlF;;;;AAFY,cAAA,EAAA;;;;;;;;;;;OADgD,CAAA;AAKnE,KALmB,CAApB;AAMH,GAPD;;AASA,EAAA,yBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,GAAf,EAAqE;;;AACjE,QAAM,IAAI,GAAG,cAAc,CAAC,eAAf,CAA+B,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAjD,EAAuD,GAAvD,CAAb;AACA,QAAI,CAAC,IAAD,IAAS,CAAC,IAAI,CAAC,GAAnB,EAAwB;;AAExB,QAAI,CAAC,GAAG,CAAC,QAAJ,CAAa,SAAb,CAAuB,UAAvB,CAAkC,EAAlC,CAAqC,IAAI,CAAC,GAA1C,CAAL,EAAqD;AACjD,MAAA,OAAO,CAAC,IAAR,CAAa,8CAAb,EAA6D,IAAI,CAAC,GAAlE;AACA;AACH;;AAED,SAAK,KAAL;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,GAAL,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAQ,EAAA,CAAE,IAA1B,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAgC;AAA3B,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,WAAK,QAAL,CAAc,KAAd,EAAqB,CAAC,CAAC,IAAvB;AACH;AACJ,GAbD;;AAsBJ,SAAA,yBAAA;AAAC,CA7cD,CAA+C,uBAA/C,CAAA;;;;AAqdA,SAAS,cAAT,GAAuB;AAAqB,SAAO;AAAE,IAAA,cAAc,EAAE,CAAlB;AAAqB,IAAA,YAAY,EAAE,CAAnC;AAAsC,IAAA,KAAK,EAAE;AAA7C,GAAP;AAA2E;;AAAA;;AAEvH,IAAA,cAAA;AAAA;AAAA,YAAA;AAoBI,WAAA,cAAA,CAAY,SAAZ,EAA4C;AAlBpC,SAAA,UAAA,GAAyB,KAAK,CAA9B;AAmBJ,SAAK,UAAL,GAAkB,SAAlB;AACH;;AAlBD,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,YAAA;AAAkB,aAAO,KAAK,UAAZ;AAAyB,KAA9B;SACb,UAAc,KAAd,EAA0C;AACtC,WAAK,UAAL,GAAkB,KAAlB;AACA,WAAK,UAAL,GAAkB,KAAK,CAAvB;AACH,KAJY;qBAAA;;AAAA,GAAb;AAMA,EAAA,MAAA,CAAA,cAAA,CAAI,cAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,YAAA;AACI,UAAI,KAAK,UAAT,EAAqB,OAAO,KAAK,UAAZ;;AACrB,UAAI,IAAI,CAAC,OAAL,CAAa,KAAK,UAAlB,CAAJ,EAAmC;AAC/B,aAAK,UAAL,GAAkB,KAAK,CAAvB;AACH,OAFD,MAEO;AACH,aAAK,UAAL,GAAkB,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB,CAAkC,KAAK,UAAvC,CAAlB;AACH;;AACD,aAAO,KAAK,UAAZ;AACH,KARY;qBAAA;;AAAA,GAAb;AAaJ,SAAA,cAAA;AAAC,CAvBD,EAAA;AA+BA;;;AACA,SAAS,mBAAT,CAA6B,CAA7B,EAAgD,CAAhD,EAA4D;AACxD,SAAO,IAAI,cAAJ,CAAmB,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,CAA4B,CAAC,CAAC,SAA9B,EAAyC,CAAzC,CAAnB,CAAP;AACH;AAED;;AAEG;;;AACH,SAAS,eAAT,CAAyB,SAAzB,EAA+C,GAA/C,EAA0F,GAA1F,EAAmI;AAC/H,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,UAAU,CAAC,GAAX,CAAe,GAAG,CAAC,OAAnB,CAAT,EAAsC,UAAU,CAAC,GAAX,CAAe,GAAG,CAAC,OAAnB,CAAtC,CAAZ;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,UAAU,CAAC,GAAX,CAAe,GAAG,CAAC,OAAnB,CAAT,EAAsC,UAAU,CAAC,GAAX,CAAe,GAAG,CAAC,OAAnB,CAAtC,CAAZ;AAEA,SAAO,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,EAAiC,CAAC;AACrC,IAAA,IAAI,EAAE,GAAG,CAAC,IAD2B;AAErC,IAAA,OAAO,EAAE,UAAU,CAAC,OAAX,CAAmB,GAAnB,EAAsD,GAAtD;AAF4B,GAAD,CAAjC,CAAP;AAIH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __extends, __generator } from \"tslib\";\r\nimport { OrderedSet } from '../../../mol-data/int';\r\nimport { BoundaryHelper } from '../../../mol-math/geometry/boundary-helper';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { PrincipalAxes } from '../../../mol-math/linear-algebra/matrix/principal-axes';\r\nimport { EmptyLoci, Loci } from '../../../mol-model/loci';\r\nimport { QueryContext, Structure, StructureElement, StructureSelection } from '../../../mol-model/structure';\r\nimport { StateObjectRef } from '../../../mol-state';\r\nimport { Task } from '../../../mol-task';\r\nimport { structureElementStatsLabel } from '../../../mol-theme/label';\r\nimport { arrayRemoveAtInPlace } from '../../../mol-util/array';\r\nimport { StatefulPluginComponent } from '../../component';\r\nimport { PluginStateObject as PSO } from '../../objects';\r\nimport { UUID } from '../../../mol-util';\r\nvar boundaryHelper = new BoundaryHelper('98');\r\nvar HISTORY_CAPACITY = 24;\r\nvar StructureSelectionManager = /** @class */ (function (_super) {\r\n    __extends(StructureSelectionManager, _super);\r\n    function StructureSelectionManager(plugin) {\r\n        var _this = _super.call(this, { entries: new Map(), additionsHistory: [], stats: SelectionStats() }) || this;\r\n        _this.plugin = plugin;\r\n        _this.events = {\r\n            changed: _this.ev(),\r\n            additionsHistoryUpdated: _this.ev(),\r\n            loci: {\r\n                add: _this.ev(),\r\n                remove: _this.ev(),\r\n                clear: _this.ev()\r\n            }\r\n        };\r\n        // listen to events from substructureParent helper to ensure it is updated\r\n        plugin.helpers.substructureParent.events.removed.subscribe(function (e) { return _this.onRemove(e.ref, e.obj); });\r\n        plugin.helpers.substructureParent.events.updated.subscribe(function (e) { return _this.onUpdate(e.ref, e.oldObj, e.obj); });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(StructureSelectionManager.prototype, \"entries\", {\r\n        get: function () { return this.state.entries; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StructureSelectionManager.prototype, \"additionsHistory\", {\r\n        get: function () { return this.state.additionsHistory; },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StructureSelectionManager.prototype, \"stats\", {\r\n        get: function () {\r\n            if (this.state.stats)\r\n                return this.state.stats;\r\n            this.state.stats = this.calcStats();\r\n            return this.state.stats;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StructureSelectionManager.prototype.getEntry = function (s) {\r\n        // ignore decorators to get stable ref\r\n        var cell = this.plugin.helpers.substructureParent.get(s, true);\r\n        if (!cell)\r\n            return;\r\n        var ref = cell.transform.ref;\r\n        if (!this.entries.has(ref)) {\r\n            var entry = new SelectionEntry(StructureElement.Loci(s, []));\r\n            this.entries.set(ref, entry);\r\n            return entry;\r\n        }\r\n        return this.entries.get(ref);\r\n    };\r\n    StructureSelectionManager.prototype.calcStats = function () {\r\n        var structureCount = 0;\r\n        var elementCount = 0;\r\n        var stats = StructureElement.Stats.create();\r\n        this.entries.forEach(function (v) {\r\n            var elements = v.selection.elements;\r\n            if (elements.length) {\r\n                structureCount += 1;\r\n                for (var i = 0, il = elements.length; i < il; ++i) {\r\n                    elementCount += OrderedSet.size(elements[i].indices);\r\n                }\r\n                StructureElement.Stats.add(stats, stats, StructureElement.Stats.ofLoci(v.selection));\r\n            }\r\n        });\r\n        var label = structureElementStatsLabel(stats, { countsOnly: true });\r\n        return { structureCount: structureCount, elementCount: elementCount, label: label };\r\n    };\r\n    StructureSelectionManager.prototype.add = function (loci) {\r\n        if (!StructureElement.Loci.is(loci))\r\n            return false;\r\n        var entry = this.getEntry(loci.structure);\r\n        if (!entry)\r\n            return false;\r\n        var sel = entry.selection;\r\n        entry.selection = StructureElement.Loci.union(entry.selection, loci);\r\n        this.tryAddHistory(loci);\r\n        this.referenceLoci = loci;\r\n        this.events.loci.add.next(loci);\r\n        return !StructureElement.Loci.areEqual(sel, entry.selection);\r\n    };\r\n    StructureSelectionManager.prototype.remove = function (loci) {\r\n        if (!StructureElement.Loci.is(loci))\r\n            return false;\r\n        var entry = this.getEntry(loci.structure);\r\n        if (!entry)\r\n            return false;\r\n        var sel = entry.selection;\r\n        entry.selection = StructureElement.Loci.subtract(entry.selection, loci);\r\n        // this.addHistory(loci);\r\n        this.referenceLoci = loci;\r\n        this.events.loci.remove.next(loci);\r\n        return !StructureElement.Loci.areEqual(sel, entry.selection);\r\n    };\r\n    StructureSelectionManager.prototype.intersect = function (loci) {\r\n        if (!StructureElement.Loci.is(loci))\r\n            return false;\r\n        var entry = this.getEntry(loci.structure);\r\n        if (!entry)\r\n            return false;\r\n        var sel = entry.selection;\r\n        entry.selection = StructureElement.Loci.intersect(entry.selection, loci);\r\n        // this.addHistory(loci);\r\n        this.referenceLoci = loci;\r\n        return !StructureElement.Loci.areEqual(sel, entry.selection);\r\n    };\r\n    StructureSelectionManager.prototype.set = function (loci) {\r\n        if (!StructureElement.Loci.is(loci))\r\n            return false;\r\n        var entry = this.getEntry(loci.structure);\r\n        if (!entry)\r\n            return false;\r\n        var sel = entry.selection;\r\n        entry.selection = loci;\r\n        this.tryAddHistory(loci);\r\n        this.referenceLoci = undefined;\r\n        return !StructureElement.Loci.areEqual(sel, entry.selection);\r\n    };\r\n    StructureSelectionManager.prototype.modifyHistory = function (entry, action, modulus, groupByStructure) {\r\n        if (groupByStructure === void 0) { groupByStructure = false; }\r\n        var history = this.additionsHistory;\r\n        var idx = history.indexOf(entry);\r\n        if (idx < 0)\r\n            return;\r\n        var swapWith = void 0;\r\n        switch (action) {\r\n            case 'remove':\r\n                arrayRemoveAtInPlace(history, idx);\r\n                break;\r\n            case 'up':\r\n                swapWith = idx - 1;\r\n                break;\r\n            case 'down':\r\n                swapWith = idx + 1;\r\n                break;\r\n        }\r\n        if (swapWith !== void 0) {\r\n            var mod = modulus ? Math.min(history.length, modulus) : history.length;\r\n            while (true) {\r\n                swapWith = swapWith % mod;\r\n                if (swapWith < 0)\r\n                    swapWith += mod;\r\n                if (!groupByStructure || history[idx].loci.structure === history[swapWith].loci.structure) {\r\n                    var t = history[idx];\r\n                    history[idx] = history[swapWith];\r\n                    history[swapWith] = t;\r\n                    break;\r\n                }\r\n                else {\r\n                    swapWith += action === 'up' ? -1 : +1;\r\n                }\r\n            }\r\n        }\r\n        this.events.additionsHistoryUpdated.next(void 0);\r\n    };\r\n    StructureSelectionManager.prototype.tryAddHistory = function (loci) {\r\n        if (Loci.isEmpty(loci))\r\n            return;\r\n        var idx = 0, entry = void 0;\r\n        for (var _i = 0, _a = this.additionsHistory; _i < _a.length; _i++) {\r\n            var l = _a[_i];\r\n            if (Loci.areEqual(l.loci, loci)) {\r\n                entry = l;\r\n                break;\r\n            }\r\n            idx++;\r\n        }\r\n        if (entry) {\r\n            // move to top\r\n            arrayRemoveAtInPlace(this.additionsHistory, idx);\r\n            this.additionsHistory.unshift(entry);\r\n            this.events.additionsHistoryUpdated.next(void 0);\r\n            return;\r\n        }\r\n        var stats = StructureElement.Stats.ofLoci(loci);\r\n        var label = structureElementStatsLabel(stats, { reverse: true });\r\n        this.additionsHistory.unshift({ id: UUID.create22(), loci: loci, label: label });\r\n        if (this.additionsHistory.length > HISTORY_CAPACITY)\r\n            this.additionsHistory.pop();\r\n        this.events.additionsHistoryUpdated.next(void 0);\r\n    };\r\n    StructureSelectionManager.prototype.clearHistory = function () {\r\n        if (this.state.additionsHistory.length !== 0) {\r\n            this.state.additionsHistory = [];\r\n            this.events.additionsHistoryUpdated.next(void 0);\r\n        }\r\n    };\r\n    StructureSelectionManager.prototype.clearHistoryForStructure = function (structure) {\r\n        var historyEntryToRemove = [];\r\n        for (var _i = 0, _a = this.state.additionsHistory; _i < _a.length; _i++) {\r\n            var e = _a[_i];\r\n            if (e.loci.structure.root === structure.root) {\r\n                historyEntryToRemove.push(e);\r\n            }\r\n        }\r\n        for (var _b = 0, historyEntryToRemove_1 = historyEntryToRemove; _b < historyEntryToRemove_1.length; _b++) {\r\n            var e = historyEntryToRemove_1[_b];\r\n            this.modifyHistory(e, 'remove');\r\n        }\r\n        if (historyEntryToRemove.length !== 0) {\r\n            this.events.additionsHistoryUpdated.next(void 0);\r\n        }\r\n    };\r\n    StructureSelectionManager.prototype.onRemove = function (ref, obj) {\r\n        var _a;\r\n        if (this.entries.has(ref)) {\r\n            this.entries.delete(ref);\r\n            if (obj === null || obj === void 0 ? void 0 : obj.data) {\r\n                this.clearHistoryForStructure(obj.data);\r\n            }\r\n            if (((_a = this.referenceLoci) === null || _a === void 0 ? void 0 : _a.structure) === (obj === null || obj === void 0 ? void 0 : obj.data)) {\r\n                this.referenceLoci = undefined;\r\n            }\r\n            this.state.stats = void 0;\r\n            this.events.changed.next(void 0);\r\n        }\r\n    };\r\n    StructureSelectionManager.prototype.onUpdate = function (ref, oldObj, obj) {\r\n        var _a, _b, _c, _d;\r\n        // no change to structure\r\n        if (oldObj === obj || (oldObj === null || oldObj === void 0 ? void 0 : oldObj.data) === obj.data)\r\n            return;\r\n        // ignore decorators to get stable ref\r\n        var cell = this.plugin.helpers.substructureParent.get(obj.data, true);\r\n        if (!cell)\r\n            return;\r\n        ref = cell.transform.ref;\r\n        if (!this.entries.has(ref))\r\n            return;\r\n        // use structure from last decorator as reference\r\n        var structure = (_b = (_a = this.plugin.helpers.substructureParent.get(obj.data)) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\r\n        if (!structure)\r\n            return;\r\n        // oldObj is not defined for inserts (e.g. TransformStructureConformation)\r\n        if (!(oldObj === null || oldObj === void 0 ? void 0 : oldObj.data) || Structure.areUnitIdsAndIndicesEqual(oldObj.data, obj.data)) {\r\n            this.entries.set(ref, remapSelectionEntry(this.entries.get(ref), structure));\r\n            // remap referenceLoci & prevHighlight if needed and possible\r\n            if (((_c = this.referenceLoci) === null || _c === void 0 ? void 0 : _c.structure.root) === structure.root) {\r\n                this.referenceLoci = StructureElement.Loci.remap(this.referenceLoci, structure);\r\n            }\r\n            // remap history locis if needed and possible\r\n            var changedHistory = false;\r\n            for (var _i = 0, _f = this.state.additionsHistory; _i < _f.length; _i++) {\r\n                var e = _f[_i];\r\n                if (e.loci.structure.root === structure.root) {\r\n                    e.loci = StructureElement.Loci.remap(e.loci, structure);\r\n                    changedHistory = true;\r\n                }\r\n            }\r\n            if (changedHistory)\r\n                this.events.additionsHistoryUpdated.next(void 0);\r\n        }\r\n        else {\r\n            // clear the selection for ref\r\n            this.entries.set(ref, new SelectionEntry(StructureElement.Loci(structure, [])));\r\n            if (((_d = this.referenceLoci) === null || _d === void 0 ? void 0 : _d.structure.root) === structure.root) {\r\n                this.referenceLoci = undefined;\r\n            }\r\n            this.clearHistoryForStructure(structure);\r\n            this.state.stats = void 0;\r\n            this.events.changed.next(void 0);\r\n        }\r\n    };\r\n    /** Removes all selections and returns them */\r\n    StructureSelectionManager.prototype.clear = function () {\r\n        var keys = this.entries.keys();\r\n        var selections = [];\r\n        while (true) {\r\n            var k = keys.next();\r\n            if (k.done)\r\n                break;\r\n            var s = this.entries.get(k.value);\r\n            if (!StructureElement.Loci.isEmpty(s.selection))\r\n                selections.push(s.selection);\r\n            s.selection = StructureElement.Loci(s.selection.structure, []);\r\n        }\r\n        this.referenceLoci = undefined;\r\n        this.state.stats = void 0;\r\n        this.events.changed.next(void 0);\r\n        this.events.loci.clear.next(void 0);\r\n        this.clearHistory();\r\n        return selections;\r\n    };\r\n    StructureSelectionManager.prototype.getLoci = function (structure) {\r\n        var entry = this.getEntry(structure);\r\n        if (!entry)\r\n            return EmptyLoci;\r\n        return entry.selection;\r\n    };\r\n    StructureSelectionManager.prototype.getStructure = function (structure) {\r\n        var entry = this.getEntry(structure);\r\n        if (!entry)\r\n            return;\r\n        return entry.structure;\r\n    };\r\n    StructureSelectionManager.prototype.structureHasSelection = function (structure) {\r\n        var _a, _b;\r\n        var s = (_b = (_a = structure.cell) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\r\n        if (!s)\r\n            return false;\r\n        var entry = this.getEntry(s);\r\n        return !!entry && !StructureElement.Loci.isEmpty(entry.selection);\r\n    };\r\n    StructureSelectionManager.prototype.has = function (loci) {\r\n        if (StructureElement.Loci.is(loci)) {\r\n            var entry = this.getEntry(loci.structure);\r\n            if (entry) {\r\n                return StructureElement.Loci.isSubset(entry.selection, loci);\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    StructureSelectionManager.prototype.tryGetRange = function (loci) {\r\n        if (!StructureElement.Loci.is(loci))\r\n            return;\r\n        if (loci.elements.length !== 1)\r\n            return;\r\n        var entry = this.getEntry(loci.structure);\r\n        if (!entry)\r\n            return;\r\n        var xs = loci.elements[0];\r\n        if (!xs)\r\n            return;\r\n        var ref = this.referenceLoci;\r\n        if (!ref || !StructureElement.Loci.is(ref) || ref.structure !== loci.structure)\r\n            return;\r\n        var e;\r\n        for (var _i = 0, _a = ref.elements; _i < _a.length; _i++) {\r\n            var _e = _a[_i];\r\n            if (xs.unit === _e.unit) {\r\n                e = _e;\r\n                break;\r\n            }\r\n        }\r\n        if (!e)\r\n            return;\r\n        if (xs.unit !== e.unit)\r\n            return;\r\n        return getElementRange(loci.structure, e, xs);\r\n    };\r\n    /** Count of all selected elements */\r\n    StructureSelectionManager.prototype.elementCount = function () {\r\n        var count = 0;\r\n        this.entries.forEach(function (v) {\r\n            count += StructureElement.Loci.size(v.selection);\r\n        });\r\n        return count;\r\n    };\r\n    StructureSelectionManager.prototype.getBoundary = function () {\r\n        var min = Vec3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        var max = Vec3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        boundaryHelper.reset();\r\n        var boundaries = [];\r\n        this.entries.forEach(function (v) {\r\n            var loci = v.selection;\r\n            if (!StructureElement.Loci.isEmpty(loci)) {\r\n                boundaries.push(StructureElement.Loci.getBoundary(loci));\r\n            }\r\n        });\r\n        for (var i = 0, il = boundaries.length; i < il; ++i) {\r\n            var _a = boundaries[i], box = _a.box, sphere = _a.sphere;\r\n            Vec3.min(min, min, box.min);\r\n            Vec3.max(max, max, box.max);\r\n            boundaryHelper.includePositionRadius(sphere.center, sphere.radius);\r\n        }\r\n        boundaryHelper.finishedIncludeStep();\r\n        for (var i = 0, il = boundaries.length; i < il; ++i) {\r\n            var sphere = boundaries[i].sphere;\r\n            boundaryHelper.radiusPositionRadius(sphere.center, sphere.radius);\r\n        }\r\n        return { box: { min: min, max: max }, sphere: boundaryHelper.getSphere() };\r\n    };\r\n    StructureSelectionManager.prototype.getPrincipalAxes = function () {\r\n        var elementCount = this.elementCount();\r\n        var positions = new Float32Array(3 * elementCount);\r\n        var offset = 0;\r\n        this.entries.forEach(function (v) {\r\n            StructureElement.Loci.toPositionsArray(v.selection, positions, offset);\r\n            offset += StructureElement.Loci.size(v.selection) * 3;\r\n        });\r\n        return PrincipalAxes.ofPositions(positions);\r\n    };\r\n    StructureSelectionManager.prototype.modify = function (modifier, loci) {\r\n        var changed = false;\r\n        switch (modifier) {\r\n            case 'add':\r\n                changed = this.add(loci);\r\n                break;\r\n            case 'remove':\r\n                changed = this.remove(loci);\r\n                break;\r\n            case 'intersect':\r\n                changed = this.intersect(loci);\r\n                break;\r\n            case 'set':\r\n                changed = this.set(loci);\r\n                break;\r\n        }\r\n        if (changed) {\r\n            this.state.stats = void 0;\r\n            this.events.changed.next(void 0);\r\n        }\r\n    };\r\n    Object.defineProperty(StructureSelectionManager.prototype, \"applicableStructures\", {\r\n        get: function () {\r\n            return this.plugin.managers.structure.hierarchy.selection.structures\r\n                .filter(function (s) { return !!s.cell.obj; })\r\n                .map(function (s) { return s.cell.obj.data; });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StructureSelectionManager.prototype.triggerInteraction = function (modifier, loci, applyGranularity) {\r\n        if (applyGranularity === void 0) { applyGranularity = true; }\r\n        switch (modifier) {\r\n            case 'add':\r\n                this.plugin.managers.interactivity.lociSelects.select({ loci: loci }, applyGranularity);\r\n                break;\r\n            case 'remove':\r\n                this.plugin.managers.interactivity.lociSelects.deselect({ loci: loci }, applyGranularity);\r\n                break;\r\n            case 'intersect':\r\n                this.plugin.managers.interactivity.lociSelects.selectJoin({ loci: loci }, applyGranularity);\r\n                break;\r\n            case 'set':\r\n                this.plugin.managers.interactivity.lociSelects.selectOnly({ loci: loci }, applyGranularity);\r\n                break;\r\n        }\r\n    };\r\n    StructureSelectionManager.prototype.fromLoci = function (modifier, loci, applyGranularity) {\r\n        if (applyGranularity === void 0) { applyGranularity = true; }\r\n        this.triggerInteraction(modifier, loci, applyGranularity);\r\n    };\r\n    StructureSelectionManager.prototype.fromCompiledQuery = function (modifier, query, applyGranularity) {\r\n        if (applyGranularity === void 0) { applyGranularity = true; }\r\n        for (var _i = 0, _a = this.applicableStructures; _i < _a.length; _i++) {\r\n            var s = _a[_i];\r\n            var loci = query(new QueryContext(s));\r\n            this.triggerInteraction(modifier, StructureSelection.toLociWithSourceUnits(loci), applyGranularity);\r\n        }\r\n    };\r\n    StructureSelectionManager.prototype.fromSelectionQuery = function (modifier, query, applyGranularity) {\r\n        var _this = this;\r\n        if (applyGranularity === void 0) { applyGranularity = true; }\r\n        this.plugin.runTask(Task.create('Structure Selection', function (runtime) { return __awaiter(_this, void 0, void 0, function () {\r\n            var _i, _a, s, loci;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _i = 0, _a = this.applicableStructures;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\r\n                        s = _a[_i];\r\n                        return [4 /*yield*/, query.getSelection(this.plugin, runtime, s)];\r\n                    case 2:\r\n                        loci = _b.sent();\r\n                        this.triggerInteraction(modifier, StructureSelection.toLociWithSourceUnits(loci), applyGranularity);\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); }));\r\n    };\r\n    StructureSelectionManager.prototype.fromSelections = function (ref) {\r\n        var _a;\r\n        var cell = StateObjectRef.resolveAndCheck(this.plugin.state.data, ref);\r\n        if (!cell || !cell.obj)\r\n            return;\r\n        if (!PSO.Molecule.Structure.Selections.is(cell.obj)) {\r\n            console.warn('fromSelections applied to wrong object type.', cell.obj);\r\n            return;\r\n        }\r\n        this.clear();\r\n        for (var _i = 0, _b = (_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data; _i < _b.length; _i++) {\r\n            var s = _b[_i];\r\n            this.fromLoci('set', s.loci);\r\n        }\r\n    };\r\n    return StructureSelectionManager;\r\n}(StatefulPluginComponent));\r\nexport { StructureSelectionManager };\r\nfunction SelectionStats() { return { structureCount: 0, elementCount: 0, label: 'Nothing Selected' }; }\r\n;\r\nvar SelectionEntry = /** @class */ (function () {\r\n    function SelectionEntry(selection) {\r\n        this._structure = void 0;\r\n        this._selection = selection;\r\n    }\r\n    Object.defineProperty(SelectionEntry.prototype, \"selection\", {\r\n        get: function () { return this._selection; },\r\n        set: function (value) {\r\n            this._selection = value;\r\n            this._structure = void 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SelectionEntry.prototype, \"structure\", {\r\n        get: function () {\r\n            if (this._structure)\r\n                return this._structure;\r\n            if (Loci.isEmpty(this._selection)) {\r\n                this._structure = void 0;\r\n            }\r\n            else {\r\n                this._structure = StructureElement.Loci.toStructure(this._selection);\r\n            }\r\n            return this._structure;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return SelectionEntry;\r\n}());\r\n/** remap `selection-entry` to be related to `structure` if possible */\r\nfunction remapSelectionEntry(e, s) {\r\n    return new SelectionEntry(StructureElement.Loci.remap(e.selection, s));\r\n}\r\n/**\r\n * Assumes `ref` and `ext` belong to the same unit in the same structure\r\n */\r\nfunction getElementRange(structure, ref, ext) {\r\n    var min = Math.min(OrderedSet.min(ref.indices), OrderedSet.min(ext.indices));\r\n    var max = Math.max(OrderedSet.max(ref.indices), OrderedSet.max(ext.indices));\r\n    return StructureElement.Loci(structure, [{\r\n            unit: ref.unit,\r\n            indices: OrderedSet.ofRange(min, max)\r\n        }]);\r\n}\r\n//# sourceMappingURL=selection.js.map"]},"metadata":{},"sourceType":"module"}