{"ast":null,"code":"/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column } from '../../../mol-data/db';\nimport { handleAtoms, handleBonds } from '../mol/parser';\nimport { Task } from '../../../mol-task';\nimport { ReaderResult as Result } from '../result';\nimport { Tokenizer, TokenBuilder } from '../common/text/tokenizer';\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\nvar delimiter = '$$$$';\n\nfunction handleDataItems(tokenizer) {\n  var dataHeader = TokenBuilder.create(tokenizer.data, 32);\n  var data = TokenBuilder.create(tokenizer.data, 32);\n\n  while (tokenizer.position < tokenizer.length) {\n    var line = Tokenizer.readLine(tokenizer);\n    if (line.startsWith(delimiter)) break;\n    if (!line) continue;\n\n    if (line.startsWith('> ')) {\n      TokenBuilder.add(dataHeader, tokenizer.tokenStart + 2, tokenizer.tokenEnd);\n      Tokenizer.markLine(tokenizer);\n      var start = tokenizer.tokenStart;\n      var end = tokenizer.tokenEnd;\n      var added = false;\n\n      while (tokenizer.position < tokenizer.length) {\n        var line2 = Tokenizer.readLine(tokenizer);\n\n        if (!line2 || line2.startsWith(delimiter) || line2.startsWith('> ')) {\n          TokenBuilder.add(data, start, end);\n          added = true;\n          break;\n        }\n\n        end = tokenizer.tokenEnd;\n      }\n\n      if (!added) {\n        TokenBuilder.add(data, start, end);\n      }\n    }\n  }\n\n  return {\n    dataHeader: TokenColumn(dataHeader)(Column.Schema.str),\n    data: TokenColumn(data)(Column.Schema.str)\n  };\n}\n\nfunction handleMolFile(tokenizer) {\n  var title = Tokenizer.readLine(tokenizer).trim();\n  var program = Tokenizer.readLine(tokenizer).trim();\n  var comment = Tokenizer.readLine(tokenizer).trim();\n  var counts = Tokenizer.readLine(tokenizer);\n  var atomCount = +counts.substr(0, 3),\n      bondCount = +counts.substr(3, 3);\n\n  if (Number.isNaN(atomCount) || Number.isNaN(bondCount)) {\n    // try to skip to next molecule\n    while (tokenizer.position < tokenizer.length) {\n      var line = Tokenizer.readLine(tokenizer);\n      if (line.startsWith(delimiter)) break;\n    }\n\n    return;\n  }\n\n  var atoms = handleAtoms(tokenizer, atomCount);\n  var bonds = handleBonds(tokenizer, bondCount);\n  var dataItems = handleDataItems(tokenizer);\n  return {\n    molFile: {\n      title: title,\n      program: program,\n      comment: comment,\n      atoms: atoms,\n      bonds: bonds\n    },\n    dataItems: dataItems\n  };\n}\n\nfunction parseInternal(data) {\n  var tokenizer = Tokenizer(data);\n  var compounds = [];\n\n  while (tokenizer.position < tokenizer.length) {\n    var c = handleMolFile(tokenizer);\n    if (c) compounds.push(c);\n  }\n\n  return Result.success({\n    compounds: compounds\n  });\n}\n\nexport function parseSdf(data) {\n  var _this = this;\n\n  return Task.create('Parse Sdf', function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , parseInternal(data)];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/sdf/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column } from '../../../mol-data/db';\r\nimport { handleAtoms, handleBonds } from '../mol/parser';\r\nimport { Task } from '../../../mol-task';\r\nimport { ReaderResult as Result } from '../result';\r\nimport { Tokenizer, TokenBuilder } from '../common/text/tokenizer';\r\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\r\nvar delimiter = '$$$$';\r\nfunction handleDataItems(tokenizer) {\r\n    var dataHeader = TokenBuilder.create(tokenizer.data, 32);\r\n    var data = TokenBuilder.create(tokenizer.data, 32);\r\n    while (tokenizer.position < tokenizer.length) {\r\n        var line = Tokenizer.readLine(tokenizer);\r\n        if (line.startsWith(delimiter))\r\n            break;\r\n        if (!line)\r\n            continue;\r\n        if (line.startsWith('> ')) {\r\n            TokenBuilder.add(dataHeader, tokenizer.tokenStart + 2, tokenizer.tokenEnd);\r\n            Tokenizer.markLine(tokenizer);\r\n            var start = tokenizer.tokenStart;\r\n            var end = tokenizer.tokenEnd;\r\n            var added = false;\r\n            while (tokenizer.position < tokenizer.length) {\r\n                var line2 = Tokenizer.readLine(tokenizer);\r\n                if (!line2 || line2.startsWith(delimiter) || line2.startsWith('> ')) {\r\n                    TokenBuilder.add(data, start, end);\r\n                    added = true;\r\n                    break;\r\n                }\r\n                end = tokenizer.tokenEnd;\r\n            }\r\n            if (!added) {\r\n                TokenBuilder.add(data, start, end);\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        dataHeader: TokenColumn(dataHeader)(Column.Schema.str),\r\n        data: TokenColumn(data)(Column.Schema.str)\r\n    };\r\n}\r\nfunction handleMolFile(tokenizer) {\r\n    var title = Tokenizer.readLine(tokenizer).trim();\r\n    var program = Tokenizer.readLine(tokenizer).trim();\r\n    var comment = Tokenizer.readLine(tokenizer).trim();\r\n    var counts = Tokenizer.readLine(tokenizer);\r\n    var atomCount = +counts.substr(0, 3), bondCount = +counts.substr(3, 3);\r\n    if (Number.isNaN(atomCount) || Number.isNaN(bondCount)) {\r\n        // try to skip to next molecule\r\n        while (tokenizer.position < tokenizer.length) {\r\n            var line = Tokenizer.readLine(tokenizer);\r\n            if (line.startsWith(delimiter))\r\n                break;\r\n        }\r\n        return;\r\n    }\r\n    var atoms = handleAtoms(tokenizer, atomCount);\r\n    var bonds = handleBonds(tokenizer, bondCount);\r\n    var dataItems = handleDataItems(tokenizer);\r\n    return {\r\n        molFile: { title: title, program: program, comment: comment, atoms: atoms, bonds: bonds },\r\n        dataItems: dataItems\r\n    };\r\n}\r\nfunction parseInternal(data) {\r\n    var tokenizer = Tokenizer(data);\r\n    var compounds = [];\r\n    while (tokenizer.position < tokenizer.length) {\r\n        var c = handleMolFile(tokenizer);\r\n        if (c)\r\n            compounds.push(c);\r\n    }\r\n    return Result.success({ compounds: compounds });\r\n}\r\nexport function parseSdf(data) {\r\n    var _this = this;\r\n    return Task.create('Parse Sdf', function () { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, parseInternal(data)];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}