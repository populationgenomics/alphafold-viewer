{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { IntraUnitBondCylinderVisual, IntraUnitBondCylinderParams } from '../visual/bond-intra-unit-cylinder';\nimport { InterUnitBondCylinderParams, InterUnitBondCylinderVisual } from '../visual/bond-inter-unit-cylinder';\nimport { ElementSphereVisual, ElementSphereParams } from '../visual/element-sphere';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsRepresentation } from '../units-representation';\nimport { ComplexRepresentation } from '../complex-representation';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { getUnitKindsParam } from '../params';\nvar BallAndStickVisuals = {\n  'element-sphere': function (ctx, getParams) {\n    return UnitsRepresentation('Element sphere', ctx, getParams, ElementSphereVisual);\n  },\n  'intra-bond': function (ctx, getParams) {\n    return UnitsRepresentation('Intra-unit bond cylinder', ctx, getParams, IntraUnitBondCylinderVisual);\n  },\n  'inter-bond': function (ctx, getParams) {\n    return ComplexRepresentation('Inter-unit bond cylinder', ctx, getParams, InterUnitBondCylinderVisual);\n  }\n};\nexport var BallAndStickParams = __assign(__assign(__assign(__assign(__assign({}, ElementSphereParams), {\n  traceOnly: PD.Boolean(false, {\n    isHidden: true\n  })\n}), IntraUnitBondCylinderParams), InterUnitBondCylinderParams), {\n  includeParent: PD.Boolean(false),\n  unitKinds: getUnitKindsParam(['atomic']),\n  sizeFactor: PD.Numeric(0.15, {\n    min: 0.01,\n    max: 10,\n    step: 0.01\n  }),\n  sizeAspectRatio: PD.Numeric(2 / 3, {\n    min: 0.01,\n    max: 3,\n    step: 0.01\n  }),\n  visuals: PD.MultiSelect(['element-sphere', 'intra-bond', 'inter-bond'], PD.objectToOptions(BallAndStickVisuals))\n});\nexport function getBallAndStickParams(ctx, structure) {\n  return PD.clone(BallAndStickParams);\n}\nexport function BallAndStickRepresentation(ctx, getParams) {\n  return Representation.createMulti('Ball & Stick', ctx, getParams, StructureRepresentationStateBuilder, BallAndStickVisuals);\n}\nexport var BallAndStickRepresentationProvider = StructureRepresentationProvider({\n  name: 'ball-and-stick',\n  label: 'Ball & Stick',\n  description: 'Displays atoms as spheres and bonds as cylinders.',\n  factory: BallAndStickRepresentation,\n  getParams: getBallAndStickParams,\n  defaultValues: PD.getDefaultValues(BallAndStickParams),\n  defaultColorTheme: {\n    name: 'element-symbol'\n  },\n  defaultSizeTheme: {\n    name: 'physical'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  },\n  getData: function (structure, props) {\n    return props.includeParent ? structure.asParent() : structure;\n  },\n  mustRecreate: function (oldProps, newProps) {\n    return oldProps.includeParent !== newProps.includeParent;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/ball-and-stick.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { IntraUnitBondCylinderVisual, IntraUnitBondCylinderParams } from '../visual/bond-intra-unit-cylinder';\r\nimport { InterUnitBondCylinderParams, InterUnitBondCylinderVisual } from '../visual/bond-inter-unit-cylinder';\r\nimport { ElementSphereVisual, ElementSphereParams } from '../visual/element-sphere';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ComplexRepresentation } from '../complex-representation';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { getUnitKindsParam } from '../params';\r\nvar BallAndStickVisuals = {\r\n    'element-sphere': function (ctx, getParams) { return UnitsRepresentation('Element sphere', ctx, getParams, ElementSphereVisual); },\r\n    'intra-bond': function (ctx, getParams) { return UnitsRepresentation('Intra-unit bond cylinder', ctx, getParams, IntraUnitBondCylinderVisual); },\r\n    'inter-bond': function (ctx, getParams) { return ComplexRepresentation('Inter-unit bond cylinder', ctx, getParams, InterUnitBondCylinderVisual); },\r\n};\r\nexport var BallAndStickParams = __assign(__assign(__assign(__assign(__assign({}, ElementSphereParams), { traceOnly: PD.Boolean(false, { isHidden: true }) }), IntraUnitBondCylinderParams), InterUnitBondCylinderParams), { includeParent: PD.Boolean(false), unitKinds: getUnitKindsParam(['atomic']), sizeFactor: PD.Numeric(0.15, { min: 0.01, max: 10, step: 0.01 }), sizeAspectRatio: PD.Numeric(2 / 3, { min: 0.01, max: 3, step: 0.01 }), visuals: PD.MultiSelect(['element-sphere', 'intra-bond', 'inter-bond'], PD.objectToOptions(BallAndStickVisuals)) });\r\nexport function getBallAndStickParams(ctx, structure) {\r\n    return PD.clone(BallAndStickParams);\r\n}\r\nexport function BallAndStickRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Ball & Stick', ctx, getParams, StructureRepresentationStateBuilder, BallAndStickVisuals);\r\n}\r\nexport var BallAndStickRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'ball-and-stick',\r\n    label: 'Ball & Stick',\r\n    description: 'Displays atoms as spheres and bonds as cylinders.',\r\n    factory: BallAndStickRepresentation,\r\n    getParams: getBallAndStickParams,\r\n    defaultValues: PD.getDefaultValues(BallAndStickParams),\r\n    defaultColorTheme: { name: 'element-symbol' },\r\n    defaultSizeTheme: { name: 'physical' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; },\r\n    getData: function (structure, props) {\r\n        return props.includeParent ? structure.asParent() : structure;\r\n    },\r\n    mustRecreate: function (oldProps, newProps) {\r\n        return oldProps.includeParent !== newProps.includeParent;\r\n    }\r\n});\r\n//# sourceMappingURL=ball-and-stick.js.map"]},"metadata":{},"sourceType":"module"}