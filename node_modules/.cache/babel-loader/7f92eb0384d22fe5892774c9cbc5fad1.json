{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { PolymerGapIterator, PolymerGapLocationIterator, getPolymerGapElementLoci, eachPolymerGapElement } from './util/polymer';\nimport { addFixedCountDashedCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry'; // import { TriangularPyramid } from '../../../mol-geo/primitive/pyramid';\n\nvar segmentCount = 10;\nexport var PolymerGapCylinderParams = {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  radialSegments: PD.Numeric(16, {\n    min: 2,\n    max: 56,\n    step: 2\n  }, BaseGeometry.CustomQualityParamInfo)\n};\nexport var DefaultPolymerGapCylinderProps = PD.getDefaultValues(PolymerGapCylinderParams); // const triangularPyramid = TriangularPyramid()\n// const t = Mat4.identity()\n// const pd = Vec3.zero()\n\nfunction createPolymerGapCylinderMesh(ctx, unit, structure, theme, props, mesh) {\n  var polymerGapCount = unit.gapElements.length;\n  if (!polymerGapCount) return Mesh.createEmpty(mesh);\n  var sizeFactor = props.sizeFactor,\n      radialSegments = props.radialSegments;\n  var vertexCountEstimate = segmentCount * radialSegments * 2 * polymerGapCount * 2;\n  var builderState = MeshBuilder.createState(vertexCountEstimate, vertexCountEstimate / 10, mesh);\n  var pos = unit.conformation.invariantPosition;\n  var pA = Vec3.zero();\n  var pB = Vec3.zero();\n  var cylinderProps = {\n    radiusTop: 1,\n    radiusBottom: 1,\n    topCap: true,\n    bottomCap: true,\n    radialSegments: radialSegments\n  };\n  var i = 0;\n  var polymerGapIt = PolymerGapIterator(structure, unit);\n\n  while (polymerGapIt.hasNext) {\n    var _a = polymerGapIt.move(),\n        centerA = _a.centerA,\n        centerB = _a.centerB;\n\n    if (centerA.element === centerB.element) {// TODO\n      // builderState.currentGroup = i\n      // pos(centerA.element, pA)\n      // Vec3.add(pd, pA, Vec3.create(1, 0, 0))\n      // Mat4.targetTo(t, pA, pd, Vec3.create(0, 1, 0))\n      // Mat4.setTranslation(t, pA)\n      // Mat4.scale(t, t, Vec3.create(0.7, 0.7, 2.5))\n      // MeshBuilder.addPrimitive(builderState, t, triangularPyramid)\n    } else {\n      pos(centerA.element, pA);\n      pos(centerB.element, pB);\n      cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerA) * sizeFactor;\n      builderState.currentGroup = i;\n      addFixedCountDashedCylinder(builderState, pA, pB, 0.5, segmentCount, cylinderProps);\n      cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerB) * sizeFactor;\n      builderState.currentGroup = i + 1;\n      addFixedCountDashedCylinder(builderState, pB, pA, 0.5, segmentCount, cylinderProps);\n    }\n\n    i += 2;\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var PolymerGapParams = __assign(__assign({}, UnitsMeshParams), PolymerGapCylinderParams);\nexport function PolymerGapVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(PolymerGapParams),\n    createGeometry: createPolymerGapCylinderMesh,\n    createLocationIterator: PolymerGapLocationIterator.fromGroup,\n    getLoci: getPolymerGapElementLoci,\n    eachLocation: eachPolymerGapElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.radialSegments !== currentProps.radialSegments;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/polymer-gap-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { PolymerGapIterator, PolymerGapLocationIterator, getPolymerGapElementLoci, eachPolymerGapElement } from './util/polymer';\r\nimport { addFixedCountDashedCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\n// import { TriangularPyramid } from '../../../mol-geo/primitive/pyramid';\r\nvar segmentCount = 10;\r\nexport var PolymerGapCylinderParams = {\r\n    sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }),\r\n    radialSegments: PD.Numeric(16, { min: 2, max: 56, step: 2 }, BaseGeometry.CustomQualityParamInfo),\r\n};\r\nexport var DefaultPolymerGapCylinderProps = PD.getDefaultValues(PolymerGapCylinderParams);\r\n// const triangularPyramid = TriangularPyramid()\r\n// const t = Mat4.identity()\r\n// const pd = Vec3.zero()\r\nfunction createPolymerGapCylinderMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var polymerGapCount = unit.gapElements.length;\r\n    if (!polymerGapCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var sizeFactor = props.sizeFactor, radialSegments = props.radialSegments;\r\n    var vertexCountEstimate = segmentCount * radialSegments * 2 * polymerGapCount * 2;\r\n    var builderState = MeshBuilder.createState(vertexCountEstimate, vertexCountEstimate / 10, mesh);\r\n    var pos = unit.conformation.invariantPosition;\r\n    var pA = Vec3.zero();\r\n    var pB = Vec3.zero();\r\n    var cylinderProps = {\r\n        radiusTop: 1, radiusBottom: 1, topCap: true, bottomCap: true,\r\n        radialSegments: radialSegments\r\n    };\r\n    var i = 0;\r\n    var polymerGapIt = PolymerGapIterator(structure, unit);\r\n    while (polymerGapIt.hasNext) {\r\n        var _a = polymerGapIt.move(), centerA = _a.centerA, centerB = _a.centerB;\r\n        if (centerA.element === centerB.element) {\r\n            // TODO\r\n            // builderState.currentGroup = i\r\n            // pos(centerA.element, pA)\r\n            // Vec3.add(pd, pA, Vec3.create(1, 0, 0))\r\n            // Mat4.targetTo(t, pA, pd, Vec3.create(0, 1, 0))\r\n            // Mat4.setTranslation(t, pA)\r\n            // Mat4.scale(t, t, Vec3.create(0.7, 0.7, 2.5))\r\n            // MeshBuilder.addPrimitive(builderState, t, triangularPyramid)\r\n        }\r\n        else {\r\n            pos(centerA.element, pA);\r\n            pos(centerB.element, pB);\r\n            cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerA) * sizeFactor;\r\n            builderState.currentGroup = i;\r\n            addFixedCountDashedCylinder(builderState, pA, pB, 0.5, segmentCount, cylinderProps);\r\n            cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerB) * sizeFactor;\r\n            builderState.currentGroup = i + 1;\r\n            addFixedCountDashedCylinder(builderState, pB, pA, 0.5, segmentCount, cylinderProps);\r\n        }\r\n        i += 2;\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var PolymerGapParams = __assign(__assign({}, UnitsMeshParams), PolymerGapCylinderParams);\r\nexport function PolymerGapVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerGapParams),\r\n        createGeometry: createPolymerGapCylinderMesh,\r\n        createLocationIterator: PolymerGapLocationIterator.fromGroup,\r\n        getLoci: getPolymerGapElementLoci,\r\n        eachLocation: eachPolymerGapElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=polymer-gap-cylinder.js.map"]},"metadata":{},"sourceType":"module"}