{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { Segmentation, SortedArray } from '../../../../mol-data/int';\nimport { combinations } from '../../../../mol-data/util/combination';\nimport { IntAdjacencyGraph } from '../../../../mol-math/graph';\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\nimport { fillSerial, arraySetAdd } from '../../../../mol-util/array';\nimport { ElementSymbol, BondType } from '../../model/types';\nimport { getPositions } from '../../util';\nimport { Unit } from '../unit';\nimport { EmptyCarbohydrates } from './data';\nimport { UnitRings, UnitRing } from '../unit/rings';\nimport { cantorPairing } from '../../../../mol-data/util';\nvar C = ElementSymbol('C'),\n    O = ElementSymbol('O');\nvar SugarRingFps = [UnitRing.elementFingerprint([C, C, C, O]), UnitRing.elementFingerprint([C, C, C, C, O]), UnitRing.elementFingerprint([C, C, C, C, C, O]), UnitRing.elementFingerprint([C, C, C, C, C, C, O])];\n\nfunction getAnomericCarbon(unit, ringAtoms) {\n  var indexHasTwoOxygen = -1,\n      indexHasOxygenAndCarbon = -1,\n      indexHasC1Name = -1,\n      indexIsCarbon = -1;\n  var elements = unit.elements;\n  var _a = unit.model.atomicHierarchy.atoms,\n      type_symbol = _a.type_symbol,\n      label_atom_id = _a.label_atom_id;\n  var _b = unit.bonds,\n      neighbor = _b.b,\n      offset = _b.offset;\n\n  for (var i = 0, il = ringAtoms.length; i < il; ++i) {\n    var ei = elements[ringAtoms[i]];\n    if (type_symbol.value(ei) !== C) continue;\n    var linkedOxygenCount = 0;\n    var linkedCarbonCount = 0;\n\n    for (var j = offset[ringAtoms[i]], jl = offset[ringAtoms[i] + 1]; j < jl; ++j) {\n      var ej = elements[neighbor[j]];\n      var typeSymbol = type_symbol.value(ej);\n      if (typeSymbol === O) ++linkedOxygenCount;else if (typeSymbol === C) ++linkedCarbonCount;\n    }\n\n    if (linkedOxygenCount === 2) {\n      // found anomeric carbon\n      indexHasTwoOxygen = ei;\n      break;\n    } else if (linkedOxygenCount === 1 && linkedCarbonCount === 1) {\n      // possibly an anomeric carbon if this is a mono-saccharide without a glycosidic bond\n      indexHasOxygenAndCarbon = ei;\n    } else if (label_atom_id.value(ei).startsWith('C1')) {\n      // likely the anomeric carbon as it is named C1 by convention\n      indexHasC1Name = ei;\n    } else {\n      // use any carbon as a fallback\n      indexIsCarbon = ei;\n    }\n  }\n\n  return indexHasTwoOxygen !== -1 ? indexHasTwoOxygen : indexHasOxygenAndCarbon !== -1 ? indexHasOxygenAndCarbon : indexHasC1Name !== -1 ? indexHasC1Name : indexIsCarbon !== -1 ? indexIsCarbon : elements[ringAtoms[0]];\n}\n\nfunction getAltId(unit, index) {\n  var elements = unit.elements;\n  var label_alt_id = unit.model.atomicHierarchy.atoms.label_alt_id;\n  return label_alt_id.value(elements[index]);\n}\n\nfunction getDirection(direction, unit, index, center) {\n  var position = unit.conformation.position;\n  Vec3.normalize(direction, Vec3.sub(direction, center, position(index, direction)));\n  return direction;\n}\n\nfunction getAtomId(unit, index) {\n  var elements = unit.elements;\n  var label_atom_id = unit.model.atomicHierarchy.atoms.label_atom_id;\n  return label_atom_id.value(elements[index]);\n}\n\nfunction filterFusedRings(unitRings, rings) {\n  if (!rings || !rings.length) return;\n  var unit = unitRings.unit,\n      all = unitRings.all;\n  var fusedRings = new Set();\n  var ringCombinations = combinations(fillSerial(new Array(rings.length)), 2);\n\n  for (var i = 0, il = ringCombinations.length; i < il; ++i) {\n    var rc = ringCombinations[i];\n    var r0 = all[rings[rc[0]]],\n        r1 = all[rings[rc[1]]];\n\n    if (SortedArray.areIntersecting(r0, r1) && UnitRing.getAltId(unit, r0) === UnitRing.getAltId(unit, r1)) {\n      fusedRings.add(rings[rc[0]]);\n      fusedRings.add(rings[rc[1]]);\n    }\n  }\n\n  if (fusedRings.size) {\n    var filteredRings = [];\n\n    for (var i = 0, il = rings.length; i < il; ++i) {\n      if (!fusedRings.has(rings[i])) filteredRings.push(rings[i]);\n    }\n\n    return filteredRings;\n  } else {\n    return rings;\n  }\n}\n\nfunction getSaccharideComp(compId, model) {\n  return model.properties.saccharideComponentMap.get(compId);\n}\n\nexport function computeCarbohydrates(structure) {\n  // skip computation if there are no saccharide components in any model\n  if (structure.models.reduce(function (a, v) {\n    return a + v.properties.saccharideComponentMap.size;\n  }, 0) === 0) return EmptyCarbohydrates;\n  var links = [];\n  var terminalLinks = [];\n  var elements = [];\n  var partialElements = [];\n  var elementsWithRingMap = new Map();\n\n  function ringElementKey(residueIndex, unitId, altId) {\n    return residueIndex + \"|\" + unitId + \"|\" + altId;\n  }\n\n  function addRingElement(key, elementIndex) {\n    if (elementsWithRingMap.has(key)) elementsWithRingMap.get(key).push(elementIndex);else elementsWithRingMap.set(key, [elementIndex]);\n  }\n\n  function fixLinkDirection(iA, iB) {\n    Vec3.sub(elements[iA].geometry.direction, elements[iB].geometry.center, elements[iA].geometry.center);\n    Vec3.normalize(elements[iA].geometry.direction, elements[iA].geometry.direction);\n  }\n\n  var tmpV = Vec3.zero();\n\n  function fixTerminalLinkDirection(iA, indexB, unitB) {\n    var pos = unitB.conformation.position,\n        geo = elements[iA].geometry;\n    Vec3.sub(geo.direction, pos(unitB.elements[indexB], tmpV), geo.center);\n    Vec3.normalize(geo.direction, geo.direction);\n  } // get carbohydrate elements and carbohydrate links induced by intra-residue bonds\n\n\n  for (var i = 0, il = structure.units.length; i < il; ++i) {\n    var unit = structure.units[i];\n    if (!Unit.isAtomic(unit)) continue;\n    var model = unit.model,\n        rings = unit.rings;\n    var _a = model.atomicHierarchy,\n        chainAtomSegments = _a.chainAtomSegments,\n        residueAtomSegments = _a.residueAtomSegments,\n        atoms = _a.atoms;\n    var label_comp_id = atoms.label_comp_id;\n    var chainIt = Segmentation.transientSegments(chainAtomSegments, unit.elements);\n    var residueIt = Segmentation.transientSegments(residueAtomSegments, unit.elements);\n    var sugarResidueMap = void 0;\n\n    while (chainIt.hasNext) {\n      residueIt.setSegment(chainIt.move());\n\n      while (residueIt.hasNext) {\n        var residueIndex = residueIt.move().index;\n        var saccharideComp = getSaccharideComp(label_comp_id.value(residueAtomSegments.offsets[residueIndex]), model);\n        if (!saccharideComp) continue;\n\n        if (!sugarResidueMap) {\n          sugarResidueMap = UnitRings.byFingerprintAndResidue(rings, SugarRingFps);\n        }\n\n        var sugarRings = filterFusedRings(rings, sugarResidueMap.get(residueIndex));\n\n        if (!sugarRings || !sugarRings.length) {\n          partialElements.push({\n            unit: unit,\n            residueIndex: residueIndex,\n            component: saccharideComp\n          });\n          continue;\n        }\n\n        var ringElements = [];\n\n        for (var j = 0, jl = sugarRings.length; j < jl; ++j) {\n          var ringAtoms = rings.all[sugarRings[j]];\n          var anomericCarbon = getAnomericCarbon(unit, ringAtoms);\n          var ma = PrincipalAxes.calculateMomentsAxes(getPositions(unit, ringAtoms));\n          var center = Vec3.copy(Vec3.zero(), ma.origin);\n          var normal = Vec3.copy(Vec3.zero(), ma.dirC);\n          var direction = getDirection(Vec3.zero(), unit, anomericCarbon, center);\n          Vec3.orthogonalize(direction, normal, direction);\n          var ringAltId = UnitRing.getAltId(unit, ringAtoms);\n          var elementIndex = elements.length;\n          ringElements.push(elementIndex);\n          addRingElement(ringElementKey(residueIndex, unit.id, ringAltId), elementIndex);\n          if (ringAltId) addRingElement(ringElementKey(residueIndex, unit.id, ''), elementIndex);\n          elements.push({\n            geometry: {\n              center: center,\n              normal: normal,\n              direction: direction\n            },\n            component: saccharideComp,\n            ringIndex: sugarRings[j],\n            altId: ringAltId,\n            unit: unit,\n            residueIndex: residueIndex\n          });\n        } // add carbohydrate links induced by intra-residue bonds\n        // (e.g. for structures from the PDB archive __before__ carbohydrate remediation)\n\n\n        var ringCombinations = combinations(fillSerial(new Array(sugarRings.length)), 2);\n\n        for (var j = 0, jl = ringCombinations.length; j < jl; ++j) {\n          var rc = ringCombinations[j];\n          var r0 = rings.all[sugarRings[rc[0]]],\n              r1 = rings.all[sugarRings[rc[1]]]; // 1,6 glycosidic links are distance 3 and 1,4 glycosidic links are distance 2\n\n          if (IntAdjacencyGraph.areVertexSetsConnected(unit.bonds, r0, r1, 3)) {\n            var re0 = ringElements[rc[0]];\n            var re1 = ringElements[rc[1]];\n\n            if (elements[re0].altId === elements[re1].altId) {\n              // TODO handle better, for now fix both directions as it is unclear where the C1 atom is\n              //      would need to know the path connecting the two rings\n              fixLinkDirection(re0, re1);\n              fixLinkDirection(re1, re0);\n              links.push({\n                carbohydrateIndexA: re0,\n                carbohydrateIndexB: re1\n              });\n              links.push({\n                carbohydrateIndexA: re1,\n                carbohydrateIndexB: re0\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function getRingElementIndices(unit, index) {\n    return elementsWithRingMap.get(ringElementKey(unit.getResidueIndex(index), unit.id, getAltId(unit, index))) || [];\n  } // add carbohydrate links induced by intra-unit bonds\n  // (e.g. for structures from the PDB archive __after__ carbohydrate remediation)\n\n\n  for (var i = 0, il = elements.length; i < il; ++i) {\n    var cA = elements[i];\n    var unit = cA.unit;\n\n    for (var j = i + 1; j < il; ++j) {\n      var cB = elements[j];\n      if (unit !== cB.unit || cA.residueIndex === cB.residueIndex) continue;\n      var rA = unit.rings.all[cA.ringIndex];\n      var rB = unit.rings.all[cB.ringIndex];\n\n      if (IntAdjacencyGraph.areVertexSetsConnected(unit.bonds, rA, rB, 3)) {\n        // TODO handle better, for now fix both directions as it is unclear where the C1 atom is\n        //      would need to know the path connecting the two rings\n        fixLinkDirection(i, j);\n        fixLinkDirection(j, i);\n        links.push({\n          carbohydrateIndexA: i,\n          carbohydrateIndexB: j\n        });\n        links.push({\n          carbohydrateIndexA: j,\n          carbohydrateIndexB: i\n        });\n      }\n    }\n  } // get carbohydrate links induced by inter-unit bonds, that is\n  // inter monosaccharide links for structures from the\n  // PDB archive __before__ carbohydrate remediation\n  // plus terminal links for __before__ and __after__\n\n\n  for (var i = 0, il = structure.units.length; i < il; ++i) {\n    var unit = structure.units[i];\n    if (!Unit.isAtomic(unit)) continue;\n    structure.interUnitBonds.getConnectedUnits(unit.id).forEach(function (pairBonds) {\n      pairBonds.connectedIndices.forEach(function (indexA) {\n        pairBonds.getEdges(indexA).forEach(function (_a) {\n          var props = _a.props,\n              indexB = _a.indexB;\n          if (!BondType.isCovalent(props.flag)) return;\n          var unitA = structure.unitMap.get(pairBonds.unitA);\n          var unitB = structure.unitMap.get(pairBonds.unitB);\n          var ringElementIndicesA = getRingElementIndices(unitA, indexA);\n          var ringElementIndicesB = getRingElementIndices(unitB, indexB);\n\n          if (ringElementIndicesA.length > 0 && ringElementIndicesB.length > 0) {\n            var lA = ringElementIndicesA.length;\n            var lB = ringElementIndicesB.length;\n\n            for (var j = 0, jl = Math.max(lA, lB); j < jl; ++j) {\n              var ringElementIndexA = ringElementIndicesA[Math.min(j, lA - 1)];\n              var ringElementIndexB = ringElementIndicesB[Math.min(j, lB - 1)];\n              var atomIdA = getAtomId(unitA, indexA);\n\n              if (atomIdA.startsWith('O1') || atomIdA.startsWith('C1')) {\n                fixLinkDirection(ringElementIndexA, ringElementIndexB);\n              }\n\n              links.push({\n                carbohydrateIndexA: ringElementIndexA,\n                carbohydrateIndexB: ringElementIndexB\n              });\n            }\n          } else if (ringElementIndicesB.length === 0) {\n            for (var _i = 0, ringElementIndicesA_1 = ringElementIndicesA; _i < ringElementIndicesA_1.length; _i++) {\n              var ringElementIndexA = ringElementIndicesA_1[_i];\n              var atomIdA = getAtomId(unitA, indexA);\n\n              if (atomIdA.startsWith('O1') || atomIdA.startsWith('C1')) {\n                fixTerminalLinkDirection(ringElementIndexA, indexB, unitB);\n              }\n\n              terminalLinks.push({\n                carbohydrateIndex: ringElementIndexA,\n                elementIndex: indexB,\n                elementUnit: unitB,\n                fromCarbohydrate: true\n              });\n            }\n          } else if (ringElementIndicesA.length === 0) {\n            for (var _b = 0, ringElementIndicesB_1 = ringElementIndicesB; _b < ringElementIndicesB_1.length; _b++) {\n              var ringElementIndexB = ringElementIndicesB_1[_b];\n              terminalLinks.push({\n                carbohydrateIndex: ringElementIndexB,\n                elementIndex: indexA,\n                elementUnit: unitA,\n                fromCarbohydrate: false\n              });\n            }\n          }\n        });\n      });\n    });\n  }\n\n  return __assign({\n    links: links,\n    terminalLinks: terminalLinks,\n    elements: elements,\n    partialElements: partialElements\n  }, buildLookups(elements, links, terminalLinks));\n}\n\nfunction buildLookups(elements, links, terminalLinks) {\n  function key(unit, element) {\n    return cantorPairing(unit.id, element);\n  }\n\n  function getIndices(map, unit, index) {\n    var indices = [];\n    var il = map.get(key(unit, index));\n\n    if (il !== undefined) {\n      for (var _i = 0, il_1 = il; _i < il_1.length; _i++) {\n        var i = il_1[_i];\n        arraySetAdd(indices, i);\n      }\n    }\n\n    return indices;\n  } // elements\n\n\n  var elementsMap = new Map();\n\n  for (var i = 0, il = elements.length; i < il; ++i) {\n    var _a = elements[i],\n        unit = _a.unit,\n        ringIndex = _a.ringIndex;\n    var ring = unit.rings.all[ringIndex];\n\n    for (var j = 0, jl = ring.length; j < jl; ++j) {\n      var k = key(unit, unit.elements[ring[j]]);\n      var e = elementsMap.get(k);\n      if (e === undefined) elementsMap.set(k, [i]);else e.push(i);\n    }\n  }\n\n  function getElementIndices(unit, index) {\n    return getIndices(elementsMap, unit, index);\n  } // links\n\n\n  var linksMap = new Map();\n\n  for (var i = 0, il = links.length; i < il; ++i) {\n    var l = links[i];\n    var _b = elements[l.carbohydrateIndexA],\n        unit = _b.unit,\n        ringIndex = _b.ringIndex;\n    var ring = unit.rings.all[ringIndex];\n\n    for (var j = 0, jl = ring.length; j < jl; ++j) {\n      var k = key(unit, unit.elements[ring[j]]);\n      var e = linksMap.get(k);\n      if (e === undefined) linksMap.set(k, [i]);else e.push(i);\n    }\n  }\n\n  function getLinkIndices(unit, index) {\n    return getIndices(linksMap, unit, index);\n  } // terminal links\n\n\n  var terminalLinksMap = new Map();\n\n  for (var i = 0, il = terminalLinks.length; i < il; ++i) {\n    var _c = terminalLinks[i],\n        fromCarbohydrate = _c.fromCarbohydrate,\n        carbohydrateIndex = _c.carbohydrateIndex,\n        elementUnit = _c.elementUnit,\n        elementIndex = _c.elementIndex;\n\n    if (fromCarbohydrate) {\n      var _d = elements[carbohydrateIndex],\n          unit = _d.unit,\n          ringIndex = _d.ringIndex;\n      var ring = unit.rings.all[ringIndex];\n\n      for (var j = 0, jl = ring.length; j < jl; ++j) {\n        var k = key(unit, unit.elements[ring[j]]);\n        var e = terminalLinksMap.get(k);\n        if (e === undefined) terminalLinksMap.set(k, [i]);else e.push(i);\n      }\n    } else {\n      var k = key(elementUnit, elementUnit.elements[elementIndex]);\n      var e = terminalLinksMap.get(k);\n      if (e === undefined) terminalLinksMap.set(k, [i]);else e.push(i);\n    }\n  }\n\n  function getTerminalLinkIndices(unit, index) {\n    return getIndices(terminalLinksMap, unit, index);\n  }\n\n  return {\n    getElementIndices: getElementIndices,\n    getLinkIndices: getLinkIndices,\n    getTerminalLinkIndices: getTerminalLinkIndices\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/carbohydrates/compute.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,YAAT,EAAuB,WAAvB,QAA0C,0BAA1C;AACA,SAAS,YAAT,QAA6B,uCAA7B;AACA,SAAS,iBAAT,QAAkC,4BAAlC;AACA,SAAS,IAAT,QAAqB,qCAArB;AACA,SAAS,aAAT,QAA8B,2DAA9B;AACA,SAAS,UAAT,EAAqB,WAArB,QAAwC,4BAAxC;AAEA,SAAS,aAAT,EAAwB,QAAxB,QAAwC,mBAAxC;AACA,SAAS,YAAT,QAA6B,YAA7B;AAGA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAqH,kBAArH,QAA+I,QAA/I;AACA,SAAS,SAAT,EAAoB,QAApB,QAAoC,eAApC;AAEA,SAAS,aAAT,QAA8B,2BAA9B;AAEA,IAAM,CAAC,GAAG,aAAa,CAAC,GAAD,CAAvB;AAAA,IAA8B,CAAC,GAAG,aAAa,CAAC,GAAD,CAA/C;AACA,IAAM,YAAY,GAAG,CACjB,QAAQ,CAAC,kBAAT,CAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B,CADiB,EAEjB,QAAQ,CAAC,kBAAT,CAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA5B,CAFiB,EAGjB,QAAQ,CAAC,kBAAT,CAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA5B,CAHiB,EAIjB,QAAQ,CAAC,kBAAT,CAA4B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAA5B,CAJiB,CAArB;;AAOA,SAAS,iBAAT,CAA2B,IAA3B,EAA8C,SAA9C,EAA8F;AAC1F,MAAI,iBAAiB,GAAG,CAAC,CAAzB;AAAA,MAA4B,uBAAuB,GAAG,CAAC,CAAvD;AAAA,MAA0D,cAAc,GAAG,CAAC,CAA5E;AAAA,MAA+E,aAAa,GAAG,CAAC,CAAhG;AACQ,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACF,MAAA,EAAA,GAAiC,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,KAA5D;AAAA,MAAE,WAAW,GAAA,EAAA,CAAA,WAAb;AAAA,MAAe,aAAa,GAAA,EAAA,CAAA,aAA5B;AACA,MAAA,EAAA,GAA0B,IAAI,CAAC,KAA/B;AAAA,MAAK,QAAQ,GAAA,EAAA,CAAA,CAAb;AAAA,MAAe,MAAM,GAAA,EAAA,CAAA,MAArB;;AACN,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,CAAC,MAA/B,EAAuC,CAAC,GAAG,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAChD,QAAM,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAD,CAAV,CAAnB;AACA,QAAI,WAAW,CAAC,KAAZ,CAAkB,EAAlB,MAA0B,CAA9B,EAAiC;AACjC,QAAI,iBAAiB,GAAG,CAAxB;AACA,QAAI,iBAAiB,GAAG,CAAxB;;AACA,SAAK,IAAI,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAD,CAAV,CAAd,EAA8B,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,CAAD,CAAT,GAAe,CAAhB,CAA9C,EAAkE,CAAC,GAAG,EAAtE,EAA0E,EAAE,CAA5E,EAA+E;AAC3E,UAAM,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAD,CAAT,CAAnB;AACA,UAAM,UAAU,GAAG,WAAW,CAAC,KAAZ,CAAkB,EAAlB,CAAnB;AACA,UAAI,UAAU,KAAK,CAAnB,EAAsB,EAAE,iBAAF,CAAtB,KACK,IAAI,UAAU,KAAK,CAAnB,EAAsB,EAAE,iBAAF;AAC9B;;AACD,QAAI,iBAAiB,KAAK,CAA1B,EAA6B;AACzB;AACA,MAAA,iBAAiB,GAAG,EAApB;AACA;AACH,KAJD,MAIO,IAAI,iBAAiB,KAAK,CAAtB,IAA2B,iBAAiB,KAAK,CAArD,EAAwD;AAC3D;AACA,MAAA,uBAAuB,GAAG,EAA1B;AACH,KAHM,MAGA,IAAI,aAAa,CAAC,KAAd,CAAoB,EAApB,EAAwB,UAAxB,CAAmC,IAAnC,CAAJ,EAA8C;AACjD;AACA,MAAA,cAAc,GAAG,EAAjB;AACH,KAHM,MAGA;AACH;AACA,MAAA,aAAa,GAAG,EAAhB;AACH;AACJ;;AACD,SAAQ,iBAAiB,KAAK,CAAC,CAAvB,GAA2B,iBAA3B,GACF,uBAAuB,KAAK,CAAC,CAA7B,GAAiC,uBAAjC,GACI,cAAc,KAAK,CAAC,CAApB,GAAwB,cAAxB,GACI,aAAa,KAAK,CAAC,CAAnB,GAAuB,aAAvB,GACI,QAAQ,CAAC,SAAS,CAAC,CAAD,CAAV,CAJ1B;AAKH;;AAED,SAAS,QAAT,CAAkB,IAAlB,EAAqC,KAArC,EAAsE;AAC1D,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACA,MAAA,YAAY,GAAK,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,KAA3B,CAAL,YAAZ;AACR,SAAO,YAAY,CAAC,KAAb,CAAmB,QAAQ,CAAC,KAAD,CAA3B,CAAP;AACH;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAAuC,IAAvC,EAA0D,KAA1D,EAA+E,MAA/E,EAA2F;AAC/E,MAAA,QAAQ,GAAK,IAAI,CAAC,YAAL,CAAL,QAAR;AACR,EAAA,IAAI,CAAC,SAAL,CAAe,SAAf,EAA0B,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,MAApB,EAA4B,QAAQ,CAAC,KAAD,EAAQ,SAAR,CAApC,CAA1B;AACA,SAAO,SAAP;AACH;;AAED,SAAS,SAAT,CAAmB,IAAnB,EAAsC,KAAtC,EAAuE;AAC3D,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACA,MAAA,aAAa,GAAK,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,KAA3B,CAAL,aAAb;AACR,SAAO,aAAa,CAAC,KAAd,CAAoB,QAAQ,CAAC,KAAD,CAA5B,CAAP;AACH;;AAED,SAAS,gBAAT,CAA0B,SAA1B,EAAgD,KAAhD,EAAoF;AAChF,MAAI,CAAC,KAAD,IAAU,CAAC,KAAK,CAAC,MAArB,EAA6B;AAErB,MAAA,IAAI,GAAU,SAAS,CAAnB,IAAJ;AAAA,MAAM,GAAG,GAAK,SAAS,CAAd,GAAT;AACR,MAAM,UAAU,GAAG,IAAI,GAAJ,EAAnB;AACA,MAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,KAAJ,CAAU,KAAK,CAAC,MAAhB,CAAD,CAAX,EAAkD,CAAlD,CAArC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,gBAAgB,CAAC,MAAtC,EAA8C,CAAC,GAAG,EAAlD,EAAsD,EAAE,CAAxD,EAA2D;AACvD,QAAM,EAAE,GAAG,gBAAgB,CAAC,CAAD,CAA3B;AACA,QAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAD,CAAH,CAAN,CAAd;AAAA,QAA8B,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAD,CAAH,CAAN,CAAtC;;AACA,QAAI,WAAW,CAAC,eAAZ,CAA4B,EAA5B,EAAgC,EAAhC,KACI,QAAQ,CAAC,QAAT,CAAkB,IAAlB,EAAwB,EAAxB,MAAgC,QAAQ,CAAC,QAAT,CAAkB,IAAlB,EAAwB,EAAxB,CADxC,EACqE;AACjE,MAAA,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,EAAE,CAAC,CAAD,CAAH,CAApB;AACA,MAAA,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,EAAE,CAAC,CAAD,CAAH,CAApB;AACH;AACJ;;AAED,MAAI,UAAU,CAAC,IAAf,EAAqB;AACjB,QAAM,aAAa,GAAsB,EAAzC;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,EAAE,CAA7C,EAAgD;AAC5C,UAAI,CAAC,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,CAAD,CAApB,CAAL,EAA+B,aAAa,CAAC,IAAd,CAAmB,KAAK,CAAC,CAAD,CAAxB;AAClC;;AACD,WAAO,aAAP;AACH,GAND,MAMO;AACH,WAAO,KAAP;AACH;AACJ;;AAED,SAAS,iBAAT,CAA2B,MAA3B,EAA2C,KAA3C,EAAuD;AACnD,SAAO,KAAK,CAAC,UAAN,CAAiB,sBAAjB,CAAwC,GAAxC,CAA4C,MAA5C,CAAP;AACH;;AAED,OAAM,SAAU,oBAAV,CAA+B,SAA/B,EAAmD;AACrD;AACA,MAAI,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAAwB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAA,CAAC,GAAG,CAAC,CAAC,UAAF,CAAa,sBAAb,CAAJ,IAAA;AAA4C,GAA9E,EAAgF,CAAhF,MAAuF,CAA3F,EACI,OAAO,kBAAP;AAEJ,MAAM,KAAK,GAAuB,EAAlC;AACA,MAAM,aAAa,GAA+B,EAAlD;AACA,MAAM,QAAQ,GAA0B,EAAxC;AACA,MAAM,eAAe,GAAiC,EAAtD;AAEA,MAAM,mBAAmB,GAAG,IAAI,GAAJ,EAA5B;;AACA,WAAS,cAAT,CAAwB,YAAxB,EAA8C,MAA9C,EAA8D,KAA9D,EAA2E;AACvE,WAAU,YAAY,GAAA,GAAZ,GAAgB,MAAhB,GAAsB,GAAtB,GAA0B,KAApC;AACH;;AACD,WAAS,cAAT,CAAwB,GAAxB,EAAqC,YAArC,EAAyD;AACrD,QAAI,mBAAmB,CAAC,GAApB,CAAwB,GAAxB,CAAJ,EAAkC,mBAAmB,CAAC,GAApB,CAAwB,GAAxB,EAA8B,IAA9B,CAAmC,YAAnC,EAAlC,KACK,mBAAmB,CAAC,GAApB,CAAwB,GAAxB,EAA6B,CAAC,YAAD,CAA7B;AACR;;AAED,WAAS,gBAAT,CAA0B,EAA1B,EAAsC,EAAtC,EAAgD;AAC5C,IAAA,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,EAAD,CAAR,CAAa,QAAb,CAAsB,SAA/B,EAA0C,QAAQ,CAAC,EAAD,CAAR,CAAa,QAAb,CAAsB,MAAhE,EAAwE,QAAQ,CAAC,EAAD,CAAR,CAAa,QAAb,CAAsB,MAA9F;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,QAAQ,CAAC,EAAD,CAAR,CAAa,QAAb,CAAsB,SAArC,EAAgD,QAAQ,CAAC,EAAD,CAAR,CAAa,QAAb,CAAsB,SAAtE;AACH;;AAED,MAAM,IAAI,GAAG,IAAI,CAAC,IAAL,EAAb;;AACA,WAAS,wBAAT,CAAkC,EAAlC,EAA8C,MAA9C,EAA8D,KAA9D,EAAgF;AAC5E,QAAM,GAAG,GAAG,KAAK,CAAC,YAAN,CAAmB,QAA/B;AAAA,QAAyC,GAAG,GAAG,QAAQ,CAAC,EAAD,CAAR,CAAa,QAA5D;AACA,IAAA,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,SAAb,EAAwB,GAAG,CAAC,KAAK,CAAC,QAAN,CAAe,MAAf,CAAD,EAAyB,IAAzB,CAA3B,EAA2D,GAAG,CAAC,MAA/D;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,GAAG,CAAC,SAAnB,EAA8B,GAAG,CAAC,SAAlC;AACH,GA7BoD,CA+BrD;;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,CAAC,KAAV,CAAgB,MAArC,EAA6C,CAAC,GAAG,EAAjD,EAAqD,EAAE,CAAvD,EAA0D;AACtD,QAAM,IAAI,GAAG,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAAb;AACA,QAAI,CAAC,IAAI,CAAC,QAAL,CAAc,IAAd,CAAL,EAA0B;AAElB,QAAA,KAAK,GAAY,IAAI,CAAhB,KAAL;AAAA,QAAO,KAAK,GAAK,IAAI,CAAT,KAAZ;AACF,QAAA,EAAA,GAAoD,KAAK,CAAC,eAA1D;AAAA,QAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAnB;AAAA,QAAqB,mBAAmB,GAAA,EAAA,CAAA,mBAAxC;AAAA,QAA0C,KAAK,GAAA,EAAA,CAAA,KAA/C;AACE,QAAA,aAAa,GAAK,KAAK,CAAV,aAAb;AAER,QAAM,OAAO,GAAG,YAAY,CAAC,iBAAb,CAA+B,iBAA/B,EAAkD,IAAI,CAAC,QAAvD,CAAhB;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,iBAAb,CAA+B,mBAA/B,EAAoD,IAAI,CAAC,QAAzD,CAAlB;AAEA,QAAI,eAAe,GAAqD,KAAK,CAA7E;;AAEA,WAAO,OAAO,CAAC,OAAf,EAAwB;AACpB,MAAA,SAAS,CAAC,UAAV,CAAqB,OAAO,CAAC,IAAR,EAArB;;AAEA,aAAO,SAAS,CAAC,OAAjB,EAA0B;AACd,YAAO,YAAY,GAAK,SAAS,CAAC,IAAV,GAAL,KAAnB;AAER,YAAM,cAAc,GAAG,iBAAiB,CAAC,aAAa,CAAC,KAAd,CAAoB,mBAAmB,CAAC,OAApB,CAA4B,YAA5B,CAApB,CAAD,EAAiE,KAAjE,CAAxC;AACA,YAAI,CAAC,cAAL,EAAqB;;AAErB,YAAI,CAAC,eAAL,EAAsB;AAClB,UAAA,eAAe,GAAG,SAAS,CAAC,uBAAV,CAAkC,KAAlC,EAAyC,YAAzC,CAAlB;AACH;;AAED,YAAM,UAAU,GAAG,gBAAgB,CAAC,KAAD,EAAQ,eAAe,CAAC,GAAhB,CAAoB,YAApB,CAAR,CAAnC;;AAEA,YAAI,CAAC,UAAD,IAAe,CAAC,UAAU,CAAC,MAA/B,EAAuC;AACnC,UAAA,eAAe,CAAC,IAAhB,CAAqB;AAAE,YAAA,IAAI,EAAA,IAAN;AAAQ,YAAA,YAAY,EAAA,YAApB;AAAsB,YAAA,SAAS,EAAE;AAAjC,WAArB;AACA;AACH;;AAED,YAAM,YAAY,GAAa,EAA/B;;AAEA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,UAAU,CAAC,MAAhC,EAAwC,CAAC,GAAG,EAA5C,EAAgD,EAAE,CAAlD,EAAqD;AACjD,cAAM,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,UAAU,CAAC,CAAD,CAApB,CAAlB;AACA,cAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,EAAO,SAAP,CAAxC;AAEA,cAAM,EAAE,GAAG,aAAa,CAAC,oBAAd,CAAmC,YAAY,CAAC,IAAD,EAAO,SAAP,CAA/C,CAAX;AACA,cAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,EAAV,EAAuB,EAAE,CAAC,MAA1B,CAAf;AACA,cAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,EAAV,EAAuB,EAAE,CAAC,IAA1B,CAAf;AACA,cAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,IAAL,EAAD,EAAc,IAAd,EAAoB,cAApB,EAAoC,MAApC,CAA9B;AACA,UAAA,IAAI,CAAC,aAAL,CAAmB,SAAnB,EAA8B,MAA9B,EAAsC,SAAtC;AAEA,cAAM,SAAS,GAAG,QAAQ,CAAC,QAAT,CAAkB,IAAlB,EAAwB,SAAxB,CAAlB;AACA,cAAM,YAAY,GAAG,QAAQ,CAAC,MAA9B;AACA,UAAA,YAAY,CAAC,IAAb,CAAkB,YAAlB;AAEA,UAAA,cAAc,CAAC,cAAc,CAAC,YAAD,EAAe,IAAI,CAAC,EAApB,EAAwB,SAAxB,CAAf,EAAmD,YAAnD,CAAd;AACA,cAAI,SAAJ,EAAe,cAAc,CAAC,cAAc,CAAC,YAAD,EAAe,IAAI,CAAC,EAApB,EAAwB,EAAxB,CAAf,EAA4C,YAA5C,CAAd;AAEf,UAAA,QAAQ,CAAC,IAAT,CAAc;AACV,YAAA,QAAQ,EAAE;AAAE,cAAA,MAAM,EAAA,MAAR;AAAU,cAAA,MAAM,EAAA,MAAhB;AAAkB,cAAA,SAAS,EAAA;AAA3B,aADA;AAEV,YAAA,SAAS,EAAE,cAFD;AAGV,YAAA,SAAS,EAAE,UAAU,CAAC,CAAD,CAHX;AAIV,YAAA,KAAK,EAAE,SAJG;AAKV,YAAA,IAAI,EAAA,IALM;AAKJ,YAAA,YAAY,EAAA;AALR,WAAd;AAOH,SA3CqB,CA6CtB;AACA;;;AACA,YAAM,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,KAAJ,CAAU,UAAU,CAAC,MAArB,CAAD,CAAX,EAAuD,CAAvD,CAArC;;AACA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,gBAAgB,CAAC,MAAtC,EAA8C,CAAC,GAAG,EAAlD,EAAsD,EAAE,CAAxD,EAA2D;AACvD,cAAM,EAAE,GAAG,gBAAgB,CAAC,CAAD,CAA3B;AACA,cAAM,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,UAAU,CAAC,EAAE,CAAC,CAAD,CAAH,CAApB,CAAX;AAAA,cAAyC,EAAE,GAAG,KAAK,CAAC,GAAN,CAAU,UAAU,CAAC,EAAE,CAAC,CAAD,CAAH,CAApB,CAA9C,CAFuD,CAGvD;;AACA,cAAI,iBAAiB,CAAC,sBAAlB,CAAyC,IAAI,CAAC,KAA9C,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,CAA7D,CAAJ,EAAqE;AACjE,gBAAM,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC,CAAD,CAAH,CAAxB;AACA,gBAAM,GAAG,GAAG,YAAY,CAAC,EAAE,CAAC,CAAD,CAAH,CAAxB;;AACA,gBAAI,QAAQ,CAAC,GAAD,CAAR,CAAc,KAAd,KAAwB,QAAQ,CAAC,GAAD,CAAR,CAAc,KAA1C,EAAiD;AAC7C;AACA;AACA,cAAA,gBAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AACA,cAAA,gBAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AACA,cAAA,KAAK,CAAC,IAAN,CAAW;AAAE,gBAAA,kBAAkB,EAAE,GAAtB;AAA2B,gBAAA,kBAAkB,EAAE;AAA/C,eAAX;AACA,cAAA,KAAK,CAAC,IAAN,CAAW;AAAE,gBAAA,kBAAkB,EAAE,GAAtB;AAA2B,gBAAA,kBAAkB,EAAE;AAA/C,eAAX;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,WAAS,qBAAT,CAA+B,IAA/B,EAAkD,KAAlD,EAAmF;AAC/E,WAAO,mBAAmB,CAAC,GAApB,CAAwB,cAAc,CAAC,IAAI,CAAC,eAAL,CAAqB,KAArB,CAAD,EAA8B,IAAI,CAAC,EAAnC,EAAuC,QAAQ,CAAC,IAAD,EAAO,KAAP,CAA/C,CAAtC,KAAwG,EAA/G;AACH,GAvHoD,CAyHrD;AACA;;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,EAAE,CAAhD,EAAmD;AAC/C,QAAM,EAAE,GAAG,QAAQ,CAAC,CAAD,CAAnB;AACQ,QAAA,IAAI,GAAK,EAAE,CAAP,IAAJ;;AAER,SAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAjB,EAAoB,CAAC,GAAG,EAAxB,EAA4B,EAAE,CAA9B,EAAiC;AAC7B,UAAM,EAAE,GAAG,QAAQ,CAAC,CAAD,CAAnB;AACA,UAAI,IAAI,KAAK,EAAE,CAAC,IAAZ,IAAoB,EAAE,CAAC,YAAH,KAAoB,EAAE,CAAC,YAA/C,EAA6D;AAC7D,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,EAAE,CAAC,SAAlB,CAAX;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,EAAE,CAAC,SAAlB,CAAX;;AAEA,UAAI,iBAAiB,CAAC,sBAAlB,CAAyC,IAAI,CAAC,KAA9C,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,CAA7D,CAAJ,EAAqE;AACjE;AACA;AACA,QAAA,gBAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA,QAAA,gBAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA,QAAA,KAAK,CAAC,IAAN,CAAW;AAAE,UAAA,kBAAkB,EAAE,CAAtB;AAAyB,UAAA,kBAAkB,EAAE;AAA7C,SAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW;AAAE,UAAA,kBAAkB,EAAE,CAAtB;AAAyB,UAAA,kBAAkB,EAAE;AAA7C,SAAX;AACH;AACJ;AACJ,GA9IoD,CAgJrD;AACA;AACA;AACA;;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,CAAC,KAAV,CAAgB,MAArC,EAA6C,CAAC,GAAG,EAAjD,EAAqD,EAAE,CAAvD,EAA0D;AACtD,QAAM,IAAI,GAAG,SAAS,CAAC,KAAV,CAAgB,CAAhB,CAAb;AACA,QAAI,CAAC,IAAI,CAAC,QAAL,CAAc,IAAd,CAAL,EAA0B;AAE1B,IAAA,SAAS,CAAC,cAAV,CAAyB,iBAAzB,CAA2C,IAAI,CAAC,EAAhD,EAAoD,OAApD,CAA4D,UAAA,SAAA,EAAS;AACjE,MAAA,SAAS,CAAC,gBAAV,CAA2B,OAA3B,CAAmC,UAAA,MAAA,EAAM;AACrC,QAAA,SAAS,CAAC,QAAV,CAAmB,MAAnB,EAA2B,OAA3B,CAAmC,UAAC,EAAD,EAAkB;cAAf,KAAK,GAAA,EAAA,CAAA,K;cAAE,MAAM,GAAA,EAAA,CAAA,M;AAC/C,cAAI,CAAC,QAAQ,CAAC,UAAT,CAAoB,KAAK,CAAC,IAA1B,CAAL,EAAsC;AAEtC,cAAM,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAsB,SAAS,CAAC,KAAhC,CAAd;AACA,cAAM,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAsB,SAAS,CAAC,KAAhC,CAAd;AACA,cAAM,mBAAmB,GAAG,qBAAqB,CAAC,KAAD,EAAQ,MAAR,CAAjD;AACA,cAAM,mBAAmB,GAAG,qBAAqB,CAAC,KAAD,EAAQ,MAAR,CAAjD;;AACA,cAAI,mBAAmB,CAAC,MAApB,GAA6B,CAA7B,IAAkC,mBAAmB,CAAC,MAApB,GAA6B,CAAnE,EAAsE;AAClE,gBAAM,EAAE,GAAG,mBAAmB,CAAC,MAA/B;AACA,gBAAM,EAAE,GAAG,mBAAmB,CAAC,MAA/B;;AACA,iBAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,CAArB,EAAuC,CAAC,GAAG,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAChD,kBAAM,iBAAiB,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAE,GAAG,CAAjB,CAAD,CAA7C;AACA,kBAAM,iBAAiB,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAE,GAAG,CAAjB,CAAD,CAA7C;AACA,kBAAM,OAAO,GAAG,SAAS,CAAC,KAAD,EAAQ,MAAR,CAAzB;;AACA,kBAAI,OAAO,CAAC,UAAR,CAAmB,IAAnB,KAA4B,OAAO,CAAC,UAAR,CAAmB,IAAnB,CAAhC,EAA0D;AACtD,gBAAA,gBAAgB,CAAC,iBAAD,EAAoB,iBAApB,CAAhB;AACH;;AACD,cAAA,KAAK,CAAC,IAAN,CAAW;AACP,gBAAA,kBAAkB,EAAE,iBADb;AAEP,gBAAA,kBAAkB,EAAE;AAFb,eAAX;AAIH;AACJ,WAfD,MAeO,IAAI,mBAAmB,CAAC,MAApB,KAA+B,CAAnC,EAAsC;AACzC,iBAAgC,IAAA,EAAA,GAAA,CAAA,EAAA,qBAAA,GAAA,mBAAhC,EAAgC,EAAA,GAAA,qBAAA,CAAA,MAAhC,EAAgC,EAAA,EAAhC,EAAqD;AAAhD,kBAAM,iBAAiB,GAAA,qBAAA,CAAA,EAAA,CAAvB;AACD,kBAAM,OAAO,GAAG,SAAS,CAAC,KAAD,EAAQ,MAAR,CAAzB;;AACA,kBAAI,OAAO,CAAC,UAAR,CAAmB,IAAnB,KAA4B,OAAO,CAAC,UAAR,CAAmB,IAAnB,CAAhC,EAA0D;AACtD,gBAAA,wBAAwB,CAAC,iBAAD,EAAoB,MAApB,EAA4B,KAA5B,CAAxB;AACH;;AACD,cAAA,aAAa,CAAC,IAAd,CAAmB;AACf,gBAAA,iBAAiB,EAAE,iBADJ;AAEf,gBAAA,YAAY,EAAE,MAFC;AAGf,gBAAA,WAAW,EAAE,KAHE;AAIf,gBAAA,gBAAgB,EAAE;AAJH,eAAnB;AAMH;AACJ,WAbM,MAaA,IAAI,mBAAmB,CAAC,MAApB,KAA+B,CAAnC,EAAsC;AACzC,iBAAgC,IAAA,EAAA,GAAA,CAAA,EAAA,qBAAA,GAAA,mBAAhC,EAAgC,EAAA,GAAA,qBAAA,CAAA,MAAhC,EAAgC,EAAA,EAAhC,EAAqD;AAAhD,kBAAM,iBAAiB,GAAA,qBAAA,CAAA,EAAA,CAAvB;AACD,cAAA,aAAa,CAAC,IAAd,CAAmB;AACf,gBAAA,iBAAiB,EAAE,iBADJ;AAEf,gBAAA,YAAY,EAAE,MAFC;AAGf,gBAAA,WAAW,EAAE,KAHE;AAIf,gBAAA,gBAAgB,EAAE;AAJH,eAAnB;AAMH;AACJ;AACJ,SA7CD;AA8CH,OA/CD;AAgDH,KAjDD;AAkDH;;AAED,SAAA,QAAA,CAAA;AAAS,IAAA,KAAK,EAAA,KAAd;AAAgB,IAAA,aAAa,EAAA,aAA7B;AAA+B,IAAA,QAAQ,EAAA,QAAvC;AAAyC,IAAA,eAAe,EAAA;AAAxD,GAAA,EAA6D,YAAY,CAAC,QAAD,EAAW,KAAX,EAAkB,aAAlB,CAAzE,CAAA;AACH;;AAED,SAAS,YAAT,CAAsB,QAAtB,EAAuD,KAAvD,EAAkF,aAAlF,EAA2H;AAEvH,WAAS,GAAT,CAAa,IAAb,EAAyB,OAAzB,EAA8C;AAC1C,WAAO,aAAa,CAAC,IAAI,CAAC,EAAN,EAAU,OAAV,CAApB;AACH;;AAED,WAAS,UAAT,CAAoB,GAApB,EAAgD,IAAhD,EAAmE,KAAnE,EAAsF;AAClF,QAAM,OAAO,GAAa,EAA1B;AACA,QAAM,EAAE,GAAG,GAAG,CAAC,GAAJ,CAAQ,GAAG,CAAC,IAAD,EAAO,KAAP,CAAX,CAAX;;AACA,QAAI,EAAE,KAAK,SAAX,EAAsB;AAClB,WAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,IAAA,GAAA,EAAhB,EAAgB,EAAA,GAAA,IAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAkB;AAAb,YAAM,CAAC,GAAA,IAAA,CAAA,EAAA,CAAP;AAAe,QAAA,WAAW,CAAC,OAAD,EAAU,CAAV,CAAX;AAAwB;AAC/C;;AACD,WAAO,OAAP;AACH,GAbsH,CAevH;;;AAEA,MAAM,WAAW,GAAG,IAAI,GAAJ,EAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,EAAE,CAAhD,EAAmD;AACzC,QAAA,EAAA,GAAsB,QAAQ,CAAC,CAAD,CAA9B;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,SAAS,GAAA,EAAA,CAAA,SAAjB;AACN,QAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,SAAf,CAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,UAAM,CAAC,GAAG,GAAG,CAAC,IAAD,EAAO,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,CAAD,CAAlB,CAAP,CAAb;AACA,UAAM,CAAC,GAAG,WAAW,CAAC,GAAZ,CAAgB,CAAhB,CAAV;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB,WAAW,CAAC,GAAZ,CAAgB,CAAhB,EAAmB,CAAC,CAAD,CAAnB,EAArB,KACK,CAAC,CAAC,IAAF,CAAO,CAAP;AACR;AACJ;;AAED,WAAS,iBAAT,CAA2B,IAA3B,EAA8C,KAA9C,EAAiE;AAC7D,WAAO,UAAU,CAAC,WAAD,EAAc,IAAd,EAAoB,KAApB,CAAjB;AACH,GA/BsH,CAiCvH;;;AAEA,MAAM,QAAQ,GAAG,IAAI,GAAJ,EAAjB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,EAAE,CAA7C,EAAgD;AAC5C,QAAM,CAAC,GAAG,KAAK,CAAC,CAAD,CAAf;AACM,QAAA,EAAA,GAAsB,QAAQ,CAAC,CAAC,CAAC,kBAAH,CAA9B;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,SAAS,GAAA,EAAA,CAAA,SAAjB;AACN,QAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,SAAf,CAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,UAAM,CAAC,GAAG,GAAG,CAAC,IAAD,EAAO,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,CAAD,CAAlB,CAAP,CAAb;AACA,UAAM,CAAC,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAb,CAAV;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB,QAAQ,CAAC,GAAT,CAAa,CAAb,EAAgB,CAAC,CAAD,CAAhB,EAArB,KACK,CAAC,CAAC,IAAF,CAAO,CAAP;AACR;AACJ;;AAED,WAAS,cAAT,CAAwB,IAAxB,EAA2C,KAA3C,EAA8D;AAC1D,WAAO,UAAU,CAAC,QAAD,EAAW,IAAX,EAAiB,KAAjB,CAAjB;AACH,GAlDsH,CAoDvH;;;AAEA,MAAM,gBAAgB,GAAG,IAAI,GAAJ,EAAzB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,aAAa,CAAC,MAAnC,EAA2C,CAAC,GAAG,EAA/C,EAAmD,EAAE,CAArD,EAAwD;AAC9C,QAAA,EAAA,GAAqE,aAAa,CAAC,CAAD,CAAlF;AAAA,QAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAlB;AAAA,QAAoB,iBAAiB,GAAA,EAAA,CAAA,iBAArC;AAAA,QAAuC,WAAW,GAAA,EAAA,CAAA,WAAlD;AAAA,QAAoD,YAAY,GAAA,EAAA,CAAA,YAAhE;;AACN,QAAI,gBAAJ,EAAsB;AACZ,UAAA,EAAA,GAAsB,QAAQ,CAAC,iBAAD,CAA9B;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,SAAS,GAAA,EAAA,CAAA,SAAjB;AACN,UAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,SAAf,CAAb;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,YAAM,CAAC,GAAG,GAAG,CAAC,IAAD,EAAO,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,CAAD,CAAlB,CAAP,CAAb;AACA,YAAM,CAAC,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,CAArB,CAAV;AACA,YAAI,CAAC,KAAK,SAAV,EAAqB,gBAAgB,CAAC,GAAjB,CAAqB,CAArB,EAAwB,CAAC,CAAD,CAAxB,EAArB,KACK,CAAC,CAAC,IAAF,CAAO,CAAP;AACR;AACJ,KATD,MASO;AACH,UAAM,CAAC,GAAG,GAAG,CAAC,WAAD,EAAc,WAAW,CAAC,QAAZ,CAAqB,YAArB,CAAd,CAAb;AACA,UAAM,CAAC,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,CAArB,CAAV;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB,gBAAgB,CAAC,GAAjB,CAAqB,CAArB,EAAwB,CAAC,CAAD,CAAxB,EAArB,KACK,CAAC,CAAC,IAAF,CAAO,CAAP;AACR;AACJ;;AAED,WAAS,sBAAT,CAAgC,IAAhC,EAAmD,KAAnD,EAAsE;AAClE,WAAO,UAAU,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,KAAzB,CAAjB;AACH;;AAED,SAAO;AAAE,IAAA,iBAAiB,EAAA,iBAAnB;AAAqB,IAAA,cAAc,EAAA,cAAnC;AAAqC,IAAA,sBAAsB,EAAA;AAA3D,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Segmentation, SortedArray } from '../../../../mol-data/int';\r\nimport { combinations } from '../../../../mol-data/util/combination';\r\nimport { IntAdjacencyGraph } from '../../../../mol-math/graph';\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\r\nimport { fillSerial, arraySetAdd } from '../../../../mol-util/array';\r\nimport { ElementSymbol, BondType } from '../../model/types';\r\nimport { getPositions } from '../../util';\r\nimport { Unit } from '../unit';\r\nimport { EmptyCarbohydrates } from './data';\r\nimport { UnitRings, UnitRing } from '../unit/rings';\r\nimport { cantorPairing } from '../../../../mol-data/util';\r\nvar C = ElementSymbol('C'), O = ElementSymbol('O');\r\nvar SugarRingFps = [\r\n    UnitRing.elementFingerprint([C, C, C, O]),\r\n    UnitRing.elementFingerprint([C, C, C, C, O]),\r\n    UnitRing.elementFingerprint([C, C, C, C, C, O]),\r\n    UnitRing.elementFingerprint([C, C, C, C, C, C, O]),\r\n];\r\nfunction getAnomericCarbon(unit, ringAtoms) {\r\n    var indexHasTwoOxygen = -1, indexHasOxygenAndCarbon = -1, indexHasC1Name = -1, indexIsCarbon = -1;\r\n    var elements = unit.elements;\r\n    var _a = unit.model.atomicHierarchy.atoms, type_symbol = _a.type_symbol, label_atom_id = _a.label_atom_id;\r\n    var _b = unit.bonds, neighbor = _b.b, offset = _b.offset;\r\n    for (var i = 0, il = ringAtoms.length; i < il; ++i) {\r\n        var ei = elements[ringAtoms[i]];\r\n        if (type_symbol.value(ei) !== C)\r\n            continue;\r\n        var linkedOxygenCount = 0;\r\n        var linkedCarbonCount = 0;\r\n        for (var j = offset[ringAtoms[i]], jl = offset[ringAtoms[i] + 1]; j < jl; ++j) {\r\n            var ej = elements[neighbor[j]];\r\n            var typeSymbol = type_symbol.value(ej);\r\n            if (typeSymbol === O)\r\n                ++linkedOxygenCount;\r\n            else if (typeSymbol === C)\r\n                ++linkedCarbonCount;\r\n        }\r\n        if (linkedOxygenCount === 2) {\r\n            // found anomeric carbon\r\n            indexHasTwoOxygen = ei;\r\n            break;\r\n        }\r\n        else if (linkedOxygenCount === 1 && linkedCarbonCount === 1) {\r\n            // possibly an anomeric carbon if this is a mono-saccharide without a glycosidic bond\r\n            indexHasOxygenAndCarbon = ei;\r\n        }\r\n        else if (label_atom_id.value(ei).startsWith('C1')) {\r\n            // likely the anomeric carbon as it is named C1 by convention\r\n            indexHasC1Name = ei;\r\n        }\r\n        else {\r\n            // use any carbon as a fallback\r\n            indexIsCarbon = ei;\r\n        }\r\n    }\r\n    return (indexHasTwoOxygen !== -1 ? indexHasTwoOxygen\r\n        : indexHasOxygenAndCarbon !== -1 ? indexHasOxygenAndCarbon\r\n            : indexHasC1Name !== -1 ? indexHasC1Name\r\n                : indexIsCarbon !== -1 ? indexIsCarbon\r\n                    : elements[ringAtoms[0]]);\r\n}\r\nfunction getAltId(unit, index) {\r\n    var elements = unit.elements;\r\n    var label_alt_id = unit.model.atomicHierarchy.atoms.label_alt_id;\r\n    return label_alt_id.value(elements[index]);\r\n}\r\nfunction getDirection(direction, unit, index, center) {\r\n    var position = unit.conformation.position;\r\n    Vec3.normalize(direction, Vec3.sub(direction, center, position(index, direction)));\r\n    return direction;\r\n}\r\nfunction getAtomId(unit, index) {\r\n    var elements = unit.elements;\r\n    var label_atom_id = unit.model.atomicHierarchy.atoms.label_atom_id;\r\n    return label_atom_id.value(elements[index]);\r\n}\r\nfunction filterFusedRings(unitRings, rings) {\r\n    if (!rings || !rings.length)\r\n        return;\r\n    var unit = unitRings.unit, all = unitRings.all;\r\n    var fusedRings = new Set();\r\n    var ringCombinations = combinations(fillSerial(new Array(rings.length)), 2);\r\n    for (var i = 0, il = ringCombinations.length; i < il; ++i) {\r\n        var rc = ringCombinations[i];\r\n        var r0 = all[rings[rc[0]]], r1 = all[rings[rc[1]]];\r\n        if (SortedArray.areIntersecting(r0, r1) &&\r\n            UnitRing.getAltId(unit, r0) === UnitRing.getAltId(unit, r1)) {\r\n            fusedRings.add(rings[rc[0]]);\r\n            fusedRings.add(rings[rc[1]]);\r\n        }\r\n    }\r\n    if (fusedRings.size) {\r\n        var filteredRings = [];\r\n        for (var i = 0, il = rings.length; i < il; ++i) {\r\n            if (!fusedRings.has(rings[i]))\r\n                filteredRings.push(rings[i]);\r\n        }\r\n        return filteredRings;\r\n    }\r\n    else {\r\n        return rings;\r\n    }\r\n}\r\nfunction getSaccharideComp(compId, model) {\r\n    return model.properties.saccharideComponentMap.get(compId);\r\n}\r\nexport function computeCarbohydrates(structure) {\r\n    // skip computation if there are no saccharide components in any model\r\n    if (structure.models.reduce(function (a, v) { return a + v.properties.saccharideComponentMap.size; }, 0) === 0)\r\n        return EmptyCarbohydrates;\r\n    var links = [];\r\n    var terminalLinks = [];\r\n    var elements = [];\r\n    var partialElements = [];\r\n    var elementsWithRingMap = new Map();\r\n    function ringElementKey(residueIndex, unitId, altId) {\r\n        return residueIndex + \"|\" + unitId + \"|\" + altId;\r\n    }\r\n    function addRingElement(key, elementIndex) {\r\n        if (elementsWithRingMap.has(key))\r\n            elementsWithRingMap.get(key).push(elementIndex);\r\n        else\r\n            elementsWithRingMap.set(key, [elementIndex]);\r\n    }\r\n    function fixLinkDirection(iA, iB) {\r\n        Vec3.sub(elements[iA].geometry.direction, elements[iB].geometry.center, elements[iA].geometry.center);\r\n        Vec3.normalize(elements[iA].geometry.direction, elements[iA].geometry.direction);\r\n    }\r\n    var tmpV = Vec3.zero();\r\n    function fixTerminalLinkDirection(iA, indexB, unitB) {\r\n        var pos = unitB.conformation.position, geo = elements[iA].geometry;\r\n        Vec3.sub(geo.direction, pos(unitB.elements[indexB], tmpV), geo.center);\r\n        Vec3.normalize(geo.direction, geo.direction);\r\n    }\r\n    // get carbohydrate elements and carbohydrate links induced by intra-residue bonds\r\n    for (var i = 0, il = structure.units.length; i < il; ++i) {\r\n        var unit = structure.units[i];\r\n        if (!Unit.isAtomic(unit))\r\n            continue;\r\n        var model = unit.model, rings = unit.rings;\r\n        var _a = model.atomicHierarchy, chainAtomSegments = _a.chainAtomSegments, residueAtomSegments = _a.residueAtomSegments, atoms = _a.atoms;\r\n        var label_comp_id = atoms.label_comp_id;\r\n        var chainIt = Segmentation.transientSegments(chainAtomSegments, unit.elements);\r\n        var residueIt = Segmentation.transientSegments(residueAtomSegments, unit.elements);\r\n        var sugarResidueMap = void 0;\r\n        while (chainIt.hasNext) {\r\n            residueIt.setSegment(chainIt.move());\r\n            while (residueIt.hasNext) {\r\n                var residueIndex = residueIt.move().index;\r\n                var saccharideComp = getSaccharideComp(label_comp_id.value(residueAtomSegments.offsets[residueIndex]), model);\r\n                if (!saccharideComp)\r\n                    continue;\r\n                if (!sugarResidueMap) {\r\n                    sugarResidueMap = UnitRings.byFingerprintAndResidue(rings, SugarRingFps);\r\n                }\r\n                var sugarRings = filterFusedRings(rings, sugarResidueMap.get(residueIndex));\r\n                if (!sugarRings || !sugarRings.length) {\r\n                    partialElements.push({ unit: unit, residueIndex: residueIndex, component: saccharideComp });\r\n                    continue;\r\n                }\r\n                var ringElements = [];\r\n                for (var j = 0, jl = sugarRings.length; j < jl; ++j) {\r\n                    var ringAtoms = rings.all[sugarRings[j]];\r\n                    var anomericCarbon = getAnomericCarbon(unit, ringAtoms);\r\n                    var ma = PrincipalAxes.calculateMomentsAxes(getPositions(unit, ringAtoms));\r\n                    var center = Vec3.copy(Vec3.zero(), ma.origin);\r\n                    var normal = Vec3.copy(Vec3.zero(), ma.dirC);\r\n                    var direction = getDirection(Vec3.zero(), unit, anomericCarbon, center);\r\n                    Vec3.orthogonalize(direction, normal, direction);\r\n                    var ringAltId = UnitRing.getAltId(unit, ringAtoms);\r\n                    var elementIndex = elements.length;\r\n                    ringElements.push(elementIndex);\r\n                    addRingElement(ringElementKey(residueIndex, unit.id, ringAltId), elementIndex);\r\n                    if (ringAltId)\r\n                        addRingElement(ringElementKey(residueIndex, unit.id, ''), elementIndex);\r\n                    elements.push({\r\n                        geometry: { center: center, normal: normal, direction: direction },\r\n                        component: saccharideComp,\r\n                        ringIndex: sugarRings[j],\r\n                        altId: ringAltId,\r\n                        unit: unit,\r\n                        residueIndex: residueIndex\r\n                    });\r\n                }\r\n                // add carbohydrate links induced by intra-residue bonds\r\n                // (e.g. for structures from the PDB archive __before__ carbohydrate remediation)\r\n                var ringCombinations = combinations(fillSerial(new Array(sugarRings.length)), 2);\r\n                for (var j = 0, jl = ringCombinations.length; j < jl; ++j) {\r\n                    var rc = ringCombinations[j];\r\n                    var r0 = rings.all[sugarRings[rc[0]]], r1 = rings.all[sugarRings[rc[1]]];\r\n                    // 1,6 glycosidic links are distance 3 and 1,4 glycosidic links are distance 2\r\n                    if (IntAdjacencyGraph.areVertexSetsConnected(unit.bonds, r0, r1, 3)) {\r\n                        var re0 = ringElements[rc[0]];\r\n                        var re1 = ringElements[rc[1]];\r\n                        if (elements[re0].altId === elements[re1].altId) {\r\n                            // TODO handle better, for now fix both directions as it is unclear where the C1 atom is\r\n                            //      would need to know the path connecting the two rings\r\n                            fixLinkDirection(re0, re1);\r\n                            fixLinkDirection(re1, re0);\r\n                            links.push({ carbohydrateIndexA: re0, carbohydrateIndexB: re1 });\r\n                            links.push({ carbohydrateIndexA: re1, carbohydrateIndexB: re0 });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function getRingElementIndices(unit, index) {\r\n        return elementsWithRingMap.get(ringElementKey(unit.getResidueIndex(index), unit.id, getAltId(unit, index))) || [];\r\n    }\r\n    // add carbohydrate links induced by intra-unit bonds\r\n    // (e.g. for structures from the PDB archive __after__ carbohydrate remediation)\r\n    for (var i = 0, il = elements.length; i < il; ++i) {\r\n        var cA = elements[i];\r\n        var unit = cA.unit;\r\n        for (var j = i + 1; j < il; ++j) {\r\n            var cB = elements[j];\r\n            if (unit !== cB.unit || cA.residueIndex === cB.residueIndex)\r\n                continue;\r\n            var rA = unit.rings.all[cA.ringIndex];\r\n            var rB = unit.rings.all[cB.ringIndex];\r\n            if (IntAdjacencyGraph.areVertexSetsConnected(unit.bonds, rA, rB, 3)) {\r\n                // TODO handle better, for now fix both directions as it is unclear where the C1 atom is\r\n                //      would need to know the path connecting the two rings\r\n                fixLinkDirection(i, j);\r\n                fixLinkDirection(j, i);\r\n                links.push({ carbohydrateIndexA: i, carbohydrateIndexB: j });\r\n                links.push({ carbohydrateIndexA: j, carbohydrateIndexB: i });\r\n            }\r\n        }\r\n    }\r\n    // get carbohydrate links induced by inter-unit bonds, that is\r\n    // inter monosaccharide links for structures from the\r\n    // PDB archive __before__ carbohydrate remediation\r\n    // plus terminal links for __before__ and __after__\r\n    for (var i = 0, il = structure.units.length; i < il; ++i) {\r\n        var unit = structure.units[i];\r\n        if (!Unit.isAtomic(unit))\r\n            continue;\r\n        structure.interUnitBonds.getConnectedUnits(unit.id).forEach(function (pairBonds) {\r\n            pairBonds.connectedIndices.forEach(function (indexA) {\r\n                pairBonds.getEdges(indexA).forEach(function (_a) {\r\n                    var props = _a.props, indexB = _a.indexB;\r\n                    if (!BondType.isCovalent(props.flag))\r\n                        return;\r\n                    var unitA = structure.unitMap.get(pairBonds.unitA);\r\n                    var unitB = structure.unitMap.get(pairBonds.unitB);\r\n                    var ringElementIndicesA = getRingElementIndices(unitA, indexA);\r\n                    var ringElementIndicesB = getRingElementIndices(unitB, indexB);\r\n                    if (ringElementIndicesA.length > 0 && ringElementIndicesB.length > 0) {\r\n                        var lA = ringElementIndicesA.length;\r\n                        var lB = ringElementIndicesB.length;\r\n                        for (var j = 0, jl = Math.max(lA, lB); j < jl; ++j) {\r\n                            var ringElementIndexA = ringElementIndicesA[Math.min(j, lA - 1)];\r\n                            var ringElementIndexB = ringElementIndicesB[Math.min(j, lB - 1)];\r\n                            var atomIdA = getAtomId(unitA, indexA);\r\n                            if (atomIdA.startsWith('O1') || atomIdA.startsWith('C1')) {\r\n                                fixLinkDirection(ringElementIndexA, ringElementIndexB);\r\n                            }\r\n                            links.push({\r\n                                carbohydrateIndexA: ringElementIndexA,\r\n                                carbohydrateIndexB: ringElementIndexB\r\n                            });\r\n                        }\r\n                    }\r\n                    else if (ringElementIndicesB.length === 0) {\r\n                        for (var _i = 0, ringElementIndicesA_1 = ringElementIndicesA; _i < ringElementIndicesA_1.length; _i++) {\r\n                            var ringElementIndexA = ringElementIndicesA_1[_i];\r\n                            var atomIdA = getAtomId(unitA, indexA);\r\n                            if (atomIdA.startsWith('O1') || atomIdA.startsWith('C1')) {\r\n                                fixTerminalLinkDirection(ringElementIndexA, indexB, unitB);\r\n                            }\r\n                            terminalLinks.push({\r\n                                carbohydrateIndex: ringElementIndexA,\r\n                                elementIndex: indexB,\r\n                                elementUnit: unitB,\r\n                                fromCarbohydrate: true\r\n                            });\r\n                        }\r\n                    }\r\n                    else if (ringElementIndicesA.length === 0) {\r\n                        for (var _b = 0, ringElementIndicesB_1 = ringElementIndicesB; _b < ringElementIndicesB_1.length; _b++) {\r\n                            var ringElementIndexB = ringElementIndicesB_1[_b];\r\n                            terminalLinks.push({\r\n                                carbohydrateIndex: ringElementIndexB,\r\n                                elementIndex: indexA,\r\n                                elementUnit: unitA,\r\n                                fromCarbohydrate: false\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return __assign({ links: links, terminalLinks: terminalLinks, elements: elements, partialElements: partialElements }, buildLookups(elements, links, terminalLinks));\r\n}\r\nfunction buildLookups(elements, links, terminalLinks) {\r\n    function key(unit, element) {\r\n        return cantorPairing(unit.id, element);\r\n    }\r\n    function getIndices(map, unit, index) {\r\n        var indices = [];\r\n        var il = map.get(key(unit, index));\r\n        if (il !== undefined) {\r\n            for (var _i = 0, il_1 = il; _i < il_1.length; _i++) {\r\n                var i = il_1[_i];\r\n                arraySetAdd(indices, i);\r\n            }\r\n        }\r\n        return indices;\r\n    }\r\n    // elements\r\n    var elementsMap = new Map();\r\n    for (var i = 0, il = elements.length; i < il; ++i) {\r\n        var _a = elements[i], unit = _a.unit, ringIndex = _a.ringIndex;\r\n        var ring = unit.rings.all[ringIndex];\r\n        for (var j = 0, jl = ring.length; j < jl; ++j) {\r\n            var k = key(unit, unit.elements[ring[j]]);\r\n            var e = elementsMap.get(k);\r\n            if (e === undefined)\r\n                elementsMap.set(k, [i]);\r\n            else\r\n                e.push(i);\r\n        }\r\n    }\r\n    function getElementIndices(unit, index) {\r\n        return getIndices(elementsMap, unit, index);\r\n    }\r\n    // links\r\n    var linksMap = new Map();\r\n    for (var i = 0, il = links.length; i < il; ++i) {\r\n        var l = links[i];\r\n        var _b = elements[l.carbohydrateIndexA], unit = _b.unit, ringIndex = _b.ringIndex;\r\n        var ring = unit.rings.all[ringIndex];\r\n        for (var j = 0, jl = ring.length; j < jl; ++j) {\r\n            var k = key(unit, unit.elements[ring[j]]);\r\n            var e = linksMap.get(k);\r\n            if (e === undefined)\r\n                linksMap.set(k, [i]);\r\n            else\r\n                e.push(i);\r\n        }\r\n    }\r\n    function getLinkIndices(unit, index) {\r\n        return getIndices(linksMap, unit, index);\r\n    }\r\n    // terminal links\r\n    var terminalLinksMap = new Map();\r\n    for (var i = 0, il = terminalLinks.length; i < il; ++i) {\r\n        var _c = terminalLinks[i], fromCarbohydrate = _c.fromCarbohydrate, carbohydrateIndex = _c.carbohydrateIndex, elementUnit = _c.elementUnit, elementIndex = _c.elementIndex;\r\n        if (fromCarbohydrate) {\r\n            var _d = elements[carbohydrateIndex], unit = _d.unit, ringIndex = _d.ringIndex;\r\n            var ring = unit.rings.all[ringIndex];\r\n            for (var j = 0, jl = ring.length; j < jl; ++j) {\r\n                var k = key(unit, unit.elements[ring[j]]);\r\n                var e = terminalLinksMap.get(k);\r\n                if (e === undefined)\r\n                    terminalLinksMap.set(k, [i]);\r\n                else\r\n                    e.push(i);\r\n            }\r\n        }\r\n        else {\r\n            var k = key(elementUnit, elementUnit.elements[elementIndex]);\r\n            var e = terminalLinksMap.get(k);\r\n            if (e === undefined)\r\n                terminalLinksMap.set(k, [i]);\r\n            else\r\n                e.push(i);\r\n        }\r\n    }\r\n    function getTerminalLinkIndices(unit, index) {\r\n        return getIndices(terminalLinksMap, unit, index);\r\n    }\r\n    return { getElementIndices: getElementIndices, getLinkIndices: getLinkIndices, getTerminalLinkIndices: getTerminalLinkIndices };\r\n}\r\n//# sourceMappingURL=compute.js.map"]},"metadata":{},"sourceType":"module"}