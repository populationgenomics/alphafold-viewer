{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../mol-data/db';\nimport { Task } from '../../mol-task';\nimport { createModels } from './basic/parser';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\nimport { IndexPairBonds } from './property/bonds/index-pair';\nexport function getMolModels(mol, format, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var atoms, bonds, MOL, A, type_symbol, seq_id, atom_site, entityBuilder, componentBuilder, basics, models, indexA, indexB, order, pairBonds;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          atoms = mol.atoms, bonds = mol.bonds;\n          MOL = Column.ofConst('MOL', mol.atoms.count, Column.Schema.str);\n          A = Column.ofConst('A', mol.atoms.count, Column.Schema.str);\n          type_symbol = Column.asArrayColumn(atoms.type_symbol);\n          seq_id = Column.ofConst(1, atoms.count, Column.Schema.int);\n          atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n            auth_asym_id: A,\n            auth_atom_id: type_symbol,\n            auth_comp_id: MOL,\n            auth_seq_id: seq_id,\n            Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\n            Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\n            Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\n            id: Column.range(0, atoms.count - 1),\n            label_asym_id: A,\n            label_atom_id: type_symbol,\n            label_comp_id: MOL,\n            label_seq_id: seq_id,\n            label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\n            occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\n            type_symbol: type_symbol,\n            pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int)\n          }, atoms.count);\n          entityBuilder = new EntityBuilder();\n          entityBuilder.setNames([['MOL', 'Unknown Entity']]);\n          entityBuilder.getEntityId('MOL', 0\n          /* Unknown */\n          , 'A');\n          componentBuilder = new ComponentBuilder(seq_id, type_symbol);\n          componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\n          componentBuilder.add('MOL', 0);\n          basics = createBasic({\n            entity: entityBuilder.getEntityTable(),\n            chem_comp: componentBuilder.getChemCompTable(),\n            atom_site: atom_site\n          });\n          return [4\n          /*yield*/\n          , createModels(basics, format !== null && format !== void 0 ? format : MolFormat.create(mol), ctx)];\n\n        case 1:\n          models = _a.sent();\n\n          if (models.frameCount > 0) {\n            indexA = Column.ofIntArray(Column.mapToArray(bonds.atomIdxA, function (x) {\n              return x - 1;\n            }, Int32Array));\n            indexB = Column.ofIntArray(Column.mapToArray(bonds.atomIdxB, function (x) {\n              return x - 1;\n            }, Int32Array));\n            order = Column.asArrayColumn(bonds.order, Int32Array);\n            pairBonds = IndexPairBonds.fromData({\n              pairs: {\n                indexA: indexA,\n                indexB: indexB,\n                order: order\n              },\n              count: atoms.count\n            });\n            IndexPairBonds.Provider.set(models.representative, pairBonds);\n          }\n\n          return [2\n          /*return*/\n          , models];\n      }\n    });\n  });\n} //\n\nexport { MolFormat };\nvar MolFormat;\n\n(function (MolFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'mol';\n  }\n\n  MolFormat.is = is;\n\n  function create(mol) {\n    return {\n      kind: 'mol',\n      name: mol.title,\n      data: mol\n    };\n  }\n\n  MolFormat.create = create;\n})(MolFormat || (MolFormat = {}));\n\nexport function trajectoryFromMol(mol) {\n  return Task.create('Parse MOL', function (ctx) {\n    return getMolModels(mol, void 0, ctx);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/mol.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { Task } from '../../mol-task';\r\nimport { createModels } from './basic/parser';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nimport { IndexPairBonds } from './property/bonds/index-pair';\r\nexport function getMolModels(mol, format, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var atoms, bonds, MOL, A, type_symbol, seq_id, atom_site, entityBuilder, componentBuilder, basics, models, indexA, indexB, order, pairBonds;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    atoms = mol.atoms, bonds = mol.bonds;\r\n                    MOL = Column.ofConst('MOL', mol.atoms.count, Column.Schema.str);\r\n                    A = Column.ofConst('A', mol.atoms.count, Column.Schema.str);\r\n                    type_symbol = Column.asArrayColumn(atoms.type_symbol);\r\n                    seq_id = Column.ofConst(1, atoms.count, Column.Schema.int);\r\n                    atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n                        auth_asym_id: A,\r\n                        auth_atom_id: type_symbol,\r\n                        auth_comp_id: MOL,\r\n                        auth_seq_id: seq_id,\r\n                        Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\r\n                        Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\r\n                        Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\r\n                        id: Column.range(0, atoms.count - 1),\r\n                        label_asym_id: A,\r\n                        label_atom_id: type_symbol,\r\n                        label_comp_id: MOL,\r\n                        label_seq_id: seq_id,\r\n                        label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\r\n                        occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\r\n                        type_symbol: type_symbol,\r\n                        pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int),\r\n                    }, atoms.count);\r\n                    entityBuilder = new EntityBuilder();\r\n                    entityBuilder.setNames([['MOL', 'Unknown Entity']]);\r\n                    entityBuilder.getEntityId('MOL', 0 /* Unknown */, 'A');\r\n                    componentBuilder = new ComponentBuilder(seq_id, type_symbol);\r\n                    componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\r\n                    componentBuilder.add('MOL', 0);\r\n                    basics = createBasic({\r\n                        entity: entityBuilder.getEntityTable(),\r\n                        chem_comp: componentBuilder.getChemCompTable(),\r\n                        atom_site: atom_site\r\n                    });\r\n                    return [4 /*yield*/, createModels(basics, format !== null && format !== void 0 ? format : MolFormat.create(mol), ctx)];\r\n                case 1:\r\n                    models = _a.sent();\r\n                    if (models.frameCount > 0) {\r\n                        indexA = Column.ofIntArray(Column.mapToArray(bonds.atomIdxA, function (x) { return x - 1; }, Int32Array));\r\n                        indexB = Column.ofIntArray(Column.mapToArray(bonds.atomIdxB, function (x) { return x - 1; }, Int32Array));\r\n                        order = Column.asArrayColumn(bonds.order, Int32Array);\r\n                        pairBonds = IndexPairBonds.fromData({ pairs: { indexA: indexA, indexB: indexB, order: order }, count: atoms.count });\r\n                        IndexPairBonds.Provider.set(models.representative, pairBonds);\r\n                    }\r\n                    return [2 /*return*/, models];\r\n            }\r\n        });\r\n    });\r\n}\r\n//\r\nexport { MolFormat };\r\nvar MolFormat;\r\n(function (MolFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'mol';\r\n    }\r\n    MolFormat.is = is;\r\n    function create(mol) {\r\n        return { kind: 'mol', name: mol.title, data: mol };\r\n    }\r\n    MolFormat.create = create;\r\n})(MolFormat || (MolFormat = {}));\r\nexport function trajectoryFromMol(mol) {\r\n    return Task.create('Parse MOL', function (ctx) { return getMolModels(mol, void 0, ctx); });\r\n}\r\n//# sourceMappingURL=mol.js.map"]},"metadata":{},"sourceType":"module"}