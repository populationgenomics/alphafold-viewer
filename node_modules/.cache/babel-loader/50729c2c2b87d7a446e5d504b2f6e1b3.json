{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { IntMap, SortedArray } from '../../../../mol-data/int';\nimport { sortArray } from '../../../../mol-data/util';\nimport { StructureSymmetry } from '../symmetry';\nimport { Structure } from '../structure';\n\nvar StructureSubsetBuilder =\n/** @class */\nfunction () {\n  function StructureSubsetBuilder(parent, isSorted) {\n    this.parent = parent;\n    this.isSorted = isSorted;\n    this.ids = [];\n    this.unitMap = IntMap.Mutable();\n    this.parentId = -1;\n    this.currentUnit = [];\n    this.elementCount = 0;\n  }\n\n  StructureSubsetBuilder.prototype.addToUnit = function (parentId, e) {\n    var unit = this.unitMap.get(parentId);\n\n    if (!!unit) {\n      unit[unit.length] = e;\n    } else {\n      this.unitMap.set(parentId, [e]);\n      this.ids[this.ids.length] = parentId;\n    }\n\n    this.elementCount++;\n  };\n\n  StructureSubsetBuilder.prototype.beginUnit = function (parentId) {\n    this.parentId = parentId;\n    this.currentUnit = this.currentUnit.length > 0 ? [] : this.currentUnit;\n  };\n\n  StructureSubsetBuilder.prototype.addElement = function (e) {\n    this.currentUnit[this.currentUnit.length] = e;\n    this.elementCount++;\n  };\n\n  StructureSubsetBuilder.prototype.addElementRange = function (elements, start, end) {\n    for (var i = start; i < end; i++) {\n      this.currentUnit[this.currentUnit.length] = elements[i];\n      this.elementCount++;\n    }\n  };\n\n  StructureSubsetBuilder.prototype.commitUnit = function () {\n    if (this.currentUnit.length === 0) return;\n    this.ids[this.ids.length] = this.parentId;\n    this.unitMap.set(this.parentId, this.currentUnit);\n    this.parentId = -1;\n  };\n\n  StructureSubsetBuilder.prototype.setUnit = function (parentId, elements) {\n    this.ids[this.ids.length] = parentId;\n    this.unitMap.set(parentId, elements);\n    this.elementCount += elements.length;\n  };\n\n  StructureSubsetBuilder.prototype._getStructure = function (deduplicateElements) {\n    if (this.isEmpty) return Structure.Empty;\n    var newUnits = [];\n    sortArray(this.ids);\n    var symmGroups = StructureSymmetry.UnitEquivalenceBuilder();\n\n    for (var i = 0, _i = this.ids.length; i < _i; i++) {\n      var id = this.ids[i];\n      var parent_1 = this.parent.unitMap.get(id);\n      var unit = this.unitMap.get(id);\n      var sorted = false;\n\n      if (deduplicateElements) {\n        if (!this.isSorted) sortArray(unit);\n        unit = SortedArray.deduplicate(SortedArray.ofSortedArray(this.currentUnit));\n        sorted = true;\n      }\n\n      var l = unit.length; // if the length is the same, just copy the old unit.\n\n      if (unit.length === parent_1.elements.length) {\n        newUnits[newUnits.length] = parent_1;\n        symmGroups.add(parent_1.id, parent_1);\n        continue;\n      }\n\n      if (!this.isSorted && !sorted && l > 1) sortArray(unit);\n      var child = parent_1.getChild(SortedArray.ofSortedArray(unit));\n      var pivot = symmGroups.add(child.id, child);\n      if (child !== pivot) child = pivot.applyOperator(child.id, child.conformation.operator, true);\n      newUnits[newUnits.length] = child;\n    }\n\n    return Structure.create(newUnits, {\n      parent: this.parent\n    });\n  };\n\n  StructureSubsetBuilder.prototype.getStructure = function () {\n    return this._getStructure(false);\n  };\n\n  StructureSubsetBuilder.prototype.getStructureDeduplicate = function () {\n    return this._getStructure(true);\n  };\n\n  StructureSubsetBuilder.prototype.setSingletonLocation = function (location) {\n    var id = this.ids[0];\n    location.unit = this.parent.unitMap.get(id);\n    location.element = this.unitMap.get(id)[0];\n  };\n\n  Object.defineProperty(StructureSubsetBuilder.prototype, \"isEmpty\", {\n    get: function () {\n      return this.elementCount === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return StructureSubsetBuilder;\n}();\n\nexport { StructureSubsetBuilder };","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/util/subset-builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { IntMap, SortedArray } from '../../../../mol-data/int';\r\nimport { sortArray } from '../../../../mol-data/util';\r\nimport { StructureSymmetry } from '../symmetry';\r\nimport { Structure } from '../structure';\r\nvar StructureSubsetBuilder = /** @class */ (function () {\r\n    function StructureSubsetBuilder(parent, isSorted) {\r\n        this.parent = parent;\r\n        this.isSorted = isSorted;\r\n        this.ids = [];\r\n        this.unitMap = IntMap.Mutable();\r\n        this.parentId = -1;\r\n        this.currentUnit = [];\r\n        this.elementCount = 0;\r\n    }\r\n    StructureSubsetBuilder.prototype.addToUnit = function (parentId, e) {\r\n        var unit = this.unitMap.get(parentId);\r\n        if (!!unit) {\r\n            unit[unit.length] = e;\r\n        }\r\n        else {\r\n            this.unitMap.set(parentId, [e]);\r\n            this.ids[this.ids.length] = parentId;\r\n        }\r\n        this.elementCount++;\r\n    };\r\n    StructureSubsetBuilder.prototype.beginUnit = function (parentId) {\r\n        this.parentId = parentId;\r\n        this.currentUnit = this.currentUnit.length > 0 ? [] : this.currentUnit;\r\n    };\r\n    StructureSubsetBuilder.prototype.addElement = function (e) {\r\n        this.currentUnit[this.currentUnit.length] = e;\r\n        this.elementCount++;\r\n    };\r\n    StructureSubsetBuilder.prototype.addElementRange = function (elements, start, end) {\r\n        for (var i = start; i < end; i++) {\r\n            this.currentUnit[this.currentUnit.length] = elements[i];\r\n            this.elementCount++;\r\n        }\r\n    };\r\n    StructureSubsetBuilder.prototype.commitUnit = function () {\r\n        if (this.currentUnit.length === 0)\r\n            return;\r\n        this.ids[this.ids.length] = this.parentId;\r\n        this.unitMap.set(this.parentId, this.currentUnit);\r\n        this.parentId = -1;\r\n    };\r\n    StructureSubsetBuilder.prototype.setUnit = function (parentId, elements) {\r\n        this.ids[this.ids.length] = parentId;\r\n        this.unitMap.set(parentId, elements);\r\n        this.elementCount += elements.length;\r\n    };\r\n    StructureSubsetBuilder.prototype._getStructure = function (deduplicateElements) {\r\n        if (this.isEmpty)\r\n            return Structure.Empty;\r\n        var newUnits = [];\r\n        sortArray(this.ids);\r\n        var symmGroups = StructureSymmetry.UnitEquivalenceBuilder();\r\n        for (var i = 0, _i = this.ids.length; i < _i; i++) {\r\n            var id = this.ids[i];\r\n            var parent_1 = this.parent.unitMap.get(id);\r\n            var unit = this.unitMap.get(id);\r\n            var sorted = false;\r\n            if (deduplicateElements) {\r\n                if (!this.isSorted)\r\n                    sortArray(unit);\r\n                unit = SortedArray.deduplicate(SortedArray.ofSortedArray(this.currentUnit));\r\n                sorted = true;\r\n            }\r\n            var l = unit.length;\r\n            // if the length is the same, just copy the old unit.\r\n            if (unit.length === parent_1.elements.length) {\r\n                newUnits[newUnits.length] = parent_1;\r\n                symmGroups.add(parent_1.id, parent_1);\r\n                continue;\r\n            }\r\n            if (!this.isSorted && !sorted && l > 1)\r\n                sortArray(unit);\r\n            var child = parent_1.getChild(SortedArray.ofSortedArray(unit));\r\n            var pivot = symmGroups.add(child.id, child);\r\n            if (child !== pivot)\r\n                child = pivot.applyOperator(child.id, child.conformation.operator, true);\r\n            newUnits[newUnits.length] = child;\r\n        }\r\n        return Structure.create(newUnits, { parent: this.parent });\r\n    };\r\n    StructureSubsetBuilder.prototype.getStructure = function () {\r\n        return this._getStructure(false);\r\n    };\r\n    StructureSubsetBuilder.prototype.getStructureDeduplicate = function () {\r\n        return this._getStructure(true);\r\n    };\r\n    StructureSubsetBuilder.prototype.setSingletonLocation = function (location) {\r\n        var id = this.ids[0];\r\n        location.unit = this.parent.unitMap.get(id);\r\n        location.element = this.unitMap.get(id)[0];\r\n    };\r\n    Object.defineProperty(StructureSubsetBuilder.prototype, \"isEmpty\", {\r\n        get: function () {\r\n            return this.elementCount === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return StructureSubsetBuilder;\r\n}());\r\nexport { StructureSubsetBuilder };\r\n//# sourceMappingURL=subset-builder.js.map"]},"metadata":{},"sourceType":"module"}