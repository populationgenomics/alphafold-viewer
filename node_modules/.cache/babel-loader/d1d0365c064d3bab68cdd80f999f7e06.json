{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n *\r\n * This code has been modified from https://github.com/mrdoob/three.js/,\r\n * copyright (c) 2010-2018 three.js authors. MIT License\r\n */\nimport { __assign } from \"tslib\";\nimport { Quat, Vec2, Vec3, EPSILON } from '../../mol-math/linear-algebra';\nimport { Viewport } from '../camera/util';\nimport { ButtonsType, ModifiersKeys } from '../../mol-util/input/input-observer';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { absMax } from '../../mol-math/misc';\nimport { Binding } from '../../mol-util/binding';\nvar B = ButtonsType;\nvar M = ModifiersKeys;\nvar Trigger = Binding.Trigger;\nexport var DefaultTrackballBindings = {\n  dragRotate: Binding([Trigger(1\n  /* Primary */\n  , M.create())], 'Rotate', 'Drag using ${triggers}'),\n  dragRotateZ: Binding([Trigger(1\n  /* Primary */\n  , M.create({\n    shift: true\n  }))], 'Rotate around z-axis', 'Drag using ${triggers}'),\n  dragPan: Binding([Trigger(2\n  /* Secondary */\n  , M.create()), Trigger(1\n  /* Primary */\n  , M.create({\n    control: true\n  }))], 'Pan', 'Drag using ${triggers}'),\n  dragZoom: Binding.Empty,\n  dragFocus: Binding([Trigger(8\n  /* Forth */\n  , M.create())], 'Focus', 'Drag using ${triggers}'),\n  dragFocusZoom: Binding([Trigger(4\n  /* Auxilary */\n  , M.create())], 'Focus and zoom', 'Drag using ${triggers}'),\n  scrollZoom: Binding([Trigger(4\n  /* Auxilary */\n  , M.create())], 'Zoom', 'Scroll using ${triggers}'),\n  scrollFocus: Binding([Trigger(4\n  /* Auxilary */\n  , M.create({\n    shift: true\n  }))], 'Clip', 'Scroll using ${triggers}'),\n  scrollFocusZoom: Binding.Empty\n};\nexport var TrackballControlsParams = {\n  noScroll: PD.Boolean(true, {\n    isHidden: true\n  }),\n  rotateSpeed: PD.Numeric(5.0, {\n    min: 1,\n    max: 10,\n    step: 1\n  }),\n  zoomSpeed: PD.Numeric(7.0, {\n    min: 1,\n    max: 15,\n    step: 1\n  }),\n  panSpeed: PD.Numeric(1.0, {\n    min: 0.1,\n    max: 5,\n    step: 0.1\n  }),\n  spin: PD.Boolean(false, {\n    description: 'Spin the 3D scene around the x-axis in view space'\n  }),\n  spinSpeed: PD.Numeric(1, {\n    min: -20,\n    max: 20,\n    step: 1\n  }),\n  staticMoving: PD.Boolean(true, {\n    isHidden: true\n  }),\n  dynamicDampingFactor: PD.Numeric(0.2, {}, {\n    isHidden: true\n  }),\n  minDistance: PD.Numeric(0.01, {}, {\n    isHidden: true\n  }),\n  maxDistance: PD.Numeric(1e150, {}, {\n    isHidden: true\n  }),\n  gestureScaleFactor: PD.Numeric(1, {}, {\n    isHidden: true\n  }),\n  maxWheelDelta: PD.Numeric(0.02, {}, {\n    isHidden: true\n  }),\n  bindings: PD.Value(DefaultTrackballBindings, {\n    isHidden: true\n  }),\n\n  /**\r\n   * minDistance = minDistanceFactor * boundingSphere.radius + minDistancePadding\r\n   * maxDistance = max(maxDistanceFactor * boundingSphere.radius, maxDistanceMin)\r\n   */\n  autoAdjustMinMaxDistance: PD.MappedStatic('on', {\n    off: PD.EmptyGroup(),\n    on: PD.Group({\n      minDistanceFactor: PD.Numeric(0),\n      minDistancePadding: PD.Numeric(5),\n      maxDistanceFactor: PD.Numeric(10),\n      maxDistanceMin: PD.Numeric(20)\n    })\n  }, {\n    isHidden: true\n  })\n};\nexport { TrackballControls };\nvar TrackballControls;\n\n(function (TrackballControls) {\n  function create(input, camera, props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    var p = __assign(__assign({}, PD.getDefaultValues(TrackballControlsParams)), props);\n\n    var viewport = Viewport.clone(camera.viewport);\n    var disposed = false;\n    var dragSub = input.drag.subscribe(onDrag);\n    var interactionEndSub = input.interactionEnd.subscribe(onInteractionEnd);\n    var wheelSub = input.wheel.subscribe(onWheel);\n    var pinchSub = input.pinch.subscribe(onPinch);\n    var gestureSub = input.gesture.subscribe(onGesture);\n    var _isInteracting = false; // For internal use\n\n    var lastPosition = Vec3();\n\n    var _eye = Vec3();\n\n    var _rotPrev = Vec2();\n\n    var _rotCurr = Vec2();\n\n    var _rotLastAxis = Vec3();\n\n    var _rotLastAngle = 0;\n\n    var _zRotPrev = Vec2();\n\n    var _zRotCurr = Vec2();\n\n    var _zRotLastAngle = 0;\n\n    var _zoomStart = Vec2();\n\n    var _zoomEnd = Vec2();\n\n    var _focusStart = Vec2();\n\n    var _focusEnd = Vec2();\n\n    var _panStart = Vec2();\n\n    var _panEnd = Vec2(); // Initial values for reseting\n\n\n    var target0 = Vec3.clone(camera.target);\n    var position0 = Vec3.clone(camera.position);\n    var up0 = Vec3.clone(camera.up);\n    var mouseOnScreenVec2 = Vec2();\n\n    function getMouseOnScreen(pageX, pageY) {\n      return Vec2.set(mouseOnScreenVec2, (pageX - viewport.x) / viewport.width, (pageY - viewport.y) / viewport.height);\n    }\n\n    var mouseOnCircleVec2 = Vec2();\n\n    function getMouseOnCircle(pageX, pageY) {\n      return Vec2.set(mouseOnCircleVec2, (pageX - viewport.width * 0.5 - viewport.x) / (viewport.width * 0.5), (viewport.height + 2 * (viewport.y - pageY)) / viewport.width // screen.width intentional\n      );\n    }\n\n    var rotAxis = Vec3();\n    var rotQuat = Quat();\n    var rotEyeDir = Vec3();\n    var rotObjUpDir = Vec3();\n    var rotObjSideDir = Vec3();\n    var rotMoveDir = Vec3();\n\n    function rotateCamera() {\n      var dx = _rotCurr[0] - _rotPrev[0];\n      var dy = _rotCurr[1] - _rotPrev[1];\n      Vec3.set(rotMoveDir, dx, dy, 0);\n      var aspectRatio = input.width / input.height;\n      var angle = Vec3.magnitude(rotMoveDir) * p.rotateSpeed * input.pixelRatio * aspectRatio;\n\n      if (angle) {\n        Vec3.sub(_eye, camera.position, camera.target);\n        Vec3.normalize(rotEyeDir, _eye);\n        Vec3.normalize(rotObjUpDir, camera.up);\n        Vec3.normalize(rotObjSideDir, Vec3.cross(rotObjSideDir, rotObjUpDir, rotEyeDir));\n        Vec3.setMagnitude(rotObjUpDir, rotObjUpDir, dy);\n        Vec3.setMagnitude(rotObjSideDir, rotObjSideDir, dx);\n        Vec3.add(rotMoveDir, rotObjUpDir, rotObjSideDir);\n        Vec3.normalize(rotAxis, Vec3.cross(rotAxis, rotMoveDir, _eye));\n        Quat.setAxisAngle(rotQuat, rotAxis, angle);\n        Vec3.transformQuat(_eye, _eye, rotQuat);\n        Vec3.transformQuat(camera.up, camera.up, rotQuat);\n        Vec3.copy(_rotLastAxis, rotAxis);\n        _rotLastAngle = angle;\n      } else if (!p.staticMoving && _rotLastAngle) {\n        _rotLastAngle *= Math.sqrt(1.0 - p.dynamicDampingFactor);\n        Vec3.sub(_eye, camera.position, camera.target);\n        Quat.setAxisAngle(rotQuat, _rotLastAxis, _rotLastAngle);\n        Vec3.transformQuat(_eye, _eye, rotQuat);\n        Vec3.transformQuat(camera.up, camera.up, rotQuat);\n      }\n\n      Vec2.copy(_rotPrev, _rotCurr);\n    }\n\n    var zRotQuat = Quat();\n\n    function zRotateCamera() {\n      var dx = _zRotCurr[0] - _zRotPrev[0];\n      var dy = _zRotCurr[1] - _zRotPrev[1];\n      var angle = p.rotateSpeed * (-dx + dy) * -0.05;\n\n      if (angle) {\n        Vec3.sub(_eye, camera.position, camera.target);\n        Quat.setAxisAngle(zRotQuat, _eye, angle);\n        Vec3.transformQuat(camera.up, camera.up, zRotQuat);\n        _zRotLastAngle = angle;\n      } else if (!p.staticMoving && _zRotLastAngle) {\n        _zRotLastAngle *= Math.sqrt(1.0 - p.dynamicDampingFactor);\n        Vec3.sub(_eye, camera.position, camera.target);\n        Quat.setAxisAngle(zRotQuat, _eye, _zRotLastAngle);\n        Vec3.transformQuat(camera.up, camera.up, zRotQuat);\n      }\n\n      Vec2.copy(_zRotPrev, _zRotCurr);\n    }\n\n    function zoomCamera() {\n      var factor = 1.0 + (_zoomEnd[1] - _zoomStart[1]) * p.zoomSpeed;\n\n      if (factor !== 1.0 && factor > 0.0) {\n        Vec3.scale(_eye, _eye, factor);\n      }\n\n      if (p.staticMoving) {\n        Vec2.copy(_zoomStart, _zoomEnd);\n      } else {\n        _zoomStart[1] += (_zoomEnd[1] - _zoomStart[1]) * p.dynamicDampingFactor;\n      }\n    }\n\n    function focusCamera() {\n      var factor = (_focusEnd[1] - _focusStart[1]) * p.zoomSpeed;\n\n      if (factor !== 0.0) {\n        var radius = Math.max(1, camera.state.radius + camera.state.radius * factor);\n        camera.setState({\n          radius: radius\n        });\n      }\n\n      if (p.staticMoving) {\n        Vec2.copy(_focusStart, _focusEnd);\n      } else {\n        _focusStart[1] += (_focusEnd[1] - _focusStart[1]) * p.dynamicDampingFactor;\n      }\n    }\n\n    var panMouseChange = Vec2();\n    var panObjUp = Vec3();\n    var panOffset = Vec3();\n\n    function panCamera() {\n      Vec2.sub(panMouseChange, Vec2.copy(panMouseChange, _panEnd), _panStart);\n\n      if (Vec2.squaredMagnitude(panMouseChange)) {\n        var factor = input.pixelRatio * p.panSpeed;\n        panMouseChange[0] *= 1 / camera.zoom * camera.viewport.width * factor;\n        panMouseChange[1] *= 1 / camera.zoom * camera.viewport.height * factor;\n        Vec3.cross(panOffset, Vec3.copy(panOffset, _eye), camera.up);\n        Vec3.setMagnitude(panOffset, panOffset, panMouseChange[0]);\n        Vec3.setMagnitude(panObjUp, camera.up, panMouseChange[1]);\n        Vec3.add(panOffset, panOffset, panObjUp);\n        Vec3.add(camera.position, camera.position, panOffset);\n        Vec3.add(camera.target, camera.target, panOffset);\n\n        if (p.staticMoving) {\n          Vec2.copy(_panStart, _panEnd);\n        } else {\n          Vec2.sub(panMouseChange, _panEnd, _panStart);\n          Vec2.scale(panMouseChange, panMouseChange, p.dynamicDampingFactor);\n          Vec2.add(_panStart, _panStart, panMouseChange);\n        }\n      }\n    }\n    /**\r\n     * Ensure the distance between object and target is within the min/max distance\r\n     * and not too large compared to `camera.state.radiusMax`\r\n     */\n\n\n    function checkDistances() {\n      var maxDistance = Math.min(Math.max(camera.state.radiusMax * 1000, 0.01), p.maxDistance);\n\n      if (Vec3.squaredMagnitude(_eye) > maxDistance * maxDistance) {\n        Vec3.setMagnitude(_eye, _eye, maxDistance);\n        Vec3.add(camera.position, camera.target, _eye);\n        Vec2.copy(_zoomStart, _zoomEnd);\n        Vec2.copy(_focusStart, _focusEnd);\n      }\n\n      if (Vec3.squaredMagnitude(_eye) < p.minDistance * p.minDistance) {\n        Vec3.setMagnitude(_eye, _eye, p.minDistance);\n        Vec3.add(camera.position, camera.target, _eye);\n        Vec2.copy(_zoomStart, _zoomEnd);\n        Vec2.copy(_focusStart, _focusEnd);\n      }\n    }\n\n    function outsideViewport(x, y) {\n      x *= input.pixelRatio;\n      y *= input.pixelRatio;\n      return x > viewport.x + viewport.width || input.height - y > viewport.y + viewport.height || x < viewport.x || input.height - y < viewport.y;\n    }\n\n    var lastUpdated = -1;\n    /** Update the object's position, direction and up vectors */\n\n    function update(t) {\n      if (lastUpdated === t) return;\n      if (p.spin && lastUpdated > 0) spin(t - lastUpdated);\n      Vec3.sub(_eye, camera.position, camera.target);\n      rotateCamera();\n      zRotateCamera();\n      zoomCamera();\n      focusCamera();\n      panCamera();\n      Vec3.add(camera.position, camera.target, _eye);\n      checkDistances();\n\n      if (Vec3.squaredDistance(lastPosition, camera.position) > EPSILON) {\n        Vec3.copy(lastPosition, camera.position);\n      }\n\n      lastUpdated = t;\n    }\n    /** Reset object's vectors and the target vector to their initial values */\n\n\n    function reset() {\n      Vec3.copy(camera.target, target0);\n      Vec3.copy(camera.position, position0);\n      Vec3.copy(camera.up, up0);\n      Vec3.sub(_eye, camera.position, camera.target);\n      Vec3.copy(lastPosition, camera.position);\n    } // listeners\n\n\n    function onDrag(_a) {\n      var x = _a.x,\n          y = _a.y,\n          pageX = _a.pageX,\n          pageY = _a.pageY,\n          buttons = _a.buttons,\n          modifiers = _a.modifiers,\n          isStart = _a.isStart;\n      var isOutside = outsideViewport(x, y);\n      if (isStart && isOutside) return;\n      if (!isStart && !_isInteracting) return;\n      _isInteracting = true;\n      var dragRotate = Binding.match(p.bindings.dragRotate, buttons, modifiers);\n      var dragRotateZ = Binding.match(p.bindings.dragRotateZ, buttons, modifiers);\n      var dragPan = Binding.match(p.bindings.dragPan, buttons, modifiers);\n      var dragZoom = Binding.match(p.bindings.dragZoom, buttons, modifiers);\n      var dragFocus = Binding.match(p.bindings.dragFocus, buttons, modifiers);\n      var dragFocusZoom = Binding.match(p.bindings.dragFocusZoom, buttons, modifiers);\n      getMouseOnCircle(pageX, pageY);\n      getMouseOnScreen(pageX, pageY);\n\n      if (isStart) {\n        if (dragRotate) {\n          Vec2.copy(_rotCurr, mouseOnCircleVec2);\n          Vec2.copy(_rotPrev, _rotCurr);\n        }\n\n        if (dragRotateZ) {\n          Vec2.copy(_zRotCurr, mouseOnCircleVec2);\n          Vec2.copy(_zRotPrev, _zRotCurr);\n        }\n\n        if (dragZoom || dragFocusZoom) {\n          Vec2.copy(_zoomStart, mouseOnScreenVec2);\n          Vec2.copy(_zoomEnd, _zoomStart);\n        }\n\n        if (dragFocus) {\n          Vec2.copy(_focusStart, mouseOnScreenVec2);\n          Vec2.copy(_focusEnd, _focusStart);\n        }\n\n        if (dragPan) {\n          Vec2.copy(_panStart, mouseOnScreenVec2);\n          Vec2.copy(_panEnd, _panStart);\n        }\n      }\n\n      if (dragRotate) Vec2.copy(_rotCurr, mouseOnCircleVec2);\n      if (dragRotateZ) Vec2.copy(_zRotCurr, mouseOnCircleVec2);\n      if (dragZoom || dragFocusZoom) Vec2.copy(_zoomEnd, mouseOnScreenVec2);\n      if (dragFocus) Vec2.copy(_focusEnd, mouseOnScreenVec2);\n\n      if (dragFocusZoom) {\n        var dist = Vec3.distance(camera.state.position, camera.state.target);\n        camera.setState({\n          radius: dist / 5\n        });\n      }\n\n      if (dragPan) Vec2.copy(_panEnd, mouseOnScreenVec2);\n    }\n\n    function onInteractionEnd() {\n      _isInteracting = false;\n    }\n\n    function onWheel(_a) {\n      var x = _a.x,\n          y = _a.y,\n          spinX = _a.spinX,\n          spinY = _a.spinY,\n          dz = _a.dz,\n          buttons = _a.buttons,\n          modifiers = _a.modifiers;\n      if (outsideViewport(x, y)) return;\n      var delta = absMax(spinX * 0.075, spinY * 0.075, dz * 0.0001);\n      if (delta < -p.maxWheelDelta) delta = -p.maxWheelDelta;else if (delta > p.maxWheelDelta) delta = p.maxWheelDelta;\n\n      if (Binding.match(p.bindings.scrollZoom, buttons, modifiers)) {\n        _zoomEnd[1] += delta;\n      }\n\n      if (Binding.match(p.bindings.scrollFocus, buttons, modifiers)) {\n        _focusEnd[1] += delta;\n      }\n    }\n\n    function onPinch(_a) {\n      var fractionDelta = _a.fractionDelta,\n          buttons = _a.buttons,\n          modifiers = _a.modifiers;\n\n      if (Binding.match(p.bindings.scrollZoom, buttons, modifiers)) {\n        _isInteracting = true;\n        _zoomEnd[1] += p.gestureScaleFactor * fractionDelta;\n      }\n    }\n\n    function onGesture(_a) {\n      var deltaScale = _a.deltaScale;\n      _isInteracting = true;\n      _zoomEnd[1] += p.gestureScaleFactor * deltaScale;\n    }\n\n    function dispose() {\n      if (disposed) return;\n      disposed = true;\n      dragSub.unsubscribe();\n      wheelSub.unsubscribe();\n      pinchSub.unsubscribe();\n      gestureSub.unsubscribe();\n      interactionEndSub.unsubscribe();\n    }\n\n    var _spinSpeed = Vec2.create(0.005, 0);\n\n    function spin(deltaT) {\n      if (p.spinSpeed === 0) return;\n      var frameSpeed = (p.spinSpeed || 0) / 1000;\n      _spinSpeed[0] = 60 * Math.min(Math.abs(deltaT), 1000 / 8) / 1000 * frameSpeed;\n      if (!_isInteracting) Vec2.add(_rotCurr, _rotPrev, _spinSpeed);\n    }\n\n    function start(t) {\n      lastUpdated = -1;\n      update(t);\n    }\n\n    return {\n      viewport: viewport,\n\n      get props() {\n        return p;\n      },\n\n      setProps: function (props) {\n        Object.assign(p, props);\n      },\n      start: start,\n      update: update,\n      reset: reset,\n      dispose: dispose\n    };\n  }\n\n  TrackballControls.create = create;\n})(TrackballControls || (TrackballControls = {}));","map":{"version":3,"sources":["../../../src/mol-canvas3d/controls/trackball.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n *\r\n * This code has been modified from https://github.com/mrdoob/three.js/,\r\n * copyright (c) 2010-2018 three.js authors. MIT License\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Quat, Vec2, Vec3, EPSILON } from '../../mol-math/linear-algebra';\r\nimport { Viewport } from '../camera/util';\r\nimport { ButtonsType, ModifiersKeys } from '../../mol-util/input/input-observer';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { absMax } from '../../mol-math/misc';\r\nimport { Binding } from '../../mol-util/binding';\r\nvar B = ButtonsType;\r\nvar M = ModifiersKeys;\r\nvar Trigger = Binding.Trigger;\r\nexport var DefaultTrackballBindings = {\r\n    dragRotate: Binding([Trigger(1 /* Primary */, M.create())], 'Rotate', 'Drag using ${triggers}'),\r\n    dragRotateZ: Binding([Trigger(1 /* Primary */, M.create({ shift: true }))], 'Rotate around z-axis', 'Drag using ${triggers}'),\r\n    dragPan: Binding([Trigger(2 /* Secondary */, M.create()), Trigger(1 /* Primary */, M.create({ control: true }))], 'Pan', 'Drag using ${triggers}'),\r\n    dragZoom: Binding.Empty,\r\n    dragFocus: Binding([Trigger(8 /* Forth */, M.create())], 'Focus', 'Drag using ${triggers}'),\r\n    dragFocusZoom: Binding([Trigger(4 /* Auxilary */, M.create())], 'Focus and zoom', 'Drag using ${triggers}'),\r\n    scrollZoom: Binding([Trigger(4 /* Auxilary */, M.create())], 'Zoom', 'Scroll using ${triggers}'),\r\n    scrollFocus: Binding([Trigger(4 /* Auxilary */, M.create({ shift: true }))], 'Clip', 'Scroll using ${triggers}'),\r\n    scrollFocusZoom: Binding.Empty,\r\n};\r\nexport var TrackballControlsParams = {\r\n    noScroll: PD.Boolean(true, { isHidden: true }),\r\n    rotateSpeed: PD.Numeric(5.0, { min: 1, max: 10, step: 1 }),\r\n    zoomSpeed: PD.Numeric(7.0, { min: 1, max: 15, step: 1 }),\r\n    panSpeed: PD.Numeric(1.0, { min: 0.1, max: 5, step: 0.1 }),\r\n    spin: PD.Boolean(false, { description: 'Spin the 3D scene around the x-axis in view space' }),\r\n    spinSpeed: PD.Numeric(1, { min: -20, max: 20, step: 1 }),\r\n    staticMoving: PD.Boolean(true, { isHidden: true }),\r\n    dynamicDampingFactor: PD.Numeric(0.2, {}, { isHidden: true }),\r\n    minDistance: PD.Numeric(0.01, {}, { isHidden: true }),\r\n    maxDistance: PD.Numeric(1e150, {}, { isHidden: true }),\r\n    gestureScaleFactor: PD.Numeric(1, {}, { isHidden: true }),\r\n    maxWheelDelta: PD.Numeric(0.02, {}, { isHidden: true }),\r\n    bindings: PD.Value(DefaultTrackballBindings, { isHidden: true }),\r\n    /**\r\n     * minDistance = minDistanceFactor * boundingSphere.radius + minDistancePadding\r\n     * maxDistance = max(maxDistanceFactor * boundingSphere.radius, maxDistanceMin)\r\n     */\r\n    autoAdjustMinMaxDistance: PD.MappedStatic('on', {\r\n        off: PD.EmptyGroup(),\r\n        on: PD.Group({\r\n            minDistanceFactor: PD.Numeric(0),\r\n            minDistancePadding: PD.Numeric(5),\r\n            maxDistanceFactor: PD.Numeric(10),\r\n            maxDistanceMin: PD.Numeric(20)\r\n        })\r\n    }, { isHidden: true })\r\n};\r\nexport { TrackballControls };\r\nvar TrackballControls;\r\n(function (TrackballControls) {\r\n    function create(input, camera, props) {\r\n        if (props === void 0) { props = {}; }\r\n        var p = __assign(__assign({}, PD.getDefaultValues(TrackballControlsParams)), props);\r\n        var viewport = Viewport.clone(camera.viewport);\r\n        var disposed = false;\r\n        var dragSub = input.drag.subscribe(onDrag);\r\n        var interactionEndSub = input.interactionEnd.subscribe(onInteractionEnd);\r\n        var wheelSub = input.wheel.subscribe(onWheel);\r\n        var pinchSub = input.pinch.subscribe(onPinch);\r\n        var gestureSub = input.gesture.subscribe(onGesture);\r\n        var _isInteracting = false;\r\n        // For internal use\r\n        var lastPosition = Vec3();\r\n        var _eye = Vec3();\r\n        var _rotPrev = Vec2();\r\n        var _rotCurr = Vec2();\r\n        var _rotLastAxis = Vec3();\r\n        var _rotLastAngle = 0;\r\n        var _zRotPrev = Vec2();\r\n        var _zRotCurr = Vec2();\r\n        var _zRotLastAngle = 0;\r\n        var _zoomStart = Vec2();\r\n        var _zoomEnd = Vec2();\r\n        var _focusStart = Vec2();\r\n        var _focusEnd = Vec2();\r\n        var _panStart = Vec2();\r\n        var _panEnd = Vec2();\r\n        // Initial values for reseting\r\n        var target0 = Vec3.clone(camera.target);\r\n        var position0 = Vec3.clone(camera.position);\r\n        var up0 = Vec3.clone(camera.up);\r\n        var mouseOnScreenVec2 = Vec2();\r\n        function getMouseOnScreen(pageX, pageY) {\r\n            return Vec2.set(mouseOnScreenVec2, (pageX - viewport.x) / viewport.width, (pageY - viewport.y) / viewport.height);\r\n        }\r\n        var mouseOnCircleVec2 = Vec2();\r\n        function getMouseOnCircle(pageX, pageY) {\r\n            return Vec2.set(mouseOnCircleVec2, (pageX - viewport.width * 0.5 - viewport.x) / (viewport.width * 0.5), (viewport.height + 2 * (viewport.y - pageY)) / viewport.width // screen.width intentional\r\n            );\r\n        }\r\n        var rotAxis = Vec3();\r\n        var rotQuat = Quat();\r\n        var rotEyeDir = Vec3();\r\n        var rotObjUpDir = Vec3();\r\n        var rotObjSideDir = Vec3();\r\n        var rotMoveDir = Vec3();\r\n        function rotateCamera() {\r\n            var dx = _rotCurr[0] - _rotPrev[0];\r\n            var dy = _rotCurr[1] - _rotPrev[1];\r\n            Vec3.set(rotMoveDir, dx, dy, 0);\r\n            var aspectRatio = input.width / input.height;\r\n            var angle = Vec3.magnitude(rotMoveDir) * p.rotateSpeed * input.pixelRatio * aspectRatio;\r\n            if (angle) {\r\n                Vec3.sub(_eye, camera.position, camera.target);\r\n                Vec3.normalize(rotEyeDir, _eye);\r\n                Vec3.normalize(rotObjUpDir, camera.up);\r\n                Vec3.normalize(rotObjSideDir, Vec3.cross(rotObjSideDir, rotObjUpDir, rotEyeDir));\r\n                Vec3.setMagnitude(rotObjUpDir, rotObjUpDir, dy);\r\n                Vec3.setMagnitude(rotObjSideDir, rotObjSideDir, dx);\r\n                Vec3.add(rotMoveDir, rotObjUpDir, rotObjSideDir);\r\n                Vec3.normalize(rotAxis, Vec3.cross(rotAxis, rotMoveDir, _eye));\r\n                Quat.setAxisAngle(rotQuat, rotAxis, angle);\r\n                Vec3.transformQuat(_eye, _eye, rotQuat);\r\n                Vec3.transformQuat(camera.up, camera.up, rotQuat);\r\n                Vec3.copy(_rotLastAxis, rotAxis);\r\n                _rotLastAngle = angle;\r\n            }\r\n            else if (!p.staticMoving && _rotLastAngle) {\r\n                _rotLastAngle *= Math.sqrt(1.0 - p.dynamicDampingFactor);\r\n                Vec3.sub(_eye, camera.position, camera.target);\r\n                Quat.setAxisAngle(rotQuat, _rotLastAxis, _rotLastAngle);\r\n                Vec3.transformQuat(_eye, _eye, rotQuat);\r\n                Vec3.transformQuat(camera.up, camera.up, rotQuat);\r\n            }\r\n            Vec2.copy(_rotPrev, _rotCurr);\r\n        }\r\n        var zRotQuat = Quat();\r\n        function zRotateCamera() {\r\n            var dx = _zRotCurr[0] - _zRotPrev[0];\r\n            var dy = _zRotCurr[1] - _zRotPrev[1];\r\n            var angle = p.rotateSpeed * (-dx + dy) * -0.05;\r\n            if (angle) {\r\n                Vec3.sub(_eye, camera.position, camera.target);\r\n                Quat.setAxisAngle(zRotQuat, _eye, angle);\r\n                Vec3.transformQuat(camera.up, camera.up, zRotQuat);\r\n                _zRotLastAngle = angle;\r\n            }\r\n            else if (!p.staticMoving && _zRotLastAngle) {\r\n                _zRotLastAngle *= Math.sqrt(1.0 - p.dynamicDampingFactor);\r\n                Vec3.sub(_eye, camera.position, camera.target);\r\n                Quat.setAxisAngle(zRotQuat, _eye, _zRotLastAngle);\r\n                Vec3.transformQuat(camera.up, camera.up, zRotQuat);\r\n            }\r\n            Vec2.copy(_zRotPrev, _zRotCurr);\r\n        }\r\n        function zoomCamera() {\r\n            var factor = 1.0 + (_zoomEnd[1] - _zoomStart[1]) * p.zoomSpeed;\r\n            if (factor !== 1.0 && factor > 0.0) {\r\n                Vec3.scale(_eye, _eye, factor);\r\n            }\r\n            if (p.staticMoving) {\r\n                Vec2.copy(_zoomStart, _zoomEnd);\r\n            }\r\n            else {\r\n                _zoomStart[1] += (_zoomEnd[1] - _zoomStart[1]) * p.dynamicDampingFactor;\r\n            }\r\n        }\r\n        function focusCamera() {\r\n            var factor = (_focusEnd[1] - _focusStart[1]) * p.zoomSpeed;\r\n            if (factor !== 0.0) {\r\n                var radius = Math.max(1, camera.state.radius + camera.state.radius * factor);\r\n                camera.setState({ radius: radius });\r\n            }\r\n            if (p.staticMoving) {\r\n                Vec2.copy(_focusStart, _focusEnd);\r\n            }\r\n            else {\r\n                _focusStart[1] += (_focusEnd[1] - _focusStart[1]) * p.dynamicDampingFactor;\r\n            }\r\n        }\r\n        var panMouseChange = Vec2();\r\n        var panObjUp = Vec3();\r\n        var panOffset = Vec3();\r\n        function panCamera() {\r\n            Vec2.sub(panMouseChange, Vec2.copy(panMouseChange, _panEnd), _panStart);\r\n            if (Vec2.squaredMagnitude(panMouseChange)) {\r\n                var factor = input.pixelRatio * p.panSpeed;\r\n                panMouseChange[0] *= (1 / camera.zoom) * camera.viewport.width * factor;\r\n                panMouseChange[1] *= (1 / camera.zoom) * camera.viewport.height * factor;\r\n                Vec3.cross(panOffset, Vec3.copy(panOffset, _eye), camera.up);\r\n                Vec3.setMagnitude(panOffset, panOffset, panMouseChange[0]);\r\n                Vec3.setMagnitude(panObjUp, camera.up, panMouseChange[1]);\r\n                Vec3.add(panOffset, panOffset, panObjUp);\r\n                Vec3.add(camera.position, camera.position, panOffset);\r\n                Vec3.add(camera.target, camera.target, panOffset);\r\n                if (p.staticMoving) {\r\n                    Vec2.copy(_panStart, _panEnd);\r\n                }\r\n                else {\r\n                    Vec2.sub(panMouseChange, _panEnd, _panStart);\r\n                    Vec2.scale(panMouseChange, panMouseChange, p.dynamicDampingFactor);\r\n                    Vec2.add(_panStart, _panStart, panMouseChange);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Ensure the distance between object and target is within the min/max distance\r\n         * and not too large compared to `camera.state.radiusMax`\r\n         */\r\n        function checkDistances() {\r\n            var maxDistance = Math.min(Math.max(camera.state.radiusMax * 1000, 0.01), p.maxDistance);\r\n            if (Vec3.squaredMagnitude(_eye) > maxDistance * maxDistance) {\r\n                Vec3.setMagnitude(_eye, _eye, maxDistance);\r\n                Vec3.add(camera.position, camera.target, _eye);\r\n                Vec2.copy(_zoomStart, _zoomEnd);\r\n                Vec2.copy(_focusStart, _focusEnd);\r\n            }\r\n            if (Vec3.squaredMagnitude(_eye) < p.minDistance * p.minDistance) {\r\n                Vec3.setMagnitude(_eye, _eye, p.minDistance);\r\n                Vec3.add(camera.position, camera.target, _eye);\r\n                Vec2.copy(_zoomStart, _zoomEnd);\r\n                Vec2.copy(_focusStart, _focusEnd);\r\n            }\r\n        }\r\n        function outsideViewport(x, y) {\r\n            x *= input.pixelRatio;\r\n            y *= input.pixelRatio;\r\n            return (x > viewport.x + viewport.width ||\r\n                input.height - y > viewport.y + viewport.height ||\r\n                x < viewport.x ||\r\n                input.height - y < viewport.y);\r\n        }\r\n        var lastUpdated = -1;\r\n        /** Update the object's position, direction and up vectors */\r\n        function update(t) {\r\n            if (lastUpdated === t)\r\n                return;\r\n            if (p.spin && lastUpdated > 0)\r\n                spin(t - lastUpdated);\r\n            Vec3.sub(_eye, camera.position, camera.target);\r\n            rotateCamera();\r\n            zRotateCamera();\r\n            zoomCamera();\r\n            focusCamera();\r\n            panCamera();\r\n            Vec3.add(camera.position, camera.target, _eye);\r\n            checkDistances();\r\n            if (Vec3.squaredDistance(lastPosition, camera.position) > EPSILON) {\r\n                Vec3.copy(lastPosition, camera.position);\r\n            }\r\n            lastUpdated = t;\r\n        }\r\n        /** Reset object's vectors and the target vector to their initial values */\r\n        function reset() {\r\n            Vec3.copy(camera.target, target0);\r\n            Vec3.copy(camera.position, position0);\r\n            Vec3.copy(camera.up, up0);\r\n            Vec3.sub(_eye, camera.position, camera.target);\r\n            Vec3.copy(lastPosition, camera.position);\r\n        }\r\n        // listeners\r\n        function onDrag(_a) {\r\n            var x = _a.x, y = _a.y, pageX = _a.pageX, pageY = _a.pageY, buttons = _a.buttons, modifiers = _a.modifiers, isStart = _a.isStart;\r\n            var isOutside = outsideViewport(x, y);\r\n            if (isStart && isOutside)\r\n                return;\r\n            if (!isStart && !_isInteracting)\r\n                return;\r\n            _isInteracting = true;\r\n            var dragRotate = Binding.match(p.bindings.dragRotate, buttons, modifiers);\r\n            var dragRotateZ = Binding.match(p.bindings.dragRotateZ, buttons, modifiers);\r\n            var dragPan = Binding.match(p.bindings.dragPan, buttons, modifiers);\r\n            var dragZoom = Binding.match(p.bindings.dragZoom, buttons, modifiers);\r\n            var dragFocus = Binding.match(p.bindings.dragFocus, buttons, modifiers);\r\n            var dragFocusZoom = Binding.match(p.bindings.dragFocusZoom, buttons, modifiers);\r\n            getMouseOnCircle(pageX, pageY);\r\n            getMouseOnScreen(pageX, pageY);\r\n            if (isStart) {\r\n                if (dragRotate) {\r\n                    Vec2.copy(_rotCurr, mouseOnCircleVec2);\r\n                    Vec2.copy(_rotPrev, _rotCurr);\r\n                }\r\n                if (dragRotateZ) {\r\n                    Vec2.copy(_zRotCurr, mouseOnCircleVec2);\r\n                    Vec2.copy(_zRotPrev, _zRotCurr);\r\n                }\r\n                if (dragZoom || dragFocusZoom) {\r\n                    Vec2.copy(_zoomStart, mouseOnScreenVec2);\r\n                    Vec2.copy(_zoomEnd, _zoomStart);\r\n                }\r\n                if (dragFocus) {\r\n                    Vec2.copy(_focusStart, mouseOnScreenVec2);\r\n                    Vec2.copy(_focusEnd, _focusStart);\r\n                }\r\n                if (dragPan) {\r\n                    Vec2.copy(_panStart, mouseOnScreenVec2);\r\n                    Vec2.copy(_panEnd, _panStart);\r\n                }\r\n            }\r\n            if (dragRotate)\r\n                Vec2.copy(_rotCurr, mouseOnCircleVec2);\r\n            if (dragRotateZ)\r\n                Vec2.copy(_zRotCurr, mouseOnCircleVec2);\r\n            if (dragZoom || dragFocusZoom)\r\n                Vec2.copy(_zoomEnd, mouseOnScreenVec2);\r\n            if (dragFocus)\r\n                Vec2.copy(_focusEnd, mouseOnScreenVec2);\r\n            if (dragFocusZoom) {\r\n                var dist = Vec3.distance(camera.state.position, camera.state.target);\r\n                camera.setState({ radius: dist / 5 });\r\n            }\r\n            if (dragPan)\r\n                Vec2.copy(_panEnd, mouseOnScreenVec2);\r\n        }\r\n        function onInteractionEnd() {\r\n            _isInteracting = false;\r\n        }\r\n        function onWheel(_a) {\r\n            var x = _a.x, y = _a.y, spinX = _a.spinX, spinY = _a.spinY, dz = _a.dz, buttons = _a.buttons, modifiers = _a.modifiers;\r\n            if (outsideViewport(x, y))\r\n                return;\r\n            var delta = absMax(spinX * 0.075, spinY * 0.075, dz * 0.0001);\r\n            if (delta < -p.maxWheelDelta)\r\n                delta = -p.maxWheelDelta;\r\n            else if (delta > p.maxWheelDelta)\r\n                delta = p.maxWheelDelta;\r\n            if (Binding.match(p.bindings.scrollZoom, buttons, modifiers)) {\r\n                _zoomEnd[1] += delta;\r\n            }\r\n            if (Binding.match(p.bindings.scrollFocus, buttons, modifiers)) {\r\n                _focusEnd[1] += delta;\r\n            }\r\n        }\r\n        function onPinch(_a) {\r\n            var fractionDelta = _a.fractionDelta, buttons = _a.buttons, modifiers = _a.modifiers;\r\n            if (Binding.match(p.bindings.scrollZoom, buttons, modifiers)) {\r\n                _isInteracting = true;\r\n                _zoomEnd[1] += p.gestureScaleFactor * fractionDelta;\r\n            }\r\n        }\r\n        function onGesture(_a) {\r\n            var deltaScale = _a.deltaScale;\r\n            _isInteracting = true;\r\n            _zoomEnd[1] += p.gestureScaleFactor * deltaScale;\r\n        }\r\n        function dispose() {\r\n            if (disposed)\r\n                return;\r\n            disposed = true;\r\n            dragSub.unsubscribe();\r\n            wheelSub.unsubscribe();\r\n            pinchSub.unsubscribe();\r\n            gestureSub.unsubscribe();\r\n            interactionEndSub.unsubscribe();\r\n        }\r\n        var _spinSpeed = Vec2.create(0.005, 0);\r\n        function spin(deltaT) {\r\n            if (p.spinSpeed === 0)\r\n                return;\r\n            var frameSpeed = (p.spinSpeed || 0) / 1000;\r\n            _spinSpeed[0] = 60 * Math.min(Math.abs(deltaT), 1000 / 8) / 1000 * frameSpeed;\r\n            if (!_isInteracting)\r\n                Vec2.add(_rotCurr, _rotPrev, _spinSpeed);\r\n        }\r\n        function start(t) {\r\n            lastUpdated = -1;\r\n            update(t);\r\n        }\r\n        return {\r\n            viewport: viewport,\r\n            get props() { return p; },\r\n            setProps: function (props) {\r\n                Object.assign(p, props);\r\n            },\r\n            start: start,\r\n            update: update,\r\n            reset: reset,\r\n            dispose: dispose\r\n        };\r\n    }\r\n    TrackballControls.create = create;\r\n})(TrackballControls || (TrackballControls = {}));\r\n//# sourceMappingURL=trackball.js.map"]},"metadata":{},"sourceType":"module"}