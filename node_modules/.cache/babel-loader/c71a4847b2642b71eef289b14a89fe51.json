{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { now } from '../../mol-util/now';\n\nfunction chunkedSubtask(ctx, initialChunk, state, f, update) {\n  return __awaiter(this, void 0, void 0, function () {\n    var chunkSize, globalProcessed, globalTime, start, lastSize, currentTime, delta;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          chunkSize = Math.max(initialChunk, 0);\n          globalProcessed = 0, globalTime = 0;\n\n          if (ctx.isSynchronous) {\n            f(Number.MAX_SAFE_INTEGER, state);\n            return [2\n            /*return*/\n            , state];\n          }\n\n          start = now();\n          lastSize = 0, currentTime = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!((lastSize = f(chunkSize, state)) > 0)) return [3\n          /*break*/\n          , 4];\n          globalProcessed += lastSize;\n          delta = now() - start;\n          currentTime += delta;\n          globalTime += delta;\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , update(ctx, state, globalProcessed)];\n\n        case 2:\n          _a.sent();\n\n          chunkSize = Math.round(currentTime * globalProcessed / globalTime) + 1;\n          start = now();\n          currentTime = 0;\n          _a.label = 3;\n\n        case 3:\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , update(ctx, state, globalProcessed)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [2\n          /*return*/\n          , state];\n      }\n    });\n  });\n}\n\nexport { chunkedSubtask };","map":{"version":3,"sources":["../../../src/mol-task/util/chunked.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,GAAT,QAAoB,oBAApB;;AAKA,SAAe,cAAf,CAAiC,GAAjC,EAAsD,YAAtD,EAA4E,KAA5E,EACI,CADJ,EAC8B,MAD9B,EACgH;;;;;;AACxG,UAAA,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,CAAvB,CAAZ;AACA,UAAA,eAAe,GAAG,CAAlB,EAAqB,UAAU,GAAG,CAAlC;;AAEJ,cAAI,GAAG,CAAC,aAAR,EAAuB;AACnB,YAAA,CAAC,CAAC,MAAM,CAAC,gBAAR,EAA0B,KAA1B,CAAD;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;AACH;;AAEG,UAAA,KAAK,GAAG,GAAG,EAAX;AACA,UAAA,QAAQ,GAAG,CAAX,EAAc,WAAW,GAAG,CAA5B;;;;cAEG,EAAA,CAAC,QAAQ,GAAG,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAb,IAAmC,CAAnC,C,EAAoC,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACvC,UAAA,eAAe,IAAI,QAAnB;AAEM,UAAA,KAAK,GAAG,GAAG,KAAK,KAAhB;AACN,UAAA,WAAW,IAAI,KAAf;AACA,UAAA,UAAU,IAAI,KAAd;eAEI,GAAG,CAAC,Y,EAAJ,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACA,iBAAA,CAAA;AAAA;AAAA,YAAM,MAAM,CAAC,GAAD,EAAM,KAAN,EAAa,eAAb,CAAZ,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AAEA,UAAA,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,WAAW,GAAG,eAAd,GAAgC,UAA3C,IAAyD,CAArE;AACA,UAAA,KAAK,GAAG,GAAG,EAAX;AACA,UAAA,WAAW,GAAG,CAAd;;;;;;;;;eAGJ,GAAG,CAAC,Y,EAAJ,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACA,iBAAA,CAAA;AAAA;AAAA,YAAM,MAAM,CAAC,GAAD,EAAM,KAAN,EAAa,eAAb,CAAZ,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;AAEJ,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAP,CAAA;;;;AACH;;AAED,SAAS,cAAT","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { now } from '../../mol-util/now';\r\nfunction chunkedSubtask(ctx, initialChunk, state, f, update) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var chunkSize, globalProcessed, globalTime, start, lastSize, currentTime, delta;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    chunkSize = Math.max(initialChunk, 0);\r\n                    globalProcessed = 0, globalTime = 0;\r\n                    if (ctx.isSynchronous) {\r\n                        f(Number.MAX_SAFE_INTEGER, state);\r\n                        return [2 /*return*/, state];\r\n                    }\r\n                    start = now();\r\n                    lastSize = 0, currentTime = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!((lastSize = f(chunkSize, state)) > 0)) return [3 /*break*/, 4];\r\n                    globalProcessed += lastSize;\r\n                    delta = now() - start;\r\n                    currentTime += delta;\r\n                    globalTime += delta;\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, update(ctx, state, globalProcessed)];\r\n                case 2:\r\n                    _a.sent();\r\n                    chunkSize = Math.round(currentTime * globalProcessed / globalTime) + 1;\r\n                    start = now();\r\n                    currentTime = 0;\r\n                    _a.label = 3;\r\n                case 3: return [3 /*break*/, 1];\r\n                case 4:\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, update(ctx, state, globalProcessed)];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: return [2 /*return*/, state];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport { chunkedSubtask };\r\n//# sourceMappingURL=chunked.js.map"]},"metadata":{},"sourceType":"module"}