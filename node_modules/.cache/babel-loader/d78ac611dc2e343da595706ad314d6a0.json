{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../mol-data/db';\nimport { getMoleculeType } from '../../mol-model/structure/model/types';\nimport { Topology } from '../../mol-model/structure/topology/topology';\nimport { Task } from '../../mol-task';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\nimport { getChainId } from './common/util';\nimport { guessElementSymbolString } from './util';\n\nfunction getBasic(atoms) {\n  var entityIds = new Array(atoms.count);\n  var asymIds = new Array(atoms.count);\n  var seqIds = new Uint32Array(atoms.count);\n  var ids = new Uint32Array(atoms.count);\n  var entityBuilder = new EntityBuilder();\n  var componentBuilder = new ComponentBuilder(atoms.residueId, atoms.atomName);\n  var currentEntityId = '';\n  var currentAsymIndex = 0;\n  var currentAsymId = '';\n  var currentSeqId = 0;\n  var currentSegmentName = atoms.segmentName.value(0),\n      segmentChanged = false;\n  var prevMoleculeType = 0\n  /* Unknown */\n  ;\n  var prevResidueNumber = -1;\n\n  for (var i = 0, il = atoms.count; i < il; ++i) {\n    var residueNumber = atoms.residueId.value(i);\n    var segmentName = atoms.segmentName.value(i);\n\n    if (currentSegmentName !== segmentName) {\n      currentAsymId = getChainId(currentAsymIndex);\n      currentAsymIndex += 1;\n      currentSeqId = 0;\n      segmentChanged = true;\n      currentSegmentName = segmentName;\n    } else {\n      segmentChanged = false;\n    }\n\n    if (segmentChanged || residueNumber !== prevResidueNumber) {\n      var compId = atoms.residueName.value(i);\n      var moleculeType = getMoleculeType(componentBuilder.add(compId, i).type, compId);\n\n      if (!segmentChanged && (moleculeType !== prevMoleculeType || residueNumber !== prevResidueNumber + 1)) {\n        currentAsymId = getChainId(currentAsymIndex);\n        currentAsymIndex += 1;\n        currentSeqId = 0;\n      }\n\n      currentEntityId = entityBuilder.getEntityId(compId, moleculeType, currentAsymId);\n      currentSeqId += 1;\n      prevResidueNumber = residueNumber;\n      prevMoleculeType = moleculeType;\n    }\n\n    entityIds[i] = currentEntityId;\n    asymIds[i] = currentAsymId;\n    seqIds[i] = currentSeqId;\n    ids[i] = i;\n  }\n\n  var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n    auth_asym_id: atoms.segmentName,\n    auth_atom_id: atoms.atomName,\n    auth_comp_id: atoms.residueName,\n    auth_seq_id: atoms.residueId,\n    id: Column.ofIntArray(ids),\n    label_asym_id: Column.ofStringArray(asymIds),\n    label_atom_id: atoms.atomName,\n    label_comp_id: atoms.residueName,\n    label_seq_id: Column.ofIntArray(seqIds),\n    label_entity_id: Column.ofStringArray(entityIds),\n    occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\n    type_symbol: Column.ofStringArray(Column.mapToArray(atoms.atomName, function (s) {\n      return guessElementSymbolString(s);\n    })),\n    pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int)\n  }, atoms.count);\n  return createBasic({\n    entity: entityBuilder.getEntityTable(),\n    chem_comp: componentBuilder.getChemCompTable(),\n    atom_site: atom_site\n  });\n} //\n\n\nexport { PsfFormat };\nvar PsfFormat;\n\n(function (PsfFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'psf';\n  }\n\n  PsfFormat.is = is;\n\n  function fromPsf(psf) {\n    return {\n      kind: 'psf',\n      name: psf.id,\n      data: psf\n    };\n  }\n\n  PsfFormat.fromPsf = fromPsf;\n})(PsfFormat || (PsfFormat = {}));\n\nexport function topologyFromPsf(psf) {\n  var _this = this;\n\n  return Task.create('Parse PSF', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var format, basic, _a, atomIdA, atomIdB, bonds;\n\n      return __generator(this, function (_b) {\n        format = PsfFormat.fromPsf(psf);\n        basic = getBasic(psf.atoms);\n        _a = psf.bonds, atomIdA = _a.atomIdA, atomIdB = _a.atomIdB;\n        bonds = {\n          indexA: Column.ofLambda({\n            value: function (row) {\n              return atomIdA.value(row) - 1;\n            },\n            rowCount: atomIdA.rowCount,\n            schema: atomIdA.schema\n          }),\n          indexB: Column.ofLambda({\n            value: function (row) {\n              return atomIdB.value(row) - 1;\n            },\n            rowCount: atomIdB.rowCount,\n            schema: atomIdB.schema\n          }),\n          order: Column.ofConst(1, psf.bonds.count, Column.Schema.int)\n        };\n        return [2\n        /*return*/\n        , Topology.create(psf.id, basic, bonds, format)];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/psf.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { getMoleculeType } from '../../mol-model/structure/model/types';\r\nimport { Topology } from '../../mol-model/structure/topology/topology';\r\nimport { Task } from '../../mol-task';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nimport { getChainId } from './common/util';\r\nimport { guessElementSymbolString } from './util';\r\nfunction getBasic(atoms) {\r\n    var entityIds = new Array(atoms.count);\r\n    var asymIds = new Array(atoms.count);\r\n    var seqIds = new Uint32Array(atoms.count);\r\n    var ids = new Uint32Array(atoms.count);\r\n    var entityBuilder = new EntityBuilder();\r\n    var componentBuilder = new ComponentBuilder(atoms.residueId, atoms.atomName);\r\n    var currentEntityId = '';\r\n    var currentAsymIndex = 0;\r\n    var currentAsymId = '';\r\n    var currentSeqId = 0;\r\n    var currentSegmentName = atoms.segmentName.value(0), segmentChanged = false;\r\n    var prevMoleculeType = 0 /* Unknown */;\r\n    var prevResidueNumber = -1;\r\n    for (var i = 0, il = atoms.count; i < il; ++i) {\r\n        var residueNumber = atoms.residueId.value(i);\r\n        var segmentName = atoms.segmentName.value(i);\r\n        if (currentSegmentName !== segmentName) {\r\n            currentAsymId = getChainId(currentAsymIndex);\r\n            currentAsymIndex += 1;\r\n            currentSeqId = 0;\r\n            segmentChanged = true;\r\n            currentSegmentName = segmentName;\r\n        }\r\n        else {\r\n            segmentChanged = false;\r\n        }\r\n        if (segmentChanged || residueNumber !== prevResidueNumber) {\r\n            var compId = atoms.residueName.value(i);\r\n            var moleculeType = getMoleculeType(componentBuilder.add(compId, i).type, compId);\r\n            if (!segmentChanged && (moleculeType !== prevMoleculeType || residueNumber !== prevResidueNumber + 1)) {\r\n                currentAsymId = getChainId(currentAsymIndex);\r\n                currentAsymIndex += 1;\r\n                currentSeqId = 0;\r\n            }\r\n            currentEntityId = entityBuilder.getEntityId(compId, moleculeType, currentAsymId);\r\n            currentSeqId += 1;\r\n            prevResidueNumber = residueNumber;\r\n            prevMoleculeType = moleculeType;\r\n        }\r\n        entityIds[i] = currentEntityId;\r\n        asymIds[i] = currentAsymId;\r\n        seqIds[i] = currentSeqId;\r\n        ids[i] = i;\r\n    }\r\n    var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n        auth_asym_id: atoms.segmentName,\r\n        auth_atom_id: atoms.atomName,\r\n        auth_comp_id: atoms.residueName,\r\n        auth_seq_id: atoms.residueId,\r\n        id: Column.ofIntArray(ids),\r\n        label_asym_id: Column.ofStringArray(asymIds),\r\n        label_atom_id: atoms.atomName,\r\n        label_comp_id: atoms.residueName,\r\n        label_seq_id: Column.ofIntArray(seqIds),\r\n        label_entity_id: Column.ofStringArray(entityIds),\r\n        occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\r\n        type_symbol: Column.ofStringArray(Column.mapToArray(atoms.atomName, function (s) { return guessElementSymbolString(s); })),\r\n        pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int),\r\n    }, atoms.count);\r\n    return createBasic({\r\n        entity: entityBuilder.getEntityTable(),\r\n        chem_comp: componentBuilder.getChemCompTable(),\r\n        atom_site: atom_site\r\n    });\r\n}\r\n//\r\nexport { PsfFormat };\r\nvar PsfFormat;\r\n(function (PsfFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'psf';\r\n    }\r\n    PsfFormat.is = is;\r\n    function fromPsf(psf) {\r\n        return { kind: 'psf', name: psf.id, data: psf };\r\n    }\r\n    PsfFormat.fromPsf = fromPsf;\r\n})(PsfFormat || (PsfFormat = {}));\r\nexport function topologyFromPsf(psf) {\r\n    var _this = this;\r\n    return Task.create('Parse PSF', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var format, basic, _a, atomIdA, atomIdB, bonds;\r\n        return __generator(this, function (_b) {\r\n            format = PsfFormat.fromPsf(psf);\r\n            basic = getBasic(psf.atoms);\r\n            _a = psf.bonds, atomIdA = _a.atomIdA, atomIdB = _a.atomIdB;\r\n            bonds = {\r\n                indexA: Column.ofLambda({\r\n                    value: function (row) { return atomIdA.value(row) - 1; },\r\n                    rowCount: atomIdA.rowCount,\r\n                    schema: atomIdA.schema,\r\n                }),\r\n                indexB: Column.ofLambda({\r\n                    value: function (row) { return atomIdB.value(row) - 1; },\r\n                    rowCount: atomIdB.rowCount,\r\n                    schema: atomIdB.schema,\r\n                }),\r\n                order: Column.ofConst(1, psf.bonds.count, Column.Schema.int)\r\n            };\r\n            return [2 /*return*/, Topology.create(psf.id, basic, bonds, format)];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=psf.js.map"]},"metadata":{},"sourceType":"module"}