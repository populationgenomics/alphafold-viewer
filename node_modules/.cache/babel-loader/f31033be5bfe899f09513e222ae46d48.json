{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { defaults, noop } from '../../mol-util';\nimport { SimpleBuffer } from './simple-buffer';\nexport var FileHandle;\n\n(function (FileHandle) {\n  function fromBuffer(buffer, name) {\n    return {\n      name: name,\n      readBuffer: function (position, sizeOrBuffer, size, byteOffset) {\n        var bytesRead;\n        var outBuffer;\n\n        if (typeof sizeOrBuffer === 'number') {\n          size = defaults(size, sizeOrBuffer);\n          var start = position;\n          var end = Math.min(buffer.length, start + size);\n          bytesRead = end - start;\n          outBuffer = SimpleBuffer.fromUint8Array(new Uint8Array(buffer.buffer, start, end - start));\n        } else {\n          size = defaults(size, sizeOrBuffer.length);\n          var start = position;\n          var end = Math.min(buffer.length, start + size);\n          sizeOrBuffer.set(buffer.subarray(start, end), byteOffset);\n          bytesRead = end - start;\n          outBuffer = sizeOrBuffer;\n        }\n\n        if (size !== bytesRead) {\n          console.warn(\"byteCount \" + size + \" and bytesRead \" + bytesRead + \" differ\");\n        }\n\n        return Promise.resolve({\n          bytesRead: bytesRead,\n          buffer: outBuffer\n        });\n      },\n      writeBuffer: function (position, buffer, length) {\n        length = defaults(length, buffer.length);\n        console.error('.writeBuffer not implemented for FileHandle.fromBuffer');\n        return Promise.resolve(0);\n      },\n      writeBufferSync: function (position, buffer, length) {\n        length = defaults(length, buffer.length);\n        console.error('.writeSync not implemented for FileHandle.fromBuffer');\n        return 0;\n      },\n      close: noop\n    };\n  }\n\n  FileHandle.fromBuffer = fromBuffer;\n})(FileHandle || (FileHandle = {}));","map":{"version":3,"sources":["../../../src/mol-io/common/file-handle.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,QAAT,EAAmB,IAAnB,QAA+B,gBAA/B;AACA,SAAS,YAAT,QAA6B,iBAA7B;AAoCA,OAAM,IAAW,UAAX;;AAAN,CAAA,UAAiB,UAAjB,EAA2B;AACvB,WAAgB,UAAhB,CAA2B,MAA3B,EAAiD,IAAjD,EAA6D;AACzD,WAAO;AACH,MAAA,IAAI,EAAA,IADD;AAEH,MAAA,UAAU,EAAE,UAAC,QAAD,EAAmB,YAAnB,EAAwD,IAAxD,EAAuE,UAAvE,EAA0F;AAClG,YAAI,SAAJ;AACA,YAAI,SAAJ;;AACA,YAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;AAClC,UAAA,IAAI,GAAG,QAAQ,CAAC,IAAD,EAAO,YAAP,CAAf;AACA,cAAM,KAAK,GAAG,QAAd;AACA,cAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,MAAhB,EAAwB,KAAK,GAAG,IAAhC,CAAZ;AACA,UAAA,SAAS,GAAG,GAAG,GAAG,KAAlB;AACA,UAAA,SAAS,GAAG,YAAY,CAAC,cAAb,CAA4B,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAtB,EAA8B,KAA9B,EAAqC,GAAG,GAAG,KAA3C,CAA5B,CAAZ;AACH,SAND,MAMO;AACH,UAAA,IAAI,GAAG,QAAQ,CAAC,IAAD,EAAO,YAAY,CAAC,MAApB,CAAf;AACA,cAAM,KAAK,GAAG,QAAd;AACA,cAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,MAAhB,EAAwB,KAAK,GAAG,IAAhC,CAAZ;AACA,UAAA,YAAY,CAAC,GAAb,CAAiB,MAAM,CAAC,QAAP,CAAgB,KAAhB,EAAuB,GAAvB,CAAjB,EAA8C,UAA9C;AACA,UAAA,SAAS,GAAG,GAAG,GAAG,KAAlB;AACA,UAAA,SAAS,GAAG,YAAZ;AACH;;AACD,YAAI,IAAI,KAAK,SAAb,EAAwB;AACpB,UAAA,OAAO,CAAC,IAAR,CAAa,eAAa,IAAb,GAAiB,iBAAjB,GAAmC,SAAnC,GAA4C,SAAzD;AACH;;AACD,eAAO,OAAO,CAAC,OAAR,CAAgB;AAAE,UAAA,SAAS,EAAA,SAAX;AAAa,UAAA,MAAM,EAAE;AAArB,SAAhB,CAAP;AACH,OAvBE;AAwBH,MAAA,WAAW,EAAE,UAAC,QAAD,EAAmB,MAAnB,EAAyC,MAAzC,EAAwD;AACjE,QAAA,MAAM,GAAG,QAAQ,CAAC,MAAD,EAAS,MAAM,CAAC,MAAhB,CAAjB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,wDAAd;AACA,eAAO,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAP;AACH,OA5BE;AA6BH,MAAA,eAAe,EAAE,UAAC,QAAD,EAAmB,MAAnB,EAAyC,MAAzC,EAAwD;AACrE,QAAA,MAAM,GAAG,QAAQ,CAAC,MAAD,EAAS,MAAM,CAAC,MAAhB,CAAjB;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,sDAAd;AACA,eAAO,CAAP;AACH,OAjCE;AAkCH,MAAA,KAAK,EAAE;AAlCJ,KAAP;AAoCH;;AArCe,EAAA,UAAA,CAAA,UAAA,GAAU,UAAV;AAsCnB,CAvCD,EAAiB,UAAU,KAAV,UAAU,GAAA,EAAA,CAA3B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { defaults, noop } from '../../mol-util';\r\nimport { SimpleBuffer } from './simple-buffer';\r\nexport var FileHandle;\r\n(function (FileHandle) {\r\n    function fromBuffer(buffer, name) {\r\n        return {\r\n            name: name,\r\n            readBuffer: function (position, sizeOrBuffer, size, byteOffset) {\r\n                var bytesRead;\r\n                var outBuffer;\r\n                if (typeof sizeOrBuffer === 'number') {\r\n                    size = defaults(size, sizeOrBuffer);\r\n                    var start = position;\r\n                    var end = Math.min(buffer.length, start + size);\r\n                    bytesRead = end - start;\r\n                    outBuffer = SimpleBuffer.fromUint8Array(new Uint8Array(buffer.buffer, start, end - start));\r\n                }\r\n                else {\r\n                    size = defaults(size, sizeOrBuffer.length);\r\n                    var start = position;\r\n                    var end = Math.min(buffer.length, start + size);\r\n                    sizeOrBuffer.set(buffer.subarray(start, end), byteOffset);\r\n                    bytesRead = end - start;\r\n                    outBuffer = sizeOrBuffer;\r\n                }\r\n                if (size !== bytesRead) {\r\n                    console.warn(\"byteCount \" + size + \" and bytesRead \" + bytesRead + \" differ\");\r\n                }\r\n                return Promise.resolve({ bytesRead: bytesRead, buffer: outBuffer });\r\n            },\r\n            writeBuffer: function (position, buffer, length) {\r\n                length = defaults(length, buffer.length);\r\n                console.error('.writeBuffer not implemented for FileHandle.fromBuffer');\r\n                return Promise.resolve(0);\r\n            },\r\n            writeBufferSync: function (position, buffer, length) {\r\n                length = defaults(length, buffer.length);\r\n                console.error('.writeSync not implemented for FileHandle.fromBuffer');\r\n                return 0;\r\n            },\r\n            close: noop\r\n        };\r\n    }\r\n    FileHandle.fromBuffer = fromBuffer;\r\n})(FileHandle || (FileHandle = {}));\r\n//# sourceMappingURL=file-handle.js.map"]},"metadata":{},"sourceType":"module"}