{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { OrderedSet } from 'immutable';\nimport { StateTransform } from '../transform';\nimport { StateTree } from './immutable';\nimport { shallowEqual } from '../../mol-util/object';\nimport { arrayEqual } from '../../mol-util/array';\nexport { TransientTree };\n\nvar TransientTree =\n/** @class */\nfunction () {\n  function TransientTree(tree) {\n    this.tree = tree;\n    this.transforms = this.tree.transforms;\n    this.children = this.tree.children;\n    this.dependencies = this.tree.dependencies;\n    this.changedNodes = false;\n    this.changedChildren = false;\n    this.changedDependencies = false;\n    this._childMutations = void 0;\n    this._dependencyMutations = void 0;\n    this._stateUpdates = void 0;\n  }\n\n  Object.defineProperty(TransientTree.prototype, \"childMutations\", {\n    get: function () {\n      if (this._childMutations) return this._childMutations;\n      this._childMutations = new Map();\n      return this._childMutations;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransientTree.prototype, \"dependencyMutations\", {\n    get: function () {\n      if (this._dependencyMutations) return this._dependencyMutations;\n      this._dependencyMutations = new Map();\n      return this._dependencyMutations;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransientTree.prototype.changeNodes = function () {\n    if (this.changedNodes) return;\n    this.changedNodes = true;\n    this.transforms = this.transforms.asMutable();\n  };\n\n  TransientTree.prototype.changeChildren = function () {\n    if (this.changedChildren) return;\n    this.changedChildren = true;\n    this.children = this.children.asMutable();\n  };\n\n  TransientTree.prototype.changeDependencies = function () {\n    if (this.changedDependencies) return;\n    this.changedDependencies = true;\n    this.dependencies = this.dependencies.asMutable();\n  };\n\n  Object.defineProperty(TransientTree.prototype, \"root\", {\n    get: function () {\n      return this.transforms.get(StateTransform.RootRef);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransientTree.prototype.asTransient = function () {\n    return this.asImmutable().asTransient();\n  };\n\n  TransientTree.prototype.addChild = function (parent, child) {\n    this.changeChildren();\n\n    if (this.childMutations.has(parent)) {\n      this.childMutations.get(parent).add(child);\n    } else {\n      var set = this.children.get(parent).asMutable();\n      set.add(child);\n      this.children.set(parent, set);\n      this.childMutations.set(parent, set);\n    }\n  };\n\n  TransientTree.prototype.removeChild = function (parent, child) {\n    this.changeChildren();\n\n    if (this.childMutations.has(parent)) {\n      this.childMutations.get(parent).remove(child);\n    } else {\n      var set = this.children.get(parent).asMutable();\n      set.remove(child);\n      this.children.set(parent, set);\n      this.childMutations.set(parent, set);\n    }\n  };\n\n  TransientTree.prototype.clearRoot = function () {\n    var parent = StateTransform.RootRef;\n    if (this.children.get(parent).size === 0) return;\n    this.changeChildren();\n    var set = OrderedSet();\n    this.children.set(parent, set);\n    this.childMutations.set(parent, set);\n  };\n\n  TransientTree.prototype.mutateDependency = function (parent, child, action) {\n    var set = this.dependencyMutations.get(parent);\n\n    if (!set) {\n      var src = this.dependencies.get(parent);\n      if (!src && action === 'remove') return;\n      this.changeDependencies();\n      set = src ? src.asMutable() : OrderedSet().asMutable();\n      this.dependencyMutations.set(parent, set);\n      this.dependencies.set(parent, set);\n    }\n\n    if (action === 'add') {\n      set.add(child);\n    } else {\n      set.remove(child);\n    }\n  };\n\n  TransientTree.prototype.changeParent = function (ref, newParent) {\n    ensurePresent(this.transforms, ref);\n    var old = this.transforms.get(ref);\n    this.removeChild(old.parent, ref);\n    this.addChild(newParent, ref);\n    this.changeNodes();\n    this.transforms.set(ref, StateTransform.withParent(old, newParent));\n  };\n\n  TransientTree.prototype.add = function (transform) {\n    var ref = transform.ref;\n\n    if (this.transforms.has(transform.ref)) {\n      var node = this.transforms.get(transform.ref);\n      if (node.parent !== transform.parent) alreadyPresent(transform.ref);\n    }\n\n    var children = this.children.get(transform.parent);\n    if (!children) parentNotPresent(transform.parent);\n\n    if (!children.has(transform.ref)) {\n      this.addChild(transform.parent, transform.ref);\n    }\n\n    if (!this.children.has(transform.ref)) {\n      if (!this.changedChildren) {\n        this.changedChildren = true;\n        this.children = this.children.asMutable();\n      }\n\n      this.children.set(transform.ref, OrderedSet());\n    }\n\n    this.changeNodes();\n    this.transforms.set(ref, transform);\n\n    if (transform.dependsOn) {\n      for (var _i = 0, _a = transform.dependsOn; _i < _a.length; _i++) {\n        var d = _a[_i];\n        this.mutateDependency(d, ref, 'add');\n      }\n    }\n\n    return this;\n  };\n  /** Calls Transform.definition.params.areEqual if available, otherwise uses shallowEqual to check if the params changed */\n\n\n  TransientTree.prototype.setParams = function (ref, params) {\n    ensurePresent(this.transforms, ref);\n    var transform = this.transforms.get(ref); // TODO: should this be here?\n\n    if (shallowEqual(transform.params, params)) {\n      return false;\n    }\n\n    if (!this.changedNodes) {\n      this.changedNodes = true;\n      this.transforms = this.transforms.asMutable();\n    }\n\n    this.transforms.set(transform.ref, StateTransform.withParams(transform, params));\n    return true;\n  };\n  /** Calls Transform.definition.params.areEqual if available, otherwise uses shallowEqual to check if the params changed */\n\n\n  TransientTree.prototype.setTags = function (ref, tags) {\n    ensurePresent(this.transforms, ref);\n    var transform = this.transforms.get(ref);\n    var withTags = StateTransform.withParams(transform, tags); // TODO: should this be here?\n\n    if (arrayEqual(transform.tags, withTags.tags)) {\n      return false;\n    }\n\n    if (!this.changedNodes) {\n      this.changedNodes = true;\n      this.transforms = this.transforms.asMutable();\n    }\n\n    this.transforms.set(transform.ref, withTags);\n    return true;\n  };\n\n  TransientTree.prototype.assignState = function (ref, state) {\n    ensurePresent(this.transforms, ref);\n    var old = this.transforms.get(ref);\n\n    if (this._stateUpdates && this._stateUpdates.has(ref)) {\n      StateTransform.assignState(old.state, state);\n      return old;\n    } else {\n      if (!this._stateUpdates) this._stateUpdates = new Set();\n\n      this._stateUpdates.add(old.ref);\n\n      this.changeNodes();\n      var updated = StateTransform.withState(old, state);\n      this.transforms.set(ref, updated);\n      return updated;\n    }\n  };\n\n  TransientTree.prototype.remove = function (ref) {\n    var node = this.transforms.get(ref);\n    if (!node) return [];\n    var st = StateTree.subtreePostOrder(this, node);\n\n    if (ref === StateTransform.RootRef) {\n      st.pop();\n      if (st.length === 0) return st;\n      this.clearRoot();\n    } else {\n      if (st.length === 0) return st;\n      this.removeChild(node.parent, node.ref);\n    }\n\n    this.changeNodes();\n    this.changeChildren();\n\n    for (var _i = 0, st_1 = st; _i < st_1.length; _i++) {\n      var n = st_1[_i];\n      this.transforms.delete(n.ref);\n      this.children.delete(n.ref);\n      if (this._childMutations) this._childMutations.delete(n.ref);\n    }\n\n    var depRemoves = [];\n\n    for (var _a = 0, st_2 = st; _a < st_2.length; _a++) {\n      var n = st_2[_a];\n\n      if (n.dependsOn) {\n        for (var _b = 0, _c = n.dependsOn; _b < _c.length; _b++) {\n          var d = _c[_b];\n          if (!this.transforms.has(d)) continue;\n          this.mutateDependency(d, n.ref, 'remove');\n        }\n      }\n\n      if (this.dependencies.has(n.ref)) {\n        var deps = this.dependencies.get(n.ref).toArray();\n        this.changeDependencies();\n        this.dependencies.delete(n.ref);\n        if (this._dependencyMutations) this._dependencyMutations.delete(n.ref);\n\n        for (var _d = 0, deps_1 = deps; _d < deps_1.length; _d++) {\n          var dep = deps_1[_d];\n          if (!this.transforms.has(dep)) continue;\n\n          for (var _e = 0, _f = this.remove(dep); _e < _f.length; _e++) {\n            var del = _f[_e];\n            depRemoves[depRemoves.length] = del;\n          }\n        }\n      }\n    }\n\n    for (var _g = 0, depRemoves_1 = depRemoves; _g < depRemoves_1.length; _g++) {\n      var dep = depRemoves_1[_g];\n      st[st.length] = dep;\n    }\n\n    return st;\n  };\n\n  TransientTree.prototype.asImmutable = function () {\n    if (!this.changedNodes && !this.changedChildren && !this._childMutations) return this.tree;\n    if (this._childMutations) this._childMutations.forEach(fixChildMutations, this.children);\n    if (this._dependencyMutations) this._dependencyMutations.forEach(fixDependencyMutations, this.dependencies);\n    return StateTree.create(this.changedNodes ? this.transforms.asImmutable() : this.transforms, this.changedChildren ? this.children.asImmutable() : this.children, this.changedDependencies ? this.dependencies.asImmutable() : this.dependencies);\n  };\n\n  return TransientTree;\n}();\n\nfunction fixChildMutations(m, k) {\n  this.set(k, m.asImmutable());\n}\n\nfunction fixDependencyMutations(m, k) {\n  if (m.size === 0) this.delete(k);else this.set(k, m.asImmutable());\n}\n\nfunction alreadyPresent(ref) {\n  throw new Error(\"Transform '\" + ref + \"' is already present in the tree.\");\n}\n\nfunction parentNotPresent(ref) {\n  throw new Error(\"Parent '\" + ref + \"' must be present in the tree.\");\n}\n\nfunction ensurePresent(nodes, ref) {\n  if (!nodes.has(ref)) {\n    throw new Error(\"Node '\" + ref + \"' is not present in the tree.\");\n  }\n}","map":{"version":3,"sources":["../../../src/mol-state/tree/transient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { OrderedSet } from 'immutable';\r\nimport { StateTransform } from '../transform';\r\nimport { StateTree } from './immutable';\r\nimport { shallowEqual } from '../../mol-util/object';\r\nimport { arrayEqual } from '../../mol-util/array';\r\nexport { TransientTree };\r\nvar TransientTree = /** @class */ (function () {\r\n    function TransientTree(tree) {\r\n        this.tree = tree;\r\n        this.transforms = this.tree.transforms;\r\n        this.children = this.tree.children;\r\n        this.dependencies = this.tree.dependencies;\r\n        this.changedNodes = false;\r\n        this.changedChildren = false;\r\n        this.changedDependencies = false;\r\n        this._childMutations = void 0;\r\n        this._dependencyMutations = void 0;\r\n        this._stateUpdates = void 0;\r\n    }\r\n    Object.defineProperty(TransientTree.prototype, \"childMutations\", {\r\n        get: function () {\r\n            if (this._childMutations)\r\n                return this._childMutations;\r\n            this._childMutations = new Map();\r\n            return this._childMutations;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TransientTree.prototype, \"dependencyMutations\", {\r\n        get: function () {\r\n            if (this._dependencyMutations)\r\n                return this._dependencyMutations;\r\n            this._dependencyMutations = new Map();\r\n            return this._dependencyMutations;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    TransientTree.prototype.changeNodes = function () {\r\n        if (this.changedNodes)\r\n            return;\r\n        this.changedNodes = true;\r\n        this.transforms = this.transforms.asMutable();\r\n    };\r\n    TransientTree.prototype.changeChildren = function () {\r\n        if (this.changedChildren)\r\n            return;\r\n        this.changedChildren = true;\r\n        this.children = this.children.asMutable();\r\n    };\r\n    TransientTree.prototype.changeDependencies = function () {\r\n        if (this.changedDependencies)\r\n            return;\r\n        this.changedDependencies = true;\r\n        this.dependencies = this.dependencies.asMutable();\r\n    };\r\n    Object.defineProperty(TransientTree.prototype, \"root\", {\r\n        get: function () { return this.transforms.get(StateTransform.RootRef); },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    TransientTree.prototype.asTransient = function () {\r\n        return this.asImmutable().asTransient();\r\n    };\r\n    TransientTree.prototype.addChild = function (parent, child) {\r\n        this.changeChildren();\r\n        if (this.childMutations.has(parent)) {\r\n            this.childMutations.get(parent).add(child);\r\n        }\r\n        else {\r\n            var set = this.children.get(parent).asMutable();\r\n            set.add(child);\r\n            this.children.set(parent, set);\r\n            this.childMutations.set(parent, set);\r\n        }\r\n    };\r\n    TransientTree.prototype.removeChild = function (parent, child) {\r\n        this.changeChildren();\r\n        if (this.childMutations.has(parent)) {\r\n            this.childMutations.get(parent).remove(child);\r\n        }\r\n        else {\r\n            var set = this.children.get(parent).asMutable();\r\n            set.remove(child);\r\n            this.children.set(parent, set);\r\n            this.childMutations.set(parent, set);\r\n        }\r\n    };\r\n    TransientTree.prototype.clearRoot = function () {\r\n        var parent = StateTransform.RootRef;\r\n        if (this.children.get(parent).size === 0)\r\n            return;\r\n        this.changeChildren();\r\n        var set = OrderedSet();\r\n        this.children.set(parent, set);\r\n        this.childMutations.set(parent, set);\r\n    };\r\n    TransientTree.prototype.mutateDependency = function (parent, child, action) {\r\n        var set = this.dependencyMutations.get(parent);\r\n        if (!set) {\r\n            var src = this.dependencies.get(parent);\r\n            if (!src && action === 'remove')\r\n                return;\r\n            this.changeDependencies();\r\n            set = src ? src.asMutable() : OrderedSet().asMutable();\r\n            this.dependencyMutations.set(parent, set);\r\n            this.dependencies.set(parent, set);\r\n        }\r\n        if (action === 'add') {\r\n            set.add(child);\r\n        }\r\n        else {\r\n            set.remove(child);\r\n        }\r\n    };\r\n    TransientTree.prototype.changeParent = function (ref, newParent) {\r\n        ensurePresent(this.transforms, ref);\r\n        var old = this.transforms.get(ref);\r\n        this.removeChild(old.parent, ref);\r\n        this.addChild(newParent, ref);\r\n        this.changeNodes();\r\n        this.transforms.set(ref, StateTransform.withParent(old, newParent));\r\n    };\r\n    TransientTree.prototype.add = function (transform) {\r\n        var ref = transform.ref;\r\n        if (this.transforms.has(transform.ref)) {\r\n            var node = this.transforms.get(transform.ref);\r\n            if (node.parent !== transform.parent)\r\n                alreadyPresent(transform.ref);\r\n        }\r\n        var children = this.children.get(transform.parent);\r\n        if (!children)\r\n            parentNotPresent(transform.parent);\r\n        if (!children.has(transform.ref)) {\r\n            this.addChild(transform.parent, transform.ref);\r\n        }\r\n        if (!this.children.has(transform.ref)) {\r\n            if (!this.changedChildren) {\r\n                this.changedChildren = true;\r\n                this.children = this.children.asMutable();\r\n            }\r\n            this.children.set(transform.ref, OrderedSet());\r\n        }\r\n        this.changeNodes();\r\n        this.transforms.set(ref, transform);\r\n        if (transform.dependsOn) {\r\n            for (var _i = 0, _a = transform.dependsOn; _i < _a.length; _i++) {\r\n                var d = _a[_i];\r\n                this.mutateDependency(d, ref, 'add');\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /** Calls Transform.definition.params.areEqual if available, otherwise uses shallowEqual to check if the params changed */\r\n    TransientTree.prototype.setParams = function (ref, params) {\r\n        ensurePresent(this.transforms, ref);\r\n        var transform = this.transforms.get(ref);\r\n        // TODO: should this be here?\r\n        if (shallowEqual(transform.params, params)) {\r\n            return false;\r\n        }\r\n        if (!this.changedNodes) {\r\n            this.changedNodes = true;\r\n            this.transforms = this.transforms.asMutable();\r\n        }\r\n        this.transforms.set(transform.ref, StateTransform.withParams(transform, params));\r\n        return true;\r\n    };\r\n    /** Calls Transform.definition.params.areEqual if available, otherwise uses shallowEqual to check if the params changed */\r\n    TransientTree.prototype.setTags = function (ref, tags) {\r\n        ensurePresent(this.transforms, ref);\r\n        var transform = this.transforms.get(ref);\r\n        var withTags = StateTransform.withParams(transform, tags);\r\n        // TODO: should this be here?\r\n        if (arrayEqual(transform.tags, withTags.tags)) {\r\n            return false;\r\n        }\r\n        if (!this.changedNodes) {\r\n            this.changedNodes = true;\r\n            this.transforms = this.transforms.asMutable();\r\n        }\r\n        this.transforms.set(transform.ref, withTags);\r\n        return true;\r\n    };\r\n    TransientTree.prototype.assignState = function (ref, state) {\r\n        ensurePresent(this.transforms, ref);\r\n        var old = this.transforms.get(ref);\r\n        if (this._stateUpdates && this._stateUpdates.has(ref)) {\r\n            StateTransform.assignState(old.state, state);\r\n            return old;\r\n        }\r\n        else {\r\n            if (!this._stateUpdates)\r\n                this._stateUpdates = new Set();\r\n            this._stateUpdates.add(old.ref);\r\n            this.changeNodes();\r\n            var updated = StateTransform.withState(old, state);\r\n            this.transforms.set(ref, updated);\r\n            return updated;\r\n        }\r\n    };\r\n    TransientTree.prototype.remove = function (ref) {\r\n        var node = this.transforms.get(ref);\r\n        if (!node)\r\n            return [];\r\n        var st = StateTree.subtreePostOrder(this, node);\r\n        if (ref === StateTransform.RootRef) {\r\n            st.pop();\r\n            if (st.length === 0)\r\n                return st;\r\n            this.clearRoot();\r\n        }\r\n        else {\r\n            if (st.length === 0)\r\n                return st;\r\n            this.removeChild(node.parent, node.ref);\r\n        }\r\n        this.changeNodes();\r\n        this.changeChildren();\r\n        for (var _i = 0, st_1 = st; _i < st_1.length; _i++) {\r\n            var n = st_1[_i];\r\n            this.transforms.delete(n.ref);\r\n            this.children.delete(n.ref);\r\n            if (this._childMutations)\r\n                this._childMutations.delete(n.ref);\r\n        }\r\n        var depRemoves = [];\r\n        for (var _a = 0, st_2 = st; _a < st_2.length; _a++) {\r\n            var n = st_2[_a];\r\n            if (n.dependsOn) {\r\n                for (var _b = 0, _c = n.dependsOn; _b < _c.length; _b++) {\r\n                    var d = _c[_b];\r\n                    if (!this.transforms.has(d))\r\n                        continue;\r\n                    this.mutateDependency(d, n.ref, 'remove');\r\n                }\r\n            }\r\n            if (this.dependencies.has(n.ref)) {\r\n                var deps = this.dependencies.get(n.ref).toArray();\r\n                this.changeDependencies();\r\n                this.dependencies.delete(n.ref);\r\n                if (this._dependencyMutations)\r\n                    this._dependencyMutations.delete(n.ref);\r\n                for (var _d = 0, deps_1 = deps; _d < deps_1.length; _d++) {\r\n                    var dep = deps_1[_d];\r\n                    if (!this.transforms.has(dep))\r\n                        continue;\r\n                    for (var _e = 0, _f = this.remove(dep); _e < _f.length; _e++) {\r\n                        var del = _f[_e];\r\n                        depRemoves[depRemoves.length] = del;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var _g = 0, depRemoves_1 = depRemoves; _g < depRemoves_1.length; _g++) {\r\n            var dep = depRemoves_1[_g];\r\n            st[st.length] = dep;\r\n        }\r\n        return st;\r\n    };\r\n    TransientTree.prototype.asImmutable = function () {\r\n        if (!this.changedNodes && !this.changedChildren && !this._childMutations)\r\n            return this.tree;\r\n        if (this._childMutations)\r\n            this._childMutations.forEach(fixChildMutations, this.children);\r\n        if (this._dependencyMutations)\r\n            this._dependencyMutations.forEach(fixDependencyMutations, this.dependencies);\r\n        return StateTree.create(this.changedNodes ? this.transforms.asImmutable() : this.transforms, this.changedChildren ? this.children.asImmutable() : this.children, this.changedDependencies ? this.dependencies.asImmutable() : this.dependencies);\r\n    };\r\n    return TransientTree;\r\n}());\r\nfunction fixChildMutations(m, k) {\r\n    this.set(k, m.asImmutable());\r\n}\r\nfunction fixDependencyMutations(m, k) {\r\n    if (m.size === 0)\r\n        this.delete(k);\r\n    else\r\n        this.set(k, m.asImmutable());\r\n}\r\nfunction alreadyPresent(ref) {\r\n    throw new Error(\"Transform '\" + ref + \"' is already present in the tree.\");\r\n}\r\nfunction parentNotPresent(ref) {\r\n    throw new Error(\"Parent '\" + ref + \"' must be present in the tree.\");\r\n}\r\nfunction ensurePresent(nodes, ref) {\r\n    if (!nodes.has(ref)) {\r\n        throw new Error(\"Node '\" + ref + \"' is not present in the tree.\");\r\n    }\r\n}\r\n//# sourceMappingURL=transient.js.map"]},"metadata":{},"sourceType":"module"}