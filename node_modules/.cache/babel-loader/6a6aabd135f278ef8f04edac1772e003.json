{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Structure } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nexport function createStructureRepresentationParams(ctx, structure, props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var p = props;\n  if (typeof p.type === 'string' || typeof p.color === 'string' || typeof p.size === 'string') return createParamsByName(ctx, structure || Structure.Empty, props);\n  return createParamsProvider(ctx, structure || Structure.Empty, props);\n}\nexport function getStructureThemeTypes(ctx, structure) {\n  var themeCtx = ctx.representation.structure.themes;\n  if (!structure) return themeCtx.colorThemeRegistry.types;\n  return themeCtx.colorThemeRegistry.getApplicableTypes({\n    structure: structure\n  });\n}\nexport function createStructureColorThemeParams(ctx, structure, typeName, themeName, params) {\n  var _a = ctx.representation.structure,\n      registry = _a.registry,\n      themes = _a.themes;\n  var repr = registry.get(typeName || registry.default.name);\n  var color = themes.colorThemeRegistry.get(themeName || repr.defaultColorTheme.name);\n  var colorDefaultParams = PD.getDefaultValues(color.getParams({\n    structure: structure || Structure.Empty\n  }));\n  if (color.name === repr.defaultColorTheme.name) Object.assign(colorDefaultParams, repr.defaultColorTheme.props);\n  return {\n    name: color.name,\n    params: Object.assign(colorDefaultParams, params)\n  };\n}\nexport function createStructureSizeThemeParams(ctx, structure, typeName, themeName, params) {\n  var _a = ctx.representation.structure,\n      registry = _a.registry,\n      themes = _a.themes;\n  var repr = registry.get(typeName || registry.default.name);\n  var size = themes.sizeThemeRegistry.get(themeName || repr.defaultSizeTheme.name);\n  var sizeDefaultParams = PD.getDefaultValues(size.getParams({\n    structure: structure || Structure.Empty\n  }));\n  if (size.name === repr.defaultSizeTheme.name) Object.assign(sizeDefaultParams, repr.defaultSizeTheme.props);\n  return {\n    name: size.name,\n    params: Object.assign(sizeDefaultParams, params)\n  };\n}\n\nfunction createParamsByName(ctx, structure, props) {\n  var typeProvider = props.type && ctx.representation.structure.registry.get(props.type) || ctx.representation.structure.registry.default.provider;\n  var colorProvider = props.color && ctx.representation.structure.themes.colorThemeRegistry.get(props.color) || ctx.representation.structure.themes.colorThemeRegistry.get(typeProvider.defaultColorTheme.name);\n  var sizeProvider = props.size && ctx.representation.structure.themes.sizeThemeRegistry.get(props.size) || ctx.representation.structure.themes.sizeThemeRegistry.get(typeProvider.defaultSizeTheme.name);\n  return createParamsProvider(ctx, structure, {\n    type: typeProvider,\n    typeParams: props.typeParams,\n    color: colorProvider,\n    colorParams: props.colorParams,\n    size: sizeProvider,\n    sizeParams: props.sizeParams\n  });\n}\n\nfunction createParamsProvider(ctx, structure, props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var themeCtx = ctx.representation.structure.themes;\n  var themeDataCtx = {\n    structure: structure\n  };\n  var repr = props.type || ctx.representation.structure.registry.default.provider;\n  var reprDefaultParams = PD.getDefaultValues(repr.getParams(themeCtx, structure));\n  var reprParams = Object.assign(reprDefaultParams, props.typeParams);\n  var color = props.color || themeCtx.colorThemeRegistry.get(repr.defaultColorTheme.name);\n  var colorDefaultParams = PD.getDefaultValues(color.getParams(themeDataCtx));\n  if (color.name === repr.defaultColorTheme.name) Object.assign(colorDefaultParams, repr.defaultColorTheme.props);\n  var colorParams = Object.assign(colorDefaultParams, props.colorParams);\n  var size = props.size || themeCtx.sizeThemeRegistry.get(repr.defaultSizeTheme.name);\n  var sizeDefaultParams = PD.getDefaultValues(size.getParams(themeDataCtx));\n  if (size.name === repr.defaultSizeTheme.name) Object.assign(sizeDefaultParams, repr.defaultSizeTheme.props);\n  var sizeParams = Object.assign(sizeDefaultParams, props.sizeParams);\n  return {\n    type: {\n      name: repr.name,\n      params: reprParams\n    },\n    colorTheme: {\n      name: color.name,\n      params: colorParams\n    },\n    sizeTheme: {\n      name: size.name,\n      params: sizeParams\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/helpers/structure-representation-params.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Structure } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nexport function createStructureRepresentationParams(ctx, structure, props) {\r\n    if (props === void 0) { props = {}; }\r\n    var p = props;\r\n    if (typeof p.type === 'string' || typeof p.color === 'string' || typeof p.size === 'string')\r\n        return createParamsByName(ctx, structure || Structure.Empty, props);\r\n    return createParamsProvider(ctx, structure || Structure.Empty, props);\r\n}\r\nexport function getStructureThemeTypes(ctx, structure) {\r\n    var themeCtx = ctx.representation.structure.themes;\r\n    if (!structure)\r\n        return themeCtx.colorThemeRegistry.types;\r\n    return themeCtx.colorThemeRegistry.getApplicableTypes({ structure: structure });\r\n}\r\nexport function createStructureColorThemeParams(ctx, structure, typeName, themeName, params) {\r\n    var _a = ctx.representation.structure, registry = _a.registry, themes = _a.themes;\r\n    var repr = registry.get(typeName || registry.default.name);\r\n    var color = themes.colorThemeRegistry.get(themeName || repr.defaultColorTheme.name);\r\n    var colorDefaultParams = PD.getDefaultValues(color.getParams({ structure: structure || Structure.Empty }));\r\n    if (color.name === repr.defaultColorTheme.name)\r\n        Object.assign(colorDefaultParams, repr.defaultColorTheme.props);\r\n    return { name: color.name, params: Object.assign(colorDefaultParams, params) };\r\n}\r\nexport function createStructureSizeThemeParams(ctx, structure, typeName, themeName, params) {\r\n    var _a = ctx.representation.structure, registry = _a.registry, themes = _a.themes;\r\n    var repr = registry.get(typeName || registry.default.name);\r\n    var size = themes.sizeThemeRegistry.get(themeName || repr.defaultSizeTheme.name);\r\n    var sizeDefaultParams = PD.getDefaultValues(size.getParams({ structure: structure || Structure.Empty }));\r\n    if (size.name === repr.defaultSizeTheme.name)\r\n        Object.assign(sizeDefaultParams, repr.defaultSizeTheme.props);\r\n    return { name: size.name, params: Object.assign(sizeDefaultParams, params) };\r\n}\r\nfunction createParamsByName(ctx, structure, props) {\r\n    var typeProvider = (props.type && ctx.representation.structure.registry.get(props.type))\r\n        || ctx.representation.structure.registry.default.provider;\r\n    var colorProvider = (props.color && ctx.representation.structure.themes.colorThemeRegistry.get(props.color))\r\n        || ctx.representation.structure.themes.colorThemeRegistry.get(typeProvider.defaultColorTheme.name);\r\n    var sizeProvider = (props.size && ctx.representation.structure.themes.sizeThemeRegistry.get(props.size))\r\n        || ctx.representation.structure.themes.sizeThemeRegistry.get(typeProvider.defaultSizeTheme.name);\r\n    return createParamsProvider(ctx, structure, {\r\n        type: typeProvider,\r\n        typeParams: props.typeParams,\r\n        color: colorProvider,\r\n        colorParams: props.colorParams,\r\n        size: sizeProvider,\r\n        sizeParams: props.sizeParams\r\n    });\r\n}\r\nfunction createParamsProvider(ctx, structure, props) {\r\n    if (props === void 0) { props = {}; }\r\n    var themeCtx = ctx.representation.structure.themes;\r\n    var themeDataCtx = { structure: structure };\r\n    var repr = props.type || ctx.representation.structure.registry.default.provider;\r\n    var reprDefaultParams = PD.getDefaultValues(repr.getParams(themeCtx, structure));\r\n    var reprParams = Object.assign(reprDefaultParams, props.typeParams);\r\n    var color = props.color || themeCtx.colorThemeRegistry.get(repr.defaultColorTheme.name);\r\n    var colorDefaultParams = PD.getDefaultValues(color.getParams(themeDataCtx));\r\n    if (color.name === repr.defaultColorTheme.name)\r\n        Object.assign(colorDefaultParams, repr.defaultColorTheme.props);\r\n    var colorParams = Object.assign(colorDefaultParams, props.colorParams);\r\n    var size = props.size || themeCtx.sizeThemeRegistry.get(repr.defaultSizeTheme.name);\r\n    var sizeDefaultParams = PD.getDefaultValues(size.getParams(themeDataCtx));\r\n    if (size.name === repr.defaultSizeTheme.name)\r\n        Object.assign(sizeDefaultParams, repr.defaultSizeTheme.props);\r\n    var sizeParams = Object.assign(sizeDefaultParams, props.sizeParams);\r\n    return ({\r\n        type: { name: repr.name, params: reprParams },\r\n        colorTheme: { name: color.name, params: colorParams },\r\n        sizeTheme: { name: size.name, params: sizeParams }\r\n    });\r\n}\r\n//# sourceMappingURL=structure-representation-params.js.map"]},"metadata":{},"sourceType":"module"}