{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { iterableToArray } from '../mol-data/util/array'; // TODO use set@@iterator when targeting es6\n\nexport var SetUtils;\n\n(function (SetUtils) {\n  function toArray(set) {\n    return iterableToArray(set.values());\n  }\n\n  SetUtils.toArray = toArray;\n  /** Test if set a contains all elements of set b. */\n\n  function isSuperset(setA, setB) {\n    var flag = true;\n    setB.forEach(function (elem) {\n      if (!setA.has(elem)) flag = false;\n    });\n    return flag;\n  }\n\n  SetUtils.isSuperset = isSuperset;\n  /** Add all elements from `sets` to `out` */\n\n  function add(out) {\n    var sets = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      sets[_i - 1] = arguments[_i];\n    }\n\n    for (var i = 0; i < sets.length; i++) {\n      sets[i].forEach(function (elem) {\n        return out.add(elem);\n      });\n    }\n\n    return out;\n  }\n\n  SetUtils.add = add;\n  /** Create set containing elements of both set a and set b. */\n\n  function union(setA, setB) {\n    var union = new Set(setA);\n    setB.forEach(function (elem) {\n      return union.add(elem);\n    });\n    return union;\n  }\n\n  SetUtils.union = union;\n\n  function unionMany() {\n    var sets = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      sets[_i] = arguments[_i];\n    }\n\n    if (sets.length === 0) return new Set();\n    if (sets.length === 1) new Set(sets[0]);\n    var union = new Set(sets[0]);\n\n    for (var i = 1, il = sets.length; i < il; i++) {\n      sets[i].forEach(function (elem) {\n        return union.add(elem);\n      });\n    }\n\n    return union;\n  }\n\n  SetUtils.unionMany = unionMany;\n\n  function unionManyArrays(arrays) {\n    if (arrays.length === 0) return new Set();\n    var union = new Set(arrays[0]);\n\n    for (var i = 1; i < arrays.length; i++) {\n      for (var _i = 0, _a = arrays[i]; _i < _a.length; _i++) {\n        var elem = _a[_i];\n        union.add(elem);\n      }\n    }\n\n    return union;\n  }\n\n  SetUtils.unionManyArrays = unionManyArrays;\n  /** Create set containing elements of set a that are also in set b. */\n\n  function intersection(setA, setB) {\n    var intersection = new Set();\n    setB.forEach(function (elem) {\n      if (setA.has(elem)) intersection.add(elem);\n    });\n    return intersection;\n  }\n\n  SetUtils.intersection = intersection;\n\n  function areIntersecting(setA, setB) {\n    var flag = false;\n    setB.forEach(function (elem) {\n      if (setA.has(elem)) flag = true;\n    });\n    return flag;\n  }\n\n  SetUtils.areIntersecting = areIntersecting;\n\n  function intersectionSize(setA, setB) {\n    var count = 0;\n    setB.forEach(function (elem) {\n      if (setA.has(elem)) count += 1;\n    });\n    return count;\n  }\n\n  SetUtils.intersectionSize = intersectionSize;\n  /** Create set containing elements of set a that are not in set b. */\n\n  function difference(setA, setB) {\n    var difference = new Set(setA);\n    setB.forEach(function (elem) {\n      return difference.delete(elem);\n    });\n    return difference;\n  }\n\n  SetUtils.difference = difference;\n  /** Number of elements that are in set a but not in set b. */\n\n  function differenceSize(setA, setB) {\n    var count = setA.size;\n    setA.forEach(function (elem) {\n      if (setB.has(elem)) count -= 1;\n    });\n    return count;\n  }\n\n  SetUtils.differenceSize = differenceSize;\n  /** Test if set a and b contain the same elements. */\n\n  function areEqual(setA, setB) {\n    if (setA.size !== setB.size) return false;\n    var flag = true;\n    setB.forEach(function (elem) {\n      if (!setA.has(elem)) flag = false;\n    });\n    return flag;\n  }\n\n  SetUtils.areEqual = areEqual;\n})(SetUtils || (SetUtils = {}));","map":{"version":3,"sources":["../../src/mol-util/set.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { iterableToArray } from '../mol-data/util/array';\r\n// TODO use set@@iterator when targeting es6\r\nexport var SetUtils;\r\n(function (SetUtils) {\r\n    function toArray(set) {\r\n        return iterableToArray(set.values());\r\n    }\r\n    SetUtils.toArray = toArray;\r\n    /** Test if set a contains all elements of set b. */\r\n    function isSuperset(setA, setB) {\r\n        var flag = true;\r\n        setB.forEach(function (elem) {\r\n            if (!setA.has(elem))\r\n                flag = false;\r\n        });\r\n        return flag;\r\n    }\r\n    SetUtils.isSuperset = isSuperset;\r\n    /** Add all elements from `sets` to `out` */\r\n    function add(out) {\r\n        var sets = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            sets[_i - 1] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < sets.length; i++) {\r\n            sets[i].forEach(function (elem) { return out.add(elem); });\r\n        }\r\n        return out;\r\n    }\r\n    SetUtils.add = add;\r\n    /** Create set containing elements of both set a and set b. */\r\n    function union(setA, setB) {\r\n        var union = new Set(setA);\r\n        setB.forEach(function (elem) { return union.add(elem); });\r\n        return union;\r\n    }\r\n    SetUtils.union = union;\r\n    function unionMany() {\r\n        var sets = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            sets[_i] = arguments[_i];\r\n        }\r\n        if (sets.length === 0)\r\n            return new Set();\r\n        if (sets.length === 1)\r\n            new Set(sets[0]);\r\n        var union = new Set(sets[0]);\r\n        for (var i = 1, il = sets.length; i < il; i++) {\r\n            sets[i].forEach(function (elem) { return union.add(elem); });\r\n        }\r\n        return union;\r\n    }\r\n    SetUtils.unionMany = unionMany;\r\n    function unionManyArrays(arrays) {\r\n        if (arrays.length === 0)\r\n            return new Set();\r\n        var union = new Set(arrays[0]);\r\n        for (var i = 1; i < arrays.length; i++) {\r\n            for (var _i = 0, _a = arrays[i]; _i < _a.length; _i++) {\r\n                var elem = _a[_i];\r\n                union.add(elem);\r\n            }\r\n        }\r\n        return union;\r\n    }\r\n    SetUtils.unionManyArrays = unionManyArrays;\r\n    /** Create set containing elements of set a that are also in set b. */\r\n    function intersection(setA, setB) {\r\n        var intersection = new Set();\r\n        setB.forEach(function (elem) {\r\n            if (setA.has(elem))\r\n                intersection.add(elem);\r\n        });\r\n        return intersection;\r\n    }\r\n    SetUtils.intersection = intersection;\r\n    function areIntersecting(setA, setB) {\r\n        var flag = false;\r\n        setB.forEach(function (elem) {\r\n            if (setA.has(elem))\r\n                flag = true;\r\n        });\r\n        return flag;\r\n    }\r\n    SetUtils.areIntersecting = areIntersecting;\r\n    function intersectionSize(setA, setB) {\r\n        var count = 0;\r\n        setB.forEach(function (elem) {\r\n            if (setA.has(elem))\r\n                count += 1;\r\n        });\r\n        return count;\r\n    }\r\n    SetUtils.intersectionSize = intersectionSize;\r\n    /** Create set containing elements of set a that are not in set b. */\r\n    function difference(setA, setB) {\r\n        var difference = new Set(setA);\r\n        setB.forEach(function (elem) { return difference.delete(elem); });\r\n        return difference;\r\n    }\r\n    SetUtils.difference = difference;\r\n    /** Number of elements that are in set a but not in set b. */\r\n    function differenceSize(setA, setB) {\r\n        var count = setA.size;\r\n        setA.forEach(function (elem) {\r\n            if (setB.has(elem))\r\n                count -= 1;\r\n        });\r\n        return count;\r\n    }\r\n    SetUtils.differenceSize = differenceSize;\r\n    /** Test if set a and b contain the same elements. */\r\n    function areEqual(setA, setB) {\r\n        if (setA.size !== setB.size)\r\n            return false;\r\n        var flag = true;\r\n        setB.forEach(function (elem) {\r\n            if (!setA.has(elem))\r\n                flag = false;\r\n        });\r\n        return flag;\r\n    }\r\n    SetUtils.areEqual = areEqual;\r\n})(SetUtils || (SetUtils = {}));\r\n//# sourceMappingURL=set.js.map"]},"metadata":{},"sourceType":"module"}