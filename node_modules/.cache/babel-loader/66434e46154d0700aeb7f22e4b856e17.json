{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { StructureElement } from '../../mol-model/structure';\nimport { StateTransforms } from '../../mol-plugin-state/transforms';\nimport { StateSelection } from '../../mol-state';\nimport { isEmptyLoci, Loci } from '../../mol-model/loci';\nimport { Transparency } from '../../mol-theme/transparency';\nvar TransparencyManagerTag = 'transparency-controls';\nexport function setStructureTransparency(plugin, components, value, lociGetter, types) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , eachRepr(plugin, components, function (update, repr, transparencyCell) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var structure, loci, layer, bundleLayers, filtered, filtered;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (types && types.length > 0 && !types.includes(repr.params.values.type.name)) return [2\n                    /*return*/\n                    ];\n                    structure = repr.obj.data.sourceData;\n                    return [4\n                    /*yield*/\n                    , lociGetter(structure.root)];\n\n                  case 1:\n                    loci = _a.sent();\n                    if (Loci.isEmpty(loci) || isEmptyLoci(loci)) return [2\n                    /*return*/\n                    ];\n                    layer = {\n                      bundle: StructureElement.Bundle.fromLoci(loci),\n                      value: value\n                    };\n\n                    if (transparencyCell) {\n                      bundleLayers = __spreadArray(__spreadArray([], transparencyCell.params.values.layers, true), [layer], false);\n                      filtered = getFilteredBundle(bundleLayers, structure);\n                      update.to(transparencyCell).update(Transparency.toBundle(filtered));\n                    } else {\n                      filtered = getFilteredBundle([layer], structure);\n                      update.to(repr.transform.ref).apply(StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, Transparency.toBundle(filtered), {\n                        tags: TransparencyManagerTag\n                      });\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\nexport function clearStructureTransparency(plugin, components, types) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , eachRepr(plugin, components, function (update, repr, transparencyCell) {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                if (types && types.length > 0 && !types.includes(repr.params.values.type.name)) return [2\n                /*return*/\n                ];\n\n                if (transparencyCell) {\n                  update.delete(transparencyCell.transform.ref);\n                }\n\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction eachRepr(plugin, components, callback) {\n  return __awaiter(this, void 0, void 0, function () {\n    var state, update, _i, components_1, c, _a, _b, r, transparency;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          state = plugin.state.data;\n          update = state.build();\n          _i = 0, components_1 = components;\n          _c.label = 1;\n\n        case 1:\n          if (!(_i < components_1.length)) return [3\n          /*break*/\n          , 6];\n          c = components_1[_i];\n          _a = 0, _b = c.representations;\n          _c.label = 2;\n\n        case 2:\n          if (!(_a < _b.length)) return [3\n          /*break*/\n          , 5];\n          r = _b[_a];\n          transparency = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, r.cell.transform.ref).withTag(TransparencyManagerTag));\n          return [4\n          /*yield*/\n          , callback(update, r.cell, transparency[0])];\n\n        case 3:\n          _c.sent();\n\n          _c.label = 4;\n\n        case 4:\n          _a++;\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 6:\n          return [2\n          /*return*/\n          , update.commit({\n            doNotUpdateCurrent: true\n          })];\n      }\n    });\n  });\n}\n/** filter transparency layers for given structure */\n\n\nfunction getFilteredBundle(layers, structure) {\n  var transparency = Transparency.ofBundle(layers, structure.root);\n  var merged = Transparency.merge(transparency);\n  return Transparency.filter(merged, structure);\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/helpers/structure-transparency.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\r\nimport { StructureElement } from '../../mol-model/structure';\r\nimport { StateTransforms } from '../../mol-plugin-state/transforms';\r\nimport { StateSelection } from '../../mol-state';\r\nimport { isEmptyLoci, Loci } from '../../mol-model/loci';\r\nimport { Transparency } from '../../mol-theme/transparency';\r\nvar TransparencyManagerTag = 'transparency-controls';\r\nexport function setStructureTransparency(plugin, components, value, lociGetter, types) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, eachRepr(plugin, components, function (update, repr, transparencyCell) { return __awaiter(_this, void 0, void 0, function () {\r\n                        var structure, loci, layer, bundleLayers, filtered, filtered;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    if (types && types.length > 0 && !types.includes(repr.params.values.type.name))\r\n                                        return [2 /*return*/];\r\n                                    structure = repr.obj.data.sourceData;\r\n                                    return [4 /*yield*/, lociGetter(structure.root)];\r\n                                case 1:\r\n                                    loci = _a.sent();\r\n                                    if (Loci.isEmpty(loci) || isEmptyLoci(loci))\r\n                                        return [2 /*return*/];\r\n                                    layer = {\r\n                                        bundle: StructureElement.Bundle.fromLoci(loci),\r\n                                        value: value,\r\n                                    };\r\n                                    if (transparencyCell) {\r\n                                        bundleLayers = __spreadArray(__spreadArray([], transparencyCell.params.values.layers, true), [layer], false);\r\n                                        filtered = getFilteredBundle(bundleLayers, structure);\r\n                                        update.to(transparencyCell).update(Transparency.toBundle(filtered));\r\n                                    }\r\n                                    else {\r\n                                        filtered = getFilteredBundle([layer], structure);\r\n                                        update.to(repr.transform.ref)\r\n                                            .apply(StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, Transparency.toBundle(filtered), { tags: TransparencyManagerTag });\r\n                                    }\r\n                                    return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function clearStructureTransparency(plugin, components, types) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, eachRepr(plugin, components, function (update, repr, transparencyCell) { return __awaiter(_this, void 0, void 0, function () {\r\n                        return __generator(this, function (_a) {\r\n                            if (types && types.length > 0 && !types.includes(repr.params.values.type.name))\r\n                                return [2 /*return*/];\r\n                            if (transparencyCell) {\r\n                                update.delete(transparencyCell.transform.ref);\r\n                            }\r\n                            return [2 /*return*/];\r\n                        });\r\n                    }); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eachRepr(plugin, components, callback) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var state, update, _i, components_1, c, _a, _b, r, transparency;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    state = plugin.state.data;\r\n                    update = state.build();\r\n                    _i = 0, components_1 = components;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(_i < components_1.length)) return [3 /*break*/, 6];\r\n                    c = components_1[_i];\r\n                    _a = 0, _b = c.representations;\r\n                    _c.label = 2;\r\n                case 2:\r\n                    if (!(_a < _b.length)) return [3 /*break*/, 5];\r\n                    r = _b[_a];\r\n                    transparency = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, r.cell.transform.ref).withTag(TransparencyManagerTag));\r\n                    return [4 /*yield*/, callback(update, r.cell, transparency[0])];\r\n                case 3:\r\n                    _c.sent();\r\n                    _c.label = 4;\r\n                case 4:\r\n                    _a++;\r\n                    return [3 /*break*/, 2];\r\n                case 5:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 6: return [2 /*return*/, update.commit({ doNotUpdateCurrent: true })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** filter transparency layers for given structure */\r\nfunction getFilteredBundle(layers, structure) {\r\n    var transparency = Transparency.ofBundle(layers, structure.root);\r\n    var merged = Transparency.merge(transparency);\r\n    return Transparency.filter(merged, structure);\r\n}\r\n//# sourceMappingURL=structure-transparency.js.map"]},"metadata":{},"sourceType":"module"}