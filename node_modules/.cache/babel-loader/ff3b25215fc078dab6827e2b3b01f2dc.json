{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Vec3, Mat4 } from '../../../mol-math/linear-algebra';\nimport { Box } from '../../../mol-geo/primitive/box';\nimport { Unit } from '../../../mol-model/structure';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { Segmentation } from '../../../mol-data/int';\nimport { isNucleic, isPurineBase, isPyrimidineBase } from '../../../mol-model/structure/model/types';\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { NucleotideLocationIterator, getNucleotideElementLoci, eachNucleotideElement } from './util/nucleotide';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry'; // TODO support blocks for multiple locations (including from microheterogeneity)\n\nvar p1 = Vec3();\nvar p2 = Vec3();\nvar p3 = Vec3();\nvar p4 = Vec3();\nvar p5 = Vec3();\nvar p6 = Vec3();\nvar v12 = Vec3();\nvar v34 = Vec3();\nvar vC = Vec3();\nvar center = Vec3();\nvar t = Mat4.identity();\nvar sVec = Vec3();\nvar box = Box();\nexport var NucleotideBlockMeshParams = {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  radialSegments: PD.Numeric(16, {\n    min: 2,\n    max: 56,\n    step: 2\n  }, BaseGeometry.CustomQualityParamInfo)\n};\nexport var DefaultNucleotideBlockMeshProps = PD.getDefaultValues(NucleotideBlockMeshParams);\n\nfunction createNucleotideBlockMesh(ctx, unit, structure, theme, props, mesh) {\n  if (!Unit.isAtomic(unit)) return Mesh.createEmpty(mesh);\n  var nucleotideElementCount = unit.nucleotideElements.length;\n  if (!nucleotideElementCount) return Mesh.createEmpty(mesh);\n  var sizeFactor = props.sizeFactor,\n      radialSegments = props.radialSegments;\n  var vertexCount = nucleotideElementCount * (box.vertices.length / 3 + radialSegments * 2);\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 4, mesh);\n  var elements = unit.elements,\n      model = unit.model;\n  var _a = model.atomicHierarchy,\n      chainAtomSegments = _a.chainAtomSegments,\n      residueAtomSegments = _a.residueAtomSegments,\n      atoms = _a.atoms,\n      atomicIndex = _a.index;\n  var _b = model.atomicHierarchy.derived.residue,\n      moleculeType = _b.moleculeType,\n      traceElementIndex = _b.traceElementIndex;\n  var label_comp_id = atoms.label_comp_id;\n  var pos = unit.conformation.invariantPosition;\n  var chainIt = Segmentation.transientSegments(chainAtomSegments, elements);\n  var residueIt = Segmentation.transientSegments(residueAtomSegments, elements);\n  var cylinderProps = {\n    radiusTop: 1 * sizeFactor,\n    radiusBottom: 1 * sizeFactor,\n    radialSegments: radialSegments,\n    bottomCap: true\n  };\n  var i = 0;\n\n  while (chainIt.hasNext) {\n    residueIt.setSegment(chainIt.move());\n\n    while (residueIt.hasNext) {\n      var residueIndex = residueIt.move().index;\n\n      if (isNucleic(moleculeType[residueIndex])) {\n        var compId = label_comp_id.value(residueAtomSegments.offsets[residueIndex]);\n        var idx1 = -1,\n            idx2 = -1,\n            idx3 = -1,\n            idx4 = -1,\n            idx5 = -1,\n            idx6 = -1;\n        var width = 4.5,\n            depth = 2.5 * sizeFactor;\n        var height = 4.5;\n        var isPurine = isPurineBase(compId);\n        var isPyrimidine = isPyrimidineBase(compId);\n\n        if (!isPurine && !isPyrimidine) {\n          // detect Purine or Pyrimidin based on geometry\n          var idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          var idxN9 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\n\n          if (idxC4 !== -1 && idxN9 !== -1 && Vec3.distance(pos(idxC4, p1), pos(idxN9, p2)) < 1.6) {\n            isPurine = true;\n          } else {\n            isPyrimidine = true;\n          }\n        }\n\n        if (isPurine) {\n          height = 4.5;\n          idx1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\n          idx2 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          idx3 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\n          idx4 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\n          idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\n          idx6 = traceElementIndex[residueIndex];\n        } else if (isPyrimidine) {\n          height = 3.0;\n          idx1 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\n          idx2 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\n          idx3 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          idx4 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\n          idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\n\n          if (idx5 === -1) {\n            // modified ring, e.g. DZ\n            idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'C1');\n          }\n\n          idx6 = traceElementIndex[residueIndex];\n        }\n\n        if (idx5 !== -1 && idx6 !== -1) {\n          pos(idx5, p5);\n          pos(idx6, p6);\n          builderState.currentGroup = i;\n          addCylinder(builderState, p5, p6, 1, cylinderProps);\n\n          if (idx1 !== -1 && idx2 !== -1 && idx3 !== -1 && idx4 !== -1) {\n            pos(idx1, p1);\n            pos(idx2, p2);\n            pos(idx3, p3);\n            pos(idx4, p4);\n            Vec3.normalize(v12, Vec3.sub(v12, p2, p1));\n            Vec3.normalize(v34, Vec3.sub(v34, p4, p3));\n            Vec3.normalize(vC, Vec3.cross(vC, v12, v34));\n            Mat4.targetTo(t, p1, p2, vC);\n            Vec3.scaleAndAdd(center, p1, v12, height / 2 - 0.2);\n            Mat4.scale(t, t, Vec3.set(sVec, width, depth, height));\n            Mat4.setTranslation(t, center);\n            MeshBuilder.addPrimitive(builderState, t, box);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var NucleotideBlockParams = __assign(__assign({}, UnitsMeshParams), NucleotideBlockMeshParams);\nexport function NucleotideBlockVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(NucleotideBlockParams),\n    createGeometry: createNucleotideBlockMesh,\n    createLocationIterator: NucleotideLocationIterator.fromGroup,\n    getLoci: getNucleotideElementLoci,\n    eachLocation: eachNucleotideElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.radialSegments !== currentProps.radialSegments;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/nucleotide-block-mesh.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Vec3, Mat4 } from '../../../mol-math/linear-algebra';\r\nimport { Box } from '../../../mol-geo/primitive/box';\r\nimport { Unit } from '../../../mol-model/structure';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Segmentation } from '../../../mol-data/int';\r\nimport { isNucleic, isPurineBase, isPyrimidineBase } from '../../../mol-model/structure/model/types';\r\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { NucleotideLocationIterator, getNucleotideElementLoci, eachNucleotideElement } from './util/nucleotide';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\n// TODO support blocks for multiple locations (including from microheterogeneity)\r\nvar p1 = Vec3();\r\nvar p2 = Vec3();\r\nvar p3 = Vec3();\r\nvar p4 = Vec3();\r\nvar p5 = Vec3();\r\nvar p6 = Vec3();\r\nvar v12 = Vec3();\r\nvar v34 = Vec3();\r\nvar vC = Vec3();\r\nvar center = Vec3();\r\nvar t = Mat4.identity();\r\nvar sVec = Vec3();\r\nvar box = Box();\r\nexport var NucleotideBlockMeshParams = {\r\n    sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }),\r\n    radialSegments: PD.Numeric(16, { min: 2, max: 56, step: 2 }, BaseGeometry.CustomQualityParamInfo),\r\n};\r\nexport var DefaultNucleotideBlockMeshProps = PD.getDefaultValues(NucleotideBlockMeshParams);\r\nfunction createNucleotideBlockMesh(ctx, unit, structure, theme, props, mesh) {\r\n    if (!Unit.isAtomic(unit))\r\n        return Mesh.createEmpty(mesh);\r\n    var nucleotideElementCount = unit.nucleotideElements.length;\r\n    if (!nucleotideElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var sizeFactor = props.sizeFactor, radialSegments = props.radialSegments;\r\n    var vertexCount = nucleotideElementCount * (box.vertices.length / 3 + radialSegments * 2);\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 4, mesh);\r\n    var elements = unit.elements, model = unit.model;\r\n    var _a = model.atomicHierarchy, chainAtomSegments = _a.chainAtomSegments, residueAtomSegments = _a.residueAtomSegments, atoms = _a.atoms, atomicIndex = _a.index;\r\n    var _b = model.atomicHierarchy.derived.residue, moleculeType = _b.moleculeType, traceElementIndex = _b.traceElementIndex;\r\n    var label_comp_id = atoms.label_comp_id;\r\n    var pos = unit.conformation.invariantPosition;\r\n    var chainIt = Segmentation.transientSegments(chainAtomSegments, elements);\r\n    var residueIt = Segmentation.transientSegments(residueAtomSegments, elements);\r\n    var cylinderProps = { radiusTop: 1 * sizeFactor, radiusBottom: 1 * sizeFactor, radialSegments: radialSegments, bottomCap: true };\r\n    var i = 0;\r\n    while (chainIt.hasNext) {\r\n        residueIt.setSegment(chainIt.move());\r\n        while (residueIt.hasNext) {\r\n            var residueIndex = residueIt.move().index;\r\n            if (isNucleic(moleculeType[residueIndex])) {\r\n                var compId = label_comp_id.value(residueAtomSegments.offsets[residueIndex]);\r\n                var idx1 = -1, idx2 = -1, idx3 = -1, idx4 = -1, idx5 = -1, idx6 = -1;\r\n                var width = 4.5, depth = 2.5 * sizeFactor;\r\n                var height = 4.5;\r\n                var isPurine = isPurineBase(compId);\r\n                var isPyrimidine = isPyrimidineBase(compId);\r\n                if (!isPurine && !isPyrimidine) {\r\n                    // detect Purine or Pyrimidin based on geometry\r\n                    var idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    var idxN9 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\r\n                    if (idxC4 !== -1 && idxN9 !== -1 && Vec3.distance(pos(idxC4, p1), pos(idxN9, p2)) < 1.6) {\r\n                        isPurine = true;\r\n                    }\r\n                    else {\r\n                        isPyrimidine = true;\r\n                    }\r\n                }\r\n                if (isPurine) {\r\n                    height = 4.5;\r\n                    idx1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\r\n                    idx2 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    idx3 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\r\n                    idx4 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\r\n                    idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\r\n                    idx6 = traceElementIndex[residueIndex];\r\n                }\r\n                else if (isPyrimidine) {\r\n                    height = 3.0;\r\n                    idx1 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\r\n                    idx2 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\r\n                    idx3 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    idx4 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\r\n                    idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\r\n                    if (idx5 === -1) {\r\n                        // modified ring, e.g. DZ\r\n                        idx5 = atomicIndex.findAtomOnResidue(residueIndex, 'C1');\r\n                    }\r\n                    idx6 = traceElementIndex[residueIndex];\r\n                }\r\n                if (idx5 !== -1 && idx6 !== -1) {\r\n                    pos(idx5, p5);\r\n                    pos(idx6, p6);\r\n                    builderState.currentGroup = i;\r\n                    addCylinder(builderState, p5, p6, 1, cylinderProps);\r\n                    if (idx1 !== -1 && idx2 !== -1 && idx3 !== -1 && idx4 !== -1) {\r\n                        pos(idx1, p1);\r\n                        pos(idx2, p2);\r\n                        pos(idx3, p3);\r\n                        pos(idx4, p4);\r\n                        Vec3.normalize(v12, Vec3.sub(v12, p2, p1));\r\n                        Vec3.normalize(v34, Vec3.sub(v34, p4, p3));\r\n                        Vec3.normalize(vC, Vec3.cross(vC, v12, v34));\r\n                        Mat4.targetTo(t, p1, p2, vC);\r\n                        Vec3.scaleAndAdd(center, p1, v12, height / 2 - 0.2);\r\n                        Mat4.scale(t, t, Vec3.set(sVec, width, depth, height));\r\n                        Mat4.setTranslation(t, center);\r\n                        MeshBuilder.addPrimitive(builderState, t, box);\r\n                    }\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var NucleotideBlockParams = __assign(__assign({}, UnitsMeshParams), NucleotideBlockMeshParams);\r\nexport function NucleotideBlockVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(NucleotideBlockParams),\r\n        createGeometry: createNucleotideBlockMesh,\r\n        createLocationIterator: NucleotideLocationIterator.fromGroup,\r\n        getLoci: getNucleotideElementLoci,\r\n        eachLocation: eachNucleotideElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=nucleotide-block-mesh.js.map"]},"metadata":{},"sourceType":"module"}