{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/Projects/AlphaFoldVisualisation/alphafold-viewer/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Viewer from './viewer';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [url, setUrl] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formElements = form.elements; // const target = event.currentTarget as typeof event.currentTargtarget & {\n    //     url: { value:string }\n    // }\n\n    console.log(formElements);\n    setUrl(formElements.url.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AlphaFold Protein Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Submit Alphafold URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: url && /*#__PURE__*/_jsxDEV(Viewer, {\n        top: 250,\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"ZV/BRor2ecoM1gSD+06O4c7I8qc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daniel/Documents/Projects/AlphaFoldVisualisation/alphafold-viewer/src/App.tsx"],"names":["Viewer","useState","App","url","setUrl","handleSubmit","event","preventDefault","form","currentTarget","formElements","elements","console","log","value"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAwB,OAAxB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBH,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMI,YAAY,GAAIC,KAAD,IAAkD;AACnEA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,aAAnB;AACA,UAAMC,YAAY,GAAGF,IAAI,CAACG,QAA1B,CAHmE,CAMnE;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACAN,IAAAA,MAAM,CAACM,YAAY,CAACP,GAAb,CAAiBW,KAAlB,CAAN;AACH,GAXD;;AAaA,sBAAO;AAAA,4BACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,eAEP;AAAM,MAAA,QAAQ,EAAET,YAAhB;AAAA,8BACE;AAAA,yDACE;AACE,UAAA,IAAI,EAAC;AADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFO,eAUP;AAAA;AAAA;AAAA;AAAA,YAVO,eAWP;AAAA,gBACKF,GAAG,iBAAI,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAE,GAAb;AAAkB,QAAA,GAAG,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA;AADZ;AAAA;AAAA;AAAA;AAAA,YAXO;AAAA,kBAAP;AAeH;;GA/BQD,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import Viewer from './viewer'\nimport { useState} from 'react'\n\nfunction App() {    \n    const [url, setUrl] = useState('')\n\n    const handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const form = event.currentTarget\n        const formElements = form.elements as typeof form.elements & {\n            url: {value: string}\n          }\n        // const target = event.currentTarget as typeof event.currentTargtarget & {\n        //     url: { value:string }\n        // }\n        console.log(formElements)\n        setUrl(formElements.url.value)\n    }\n\n    return <>\n    <h1>AlphaFold Protein Viewer</h1>\n    <form onSubmit={handleSubmit}>\n      <label>Submit Alphafold URL:\n        <input \n          type=\"text\"\n        />\n      </label>\n      <input type=\"submit\" />\n    </form>\n    <br/>\n    <div>\n        {url && <Viewer top={250} url={url} ></Viewer>}\n    </div>\n    </>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}