{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sch√§fer, Marco <marco.schaefer@uni-tuebingen.de>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { Color } from '../../mol-util/color';\nimport { MeshBuilder } from '../../mol-geo/geometry/mesh/mesh-builder';\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\nimport { Shape } from '../../mol-model/shape';\nimport { ChunkedArray } from '../../mol-data/util';\nimport { arrayMax, fillSerial } from '../../mol-util/array';\nimport { Column } from '../../mol-data/db';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { ColorNames } from '../../mol-util/color/names';\nimport { deepClone } from '../../mol-util/object';\nimport { stringToWords } from '../../mol-util/string'; // TODO support 'edge' element, see https://www.mathworks.com/help/vision/ug/the-ply-format.html\n// TODO support missing face element\n\nfunction createPlyShapeParams(plyFile) {\n  var vertex = plyFile && plyFile.getElement('vertex');\n  var material = plyFile && plyFile.getElement('material');\n  var defaultValues = {\n    group: '',\n    vRed: '',\n    vGreen: '',\n    vBlue: '',\n    mRed: '',\n    mGreen: '',\n    mBlue: ''\n  };\n  var groupOptions = [['', '']];\n  var colorOptions = [['', '']];\n\n  if (vertex) {\n    for (var i = 0, il = vertex.propertyNames.length; i < il; ++i) {\n      var name_1 = vertex.propertyNames[i];\n      var type = vertex.propertyTypes[i];\n      if (type === 'uchar' || type === 'uint8' || type === 'ushort' || type === 'uint16' || type === 'uint' || type === 'uint32' || type === 'int') groupOptions.push([name_1, name_1]);\n      if (type === 'uchar' || type === 'uint8') colorOptions.push([name_1, name_1]);\n    } // TODO hardcoded as convenience for data provided by MegaMol\n\n\n    if (vertex.propertyNames.includes('atomid')) defaultValues.group = 'atomid';else if (vertex.propertyNames.includes('material_index')) defaultValues.group = 'material_index';\n    if (vertex.propertyNames.includes('red')) defaultValues.vRed = 'red';\n    if (vertex.propertyNames.includes('green')) defaultValues.vGreen = 'green';\n    if (vertex.propertyNames.includes('blue')) defaultValues.vBlue = 'blue';\n  }\n\n  var materialOptions = [['', '']];\n\n  if (material) {\n    for (var i = 0, il = material.propertyNames.length; i < il; ++i) {\n      var name_2 = material.propertyNames[i];\n      var type = material.propertyTypes[i];\n      if (type === 'uchar' || type === 'uint8') materialOptions.push([name_2, name_2]);\n    }\n\n    if (material.propertyNames.includes('red')) defaultValues.mRed = 'red';\n    if (material.propertyNames.includes('green')) defaultValues.mGreen = 'green';\n    if (material.propertyNames.includes('blue')) defaultValues.mBlue = 'blue';\n  }\n\n  var defaultColoring = defaultValues.vRed && defaultValues.vGreen && defaultValues.vBlue ? 'vertex' : defaultValues.mRed && defaultValues.mGreen && defaultValues.mBlue ? 'material' : 'uniform';\n  return __assign(__assign({}, Mesh.Params), {\n    coloring: PD.MappedStatic(defaultColoring, {\n      vertex: PD.Group({\n        red: PD.Select(defaultValues.vRed, colorOptions, {\n          label: 'Red Property'\n        }),\n        green: PD.Select(defaultValues.vGreen, colorOptions, {\n          label: 'Green Property'\n        }),\n        blue: PD.Select(defaultValues.vBlue, colorOptions, {\n          label: 'Blue Property'\n        })\n      }, {\n        isFlat: true\n      }),\n      material: PD.Group({\n        red: PD.Select(defaultValues.mRed, materialOptions, {\n          label: 'Red Property'\n        }),\n        green: PD.Select(defaultValues.mGreen, materialOptions, {\n          label: 'Green Property'\n        }),\n        blue: PD.Select(defaultValues.mBlue, materialOptions, {\n          label: 'Blue Property'\n        })\n      }, {\n        isFlat: true\n      }),\n      uniform: PD.Group({\n        color: PD.Color(ColorNames.grey)\n      }, {\n        isFlat: true\n      })\n    }),\n    grouping: PD.MappedStatic(defaultValues.group ? 'vertex' : 'none', {\n      vertex: PD.Group({\n        group: PD.Select(defaultValues.group, groupOptions, {\n          label: 'Group Property'\n        })\n      }, {\n        isFlat: true\n      }),\n      none: PD.Group({})\n    })\n  });\n}\n\nexport var PlyShapeParams = createPlyShapeParams();\n\nfunction addVerticesRange(begI, endI, state, vertex, groupIds) {\n  var vertices = state.vertices,\n      normals = state.normals,\n      groups = state.groups;\n  var x = vertex.getProperty('x');\n  var y = vertex.getProperty('y');\n  var z = vertex.getProperty('z');\n  if (!x || !y || !z) throw new Error('missing coordinate properties');\n  var nx = vertex.getProperty('nx');\n  var ny = vertex.getProperty('ny');\n  var nz = vertex.getProperty('nz');\n  var hasNormals = !!nx && !!ny && !!nz;\n\n  for (var i = begI; i < endI; ++i) {\n    ChunkedArray.add3(vertices, x.value(i), y.value(i), z.value(i));\n    if (hasNormals) ChunkedArray.add3(normals, nx.value(i), ny.value(i), nz.value(i));\n    ChunkedArray.add(groups, groupIds[i]);\n  }\n}\n\nfunction addFacesRange(begI, endI, state, face) {\n  var indices = state.indices;\n\n  for (var i = begI; i < endI; ++i) {\n    var _a = face.value(i),\n        entries = _a.entries,\n        count = _a.count;\n\n    if (count === 3) {\n      // triangle\n      ChunkedArray.add3(indices, entries[0], entries[1], entries[2]);\n    } else if (count === 4) {\n      // quadrilateral\n      ChunkedArray.add3(indices, entries[2], entries[1], entries[0]);\n      ChunkedArray.add3(indices, entries[2], entries[0], entries[3]);\n    }\n  }\n}\n\nfunction getMesh(ctx, vertex, face, groupIds, mesh) {\n  return __awaiter(this, void 0, void 0, function () {\n    var builderState, x, y, z, nx, ny, nz, hasNormals, updateChunk, i, il, i, il, m;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          builderState = MeshBuilder.createState(vertex.rowCount, vertex.rowCount / 4, mesh);\n          x = vertex.getProperty('x');\n          y = vertex.getProperty('y');\n          z = vertex.getProperty('z');\n          if (!x || !y || !z) throw new Error('missing coordinate properties');\n          nx = vertex.getProperty('nx');\n          ny = vertex.getProperty('ny');\n          nz = vertex.getProperty('nz');\n          hasNormals = !!nx && !!ny && !!nz;\n          updateChunk = 100000;\n          i = 0, il = vertex.rowCount;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < il)) return [3\n          /*break*/\n          , 4];\n          addVerticesRange(i, Math.min(i + updateChunk, il), builderState, vertex, groupIds);\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , ctx.update({\n            message: 'adding ply mesh vertices',\n            current: i,\n            max: il\n          })];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          i += updateChunk;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          i = 0, il = face.rowCount;\n          _a.label = 5;\n\n        case 5:\n          if (!(i < il)) return [3\n          /*break*/\n          , 8];\n          addFacesRange(i, Math.min(i + updateChunk, il), builderState, face);\n          if (!ctx.shouldUpdate) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , ctx.update({\n            message: 'adding ply mesh faces',\n            current: i,\n            max: il\n          })];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          i += updateChunk;\n          return [3\n          /*break*/\n          , 5];\n\n        case 8:\n          m = MeshBuilder.getMesh(builderState);\n          if (!hasNormals) Mesh.computeNormals(m);\n          return [2\n          /*return*/\n          , m];\n      }\n    });\n  });\n}\n\nvar int = Column.Schema.int;\n\nfunction getGrouping(vertex, props) {\n  var grouping = props.grouping;\n  var rowCount = vertex.rowCount;\n  var column = grouping.name === 'vertex' ? vertex.getProperty(grouping.params.group) : undefined;\n  var label = grouping.name === 'vertex' ? stringToWords(grouping.params.group) : 'Vertex';\n  var ids = column ? column.toArray({\n    array: Uint32Array\n  }) : fillSerial(new Uint32Array(rowCount));\n  var maxId = column ? arrayMax(ids) : rowCount - 1; // assumes uint ids\n\n  var map = new Uint32Array(maxId + 1);\n\n  for (var i = 0, il = ids.length; i < il; ++i) map[ids[i]] = i;\n\n  return {\n    ids: ids,\n    map: map,\n    label: label\n  };\n}\n\nfunction getColoring(vertex, material, props) {\n  var coloring = props.coloring;\n  var rowCount = vertex.rowCount;\n  var red, green, blue;\n\n  if (coloring.name === 'vertex') {\n    red = vertex.getProperty(coloring.params.red) || Column.ofConst(127, rowCount, int);\n    green = vertex.getProperty(coloring.params.green) || Column.ofConst(127, rowCount, int);\n    blue = vertex.getProperty(coloring.params.blue) || Column.ofConst(127, rowCount, int);\n  } else if (coloring.name === 'material') {\n    red = material && material.getProperty(coloring.params.red) || Column.ofConst(127, rowCount, int);\n    green = material && material.getProperty(coloring.params.green) || Column.ofConst(127, rowCount, int);\n    blue = material && material.getProperty(coloring.params.blue) || Column.ofConst(127, rowCount, int);\n  } else {\n    var _a = Color.toRgb(coloring.params.color),\n        r = _a[0],\n        g = _a[1],\n        b = _a[2];\n\n    red = Column.ofConst(r, rowCount, int);\n    green = Column.ofConst(g, rowCount, int);\n    blue = Column.ofConst(b, rowCount, int);\n  }\n\n  return {\n    kind: coloring.name,\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n\nfunction createShape(plyFile, mesh, coloring, grouping) {\n  var kind = coloring.kind,\n      red = coloring.red,\n      green = coloring.green,\n      blue = coloring.blue;\n  var ids = grouping.ids,\n      map = grouping.map,\n      label = grouping.label;\n  return Shape.create('ply-mesh', plyFile, mesh, function (groupId) {\n    var idx = kind === 'material' ? groupId : map[groupId];\n    return Color.fromRgb(red.value(idx), green.value(idx), blue.value(idx));\n  }, function () {\n    return 1;\n  }, // size: constant\n  function (groupId) {\n    return label + \" \" + ids[groupId];\n  });\n}\n\nfunction makeShapeGetter() {\n  var _this = this;\n\n  var _plyFile;\n\n  var _props;\n\n  var _shape;\n\n  var _mesh;\n\n  var _coloring;\n\n  var _grouping;\n\n  var getShape = function (ctx, plyFile, props, shape) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var vertex, face, material, newMesh, newColor;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            vertex = plyFile.getElement('vertex');\n            if (!vertex) throw new Error('missing vertex element');\n            face = plyFile.getElement('face');\n            if (!face) throw new Error('missing face element');\n            material = plyFile.getElement('material');\n            newMesh = false;\n            newColor = false;\n\n            if (!_plyFile || _plyFile !== plyFile) {\n              newMesh = true;\n            }\n\n            if (!_props || !PD.isParamEqual(PlyShapeParams.grouping, _props.grouping, props.grouping)) {\n              newMesh = true;\n            }\n\n            if (!_props || !PD.isParamEqual(PlyShapeParams.coloring, _props.coloring, props.coloring)) {\n              newColor = true;\n            }\n\n            if (!newMesh) return [3\n            /*break*/\n            , 2];\n            _coloring = getColoring(vertex, material, props);\n            _grouping = getGrouping(vertex, props);\n            return [4\n            /*yield*/\n            , getMesh(ctx, vertex, face, _grouping.ids, shape && shape.geometry)];\n\n          case 1:\n            _mesh = _a.sent();\n            _shape = createShape(plyFile, _mesh, _coloring, _grouping);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (newColor) {\n              _coloring = getColoring(vertex, material, props);\n              _shape = createShape(plyFile, _mesh, _coloring, _grouping);\n            }\n\n            _a.label = 3;\n\n          case 3:\n            _plyFile = plyFile;\n            _props = deepClone(props);\n            return [2\n            /*return*/\n            , _shape];\n        }\n      });\n    });\n  };\n\n  return getShape;\n}\n\nexport function shapeFromPly(source, params) {\n  var _this = this;\n\n  return Task.create('Shape Provider', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , {\n          label: 'Mesh',\n          data: source,\n          params: createPlyShapeParams(source),\n          getShape: makeShapeGetter(),\n          geometryUtils: Mesh.Utils\n        }];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/shape/ply.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sch√§fer, Marco <marco.schaefer@uni-tuebingen.de>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { Color } from '../../mol-util/color';\r\nimport { MeshBuilder } from '../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\r\nimport { Shape } from '../../mol-model/shape';\r\nimport { ChunkedArray } from '../../mol-data/util';\r\nimport { arrayMax, fillSerial } from '../../mol-util/array';\r\nimport { Column } from '../../mol-data/db';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { ColorNames } from '../../mol-util/color/names';\r\nimport { deepClone } from '../../mol-util/object';\r\nimport { stringToWords } from '../../mol-util/string';\r\n// TODO support 'edge' element, see https://www.mathworks.com/help/vision/ug/the-ply-format.html\r\n// TODO support missing face element\r\nfunction createPlyShapeParams(plyFile) {\r\n    var vertex = plyFile && plyFile.getElement('vertex');\r\n    var material = plyFile && plyFile.getElement('material');\r\n    var defaultValues = { group: '', vRed: '', vGreen: '', vBlue: '', mRed: '', mGreen: '', mBlue: '' };\r\n    var groupOptions = [['', '']];\r\n    var colorOptions = [['', '']];\r\n    if (vertex) {\r\n        for (var i = 0, il = vertex.propertyNames.length; i < il; ++i) {\r\n            var name_1 = vertex.propertyNames[i];\r\n            var type = vertex.propertyTypes[i];\r\n            if (type === 'uchar' || type === 'uint8' ||\r\n                type === 'ushort' || type === 'uint16' ||\r\n                type === 'uint' || type === 'uint32' ||\r\n                type === 'int')\r\n                groupOptions.push([name_1, name_1]);\r\n            if (type === 'uchar' || type === 'uint8')\r\n                colorOptions.push([name_1, name_1]);\r\n        }\r\n        // TODO hardcoded as convenience for data provided by MegaMol\r\n        if (vertex.propertyNames.includes('atomid'))\r\n            defaultValues.group = 'atomid';\r\n        else if (vertex.propertyNames.includes('material_index'))\r\n            defaultValues.group = 'material_index';\r\n        if (vertex.propertyNames.includes('red'))\r\n            defaultValues.vRed = 'red';\r\n        if (vertex.propertyNames.includes('green'))\r\n            defaultValues.vGreen = 'green';\r\n        if (vertex.propertyNames.includes('blue'))\r\n            defaultValues.vBlue = 'blue';\r\n    }\r\n    var materialOptions = [['', '']];\r\n    if (material) {\r\n        for (var i = 0, il = material.propertyNames.length; i < il; ++i) {\r\n            var name_2 = material.propertyNames[i];\r\n            var type = material.propertyTypes[i];\r\n            if (type === 'uchar' || type === 'uint8')\r\n                materialOptions.push([name_2, name_2]);\r\n        }\r\n        if (material.propertyNames.includes('red'))\r\n            defaultValues.mRed = 'red';\r\n        if (material.propertyNames.includes('green'))\r\n            defaultValues.mGreen = 'green';\r\n        if (material.propertyNames.includes('blue'))\r\n            defaultValues.mBlue = 'blue';\r\n    }\r\n    var defaultColoring = defaultValues.vRed && defaultValues.vGreen && defaultValues.vBlue ? 'vertex' :\r\n        defaultValues.mRed && defaultValues.mGreen && defaultValues.mBlue ? 'material' : 'uniform';\r\n    return __assign(__assign({}, Mesh.Params), { coloring: PD.MappedStatic(defaultColoring, {\r\n            vertex: PD.Group({\r\n                red: PD.Select(defaultValues.vRed, colorOptions, { label: 'Red Property' }),\r\n                green: PD.Select(defaultValues.vGreen, colorOptions, { label: 'Green Property' }),\r\n                blue: PD.Select(defaultValues.vBlue, colorOptions, { label: 'Blue Property' }),\r\n            }, { isFlat: true }),\r\n            material: PD.Group({\r\n                red: PD.Select(defaultValues.mRed, materialOptions, { label: 'Red Property' }),\r\n                green: PD.Select(defaultValues.mGreen, materialOptions, { label: 'Green Property' }),\r\n                blue: PD.Select(defaultValues.mBlue, materialOptions, { label: 'Blue Property' }),\r\n            }, { isFlat: true }),\r\n            uniform: PD.Group({\r\n                color: PD.Color(ColorNames.grey)\r\n            }, { isFlat: true })\r\n        }), grouping: PD.MappedStatic(defaultValues.group ? 'vertex' : 'none', {\r\n            vertex: PD.Group({\r\n                group: PD.Select(defaultValues.group, groupOptions, { label: 'Group Property' }),\r\n            }, { isFlat: true }),\r\n            none: PD.Group({})\r\n        }) });\r\n}\r\nexport var PlyShapeParams = createPlyShapeParams();\r\nfunction addVerticesRange(begI, endI, state, vertex, groupIds) {\r\n    var vertices = state.vertices, normals = state.normals, groups = state.groups;\r\n    var x = vertex.getProperty('x');\r\n    var y = vertex.getProperty('y');\r\n    var z = vertex.getProperty('z');\r\n    if (!x || !y || !z)\r\n        throw new Error('missing coordinate properties');\r\n    var nx = vertex.getProperty('nx');\r\n    var ny = vertex.getProperty('ny');\r\n    var nz = vertex.getProperty('nz');\r\n    var hasNormals = !!nx && !!ny && !!nz;\r\n    for (var i = begI; i < endI; ++i) {\r\n        ChunkedArray.add3(vertices, x.value(i), y.value(i), z.value(i));\r\n        if (hasNormals)\r\n            ChunkedArray.add3(normals, nx.value(i), ny.value(i), nz.value(i));\r\n        ChunkedArray.add(groups, groupIds[i]);\r\n    }\r\n}\r\nfunction addFacesRange(begI, endI, state, face) {\r\n    var indices = state.indices;\r\n    for (var i = begI; i < endI; ++i) {\r\n        var _a = face.value(i), entries = _a.entries, count = _a.count;\r\n        if (count === 3) {\r\n            // triangle\r\n            ChunkedArray.add3(indices, entries[0], entries[1], entries[2]);\r\n        }\r\n        else if (count === 4) {\r\n            // quadrilateral\r\n            ChunkedArray.add3(indices, entries[2], entries[1], entries[0]);\r\n            ChunkedArray.add3(indices, entries[2], entries[0], entries[3]);\r\n        }\r\n    }\r\n}\r\nfunction getMesh(ctx, vertex, face, groupIds, mesh) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var builderState, x, y, z, nx, ny, nz, hasNormals, updateChunk, i, il, i, il, m;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    builderState = MeshBuilder.createState(vertex.rowCount, vertex.rowCount / 4, mesh);\r\n                    x = vertex.getProperty('x');\r\n                    y = vertex.getProperty('y');\r\n                    z = vertex.getProperty('z');\r\n                    if (!x || !y || !z)\r\n                        throw new Error('missing coordinate properties');\r\n                    nx = vertex.getProperty('nx');\r\n                    ny = vertex.getProperty('ny');\r\n                    nz = vertex.getProperty('nz');\r\n                    hasNormals = !!nx && !!ny && !!nz;\r\n                    updateChunk = 100000;\r\n                    i = 0, il = vertex.rowCount;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < il)) return [3 /*break*/, 4];\r\n                    addVerticesRange(i, Math.min(i + updateChunk, il), builderState, vertex, groupIds);\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, ctx.update({ message: 'adding ply mesh vertices', current: i, max: il })];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    i += updateChunk;\r\n                    return [3 /*break*/, 1];\r\n                case 4:\r\n                    i = 0, il = face.rowCount;\r\n                    _a.label = 5;\r\n                case 5:\r\n                    if (!(i < il)) return [3 /*break*/, 8];\r\n                    addFacesRange(i, Math.min(i + updateChunk, il), builderState, face);\r\n                    if (!ctx.shouldUpdate) return [3 /*break*/, 7];\r\n                    return [4 /*yield*/, ctx.update({ message: 'adding ply mesh faces', current: i, max: il })];\r\n                case 6:\r\n                    _a.sent();\r\n                    _a.label = 7;\r\n                case 7:\r\n                    i += updateChunk;\r\n                    return [3 /*break*/, 5];\r\n                case 8:\r\n                    m = MeshBuilder.getMesh(builderState);\r\n                    if (!hasNormals)\r\n                        Mesh.computeNormals(m);\r\n                    return [2 /*return*/, m];\r\n            }\r\n        });\r\n    });\r\n}\r\nvar int = Column.Schema.int;\r\nfunction getGrouping(vertex, props) {\r\n    var grouping = props.grouping;\r\n    var rowCount = vertex.rowCount;\r\n    var column = grouping.name === 'vertex' ? vertex.getProperty(grouping.params.group) : undefined;\r\n    var label = grouping.name === 'vertex' ? stringToWords(grouping.params.group) : 'Vertex';\r\n    var ids = column ? column.toArray({ array: Uint32Array }) : fillSerial(new Uint32Array(rowCount));\r\n    var maxId = column ? arrayMax(ids) : rowCount - 1; // assumes uint ids\r\n    var map = new Uint32Array(maxId + 1);\r\n    for (var i = 0, il = ids.length; i < il; ++i)\r\n        map[ids[i]] = i;\r\n    return { ids: ids, map: map, label: label };\r\n}\r\nfunction getColoring(vertex, material, props) {\r\n    var coloring = props.coloring;\r\n    var rowCount = vertex.rowCount;\r\n    var red, green, blue;\r\n    if (coloring.name === 'vertex') {\r\n        red = vertex.getProperty(coloring.params.red) || Column.ofConst(127, rowCount, int);\r\n        green = vertex.getProperty(coloring.params.green) || Column.ofConst(127, rowCount, int);\r\n        blue = vertex.getProperty(coloring.params.blue) || Column.ofConst(127, rowCount, int);\r\n    }\r\n    else if (coloring.name === 'material') {\r\n        red = (material && material.getProperty(coloring.params.red)) || Column.ofConst(127, rowCount, int);\r\n        green = (material && material.getProperty(coloring.params.green)) || Column.ofConst(127, rowCount, int);\r\n        blue = (material && material.getProperty(coloring.params.blue)) || Column.ofConst(127, rowCount, int);\r\n    }\r\n    else {\r\n        var _a = Color.toRgb(coloring.params.color), r = _a[0], g = _a[1], b = _a[2];\r\n        red = Column.ofConst(r, rowCount, int);\r\n        green = Column.ofConst(g, rowCount, int);\r\n        blue = Column.ofConst(b, rowCount, int);\r\n    }\r\n    return { kind: coloring.name, red: red, green: green, blue: blue };\r\n}\r\nfunction createShape(plyFile, mesh, coloring, grouping) {\r\n    var kind = coloring.kind, red = coloring.red, green = coloring.green, blue = coloring.blue;\r\n    var ids = grouping.ids, map = grouping.map, label = grouping.label;\r\n    return Shape.create('ply-mesh', plyFile, mesh, function (groupId) {\r\n        var idx = kind === 'material' ? groupId : map[groupId];\r\n        return Color.fromRgb(red.value(idx), green.value(idx), blue.value(idx));\r\n    }, function () { return 1; }, // size: constant\r\n    function (groupId) {\r\n        return label + \" \" + ids[groupId];\r\n    });\r\n}\r\nfunction makeShapeGetter() {\r\n    var _this = this;\r\n    var _plyFile;\r\n    var _props;\r\n    var _shape;\r\n    var _mesh;\r\n    var _coloring;\r\n    var _grouping;\r\n    var getShape = function (ctx, plyFile, props, shape) { return __awaiter(_this, void 0, void 0, function () {\r\n        var vertex, face, material, newMesh, newColor;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    vertex = plyFile.getElement('vertex');\r\n                    if (!vertex)\r\n                        throw new Error('missing vertex element');\r\n                    face = plyFile.getElement('face');\r\n                    if (!face)\r\n                        throw new Error('missing face element');\r\n                    material = plyFile.getElement('material');\r\n                    newMesh = false;\r\n                    newColor = false;\r\n                    if (!_plyFile || _plyFile !== plyFile) {\r\n                        newMesh = true;\r\n                    }\r\n                    if (!_props || !PD.isParamEqual(PlyShapeParams.grouping, _props.grouping, props.grouping)) {\r\n                        newMesh = true;\r\n                    }\r\n                    if (!_props || !PD.isParamEqual(PlyShapeParams.coloring, _props.coloring, props.coloring)) {\r\n                        newColor = true;\r\n                    }\r\n                    if (!newMesh) return [3 /*break*/, 2];\r\n                    _coloring = getColoring(vertex, material, props);\r\n                    _grouping = getGrouping(vertex, props);\r\n                    return [4 /*yield*/, getMesh(ctx, vertex, face, _grouping.ids, shape && shape.geometry)];\r\n                case 1:\r\n                    _mesh = _a.sent();\r\n                    _shape = createShape(plyFile, _mesh, _coloring, _grouping);\r\n                    return [3 /*break*/, 3];\r\n                case 2:\r\n                    if (newColor) {\r\n                        _coloring = getColoring(vertex, material, props);\r\n                        _shape = createShape(plyFile, _mesh, _coloring, _grouping);\r\n                    }\r\n                    _a.label = 3;\r\n                case 3:\r\n                    _plyFile = plyFile;\r\n                    _props = deepClone(props);\r\n                    return [2 /*return*/, _shape];\r\n            }\r\n        });\r\n    }); };\r\n    return getShape;\r\n}\r\nexport function shapeFromPly(source, params) {\r\n    var _this = this;\r\n    return Task.create('Shape Provider', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, {\r\n                    label: 'Mesh',\r\n                    data: source,\r\n                    params: createPlyShapeParams(source),\r\n                    getShape: makeShapeGetter(),\r\n                    geometryUtils: Mesh.Utils\r\n                }];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=ply.js.map"]},"metadata":{},"sourceType":"module"}