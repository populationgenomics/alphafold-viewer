{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Fred Ludlow <fred.ludlow@gmail.com>\r\n */\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { noop } from '../../../mol-util';\nimport { Mesh } from '../../geometry/mesh/mesh';\nimport { AllowedContours } from './tables';\nimport { LinesBuilder } from '../../geometry/lines/lines-builder';\nexport function MarchinCubesMeshBuilder(vertexChunkSize, mesh) {\n  var triangleChunkSize = Math.min(1 << 16, vertexChunkSize * 4);\n  var vertices = ChunkedArray.create(Float32Array, 3, vertexChunkSize, mesh && mesh.vertexBuffer.ref.value);\n  var normals = ChunkedArray.create(Float32Array, 3, vertexChunkSize, mesh && mesh.normalBuffer.ref.value);\n  var groups = ChunkedArray.create(Float32Array, 1, vertexChunkSize, mesh && mesh.groupBuffer.ref.value);\n  var indices = ChunkedArray.create(Uint32Array, 3, triangleChunkSize, mesh && mesh.indexBuffer.ref.value);\n  var vertexCount = 0;\n  var triangleCount = 0;\n  return {\n    addVertex: function (x, y, z) {\n      ++vertexCount;\n      return ChunkedArray.add3(vertices, x, y, z);\n    },\n    addNormal: function (x, y, z) {\n      ChunkedArray.add3(normals, x, y, z);\n    },\n    addGroup: function (group) {\n      ChunkedArray.add(groups, group);\n    },\n    addTriangle: function (vertList, a, b, c) {\n      var i = vertList[a],\n          j = vertList[b],\n          k = vertList[c]; // vertex indices <0 mean that the vertex was ignored and is not available\n      // and hence we don't add a triangle when this occurs\n\n      if (i >= 0 && j >= 0 && k >= 0) {\n        ++triangleCount;\n        ChunkedArray.add3(indices, i, j, k);\n      }\n    },\n    get: function () {\n      var vb = ChunkedArray.compact(vertices, true);\n      var nb = ChunkedArray.compact(normals, true);\n      var ib = ChunkedArray.compact(indices, true);\n      var gb = ChunkedArray.compact(groups, true);\n      return Mesh.create(vb, ib, nb, gb, vertexCount, triangleCount, mesh);\n    }\n  };\n}\nexport function MarchinCubesLinesBuilder(vertexChunkSize, lines) {\n  var vertices = ChunkedArray.create(Float32Array, 3, vertexChunkSize);\n  var groups = ChunkedArray.create(Float32Array, 1, vertexChunkSize);\n  var indices = ChunkedArray.create(Float32Array, 2, vertexChunkSize);\n  var linesCount = 0;\n  return {\n    addVertex: function (x, y, z) {\n      return ChunkedArray.add3(vertices, x, y, z);\n    },\n    addNormal: function () {\n      return noop;\n    },\n    addGroup: function (group) {\n      ChunkedArray.add(groups, group);\n    },\n    addTriangle: function (vertList, a, b, c, edgeFilter) {\n      var i = vertList[a],\n          j = vertList[b],\n          k = vertList[c]; // vertex indices <0 mean that the vertex was ignored and is not available\n      // and hence we don't add a triangle when this occurs\n\n      if (i >= 0 && j >= 0 && k >= 0) {\n        if (AllowedContours[a][b] & edgeFilter) {\n          ++linesCount;\n          ChunkedArray.add2(indices, vertList[a], vertList[b]);\n        }\n\n        if (AllowedContours[b][c] & edgeFilter) {\n          ++linesCount;\n          ChunkedArray.add2(indices, vertList[b], vertList[c]);\n        }\n\n        if (AllowedContours[a][c] & edgeFilter) {\n          ++linesCount;\n          ChunkedArray.add2(indices, vertList[a], vertList[c]);\n        }\n      }\n    },\n    get: function () {\n      var vb = ChunkedArray.compact(vertices, true);\n      var ib = ChunkedArray.compact(indices, true);\n      var gb = ChunkedArray.compact(groups, true);\n      var builder = LinesBuilder.create(linesCount, linesCount / 10, lines);\n\n      for (var i = 0; i < linesCount; ++i) {\n        var la = ib[i * 2],\n            lb = ib[i * 2 + 1];\n        builder.add(vb[la * 3], vb[la * 3 + 1], vb[la * 3 + 2], vb[lb * 3], vb[lb * 3 + 1], vb[lb * 3 + 2], gb[la]);\n      }\n\n      return builder.getLines();\n    }\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-geo/util/marching-cubes/builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Fred Ludlow <fred.ludlow@gmail.com>\r\n */\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { noop } from '../../../mol-util';\r\nimport { Mesh } from '../../geometry/mesh/mesh';\r\nimport { AllowedContours } from './tables';\r\nimport { LinesBuilder } from '../../geometry/lines/lines-builder';\r\nexport function MarchinCubesMeshBuilder(vertexChunkSize, mesh) {\r\n    var triangleChunkSize = Math.min(1 << 16, vertexChunkSize * 4);\r\n    var vertices = ChunkedArray.create(Float32Array, 3, vertexChunkSize, mesh && mesh.vertexBuffer.ref.value);\r\n    var normals = ChunkedArray.create(Float32Array, 3, vertexChunkSize, mesh && mesh.normalBuffer.ref.value);\r\n    var groups = ChunkedArray.create(Float32Array, 1, vertexChunkSize, mesh && mesh.groupBuffer.ref.value);\r\n    var indices = ChunkedArray.create(Uint32Array, 3, triangleChunkSize, mesh && mesh.indexBuffer.ref.value);\r\n    var vertexCount = 0;\r\n    var triangleCount = 0;\r\n    return {\r\n        addVertex: function (x, y, z) {\r\n            ++vertexCount;\r\n            return ChunkedArray.add3(vertices, x, y, z);\r\n        },\r\n        addNormal: function (x, y, z) {\r\n            ChunkedArray.add3(normals, x, y, z);\r\n        },\r\n        addGroup: function (group) {\r\n            ChunkedArray.add(groups, group);\r\n        },\r\n        addTriangle: function (vertList, a, b, c) {\r\n            var i = vertList[a], j = vertList[b], k = vertList[c];\r\n            // vertex indices <0 mean that the vertex was ignored and is not available\r\n            // and hence we don't add a triangle when this occurs\r\n            if (i >= 0 && j >= 0 && k >= 0) {\r\n                ++triangleCount;\r\n                ChunkedArray.add3(indices, i, j, k);\r\n            }\r\n        },\r\n        get: function () {\r\n            var vb = ChunkedArray.compact(vertices, true);\r\n            var nb = ChunkedArray.compact(normals, true);\r\n            var ib = ChunkedArray.compact(indices, true);\r\n            var gb = ChunkedArray.compact(groups, true);\r\n            return Mesh.create(vb, ib, nb, gb, vertexCount, triangleCount, mesh);\r\n        }\r\n    };\r\n}\r\nexport function MarchinCubesLinesBuilder(vertexChunkSize, lines) {\r\n    var vertices = ChunkedArray.create(Float32Array, 3, vertexChunkSize);\r\n    var groups = ChunkedArray.create(Float32Array, 1, vertexChunkSize);\r\n    var indices = ChunkedArray.create(Float32Array, 2, vertexChunkSize);\r\n    var linesCount = 0;\r\n    return {\r\n        addVertex: function (x, y, z) {\r\n            return ChunkedArray.add3(vertices, x, y, z);\r\n        },\r\n        addNormal: function () { return noop; },\r\n        addGroup: function (group) {\r\n            ChunkedArray.add(groups, group);\r\n        },\r\n        addTriangle: function (vertList, a, b, c, edgeFilter) {\r\n            var i = vertList[a], j = vertList[b], k = vertList[c];\r\n            // vertex indices <0 mean that the vertex was ignored and is not available\r\n            // and hence we don't add a triangle when this occurs\r\n            if (i >= 0 && j >= 0 && k >= 0) {\r\n                if (AllowedContours[a][b] & edgeFilter) {\r\n                    ++linesCount;\r\n                    ChunkedArray.add2(indices, vertList[a], vertList[b]);\r\n                }\r\n                if (AllowedContours[b][c] & edgeFilter) {\r\n                    ++linesCount;\r\n                    ChunkedArray.add2(indices, vertList[b], vertList[c]);\r\n                }\r\n                if (AllowedContours[a][c] & edgeFilter) {\r\n                    ++linesCount;\r\n                    ChunkedArray.add2(indices, vertList[a], vertList[c]);\r\n                }\r\n            }\r\n        },\r\n        get: function () {\r\n            var vb = ChunkedArray.compact(vertices, true);\r\n            var ib = ChunkedArray.compact(indices, true);\r\n            var gb = ChunkedArray.compact(groups, true);\r\n            var builder = LinesBuilder.create(linesCount, linesCount / 10, lines);\r\n            for (var i = 0; i < linesCount; ++i) {\r\n                var la = ib[i * 2], lb = ib[i * 2 + 1];\r\n                builder.add(vb[la * 3], vb[la * 3 + 1], vb[la * 3 + 2], vb[lb * 3], vb[lb * 3 + 1], vb[lb * 3 + 2], gb[la]);\r\n            }\r\n            return builder.getLines();\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=builder.js.map"]},"metadata":{},"sourceType":"module"}