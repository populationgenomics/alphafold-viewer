{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\n\n/** Cache the latest result from calls to a function with any number of arguments */\nexport function memoizeLatest(f) {\n  var lastArgs = void 0,\n      value = void 0;\n  return function () {\n    var args = [];\n\n    for (var _a = 0; _a < arguments.length; _a++) {\n      args[_a] = arguments[_a];\n    }\n\n    if (!lastArgs || lastArgs.length !== args.length) {\n      lastArgs = args;\n      value = f.apply(void 0, args);\n      return value;\n    }\n\n    for (var i = 0, _i = args.length; i < _i; i++) {\n      if (args[i] !== lastArgs[i]) {\n        lastArgs = args;\n        value = f.apply(void 0, args);\n        return value;\n      }\n    }\n\n    return value;\n  };\n}\n/** Cache all results from calls to a function with a single argument */\n\nexport function memoize1(f) {\n  var cache = new Map();\n  return function (a) {\n    if (cache.has(a)) return cache.get(a);\n    var v = f(a);\n    cache.set(a, v);\n    return v;\n  };\n}","map":{"version":3,"sources":["../../src/mol-util/memoize.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH;AACA,OAAM,SAAU,aAAV,CAA+C,CAA/C,EAAsE;AACxE,MAAI,QAAQ,GAAsB,KAAK,CAAvC;AAAA,MAA0C,KAAK,GAAQ,KAAK,CAA5D;AACA,SAAO,YAAA;AAAC,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAO;AAAP,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACJ,QAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,IAAI,CAAC,MAA1C,EAAkD;AAC9C,MAAA,QAAQ,GAAG,IAAX;AACA,MAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAK,CAAb,EAAgB,IAAhB,CAAR;AACA,aAAO,KAAP;AACH;;AACD,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,UAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAQ,CAAC,CAAD,CAAxB,EAA6B;AACzB,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,KAAK,CAAb,EAAgB,IAAhB,CAAR;AACA,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAdD;AAeH;AAED;;AACA,OAAM,SAAU,QAAV,CAAyB,CAAzB,EAAuC;AACzC,MAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;AACA,SAAO,UAAA,CAAA,EAAC;AACJ,QAAI,KAAK,CAAC,GAAN,CAAU,CAAV,CAAJ,EAAkB,OAAO,KAAK,CAAC,GAAN,CAAU,CAAV,CAAP;AAClB,QAAM,CAAC,GAAG,CAAC,CAAC,CAAD,CAAX;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,CAAV,EAAa,CAAb;AACA,WAAO,CAAP;AACH,GALD;AAMH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\n/** Cache the latest result from calls to a function with any number of arguments */\r\nexport function memoizeLatest(f) {\r\n    var lastArgs = void 0, value = void 0;\r\n    return function () {\r\n        var args = [];\r\n        for (var _a = 0; _a < arguments.length; _a++) {\r\n            args[_a] = arguments[_a];\r\n        }\r\n        if (!lastArgs || lastArgs.length !== args.length) {\r\n            lastArgs = args;\r\n            value = f.apply(void 0, args);\r\n            return value;\r\n        }\r\n        for (var i = 0, _i = args.length; i < _i; i++) {\r\n            if (args[i] !== lastArgs[i]) {\r\n                lastArgs = args;\r\n                value = f.apply(void 0, args);\r\n                return value;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n}\r\n/** Cache all results from calls to a function with a single argument */\r\nexport function memoize1(f) {\r\n    var cache = new Map();\r\n    return function (a) {\r\n        if (cache.has(a))\r\n            return cache.get(a);\r\n        var v = f(a);\r\n        cache.set(a, v);\r\n        return v;\r\n    };\r\n}\r\n//# sourceMappingURL=memoize.js.map"]},"metadata":{},"sourceType":"module"}