{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ValueCell } from '../../mol-util/value-cell';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { createTextureImage } from '../../mol-gl/renderable/util';\nvar MarkerCountLut = new Uint8Array(0x0303 + 1);\nMarkerCountLut[0x0001] = 1;\nMarkerCountLut[0x0002] = 1;\nMarkerCountLut[0x0003] = 1;\nMarkerCountLut[0x0100] = 1;\nMarkerCountLut[0x0200] = 1;\nMarkerCountLut[0x0300] = 1;\nMarkerCountLut[0x0101] = 2;\nMarkerCountLut[0x0201] = 2;\nMarkerCountLut[0x0301] = 2;\nMarkerCountLut[0x0102] = 2;\nMarkerCountLut[0x0202] = 2;\nMarkerCountLut[0x0302] = 2;\nMarkerCountLut[0x0103] = 2;\nMarkerCountLut[0x0203] = 2;\nMarkerCountLut[0x0303] = 2;\n/**\r\n * Calculates the average number of entries that have any marker flag set.\r\n *\r\n * For alternative implementations and performance tests see\r\n * `src\\perf-tests\\markers-average.ts`.\r\n */\n\nexport function getMarkersAverage(array, count) {\n  if (count === 0) return 0;\n  var view = new Uint32Array(array.buffer, 0, array.buffer.byteLength >> 2);\n  var viewEnd = count - 4 >> 2;\n  var backStart = 4 * viewEnd;\n  var sum = 0;\n\n  for (var i = 0; i < viewEnd; ++i) {\n    var v = view[i];\n    sum += MarkerCountLut[v & 0xFFFF] + MarkerCountLut[v >> 16];\n  }\n\n  for (var i = backStart; i < count; ++i) {\n    sum += array[i] && 1;\n  }\n\n  return sum / count;\n}\nexport function createMarkers(count, markerData) {\n  var markers = createTextureImage(Math.max(1, count), 1, Uint8Array, markerData && markerData.tMarker.ref.value.array);\n  var average = getMarkersAverage(markers.array, count);\n  var status = average === 0 ? 0 : -1;\n\n  if (markerData) {\n    ValueCell.updateIfChanged(markerData.uMarker, 0);\n    ValueCell.update(markerData.tMarker, markers);\n    ValueCell.update(markerData.uMarkerTexDim, Vec2.create(markers.width, markers.height));\n    ValueCell.updateIfChanged(markerData.dMarkerType, status === -1 ? 'groupInstance' : 'uniform');\n    ValueCell.updateIfChanged(markerData.markerAverage, average);\n    ValueCell.updateIfChanged(markerData.markerStatus, status);\n    return markerData;\n  } else {\n    return {\n      uMarker: ValueCell.create(0),\n      tMarker: ValueCell.create(markers),\n      uMarkerTexDim: ValueCell.create(Vec2.create(markers.width, markers.height)),\n      markerAverage: ValueCell.create(average),\n      markerStatus: ValueCell.create(status),\n      dMarkerType: ValueCell.create('uniform')\n    };\n  }\n}\nvar emptyMarkerTexture = {\n  array: new Uint8Array(1),\n  width: 1,\n  height: 1\n};\nexport function createEmptyMarkers(markerData) {\n  if (markerData) {\n    ValueCell.updateIfChanged(markerData.uMarker, 0);\n    ValueCell.update(markerData.tMarker, emptyMarkerTexture);\n    ValueCell.update(markerData.uMarkerTexDim, Vec2.create(1, 1));\n    ValueCell.updateIfChanged(markerData.dMarkerType, 'uniform');\n    ValueCell.updateIfChanged(markerData.markerAverage, 0);\n    ValueCell.updateIfChanged(markerData.markerStatus, 0);\n    return markerData;\n  } else {\n    return {\n      uMarker: ValueCell.create(0),\n      tMarker: ValueCell.create(emptyMarkerTexture),\n      uMarkerTexDim: ValueCell.create(Vec2.create(1, 1)),\n      markerAverage: ValueCell.create(0),\n      markerStatus: ValueCell.create(0),\n      dMarkerType: ValueCell.create('uniform')\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/mol-geo/geometry/marker-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ValueCell } from '../../mol-util/value-cell';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { createTextureImage } from '../../mol-gl/renderable/util';\r\nvar MarkerCountLut = new Uint8Array(0x0303 + 1);\r\nMarkerCountLut[0x0001] = 1;\r\nMarkerCountLut[0x0002] = 1;\r\nMarkerCountLut[0x0003] = 1;\r\nMarkerCountLut[0x0100] = 1;\r\nMarkerCountLut[0x0200] = 1;\r\nMarkerCountLut[0x0300] = 1;\r\nMarkerCountLut[0x0101] = 2;\r\nMarkerCountLut[0x0201] = 2;\r\nMarkerCountLut[0x0301] = 2;\r\nMarkerCountLut[0x0102] = 2;\r\nMarkerCountLut[0x0202] = 2;\r\nMarkerCountLut[0x0302] = 2;\r\nMarkerCountLut[0x0103] = 2;\r\nMarkerCountLut[0x0203] = 2;\r\nMarkerCountLut[0x0303] = 2;\r\n/**\r\n * Calculates the average number of entries that have any marker flag set.\r\n *\r\n * For alternative implementations and performance tests see\r\n * `src\\perf-tests\\markers-average.ts`.\r\n */\r\nexport function getMarkersAverage(array, count) {\r\n    if (count === 0)\r\n        return 0;\r\n    var view = new Uint32Array(array.buffer, 0, array.buffer.byteLength >> 2);\r\n    var viewEnd = (count - 4) >> 2;\r\n    var backStart = 4 * viewEnd;\r\n    var sum = 0;\r\n    for (var i = 0; i < viewEnd; ++i) {\r\n        var v = view[i];\r\n        sum += MarkerCountLut[v & 0xFFFF] + MarkerCountLut[v >> 16];\r\n    }\r\n    for (var i = backStart; i < count; ++i) {\r\n        sum += array[i] && 1;\r\n    }\r\n    return sum / count;\r\n}\r\nexport function createMarkers(count, markerData) {\r\n    var markers = createTextureImage(Math.max(1, count), 1, Uint8Array, markerData && markerData.tMarker.ref.value.array);\r\n    var average = getMarkersAverage(markers.array, count);\r\n    var status = average === 0 ? 0 : -1;\r\n    if (markerData) {\r\n        ValueCell.updateIfChanged(markerData.uMarker, 0);\r\n        ValueCell.update(markerData.tMarker, markers);\r\n        ValueCell.update(markerData.uMarkerTexDim, Vec2.create(markers.width, markers.height));\r\n        ValueCell.updateIfChanged(markerData.dMarkerType, status === -1 ? 'groupInstance' : 'uniform');\r\n        ValueCell.updateIfChanged(markerData.markerAverage, average);\r\n        ValueCell.updateIfChanged(markerData.markerStatus, status);\r\n        return markerData;\r\n    }\r\n    else {\r\n        return {\r\n            uMarker: ValueCell.create(0),\r\n            tMarker: ValueCell.create(markers),\r\n            uMarkerTexDim: ValueCell.create(Vec2.create(markers.width, markers.height)),\r\n            markerAverage: ValueCell.create(average),\r\n            markerStatus: ValueCell.create(status),\r\n            dMarkerType: ValueCell.create('uniform'),\r\n        };\r\n    }\r\n}\r\nvar emptyMarkerTexture = { array: new Uint8Array(1), width: 1, height: 1 };\r\nexport function createEmptyMarkers(markerData) {\r\n    if (markerData) {\r\n        ValueCell.updateIfChanged(markerData.uMarker, 0);\r\n        ValueCell.update(markerData.tMarker, emptyMarkerTexture);\r\n        ValueCell.update(markerData.uMarkerTexDim, Vec2.create(1, 1));\r\n        ValueCell.updateIfChanged(markerData.dMarkerType, 'uniform');\r\n        ValueCell.updateIfChanged(markerData.markerAverage, 0);\r\n        ValueCell.updateIfChanged(markerData.markerStatus, 0);\r\n        return markerData;\r\n    }\r\n    else {\r\n        return {\r\n            uMarker: ValueCell.create(0),\r\n            tMarker: ValueCell.create(emptyMarkerTexture),\r\n            uMarkerTexDim: ValueCell.create(Vec2.create(1, 1)),\r\n            markerAverage: ValueCell.create(0),\r\n            markerStatus: ValueCell.create(0),\r\n            dMarkerType: ValueCell.create('uniform'),\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=marker-data.js.map"]},"metadata":{},"sourceType":"module"}