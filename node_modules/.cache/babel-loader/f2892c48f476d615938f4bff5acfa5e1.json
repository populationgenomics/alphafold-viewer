{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * adapted from https://github.com/internalfx/distinct-colors (ISC License Copyright (c) 2015, InternalFX Inc.)\r\n * which is heavily inspired by http://tools.medialab.sciences-po.fr/iwanthue/\r\n */\nimport { __assign } from \"tslib\";\nimport { Lab } from './spaces/lab';\nimport { Hcl } from './spaces/hcl';\nimport { deepClone } from '../../mol-util/object';\nimport { deepEqual } from '../../mol-util';\nimport { arraySum } from '../../mol-util/array';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nexport var DistinctColorsParams = {\n  hue: PD.Interval([1, 360], {\n    min: 0,\n    max: 360,\n    step: 1\n  }),\n  chroma: PD.Interval([40, 70], {\n    min: 0,\n    max: 100,\n    step: 1\n  }),\n  luminance: PD.Interval([15, 85], {\n    min: 0,\n    max: 100,\n    step: 1\n  }),\n  clusteringStepCount: PD.Numeric(50, {\n    min: 10,\n    max: 200,\n    step: 1\n  }, {\n    isHidden: true\n  }),\n  minSampleCount: PD.Numeric(800, {\n    min: 100,\n    max: 5000,\n    step: 100\n  }, {\n    isHidden: true\n  })\n};\n\nfunction distance(colorA, colorB) {\n  return Math.sqrt(Math.pow(Math.abs(colorA[0] - colorB[0]), 2) + Math.pow(Math.abs(colorA[1] - colorB[1]), 2) + Math.pow(Math.abs(colorA[2] - colorB[2]), 2));\n}\n\nvar LabTolerance = 2;\nvar tmpCheckColorHcl = [0, 0, 0];\nvar tmpCheckColorLab = [0, 0, 0];\n\nfunction checkColor(lab, props) {\n  Lab.toHcl(tmpCheckColorHcl, lab); // roundtrip to RGB for conversion tolerance testing\n\n  Lab.fromColor(tmpCheckColorLab, Lab.toColor(lab));\n  return tmpCheckColorHcl[0] >= props.hue[0] && tmpCheckColorHcl[0] <= props.hue[1] && tmpCheckColorHcl[1] >= props.chroma[0] && tmpCheckColorHcl[1] <= props.chroma[1] && tmpCheckColorHcl[2] >= props.luminance[0] && tmpCheckColorHcl[2] <= props.luminance[1] && tmpCheckColorLab[0] >= lab[0] - LabTolerance && tmpCheckColorLab[0] <= lab[0] + LabTolerance && tmpCheckColorLab[1] >= lab[1] - LabTolerance && tmpCheckColorLab[1] <= lab[1] + LabTolerance && tmpCheckColorLab[2] >= lab[2] - LabTolerance && tmpCheckColorLab[2] <= lab[2] + LabTolerance;\n}\n\nfunction sortByContrast(colors) {\n  var unsortedColors = colors.slice(0);\n  var sortedColors = [unsortedColors.shift()];\n\n  while (unsortedColors.length > 0) {\n    var lastColor = sortedColors[sortedColors.length - 1];\n    var nearest = 0;\n    var maxDist = Number.MIN_SAFE_INTEGER;\n\n    for (var i = 0; i < unsortedColors.length; ++i) {\n      var dist = distance(lastColor, unsortedColors[i]);\n\n      if (dist > maxDist) {\n        maxDist = dist;\n        nearest = i;\n      }\n    }\n\n    sortedColors.push(unsortedColors.splice(nearest, 1)[0]);\n  }\n\n  return sortedColors;\n}\n\nfunction getSamples(count, p) {\n  var samples = new Map();\n  var rangeDivider = Math.cbrt(count) * 1.001;\n  var hStep = (p.hue[1] - p.hue[0]) / rangeDivider;\n  var cStep = (p.chroma[1] - p.chroma[0]) / rangeDivider;\n  var lStep = (p.luminance[1] - p.luminance[0]) / rangeDivider;\n\n  for (var h = p.hue[0]; h <= p.hue[1]; h += hStep) {\n    for (var c = p.chroma[0]; c <= p.chroma[1]; c += cStep) {\n      for (var l = p.luminance[0]; l <= p.luminance[1]; l += lStep) {\n        var lab = Lab.fromHcl(Lab(), Hcl.create(h, c, l));\n        if (checkColor(lab, p)) samples.set(lab.toString(), lab);\n      }\n    }\n  }\n\n  return Array.from(samples.values());\n}\n/**\r\n * Create a list of visually distinct colors\r\n */\n\n\nexport function distinctColors(count, props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var p = __assign(__assign({}, PD.getDefaultValues(DistinctColorsParams)), props);\n\n  if (count <= 0) return [];\n  var samples = getSamples(Math.max(p.minSampleCount, count * 5), p);\n\n  if (samples.length < count) {\n    throw new Error('Not enough samples to generate distinct colors, increase sample count.');\n  }\n\n  var colors = [];\n  var zonesProto = [];\n  var sliceSize = Math.floor(samples.length / count);\n\n  for (var i = 0; i < samples.length; i += sliceSize) {\n    colors.push(samples[i]);\n    zonesProto.push([]);\n    if (colors.length >= count) break;\n  }\n\n  for (var step = 1; step <= p.clusteringStepCount; ++step) {\n    var zones = deepClone(zonesProto); // Find closest color for each sample\n\n    for (var i = 0; i < samples.length; ++i) {\n      var minDist = Number.MAX_SAFE_INTEGER;\n      var nearest = 0;\n\n      for (var j = 0; j < colors.length; j++) {\n        var dist = distance(samples[i], colors[j]);\n\n        if (dist < minDist) {\n          minDist = dist;\n          nearest = j;\n        }\n      }\n\n      zones[nearest].push(samples[i]);\n    }\n\n    var lastColors = deepClone(colors);\n\n    for (var i = 0; i < zones.length; ++i) {\n      var zone = zones[i];\n      var size = zone.length;\n      var Ls = [];\n      var As = [];\n      var Bs = [];\n\n      for (var _i = 0, zone_1 = zone; _i < zone_1.length; _i++) {\n        var sample = zone_1[_i];\n        Ls.push(sample[0]);\n        As.push(sample[1]);\n        Bs.push(sample[2]);\n      }\n\n      var lAvg = arraySum(Ls) / size;\n      var aAvg = arraySum(As) / size;\n      var bAvg = arraySum(Bs) / size;\n      colors[i] = [lAvg, aAvg, bAvg];\n    }\n\n    if (deepEqual(lastColors, colors)) break;\n  }\n\n  return sortByContrast(colors).map(function (c) {\n    return Lab.toColor(c);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-util/color/distinct.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * adapted from https://github.com/internalfx/distinct-colors (ISC License Copyright (c) 2015, InternalFX Inc.)\r\n * which is heavily inspired by http://tools.medialab.sciences-po.fr/iwanthue/\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Lab } from './spaces/lab';\r\nimport { Hcl } from './spaces/hcl';\r\nimport { deepClone } from '../../mol-util/object';\r\nimport { deepEqual } from '../../mol-util';\r\nimport { arraySum } from '../../mol-util/array';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nexport var DistinctColorsParams = {\r\n    hue: PD.Interval([1, 360], { min: 0, max: 360, step: 1 }),\r\n    chroma: PD.Interval([40, 70], { min: 0, max: 100, step: 1 }),\r\n    luminance: PD.Interval([15, 85], { min: 0, max: 100, step: 1 }),\r\n    clusteringStepCount: PD.Numeric(50, { min: 10, max: 200, step: 1 }, { isHidden: true }),\r\n    minSampleCount: PD.Numeric(800, { min: 100, max: 5000, step: 100 }, { isHidden: true })\r\n};\r\nfunction distance(colorA, colorB) {\r\n    return Math.sqrt(Math.pow(Math.abs(colorA[0] - colorB[0]), 2) +\r\n        Math.pow(Math.abs(colorA[1] - colorB[1]), 2) +\r\n        Math.pow(Math.abs(colorA[2] - colorB[2]), 2));\r\n}\r\nvar LabTolerance = 2;\r\nvar tmpCheckColorHcl = [0, 0, 0];\r\nvar tmpCheckColorLab = [0, 0, 0];\r\nfunction checkColor(lab, props) {\r\n    Lab.toHcl(tmpCheckColorHcl, lab);\r\n    // roundtrip to RGB for conversion tolerance testing\r\n    Lab.fromColor(tmpCheckColorLab, Lab.toColor(lab));\r\n    return (tmpCheckColorHcl[0] >= props.hue[0] &&\r\n        tmpCheckColorHcl[0] <= props.hue[1] &&\r\n        tmpCheckColorHcl[1] >= props.chroma[0] &&\r\n        tmpCheckColorHcl[1] <= props.chroma[1] &&\r\n        tmpCheckColorHcl[2] >= props.luminance[0] &&\r\n        tmpCheckColorHcl[2] <= props.luminance[1] &&\r\n        tmpCheckColorLab[0] >= (lab[0] - LabTolerance) &&\r\n        tmpCheckColorLab[0] <= (lab[0] + LabTolerance) &&\r\n        tmpCheckColorLab[1] >= (lab[1] - LabTolerance) &&\r\n        tmpCheckColorLab[1] <= (lab[1] + LabTolerance) &&\r\n        tmpCheckColorLab[2] >= (lab[2] - LabTolerance) &&\r\n        tmpCheckColorLab[2] <= (lab[2] + LabTolerance));\r\n}\r\nfunction sortByContrast(colors) {\r\n    var unsortedColors = colors.slice(0);\r\n    var sortedColors = [unsortedColors.shift()];\r\n    while (unsortedColors.length > 0) {\r\n        var lastColor = sortedColors[sortedColors.length - 1];\r\n        var nearest = 0;\r\n        var maxDist = Number.MIN_SAFE_INTEGER;\r\n        for (var i = 0; i < unsortedColors.length; ++i) {\r\n            var dist = distance(lastColor, unsortedColors[i]);\r\n            if (dist > maxDist) {\r\n                maxDist = dist;\r\n                nearest = i;\r\n            }\r\n        }\r\n        sortedColors.push(unsortedColors.splice(nearest, 1)[0]);\r\n    }\r\n    return sortedColors;\r\n}\r\nfunction getSamples(count, p) {\r\n    var samples = new Map();\r\n    var rangeDivider = Math.cbrt(count) * 1.001;\r\n    var hStep = (p.hue[1] - p.hue[0]) / rangeDivider;\r\n    var cStep = (p.chroma[1] - p.chroma[0]) / rangeDivider;\r\n    var lStep = (p.luminance[1] - p.luminance[0]) / rangeDivider;\r\n    for (var h = p.hue[0]; h <= p.hue[1]; h += hStep) {\r\n        for (var c = p.chroma[0]; c <= p.chroma[1]; c += cStep) {\r\n            for (var l = p.luminance[0]; l <= p.luminance[1]; l += lStep) {\r\n                var lab = Lab.fromHcl(Lab(), Hcl.create(h, c, l));\r\n                if (checkColor(lab, p))\r\n                    samples.set(lab.toString(), lab);\r\n            }\r\n        }\r\n    }\r\n    return Array.from(samples.values());\r\n}\r\n/**\r\n * Create a list of visually distinct colors\r\n */\r\nexport function distinctColors(count, props) {\r\n    if (props === void 0) { props = {}; }\r\n    var p = __assign(__assign({}, PD.getDefaultValues(DistinctColorsParams)), props);\r\n    if (count <= 0)\r\n        return [];\r\n    var samples = getSamples(Math.max(p.minSampleCount, count * 5), p);\r\n    if (samples.length < count) {\r\n        throw new Error('Not enough samples to generate distinct colors, increase sample count.');\r\n    }\r\n    var colors = [];\r\n    var zonesProto = [];\r\n    var sliceSize = Math.floor(samples.length / count);\r\n    for (var i = 0; i < samples.length; i += sliceSize) {\r\n        colors.push(samples[i]);\r\n        zonesProto.push([]);\r\n        if (colors.length >= count)\r\n            break;\r\n    }\r\n    for (var step = 1; step <= p.clusteringStepCount; ++step) {\r\n        var zones = deepClone(zonesProto);\r\n        // Find closest color for each sample\r\n        for (var i = 0; i < samples.length; ++i) {\r\n            var minDist = Number.MAX_SAFE_INTEGER;\r\n            var nearest = 0;\r\n            for (var j = 0; j < colors.length; j++) {\r\n                var dist = distance(samples[i], colors[j]);\r\n                if (dist < minDist) {\r\n                    minDist = dist;\r\n                    nearest = j;\r\n                }\r\n            }\r\n            zones[nearest].push(samples[i]);\r\n        }\r\n        var lastColors = deepClone(colors);\r\n        for (var i = 0; i < zones.length; ++i) {\r\n            var zone = zones[i];\r\n            var size = zone.length;\r\n            var Ls = [];\r\n            var As = [];\r\n            var Bs = [];\r\n            for (var _i = 0, zone_1 = zone; _i < zone_1.length; _i++) {\r\n                var sample = zone_1[_i];\r\n                Ls.push(sample[0]);\r\n                As.push(sample[1]);\r\n                Bs.push(sample[2]);\r\n            }\r\n            var lAvg = arraySum(Ls) / size;\r\n            var aAvg = arraySum(As) / size;\r\n            var bAvg = arraySum(Bs) / size;\r\n            colors[i] = [lAvg, aAvg, bAvg];\r\n        }\r\n        if (deepEqual(lastColors, colors))\r\n            break;\r\n    }\r\n    return sortByContrast(colors).map(function (c) { return Lab.toColor(c); });\r\n}\r\n//# sourceMappingURL=distinct.js.map"]},"metadata":{},"sourceType":"module"}