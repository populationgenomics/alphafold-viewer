{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { OrderedMap } from 'immutable';\nexport { CustomProperty };\nvar CustomProperty;\n\n(function (CustomProperty) {\n  var Registry =\n  /** @class */\n  function () {\n    function Registry() {\n      this.providers = OrderedMap().asMutable();\n      this.defaultAutoAttachValues = new Map();\n    }\n    /** Get params for all applicable property providers */\n\n\n    Registry.prototype.getParams = function (data) {\n      var propertiesParams = {};\n      var autoAttachOptions = [];\n      var autoAttachDefault = [];\n\n      if (data) {\n        var values = this.providers.values();\n\n        while (true) {\n          var v = values.next();\n          if (v.done) break;\n          var provider = v.value;\n          if (!provider.isApplicable(data)) continue;\n\n          if (!provider.isHidden) {\n            autoAttachOptions.push([provider.descriptor.name, provider.label]);\n\n            if (this.defaultAutoAttachValues.get(provider.descriptor.name)) {\n              autoAttachDefault.push(provider.descriptor.name);\n            }\n          }\n\n          propertiesParams[provider.descriptor.name] = PD.Group(__assign({}, provider.getParams(data)), {\n            label: provider.label,\n            isHidden: provider.isHidden\n          });\n        }\n      }\n\n      return {\n        autoAttach: PD.MultiSelect(autoAttachDefault, autoAttachOptions),\n        properties: PD.Group(propertiesParams, {\n          isFlat: true\n        })\n      };\n    };\n\n    Registry.prototype.setDefaultAutoAttach = function (name, value) {\n      this.defaultAutoAttachValues.set(name, value);\n    };\n\n    Registry.prototype.get = function (name) {\n      var prop = this.providers.get(name);\n\n      if (!prop) {\n        throw new Error(\"Custom property '\" + name + \"' is not registered.\");\n      }\n\n      return this.providers.get(name);\n    };\n\n    Registry.prototype.register = function (provider, defaultAutoAttach) {\n      this.providers.set(provider.descriptor.name, provider);\n      this.defaultAutoAttachValues.set(provider.descriptor.name, defaultAutoAttach);\n    };\n\n    Registry.prototype.unregister = function (name) {\n      this.providers.delete(name);\n      this.defaultAutoAttachValues.delete(name);\n    };\n\n    return Registry;\n  }();\n\n  CustomProperty.Registry = Registry;\n})(CustomProperty || (CustomProperty = {}));","map":{"version":3,"sources":["../../../src/mol-model-props/common/custom-property.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { OrderedMap } from 'immutable';\r\nexport { CustomProperty };\r\nvar CustomProperty;\r\n(function (CustomProperty) {\r\n    var Registry = /** @class */ (function () {\r\n        function Registry() {\r\n            this.providers = OrderedMap().asMutable();\r\n            this.defaultAutoAttachValues = new Map();\r\n        }\r\n        /** Get params for all applicable property providers */\r\n        Registry.prototype.getParams = function (data) {\r\n            var propertiesParams = {};\r\n            var autoAttachOptions = [];\r\n            var autoAttachDefault = [];\r\n            if (data) {\r\n                var values = this.providers.values();\r\n                while (true) {\r\n                    var v = values.next();\r\n                    if (v.done)\r\n                        break;\r\n                    var provider = v.value;\r\n                    if (!provider.isApplicable(data))\r\n                        continue;\r\n                    if (!provider.isHidden) {\r\n                        autoAttachOptions.push([provider.descriptor.name, provider.label]);\r\n                        if (this.defaultAutoAttachValues.get(provider.descriptor.name)) {\r\n                            autoAttachDefault.push(provider.descriptor.name);\r\n                        }\r\n                    }\r\n                    propertiesParams[provider.descriptor.name] = PD.Group(__assign({}, provider.getParams(data)), { label: provider.label, isHidden: provider.isHidden });\r\n                }\r\n            }\r\n            return {\r\n                autoAttach: PD.MultiSelect(autoAttachDefault, autoAttachOptions),\r\n                properties: PD.Group(propertiesParams, { isFlat: true })\r\n            };\r\n        };\r\n        Registry.prototype.setDefaultAutoAttach = function (name, value) {\r\n            this.defaultAutoAttachValues.set(name, value);\r\n        };\r\n        Registry.prototype.get = function (name) {\r\n            var prop = this.providers.get(name);\r\n            if (!prop) {\r\n                throw new Error(\"Custom property '\" + name + \"' is not registered.\");\r\n            }\r\n            return this.providers.get(name);\r\n        };\r\n        Registry.prototype.register = function (provider, defaultAutoAttach) {\r\n            this.providers.set(provider.descriptor.name, provider);\r\n            this.defaultAutoAttachValues.set(provider.descriptor.name, defaultAutoAttach);\r\n        };\r\n        Registry.prototype.unregister = function (name) {\r\n            this.providers.delete(name);\r\n            this.defaultAutoAttachValues.delete(name);\r\n        };\r\n        return Registry;\r\n    }());\r\n    CustomProperty.Registry = Registry;\r\n})(CustomProperty || (CustomProperty = {}));\r\n//# sourceMappingURL=custom-property.js.map"]},"metadata":{},"sourceType":"module"}