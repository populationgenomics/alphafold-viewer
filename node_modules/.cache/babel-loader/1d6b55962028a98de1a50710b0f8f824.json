{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Color } from '../../mol-util/color';\nimport { StructureElement, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\nvar DefaultList = 'dark-2';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = 'Gives every chain instance (single chain or collection of single elements) a unique color based on the position (index) of the chain in the list of chains in the structure.';\nexport var UnitIndexColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: DefaultList\n}));\nexport function getUnitIndexColorThemeParams(ctx) {\n  var params = PD.clone(UnitIndexColorThemeParams);\n\n  if (ctx.structure) {\n    if (ctx.structure.root.units.length > ColorLists[DefaultList].list.length) {\n      params.palette.defaultValue.name = 'colors';\n      params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), {\n        list: {\n          kind: 'interpolate',\n          colors: getColorListFromName(DefaultList).list\n        }\n      });\n    }\n  }\n\n  return params;\n}\nexport function UnitIndexColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var units = ctx.structure.root.units;\n    var palette = getPalette(units.length, props);\n    legend = palette.legend;\n    var unitIdColor_1 = new Map();\n\n    for (var i = 0, il = units.length; i < il; ++i) {\n      unitIdColor_1.set(units[i].id, palette.color(i));\n    }\n\n    color = function (location) {\n      if (StructureElement.Location.is(location)) {\n        return unitIdColor_1.get(location.unit.id);\n      } else if (Bond.isLocation(location)) {\n        return unitIdColor_1.get(location.aUnit.id);\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: UnitIndexColorTheme,\n    granularity: 'instance',\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var UnitIndexColorThemeProvider = {\n  name: 'unit-index',\n  label: 'Chain Instance',\n  category: \"Chain Property\"\n  /* Chain */\n  ,\n  factory: UnitIndexColorTheme,\n  getParams: getUnitIndexColorThemeParams,\n  defaultValues: PD.getDefaultValues(UnitIndexColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/unit-index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Color } from '../../mol-util/color';\r\nimport { StructureElement, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\r\nvar DefaultList = 'dark-2';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = 'Gives every chain instance (single chain or collection of single elements) a unique color based on the position (index) of the chain in the list of chains in the structure.';\r\nexport var UnitIndexColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: DefaultList }));\r\nexport function getUnitIndexColorThemeParams(ctx) {\r\n    var params = PD.clone(UnitIndexColorThemeParams);\r\n    if (ctx.structure) {\r\n        if (ctx.structure.root.units.length > ColorLists[DefaultList].list.length) {\r\n            params.palette.defaultValue.name = 'colors';\r\n            params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), { list: { kind: 'interpolate', colors: getColorListFromName(DefaultList).list } });\r\n        }\r\n    }\r\n    return params;\r\n}\r\nexport function UnitIndexColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var units = ctx.structure.root.units;\r\n        var palette = getPalette(units.length, props);\r\n        legend = palette.legend;\r\n        var unitIdColor_1 = new Map();\r\n        for (var i = 0, il = units.length; i < il; ++i) {\r\n            unitIdColor_1.set(units[i].id, palette.color(i));\r\n        }\r\n        color = function (location) {\r\n            if (StructureElement.Location.is(location)) {\r\n                return unitIdColor_1.get(location.unit.id);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                return unitIdColor_1.get(location.aUnit.id);\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: UnitIndexColorTheme,\r\n        granularity: 'instance',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var UnitIndexColorThemeProvider = {\r\n    name: 'unit-index',\r\n    label: 'Chain Instance',\r\n    category: \"Chain Property\" /* Chain */,\r\n    factory: UnitIndexColorTheme,\r\n    getParams: getUnitIndexColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(UnitIndexColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=unit-index.js.map"]},"metadata":{},"sourceType":"module"}