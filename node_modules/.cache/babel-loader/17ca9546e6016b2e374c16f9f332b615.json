{"ast":null,"code":"/**\r\n * Copyright (c) 2019 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Type } from '../type';\nimport * as Struct from './structure-query';\nimport { Arguments, Argument } from '../symbol';\nimport { symbol } from '../helpers';\nvar generator = {\n  '@header': 'Generators',\n  bundleElement: symbol(Arguments.Dictionary({\n    // TODO: should we use more universal unit keys? (i.e. based on chain and \"operator name\")\n    groupedUnits: Argument(Type.Any),\n    set: Argument(Type.Any),\n    ranges: Argument(Type.Any) // SortedArray<UnitIndex>\n\n  }), Type.Any),\n  bundle: symbol(Arguments.Dictionary({\n    elements: Argument(Type.Any) // BundleElement[]\n\n  }), Struct.Types.ElementSelectionQuery, 'A selection with single structure containing represented by the bundle.'),\n  // Use with caution as this is not \"state saveable\"\n  // This query should never be used in any State Transform!\n  current: symbol(Arguments.None, Struct.Types.ElementSelectionQuery, 'Current selection provided by the query context. Avoid using this in State Transforms.')\n};\nexport var internal = {\n  '@header': 'Internal Queries',\n  generator: generator\n};","map":{"version":3,"sources":["../../../../src/mol-script/language/symbol-table/internal.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,IAAT,QAAqB,SAArB;AACA,OAAO,KAAK,MAAZ,MAAwB,mBAAxB;AACA,SAAS,SAAT,EAAoB,QAApB,QAAoC,WAApC;AACA,SAAS,MAAT,QAAuB,YAAvB;AAEA,IAAM,SAAS,GAAG;AACd,aAAW,YADG;AAGd,EAAA,aAAa,EAAE,MAAM,CAAC,SAAS,CAAC,UAAV,CAAqB;AACvC;AACA,IAAA,YAAY,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAN,CAFiB;AAGvC,IAAA,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAN,CAH0B;AAIvC,IAAA,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAN,CAJuB,CAIZ;;AAJY,GAArB,CAAD,EAKjB,IAAI,CAAC,GALY,CAHP;AAUd,EAAA,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,UAAV,CAAqB;AAChC,IAAA,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAN,CADc,CACH;;AADG,GAArB,CAAD,EAEV,MAAM,CAAC,KAAP,CAAa,qBAFH,EAE0B,yEAF1B,CAVA;AAcd;AACA;AACA,EAAA,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,IAAX,EAAiB,MAAM,CAAC,KAAP,CAAa,qBAA9B,EAAqD,wFAArD;AAhBD,CAAlB;AAmBA,OAAO,IAAM,QAAQ,GAAG;AACpB,aAAW,kBADS;AAEpB,EAAA,SAAS,EAAA;AAFW,CAAjB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Type } from '../type';\r\nimport * as Struct from './structure-query';\r\nimport { Arguments, Argument } from '../symbol';\r\nimport { symbol } from '../helpers';\r\nvar generator = {\r\n    '@header': 'Generators',\r\n    bundleElement: symbol(Arguments.Dictionary({\r\n        // TODO: should we use more universal unit keys? (i.e. based on chain and \"operator name\")\r\n        groupedUnits: Argument(Type.Any),\r\n        set: Argument(Type.Any),\r\n        ranges: Argument(Type.Any) // SortedArray<UnitIndex>\r\n    }), Type.Any),\r\n    bundle: symbol(Arguments.Dictionary({\r\n        elements: Argument(Type.Any) // BundleElement[]\r\n    }), Struct.Types.ElementSelectionQuery, 'A selection with single structure containing represented by the bundle.'),\r\n    // Use with caution as this is not \"state saveable\"\r\n    // This query should never be used in any State Transform!\r\n    current: symbol(Arguments.None, Struct.Types.ElementSelectionQuery, 'Current selection provided by the query context. Avoid using this in State Transforms.')\r\n};\r\nexport var internal = {\r\n    '@header': 'Internal Queries',\r\n    generator: generator\r\n};\r\n//# sourceMappingURL=internal.js.map"]},"metadata":{},"sourceType":"module"}