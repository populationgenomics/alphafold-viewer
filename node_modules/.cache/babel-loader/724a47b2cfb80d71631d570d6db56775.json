{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { idFactory } from './id-factory';\nvar ValueRef;\n\n(function (ValueRef) {\n  function create(ref) {\n    return {\n      ref: ref\n    };\n  }\n\n  ValueRef.create = create;\n\n  function set(ref, value) {\n    ref.ref = value;\n    return ref;\n  }\n\n  ValueRef.set = set;\n})(ValueRef || (ValueRef = {}));\n\nvar getNextId = idFactory(0, 0x7FFFFFFF);\nvar ValueBox;\n\n(function (ValueBox) {\n  function create(value, metadata) {\n    return {\n      id: getNextId(),\n      version: 0,\n      value: value,\n      metadata: metadata\n    };\n  }\n\n  ValueBox.create = create;\n  /** The box.metadata is carried over from the old box */\n\n  function withValue(box, value) {\n    return {\n      id: box.id,\n      version: box.version + 1,\n      value: value,\n      metadata: box.metadata\n    };\n  }\n\n  ValueBox.withValue = withValue;\n})(ValueBox || (ValueBox = {}));\n\nvar ValueCell;\n\n(function (ValueCell) {\n  function create(value, metadata) {\n    return ValueRef.create(ValueBox.create(value, metadata));\n  }\n\n  ValueCell.create = create;\n  /** The box.metadata is carried over from the old box */\n\n  function update(cell, value) {\n    return ValueRef.set(cell, ValueBox.withValue(cell.ref, value));\n  }\n\n  ValueCell.update = update;\n\n  function set(cell, box) {\n    return ValueRef.set(cell, box);\n  }\n\n  ValueCell.set = set;\n  /** Updates the cell if the value is has changed, comparing by reference */\n\n  function updateIfChanged(cell, value) {\n    return cell.ref.value !== value ? update(cell, value) : cell;\n  }\n\n  ValueCell.updateIfChanged = updateIfChanged;\n})(ValueCell || (ValueCell = {}));\n\nexport { ValueRef, ValueBox, ValueCell };","map":{"version":3,"sources":["../../src/mol-util/value-cell.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,SAAT,QAA0B,cAA1B;AAKA,IAAU,QAAV;;AAAA,CAAA,UAAU,QAAV,EAAkB;AACd,WAAgB,MAAhB,CAA0B,GAA1B,EAAgC;AAAiB,WAAO;AAAE,MAAA,GAAG,EAAA;AAAL,KAAP;AAAiB;;AAAlD,EAAA,QAAA,CAAA,MAAA,GAAM,MAAN;;AAChB,WAAgB,GAAhB,CAAuB,GAAvB,EAAyC,KAAzC,EAAiD;AAAI,IAAA,GAAG,CAAC,GAAJ,GAAU,KAAV;AAAiB,WAAO,GAAP;AAAa;;AAAnE,EAAA,QAAA,CAAA,GAAA,GAAG,GAAH;AACnB,CAHD,EAAU,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAlB;;AAKA,IAAM,SAAS,GAAG,SAAS,CAAC,CAAD,EAAI,UAAJ,CAA3B;AAcA,IAAU,QAAV;;AAAA,CAAA,UAAU,QAAV,EAAkB;AACd,WAAgB,MAAhB,CAAqC,KAArC,EAA+C,QAA/C,EAA2D;AACvD,WAAO;AAAE,MAAA,EAAE,EAAE,SAAS,EAAf;AAAmB,MAAA,OAAO,EAAE,CAA5B;AAA+B,MAAA,KAAK,EAAA,KAApC;AAAsC,MAAA,QAAQ,EAAE;AAAhD,KAAP;AACH;;AAFe,EAAA,QAAA,CAAA,MAAA,GAAM,MAAN;AAIhB;;AACA,WAAgB,SAAhB,CAAgC,GAAhC,EAAqD,KAArD,EAA6D;AACzD,WAAO;AAAE,MAAA,EAAE,EAAE,GAAG,CAAC,EAAV;AAAc,MAAA,OAAO,EAAE,GAAG,CAAC,OAAJ,GAAc,CAArC;AAAwC,MAAA,KAAK,EAAA,KAA7C;AAA+C,MAAA,QAAQ,EAAE,GAAG,CAAC;AAA7D,KAAP;AACH;;AAFe,EAAA,QAAA,CAAA,SAAA,GAAS,SAAT;AAGnB,CATD,EAAU,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAlB;;AAcA,IAAU,SAAV;;AAAA,CAAA,UAAU,SAAV,EAAmB;AACf,WAAgB,MAAhB,CAAqC,KAArC,EAA+C,QAA/C,EAA2D;AACvD,WAAO,QAAQ,CAAC,MAAT,CAAgB,QAAQ,CAAC,MAAT,CAAgB,KAAhB,EAAuB,QAAvB,CAAhB,CAAP;AACH;;AAFe,EAAA,SAAA,CAAA,MAAA,GAAM,MAAN;AAIhB;;AACA,WAAgB,MAAhB,CAA6B,IAA7B,EAAoD,KAApD,EAA4D;AACxD,WAAO,QAAQ,CAAC,GAAT,CAAa,IAAb,EAAmB,QAAQ,CAAC,SAAT,CAAmB,IAAI,CAAC,GAAxB,EAA6B,KAA7B,CAAnB,CAAP;AACH;;AAFe,EAAA,SAAA,CAAA,MAAA,GAAM,MAAN;;AAIhB,WAAgB,GAAhB,CAA0B,IAA1B,EAAiD,GAAjD,EAAoE;AAChE,WAAO,QAAQ,CAAC,GAAT,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACH;;AAFe,EAAA,SAAA,CAAA,GAAA,GAAG,GAAH;AAIhB;;AACA,WAAgB,eAAhB,CAAsC,IAAtC,EAA6D,KAA7D,EAAqE;AACjE,WAAO,IAAI,CAAC,GAAL,CAAS,KAAT,KAAmB,KAAnB,GAA2B,MAAM,CAAC,IAAD,EAAO,KAAP,CAAjC,GAAiD,IAAxD;AACH;;AAFe,EAAA,SAAA,CAAA,eAAA,GAAe,eAAf;AAGnB,CAlBD,EAAU,SAAS,KAAT,SAAS,GAAA,EAAA,CAAnB;;AAoBA,SAAS,QAAT,EAAmB,QAAnB,EAA6B,SAA7B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { idFactory } from './id-factory';\r\nvar ValueRef;\r\n(function (ValueRef) {\r\n    function create(ref) { return { ref: ref }; }\r\n    ValueRef.create = create;\r\n    function set(ref, value) { ref.ref = value; return ref; }\r\n    ValueRef.set = set;\r\n})(ValueRef || (ValueRef = {}));\r\nvar getNextId = idFactory(0, 0x7FFFFFFF);\r\nvar ValueBox;\r\n(function (ValueBox) {\r\n    function create(value, metadata) {\r\n        return { id: getNextId(), version: 0, value: value, metadata: metadata };\r\n    }\r\n    ValueBox.create = create;\r\n    /** The box.metadata is carried over from the old box */\r\n    function withValue(box, value) {\r\n        return { id: box.id, version: box.version + 1, value: value, metadata: box.metadata };\r\n    }\r\n    ValueBox.withValue = withValue;\r\n})(ValueBox || (ValueBox = {}));\r\nvar ValueCell;\r\n(function (ValueCell) {\r\n    function create(value, metadata) {\r\n        return ValueRef.create(ValueBox.create(value, metadata));\r\n    }\r\n    ValueCell.create = create;\r\n    /** The box.metadata is carried over from the old box */\r\n    function update(cell, value) {\r\n        return ValueRef.set(cell, ValueBox.withValue(cell.ref, value));\r\n    }\r\n    ValueCell.update = update;\r\n    function set(cell, box) {\r\n        return ValueRef.set(cell, box);\r\n    }\r\n    ValueCell.set = set;\r\n    /** Updates the cell if the value is has changed, comparing by reference */\r\n    function updateIfChanged(cell, value) {\r\n        return cell.ref.value !== value ? update(cell, value) : cell;\r\n    }\r\n    ValueCell.updateIfChanged = updateIfChanged;\r\n})(ValueCell || (ValueCell = {}));\r\nexport { ValueRef, ValueBox, ValueCell };\r\n//# sourceMappingURL=value-cell.js.map"]},"metadata":{},"sourceType":"module"}