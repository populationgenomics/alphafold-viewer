{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { VisualQualityOptions } from '../../../mol-geo/geometry/base';\nimport { Structure } from '../../../mol-model/structure';\nimport { StateObjectRef } from '../../../mol-state';\nimport { StructureSelectionQueries as Q } from '../../helpers/structure-selection-query';\nimport { PluginConfig } from '../../../mol-plugin/config';\nimport { StructureFocusRepresentation } from '../../../mol-plugin/behavior/dynamic/selection/structure-focus-representation';\nimport { createStructureColorThemeParams } from '../../helpers/structure-representation-params';\nimport { ChainIdColorThemeProvider } from '../../../mol-theme/color/chain-id';\nimport { OperatorNameColorThemeProvider } from '../../../mol-theme/color/operator-name';\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\nimport { StructConn } from '../../../mol-model-formats/structure/property/bonds/struct_conn';\nimport { assertUnreachable } from '../../../mol-util/type-helpers';\nexport function StructureRepresentationPresetProvider(repr) {\n  return repr;\n}\n\n(function (StructureRepresentationPresetProvider) {\n  StructureRepresentationPresetProvider.CommonParams = {\n    ignoreHydrogens: PD.Optional(PD.Boolean(false)),\n    quality: PD.Optional(PD.Select('auto', VisualQualityOptions)),\n    theme: PD.Optional(PD.Group({\n      globalName: PD.Optional(PD.Text('')),\n      carbonColor: PD.Optional(PD.Select('chain-id', PD.arrayToOptions(['chain-id', 'operator-name', 'element-symbol']))),\n      symmetryColor: PD.Optional(PD.Text('')),\n      focus: PD.Optional(PD.Group({\n        name: PD.Optional(PD.Text('')),\n        params: PD.Optional(PD.Value({}))\n      }))\n    }))\n  };\n\n  function getCarbonColorParams(name) {\n    return name === 'chain-id' ? {\n      name: name,\n      params: ChainIdColorThemeProvider.defaultValues\n    } : name === 'operator-name' ? {\n      name: name,\n      params: OperatorNameColorThemeProvider.defaultValues\n    } : {\n      name: name,\n      params: {}\n    };\n  }\n\n  function isSymmetry(structure) {\n    return structure.units.some(function (u) {\n      return !u.conformation.operator.assembly && u.conformation.operator.spgrOp >= 0;\n    });\n  }\n\n  function reprBuilder(plugin, params, structure) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var update = plugin.state.data.build();\n    var builder = plugin.builders.structure.representation;\n    var typeParams = {\n      quality: plugin.managers.structure.component.state.options.visualQuality,\n      ignoreHydrogens: !plugin.managers.structure.component.state.options.showHydrogens\n    };\n    if (params.quality && params.quality !== 'auto') typeParams.quality = params.quality;\n    if (params.ignoreHydrogens !== void 0) typeParams.ignoreHydrogens = !!params.ignoreHydrogens;\n    var color = ((_a = params.theme) === null || _a === void 0 ? void 0 : _a.globalName) ? (_b = params.theme) === null || _b === void 0 ? void 0 : _b.globalName : void 0;\n    var ballAndStickColor = ((_c = params.theme) === null || _c === void 0 ? void 0 : _c.carbonColor) !== undefined ? {\n      carbonColor: getCarbonColorParams((_d = params.theme) === null || _d === void 0 ? void 0 : _d.carbonColor)\n    } : {};\n    var symmetryColor = structure && ((_e = params.theme) === null || _e === void 0 ? void 0 : _e.symmetryColor) ? isSymmetry(structure) ? (_f = params.theme) === null || _f === void 0 ? void 0 : _f.symmetryColor : color : color;\n    return {\n      update: update,\n      builder: builder,\n      color: color,\n      symmetryColor: symmetryColor,\n      typeParams: typeParams,\n      ballAndStickColor: ballAndStickColor\n    };\n  }\n\n  StructureRepresentationPresetProvider.reprBuilder = reprBuilder;\n\n  function updateFocusRepr(plugin, structure, themeName, themeParams) {\n    return plugin.state.updateBehavior(StructureFocusRepresentation, function (p) {\n      var c = createStructureColorThemeParams(plugin, structure, 'ball-and-stick', themeName || 'element-symbol', themeParams);\n      p.surroundingsParams.colorTheme = c;\n      p.targetParams.colorTheme = c;\n    });\n  }\n\n  StructureRepresentationPresetProvider.updateFocusRepr = updateFocusRepr;\n})(StructureRepresentationPresetProvider || (StructureRepresentationPresetProvider = {}));\n\nvar CommonParams = StructureRepresentationPresetProvider.CommonParams;\nvar reprBuilder = StructureRepresentationPresetProvider.reprBuilder;\nvar updateFocusRepr = StructureRepresentationPresetProvider.updateFocusRepr;\nvar auto = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-auto',\n  display: {\n    name: 'Automatic',\n    description: 'Show representations based on the size of the structure. Smaller structures are shown with more detail than larger ones, ranging from atomistic display to coarse surfaces.'\n  },\n  params: function () {\n    return CommonParams;\n  },\n  apply: function (ref, params, plugin) {\n    var _a, _b;\n\n    var structure = (_b = (_a = StateObjectRef.resolveAndCheck(plugin.state.data, ref)) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\n    if (!structure) return {};\n    var thresholds = plugin.config.get(PluginConfig.Structure.SizeThresholds) || Structure.DefaultSizeThresholds;\n    var size = Structure.getSize(structure, thresholds);\n    var gapFraction = structure.polymerResidueCount / structure.polymerGapCount;\n\n    switch (size) {\n      case Structure.Size.Gigantic:\n      case Structure.Size.Huge:\n        return coarseSurface.apply(ref, params, plugin);\n\n      case Structure.Size.Large:\n        return polymerCartoon.apply(ref, params, plugin);\n\n      case Structure.Size.Medium:\n        if (gapFraction > 3) {\n          return polymerAndLigand.apply(ref, params, plugin);\n        }\n\n      // else fall through\n\n      case Structure.Size.Small:\n        // `showCarbohydrateSymbol: true` is nice, e.g., for PDB 1aga\n        return atomicDetail.apply(ref, __assign(__assign({}, params), {\n          showCarbohydrateSymbol: true\n        }), plugin);\n\n      default:\n        assertUnreachable(size);\n    }\n  }\n});\nvar empty = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-empty',\n  display: {\n    name: 'Empty',\n    description: 'Removes all existing representations.'\n  },\n  apply: function (ref, params, plugin) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , {}];\n      });\n    });\n  }\n});\nvar BuiltInPresetGroupName = 'Basic';\nvar polymerAndLigand = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-polymer-and-ligand',\n  display: {\n    name: 'Polymer & Ligand',\n    group: BuiltInPresetGroupName,\n    description: 'Shows polymers as Cartoon, ligands as Ball & Stick, carbohydrates as 3D-SNFG and water molecules semi-transparent.'\n  },\n  params: function () {\n    return CommonParams;\n  },\n  apply: function (ref, params, plugin) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var structureCell, components, structure, cartoonProps, waterType, lipidType, _l, update, builder, typeParams, color, symmetryColor, ballAndStickColor, representations;\n\n      var _m;\n\n      return __generator(this, function (_o) {\n        switch (_o.label) {\n          case 0:\n            structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\n            if (!structureCell) return [2\n            /*return*/\n            , {}];\n            _m = {};\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'polymer')];\n\n          case 1:\n            _m.polymer = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'ligand')];\n\n          case 2:\n            _m.ligand = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'non-standard')];\n\n          case 3:\n            _m.nonStandard = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'branched', {\n              label: 'Carbohydrate'\n            })];\n\n          case 4:\n            _m.branched = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'water')];\n\n          case 5:\n            _m.water = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'ion')];\n\n          case 6:\n            _m.ion = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'lipid')];\n\n          case 7:\n            _m.lipid = _o.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'coarse')];\n\n          case 8:\n            components = (_m.coarse = _o.sent(), _m);\n            structure = structureCell.obj.data;\n            cartoonProps = {\n              sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2\n            };\n            waterType = (((_c = (_b = (_a = components.water) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.elementCount) || 0) > 50000 ? 'line' : 'ball-and-stick';\n            lipidType = (((_f = (_e = (_d = components.lipid) === null || _d === void 0 ? void 0 : _d.obj) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.elementCount) || 0) > 20000 ? 'line' : 'ball-and-stick';\n            _l = reprBuilder(plugin, params, structure), update = _l.update, builder = _l.builder, typeParams = _l.typeParams, color = _l.color, symmetryColor = _l.symmetryColor, ballAndStickColor = _l.ballAndStickColor;\n            representations = {\n              polymer: builder.buildRepresentation(update, components.polymer, {\n                type: 'cartoon',\n                typeParams: __assign(__assign({}, typeParams), cartoonProps),\n                color: symmetryColor\n              }, {\n                tag: 'polymer'\n              }),\n              ligand: builder.buildRepresentation(update, components.ligand, {\n                type: 'ball-and-stick',\n                typeParams: typeParams,\n                color: color,\n                colorParams: ballAndStickColor\n              }, {\n                tag: 'ligand'\n              }),\n              nonStandard: builder.buildRepresentation(update, components.nonStandard, {\n                type: 'ball-and-stick',\n                typeParams: typeParams,\n                color: color,\n                colorParams: ballAndStickColor\n              }, {\n                tag: 'non-standard'\n              }),\n              branchedBallAndStick: builder.buildRepresentation(update, components.branched, {\n                type: 'ball-and-stick',\n                typeParams: __assign(__assign({}, typeParams), {\n                  alpha: 0.3\n                }),\n                color: color,\n                colorParams: ballAndStickColor\n              }, {\n                tag: 'branched-ball-and-stick'\n              }),\n              branchedSnfg3d: builder.buildRepresentation(update, components.branched, {\n                type: 'carbohydrate',\n                typeParams: typeParams,\n                color: color\n              }, {\n                tag: 'branched-snfg-3d'\n              }),\n              water: builder.buildRepresentation(update, components.water, {\n                type: waterType,\n                typeParams: __assign(__assign({}, typeParams), {\n                  alpha: 0.6\n                }),\n                color: color,\n                colorParams: {\n                  carbonColor: {\n                    name: 'element-symbol',\n                    params: {}\n                  }\n                }\n              }, {\n                tag: 'water'\n              }),\n              ion: builder.buildRepresentation(update, components.ion, {\n                type: 'ball-and-stick',\n                typeParams: typeParams,\n                color: color,\n                colorParams: {\n                  carbonColor: {\n                    name: 'element-symbol',\n                    params: {}\n                  }\n                }\n              }, {\n                tag: 'ion'\n              }),\n              lipid: builder.buildRepresentation(update, components.lipid, {\n                type: lipidType,\n                typeParams: __assign(__assign({}, typeParams), {\n                  alpha: 0.6\n                }),\n                color: color,\n                colorParams: {\n                  carbonColor: {\n                    name: 'element-symbol',\n                    params: {}\n                  }\n                }\n              }, {\n                tag: 'lipid'\n              }),\n              coarse: builder.buildRepresentation(update, components.coarse, {\n                type: 'spacefill',\n                typeParams: typeParams,\n                color: color || 'chain-id'\n              }, {\n                tag: 'coarse'\n              })\n            };\n            return [4\n            /*yield*/\n            , update.commit({\n              revertOnError: false\n            })];\n\n          case 9:\n            _o.sent();\n\n            return [4\n            /*yield*/\n            , updateFocusRepr(plugin, structure, (_h = (_g = params.theme) === null || _g === void 0 ? void 0 : _g.focus) === null || _h === void 0 ? void 0 : _h.name, (_k = (_j = params.theme) === null || _j === void 0 ? void 0 : _j.focus) === null || _k === void 0 ? void 0 : _k.params)];\n\n          case 10:\n            _o.sent();\n\n            return [2\n            /*return*/\n            , {\n              components: components,\n              representations: representations\n            }];\n        }\n      });\n    });\n  }\n});\nvar proteinAndNucleic = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-protein-and-nucleic',\n  display: {\n    name: 'Protein & Nucleic',\n    group: BuiltInPresetGroupName,\n    description: 'Shows proteins as Cartoon and RNA/DNA as Gaussian Surface.'\n  },\n  params: function () {\n    return CommonParams;\n  },\n  apply: function (ref, params, plugin) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var structureCell, components, structure, cartoonProps, gaussianProps, _e, update, builder, typeParams, symmetryColor, representations;\n\n      var _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\n            if (!structureCell) return [2\n            /*return*/\n            , {}];\n            _f = {};\n            return [4\n            /*yield*/\n            , presetSelectionComponent(plugin, structureCell, 'protein')];\n\n          case 1:\n            _f.protein = _g.sent();\n            return [4\n            /*yield*/\n            , presetSelectionComponent(plugin, structureCell, 'nucleic')];\n\n          case 2:\n            components = (_f.nucleic = _g.sent(), _f);\n            structure = structureCell.obj.data;\n            cartoonProps = {\n              sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2\n            };\n            gaussianProps = {\n              radiusOffset: structure.isCoarseGrained ? 2 : 0,\n              smoothness: structure.isCoarseGrained ? 1.0 : 1.5\n            };\n            _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\n            representations = {\n              protein: builder.buildRepresentation(update, components.protein, {\n                type: 'cartoon',\n                typeParams: __assign(__assign({}, typeParams), cartoonProps),\n                color: symmetryColor\n              }, {\n                tag: 'protein'\n              }),\n              nucleic: builder.buildRepresentation(update, components.nucleic, {\n                type: 'gaussian-surface',\n                typeParams: __assign(__assign({}, typeParams), gaussianProps),\n                color: symmetryColor\n              }, {\n                tag: 'nucleic'\n              })\n            };\n            return [4\n            /*yield*/\n            , update.commit({\n              revertOnError: true\n            })];\n\n          case 3:\n            _g.sent();\n\n            return [4\n            /*yield*/\n            , updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\n\n          case 4:\n            _g.sent();\n\n            return [2\n            /*return*/\n            , {\n              components: components,\n              representations: representations\n            }];\n        }\n      });\n    });\n  }\n});\nvar coarseSurface = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-coarse-surface',\n  display: {\n    name: 'Coarse Surface',\n    group: BuiltInPresetGroupName,\n    description: 'Shows polymers and lipids as coarse Gaussian Surface.'\n  },\n  params: function () {\n    return CommonParams;\n  },\n  apply: function (ref, params, plugin) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var structureCell, components, structure, size, gaussianProps, _e, update, builder, typeParams, symmetryColor, representations;\n\n      var _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\n            if (!structureCell) return [2\n            /*return*/\n            , {}];\n            _f = {};\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'polymer')];\n\n          case 1:\n            _f.polymer = _g.sent();\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'lipid')];\n\n          case 2:\n            components = (_f.lipid = _g.sent(), _f);\n            structure = structureCell.obj.data;\n            size = Structure.getSize(structure);\n            gaussianProps = Object.create(null);\n\n            if (size === Structure.Size.Gigantic) {\n              Object.assign(gaussianProps, {\n                traceOnly: !structure.isCoarseGrained,\n                radiusOffset: 2,\n                smoothness: 1,\n                visuals: ['structure-gaussian-surface-mesh']\n              });\n            } else if (size === Structure.Size.Huge) {\n              Object.assign(gaussianProps, {\n                radiusOffset: structure.isCoarseGrained ? 2 : 0,\n                smoothness: 1\n              });\n            } else if (structure.isCoarseGrained) {\n              Object.assign(gaussianProps, {\n                radiusOffset: 2,\n                smoothness: 1\n              });\n            }\n\n            _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\n            representations = {\n              polymer: builder.buildRepresentation(update, components.polymer, {\n                type: 'gaussian-surface',\n                typeParams: __assign(__assign({}, typeParams), gaussianProps),\n                color: symmetryColor\n              }, {\n                tag: 'polymer'\n              }),\n              lipid: builder.buildRepresentation(update, components.lipid, {\n                type: 'gaussian-surface',\n                typeParams: __assign(__assign({}, typeParams), gaussianProps),\n                color: symmetryColor\n              }, {\n                tag: 'lipid'\n              })\n            };\n            return [4\n            /*yield*/\n            , update.commit({\n              revertOnError: true\n            })];\n\n          case 3:\n            _g.sent();\n\n            return [4\n            /*yield*/\n            , updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\n\n          case 4:\n            _g.sent();\n\n            return [2\n            /*return*/\n            , {\n              components: components,\n              representations: representations\n            }];\n        }\n      });\n    });\n  }\n});\nvar polymerCartoon = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-polymer-cartoon',\n  display: {\n    name: 'Polymer Cartoon',\n    group: BuiltInPresetGroupName,\n    description: 'Shows polymers as Cartoon.'\n  },\n  params: function () {\n    return CommonParams;\n  },\n  apply: function (ref, params, plugin) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var structureCell, components, structure, cartoonProps, _e, update, builder, typeParams, symmetryColor, representations;\n\n      var _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\n            if (!structureCell) return [2\n            /*return*/\n            , {}];\n            _f = {};\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'polymer')];\n\n          case 1:\n            components = (_f.polymer = _g.sent(), _f);\n            structure = structureCell.obj.data;\n            cartoonProps = {\n              sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2\n            };\n            _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\n            representations = {\n              polymer: builder.buildRepresentation(update, components.polymer, {\n                type: 'cartoon',\n                typeParams: __assign(__assign({}, typeParams), cartoonProps),\n                color: symmetryColor\n              }, {\n                tag: 'polymer'\n              })\n            };\n            return [4\n            /*yield*/\n            , update.commit({\n              revertOnError: true\n            })];\n\n          case 2:\n            _g.sent();\n\n            return [4\n            /*yield*/\n            , updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\n\n          case 3:\n            _g.sent();\n\n            return [2\n            /*return*/\n            , {\n              components: components,\n              representations: representations\n            }];\n        }\n      });\n    });\n  }\n});\nvar atomicDetail = StructureRepresentationPresetProvider({\n  id: 'preset-structure-representation-atomic-detail',\n  display: {\n    name: 'Atomic Detail',\n    group: BuiltInPresetGroupName,\n    description: 'Shows everything in atomic detail with Ball & Stick.'\n  },\n  params: function () {\n    return __assign(__assign({}, CommonParams), {\n      showCarbohydrateSymbol: PD.Boolean(false)\n    });\n  },\n  apply: function (ref, params, plugin) {\n    return __awaiter(this, void 0, void 0, function () {\n      var structureCell, components, structure, highElementCount, lowResidueElementRatio, m, bondsGiven, atomicType, showCarbohydrateSymbol, _a, _b, _c, _d, update, builder, typeParams, color, ballAndStickColor, colorParams, representations;\n\n      var _e, _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\n            if (!structureCell) return [2\n            /*return*/\n            , {}];\n            _e = {};\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'all')];\n\n          case 1:\n            components = (_e.all = _g.sent(), _e.branched = undefined, _e);\n            structure = structureCell.obj.data;\n            highElementCount = structure.elementCount > 100000;\n            lowResidueElementRatio = structure.atomicResidueCount && structure.elementCount > 1000 && structure.atomicResidueCount / structure.elementCount < 3;\n            m = structure.models[0];\n            bondsGiven = !!IndexPairBonds.Provider.get(m) || StructConn.isExhaustive(m);\n            atomicType = 'ball-and-stick';\n\n            if (structure.isCoarseGrained) {\n              // TODO make configurable?\n              atomicType = structure.elementCount > 1000000 ? 'point' : 'spacefill';\n            } else if (lowResidueElementRatio && !bondsGiven) {\n              atomicType = 'spacefill';\n            } else if (highElementCount) {\n              atomicType = 'line';\n            }\n\n            showCarbohydrateSymbol = params.showCarbohydrateSymbol && !highElementCount && !lowResidueElementRatio;\n            if (!showCarbohydrateSymbol) return [3\n            /*break*/\n            , 3];\n            _b = (_a = Object).assign;\n            _c = [components];\n            _f = {};\n            return [4\n            /*yield*/\n            , presetStaticComponent(plugin, structureCell, 'branched', {\n              label: 'Carbohydrate'\n            })];\n\n          case 2:\n            _b.apply(_a, _c.concat([(_f.branched = _g.sent(), _f)]));\n\n            _g.label = 3;\n\n          case 3:\n            _d = reprBuilder(plugin, params, structure), update = _d.update, builder = _d.builder, typeParams = _d.typeParams, color = _d.color, ballAndStickColor = _d.ballAndStickColor;\n            colorParams = lowResidueElementRatio && !bondsGiven ? {\n              carbonColor: {\n                name: 'element-symbol',\n                params: {}\n              }\n            } : ballAndStickColor;\n            representations = {\n              all: builder.buildRepresentation(update, components.all, {\n                type: atomicType,\n                typeParams: typeParams,\n                color: color,\n                colorParams: colorParams\n              }, {\n                tag: 'all'\n              })\n            };\n\n            if (showCarbohydrateSymbol) {\n              Object.assign(representations, {\n                snfg3d: builder.buildRepresentation(update, components.branched, {\n                  type: 'carbohydrate',\n                  typeParams: __assign(__assign({}, typeParams), {\n                    alpha: 0.4,\n                    visuals: ['carbohydrate-symbol']\n                  }),\n                  color: color\n                }, {\n                  tag: 'snfg-3d'\n                })\n              });\n            }\n\n            return [4\n            /*yield*/\n            , update.commit({\n              revertOnError: true\n            })];\n\n          case 4:\n            _g.sent();\n\n            return [2\n            /*return*/\n            , {\n              components: components,\n              representations: representations\n            }];\n        }\n      });\n    });\n  }\n});\nexport function presetStaticComponent(plugin, structure, type, params) {\n  return plugin.builders.structure.tryCreateComponentStatic(structure, type, params);\n}\nexport function presetSelectionComponent(plugin, structure, query, params) {\n  return plugin.builders.structure.tryCreateComponentFromSelection(structure, Q[query], \"selection-\" + query, params);\n}\nexport var PresetStructureRepresentations = {\n  empty: empty,\n  auto: auto,\n  'atomic-detail': atomicDetail,\n  'polymer-cartoon': polymerCartoon,\n  'polymer-and-ligand': polymerAndLigand,\n  'protein-and-nucleic': proteinAndNucleic,\n  'coarse-surface': coarseSurface\n};","map":{"version":3,"sources":["../../../../src/mol-plugin-state/builder/structure/representation-preset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { VisualQualityOptions } from '../../../mol-geo/geometry/base';\r\nimport { Structure } from '../../../mol-model/structure';\r\nimport { StateObjectRef } from '../../../mol-state';\r\nimport { StructureSelectionQueries as Q } from '../../helpers/structure-selection-query';\r\nimport { PluginConfig } from '../../../mol-plugin/config';\r\nimport { StructureFocusRepresentation } from '../../../mol-plugin/behavior/dynamic/selection/structure-focus-representation';\r\nimport { createStructureColorThemeParams } from '../../helpers/structure-representation-params';\r\nimport { ChainIdColorThemeProvider } from '../../../mol-theme/color/chain-id';\r\nimport { OperatorNameColorThemeProvider } from '../../../mol-theme/color/operator-name';\r\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\r\nimport { StructConn } from '../../../mol-model-formats/structure/property/bonds/struct_conn';\r\nimport { assertUnreachable } from '../../../mol-util/type-helpers';\r\nexport function StructureRepresentationPresetProvider(repr) { return repr; }\r\n(function (StructureRepresentationPresetProvider) {\r\n    StructureRepresentationPresetProvider.CommonParams = {\r\n        ignoreHydrogens: PD.Optional(PD.Boolean(false)),\r\n        quality: PD.Optional(PD.Select('auto', VisualQualityOptions)),\r\n        theme: PD.Optional(PD.Group({\r\n            globalName: PD.Optional(PD.Text('')),\r\n            carbonColor: PD.Optional(PD.Select('chain-id', PD.arrayToOptions(['chain-id', 'operator-name', 'element-symbol']))),\r\n            symmetryColor: PD.Optional(PD.Text('')),\r\n            focus: PD.Optional(PD.Group({\r\n                name: PD.Optional(PD.Text('')),\r\n                params: PD.Optional(PD.Value({}))\r\n            }))\r\n        }))\r\n    };\r\n    function getCarbonColorParams(name) {\r\n        return name === 'chain-id'\r\n            ? { name: name, params: ChainIdColorThemeProvider.defaultValues }\r\n            : name === 'operator-name'\r\n                ? { name: name, params: OperatorNameColorThemeProvider.defaultValues }\r\n                : { name: name, params: {} };\r\n    }\r\n    function isSymmetry(structure) {\r\n        return structure.units.some(function (u) { return !u.conformation.operator.assembly && u.conformation.operator.spgrOp >= 0; });\r\n    }\r\n    function reprBuilder(plugin, params, structure) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var update = plugin.state.data.build();\r\n        var builder = plugin.builders.structure.representation;\r\n        var typeParams = {\r\n            quality: plugin.managers.structure.component.state.options.visualQuality,\r\n            ignoreHydrogens: !plugin.managers.structure.component.state.options.showHydrogens,\r\n        };\r\n        if (params.quality && params.quality !== 'auto')\r\n            typeParams.quality = params.quality;\r\n        if (params.ignoreHydrogens !== void 0)\r\n            typeParams.ignoreHydrogens = !!params.ignoreHydrogens;\r\n        var color = ((_a = params.theme) === null || _a === void 0 ? void 0 : _a.globalName) ? (_b = params.theme) === null || _b === void 0 ? void 0 : _b.globalName : void 0;\r\n        var ballAndStickColor = ((_c = params.theme) === null || _c === void 0 ? void 0 : _c.carbonColor) !== undefined\r\n            ? { carbonColor: getCarbonColorParams((_d = params.theme) === null || _d === void 0 ? void 0 : _d.carbonColor) }\r\n            : {};\r\n        var symmetryColor = structure && ((_e = params.theme) === null || _e === void 0 ? void 0 : _e.symmetryColor)\r\n            ? isSymmetry(structure) ? (_f = params.theme) === null || _f === void 0 ? void 0 : _f.symmetryColor : color\r\n            : color;\r\n        return { update: update, builder: builder, color: color, symmetryColor: symmetryColor, typeParams: typeParams, ballAndStickColor: ballAndStickColor };\r\n    }\r\n    StructureRepresentationPresetProvider.reprBuilder = reprBuilder;\r\n    function updateFocusRepr(plugin, structure, themeName, themeParams) {\r\n        return plugin.state.updateBehavior(StructureFocusRepresentation, function (p) {\r\n            var c = createStructureColorThemeParams(plugin, structure, 'ball-and-stick', themeName || 'element-symbol', themeParams);\r\n            p.surroundingsParams.colorTheme = c;\r\n            p.targetParams.colorTheme = c;\r\n        });\r\n    }\r\n    StructureRepresentationPresetProvider.updateFocusRepr = updateFocusRepr;\r\n})(StructureRepresentationPresetProvider || (StructureRepresentationPresetProvider = {}));\r\nvar CommonParams = StructureRepresentationPresetProvider.CommonParams;\r\nvar reprBuilder = StructureRepresentationPresetProvider.reprBuilder;\r\nvar updateFocusRepr = StructureRepresentationPresetProvider.updateFocusRepr;\r\nvar auto = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-auto',\r\n    display: {\r\n        name: 'Automatic',\r\n        description: 'Show representations based on the size of the structure. Smaller structures are shown with more detail than larger ones, ranging from atomistic display to coarse surfaces.'\r\n    },\r\n    params: function () { return CommonParams; },\r\n    apply: function (ref, params, plugin) {\r\n        var _a, _b;\r\n        var structure = (_b = (_a = StateObjectRef.resolveAndCheck(plugin.state.data, ref)) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data;\r\n        if (!structure)\r\n            return {};\r\n        var thresholds = plugin.config.get(PluginConfig.Structure.SizeThresholds) || Structure.DefaultSizeThresholds;\r\n        var size = Structure.getSize(structure, thresholds);\r\n        var gapFraction = structure.polymerResidueCount / structure.polymerGapCount;\r\n        switch (size) {\r\n            case Structure.Size.Gigantic:\r\n            case Structure.Size.Huge:\r\n                return coarseSurface.apply(ref, params, plugin);\r\n            case Structure.Size.Large:\r\n                return polymerCartoon.apply(ref, params, plugin);\r\n            case Structure.Size.Medium:\r\n                if (gapFraction > 3) {\r\n                    return polymerAndLigand.apply(ref, params, plugin);\r\n                } // else fall through\r\n            case Structure.Size.Small:\r\n                // `showCarbohydrateSymbol: true` is nice, e.g., for PDB 1aga\r\n                return atomicDetail.apply(ref, __assign(__assign({}, params), { showCarbohydrateSymbol: true }), plugin);\r\n            default:\r\n                assertUnreachable(size);\r\n        }\r\n    }\r\n});\r\nvar empty = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-empty',\r\n    display: { name: 'Empty', description: 'Removes all existing representations.' },\r\n    apply: function (ref, params, plugin) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, {}];\r\n            });\r\n        });\r\n    }\r\n});\r\nvar BuiltInPresetGroupName = 'Basic';\r\nvar polymerAndLigand = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-polymer-and-ligand',\r\n    display: {\r\n        name: 'Polymer & Ligand', group: BuiltInPresetGroupName,\r\n        description: 'Shows polymers as Cartoon, ligands as Ball & Stick, carbohydrates as 3D-SNFG and water molecules semi-transparent.'\r\n    },\r\n    params: function () { return CommonParams; },\r\n    apply: function (ref, params, plugin) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var structureCell, components, structure, cartoonProps, waterType, lipidType, _l, update, builder, typeParams, color, symmetryColor, ballAndStickColor, representations;\r\n            var _m;\r\n            return __generator(this, function (_o) {\r\n                switch (_o.label) {\r\n                    case 0:\r\n                        structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\r\n                        if (!structureCell)\r\n                            return [2 /*return*/, {}];\r\n                        _m = {};\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'polymer')];\r\n                    case 1:\r\n                        _m.polymer = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'ligand')];\r\n                    case 2:\r\n                        _m.ligand = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'non-standard')];\r\n                    case 3:\r\n                        _m.nonStandard = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'branched', { label: 'Carbohydrate' })];\r\n                    case 4:\r\n                        _m.branched = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'water')];\r\n                    case 5:\r\n                        _m.water = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'ion')];\r\n                    case 6:\r\n                        _m.ion = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'lipid')];\r\n                    case 7:\r\n                        _m.lipid = _o.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'coarse')];\r\n                    case 8:\r\n                        components = (_m.coarse = _o.sent(),\r\n                            _m);\r\n                        structure = structureCell.obj.data;\r\n                        cartoonProps = {\r\n                            sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2,\r\n                        };\r\n                        waterType = (((_c = (_b = (_a = components.water) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.elementCount) || 0) > 50000 ? 'line' : 'ball-and-stick';\r\n                        lipidType = (((_f = (_e = (_d = components.lipid) === null || _d === void 0 ? void 0 : _d.obj) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.elementCount) || 0) > 20000 ? 'line' : 'ball-and-stick';\r\n                        _l = reprBuilder(plugin, params, structure), update = _l.update, builder = _l.builder, typeParams = _l.typeParams, color = _l.color, symmetryColor = _l.symmetryColor, ballAndStickColor = _l.ballAndStickColor;\r\n                        representations = {\r\n                            polymer: builder.buildRepresentation(update, components.polymer, { type: 'cartoon', typeParams: __assign(__assign({}, typeParams), cartoonProps), color: symmetryColor }, { tag: 'polymer' }),\r\n                            ligand: builder.buildRepresentation(update, components.ligand, { type: 'ball-and-stick', typeParams: typeParams, color: color, colorParams: ballAndStickColor }, { tag: 'ligand' }),\r\n                            nonStandard: builder.buildRepresentation(update, components.nonStandard, { type: 'ball-and-stick', typeParams: typeParams, color: color, colorParams: ballAndStickColor }, { tag: 'non-standard' }),\r\n                            branchedBallAndStick: builder.buildRepresentation(update, components.branched, { type: 'ball-and-stick', typeParams: __assign(__assign({}, typeParams), { alpha: 0.3 }), color: color, colorParams: ballAndStickColor }, { tag: 'branched-ball-and-stick' }),\r\n                            branchedSnfg3d: builder.buildRepresentation(update, components.branched, { type: 'carbohydrate', typeParams: typeParams, color: color }, { tag: 'branched-snfg-3d' }),\r\n                            water: builder.buildRepresentation(update, components.water, { type: waterType, typeParams: __assign(__assign({}, typeParams), { alpha: 0.6 }), color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'water' }),\r\n                            ion: builder.buildRepresentation(update, components.ion, { type: 'ball-and-stick', typeParams: typeParams, color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'ion' }),\r\n                            lipid: builder.buildRepresentation(update, components.lipid, { type: lipidType, typeParams: __assign(__assign({}, typeParams), { alpha: 0.6 }), color: color, colorParams: { carbonColor: { name: 'element-symbol', params: {} } } }, { tag: 'lipid' }),\r\n                            coarse: builder.buildRepresentation(update, components.coarse, { type: 'spacefill', typeParams: typeParams, color: color || 'chain-id' }, { tag: 'coarse' })\r\n                        };\r\n                        return [4 /*yield*/, update.commit({ revertOnError: false })];\r\n                    case 9:\r\n                        _o.sent();\r\n                        return [4 /*yield*/, updateFocusRepr(plugin, structure, (_h = (_g = params.theme) === null || _g === void 0 ? void 0 : _g.focus) === null || _h === void 0 ? void 0 : _h.name, (_k = (_j = params.theme) === null || _j === void 0 ? void 0 : _j.focus) === null || _k === void 0 ? void 0 : _k.params)];\r\n                    case 10:\r\n                        _o.sent();\r\n                        return [2 /*return*/, { components: components, representations: representations }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\nvar proteinAndNucleic = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-protein-and-nucleic',\r\n    display: {\r\n        name: 'Protein & Nucleic', group: BuiltInPresetGroupName,\r\n        description: 'Shows proteins as Cartoon and RNA/DNA as Gaussian Surface.'\r\n    },\r\n    params: function () { return CommonParams; },\r\n    apply: function (ref, params, plugin) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var structureCell, components, structure, cartoonProps, gaussianProps, _e, update, builder, typeParams, symmetryColor, representations;\r\n            var _f;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\r\n                        if (!structureCell)\r\n                            return [2 /*return*/, {}];\r\n                        _f = {};\r\n                        return [4 /*yield*/, presetSelectionComponent(plugin, structureCell, 'protein')];\r\n                    case 1:\r\n                        _f.protein = _g.sent();\r\n                        return [4 /*yield*/, presetSelectionComponent(plugin, structureCell, 'nucleic')];\r\n                    case 2:\r\n                        components = (_f.nucleic = _g.sent(),\r\n                            _f);\r\n                        structure = structureCell.obj.data;\r\n                        cartoonProps = {\r\n                            sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2,\r\n                        };\r\n                        gaussianProps = {\r\n                            radiusOffset: structure.isCoarseGrained ? 2 : 0,\r\n                            smoothness: structure.isCoarseGrained ? 1.0 : 1.5,\r\n                        };\r\n                        _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\r\n                        representations = {\r\n                            protein: builder.buildRepresentation(update, components.protein, { type: 'cartoon', typeParams: __assign(__assign({}, typeParams), cartoonProps), color: symmetryColor }, { tag: 'protein' }),\r\n                            nucleic: builder.buildRepresentation(update, components.nucleic, { type: 'gaussian-surface', typeParams: __assign(__assign({}, typeParams), gaussianProps), color: symmetryColor }, { tag: 'nucleic' })\r\n                        };\r\n                        return [4 /*yield*/, update.commit({ revertOnError: true })];\r\n                    case 3:\r\n                        _g.sent();\r\n                        return [4 /*yield*/, updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\r\n                    case 4:\r\n                        _g.sent();\r\n                        return [2 /*return*/, { components: components, representations: representations }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\nvar coarseSurface = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-coarse-surface',\r\n    display: {\r\n        name: 'Coarse Surface', group: BuiltInPresetGroupName,\r\n        description: 'Shows polymers and lipids as coarse Gaussian Surface.'\r\n    },\r\n    params: function () { return CommonParams; },\r\n    apply: function (ref, params, plugin) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var structureCell, components, structure, size, gaussianProps, _e, update, builder, typeParams, symmetryColor, representations;\r\n            var _f;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\r\n                        if (!structureCell)\r\n                            return [2 /*return*/, {}];\r\n                        _f = {};\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'polymer')];\r\n                    case 1:\r\n                        _f.polymer = _g.sent();\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'lipid')];\r\n                    case 2:\r\n                        components = (_f.lipid = _g.sent(),\r\n                            _f);\r\n                        structure = structureCell.obj.data;\r\n                        size = Structure.getSize(structure);\r\n                        gaussianProps = Object.create(null);\r\n                        if (size === Structure.Size.Gigantic) {\r\n                            Object.assign(gaussianProps, {\r\n                                traceOnly: !structure.isCoarseGrained,\r\n                                radiusOffset: 2,\r\n                                smoothness: 1,\r\n                                visuals: ['structure-gaussian-surface-mesh']\r\n                            });\r\n                        }\r\n                        else if (size === Structure.Size.Huge) {\r\n                            Object.assign(gaussianProps, {\r\n                                radiusOffset: structure.isCoarseGrained ? 2 : 0,\r\n                                smoothness: 1,\r\n                            });\r\n                        }\r\n                        else if (structure.isCoarseGrained) {\r\n                            Object.assign(gaussianProps, {\r\n                                radiusOffset: 2,\r\n                                smoothness: 1,\r\n                            });\r\n                        }\r\n                        _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\r\n                        representations = {\r\n                            polymer: builder.buildRepresentation(update, components.polymer, { type: 'gaussian-surface', typeParams: __assign(__assign({}, typeParams), gaussianProps), color: symmetryColor }, { tag: 'polymer' }),\r\n                            lipid: builder.buildRepresentation(update, components.lipid, { type: 'gaussian-surface', typeParams: __assign(__assign({}, typeParams), gaussianProps), color: symmetryColor }, { tag: 'lipid' })\r\n                        };\r\n                        return [4 /*yield*/, update.commit({ revertOnError: true })];\r\n                    case 3:\r\n                        _g.sent();\r\n                        return [4 /*yield*/, updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\r\n                    case 4:\r\n                        _g.sent();\r\n                        return [2 /*return*/, { components: components, representations: representations }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\nvar polymerCartoon = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-polymer-cartoon',\r\n    display: {\r\n        name: 'Polymer Cartoon', group: BuiltInPresetGroupName,\r\n        description: 'Shows polymers as Cartoon.'\r\n    },\r\n    params: function () { return CommonParams; },\r\n    apply: function (ref, params, plugin) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var structureCell, components, structure, cartoonProps, _e, update, builder, typeParams, symmetryColor, representations;\r\n            var _f;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\r\n                        if (!structureCell)\r\n                            return [2 /*return*/, {}];\r\n                        _f = {};\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'polymer')];\r\n                    case 1:\r\n                        components = (_f.polymer = _g.sent(),\r\n                            _f);\r\n                        structure = structureCell.obj.data;\r\n                        cartoonProps = {\r\n                            sizeFactor: structure.isCoarseGrained ? 0.8 : 0.2\r\n                        };\r\n                        _e = reprBuilder(plugin, params, structure), update = _e.update, builder = _e.builder, typeParams = _e.typeParams, symmetryColor = _e.symmetryColor;\r\n                        representations = {\r\n                            polymer: builder.buildRepresentation(update, components.polymer, { type: 'cartoon', typeParams: __assign(__assign({}, typeParams), cartoonProps), color: symmetryColor }, { tag: 'polymer' })\r\n                        };\r\n                        return [4 /*yield*/, update.commit({ revertOnError: true })];\r\n                    case 2:\r\n                        _g.sent();\r\n                        return [4 /*yield*/, updateFocusRepr(plugin, structure, (_b = (_a = params.theme) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.name, (_d = (_c = params.theme) === null || _c === void 0 ? void 0 : _c.focus) === null || _d === void 0 ? void 0 : _d.params)];\r\n                    case 3:\r\n                        _g.sent();\r\n                        return [2 /*return*/, { components: components, representations: representations }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\nvar atomicDetail = StructureRepresentationPresetProvider({\r\n    id: 'preset-structure-representation-atomic-detail',\r\n    display: {\r\n        name: 'Atomic Detail', group: BuiltInPresetGroupName,\r\n        description: 'Shows everything in atomic detail with Ball & Stick.'\r\n    },\r\n    params: function () { return (__assign(__assign({}, CommonParams), { showCarbohydrateSymbol: PD.Boolean(false) })); },\r\n    apply: function (ref, params, plugin) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var structureCell, components, structure, highElementCount, lowResidueElementRatio, m, bondsGiven, atomicType, showCarbohydrateSymbol, _a, _b, _c, _d, update, builder, typeParams, color, ballAndStickColor, colorParams, representations;\r\n            var _e, _f;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        structureCell = StateObjectRef.resolveAndCheck(plugin.state.data, ref);\r\n                        if (!structureCell)\r\n                            return [2 /*return*/, {}];\r\n                        _e = {};\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'all')];\r\n                    case 1:\r\n                        components = (_e.all = _g.sent(),\r\n                            _e.branched = undefined,\r\n                            _e);\r\n                        structure = structureCell.obj.data;\r\n                        highElementCount = structure.elementCount > 100000;\r\n                        lowResidueElementRatio = structure.atomicResidueCount &&\r\n                            structure.elementCount > 1000 &&\r\n                            structure.atomicResidueCount / structure.elementCount < 3;\r\n                        m = structure.models[0];\r\n                        bondsGiven = !!IndexPairBonds.Provider.get(m) || StructConn.isExhaustive(m);\r\n                        atomicType = 'ball-and-stick';\r\n                        if (structure.isCoarseGrained) {\r\n                            // TODO make configurable?\r\n                            atomicType = structure.elementCount > 1000000 ? 'point' : 'spacefill';\r\n                        }\r\n                        else if (lowResidueElementRatio && !bondsGiven) {\r\n                            atomicType = 'spacefill';\r\n                        }\r\n                        else if (highElementCount) {\r\n                            atomicType = 'line';\r\n                        }\r\n                        showCarbohydrateSymbol = params.showCarbohydrateSymbol && !highElementCount && !lowResidueElementRatio;\r\n                        if (!showCarbohydrateSymbol) return [3 /*break*/, 3];\r\n                        _b = (_a = Object).assign;\r\n                        _c = [components];\r\n                        _f = {};\r\n                        return [4 /*yield*/, presetStaticComponent(plugin, structureCell, 'branched', { label: 'Carbohydrate' })];\r\n                    case 2:\r\n                        _b.apply(_a, _c.concat([(_f.branched = _g.sent(),\r\n                                _f)]));\r\n                        _g.label = 3;\r\n                    case 3:\r\n                        _d = reprBuilder(plugin, params, structure), update = _d.update, builder = _d.builder, typeParams = _d.typeParams, color = _d.color, ballAndStickColor = _d.ballAndStickColor;\r\n                        colorParams = lowResidueElementRatio && !bondsGiven\r\n                            ? { carbonColor: { name: 'element-symbol', params: {} } }\r\n                            : ballAndStickColor;\r\n                        representations = {\r\n                            all: builder.buildRepresentation(update, components.all, { type: atomicType, typeParams: typeParams, color: color, colorParams: colorParams }, { tag: 'all' }),\r\n                        };\r\n                        if (showCarbohydrateSymbol) {\r\n                            Object.assign(representations, {\r\n                                snfg3d: builder.buildRepresentation(update, components.branched, { type: 'carbohydrate', typeParams: __assign(__assign({}, typeParams), { alpha: 0.4, visuals: ['carbohydrate-symbol'] }), color: color }, { tag: 'snfg-3d' }),\r\n                            });\r\n                        }\r\n                        return [4 /*yield*/, update.commit({ revertOnError: true })];\r\n                    case 4:\r\n                        _g.sent();\r\n                        return [2 /*return*/, { components: components, representations: representations }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\nexport function presetStaticComponent(plugin, structure, type, params) {\r\n    return plugin.builders.structure.tryCreateComponentStatic(structure, type, params);\r\n}\r\nexport function presetSelectionComponent(plugin, structure, query, params) {\r\n    return plugin.builders.structure.tryCreateComponentFromSelection(structure, Q[query], \"selection-\" + query, params);\r\n}\r\nexport var PresetStructureRepresentations = {\r\n    empty: empty,\r\n    auto: auto,\r\n    'atomic-detail': atomicDetail,\r\n    'polymer-cartoon': polymerCartoon,\r\n    'polymer-and-ligand': polymerAndLigand,\r\n    'protein-and-nucleic': proteinAndNucleic,\r\n    'coarse-surface': coarseSurface\r\n};\r\n//# sourceMappingURL=representation-preset.js.map"]},"metadata":{},"sourceType":"module"}