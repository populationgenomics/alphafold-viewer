{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ValueCell } from '../../mol-util/value-cell';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { createTextureImage } from '../../mol-gl/renderable/util';\nexport function applyClippingGroups(array, start, end, groups) {\n  for (var i = start; i < end; ++i) {\n    array[i] = groups;\n  }\n\n  return true;\n}\nexport function clearClipping(array, start, end) {\n  array.fill(0, start, end);\n}\nexport function createClipping(count, clippingData) {\n  var clipping = createTextureImage(Math.max(1, count), 1, Uint8Array, clippingData && clippingData.tClipping.ref.value.array);\n\n  if (clippingData) {\n    ValueCell.update(clippingData.tClipping, clipping);\n    ValueCell.update(clippingData.uClippingTexDim, Vec2.create(clipping.width, clipping.height));\n    ValueCell.updateIfChanged(clippingData.dClipping, count > 0);\n    return clippingData;\n  } else {\n    return {\n      dClipObjectCount: ValueCell.create(0),\n      dClipVariant: ValueCell.create('instance'),\n      tClipping: ValueCell.create(clipping),\n      uClippingTexDim: ValueCell.create(Vec2.create(clipping.width, clipping.height)),\n      dClipping: ValueCell.create(count > 0)\n    };\n  }\n}\nvar emptyClippingTexture = {\n  array: new Uint8Array(1),\n  width: 1,\n  height: 1\n};\nexport function createEmptyClipping(clippingData) {\n  if (clippingData) {\n    ValueCell.update(clippingData.tClipping, emptyClippingTexture);\n    ValueCell.update(clippingData.uClippingTexDim, Vec2.create(1, 1));\n    return clippingData;\n  } else {\n    return {\n      dClipObjectCount: ValueCell.create(0),\n      dClipVariant: ValueCell.create('instance'),\n      tClipping: ValueCell.create(emptyClippingTexture),\n      uClippingTexDim: ValueCell.create(Vec2.create(1, 1)),\n      dClipping: ValueCell.create(false)\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/mol-geo/geometry/clipping-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ValueCell } from '../../mol-util/value-cell';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { createTextureImage } from '../../mol-gl/renderable/util';\r\nexport function applyClippingGroups(array, start, end, groups) {\r\n    for (var i = start; i < end; ++i) {\r\n        array[i] = groups;\r\n    }\r\n    return true;\r\n}\r\nexport function clearClipping(array, start, end) {\r\n    array.fill(0, start, end);\r\n}\r\nexport function createClipping(count, clippingData) {\r\n    var clipping = createTextureImage(Math.max(1, count), 1, Uint8Array, clippingData && clippingData.tClipping.ref.value.array);\r\n    if (clippingData) {\r\n        ValueCell.update(clippingData.tClipping, clipping);\r\n        ValueCell.update(clippingData.uClippingTexDim, Vec2.create(clipping.width, clipping.height));\r\n        ValueCell.updateIfChanged(clippingData.dClipping, count > 0);\r\n        return clippingData;\r\n    }\r\n    else {\r\n        return {\r\n            dClipObjectCount: ValueCell.create(0),\r\n            dClipVariant: ValueCell.create('instance'),\r\n            tClipping: ValueCell.create(clipping),\r\n            uClippingTexDim: ValueCell.create(Vec2.create(clipping.width, clipping.height)),\r\n            dClipping: ValueCell.create(count > 0),\r\n        };\r\n    }\r\n}\r\nvar emptyClippingTexture = { array: new Uint8Array(1), width: 1, height: 1 };\r\nexport function createEmptyClipping(clippingData) {\r\n    if (clippingData) {\r\n        ValueCell.update(clippingData.tClipping, emptyClippingTexture);\r\n        ValueCell.update(clippingData.uClippingTexDim, Vec2.create(1, 1));\r\n        return clippingData;\r\n    }\r\n    else {\r\n        return {\r\n            dClipObjectCount: ValueCell.create(0),\r\n            dClipVariant: ValueCell.create('instance'),\r\n            tClipping: ValueCell.create(emptyClippingTexture),\r\n            uClippingTexDim: ValueCell.create(Vec2.create(1, 1)),\r\n            dClipping: ValueCell.create(false),\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=clipping-data.js.map"]},"metadata":{},"sourceType":"module"}