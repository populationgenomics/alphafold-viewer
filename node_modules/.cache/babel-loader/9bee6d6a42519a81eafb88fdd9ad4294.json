{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport * as CCP4 from '../../mol-io/reader/ccp4/parser';\nimport { CIF } from '../../mol-io/reader/cif';\nimport * as DSN6 from '../../mol-io/reader/dsn6/parser';\nimport * as PLY from '../../mol-io/reader/ply/parser';\nimport { parsePsf } from '../../mol-io/reader/psf/parser';\nimport { StateObject, StateTransformer } from '../../mol-state';\nimport { Task } from '../../mol-task';\nimport { ajaxGetMany } from '../../mol-util/data-source';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\nimport { Asset } from '../../mol-util/assets';\nimport { parseCube } from '../../mol-io/reader/cube/parser';\nimport { parseDx } from '../../mol-io/reader/dx/parser';\nimport { ColorNames } from '../../mol-util/color/names';\nexport { Download };\nexport { DownloadBlob };\nexport { RawData };\nexport { ReadFile };\nexport { ParseBlob };\nexport { ParseCif };\nexport { ParseCube };\nexport { ParsePsf };\nexport { ParsePly };\nexport { ParseCcp4 };\nexport { ParseDsn6 };\nexport { ParseDx };\nexport { ImportString };\nexport { ImportJson };\nexport { ParseJson };\nexport { LazyVolume };\nvar Download = PluginStateTransform.BuiltIn({\n  name: 'download',\n  display: {\n    name: 'Download',\n    description: 'Download string or binary data from the specified URL'\n  },\n  from: [SO.Root],\n  to: [SO.Data.String, SO.Data.Binary],\n  params: {\n    url: PD.Url('https://www.ebi.ac.uk/pdbe/static/entry/1cbs_updated.cif', {\n      description: 'Resource URL. Must be the same domain or support CORS.'\n    }),\n    label: PD.Optional(PD.Text('')),\n    isBinary: PD.Optional(PD.Boolean(false, {\n      description: 'If true, download data as binary (string otherwise)'\n    }))\n  }\n})({\n  apply: function (_a, plugin) {\n    var _this = this;\n\n    var p = _a.params,\n        cache = _a.cache;\n    return Task.create('Download', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var url, asset;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              url = Asset.getUrlAsset(plugin.managers.asset, p.url);\n              return [4\n              /*yield*/\n              , plugin.managers.asset.resolve(url, p.isBinary ? 'binary' : 'string').runInContext(ctx)];\n\n            case 1:\n              asset = _a.sent();\n              cache.asset = asset;\n              return [2\n              /*return*/\n              , p.isBinary ? new SO.Data.Binary(asset.data, {\n                label: p.label ? p.label : url.url\n              }) : new SO.Data.String(asset.data, {\n                label: p.label ? p.label : url.url\n              })];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var _b, _c;\n\n    var cache = _a.cache;\n    (_c = (_b = cache) === null || _b === void 0 ? void 0 : _b.asset) === null || _c === void 0 ? void 0 : _c.dispose();\n  },\n  update: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n    if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary) return StateTransformer.UpdateResult.Recreate;\n\n    if (oldParams.label !== newParams.label) {\n      b.label = newParams.label || (typeof newParams.url === 'string' ? newParams.url : newParams.url.url);\n      return StateTransformer.UpdateResult.Updated;\n    }\n\n    return StateTransformer.UpdateResult.Unchanged;\n  }\n});\nvar DownloadBlob = PluginStateTransform.BuiltIn({\n  name: 'download-blob',\n  display: {\n    name: 'Download Blob',\n    description: 'Download multiple string or binary data from the specified URLs.'\n  },\n  from: SO.Root,\n  to: SO.Data.Blob,\n  params: {\n    sources: PD.ObjectList({\n      id: PD.Text('', {\n        label: 'Unique ID'\n      }),\n      url: PD.Url('https://www.ebi.ac.uk/pdbe/static/entry/1cbs_updated.cif', {\n        description: 'Resource URL. Must be the same domain or support CORS.'\n      }),\n      isBinary: PD.Optional(PD.Boolean(false, {\n        description: 'If true, download data as binary (string otherwise)'\n      })),\n      canFail: PD.Optional(PD.Boolean(false, {\n        description: 'Indicate whether the download can fail and not be included in the blob as a result.'\n      }))\n    }, function (e) {\n      return e.id + \": \" + e.url;\n    }),\n    maxConcurrency: PD.Optional(PD.Numeric(4, {\n      min: 1,\n      max: 12,\n      step: 1\n    }, {\n      description: 'The maximum number of concurrent downloads.'\n    }))\n  }\n})({\n  apply: function (_a, plugin) {\n    var _this = this;\n\n    var params = _a.params,\n        cache = _a.cache;\n    return Task.create('Download Blob', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var entries, data, assets, i, r, src;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              entries = [];\n              return [4\n              /*yield*/\n              , ajaxGetMany(ctx, plugin.managers.asset, params.sources, params.maxConcurrency || 4)];\n\n            case 1:\n              data = _a.sent();\n              assets = [];\n\n              for (i = 0; i < data.length; i++) {\n                r = data[i], src = params.sources[i];\n                if (r.kind === 'error') plugin.log.warn(\"Download \" + r.id + \" (\" + src.url + \") failed: \" + r.error);else {\n                  assets.push(r.result);\n                  entries.push(src.isBinary ? {\n                    id: r.id,\n                    kind: 'binary',\n                    data: r.result.data\n                  } : {\n                    id: r.id,\n                    kind: 'string',\n                    data: r.result.data\n                  });\n                }\n              }\n\n              cache.assets = assets;\n              return [2\n              /*return*/\n              , new SO.Data.Blob(entries, {\n                label: 'Data Blob',\n                description: entries.length + \" \" + (entries.length === 1 ? 'entry' : 'entries')\n              })];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a, plugin) {\n    var _b;\n\n    var cache = _a.cache;\n    var assets = (_b = cache) === null || _b === void 0 ? void 0 : _b.assets;\n    if (!assets) return;\n\n    for (var _c = 0, assets_1 = assets; _c < assets_1.length; _c++) {\n      var a = assets_1[_c];\n      a.dispose();\n    }\n  } // TODO: ??\n  // update({ oldParams, newParams, b }) {\n  //     return 0 as any;\n  //     // if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary) return StateTransformer.UpdateResult.Recreate;\n  //     // if (oldParams.label !== newParams.label) {\n  //     //     (b.label as string) = newParams.label || newParams.url;\n  //     //     return StateTransformer.UpdateResult.Updated;\n  //     // }\n  //     // return StateTransformer.UpdateResult.Unchanged;\n  // }\n\n});\nvar RawData = PluginStateTransform.BuiltIn({\n  name: 'raw-data',\n  display: {\n    name: 'Raw Data',\n    description: 'Raw data supplied by value.'\n  },\n  from: [SO.Root],\n  to: [SO.Data.String, SO.Data.Binary],\n  params: {\n    data: PD.Value('', {\n      isHidden: true\n    }),\n    label: PD.Optional(PD.Text(''))\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var p = _a.params;\n    return Task.create('Raw Data', function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (typeof p.data === 'string') {\n            return [2\n            /*return*/\n            , new SO.Data.String(p.data, {\n              label: p.label ? p.label : 'String'\n            })];\n          } else if (Array.isArray(p.data)) {\n            return [2\n            /*return*/\n            , new SO.Data.Binary(new Uint8Array(p.data), {\n              label: p.label ? p.label : 'Binary'\n            })];\n          } else if (p.data instanceof ArrayBuffer) {\n            return [2\n            /*return*/\n            , new SO.Data.Binary(new Uint8Array(p.data), {\n              label: p.label ? p.label : 'Binary'\n            })];\n          } else if (p.data instanceof Uint8Array) {\n            return [2\n            /*return*/\n            , new SO.Data.Binary(p.data, {\n              label: p.label ? p.label : 'Binary'\n            })];\n          } else {\n            throw new Error('Supplied binary data must be a plain array, ArrayBuffer, or Uint8Array.');\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  },\n  update: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n    if (oldParams.data !== newParams.data) return StateTransformer.UpdateResult.Recreate;\n\n    if (oldParams.label !== newParams.label) {\n      b.label = newParams.label || b.label;\n      return StateTransformer.UpdateResult.Updated;\n    }\n\n    return StateTransformer.UpdateResult.Unchanged;\n  },\n  customSerialization: {\n    toJSON: function (p) {\n      if (typeof p.data === 'string' || Array.isArray(p.data)) {\n        return p;\n      } else if (p.data instanceof ArrayBuffer) {\n        var v = new Uint8Array(p.data);\n        var data = new Array(v.length);\n\n        for (var i = 0, _i = v.length; i < _i; i++) data[i] = v[i];\n\n        return {\n          data: data,\n          label: p.label\n        };\n      } else if (p.data instanceof Uint8Array) {\n        var data = new Array(p.data.length);\n\n        for (var i = 0, _i = p.data.length; i < _i; i++) data[i] = p.data[i];\n\n        return {\n          data: data,\n          label: p.label\n        };\n      }\n    },\n    fromJSON: function (data) {\n      return data;\n    }\n  }\n});\nvar ReadFile = PluginStateTransform.BuiltIn({\n  name: 'read-file',\n  display: {\n    name: 'Read File',\n    description: 'Read string or binary data from the specified file'\n  },\n  from: SO.Root,\n  to: [SO.Data.String, SO.Data.Binary],\n  params: {\n    file: PD.File(),\n    label: PD.Optional(PD.Text('')),\n    isBinary: PD.Optional(PD.Boolean(false, {\n      description: 'If true, open file as as binary (string otherwise)'\n    }))\n  }\n})({\n  apply: function (_a, plugin) {\n    var _this = this;\n\n    var p = _a.params,\n        cache = _a.cache;\n    return Task.create('Open File', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var asset, o;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (p.file === null) {\n                plugin.log.error('No file(s) selected');\n                return [2\n                /*return*/\n                , StateObject.Null];\n              }\n\n              return [4\n              /*yield*/\n              , plugin.managers.asset.resolve(p.file, p.isBinary ? 'binary' : 'string').runInContext(ctx)];\n\n            case 1:\n              asset = _a.sent();\n              cache.asset = asset;\n              o = p.isBinary ? new SO.Data.Binary(asset.data, {\n                label: p.label ? p.label : p.file.name\n              }) : new SO.Data.String(asset.data, {\n                label: p.label ? p.label : p.file.name\n              });\n              return [2\n              /*return*/\n              , o];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var _b, _c;\n\n    var cache = _a.cache;\n    (_c = (_b = cache) === null || _b === void 0 ? void 0 : _b.asset) === null || _c === void 0 ? void 0 : _c.dispose();\n  },\n  update: function (_a) {\n    var _b;\n\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n\n    if (oldParams.label !== newParams.label) {\n      b.label = newParams.label || ((_b = oldParams.file) === null || _b === void 0 ? void 0 : _b.name) || '';\n      return StateTransformer.UpdateResult.Updated;\n    }\n\n    return StateTransformer.UpdateResult.Unchanged;\n  },\n  isSerializable: function () {\n    return {\n      isSerializable: false,\n      reason: 'Cannot serialize user loaded files.'\n    };\n  }\n});\nvar ParseBlob = PluginStateTransform.BuiltIn({\n  name: 'parse-blob',\n  display: {\n    name: 'Parse Blob',\n    description: 'Parse multiple data enties'\n  },\n  from: SO.Data.Blob,\n  to: SO.Format.Blob,\n  params: {\n    formats: PD.ObjectList({\n      id: PD.Text('', {\n        label: 'Unique ID'\n      }),\n      format: PD.Select('cif', [['cif', 'cif']])\n    }, function (e) {\n      return e.id + \": \" + e.format;\n    })\n  }\n})({\n  apply: function (_a, plugin) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Parse Blob', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var map, _a, _b, f, entries, _c, _d, e, parsed;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              map = new Map();\n\n              for (_a = 0, _b = params.formats; _a < _b.length; _a++) {\n                f = _b[_a];\n                map.set(f.id, f.format);\n              }\n\n              entries = [];\n              _c = 0, _d = a.data;\n              _e.label = 1;\n\n            case 1:\n              if (!(_c < _d.length)) return [3\n              /*break*/\n              , 4];\n              e = _d[_c];\n              if (!map.has(e.id)) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , (e.kind === 'string' ? CIF.parse(e.data) : CIF.parseBinary(e.data)).runInContext(ctx)];\n\n            case 2:\n              parsed = _e.sent();\n              if (parsed.isError) throw new Error(e.id + \": \" + parsed.message);\n              entries.push({\n                id: e.id,\n                kind: 'cif',\n                data: parsed.result\n              });\n              _e.label = 3;\n\n            case 3:\n              _c++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [2\n              /*return*/\n              , new SO.Format.Blob(entries, {\n                label: 'Format Blob',\n                description: entries.length + \" \" + (entries.length === 1 ? 'entry' : 'entries')\n              })];\n          }\n        });\n      });\n    });\n  } // TODO: ??\n  // update({ oldParams, newParams, b }) {\n  //     return 0 as any;\n  //     // if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary) return StateTransformer.UpdateResult.Recreate;\n  //     // if (oldParams.label !== newParams.label) {\n  //     //     (b.label as string) = newParams.label || newParams.url;\n  //     //     return StateTransformer.UpdateResult.Updated;\n  //     // }\n  //     // return StateTransformer.UpdateResult.Unchanged;\n  // }\n\n});\nvar ParseCif = PluginStateTransform.BuiltIn({\n  name: 'parse-cif',\n  display: {\n    name: 'Parse CIF',\n    description: 'Parse CIF from String or Binary data'\n  },\n  from: [SO.Data.String, SO.Data.Binary],\n  to: SO.Format.Cif\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse CIF', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , (SO.Data.String.is(a) ? CIF.parse(a.data) : CIF.parseBinary(a.data)).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Cif(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParseCube = PluginStateTransform.BuiltIn({\n  name: 'parse-cube',\n  display: {\n    name: 'Parse Cube',\n    description: 'Parse Cube from String data'\n  },\n  from: SO.Data.String,\n  to: SO.Format.Cube\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse Cube', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , parseCube(a.data, a.label).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Cube(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParsePsf = PluginStateTransform.BuiltIn({\n  name: 'parse-psf',\n  display: {\n    name: 'Parse PSF',\n    description: 'Parse PSF from String data'\n  },\n  from: [SO.Data.String],\n  to: SO.Format.Psf\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse PSF', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , parsePsf(a.data).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Psf(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParsePly = PluginStateTransform.BuiltIn({\n  name: 'parse-ply',\n  display: {\n    name: 'Parse PLY',\n    description: 'Parse PLY from String data'\n  },\n  from: [SO.Data.String],\n  to: SO.Format.Ply\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse PLY', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , PLY.parsePly(a.data).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Ply(parsed.result, {\n                label: parsed.result.comments[0] || 'PLY Data'\n              })];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParseCcp4 = PluginStateTransform.BuiltIn({\n  name: 'parse-ccp4',\n  display: {\n    name: 'Parse CCP4/MRC/MAP',\n    description: 'Parse CCP4/MRC/MAP from Binary data'\n  },\n  from: [SO.Data.Binary],\n  to: SO.Format.Ccp4\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse CCP4/MRC/MAP', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , CCP4.parse(a.data, a.label).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Ccp4(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParseDsn6 = PluginStateTransform.BuiltIn({\n  name: 'parse-dsn6',\n  display: {\n    name: 'Parse DSN6/BRIX',\n    description: 'Parse CCP4/BRIX from Binary data'\n  },\n  from: [SO.Data.Binary],\n  to: SO.Format.Dsn6\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse DSN6/BRIX', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , DSN6.parse(a.data, a.label).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Dsn6(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ParseDx = PluginStateTransform.BuiltIn({\n  name: 'parse-dx',\n  display: {\n    name: 'Parse DX',\n    description: 'Parse DX from Binary/String data'\n  },\n  from: [SO.Data.Binary, SO.Data.String],\n  to: SO.Format.Dx\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse DX', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parsed;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , parseDx(a.data, a.label).runInContext(ctx)];\n\n            case 1:\n              parsed = _a.sent();\n              if (parsed.isError) throw new Error(parsed.message);\n              return [2\n              /*return*/\n              , new SO.Format.Dx(parsed.result)];\n          }\n        });\n      });\n    });\n  }\n});\nvar ImportString = PluginStateTransform.BuiltIn({\n  name: 'import-string',\n  display: {\n    name: 'Import String',\n    description: 'Import given data as a string'\n  },\n  from: SO.Root,\n  to: SO.Data.String,\n  params: {\n    data: PD.Value(''),\n    label: PD.Optional(PD.Text(''))\n  }\n})({\n  apply: function (_a) {\n    var _b = _a.params,\n        data = _b.data,\n        label = _b.label;\n    return new SO.Data.String(data, {\n      label: label || ''\n    });\n  },\n  update: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n    if (oldParams.data !== newParams.data) return StateTransformer.UpdateResult.Recreate;\n\n    if (oldParams.label !== newParams.label) {\n      b.label = newParams.label || '';\n      return StateTransformer.UpdateResult.Updated;\n    }\n\n    return StateTransformer.UpdateResult.Unchanged;\n  },\n  isSerializable: function () {\n    return {\n      isSerializable: false,\n      reason: 'Cannot serialize user imported strings.'\n    };\n  }\n});\nvar ImportJson = PluginStateTransform.BuiltIn({\n  name: 'import-json',\n  display: {\n    name: 'Import JSON',\n    description: 'Import given data as a JSON'\n  },\n  from: SO.Root,\n  to: SO.Format.Json,\n  params: {\n    data: PD.Value({}),\n    label: PD.Optional(PD.Text(''))\n  }\n})({\n  apply: function (_a) {\n    var _b = _a.params,\n        data = _b.data,\n        label = _b.label;\n    return new SO.Format.Json(data, {\n      label: label || ''\n    });\n  },\n  update: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams,\n        b = _a.b;\n    if (oldParams.data !== newParams.data) return StateTransformer.UpdateResult.Recreate;\n\n    if (oldParams.label !== newParams.label) {\n      b.label = newParams.label || '';\n      return StateTransformer.UpdateResult.Updated;\n    }\n\n    return StateTransformer.UpdateResult.Unchanged;\n  },\n  isSerializable: function () {\n    return {\n      isSerializable: false,\n      reason: 'Cannot serialize user imported JSON.'\n    };\n  }\n});\nvar ParseJson = PluginStateTransform.BuiltIn({\n  name: 'parse-json',\n  display: {\n    name: 'Parse JSON',\n    description: 'Parse JSON from String data'\n  },\n  from: [SO.Data.String],\n  to: SO.Format.Json\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse JSON', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var json;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , new Response(a.data).json()];\n\n            case 1:\n              json = _a.sent();\n              return [2\n              /*return*/\n              , new SO.Format.Json(json)];\n          }\n        });\n      });\n    });\n  }\n});\nvar LazyVolume = PluginStateTransform.BuiltIn({\n  name: 'lazy-volume',\n  display: {\n    name: 'Lazy Volume',\n    description: 'A placeholder for lazy loaded volume representation'\n  },\n  from: SO.Root,\n  to: SO.Volume.Lazy,\n  params: {\n    url: PD.Url(''),\n    isBinary: PD.Boolean(false),\n    format: PD.Text('ccp4'),\n    entryId: PD.Value('', {\n      isHidden: true\n    }),\n    isovalues: PD.ObjectList({\n      type: PD.Text('relative'),\n      value: PD.Numeric(0),\n      color: PD.Color(ColorNames.black),\n      alpha: PD.Numeric(1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      }),\n      volumeIndex: PD.Numeric(0)\n    }, function (e) {\n      return e.type + \" \" + e.value;\n    })\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Lazy Volume', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var entryId;\n        return __generator(this, function (_a) {\n          entryId = Array.isArray(params.entryId) ? params.entryId.join(', ') : params.entryId;\n          return [2\n          /*return*/\n          , new SO.Volume.Lazy(params, {\n            label: \"\" + (entryId || params.url),\n            description: 'Lazy Volume'\n          })];\n        });\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../src/mol-plugin-state/transforms/data.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,OAAO,KAAK,IAAZ,MAAsB,iCAAtB;AACA,SAAS,GAAT,QAAoB,yBAApB;AACA,OAAO,KAAK,IAAZ,MAAsB,iCAAtB;AACA,OAAO,KAAK,GAAZ,MAAqB,gCAArB;AACA,SAAS,QAAT,QAAyB,gCAAzB;AAEA,SAAS,WAAT,EAAsB,gBAAtB,QAA8C,iBAA9C;AACA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,WAAT,QAA4B,4BAA5B;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AACA,SAAS,iBAAiB,IAAI,EAA9B,EAAkC,oBAAlC,QAA8D,YAA9D;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,SAAS,SAAT,QAA0B,iCAA1B;AACA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,UAAT,QAA2B,4BAA3B;AAEA,SAAS,QAAT;AACA,SAAS,YAAT;AACA,SAAS,OAAT;AACA,SAAS,QAAT;AACA,SAAS,SAAT;AACA,SAAS,QAAT;AACA,SAAS,SAAT;AACA,SAAS,QAAT;AACA,SAAS,QAAT;AACA,SAAS,SAAT;AACA,SAAS,SAAT;AACA,SAAS,OAAT;AACA,SAAS,YAAT;AACA,SAAS,UAAT;AACA,SAAS,SAAT;AACA,SAAS,UAAT;AAGA,IAAM,QAAQ,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC1C,EAAA,IAAI,EAAE,UADoC;AAE1C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,UAAR;AAAoB,IAAA,WAAW,EAAE;AAAjC,GAFiC;AAG1C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAJ,CAHoC;AAI1C,EAAA,EAAE,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,EAAiB,EAAE,CAAC,IAAH,CAAQ,MAAzB,CAJsC;AAK1C,EAAA,MAAM,EAAE;AACJ,IAAA,GAAG,EAAE,EAAE,CAAC,GAAH,CAAO,0DAAP,EAAmE;AAAE,MAAA,WAAW,EAAE;AAAf,KAAnE,CADD;AAEJ,IAAA,KAAK,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ,CAFH;AAGJ,IAAA,QAAQ,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB;AAAE,MAAA,WAAW,EAAE;AAAf,KAAlB,CAAZ;AAHN;AALkC,CAA7B,EAUd;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAA4B,MAA5B,EAAiD;AAAjD,QAAA,KAAA,GAAA,IAAA;;QAAgB,CAAC,GAAA,EAAA,CAAA,M;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpB,WAAO,IAAI,CAAC,MAAL,CAAY,UAAZ,EAAwB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC9B,cAAA,GAAG,GAAG,KAAK,CAAC,WAAN,CAAkB,MAAM,CAAC,QAAP,CAAgB,KAAlC,EAAyC,CAAC,CAAC,GAA3C,CAAN;AACQ,qBAAA,CAAA;AAAA;AAAA,gBAAM,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAsB,OAAtB,CAA8B,GAA9B,EAAmC,CAAC,CAAC,QAAF,GAAa,QAAb,GAAwB,QAA3D,EAAqE,YAArE,CAAkF,GAAlF,CAAN,CAAA;;;AAAR,cAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;AACL,cAAA,KAAa,CAAC,KAAd,GAAsB,KAAtB;AACD,qBAAA,CAAA;AAAA;AAAA,gBAAO,CAAC,CAAC,QAAF,GACD,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,KAAK,CAAC,IAAzB,EAA6C;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB,GAAG,CAAC;AAAjC,eAA7C,CADC,GAED,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,KAAK,CAAC,IAAzB,EAAyC;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB,GAAG,CAAC;AAAjC,eAAzC,CAFN,CAAA;;;OAJoC,CAAA;AAOvC,KAPM,CAAP;AAQH,GAVF;AAWC,EAAA,OAAO,EAAP,UAAQ,EAAR,EAAiB;;;QAAP,KAAK,GAAA,EAAA,CAAA,K;AACX,KAAA,EAAA,GAAC,CAAA,EAAA,GAAC,KAAD,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,KAAjB,MAAoD,IAApD,IAAoD,EAAA,KAAA,KAAA,CAApD,GAAoD,KAAA,CAApD,GAAoD,EAAA,CAAE,OAAF,EAApD;AACH,GAbF;AAcC,EAAA,MAAM,EAAA,UAAC,EAAD,EAA4B;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;AAC5B,QAAI,SAAS,CAAC,GAAV,KAAkB,SAAS,CAAC,GAA5B,IAAmC,SAAS,CAAC,QAAV,KAAuB,SAAS,CAAC,QAAxE,EAAkF,OAAO,gBAAgB,CAAC,YAAjB,CAA8B,QAArC;;AAClF,QAAI,SAAS,CAAC,KAAV,KAAoB,SAAS,CAAC,KAAlC,EAAyC;AACrC,MAAA,CAAC,CAAC,KAAF,GAAU,SAAS,CAAC,KAAV,KAAqB,OAAO,SAAS,CAAC,GAAjB,KAAyB,QAA1B,GAAsC,SAAS,CAAC,GAAhD,GAAsD,SAAS,CAAC,GAAV,CAAc,GAAxF,CAAV;AACA,aAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;;AACD,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AACH;AArBF,CAVc,CAAjB;AAmCA,IAAM,YAAY,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC9C,EAAA,IAAI,EAAE,eADwC;AAE9C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,eAAR;AAAyB,IAAA,WAAW,EAAE;AAAtC,GAFqC;AAG9C,EAAA,IAAI,EAAE,EAAE,CAAC,IAHqC;AAI9C,EAAA,EAAE,EAAE,EAAE,CAAC,IAAH,CAAQ,IAJkC;AAK9C,EAAA,MAAM,EAAE;AACJ,IAAA,OAAO,EAAE,EAAE,CAAC,UAAH,CAAc;AACnB,MAAA,EAAE,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR,EAAY;AAAE,QAAA,KAAK,EAAE;AAAT,OAAZ,CADe;AAEnB,MAAA,GAAG,EAAE,EAAE,CAAC,GAAH,CAAO,0DAAP,EAAmE;AAAE,QAAA,WAAW,EAAE;AAAf,OAAnE,CAFc;AAGnB,MAAA,QAAQ,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB;AAAE,QAAA,WAAW,EAAE;AAAf,OAAlB,CAAZ,CAHS;AAInB,MAAA,OAAO,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB;AAAE,QAAA,WAAW,EAAE;AAAf,OAAlB,CAAZ;AAJU,KAAd,EAKN,UAAA,CAAA,EAAC;AAAI,aAAG,CAAC,CAAC,EAAF,GAAI,IAAJ,GAAS,CAAC,CAAb,GAAA;AAAmB,KALlB,CADL;AAOJ,IAAA,cAAc,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,EAAf;AAAmB,MAAA,IAAI,EAAE;AAAzB,KAAd,EAA4C;AAAE,MAAA,WAAW,EAAE;AAAf,KAA5C,CAAZ;AAPZ;AALsC,CAA7B,EAclB;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAAyB,MAAzB,EAA8C;AAA9C,QAAA,KAAA,GAAA,IAAA;;QAAQ,MAAM,GAAA,EAAA,CAAA,M;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACjB,WAAO,IAAI,CAAC,MAAL,CAAY,eAAZ,EAA6B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACnC,cAAA,OAAO,GAAwB,EAA/B;AACO,qBAAA,CAAA;AAAA;AAAA,gBAAM,WAAW,CAAC,GAAD,EAAM,MAAM,CAAC,QAAP,CAAgB,KAAtB,EAA6B,MAAM,CAAC,OAApC,EAA6C,MAAM,CAAC,cAAP,IAAyB,CAAtE,CAAjB,CAAA;;;AAAP,cAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AAEA,cAAA,MAAM,GAAoB,EAA1B;;AAEN,mBAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AAC5B,gBAAA,CAAC,GAAG,IAAI,CAAC,CAAD,CAAR,EAAa,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,CAAf,CAAnB;AACN,oBAAI,CAAC,CAAC,IAAF,KAAW,OAAf,EAAwB,MAAM,CAAC,GAAP,CAAW,IAAX,CAAgB,cAAY,CAAC,CAAC,EAAd,GAAgB,IAAhB,GAAqB,GAAG,CAAC,GAAzB,GAA4B,YAA5B,GAAyC,CAAC,CAAC,KAA3D,EAAxB,KACK;AACD,kBAAA,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,MAAd;AACA,kBAAA,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,QAAJ,GACP;AAAE,oBAAA,EAAE,EAAE,CAAC,CAAC,EAAR;AAAY,oBAAA,IAAI,EAAE,QAAlB;AAA4B,oBAAA,IAAI,EAAE,CAAC,CAAC,MAAF,CAAS;AAA3C,mBADO,GAEP;AAAE,oBAAA,EAAE,EAAE,CAAC,CAAC,EAAR;AAAY,oBAAA,IAAI,EAAE,QAAlB;AAA4B,oBAAA,IAAI,EAAE,CAAC,CAAC,MAAF,CAAS;AAA3C,mBAFN;AAGH;AACJ;;AACA,cAAA,KAAa,CAAC,MAAd,GAAuB,MAAvB;AACD,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,IAAZ,CAAiB,OAAjB,EAA0B;AAAE,gBAAA,KAAK,EAAE,WAAT;AAAsB,gBAAA,WAAW,EAAK,OAAO,CAAC,MAAR,GAAc,GAAd,IAAkB,OAAO,CAAC,MAAR,KAAmB,CAAnB,GAAuB,OAAvB,GAAiC,SAAnD;AAAtC,eAA1B,CAAP,CAAA;;;OAjByC,CAAA;AAkB5C,KAlBM,CAAP;AAmBH,GArBF;AAsBC,EAAA,OAAO,EAAP,UAAQ,EAAR,EAAmB,MAAnB,EAAwC;;;QAA9B,KAAK,GAAA,EAAA,CAAA,K;AACX,QAAM,MAAM,GAAgC,CAAA,EAAA,GAAC,KAAD,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,MAA5D;AACA,QAAI,CAAC,MAAL,EAAa;;AACb,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,QAAA,GAAA,MAAhB,EAAgB,EAAA,GAAA,QAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAwB;AAAnB,UAAM,CAAC,GAAA,QAAA,CAAA,EAAA,CAAP;AACD,MAAA,CAAC,CAAC,OAAF;AACH;AACJ,GA5BF,CA6BC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtCD,CAdkB,CAArB;AAwDA,IAAM,OAAO,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AACzC,EAAA,IAAI,EAAE,UADmC;AAEzC,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,UAAR;AAAoB,IAAA,WAAW,EAAE;AAAjC,GAFgC;AAGzC,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAJ,CAHmC;AAIzC,EAAA,EAAE,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,EAAiB,EAAE,CAAC,IAAH,CAAQ,MAAzB,CAJqC;AAKzC,EAAA,MAAM,EAAE;AACJ,IAAA,IAAI,EAAE,EAAE,CAAC,KAAH,CAAuD,EAAvD,EAA2D;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAA3D,CADF;AAEJ,IAAA,KAAK,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ;AAFH;AALiC,CAA7B,EASb;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAAmB;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAgB,CAAC,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,UAAZ,EAAwB,YAAA;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AAC3B,cAAI,OAAO,CAAC,CAAC,IAAT,KAAkB,QAAtB,EAAgC;AAC5B,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,CAAC,CAAC,IAArB,EAAqC;AAAE,cAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB;AAA7B,aAArC,CAAP,CAAA;AACH,WAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,CAAC,CAAC,IAAhB,CAAJ,EAA2B;AAC9B,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,IAAI,UAAJ,CAAe,CAAC,CAAC,IAAjB,CAAnB,EAA2C;AAAE,cAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB;AAA7B,aAA3C,CAAP,CAAA;AACH,WAFM,MAEA,IAAI,CAAC,CAAC,IAAF,YAAkB,WAAtB,EAAmC;AACtC,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,IAAI,UAAJ,CAAe,CAAC,CAAC,IAAjB,CAAnB,EAA2C;AAAE,cAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB;AAA7B,aAA3C,CAAP,CAAA;AACH,WAFM,MAEA,IAAI,CAAC,CAAC,IAAF,YAAkB,UAAtB,EAAkC;AACrC,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,CAAC,CAAC,IAArB,EAA2B;AAAE,cAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB;AAA7B,aAA3B,CAAP,CAAA;AACH,WAFM,MAEA;AACH,kBAAM,IAAI,KAAJ,CAAU,yEAAV,CAAN;AACH;;;;;;OAX0B,CAAA;AAY9B,KAZM,CAAP;AAaH,GAfF;AAgBC,EAAA,MAAM,EAAA,UAAC,EAAD,EAA4B;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;AAC5B,QAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAAjC,EAAuC,OAAO,gBAAgB,CAAC,YAAjB,CAA8B,QAArC;;AACvC,QAAI,SAAS,CAAC,KAAV,KAAoB,SAAS,CAAC,KAAlC,EAAyC;AACrC,MAAA,CAAC,CAAC,KAAF,GAAU,SAAS,CAAC,KAAV,IAAmB,CAAC,CAAC,KAA/B;AACA,aAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;;AACD,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AACH,GAvBF;AAwBC,EAAA,mBAAmB,EAAE;AACjB,IAAA,MAAM,EAAA,UAAC,CAAD,EAAE;AACJ,UAAI,OAAO,CAAC,CAAC,IAAT,KAAkB,QAAlB,IAA8B,KAAK,CAAC,OAAN,CAAc,CAAC,CAAC,IAAhB,CAAlC,EAAyD;AACrD,eAAO,CAAP;AACH,OAFD,MAEO,IAAI,CAAC,CAAC,IAAF,YAAkB,WAAtB,EAAmC;AACtC,YAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,CAAC,CAAC,IAAjB,CAAV;AACA,YAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,CAAC,CAAC,MAAZ,CAAb;;AACA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,CAAC,CAAC,MAAvB,EAA+B,CAAC,GAAG,EAAnC,EAAuC,CAAC,EAAxC,EAA4C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,CAAC,CAAD,CAAX;;AAC5C,eAAO;AAAE,UAAA,IAAI,EAAA,IAAN;AAAQ,UAAA,KAAK,EAAE,CAAC,CAAC;AAAjB,SAAP;AACH,OALM,MAKA,IAAI,CAAC,CAAC,IAAF,YAAkB,UAAtB,EAAkC;AACrC,YAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,CAAC,CAAC,IAAF,CAAO,MAAjB,CAAb;;AACA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,CAAC,CAAC,IAAF,CAAO,MAA5B,EAAoC,CAAC,GAAG,EAAxC,EAA4C,CAAC,EAA7C,EAAiD,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,CAAC,IAAF,CAAO,CAAP,CAAV;;AACjD,eAAO;AAAE,UAAA,IAAI,EAAA,IAAN;AAAQ,UAAA,KAAK,EAAE,CAAC,CAAC;AAAjB,SAAP;AACH;AACJ,KAdgB;AAejB,IAAA,QAAQ,EAAR,UAAS,IAAT,EAAkB;AACd,aAAO,IAAP;AACH;AAjBgB;AAxBtB,CATa,CAAhB;AAuDA,IAAM,QAAQ,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC1C,EAAA,IAAI,EAAE,WADoC;AAE1C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,WAAW,EAAE;AAAlC,GAFiC;AAG1C,EAAA,IAAI,EAAE,EAAE,CAAC,IAHiC;AAI1C,EAAA,EAAE,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,EAAiB,EAAE,CAAC,IAAH,CAAQ,MAAzB,CAJsC;AAK1C,EAAA,MAAM,EAAE;AACJ,IAAA,IAAI,EAAE,EAAE,CAAC,IAAH,EADF;AAEJ,IAAA,KAAK,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ,CAFH;AAGJ,IAAA,QAAQ,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB;AAAE,MAAA,WAAW,EAAE;AAAf,KAAlB,CAAZ;AAHN;AALkC,CAA7B,EAUd;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAA4B,MAA5B,EAAiD;AAAjD,QAAA,KAAA,GAAA,IAAA;;QAAgB,CAAC,GAAA,EAAA,CAAA,M;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACpB,WAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrC,kBAAI,CAAC,CAAC,IAAF,KAAW,IAAf,EAAqB;AACjB,gBAAA,MAAM,CAAC,GAAP,CAAW,KAAX,CAAiB,qBAAjB;AACA,uBAAA,CAAA;AAAA;AAAA,kBAAO,WAAW,CAAC,IAAnB,CAAA;AACH;;AAEa,qBAAA,CAAA;AAAA;AAAA,gBAAM,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAsB,OAAtB,CAA8B,CAAC,CAAC,IAAhC,EAAsC,CAAC,CAAC,QAAF,GAAa,QAAb,GAAwB,QAA9D,EAAwE,YAAxE,CAAqF,GAArF,CAAN,CAAA;;;AAAR,cAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;AACL,cAAA,KAAa,CAAC,KAAd,GAAsB,KAAtB;AACK,cAAA,CAAC,GAAG,CAAC,CAAC,QAAF,GACJ,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,KAAK,CAAC,IAAzB,EAA6C;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB,CAAC,CAAC,IAAF,CAAO;AAApC,eAA7C,CADI,GAEJ,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,KAAK,CAAC,IAAzB,EAAyC;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAZ,GAAoB,CAAC,CAAC,IAAF,CAAO;AAApC,eAAzC,CAFA;AAIN,qBAAA,CAAA;AAAA;AAAA,gBAAO,CAAP,CAAA;;;OAZqC,CAAA;AAaxC,KAbM,CAAP;AAcH,GAhBF;AAiBC,EAAA,OAAO,EAAP,UAAQ,EAAR,EAAiB;;;QAAP,KAAK,GAAA,EAAA,CAAA,K;AACX,KAAA,EAAA,GAAC,CAAA,EAAA,GAAC,KAAD,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,KAAjB,MAAoD,IAApD,IAAoD,EAAA,KAAA,KAAA,CAApD,GAAoD,KAAA,CAApD,GAAoD,EAAA,CAAE,OAAF,EAApD;AACH,GAnBF;AAoBC,EAAA,MAAM,EAAN,UAAO,EAAP,EAAkC;;;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;;AAC5B,QAAI,SAAS,CAAC,KAAV,KAAoB,SAAS,CAAC,KAAlC,EAAyC;AACpC,MAAA,CAAC,CAAC,KAAF,GAAqB,SAAS,CAAC,KAAV,KAAmB,CAAA,EAAA,GAAA,SAAS,CAAC,IAAV,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,IAAnC,KAA2C,EAAhE;AACD,aAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;;AACD,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AACH,GA1BF;AA2BC,EAAA,cAAc,EAAE,YAAA;AAAM,WAAC;AAAE,MAAA,cAAc,EAAE,KAAlB;AAAyB,MAAA,MAAM,EAAhC;AAAC,KAAD;AAA0E;AA3BjG,CAVc,CAAjB;AAyCA,IAAM,SAAS,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC3C,EAAA,IAAI,EAAE,YADqC;AAE3C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,WAAW,EAAE;AAAnC,GAFkC;AAG3C,EAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAQ,IAH6B;AAI3C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJ6B;AAK3C,EAAA,MAAM,EAAE;AACJ,IAAA,OAAO,EAAE,EAAE,CAAC,UAAH,CAAc;AACnB,MAAA,EAAE,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR,EAAY;AAAE,QAAA,KAAK,EAAE;AAAT,OAAZ,CADe;AAEnB,MAAA,MAAM,EAAE,EAAE,CAAC,MAAH,CAAiB,KAAjB,EAAwB,CAAC,CAAC,KAAD,EAAQ,KAAR,CAAD,CAAxB;AAFW,KAAd,EAGN,UAAA,CAAA,EAAC;AAAI,aAAG,CAAC,CAAC,EAAF,GAAI,IAAJ,GAAS,CAAC,CAAb,MAAA;AAAsB,KAHrB;AADL;AALmC,CAA7B,EAWf;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAAqB,MAArB,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,YAAZ,EAA0B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAChC,cAAA,GAAG,GAAG,IAAI,GAAJ,EAAN;;AACN,mBAAA,EAAA,GAAA,CAAA,EAAgB,EAAA,GAAA,MAAM,CAAC,OAAvB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA8B;AAAnB,gBAAA,CAAC,GAAA,EAAA,CAAA,EAAA,CAAD;AAAqB,gBAAA,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,EAAc,CAAC,CAAC,MAAhB;AAAwB;;AAElD,cAAA,OAAO,GAA0B,EAAjC;mBAEgB,C,EAAN,EAAA,GAAA,CAAC,CAAC,I;;;;kBAAF,EAAA,EAAA,GAAA,EAAA,CAAA,MAAA,C,EAAM,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AAAX,cAAA,CAAC,GAAA,EAAA,CAAA,EAAA,CAAD;AACP,kBAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAL,EAAoB,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AAEL,qBAAA,CAAA;AAAA;AAAA,gBAAM,CAAC,CAAC,CAAC,IAAF,KAAW,QAAX,GAAsB,GAAG,CAAC,KAAJ,CAAU,CAAC,CAAC,IAAZ,CAAtB,GAA0C,GAAG,CAAC,WAAJ,CAAgB,CAAC,CAAC,IAAlB,CAA3C,EAAoE,YAApE,CAAiF,GAAjF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAa,CAAC,CAAC,EAAF,GAAI,IAAJ,GAAS,MAAM,CAAC,OAA7B,CAAN;AACpB,cAAA,OAAO,CAAC,IAAR,CAAa;AAAE,gBAAA,EAAE,EAAE,CAAC,CAAC,EAAR;AAAY,gBAAA,IAAI,EAAE,KAAlB;AAAyB,gBAAA,IAAI,EAAE,MAAM,CAAC;AAAtC,eAAb;;;;AALY,cAAA,EAAA;;;;;;AAQhB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,OAAnB,EAA4B;AAAE,gBAAA,KAAK,EAAE,aAAT;AAAwB,gBAAA,WAAW,EAAK,OAAO,CAAC,MAAR,GAAc,GAAd,IAAkB,OAAO,CAAC,MAAR,KAAmB,CAAnB,GAAuB,OAAvB,GAAiC,SAAnD;AAAxC,eAA5B,CAAP,CAAA;;;OAdsC,CAAA;AAezC,KAfM,CAAP;AAgBH,GAlBF,CAmBC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BD,CAXe,CAAlB;AA2CA,IAAM,QAAQ,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC1C,EAAA,IAAI,EAAE,WADoC;AAE1C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,WAAW,EAAE;AAAlC,GAFiC;AAG1C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,EAAiB,EAAE,CAAC,IAAH,CAAQ,MAAzB,CAHoC;AAI1C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ4B,CAA7B,EAKd;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACtB,qBAAA,CAAA;AAAA;AAAA,gBAAM,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe,EAAf,CAAkB,CAAlB,IAAuB,GAAG,CAAC,KAAJ,CAAU,CAAC,CAAC,IAAZ,CAAvB,GAA2C,GAAG,CAAC,WAAJ,CAAgB,CAAC,CAAC,IAAlB,CAA5C,EAAqE,YAArE,CAAkF,GAAlF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,GAAd,CAAkB,MAAM,CAAC,MAAzB,CAAP,CAAA;;;OAHqC,CAAA;AAIxC,KAJM,CAAP;AAKH;AAPF,CALc,CAAjB;AAgBA,IAAM,SAAS,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC3C,EAAA,IAAI,EAAE,YADqC;AAE3C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,WAAW,EAAE;AAAnC,GAFkC;AAG3C,EAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAQ,MAH6B;AAI3C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ6B,CAA7B,EAKf;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,YAAZ,EAA0B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACvB,qBAAA,CAAA;AAAA;AAAA,gBAAM,SAAS,CAAC,CAAC,CAAC,IAAH,EAAS,CAAC,CAAC,KAAX,CAAT,CAA2B,YAA3B,CAAwC,GAAxC,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAM,CAAC,MAA1B,CAAP,CAAA;;;OAHsC,CAAA;AAIzC,KAJM,CAAP;AAKH;AAPF,CALe,CAAlB;AAgBA,IAAM,QAAQ,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC1C,EAAA,IAAI,EAAE,WADoC;AAE1C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,WAAW,EAAE;AAAlC,GAFiC;AAG1C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,CAHoC;AAI1C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ4B,CAA7B,EAKd;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACtB,qBAAA,CAAA;AAAA;AAAA,gBAAM,QAAQ,CAAC,CAAC,CAAC,IAAH,CAAR,CAAiB,YAAjB,CAA8B,GAA9B,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,GAAd,CAAkB,MAAM,CAAC,MAAzB,CAAP,CAAA;;;OAHqC,CAAA;AAIxC,KAJM,CAAP;AAKH;AAPF,CALc,CAAjB;AAgBA,IAAM,QAAQ,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC1C,EAAA,IAAI,EAAE,WADoC;AAE1C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,WAAW,EAAE;AAAlC,GAFiC;AAG1C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,CAHoC;AAI1C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ4B,CAA7B,EAKd;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACtB,qBAAA,CAAA;AAAA;AAAA,gBAAM,GAAG,CAAC,QAAJ,CAAa,CAAC,CAAC,IAAf,EAAqB,YAArB,CAAkC,GAAlC,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,GAAd,CAAkB,MAAM,CAAC,MAAzB,EAAiC;AAAE,gBAAA,KAAK,EAAE,MAAM,CAAC,MAAP,CAAc,QAAd,CAAuB,CAAvB,KAA6B;AAAtC,eAAjC,CAAP,CAAA;;;OAHqC,CAAA;AAIxC,KAJM,CAAP;AAKH;AAPF,CALc,CAAjB;AAgBA,IAAM,SAAS,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC3C,EAAA,IAAI,EAAE,YADqC;AAE3C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,oBAAR;AAA8B,IAAA,WAAW,EAAE;AAA3C,GAFkC;AAG3C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,CAHqC;AAI3C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ6B,CAA7B,EAKf;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,oBAAZ,EAAkC,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC/B,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,IAAb,EAAmB,CAAC,CAAC,KAArB,EAA4B,YAA5B,CAAyC,GAAzC,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAM,CAAC,MAA1B,CAAP,CAAA;;;OAH8C,CAAA;AAIjD,KAJM,CAAP;AAKH;AAPF,CALe,CAAlB;AAgBA,IAAM,SAAS,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC3C,EAAA,IAAI,EAAE,YADqC;AAE3C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,iBAAR;AAA2B,IAAA,WAAW,EAAE;AAAxC,GAFkC;AAG3C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,CAHqC;AAI3C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ6B,CAA7B,EAKf;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,iBAAZ,EAA+B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC5B,qBAAA,CAAA;AAAA;AAAA,gBAAM,IAAI,CAAC,KAAL,CAAW,CAAC,CAAC,IAAb,EAAmB,CAAC,CAAC,KAArB,EAA4B,YAA5B,CAAyC,GAAzC,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAM,CAAC,MAA1B,CAAP,CAAA;;;OAH2C,CAAA;AAI9C,KAJM,CAAP;AAKH;AAPF,CALe,CAAlB;AAgBA,IAAM,OAAO,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AACzC,EAAA,IAAI,EAAE,UADmC;AAEzC,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,UAAR;AAAoB,IAAA,WAAW,EAAE;AAAjC,GAFgC;AAGzC,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,EAAiB,EAAE,CAAC,IAAH,CAAQ,MAAzB,CAHmC;AAIzC,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ2B,CAA7B,EAKb;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,UAAZ,EAAwB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrB,qBAAA,CAAA;AAAA;AAAA,gBAAM,OAAO,CAAC,CAAC,CAAC,IAAH,EAAS,CAAC,CAAC,KAAX,CAAP,CAAyB,YAAzB,CAAsC,GAAtC,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAN;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,EAAd,CAAiB,MAAM,CAAC,MAAxB,CAAP,CAAA;;;OAHoC,CAAA;AAIvC,KAJM,CAAP;AAKH;AAPF,CALa,CAAhB;AAgBA,IAAM,YAAY,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC9C,EAAA,IAAI,EAAE,eADwC;AAE9C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,eAAR;AAAyB,IAAA,WAAW,EAAE;AAAtC,GAFqC;AAG9C,EAAA,IAAI,EAAE,EAAE,CAAC,IAHqC;AAI9C,EAAA,EAAE,EAAE,EAAE,CAAC,IAAH,CAAQ,MAJkC;AAK9C,EAAA,MAAM,EAAE;AACJ,IAAA,IAAI,EAAE,EAAE,CAAC,KAAH,CAAS,EAAT,CADF;AAEJ,IAAA,KAAK,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ;AAFH;AALsC,CAA7B,EASlB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAA4B;QAAzB,EAAA,GAAA,EAAA,CAAA,M;QAAU,IAAI,GAAA,EAAA,CAAA,I;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACzB,WAAO,IAAI,EAAE,CAAC,IAAH,CAAQ,MAAZ,CAAmB,IAAnB,EAAyB;AAAE,MAAA,KAAK,EAAE,KAAK,IAAI;AAAlB,KAAzB,CAAP;AACH,GAHF;AAIC,EAAA,MAAM,EAAA,UAAC,EAAD,EAA4B;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;AAC5B,QAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAAjC,EAAuC,OAAO,gBAAgB,CAAC,YAAjB,CAA8B,QAArC;;AACvC,QAAI,SAAS,CAAC,KAAV,KAAoB,SAAS,CAAC,KAAlC,EAAyC;AACrC,MAAA,CAAC,CAAC,KAAF,GAAU,SAAS,CAAC,KAAV,IAAmB,EAA7B;AACA,aAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;;AACD,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AACH,GAXF;AAYC,EAAA,cAAc,EAAE,YAAA;AAAM,WAAC;AAAE,MAAA,cAAc,EAAE,KAAlB;AAAyB,MAAA,MAAM,EAAhC;AAAC,KAAD;AAA8E;AAZrG,CATkB,CAArB;AAyBA,IAAM,UAAU,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC5C,EAAA,IAAI,EAAE,aADsC;AAE5C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,aAAR;AAAuB,IAAA,WAAW,EAAE;AAApC,GAFmC;AAG5C,EAAA,IAAI,EAAE,EAAE,CAAC,IAHmC;AAI5C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJ8B;AAK5C,EAAA,MAAM,EAAE;AACJ,IAAA,IAAI,EAAE,EAAE,CAAC,KAAH,CAAc,EAAd,CADF;AAEJ,IAAA,KAAK,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ;AAFH;AALoC,CAA7B,EAShB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAA4B;QAAzB,EAAA,GAAA,EAAA,CAAA,M;QAAU,IAAI,GAAA,EAAA,CAAA,I;QAAE,KAAK,GAAA,EAAA,CAAA,K;AACzB,WAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,IAAnB,EAAyB;AAAE,MAAA,KAAK,EAAE,KAAK,IAAI;AAAlB,KAAzB,CAAP;AACH,GAHF;AAIC,EAAA,MAAM,EAAA,UAAC,EAAD,EAA4B;QAAzB,SAAS,GAAA,EAAA,CAAA,S;QAAE,SAAS,GAAA,EAAA,CAAA,S;QAAE,CAAC,GAAA,EAAA,CAAA,C;AAC5B,QAAI,SAAS,CAAC,IAAV,KAAmB,SAAS,CAAC,IAAjC,EAAuC,OAAO,gBAAgB,CAAC,YAAjB,CAA8B,QAArC;;AACvC,QAAI,SAAS,CAAC,KAAV,KAAoB,SAAS,CAAC,KAAlC,EAAyC;AACrC,MAAA,CAAC,CAAC,KAAF,GAAU,SAAS,CAAC,KAAV,IAAmB,EAA7B;AACA,aAAO,gBAAgB,CAAC,YAAjB,CAA8B,OAArC;AACH;;AACD,WAAO,gBAAgB,CAAC,YAAjB,CAA8B,SAArC;AACH,GAXF;AAYC,EAAA,cAAc,EAAE,YAAA;AAAM,WAAC;AAAE,MAAA,cAAc,EAAE,KAAlB;AAAyB,MAAA,MAAM,EAAhC;AAAC,KAAD;AAA2E;AAZlG,CATgB,CAAnB;AAyBA,IAAM,SAAS,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC3C,EAAA,IAAI,EAAE,YADqC;AAE3C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,WAAW,EAAE;AAAnC,GAFkC;AAG3C,EAAA,IAAI,EAAE,CAAC,EAAE,CAAC,IAAH,CAAQ,MAAT,CAHqC;AAI3C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJ6B,CAA7B,EAKf;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,YAAZ,EAA0B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACzB,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,QAAJ,CAAa,CAAC,CAAC,IAAf,CAAD,CAAuB,IAAvB,EAAN,CAAA;;;AAAP,cAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,IAAnB,CAAP,CAAA;;;OAFsC,CAAA;AAGzC,KAHM,CAAP;AAIH;AANF,CALe,CAAlB;AAeA,IAAM,UAAU,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC5C,EAAA,IAAI,EAAE,aADsC;AAE5C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,aAAR;AAAuB,IAAA,WAAW,EAAE;AAApC,GAFmC;AAG5C,EAAA,IAAI,EAAE,EAAE,CAAC,IAHmC;AAI5C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJ8B;AAK5C,EAAA,MAAM,EAAE;AACJ,IAAA,GAAG,EAAE,EAAE,CAAC,GAAH,CAAO,EAAP,CADD;AAEJ,IAAA,QAAQ,EAAE,EAAE,CAAC,OAAH,CAAW,KAAX,CAFN;AAGJ,IAAA,MAAM,EAAE,EAAE,CAAC,IAAH,CAAQ,MAAR,CAHJ;AAIJ,IAAA,OAAO,EAAE,EAAE,CAAC,KAAH,CAA4B,EAA5B,EAAgC;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAhC,CAJL;AAKJ,IAAA,SAAS,EAAE,EAAE,CAAC,UAAH,CAAc;AACrB,MAAA,IAAI,EAAE,EAAE,CAAC,IAAH,CAAiC,UAAjC,CADe;AAErB,MAAA,KAAK,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,CAFc;AAGrB,MAAA,KAAK,EAAE,EAAE,CAAC,KAAH,CAAS,UAAU,CAAC,KAApB,CAHc;AAIrB,MAAA,KAAK,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE,CAAf;AAAkB,QAAA,IAAI,EAAE;AAAxB,OAAd,CAJc;AAKrB,MAAA,WAAW,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX;AALQ,KAAd,EAMR,UAAA,CAAA,EAAC;AAAI,aAAG,CAAC,CAAC,IAAF,GAAM,GAAN,GAAU,CAAC,CAAd,KAAA;AAAsB,KANnB;AALP;AALoC,CAA7B,EAkBhB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAc;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,aAAZ,EAA2B,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AACjC,UAAA,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,OAArB,IAAgC,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,IAApB,CAAhC,GAA4D,MAAM,CAAC,OAA7E;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B;AAAE,YAAA,KAAK,EAAE,MAAG,OAAO,IAAI,MAAM,CAAC,GAArB,CAAT;AAAqC,YAAA,WAAW,EAAE;AAAlD,WAA3B,CAAP,CAAA;;OAFuC,CAAA;AAG1C,KAHM,CAAP;AAIH;AANF,CAlBgB,CAAnB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport * as CCP4 from '../../mol-io/reader/ccp4/parser';\r\nimport { CIF } from '../../mol-io/reader/cif';\r\nimport * as DSN6 from '../../mol-io/reader/dsn6/parser';\r\nimport * as PLY from '../../mol-io/reader/ply/parser';\r\nimport { parsePsf } from '../../mol-io/reader/psf/parser';\r\nimport { StateObject, StateTransformer } from '../../mol-state';\r\nimport { Task } from '../../mol-task';\r\nimport { ajaxGetMany } from '../../mol-util/data-source';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\r\nimport { Asset } from '../../mol-util/assets';\r\nimport { parseCube } from '../../mol-io/reader/cube/parser';\r\nimport { parseDx } from '../../mol-io/reader/dx/parser';\r\nimport { ColorNames } from '../../mol-util/color/names';\r\nexport { Download };\r\nexport { DownloadBlob };\r\nexport { RawData };\r\nexport { ReadFile };\r\nexport { ParseBlob };\r\nexport { ParseCif };\r\nexport { ParseCube };\r\nexport { ParsePsf };\r\nexport { ParsePly };\r\nexport { ParseCcp4 };\r\nexport { ParseDsn6 };\r\nexport { ParseDx };\r\nexport { ImportString };\r\nexport { ImportJson };\r\nexport { ParseJson };\r\nexport { LazyVolume };\r\nvar Download = PluginStateTransform.BuiltIn({\r\n    name: 'download',\r\n    display: { name: 'Download', description: 'Download string or binary data from the specified URL' },\r\n    from: [SO.Root],\r\n    to: [SO.Data.String, SO.Data.Binary],\r\n    params: {\r\n        url: PD.Url('https://www.ebi.ac.uk/pdbe/static/entry/1cbs_updated.cif', { description: 'Resource URL. Must be the same domain or support CORS.' }),\r\n        label: PD.Optional(PD.Text('')),\r\n        isBinary: PD.Optional(PD.Boolean(false, { description: 'If true, download data as binary (string otherwise)' }))\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var _this = this;\r\n        var p = _a.params, cache = _a.cache;\r\n        return Task.create('Download', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var url, asset;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = Asset.getUrlAsset(plugin.managers.asset, p.url);\r\n                        return [4 /*yield*/, plugin.managers.asset.resolve(url, p.isBinary ? 'binary' : 'string').runInContext(ctx)];\r\n                    case 1:\r\n                        asset = _a.sent();\r\n                        cache.asset = asset;\r\n                        return [2 /*return*/, p.isBinary\r\n                                ? new SO.Data.Binary(asset.data, { label: p.label ? p.label : url.url })\r\n                                : new SO.Data.String(asset.data, { label: p.label ? p.label : url.url })];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var _b, _c;\r\n        var cache = _a.cache;\r\n        (_c = (_b = cache) === null || _b === void 0 ? void 0 : _b.asset) === null || _c === void 0 ? void 0 : _c.dispose();\r\n    },\r\n    update: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary)\r\n            return StateTransformer.UpdateResult.Recreate;\r\n        if (oldParams.label !== newParams.label) {\r\n            b.label = newParams.label || ((typeof newParams.url === 'string') ? newParams.url : newParams.url.url);\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        return StateTransformer.UpdateResult.Unchanged;\r\n    }\r\n});\r\nvar DownloadBlob = PluginStateTransform.BuiltIn({\r\n    name: 'download-blob',\r\n    display: { name: 'Download Blob', description: 'Download multiple string or binary data from the specified URLs.' },\r\n    from: SO.Root,\r\n    to: SO.Data.Blob,\r\n    params: {\r\n        sources: PD.ObjectList({\r\n            id: PD.Text('', { label: 'Unique ID' }),\r\n            url: PD.Url('https://www.ebi.ac.uk/pdbe/static/entry/1cbs_updated.cif', { description: 'Resource URL. Must be the same domain or support CORS.' }),\r\n            isBinary: PD.Optional(PD.Boolean(false, { description: 'If true, download data as binary (string otherwise)' })),\r\n            canFail: PD.Optional(PD.Boolean(false, { description: 'Indicate whether the download can fail and not be included in the blob as a result.' }))\r\n        }, function (e) { return e.id + \": \" + e.url; }),\r\n        maxConcurrency: PD.Optional(PD.Numeric(4, { min: 1, max: 12, step: 1 }, { description: 'The maximum number of concurrent downloads.' }))\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var _this = this;\r\n        var params = _a.params, cache = _a.cache;\r\n        return Task.create('Download Blob', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var entries, data, assets, i, r, src;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        entries = [];\r\n                        return [4 /*yield*/, ajaxGetMany(ctx, plugin.managers.asset, params.sources, params.maxConcurrency || 4)];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        assets = [];\r\n                        for (i = 0; i < data.length; i++) {\r\n                            r = data[i], src = params.sources[i];\r\n                            if (r.kind === 'error')\r\n                                plugin.log.warn(\"Download \" + r.id + \" (\" + src.url + \") failed: \" + r.error);\r\n                            else {\r\n                                assets.push(r.result);\r\n                                entries.push(src.isBinary\r\n                                    ? { id: r.id, kind: 'binary', data: r.result.data }\r\n                                    : { id: r.id, kind: 'string', data: r.result.data });\r\n                            }\r\n                        }\r\n                        cache.assets = assets;\r\n                        return [2 /*return*/, new SO.Data.Blob(entries, { label: 'Data Blob', description: entries.length + \" \" + (entries.length === 1 ? 'entry' : 'entries') })];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a, plugin) {\r\n        var _b;\r\n        var cache = _a.cache;\r\n        var assets = (_b = cache) === null || _b === void 0 ? void 0 : _b.assets;\r\n        if (!assets)\r\n            return;\r\n        for (var _c = 0, assets_1 = assets; _c < assets_1.length; _c++) {\r\n            var a = assets_1[_c];\r\n            a.dispose();\r\n        }\r\n    }\r\n    // TODO: ??\r\n    // update({ oldParams, newParams, b }) {\r\n    //     return 0 as any;\r\n    //     // if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary) return StateTransformer.UpdateResult.Recreate;\r\n    //     // if (oldParams.label !== newParams.label) {\r\n    //     //     (b.label as string) = newParams.label || newParams.url;\r\n    //     //     return StateTransformer.UpdateResult.Updated;\r\n    //     // }\r\n    //     // return StateTransformer.UpdateResult.Unchanged;\r\n    // }\r\n});\r\nvar RawData = PluginStateTransform.BuiltIn({\r\n    name: 'raw-data',\r\n    display: { name: 'Raw Data', description: 'Raw data supplied by value.' },\r\n    from: [SO.Root],\r\n    to: [SO.Data.String, SO.Data.Binary],\r\n    params: {\r\n        data: PD.Value('', { isHidden: true }),\r\n        label: PD.Optional(PD.Text(''))\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var p = _a.params;\r\n        return Task.create('Raw Data', function () { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (typeof p.data === 'string') {\r\n                    return [2 /*return*/, new SO.Data.String(p.data, { label: p.label ? p.label : 'String' })];\r\n                }\r\n                else if (Array.isArray(p.data)) {\r\n                    return [2 /*return*/, new SO.Data.Binary(new Uint8Array(p.data), { label: p.label ? p.label : 'Binary' })];\r\n                }\r\n                else if (p.data instanceof ArrayBuffer) {\r\n                    return [2 /*return*/, new SO.Data.Binary(new Uint8Array(p.data), { label: p.label ? p.label : 'Binary' })];\r\n                }\r\n                else if (p.data instanceof Uint8Array) {\r\n                    return [2 /*return*/, new SO.Data.Binary(p.data, { label: p.label ? p.label : 'Binary' })];\r\n                }\r\n                else {\r\n                    throw new Error('Supplied binary data must be a plain array, ArrayBuffer, or Uint8Array.');\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    },\r\n    update: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (oldParams.data !== newParams.data)\r\n            return StateTransformer.UpdateResult.Recreate;\r\n        if (oldParams.label !== newParams.label) {\r\n            b.label = newParams.label || b.label;\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        return StateTransformer.UpdateResult.Unchanged;\r\n    },\r\n    customSerialization: {\r\n        toJSON: function (p) {\r\n            if (typeof p.data === 'string' || Array.isArray(p.data)) {\r\n                return p;\r\n            }\r\n            else if (p.data instanceof ArrayBuffer) {\r\n                var v = new Uint8Array(p.data);\r\n                var data = new Array(v.length);\r\n                for (var i = 0, _i = v.length; i < _i; i++)\r\n                    data[i] = v[i];\r\n                return { data: data, label: p.label };\r\n            }\r\n            else if (p.data instanceof Uint8Array) {\r\n                var data = new Array(p.data.length);\r\n                for (var i = 0, _i = p.data.length; i < _i; i++)\r\n                    data[i] = p.data[i];\r\n                return { data: data, label: p.label };\r\n            }\r\n        },\r\n        fromJSON: function (data) {\r\n            return data;\r\n        }\r\n    }\r\n});\r\nvar ReadFile = PluginStateTransform.BuiltIn({\r\n    name: 'read-file',\r\n    display: { name: 'Read File', description: 'Read string or binary data from the specified file' },\r\n    from: SO.Root,\r\n    to: [SO.Data.String, SO.Data.Binary],\r\n    params: {\r\n        file: PD.File(),\r\n        label: PD.Optional(PD.Text('')),\r\n        isBinary: PD.Optional(PD.Boolean(false, { description: 'If true, open file as as binary (string otherwise)' }))\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var _this = this;\r\n        var p = _a.params, cache = _a.cache;\r\n        return Task.create('Open File', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var asset, o;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (p.file === null) {\r\n                            plugin.log.error('No file(s) selected');\r\n                            return [2 /*return*/, StateObject.Null];\r\n                        }\r\n                        return [4 /*yield*/, plugin.managers.asset.resolve(p.file, p.isBinary ? 'binary' : 'string').runInContext(ctx)];\r\n                    case 1:\r\n                        asset = _a.sent();\r\n                        cache.asset = asset;\r\n                        o = p.isBinary\r\n                            ? new SO.Data.Binary(asset.data, { label: p.label ? p.label : p.file.name })\r\n                            : new SO.Data.String(asset.data, { label: p.label ? p.label : p.file.name });\r\n                        return [2 /*return*/, o];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var _b, _c;\r\n        var cache = _a.cache;\r\n        (_c = (_b = cache) === null || _b === void 0 ? void 0 : _b.asset) === null || _c === void 0 ? void 0 : _c.dispose();\r\n    },\r\n    update: function (_a) {\r\n        var _b;\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (oldParams.label !== newParams.label) {\r\n            b.label = newParams.label || ((_b = oldParams.file) === null || _b === void 0 ? void 0 : _b.name) || '';\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        return StateTransformer.UpdateResult.Unchanged;\r\n    },\r\n    isSerializable: function () { return ({ isSerializable: false, reason: 'Cannot serialize user loaded files.' }); }\r\n});\r\nvar ParseBlob = PluginStateTransform.BuiltIn({\r\n    name: 'parse-blob',\r\n    display: { name: 'Parse Blob', description: 'Parse multiple data enties' },\r\n    from: SO.Data.Blob,\r\n    to: SO.Format.Blob,\r\n    params: {\r\n        formats: PD.ObjectList({\r\n            id: PD.Text('', { label: 'Unique ID' }),\r\n            format: PD.Select('cif', [['cif', 'cif']])\r\n        }, function (e) { return e.id + \": \" + e.format; })\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Parse Blob', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var map, _a, _b, f, entries, _c, _d, e, parsed;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        map = new Map();\r\n                        for (_a = 0, _b = params.formats; _a < _b.length; _a++) {\r\n                            f = _b[_a];\r\n                            map.set(f.id, f.format);\r\n                        }\r\n                        entries = [];\r\n                        _c = 0, _d = a.data;\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        if (!(_c < _d.length)) return [3 /*break*/, 4];\r\n                        e = _d[_c];\r\n                        if (!map.has(e.id))\r\n                            return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, (e.kind === 'string' ? CIF.parse(e.data) : CIF.parseBinary(e.data)).runInContext(ctx)];\r\n                    case 2:\r\n                        parsed = _e.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(e.id + \": \" + parsed.message);\r\n                        entries.push({ id: e.id, kind: 'cif', data: parsed.result });\r\n                        _e.label = 3;\r\n                    case 3:\r\n                        _c++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/, new SO.Format.Blob(entries, { label: 'Format Blob', description: entries.length + \" \" + (entries.length === 1 ? 'entry' : 'entries') })];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    // TODO: ??\r\n    // update({ oldParams, newParams, b }) {\r\n    //     return 0 as any;\r\n    //     // if (oldParams.url !== newParams.url || oldParams.isBinary !== newParams.isBinary) return StateTransformer.UpdateResult.Recreate;\r\n    //     // if (oldParams.label !== newParams.label) {\r\n    //     //     (b.label as string) = newParams.label || newParams.url;\r\n    //     //     return StateTransformer.UpdateResult.Updated;\r\n    //     // }\r\n    //     // return StateTransformer.UpdateResult.Unchanged;\r\n    // }\r\n});\r\nvar ParseCif = PluginStateTransform.BuiltIn({\r\n    name: 'parse-cif',\r\n    display: { name: 'Parse CIF', description: 'Parse CIF from String or Binary data' },\r\n    from: [SO.Data.String, SO.Data.Binary],\r\n    to: SO.Format.Cif\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse CIF', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, (SO.Data.String.is(a) ? CIF.parse(a.data) : CIF.parseBinary(a.data)).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Cif(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParseCube = PluginStateTransform.BuiltIn({\r\n    name: 'parse-cube',\r\n    display: { name: 'Parse Cube', description: 'Parse Cube from String data' },\r\n    from: SO.Data.String,\r\n    to: SO.Format.Cube\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse Cube', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, parseCube(a.data, a.label).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Cube(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParsePsf = PluginStateTransform.BuiltIn({\r\n    name: 'parse-psf',\r\n    display: { name: 'Parse PSF', description: 'Parse PSF from String data' },\r\n    from: [SO.Data.String],\r\n    to: SO.Format.Psf\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse PSF', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, parsePsf(a.data).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Psf(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParsePly = PluginStateTransform.BuiltIn({\r\n    name: 'parse-ply',\r\n    display: { name: 'Parse PLY', description: 'Parse PLY from String data' },\r\n    from: [SO.Data.String],\r\n    to: SO.Format.Ply\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse PLY', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, PLY.parsePly(a.data).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Ply(parsed.result, { label: parsed.result.comments[0] || 'PLY Data' })];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParseCcp4 = PluginStateTransform.BuiltIn({\r\n    name: 'parse-ccp4',\r\n    display: { name: 'Parse CCP4/MRC/MAP', description: 'Parse CCP4/MRC/MAP from Binary data' },\r\n    from: [SO.Data.Binary],\r\n    to: SO.Format.Ccp4\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse CCP4/MRC/MAP', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, CCP4.parse(a.data, a.label).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Ccp4(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParseDsn6 = PluginStateTransform.BuiltIn({\r\n    name: 'parse-dsn6',\r\n    display: { name: 'Parse DSN6/BRIX', description: 'Parse CCP4/BRIX from Binary data' },\r\n    from: [SO.Data.Binary],\r\n    to: SO.Format.Dsn6\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse DSN6/BRIX', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, DSN6.parse(a.data, a.label).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Dsn6(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ParseDx = PluginStateTransform.BuiltIn({\r\n    name: 'parse-dx',\r\n    display: { name: 'Parse DX', description: 'Parse DX from Binary/String data' },\r\n    from: [SO.Data.Binary, SO.Data.String],\r\n    to: SO.Format.Dx\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse DX', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var parsed;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, parseDx(a.data, a.label).runInContext(ctx)];\r\n                    case 1:\r\n                        parsed = _a.sent();\r\n                        if (parsed.isError)\r\n                            throw new Error(parsed.message);\r\n                        return [2 /*return*/, new SO.Format.Dx(parsed.result)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar ImportString = PluginStateTransform.BuiltIn({\r\n    name: 'import-string',\r\n    display: { name: 'Import String', description: 'Import given data as a string' },\r\n    from: SO.Root,\r\n    to: SO.Data.String,\r\n    params: {\r\n        data: PD.Value(''),\r\n        label: PD.Optional(PD.Text('')),\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _b = _a.params, data = _b.data, label = _b.label;\r\n        return new SO.Data.String(data, { label: label || '' });\r\n    },\r\n    update: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (oldParams.data !== newParams.data)\r\n            return StateTransformer.UpdateResult.Recreate;\r\n        if (oldParams.label !== newParams.label) {\r\n            b.label = newParams.label || '';\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        return StateTransformer.UpdateResult.Unchanged;\r\n    },\r\n    isSerializable: function () { return ({ isSerializable: false, reason: 'Cannot serialize user imported strings.' }); }\r\n});\r\nvar ImportJson = PluginStateTransform.BuiltIn({\r\n    name: 'import-json',\r\n    display: { name: 'Import JSON', description: 'Import given data as a JSON' },\r\n    from: SO.Root,\r\n    to: SO.Format.Json,\r\n    params: {\r\n        data: PD.Value({}),\r\n        label: PD.Optional(PD.Text('')),\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _b = _a.params, data = _b.data, label = _b.label;\r\n        return new SO.Format.Json(data, { label: label || '' });\r\n    },\r\n    update: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams, b = _a.b;\r\n        if (oldParams.data !== newParams.data)\r\n            return StateTransformer.UpdateResult.Recreate;\r\n        if (oldParams.label !== newParams.label) {\r\n            b.label = newParams.label || '';\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        return StateTransformer.UpdateResult.Unchanged;\r\n    },\r\n    isSerializable: function () { return ({ isSerializable: false, reason: 'Cannot serialize user imported JSON.' }); }\r\n});\r\nvar ParseJson = PluginStateTransform.BuiltIn({\r\n    name: 'parse-json',\r\n    display: { name: 'Parse JSON', description: 'Parse JSON from String data' },\r\n    from: [SO.Data.String],\r\n    to: SO.Format.Json\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse JSON', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var json;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, (new Response(a.data)).json()];\r\n                    case 1:\r\n                        json = _a.sent();\r\n                        return [2 /*return*/, new SO.Format.Json(json)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nvar LazyVolume = PluginStateTransform.BuiltIn({\r\n    name: 'lazy-volume',\r\n    display: { name: 'Lazy Volume', description: 'A placeholder for lazy loaded volume representation' },\r\n    from: SO.Root,\r\n    to: SO.Volume.Lazy,\r\n    params: {\r\n        url: PD.Url(''),\r\n        isBinary: PD.Boolean(false),\r\n        format: PD.Text('ccp4'),\r\n        entryId: PD.Value('', { isHidden: true }),\r\n        isovalues: PD.ObjectList({\r\n            type: PD.Text('relative'),\r\n            value: PD.Numeric(0),\r\n            color: PD.Color(ColorNames.black),\r\n            alpha: PD.Numeric(1, { min: 0, max: 1, step: 0.01 }),\r\n            volumeIndex: PD.Numeric(0),\r\n        }, function (e) { return e.type + \" \" + e.value; })\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Lazy Volume', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var entryId;\r\n            return __generator(this, function (_a) {\r\n                entryId = Array.isArray(params.entryId) ? params.entryId.join(', ') : params.entryId;\r\n                return [2 /*return*/, new SO.Volume.Lazy(params, { label: \"\" + (entryId || params.url), description: 'Lazy Volume' })];\r\n            });\r\n        }); });\r\n    }\r\n});\r\n//# sourceMappingURL=data.js.map"]},"metadata":{},"sourceType":"module"}