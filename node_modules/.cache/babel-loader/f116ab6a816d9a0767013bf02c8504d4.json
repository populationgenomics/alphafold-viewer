{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { mmCIF_Schema } from '../../../../mol-io/reader/cif/schema/mmcif';\nimport { CifWriter } from '../../../../mol-io/writer/cif';\nimport { Table } from '../../../../mol-data/db';\nimport { FormatPropertyProvider } from '../../common/property';\nexport var ComponentBond;\n\n(function (ComponentBond) {\n  ComponentBond.Descriptor = {\n    name: 'chem_comp_bond',\n    cifExport: {\n      prefix: '',\n      categories: [{\n        name: 'chem_comp_bond',\n        instance: function (ctx) {\n          var p = ComponentBond.Provider.get(ctx.firstModel);\n          if (!p) return CifWriter.Category.Empty;\n          var chem_comp_bond = p.data;\n          if (!chem_comp_bond) return CifWriter.Category.Empty;\n          var comp_names = ctx.structures[0].uniqueResidueNames;\n          var comp_id = chem_comp_bond.comp_id,\n              _rowCount = chem_comp_bond._rowCount;\n          var indices = [];\n\n          for (var i = 0; i < _rowCount; i++) {\n            if (comp_names.has(comp_id.value(i))) indices[indices.length] = i;\n          }\n\n          return CifWriter.Category.ofTable(chem_comp_bond, indices);\n        }\n      }]\n    }\n  };\n  ComponentBond.Provider = FormatPropertyProvider.create(ComponentBond.Descriptor);\n\n  function chemCompBondFromTable(model, table) {\n    return Table.pick(table, mmCIF_Schema.chem_comp_bond, function (i) {\n      return model.properties.chemicalComponentMap.has(table.comp_id.value(i));\n    });\n  }\n\n  ComponentBond.chemCompBondFromTable = chemCompBondFromTable;\n\n  function getEntriesFromChemCompBond(data) {\n    var entries = new Map();\n\n    function addEntry(id) {\n      // weird behavior when 'PRO' is requested - will report a single bond between N and H because a later operation would override real content\n      if (entries.has(id)) {\n        return entries.get(id);\n      }\n\n      var e = new Entry(id);\n      entries.set(id, e);\n      return e;\n    }\n\n    var comp_id = data.comp_id,\n        atom_id_1 = data.atom_id_1,\n        atom_id_2 = data.atom_id_2,\n        value_order = data.value_order,\n        pdbx_aromatic_flag = data.pdbx_aromatic_flag,\n        _rowCount = data._rowCount;\n    var entry = addEntry(comp_id.value(0));\n\n    for (var i = 0; i < _rowCount; i++) {\n      var id = comp_id.value(i);\n      var nameA = atom_id_1.value(i);\n      var nameB = atom_id_2.value(i);\n      var order = value_order.value(i);\n      var aromatic = pdbx_aromatic_flag.value(i) === 'Y';\n\n      if (entry.id !== id) {\n        entry = addEntry(id);\n      }\n\n      var flags = 1\n      /* Covalent */\n      ;\n      var ord = 1;\n      if (aromatic) flags |= 16\n      /* Aromatic */\n      ;\n\n      switch (order.toLowerCase()) {\n        case 'doub':\n        case 'delo':\n          ord = 2;\n          break;\n\n        case 'trip':\n          ord = 3;\n          break;\n\n        case 'quad':\n          ord = 4;\n          break;\n      }\n\n      entry.add(nameA, nameB, ord, flags);\n    }\n\n    return entries;\n  }\n\n  ComponentBond.getEntriesFromChemCompBond = getEntriesFromChemCompBond;\n\n  var Entry =\n  /** @class */\n  function () {\n    function Entry(id) {\n      this.id = id;\n      this.map = new Map();\n    }\n\n    Entry.prototype.add = function (a, b, order, flags, swap) {\n      if (swap === void 0) {\n        swap = true;\n      }\n\n      var e = this.map.get(a);\n\n      if (e !== void 0) {\n        var f = e.get(b);\n\n        if (f === void 0) {\n          e.set(b, {\n            order: order,\n            flags: flags\n          });\n        }\n      } else {\n        var map = new Map();\n        map.set(b, {\n          order: order,\n          flags: flags\n        });\n        this.map.set(a, map);\n      }\n\n      if (swap) this.add(b, a, order, flags, false);\n    };\n\n    return Entry;\n  }();\n\n  ComponentBond.Entry = Entry;\n})(ComponentBond || (ComponentBond = {}));","map":{"version":3,"sources":["../../../../../src/mol-model-formats/structure/property/bonds/chem_comp.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { mmCIF_Schema } from '../../../../mol-io/reader/cif/schema/mmcif';\r\nimport { CifWriter } from '../../../../mol-io/writer/cif';\r\nimport { Table } from '../../../../mol-data/db';\r\nimport { FormatPropertyProvider } from '../../common/property';\r\nexport var ComponentBond;\r\n(function (ComponentBond) {\r\n    ComponentBond.Descriptor = {\r\n        name: 'chem_comp_bond',\r\n        cifExport: {\r\n            prefix: '',\r\n            categories: [{\r\n                    name: 'chem_comp_bond',\r\n                    instance: function (ctx) {\r\n                        var p = ComponentBond.Provider.get(ctx.firstModel);\r\n                        if (!p)\r\n                            return CifWriter.Category.Empty;\r\n                        var chem_comp_bond = p.data;\r\n                        if (!chem_comp_bond)\r\n                            return CifWriter.Category.Empty;\r\n                        var comp_names = ctx.structures[0].uniqueResidueNames;\r\n                        var comp_id = chem_comp_bond.comp_id, _rowCount = chem_comp_bond._rowCount;\r\n                        var indices = [];\r\n                        for (var i = 0; i < _rowCount; i++) {\r\n                            if (comp_names.has(comp_id.value(i)))\r\n                                indices[indices.length] = i;\r\n                        }\r\n                        return CifWriter.Category.ofTable(chem_comp_bond, indices);\r\n                    }\r\n                }]\r\n        }\r\n    };\r\n    ComponentBond.Provider = FormatPropertyProvider.create(ComponentBond.Descriptor);\r\n    function chemCompBondFromTable(model, table) {\r\n        return Table.pick(table, mmCIF_Schema.chem_comp_bond, function (i) {\r\n            return model.properties.chemicalComponentMap.has(table.comp_id.value(i));\r\n        });\r\n    }\r\n    ComponentBond.chemCompBondFromTable = chemCompBondFromTable;\r\n    function getEntriesFromChemCompBond(data) {\r\n        var entries = new Map();\r\n        function addEntry(id) {\r\n            // weird behavior when 'PRO' is requested - will report a single bond between N and H because a later operation would override real content\r\n            if (entries.has(id)) {\r\n                return entries.get(id);\r\n            }\r\n            var e = new Entry(id);\r\n            entries.set(id, e);\r\n            return e;\r\n        }\r\n        var comp_id = data.comp_id, atom_id_1 = data.atom_id_1, atom_id_2 = data.atom_id_2, value_order = data.value_order, pdbx_aromatic_flag = data.pdbx_aromatic_flag, _rowCount = data._rowCount;\r\n        var entry = addEntry(comp_id.value(0));\r\n        for (var i = 0; i < _rowCount; i++) {\r\n            var id = comp_id.value(i);\r\n            var nameA = atom_id_1.value(i);\r\n            var nameB = atom_id_2.value(i);\r\n            var order = value_order.value(i);\r\n            var aromatic = pdbx_aromatic_flag.value(i) === 'Y';\r\n            if (entry.id !== id) {\r\n                entry = addEntry(id);\r\n            }\r\n            var flags = 1 /* Covalent */;\r\n            var ord = 1;\r\n            if (aromatic)\r\n                flags |= 16 /* Aromatic */;\r\n            switch (order.toLowerCase()) {\r\n                case 'doub':\r\n                case 'delo':\r\n                    ord = 2;\r\n                    break;\r\n                case 'trip':\r\n                    ord = 3;\r\n                    break;\r\n                case 'quad':\r\n                    ord = 4;\r\n                    break;\r\n            }\r\n            entry.add(nameA, nameB, ord, flags);\r\n        }\r\n        return entries;\r\n    }\r\n    ComponentBond.getEntriesFromChemCompBond = getEntriesFromChemCompBond;\r\n    var Entry = /** @class */ (function () {\r\n        function Entry(id) {\r\n            this.id = id;\r\n            this.map = new Map();\r\n        }\r\n        Entry.prototype.add = function (a, b, order, flags, swap) {\r\n            if (swap === void 0) { swap = true; }\r\n            var e = this.map.get(a);\r\n            if (e !== void 0) {\r\n                var f = e.get(b);\r\n                if (f === void 0) {\r\n                    e.set(b, { order: order, flags: flags });\r\n                }\r\n            }\r\n            else {\r\n                var map = new Map();\r\n                map.set(b, { order: order, flags: flags });\r\n                this.map.set(a, map);\r\n            }\r\n            if (swap)\r\n                this.add(b, a, order, flags, false);\r\n        };\r\n        return Entry;\r\n    }());\r\n    ComponentBond.Entry = Entry;\r\n})(ComponentBond || (ComponentBond = {}));\r\n//# sourceMappingURL=chem_comp.js.map"]},"metadata":{},"sourceType":"module"}