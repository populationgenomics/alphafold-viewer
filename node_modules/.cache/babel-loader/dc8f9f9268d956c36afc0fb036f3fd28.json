{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { HashSet } from '../../../mol-data/generic';\nimport { Structure, StructureElement } from '../structure';\nimport { structureUnion } from './utils/structure-set';\nimport { OrderedSet, SortedArray } from '../../../mol-data/int';\nvar StructureSelection;\n\n(function (StructureSelection) {\n  function Singletons(source, structure) {\n    return {\n      kind: 'singletons',\n      source: source,\n      structure: structure\n    };\n  }\n\n  StructureSelection.Singletons = Singletons;\n\n  function Sequence(source, structures) {\n    return {\n      kind: 'sequence',\n      source: source,\n      structures: structures\n    };\n  }\n\n  StructureSelection.Sequence = Sequence;\n\n  function Empty(source) {\n    return Singletons(source, Structure.Empty);\n  }\n\n  StructureSelection.Empty = Empty;\n  ;\n\n  function isSingleton(s) {\n    return s.kind === 'singletons';\n  }\n\n  StructureSelection.isSingleton = isSingleton;\n\n  function isEmpty(s) {\n    return isSingleton(s) ? s.structure.units.length === 0 : s.structures.length === 0;\n  }\n\n  StructureSelection.isEmpty = isEmpty;\n\n  function structureCount(sel) {\n    if (isSingleton(sel)) return sel.structure.elementCount;\n    return sel.structures.length;\n  }\n\n  StructureSelection.structureCount = structureCount;\n\n  function unionStructure(sel) {\n    if (isEmpty(sel)) return Structure.Empty;\n    if (isSingleton(sel)) return sel.structure;\n    return structureUnion(sel.source, sel.structures);\n  }\n\n  StructureSelection.unionStructure = unionStructure;\n  /** Convert selection to loci and use \"current structure units\" in Loci elements */\n\n  function toLociWithCurrentUnits(sel) {\n    var elements = [];\n    var unitMap = sel.source.unitMap;\n\n    for (var _a = 0, _b = unionStructure(sel).units; _a < _b.length; _a++) {\n      var unit = _b[_a];\n\n      if (unit === unitMap.get(unit.id)) {\n        elements[elements.length] = {\n          unit: unit,\n          indices: OrderedSet.ofBounds(0, unit.elements.length)\n        };\n      } else {\n        elements[elements.length] = {\n          unit: unit,\n          indices: OrderedSet.ofSortedArray(SortedArray.indicesOf(unitMap.get(unit.id).elements, unit.elements))\n        };\n      }\n    }\n\n    return StructureElement.Loci(sel.source, elements);\n  }\n\n  StructureSelection.toLociWithCurrentUnits = toLociWithCurrentUnits;\n  /** use source unit in loci.elements */\n\n  function toLociWithSourceUnits(sel) {\n    var elements = [];\n    var unitMap = sel.source.unitMap;\n\n    for (var _a = 0, _b = unionStructure(sel).units; _a < _b.length; _a++) {\n      var _unit = _b[_a];\n      var unit = unitMap.get(_unit.id);\n\n      if (unit === _unit) {\n        elements[elements.length] = {\n          unit: unit,\n          indices: OrderedSet.ofBounds(0, unit.elements.length)\n        };\n      } else {\n        elements[elements.length] = {\n          unit: unit,\n          indices: OrderedSet.ofSortedArray(SortedArray.indicesOf(unit.elements, _unit.elements))\n        };\n      }\n    }\n\n    return StructureElement.Loci(sel.source, elements);\n  }\n\n  StructureSelection.toLociWithSourceUnits = toLociWithSourceUnits;\n\n  function getSelection(source, structures, allSingletons) {\n    var len = structures.length;\n    if (len === 0) return Empty(source);\n    if (allSingletons) return Singletons(source, structureUnion(source, structures));\n    return Sequence(source, structures);\n  }\n\n  var LinearBuilderImpl =\n  /** @class */\n  function () {\n    function LinearBuilderImpl(source) {\n      this.source = source;\n      this.structures = [];\n      this.allSingletons = true;\n    }\n\n    LinearBuilderImpl.prototype.add = function (structure) {\n      var elementCount = structure.elementCount;\n      if (elementCount === 0) return;\n      this.structures[this.structures.length] = structure;\n      if (elementCount !== 1) this.allSingletons = false;\n    };\n\n    LinearBuilderImpl.prototype.getSelection = function () {\n      return getSelection(this.source, this.structures, this.allSingletons);\n    };\n\n    return LinearBuilderImpl;\n  }();\n\n  var HashBuilderImpl =\n  /** @class */\n  function () {\n    function HashBuilderImpl(structure) {\n      this.structure = structure;\n      this.structures = [];\n      this.allSingletons = true;\n      this.uniqueSets = HashSet(Structure.hashCode, Structure.areUnitIdsAndIndicesEqual);\n    }\n\n    HashBuilderImpl.prototype.add = function (structure) {\n      var atomCount = structure.elementCount;\n      if (atomCount === 0 || !this.uniqueSets.add(structure)) return;\n      this.structures[this.structures.length] = structure;\n      if (atomCount !== 1) this.allSingletons = false;\n    };\n\n    HashBuilderImpl.prototype.getSelection = function () {\n      return getSelection(this.structure, this.structures, this.allSingletons);\n    };\n\n    return HashBuilderImpl;\n  }();\n\n  function LinearBuilder(structure) {\n    return new LinearBuilderImpl(structure);\n  }\n\n  StructureSelection.LinearBuilder = LinearBuilder;\n\n  function UniqueBuilder(structure) {\n    return new HashBuilderImpl(structure);\n  }\n\n  StructureSelection.UniqueBuilder = UniqueBuilder; // TODO: build timeout checking into this?\n\n  function forEach(sel, fn) {\n    var idx = 0;\n\n    if (StructureSelection.isSingleton(sel)) {\n      for (var _a = 0, _b = sel.structure.units; _a < _b.length; _a++) {\n        var unit = _b[_a];\n        var elements = unit.elements;\n\n        for (var i = 0, _i = elements.length; i < _i; i++) {\n          // TODO: optimize this somehow???\n          var s = Structure.create([unit.getChild(SortedArray.ofSingleton(elements[i]))], {\n            parent: sel.source\n          });\n          fn(s, idx++);\n        }\n      }\n    } else {\n      for (var _c = 0, _d = sel.structures; _c < _d.length; _c++) {\n        var s = _d[_c];\n        fn(s, idx++);\n      }\n    }\n  }\n\n  StructureSelection.forEach = forEach;\n\n  function withInputStructure(selection, structure) {\n    if (isSingleton(selection)) return Singletons(structure, selection.structure);\n    return Sequence(structure, selection.structures);\n  }\n\n  StructureSelection.withInputStructure = withInputStructure; // TODO: spatial lookup?\n})(StructureSelection || (StructureSelection = {}));\n\nexport { StructureSelection };","map":{"version":3,"sources":["../../../../src/mol-model/structure/query/selection.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,OAAT,QAAwB,2BAAxB;AACA,SAAS,SAAT,EAAoB,gBAApB,QAAkD,cAAlD;AACA,SAAS,cAAT,QAA+B,uBAA/B;AACA,SAAS,UAAT,EAAqB,WAArB,QAAwC,uBAAxC;AAKA,IAAU,kBAAV;;AAAA,CAAA,UAAU,kBAAV,EAA4B;AAKxB,WAAgB,UAAhB,CAA2B,MAA3B,EAA8C,SAA9C,EAAkE;AAAgB,WAAO;AAAE,MAAA,IAAI,EAAE,YAAR;AAAsB,MAAA,MAAM,EAAA,MAA5B;AAA8B,MAAA,SAAS,EAAA;AAAvC,KAAP;AAAmD;;AAArH,EAAA,kBAAA,CAAA,UAAA,GAAU,UAAV;;AAChB,WAAgB,QAAhB,CAAyB,MAAzB,EAA4C,UAA5C,EAAmE;AAAc,WAAO;AAAE,MAAA,IAAI,EAAE,UAAR;AAAoB,MAAA,MAAM,EAAA,MAA1B;AAA4B,MAAA,UAAU,EAAA;AAAtC,KAAP;AAAkD;;AAAnH,EAAA,kBAAA,CAAA,QAAA,GAAQ,QAAR;;AAChB,WAAgB,KAAhB,CAAsB,MAAtB,EAAuC;AAAwB,WAAO,UAAU,CAAC,MAAD,EAAS,SAAS,CAAC,KAAnB,CAAjB;AAA6C;;AAA5F,EAAA,kBAAA,CAAA,KAAA,GAAK,KAAL;AAA4F;;AAE5G,WAAgB,WAAhB,CAA4B,CAA5B,EAAiD;AAAqB,WAAO,CAAC,CAAC,IAAF,KAAW,YAAlB;AAAiC;;AAAvF,EAAA,kBAAA,CAAA,WAAA,GAAW,WAAX;;AAChB,WAAgB,OAAhB,CAAwB,CAAxB,EAA6C;AAAI,WAAO,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAC,CAAC,SAAF,CAAY,KAAZ,CAAkB,MAAlB,KAA6B,CAA9C,GAAkD,CAAC,CAAC,UAAF,CAAa,MAAb,KAAwB,CAAjF;AAAqF;;AAAtH,EAAA,kBAAA,CAAA,OAAA,GAAO,OAAP;;AAEhB,WAAgB,cAAhB,CAA+B,GAA/B,EAAsD;AAClD,QAAI,WAAW,CAAC,GAAD,CAAf,EAAsB,OAAO,GAAG,CAAC,SAAJ,CAAc,YAArB;AACtB,WAAO,GAAG,CAAC,UAAJ,CAAe,MAAtB;AACH;;AAHe,EAAA,kBAAA,CAAA,cAAA,GAAc,cAAd;;AAKhB,WAAgB,cAAhB,CAA+B,GAA/B,EAAsD;AAClD,QAAI,OAAO,CAAC,GAAD,CAAX,EAAkB,OAAO,SAAS,CAAC,KAAjB;AAClB,QAAI,WAAW,CAAC,GAAD,CAAf,EAAsB,OAAO,GAAG,CAAC,SAAX;AACtB,WAAO,cAAc,CAAC,GAAG,CAAC,MAAL,EAAa,GAAG,CAAC,UAAjB,CAArB;AACH;;AAJe,EAAA,kBAAA,CAAA,cAAA,GAAc,cAAd;AAMhB;;AACA,WAAgB,sBAAhB,CAAuC,GAAvC,EAA8D;AAC1D,QAAM,QAAQ,GAAsE,EAApF;AACQ,QAAA,OAAO,GAAK,GAAG,CAAC,MAAJ,CAAL,OAAP;;AAER,SAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,cAAc,CAAC,GAAD,CAAd,CAAoB,KAAvC,EAAmB,EAAA,GAAA,EAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAA8C;AAAzC,UAAM,IAAI,GAAA,EAAA,CAAA,EAAA,CAAV;;AACD,UAAI,IAAI,KAAK,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,EAAjB,CAAb,EAAmC;AAC/B,QAAA,QAAQ,CAAC,QAAQ,CAAC,MAAV,CAAR,GAA4B;AACxB,UAAA,IAAI,EAAA,IADoB;AAExB,UAAA,OAAO,EAAE,UAAU,CAAC,QAAX,CAAoB,CAApB,EAAqD,IAAI,CAAC,QAAL,CAAc,MAAnE;AAFe,SAA5B;AAIH,OALD,MAKO;AACH,QAAA,QAAQ,CAAC,QAAQ,CAAC,MAAV,CAAR,GAA4B;AACxB,UAAA,IAAI,EAAA,IADoB;AAExB,UAAA,OAAO,EAAE,UAAU,CAAC,aAAX,CAAyB,WAAW,CAAC,SAAZ,CAAsB,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,EAAjB,EAAqB,QAA3C,EAAqD,IAAI,CAAC,QAA1D,CAAzB;AAFe,SAA5B;AAIH;AACJ;;AAED,WAAO,gBAAgB,CAAC,IAAjB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,QAAlC,CAAP;AACH;;AAnBe,EAAA,kBAAA,CAAA,sBAAA,GAAsB,sBAAtB;AAqBhB;;AACA,WAAgB,qBAAhB,CAAsC,GAAtC,EAA6D;AACzD,QAAM,QAAQ,GAAsE,EAApF;AACQ,QAAA,OAAO,GAAK,GAAG,CAAC,MAAJ,CAAL,OAAP;;AAER,SAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,cAAc,CAAC,GAAD,CAAd,CAAoB,KAAxC,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAA+C;AAA1C,UAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX;AACD,UAAM,IAAI,GAAG,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,EAAlB,CAAb;;AACA,UAAI,IAAI,KAAK,KAAb,EAAoB;AAChB,QAAA,QAAQ,CAAC,QAAQ,CAAC,MAAV,CAAR,GAA4B;AACxB,UAAA,IAAI,EAAA,IADoB;AAExB,UAAA,OAAO,EAAE,UAAU,CAAC,QAAX,CAAoB,CAApB,EAAqD,IAAI,CAAC,QAAL,CAAc,MAAnE;AAFe,SAA5B;AAIH,OALD,MAKO;AACH,QAAA,QAAQ,CAAC,QAAQ,CAAC,MAAV,CAAR,GAA4B;AACxB,UAAA,IAAI,EAAA,IADoB;AAExB,UAAA,OAAO,EAAE,UAAU,CAAC,aAAX,CAAyB,WAAW,CAAC,SAAZ,CAAsB,IAAI,CAAC,QAA3B,EAAqC,KAAK,CAAC,QAA3C,CAAzB;AAFe,SAA5B;AAIH;AACJ;;AAED,WAAO,gBAAgB,CAAC,IAAjB,CAAsB,GAAG,CAAC,MAA1B,EAAkC,QAAlC,CAAP;AACH;;AApBe,EAAA,kBAAA,CAAA,qBAAA,GAAqB,qBAArB;;AA2BhB,WAAS,YAAT,CAAsB,MAAtB,EAAyC,UAAzC,EAAkE,aAAlE,EAAwF;AACpF,QAAM,GAAG,GAAG,UAAU,CAAC,MAAvB;AACA,QAAI,GAAG,KAAK,CAAZ,EAAe,OAAO,KAAK,CAAC,MAAD,CAAZ;AACf,QAAI,aAAJ,EAAmB,OAAO,UAAU,CAAC,MAAD,EAAS,cAAc,CAAC,MAAD,EAAS,UAAT,CAAvB,CAAjB;AACnB,WAAO,QAAQ,CAAC,MAAD,EAAS,UAAT,CAAf;AACH;;AAED,MAAA,iBAAA;AAAA;AAAA,cAAA;AAaI,aAAA,iBAAA,CAAoB,MAApB,EAAqC;AAAjB,WAAA,MAAA,GAAA,MAAA;AAZZ,WAAA,UAAA,GAA0B,EAA1B;AACA,WAAA,aAAA,GAAgB,IAAhB;AAWkC;;AAT1C,IAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,SAAJ,EAAwB;AACpB,UAAM,YAAY,GAAG,SAAS,CAAC,YAA/B;AACA,UAAI,YAAY,KAAK,CAArB,EAAwB;AACxB,WAAK,UAAL,CAAgB,KAAK,UAAL,CAAgB,MAAhC,IAA0C,SAA1C;AACA,UAAI,YAAY,KAAK,CAArB,EAAwB,KAAK,aAAL,GAAqB,KAArB;AAC3B,KALD;;AAOA,IAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AAAiB,aAAO,YAAY,CAAC,KAAK,MAAN,EAAc,KAAK,UAAnB,EAA+B,KAAK,aAApC,CAAnB;AAAwE,KAAzF;;AAGJ,WAAA,iBAAA;AAAC,GAdD,EAAA;;AAgBA,MAAA,eAAA;AAAA;AAAA,cAAA;AAcI,aAAA,eAAA,CAAoB,SAApB,EAAwC;AAApB,WAAA,SAAA,GAAA,SAAA;AAbZ,WAAA,UAAA,GAA0B,EAA1B;AACA,WAAA,aAAA,GAAgB,IAAhB;AACA,WAAA,UAAA,GAAa,OAAO,CAAC,SAAS,CAAC,QAAX,EAAqB,SAAS,CAAC,yBAA/B,CAApB;AAWqC;;AAT7C,IAAA,eAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,SAAJ,EAAwB;AACpB,UAAM,SAAS,GAAG,SAAS,CAAC,YAA5B;AACA,UAAI,SAAS,KAAK,CAAd,IAAmB,CAAC,KAAK,UAAL,CAAgB,GAAhB,CAAoB,SAApB,CAAxB,EAAwD;AACxD,WAAK,UAAL,CAAgB,KAAK,UAAL,CAAgB,MAAhC,IAA0C,SAA1C;AACA,UAAI,SAAS,KAAK,CAAlB,EAAqB,KAAK,aAAL,GAAqB,KAArB;AACxB,KALD;;AAOA,IAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AAAiB,aAAO,YAAY,CAAC,KAAK,SAAN,EAAiB,KAAK,UAAtB,EAAkC,KAAK,aAAvC,CAAnB;AAA2E,KAA5F;;AAGJ,WAAA,eAAA;AAAC,GAfD,EAAA;;AAiBA,WAAgB,aAAhB,CAA8B,SAA9B,EAAkD;AAAa,WAAO,IAAI,iBAAJ,CAAsB,SAAtB,CAAP;AAA0C;;AAAzF,EAAA,kBAAA,CAAA,aAAA,GAAa,aAAb;;AAChB,WAAgB,aAAhB,CAA8B,SAA9B,EAAkD;AAAa,WAAO,IAAI,eAAJ,CAAoB,SAApB,CAAP;AAAwC;;AAAvF,EAAA,kBAAA,CAAA,aAAA,GAAa,aAAb,CAlHQ,CAoHxB;;AACA,WAAgB,OAAhB,CAAwB,GAAxB,EAAiD,EAAjD,EAAsF;AAClF,QAAI,GAAG,GAAG,CAAV;;AACA,QAAI,kBAAkB,CAAC,WAAnB,CAA+B,GAA/B,CAAJ,EAAyC;AACrC,WAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAG,CAAC,SAAJ,CAAc,KAAjC,EAAmB,EAAA,GAAA,EAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAAwC;AAAnC,YAAM,IAAI,GAAA,EAAA,CAAA,EAAA,CAAV;AACO,YAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;;AACR,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,CAAC,EAA/C,EAAmD;AAC/C;AACA,cAAM,CAAC,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAC,IAAI,CAAC,QAAL,CAAc,WAAW,CAAC,WAAZ,CAAwB,QAAQ,CAAC,CAAD,CAAhC,CAAd,CAAD,CAAjB,EAAwE;AAAE,YAAA,MAAM,EAAE,GAAG,CAAC;AAAd,WAAxE,CAAV;AACA,UAAA,EAAE,CAAC,CAAD,EAAI,GAAG,EAAP,CAAF;AACH;AACJ;AACJ,KATD,MASO;AACH,WAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAG,CAAC,UAApB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAgC;AAA3B,YAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,QAAA,EAAE,CAAC,CAAD,EAAI,GAAG,EAAP,CAAF;AACH;AACJ;AACJ;;AAhBe,EAAA,kBAAA,CAAA,OAAA,GAAO,OAAP;;AAkBhB,WAAgB,kBAAhB,CAAmC,SAAnC,EAAkE,SAAlE,EAAsF;AAClF,QAAI,WAAW,CAAC,SAAD,CAAf,EAA4B,OAAO,UAAU,CAAC,SAAD,EAAY,SAAS,CAAC,SAAtB,CAAjB;AAC5B,WAAO,QAAQ,CAAC,SAAD,EAAY,SAAS,CAAC,UAAtB,CAAf;AACH;;AAHe,EAAA,kBAAA,CAAA,kBAAA,GAAkB,kBAAlB,CAvIQ,CA4IxB;AACH,CA7ID,EAAU,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA5B;;AA+IA,SAAS,kBAAT","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { HashSet } from '../../../mol-data/generic';\r\nimport { Structure, StructureElement } from '../structure';\r\nimport { structureUnion } from './utils/structure-set';\r\nimport { OrderedSet, SortedArray } from '../../../mol-data/int';\r\nvar StructureSelection;\r\n(function (StructureSelection) {\r\n    function Singletons(source, structure) { return { kind: 'singletons', source: source, structure: structure }; }\r\n    StructureSelection.Singletons = Singletons;\r\n    function Sequence(source, structures) { return { kind: 'sequence', source: source, structures: structures }; }\r\n    StructureSelection.Sequence = Sequence;\r\n    function Empty(source) { return Singletons(source, Structure.Empty); }\r\n    StructureSelection.Empty = Empty;\r\n    ;\r\n    function isSingleton(s) { return s.kind === 'singletons'; }\r\n    StructureSelection.isSingleton = isSingleton;\r\n    function isEmpty(s) { return isSingleton(s) ? s.structure.units.length === 0 : s.structures.length === 0; }\r\n    StructureSelection.isEmpty = isEmpty;\r\n    function structureCount(sel) {\r\n        if (isSingleton(sel))\r\n            return sel.structure.elementCount;\r\n        return sel.structures.length;\r\n    }\r\n    StructureSelection.structureCount = structureCount;\r\n    function unionStructure(sel) {\r\n        if (isEmpty(sel))\r\n            return Structure.Empty;\r\n        if (isSingleton(sel))\r\n            return sel.structure;\r\n        return structureUnion(sel.source, sel.structures);\r\n    }\r\n    StructureSelection.unionStructure = unionStructure;\r\n    /** Convert selection to loci and use \"current structure units\" in Loci elements */\r\n    function toLociWithCurrentUnits(sel) {\r\n        var elements = [];\r\n        var unitMap = sel.source.unitMap;\r\n        for (var _a = 0, _b = unionStructure(sel).units; _a < _b.length; _a++) {\r\n            var unit = _b[_a];\r\n            if (unit === unitMap.get(unit.id)) {\r\n                elements[elements.length] = {\r\n                    unit: unit,\r\n                    indices: OrderedSet.ofBounds(0, unit.elements.length)\r\n                };\r\n            }\r\n            else {\r\n                elements[elements.length] = {\r\n                    unit: unit,\r\n                    indices: OrderedSet.ofSortedArray(SortedArray.indicesOf(unitMap.get(unit.id).elements, unit.elements))\r\n                };\r\n            }\r\n        }\r\n        return StructureElement.Loci(sel.source, elements);\r\n    }\r\n    StructureSelection.toLociWithCurrentUnits = toLociWithCurrentUnits;\r\n    /** use source unit in loci.elements */\r\n    function toLociWithSourceUnits(sel) {\r\n        var elements = [];\r\n        var unitMap = sel.source.unitMap;\r\n        for (var _a = 0, _b = unionStructure(sel).units; _a < _b.length; _a++) {\r\n            var _unit = _b[_a];\r\n            var unit = unitMap.get(_unit.id);\r\n            if (unit === _unit) {\r\n                elements[elements.length] = {\r\n                    unit: unit,\r\n                    indices: OrderedSet.ofBounds(0, unit.elements.length)\r\n                };\r\n            }\r\n            else {\r\n                elements[elements.length] = {\r\n                    unit: unit,\r\n                    indices: OrderedSet.ofSortedArray(SortedArray.indicesOf(unit.elements, _unit.elements))\r\n                };\r\n            }\r\n        }\r\n        return StructureElement.Loci(sel.source, elements);\r\n    }\r\n    StructureSelection.toLociWithSourceUnits = toLociWithSourceUnits;\r\n    function getSelection(source, structures, allSingletons) {\r\n        var len = structures.length;\r\n        if (len === 0)\r\n            return Empty(source);\r\n        if (allSingletons)\r\n            return Singletons(source, structureUnion(source, structures));\r\n        return Sequence(source, structures);\r\n    }\r\n    var LinearBuilderImpl = /** @class */ (function () {\r\n        function LinearBuilderImpl(source) {\r\n            this.source = source;\r\n            this.structures = [];\r\n            this.allSingletons = true;\r\n        }\r\n        LinearBuilderImpl.prototype.add = function (structure) {\r\n            var elementCount = structure.elementCount;\r\n            if (elementCount === 0)\r\n                return;\r\n            this.structures[this.structures.length] = structure;\r\n            if (elementCount !== 1)\r\n                this.allSingletons = false;\r\n        };\r\n        LinearBuilderImpl.prototype.getSelection = function () { return getSelection(this.source, this.structures, this.allSingletons); };\r\n        return LinearBuilderImpl;\r\n    }());\r\n    var HashBuilderImpl = /** @class */ (function () {\r\n        function HashBuilderImpl(structure) {\r\n            this.structure = structure;\r\n            this.structures = [];\r\n            this.allSingletons = true;\r\n            this.uniqueSets = HashSet(Structure.hashCode, Structure.areUnitIdsAndIndicesEqual);\r\n        }\r\n        HashBuilderImpl.prototype.add = function (structure) {\r\n            var atomCount = structure.elementCount;\r\n            if (atomCount === 0 || !this.uniqueSets.add(structure))\r\n                return;\r\n            this.structures[this.structures.length] = structure;\r\n            if (atomCount !== 1)\r\n                this.allSingletons = false;\r\n        };\r\n        HashBuilderImpl.prototype.getSelection = function () { return getSelection(this.structure, this.structures, this.allSingletons); };\r\n        return HashBuilderImpl;\r\n    }());\r\n    function LinearBuilder(structure) { return new LinearBuilderImpl(structure); }\r\n    StructureSelection.LinearBuilder = LinearBuilder;\r\n    function UniqueBuilder(structure) { return new HashBuilderImpl(structure); }\r\n    StructureSelection.UniqueBuilder = UniqueBuilder;\r\n    // TODO: build timeout checking into this?\r\n    function forEach(sel, fn) {\r\n        var idx = 0;\r\n        if (StructureSelection.isSingleton(sel)) {\r\n            for (var _a = 0, _b = sel.structure.units; _a < _b.length; _a++) {\r\n                var unit = _b[_a];\r\n                var elements = unit.elements;\r\n                for (var i = 0, _i = elements.length; i < _i; i++) {\r\n                    // TODO: optimize this somehow???\r\n                    var s = Structure.create([unit.getChild(SortedArray.ofSingleton(elements[i]))], { parent: sel.source });\r\n                    fn(s, idx++);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var _c = 0, _d = sel.structures; _c < _d.length; _c++) {\r\n                var s = _d[_c];\r\n                fn(s, idx++);\r\n            }\r\n        }\r\n    }\r\n    StructureSelection.forEach = forEach;\r\n    function withInputStructure(selection, structure) {\r\n        if (isSingleton(selection))\r\n            return Singletons(structure, selection.structure);\r\n        return Sequence(structure, selection.structures);\r\n    }\r\n    StructureSelection.withInputStructure = withInputStructure;\r\n    // TODO: spatial lookup?\r\n})(StructureSelection || (StructureSelection = {}));\r\nexport { StructureSelection };\r\n//# sourceMappingURL=selection.js.map"]},"metadata":{},"sourceType":"module"}