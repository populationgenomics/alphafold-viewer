{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\nimport { Mat4 } from '../../../mol-math/linear-algebra';\nexport function parseCryst1(id, record) {\n  // COLUMNS       DATA TYPE      CONTENTS\n  // --------------------------------------------------------------------------------\n  //  1 -  6       Record name    \"CRYST1\"\n  //  7 - 15       Real(9.3)      a (Angstroms)\n  // 16 - 24       Real(9.3)      b (Angstroms)\n  // 25 - 33       Real(9.3)      c (Angstroms)\n  // 34 - 40       Real(7.2)      alpha (degrees)\n  // 41 - 47       Real(7.2)      beta (degrees)\n  // 48 - 54       Real(7.2)      gamma (degrees)\n  // 56 - 66       LString        Space group\n  // 67 - 70       Integer        Z value\n  var get = function (s, l) {\n    return (record.substr(s, l) || '').trim();\n  };\n\n  var cell = {\n    entry_id: CifField.ofString(id),\n    length_a: CifField.ofString(get(6, 9)),\n    length_b: CifField.ofString(get(15, 9)),\n    length_c: CifField.ofString(get(24, 9)),\n    angle_alpha: CifField.ofString(get(33, 7)),\n    angle_beta: CifField.ofString(get(40, 7)),\n    angle_gamma: CifField.ofString(get(47, 7)),\n    Z_PDB: CifField.ofString(get(66, 4)),\n    pdbx_unique_axis: CifField.ofString('?')\n  };\n  var symmetry = {\n    entry_id: CifField.ofString(id),\n    'space_group_name_H-M': CifField.ofString(get(55, 11)),\n    Int_Tables_number: CifField.ofString('?'),\n    cell_setting: CifField.ofString('?'),\n    space_group_name_Hall: CifField.ofString('?')\n  };\n  return [CifCategory.ofFields('cell', cell), CifCategory.ofFields('symmetry', symmetry)];\n}\n\nfunction PdbAssembly(id, details) {\n  return {\n    id: id,\n    details: details,\n    groups: []\n  };\n}\n\nexport function parseRemark350(lines, lineStart, lineEnd) {\n  var assemblies = []; // Read the assemblies\n\n  var current,\n      group,\n      matrix,\n      operId = 1,\n      asmId = 1;\n\n  var getLine = function (n) {\n    return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]);\n  };\n\n  for (var i = lineStart; i < lineEnd; i++) {\n    var line = getLine(i);\n\n    if (line.substr(11, 12) === 'BIOMOLECULE:') {\n      var id = line.substr(23).trim();\n      var details = \"Biomolecule \" + id;\n      line = getLine(i + 1);\n\n      if (line.substr(11, 30) !== 'APPLY THE FOLLOWING TO CHAINS:') {\n        i++;\n        details = line.substr(11).trim();\n      }\n\n      current = PdbAssembly(id, details);\n      assemblies.push(current);\n    } else if (line.substr(13, 5) === 'BIOMT') {\n      var biomt = line.split(/\\s+/);\n      var row = parseInt(line[18]) - 1;\n\n      if (row === 0) {\n        matrix = Mat4.identity();\n        group.operators.push({\n          id: operId++,\n          matrix: matrix\n        });\n      }\n\n      Mat4.setValue(matrix, row, 0, parseFloat(biomt[4]));\n      Mat4.setValue(matrix, row, 1, parseFloat(biomt[5]));\n      Mat4.setValue(matrix, row, 2, parseFloat(biomt[6]));\n      Mat4.setValue(matrix, row, 3, parseFloat(biomt[7]));\n    } else if (line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' || line.substr(11, 30) === '                   AND CHAINS:') {\n      if (line.substr(11, 5) === 'APPLY') {\n        group = {\n          chains: [],\n          operators: []\n        };\n        current.groups.push(group);\n      }\n\n      var chainList = line.substr(41, 30).split(',');\n\n      for (var j = 0, jl = chainList.length; j < jl; ++j) {\n        var c = chainList[j].trim();\n        if (c) group.chains.push(c);\n      }\n    } else if (line.substr(11, 33) === 'APPLYING THE FOLLOWING TO CHAINS:') {\n      // variant in older PDB format version\n      current = PdbAssembly(\"\" + asmId, \"Biomolecule \" + asmId);\n      assemblies.push(current);\n      asmId += 1;\n      group = {\n        chains: [],\n        operators: []\n      };\n      current.groups.push(group);\n      i++;\n      line = getLine(i);\n      var chainList = line.substr(11, 69).split(',');\n\n      for (var j = 0, jl = chainList.length; j < jl; ++j) {\n        var c = chainList[j].trim();\n        if (c) group.chains.push(c);\n      }\n    }\n  }\n\n  if (assemblies.length === 0) return []; // Generate CIF\n  // pdbx_struct_assembly\n\n  var pdbx_struct_assembly = {\n    id: CifField.ofStrings(assemblies.map(function (a) {\n      return a.id;\n    })),\n    details: CifField.ofStrings(assemblies.map(function (a) {\n      return a.details;\n    }))\n  }; // pdbx_struct_assembly_gen\n\n  var pdbx_struct_assembly_gen_rows = [];\n\n  for (var _i = 0, assemblies_1 = assemblies; _i < assemblies_1.length; _i++) {\n    var asm = assemblies_1[_i];\n\n    for (var _a = 0, _b = asm.groups; _a < _b.length; _a++) {\n      var group_1 = _b[_a];\n      pdbx_struct_assembly_gen_rows.push({\n        assembly_id: asm.id,\n        oper_expression: group_1.operators.map(function (o) {\n          return o.id;\n        }).join(','),\n        asym_id_list: group_1.chains.join(',')\n      });\n    }\n  }\n\n  var pdbx_struct_assembly_gen = {\n    assembly_id: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) {\n      return r.assembly_id;\n    })),\n    oper_expression: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) {\n      return r.oper_expression;\n    })),\n    asym_id_list: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) {\n      return r.asym_id_list;\n    }))\n  }; // pdbx_struct_oper_list\n\n  var pdbx_struct_oper_list_rows = [];\n\n  for (var _c = 0, assemblies_2 = assemblies; _c < assemblies_2.length; _c++) {\n    var asm = assemblies_2[_c];\n\n    for (var _d = 0, _e = asm.groups; _d < _e.length; _d++) {\n      var group_2 = _e[_d];\n\n      for (var _f = 0, _g = group_2.operators; _f < _g.length; _f++) {\n        var oper = _g[_f];\n        var row = {\n          id: '' + oper.id,\n          type: '?',\n          name: '?',\n          symmetry_operation: '?'\n        };\n\n        for (var i = 0; i < 3; i++) {\n          for (var j = 0; j < 3; j++) {\n            row[\"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\"] = '' + Mat4.getValue(oper.matrix, i, j);\n          }\n\n          row[\"vector[\" + (i + 1) + \"]\"] = '' + Mat4.getValue(oper.matrix, i, 3);\n        }\n\n        pdbx_struct_oper_list_rows.push(row);\n      }\n    }\n  }\n\n  var pdbx_struct_oper_list = {\n    id: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n      return r.id;\n    })),\n    type: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n      return r.type;\n    })),\n    name: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n      return r.name;\n    })),\n    symmetry_operation: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n      return r.symmetry_operation;\n    }))\n  };\n\n  var _loop_1 = function (i) {\n    var _loop_2 = function (j) {\n      var k_1 = \"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\";\n      pdbx_struct_oper_list[k_1] = CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n        return r[k_1];\n      }));\n    };\n\n    for (var j = 0; j < 3; j++) {\n      _loop_2(j);\n    }\n\n    var k = \"vector[\" + (i + 1) + \"]\";\n    pdbx_struct_oper_list[k] = CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) {\n      return r[k];\n    }));\n  };\n\n  for (var i = 0; i < 3; i++) {\n    _loop_1(i);\n  }\n\n  return [CifCategory.ofFields('pdbx_struct_assembly', pdbx_struct_assembly), CifCategory.ofFields('pdbx_struct_assembly_gen', pdbx_struct_assembly_gen), CifCategory.ofFields('pdbx_struct_oper_list', pdbx_struct_oper_list)];\n}\nexport function parseMtrix(lines, lineStart, lineEnd) {\n  var matrices = [];\n  var matrix;\n\n  var getLine = function (n) {\n    return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]);\n  };\n\n  for (var i = lineStart; i < lineEnd; i++) {\n    var line = getLine(i);\n    var ncs = line.split(/\\s+/);\n    var row = parseInt(line[5]) - 1;\n\n    if (row === 0) {\n      matrix = Mat4.identity();\n      matrices.push(matrix);\n    }\n\n    Mat4.setValue(matrix, row, 0, parseFloat(ncs[2]));\n    Mat4.setValue(matrix, row, 1, parseFloat(ncs[3]));\n    Mat4.setValue(matrix, row, 2, parseFloat(ncs[4]));\n    Mat4.setValue(matrix, row, 3, parseFloat(ncs[5]));\n  }\n\n  if (matrices.length === 0) return [];\n  var struct_ncs_oper_rows = [];\n  var id = 1;\n\n  for (var _i = 0, matrices_1 = matrices; _i < matrices_1.length; _i++) {\n    var oper = matrices_1[_i];\n    var row = {\n      id: 'ncsop' + id++,\n      code: '.',\n      details: '.'\n    };\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        row[\"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\"] = '' + Mat4.getValue(oper, i, j);\n      }\n\n      row[\"vector[\" + (i + 1) + \"]\"] = '' + Mat4.getValue(oper, i, 3);\n    }\n\n    struct_ncs_oper_rows.push(row);\n  }\n\n  var struct_ncs_oper = {\n    id: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) {\n      return r.id;\n    })),\n    code: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) {\n      return r.code;\n    })),\n    details: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) {\n      return r.details;\n    }))\n  };\n\n  var _loop_3 = function (i) {\n    var _loop_4 = function (j) {\n      var k_2 = \"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\";\n      struct_ncs_oper[k_2] = CifField.ofStrings(struct_ncs_oper_rows.map(function (r) {\n        return r[k_2];\n      }));\n    };\n\n    for (var j = 0; j < 3; j++) {\n      _loop_4(j);\n    }\n\n    var k = \"vector[\" + (i + 1) + \"]\";\n    struct_ncs_oper[k] = CifField.ofStrings(struct_ncs_oper_rows.map(function (r) {\n      return r[k];\n    }));\n  };\n\n  for (var i = 0; i < 3; i++) {\n    _loop_3(i);\n  }\n\n  return [CifCategory.ofFields('struct_ncs_oper', struct_ncs_oper)];\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/pdb/assembly.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\r\nimport { Mat4 } from '../../../mol-math/linear-algebra';\r\nexport function parseCryst1(id, record) {\r\n    // COLUMNS       DATA TYPE      CONTENTS\r\n    // --------------------------------------------------------------------------------\r\n    //  1 -  6       Record name    \"CRYST1\"\r\n    //  7 - 15       Real(9.3)      a (Angstroms)\r\n    // 16 - 24       Real(9.3)      b (Angstroms)\r\n    // 25 - 33       Real(9.3)      c (Angstroms)\r\n    // 34 - 40       Real(7.2)      alpha (degrees)\r\n    // 41 - 47       Real(7.2)      beta (degrees)\r\n    // 48 - 54       Real(7.2)      gamma (degrees)\r\n    // 56 - 66       LString        Space group\r\n    // 67 - 70       Integer        Z value\r\n    var get = function (s, l) { return (record.substr(s, l) || '').trim(); };\r\n    var cell = {\r\n        entry_id: CifField.ofString(id),\r\n        length_a: CifField.ofString(get(6, 9)),\r\n        length_b: CifField.ofString(get(15, 9)),\r\n        length_c: CifField.ofString(get(24, 9)),\r\n        angle_alpha: CifField.ofString(get(33, 7)),\r\n        angle_beta: CifField.ofString(get(40, 7)),\r\n        angle_gamma: CifField.ofString(get(47, 7)),\r\n        Z_PDB: CifField.ofString(get(66, 4)),\r\n        pdbx_unique_axis: CifField.ofString('?')\r\n    };\r\n    var symmetry = {\r\n        entry_id: CifField.ofString(id),\r\n        'space_group_name_H-M': CifField.ofString(get(55, 11)),\r\n        Int_Tables_number: CifField.ofString('?'),\r\n        cell_setting: CifField.ofString('?'),\r\n        space_group_name_Hall: CifField.ofString('?')\r\n    };\r\n    return [CifCategory.ofFields('cell', cell), CifCategory.ofFields('symmetry', symmetry)];\r\n}\r\nfunction PdbAssembly(id, details) {\r\n    return { id: id, details: details, groups: [] };\r\n}\r\nexport function parseRemark350(lines, lineStart, lineEnd) {\r\n    var assemblies = [];\r\n    // Read the assemblies\r\n    var current, group, matrix, operId = 1, asmId = 1;\r\n    var getLine = function (n) { return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]); };\r\n    for (var i = lineStart; i < lineEnd; i++) {\r\n        var line = getLine(i);\r\n        if (line.substr(11, 12) === 'BIOMOLECULE:') {\r\n            var id = line.substr(23).trim();\r\n            var details = \"Biomolecule \" + id;\r\n            line = getLine(i + 1);\r\n            if (line.substr(11, 30) !== 'APPLY THE FOLLOWING TO CHAINS:') {\r\n                i++;\r\n                details = line.substr(11).trim();\r\n            }\r\n            current = PdbAssembly(id, details);\r\n            assemblies.push(current);\r\n        }\r\n        else if (line.substr(13, 5) === 'BIOMT') {\r\n            var biomt = line.split(/\\s+/);\r\n            var row = parseInt(line[18]) - 1;\r\n            if (row === 0) {\r\n                matrix = Mat4.identity();\r\n                group.operators.push({ id: operId++, matrix: matrix });\r\n            }\r\n            Mat4.setValue(matrix, row, 0, parseFloat(biomt[4]));\r\n            Mat4.setValue(matrix, row, 1, parseFloat(biomt[5]));\r\n            Mat4.setValue(matrix, row, 2, parseFloat(biomt[6]));\r\n            Mat4.setValue(matrix, row, 3, parseFloat(biomt[7]));\r\n        }\r\n        else if (line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' ||\r\n            line.substr(11, 30) === '                   AND CHAINS:') {\r\n            if (line.substr(11, 5) === 'APPLY') {\r\n                group = { chains: [], operators: [] };\r\n                current.groups.push(group);\r\n            }\r\n            var chainList = line.substr(41, 30).split(',');\r\n            for (var j = 0, jl = chainList.length; j < jl; ++j) {\r\n                var c = chainList[j].trim();\r\n                if (c)\r\n                    group.chains.push(c);\r\n            }\r\n        }\r\n        else if (line.substr(11, 33) === 'APPLYING THE FOLLOWING TO CHAINS:') {\r\n            // variant in older PDB format version\r\n            current = PdbAssembly(\"\" + asmId, \"Biomolecule \" + asmId);\r\n            assemblies.push(current);\r\n            asmId += 1;\r\n            group = { chains: [], operators: [] };\r\n            current.groups.push(group);\r\n            i++;\r\n            line = getLine(i);\r\n            var chainList = line.substr(11, 69).split(',');\r\n            for (var j = 0, jl = chainList.length; j < jl; ++j) {\r\n                var c = chainList[j].trim();\r\n                if (c)\r\n                    group.chains.push(c);\r\n            }\r\n        }\r\n    }\r\n    if (assemblies.length === 0)\r\n        return [];\r\n    // Generate CIF\r\n    // pdbx_struct_assembly\r\n    var pdbx_struct_assembly = {\r\n        id: CifField.ofStrings(assemblies.map(function (a) { return a.id; })),\r\n        details: CifField.ofStrings(assemblies.map(function (a) { return a.details; }))\r\n    };\r\n    // pdbx_struct_assembly_gen\r\n    var pdbx_struct_assembly_gen_rows = [];\r\n    for (var _i = 0, assemblies_1 = assemblies; _i < assemblies_1.length; _i++) {\r\n        var asm = assemblies_1[_i];\r\n        for (var _a = 0, _b = asm.groups; _a < _b.length; _a++) {\r\n            var group_1 = _b[_a];\r\n            pdbx_struct_assembly_gen_rows.push({\r\n                assembly_id: asm.id,\r\n                oper_expression: group_1.operators.map(function (o) { return o.id; }).join(','),\r\n                asym_id_list: group_1.chains.join(',')\r\n            });\r\n        }\r\n    }\r\n    var pdbx_struct_assembly_gen = {\r\n        assembly_id: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) { return r.assembly_id; })),\r\n        oper_expression: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) { return r.oper_expression; })),\r\n        asym_id_list: CifField.ofStrings(pdbx_struct_assembly_gen_rows.map(function (r) { return r.asym_id_list; }))\r\n    };\r\n    // pdbx_struct_oper_list\r\n    var pdbx_struct_oper_list_rows = [];\r\n    for (var _c = 0, assemblies_2 = assemblies; _c < assemblies_2.length; _c++) {\r\n        var asm = assemblies_2[_c];\r\n        for (var _d = 0, _e = asm.groups; _d < _e.length; _d++) {\r\n            var group_2 = _e[_d];\r\n            for (var _f = 0, _g = group_2.operators; _f < _g.length; _f++) {\r\n                var oper = _g[_f];\r\n                var row = {\r\n                    id: '' + oper.id,\r\n                    type: '?',\r\n                    name: '?',\r\n                    symmetry_operation: '?'\r\n                };\r\n                for (var i = 0; i < 3; i++) {\r\n                    for (var j = 0; j < 3; j++) {\r\n                        row[\"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\"] = '' + Mat4.getValue(oper.matrix, i, j);\r\n                    }\r\n                    row[\"vector[\" + (i + 1) + \"]\"] = '' + Mat4.getValue(oper.matrix, i, 3);\r\n                }\r\n                pdbx_struct_oper_list_rows.push(row);\r\n            }\r\n        }\r\n    }\r\n    var pdbx_struct_oper_list = {\r\n        id: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r.id; })),\r\n        type: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r.type; })),\r\n        name: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r.name; })),\r\n        symmetry_operation: CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r.symmetry_operation; }))\r\n    };\r\n    var _loop_1 = function (i) {\r\n        var _loop_2 = function (j) {\r\n            var k_1 = \"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\";\r\n            pdbx_struct_oper_list[k_1] = CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r[k_1]; }));\r\n        };\r\n        for (var j = 0; j < 3; j++) {\r\n            _loop_2(j);\r\n        }\r\n        var k = \"vector[\" + (i + 1) + \"]\";\r\n        pdbx_struct_oper_list[k] = CifField.ofStrings(pdbx_struct_oper_list_rows.map(function (r) { return r[k]; }));\r\n    };\r\n    for (var i = 0; i < 3; i++) {\r\n        _loop_1(i);\r\n    }\r\n    return [\r\n        CifCategory.ofFields('pdbx_struct_assembly', pdbx_struct_assembly),\r\n        CifCategory.ofFields('pdbx_struct_assembly_gen', pdbx_struct_assembly_gen),\r\n        CifCategory.ofFields('pdbx_struct_oper_list', pdbx_struct_oper_list)\r\n    ];\r\n}\r\nexport function parseMtrix(lines, lineStart, lineEnd) {\r\n    var matrices = [];\r\n    var matrix;\r\n    var getLine = function (n) { return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]); };\r\n    for (var i = lineStart; i < lineEnd; i++) {\r\n        var line = getLine(i);\r\n        var ncs = line.split(/\\s+/);\r\n        var row = parseInt(line[5]) - 1;\r\n        if (row === 0) {\r\n            matrix = Mat4.identity();\r\n            matrices.push(matrix);\r\n        }\r\n        Mat4.setValue(matrix, row, 0, parseFloat(ncs[2]));\r\n        Mat4.setValue(matrix, row, 1, parseFloat(ncs[3]));\r\n        Mat4.setValue(matrix, row, 2, parseFloat(ncs[4]));\r\n        Mat4.setValue(matrix, row, 3, parseFloat(ncs[5]));\r\n    }\r\n    if (matrices.length === 0)\r\n        return [];\r\n    var struct_ncs_oper_rows = [];\r\n    var id = 1;\r\n    for (var _i = 0, matrices_1 = matrices; _i < matrices_1.length; _i++) {\r\n        var oper = matrices_1[_i];\r\n        var row = {\r\n            id: 'ncsop' + (id++),\r\n            code: '.',\r\n            details: '.'\r\n        };\r\n        for (var i = 0; i < 3; i++) {\r\n            for (var j = 0; j < 3; j++) {\r\n                row[\"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\"] = '' + Mat4.getValue(oper, i, j);\r\n            }\r\n            row[\"vector[\" + (i + 1) + \"]\"] = '' + Mat4.getValue(oper, i, 3);\r\n        }\r\n        struct_ncs_oper_rows.push(row);\r\n    }\r\n    var struct_ncs_oper = {\r\n        id: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) { return r.id; })),\r\n        code: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) { return r.code; })),\r\n        details: CifField.ofStrings(struct_ncs_oper_rows.map(function (r) { return r.details; })),\r\n    };\r\n    var _loop_3 = function (i) {\r\n        var _loop_4 = function (j) {\r\n            var k_2 = \"matrix[\" + (i + 1) + \"][\" + (j + 1) + \"]\";\r\n            struct_ncs_oper[k_2] = CifField.ofStrings(struct_ncs_oper_rows.map(function (r) { return r[k_2]; }));\r\n        };\r\n        for (var j = 0; j < 3; j++) {\r\n            _loop_4(j);\r\n        }\r\n        var k = \"vector[\" + (i + 1) + \"]\";\r\n        struct_ncs_oper[k] = CifField.ofStrings(struct_ncs_oper_rows.map(function (r) { return r[k]; }));\r\n    };\r\n    for (var i = 0; i < 3; i++) {\r\n        _loop_3(i);\r\n    }\r\n    return [CifCategory.ofFields('struct_ncs_oper', struct_ncs_oper)];\r\n}\r\n//# sourceMappingURL=assembly.js.map"]},"metadata":{},"sourceType":"module"}