{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Hcl } from './spaces/hcl';\nimport { Lab } from './spaces/lab';\nexport function Color(hex) {\n  return hex;\n}\n\n(function (Color) {\n  function toStyle(hexColor) {\n    return \"rgb(\" + (hexColor >> 16 & 255) + \", \" + (hexColor >> 8 & 255) + \", \" + (hexColor & 255) + \")\";\n  }\n\n  Color.toStyle = toStyle;\n\n  function toHexString(hexColor) {\n    return '0x' + ('000000' + hexColor.toString(16)).slice(-6);\n  }\n\n  Color.toHexString = toHexString;\n\n  function toRgbString(hexColor) {\n    return \"RGB: \" + Color.toRgb(hexColor).join(', ');\n  }\n\n  Color.toRgbString = toRgbString;\n\n  function toRgb(hexColor) {\n    return [hexColor >> 16 & 255, hexColor >> 8 & 255, hexColor & 255];\n  }\n\n  Color.toRgb = toRgb;\n\n  function toRgbNormalized(hexColor) {\n    return [(hexColor >> 16 & 255) / 255, (hexColor >> 8 & 255) / 255, (hexColor & 255) / 255];\n  }\n\n  Color.toRgbNormalized = toRgbNormalized;\n\n  function fromRgb(r, g, b) {\n    return r << 16 | g << 8 | b;\n  }\n\n  Color.fromRgb = fromRgb;\n\n  function fromNormalizedRgb(r, g, b) {\n    return r * 255 << 16 | g * 255 << 8 | b * 255;\n  }\n\n  Color.fromNormalizedRgb = fromNormalizedRgb;\n\n  function fromArray(array, offset) {\n    return fromRgb(array[offset], array[offset + 1], array[offset + 2]);\n  }\n\n  Color.fromArray = fromArray;\n\n  function fromNormalizedArray(array, offset) {\n    return fromNormalizedRgb(array[offset], array[offset + 1], array[offset + 2]);\n  }\n\n  Color.fromNormalizedArray = fromNormalizedArray;\n  /** Copies hex color to rgb array */\n\n  function toArray(hexColor, array, offset) {\n    array[offset] = hexColor >> 16 & 255;\n    array[offset + 1] = hexColor >> 8 & 255;\n    array[offset + 2] = hexColor & 255;\n    return array;\n  }\n\n  Color.toArray = toArray;\n  /** Copies normalized (0 to 1) hex color to rgb array */\n\n  function toArrayNormalized(hexColor, array, offset) {\n    array[offset] = (hexColor >> 16 & 255) / 255;\n    array[offset + 1] = (hexColor >> 8 & 255) / 255;\n    array[offset + 2] = (hexColor & 255) / 255;\n    return array;\n  }\n\n  Color.toArrayNormalized = toArrayNormalized;\n  /** Copies hex color to rgb vec3 */\n\n  function toVec3(out, hexColor) {\n    out[0] = hexColor >> 16 & 255;\n    out[1] = hexColor >> 8 & 255;\n    out[2] = hexColor & 255;\n    return out;\n  }\n\n  Color.toVec3 = toVec3;\n  /** Copies normalized (0 to 1) hex color to rgb vec3 */\n\n  function toVec3Normalized(out, hexColor) {\n    out[0] = (hexColor >> 16 & 255) / 255;\n    out[1] = (hexColor >> 8 & 255) / 255;\n    out[2] = (hexColor & 255) / 255;\n    return out;\n  }\n\n  Color.toVec3Normalized = toVec3Normalized;\n  /** Linear interpolation between two colors in rgb space */\n\n  function interpolate(c1, c2, t) {\n    var r1 = c1 >> 16 & 255;\n    var g1 = c1 >> 8 & 255;\n    var b1 = c1 & 255;\n    var r2 = c2 >> 16 & 255;\n    var g2 = c2 >> 8 & 255;\n    var b2 = c2 & 255;\n    var r = r1 + (r2 - r1) * t;\n    var g = g1 + (g2 - g1) * t;\n    var b = b1 + (b2 - b1) * t;\n    return r << 16 | g << 8 | b;\n  }\n\n  Color.interpolate = interpolate;\n  var tmpSaturateHcl = [0, 0, 0];\n\n  function saturate(c, amount) {\n    Hcl.fromColor(tmpSaturateHcl, c);\n    return Hcl.toColor(Hcl.saturate(tmpSaturateHcl, tmpSaturateHcl, amount));\n  }\n\n  Color.saturate = saturate;\n\n  function desaturate(c, amount) {\n    return saturate(c, -amount);\n  }\n\n  Color.desaturate = desaturate;\n  var tmpDarkenLab = [0, 0, 0];\n\n  function darken(c, amount) {\n    Lab.fromColor(tmpDarkenLab, c);\n    return Lab.toColor(Lab.darken(tmpDarkenLab, tmpDarkenLab, amount));\n  }\n\n  Color.darken = darken;\n\n  function lighten(c, amount) {\n    return darken(c, -amount);\n  }\n\n  Color.lighten = lighten; //\n\n  function _sRGBToLinear(c) {\n    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n  }\n\n  function sRGBToLinear(c) {\n    return fromNormalizedRgb(_sRGBToLinear((c >> 16 & 255) / 255), _sRGBToLinear((c >> 8 & 255) / 255), _sRGBToLinear((c & 255) / 255));\n  }\n\n  Color.sRGBToLinear = sRGBToLinear;\n\n  function _linearToSRGB(c) {\n    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n  }\n\n  function linearToSRGB(c) {\n    return fromNormalizedRgb(_linearToSRGB((c >> 16 & 255) / 255), _linearToSRGB((c >> 8 & 255) / 255), _linearToSRGB((c & 255) / 255));\n  }\n\n  Color.linearToSRGB = linearToSRGB;\n})(Color || (Color = {}));\n\nexport function ColorList(label, type, description, list) {\n  return {\n    label: label,\n    description: description,\n    list: list,\n    type: type\n  };\n}\nexport function ColorTable(o) {\n  return o;\n}\nexport function ColorMap(o) {\n  return o;\n}\nexport function getAdjustedColorMap(map, saturation, lightness) {\n  var adjustedMap = {};\n\n  for (var e in map) {\n    var c = map[e];\n    c = Color.saturate(c, saturation);\n    c = Color.darken(c, -lightness);\n    adjustedMap[e] = c;\n  }\n\n  return adjustedMap;\n}\nexport function ColorSwatch(l) {\n  return l;\n}","map":{"version":3,"sources":["../../../src/mol-util/color/color.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAIH,SAAS,GAAT,QAAoB,cAApB;AACA,SAAS,GAAT,QAAoB,cAApB;AAKA,OAAM,SAAU,KAAV,CAAgB,GAAhB,EAA2B;AAAI,SAAO,GAAP;AAAsB;;AAE3D,CAAA,UAAiB,KAAjB,EAAsB;AAClB,WAAgB,OAAhB,CAAwB,QAAxB,EAAuC;AACnC,WAAO,UAAO,QAAQ,IAAI,EAAZ,GAAiB,GAAxB,IAA2B,IAA3B,IAAgC,QAAQ,IAAI,CAAZ,GAAgB,GAAhD,IAAmD,IAAnD,IAAwD,QAAQ,GAAG,GAAnE,IAAsE,GAA7E;AACH;;AAFe,EAAA,KAAA,CAAA,OAAA,GAAO,OAAP;;AAIhB,WAAgB,WAAhB,CAA4B,QAA5B,EAA2C;AACvC,WAAO,OAAO,CAAC,WAAW,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAZ,EAAmC,KAAnC,CAAyC,CAAC,CAA1C,CAAd;AACH;;AAFe,EAAA,KAAA,CAAA,WAAA,GAAW,WAAX;;AAIhB,WAAgB,WAAhB,CAA4B,QAA5B,EAA2C;AACvC,WAAO,UAAQ,KAAK,CAAC,KAAN,CAAY,QAAZ,EAAsB,IAAtB,CAA2B,IAA3B,CAAf;AACH;;AAFe,EAAA,KAAA,CAAA,WAAA,GAAW,WAAX;;AAIhB,WAAgB,KAAhB,CAAsB,QAAtB,EAAqC;AACjC,WAAO,CAAC,QAAQ,IAAI,EAAZ,GAAiB,GAAlB,EAAuB,QAAQ,IAAI,CAAZ,GAAgB,GAAvC,EAA4C,QAAQ,GAAG,GAAvD,CAAP;AACH;;AAFe,EAAA,KAAA,CAAA,KAAA,GAAK,KAAL;;AAIhB,WAAgB,eAAhB,CAAgC,QAAhC,EAA+C;AAC3C,WAAO,CAAC,CAAC,QAAQ,IAAI,EAAZ,GAAiB,GAAlB,IAAyB,GAA1B,EAA+B,CAAC,QAAQ,IAAI,CAAZ,GAAgB,GAAjB,IAAwB,GAAvD,EAA4D,CAAC,QAAQ,GAAG,GAAZ,IAAmB,GAA/E,CAAP;AACH;;AAFe,EAAA,KAAA,CAAA,eAAA,GAAe,eAAf;;AAIhB,WAAgB,OAAhB,CAAwB,CAAxB,EAAmC,CAAnC,EAA8C,CAA9C,EAAuD;AACnD,WAAS,CAAC,IAAI,EAAN,GAAa,CAAC,IAAI,CAAlB,GAAuB,CAA/B;AACH;;AAFe,EAAA,KAAA,CAAA,OAAA,GAAO,OAAP;;AAIhB,WAAgB,iBAAhB,CAAkC,CAAlC,EAA6C,CAA7C,EAAwD,CAAxD,EAAiE;AAC7D,WAAU,CAAC,GAAG,GAAL,IAAa,EAAd,GAAsB,CAAC,GAAG,GAAL,IAAa,CAAlC,GAAwC,CAAC,GAAG,GAApD;AACH;;AAFe,EAAA,KAAA,CAAA,iBAAA,GAAiB,iBAAjB;;AAIhB,WAAgB,SAAhB,CAA0B,KAA1B,EAA8C,MAA9C,EAA4D;AACxD,WAAO,OAAO,CAAC,KAAK,CAAC,MAAD,CAAN,EAAgB,KAAK,CAAC,MAAM,GAAG,CAAV,CAArB,EAAmC,KAAK,CAAC,MAAM,GAAG,CAAV,CAAxC,CAAd;AACH;;AAFe,EAAA,KAAA,CAAA,SAAA,GAAS,SAAT;;AAIhB,WAAgB,mBAAhB,CAAoC,KAApC,EAAwD,MAAxD,EAAsE;AAClE,WAAO,iBAAiB,CAAC,KAAK,CAAC,MAAD,CAAN,EAAgB,KAAK,CAAC,MAAM,GAAG,CAAV,CAArB,EAAmC,KAAK,CAAC,MAAM,GAAG,CAAV,CAAxC,CAAxB;AACH;;AAFe,EAAA,KAAA,CAAA,mBAAA,GAAmB,mBAAnB;AAIhB;;AACA,WAAgB,OAAhB,CAAwB,QAAxB,EAAyC,KAAzC,EAA6D,MAA7D,EAA2E;AACvE,IAAA,KAAK,CAAC,MAAD,CAAL,GAAiB,QAAQ,IAAI,EAAZ,GAAiB,GAAlC;AACA,IAAA,KAAK,CAAC,MAAM,GAAG,CAAV,CAAL,GAAqB,QAAQ,IAAI,CAAZ,GAAgB,GAArC;AACA,IAAA,KAAK,CAAC,MAAM,GAAG,CAAV,CAAL,GAAqB,QAAQ,GAAG,GAAhC;AACA,WAAO,KAAP;AACH;;AALe,EAAA,KAAA,CAAA,OAAA,GAAO,OAAP;AAOhB;;AACA,WAAgB,iBAAhB,CAAyD,QAAzD,EAA0E,KAA1E,EAAoF,MAApF,EAAkG;AAC9F,IAAA,KAAK,CAAC,MAAD,CAAL,GAAgB,CAAC,QAAQ,IAAI,EAAZ,GAAiB,GAAlB,IAAyB,GAAzC;AACA,IAAA,KAAK,CAAC,MAAM,GAAG,CAAV,CAAL,GAAoB,CAAC,QAAQ,IAAI,CAAZ,GAAgB,GAAjB,IAAwB,GAA5C;AACA,IAAA,KAAK,CAAC,MAAM,GAAG,CAAV,CAAL,GAAoB,CAAC,QAAQ,GAAG,GAAZ,IAAmB,GAAvC;AACA,WAAO,KAAP;AACH;;AALe,EAAA,KAAA,CAAA,iBAAA,GAAiB,iBAAjB;AAOhB;;AACA,WAAgB,MAAhB,CAAuB,GAAvB,EAAkC,QAAlC,EAAiD;AAC7C,IAAA,GAAG,CAAC,CAAD,CAAH,GAAU,QAAQ,IAAI,EAAZ,GAAiB,GAA3B;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAU,QAAQ,IAAI,CAAZ,GAAgB,GAA1B;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAU,QAAQ,GAAG,GAArB;AACA,WAAO,GAAP;AACH;;AALe,EAAA,KAAA,CAAA,MAAA,GAAM,MAAN;AAOhB;;AACA,WAAgB,gBAAhB,CAAiC,GAAjC,EAA4C,QAA5C,EAA2D;AACvD,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,QAAQ,IAAI,EAAZ,GAAiB,GAAlB,IAAyB,GAAlC;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,QAAQ,IAAI,CAAZ,GAAgB,GAAjB,IAAwB,GAAjC;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,QAAQ,GAAG,GAAZ,IAAmB,GAA5B;AACA,WAAO,GAAP;AACH;;AALe,EAAA,KAAA,CAAA,gBAAA,GAAgB,gBAAhB;AAOhB;;AACA,WAAgB,WAAhB,CAA4B,EAA5B,EAAuC,EAAvC,EAAkD,CAAlD,EAA2D;AACvD,QAAM,EAAE,GAAG,EAAE,IAAI,EAAN,GAAW,GAAtB;AACA,QAAM,EAAE,GAAG,EAAE,IAAI,CAAN,GAAU,GAArB;AACA,QAAM,EAAE,GAAG,EAAE,GAAG,GAAhB;AACA,QAAM,EAAE,GAAG,EAAE,IAAI,EAAN,GAAW,GAAtB;AACA,QAAM,EAAE,GAAG,EAAE,IAAI,CAAN,GAAU,GAArB;AACA,QAAM,EAAE,GAAG,EAAE,GAAG,GAAhB;AAEA,QAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAN,IAAY,CAA3B;AACA,QAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAN,IAAY,CAA3B;AACA,QAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAN,IAAY,CAA3B;AAEA,WAAS,CAAC,IAAI,EAAN,GAAa,CAAC,IAAI,CAAlB,GAAuB,CAA/B;AACH;;AAbe,EAAA,KAAA,CAAA,WAAA,GAAW,WAAX;AAehB,MAAM,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AACA,WAAgB,QAAhB,CAAyB,CAAzB,EAAmC,MAAnC,EAAiD;AAC7C,IAAA,GAAG,CAAC,SAAJ,CAAc,cAAd,EAA8B,CAA9B;AACA,WAAO,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,QAAJ,CAAa,cAAb,EAA6B,cAA7B,EAA6C,MAA7C,CAAZ,CAAP;AACH;;AAHe,EAAA,KAAA,CAAA,QAAA,GAAQ,QAAR;;AAKhB,WAAgB,UAAhB,CAA2B,CAA3B,EAAqC,MAArC,EAAmD;AAC/C,WAAO,QAAQ,CAAC,CAAD,EAAI,CAAC,MAAL,CAAf;AACH;;AAFe,EAAA,KAAA,CAAA,UAAA,GAAU,UAAV;AAIhB,MAAM,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB;;AACA,WAAgB,MAAhB,CAAuB,CAAvB,EAAiC,MAAjC,EAA+C;AAC3C,IAAA,GAAG,CAAC,SAAJ,CAAc,YAAd,EAA4B,CAA5B;AACA,WAAO,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,MAAJ,CAAW,YAAX,EAAyB,YAAzB,EAAuC,MAAvC,CAAZ,CAAP;AACH;;AAHe,EAAA,KAAA,CAAA,MAAA,GAAM,MAAN;;AAKhB,WAAgB,OAAhB,CAAwB,CAAxB,EAAkC,MAAlC,EAAgD;AAC5C,WAAO,MAAM,CAAC,CAAD,EAAI,CAAC,MAAL,CAAb;AACH;;AAFe,EAAA,KAAA,CAAA,OAAA,GAAO,OAAP,CArGE,CAyGlB;;AAEA,WAAS,aAAT,CAAuB,CAAvB,EAAgC;AAC5B,WAAQ,CAAC,GAAG,OAAL,GAAgB,CAAC,GAAG,YAApB,GAAmC,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,YAAJ,GAAmB,YAA5B,EAA0C,GAA1C,CAA1C;AACH;;AAED,WAAgB,YAAhB,CAA6B,CAA7B,EAAqC;AACjC,WAAO,iBAAiB,CACpB,aAAa,CAAC,CAAC,CAAC,IAAI,EAAL,GAAU,GAAX,IAAkB,GAAnB,CADO,EAEpB,aAAa,CAAC,CAAC,CAAC,IAAI,CAAL,GAAS,GAAV,IAAiB,GAAlB,CAFO,EAGpB,aAAa,CAAC,CAAC,CAAC,GAAG,GAAL,IAAY,GAAb,CAHO,CAAxB;AAKH;;AANe,EAAA,KAAA,CAAA,YAAA,GAAY,YAAZ;;AAQhB,WAAS,aAAT,CAAuB,CAAvB,EAAgC;AAC5B,WAAQ,CAAC,GAAG,SAAL,GAAkB,CAAC,GAAG,KAAtB,GAA8B,QAAS,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,OAAZ,CAAT,GAAiC,KAAtE;AACH;;AAED,WAAgB,YAAhB,CAA6B,CAA7B,EAAqC;AACjC,WAAO,iBAAiB,CACpB,aAAa,CAAC,CAAC,CAAC,IAAI,EAAL,GAAU,GAAX,IAAkB,GAAnB,CADO,EAEpB,aAAa,CAAC,CAAC,CAAC,IAAI,CAAL,GAAS,GAAV,IAAiB,GAAlB,CAFO,EAGpB,aAAa,CAAC,CAAC,CAAC,GAAG,GAAL,IAAY,GAAb,CAHO,CAAxB;AAKH;;AANe,EAAA,KAAA,CAAA,YAAA,GAAY,YAAZ;AAOnB,CAlID,EAAiB,KAAK,KAAL,KAAK,GAAA,EAAA,CAAtB;;AA4IA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAmC,IAAnC,EAAqF,WAArF,EAA0G,IAA1G,EAA6I;AAC/I,SAAO;AAAE,IAAA,KAAK,EAAA,KAAP;AAAS,IAAA,WAAW,EAAA,WAApB;AAAsB,IAAA,IAAI,EAAE,IAA5B;AAA6C,IAAA,IAAI,EAAA;AAAjD,GAAP;AACH;AAGD,OAAM,SAAU,UAAV,CAA0D,CAA1D,EAA8D;AAAI,SAAO,CAAP;AAAuC;AAG/G,OAAM,SAAU,QAAV,CAAsD,CAAtD,EAA0D;AAAI,SAAO,CAAP;AAAqC;AACzG,OAAM,SAAU,mBAAV,CAAiE,GAAjE,EAAmF,UAAnF,EAAuG,SAAvG,EAAwH;AAC1H,MAAM,WAAW,GAA2B,EAA5C;;AACA,OAAK,IAAM,CAAX,IAAgB,GAAhB,EAAqB;AACjB,QAAI,CAAC,GAAG,GAAG,CAAC,CAAD,CAAX;AACA,IAAA,CAAC,GAAG,KAAK,CAAC,QAAN,CAAe,CAAf,EAAkB,UAAlB,CAAJ;AACA,IAAA,CAAC,GAAG,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,CAAC,SAAjB,CAAJ;AACA,IAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACH;;AACD,SAAO,WAAP;AACH;AAGD,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAA2C;AAAI,SAAO,CAAP;AAAqC","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Hcl } from './spaces/hcl';\r\nimport { Lab } from './spaces/lab';\r\nexport function Color(hex) { return hex; }\r\n(function (Color) {\r\n    function toStyle(hexColor) {\r\n        return \"rgb(\" + (hexColor >> 16 & 255) + \", \" + (hexColor >> 8 & 255) + \", \" + (hexColor & 255) + \")\";\r\n    }\r\n    Color.toStyle = toStyle;\r\n    function toHexString(hexColor) {\r\n        return '0x' + ('000000' + hexColor.toString(16)).slice(-6);\r\n    }\r\n    Color.toHexString = toHexString;\r\n    function toRgbString(hexColor) {\r\n        return \"RGB: \" + Color.toRgb(hexColor).join(', ');\r\n    }\r\n    Color.toRgbString = toRgbString;\r\n    function toRgb(hexColor) {\r\n        return [hexColor >> 16 & 255, hexColor >> 8 & 255, hexColor & 255];\r\n    }\r\n    Color.toRgb = toRgb;\r\n    function toRgbNormalized(hexColor) {\r\n        return [(hexColor >> 16 & 255) / 255, (hexColor >> 8 & 255) / 255, (hexColor & 255) / 255];\r\n    }\r\n    Color.toRgbNormalized = toRgbNormalized;\r\n    function fromRgb(r, g, b) {\r\n        return ((r << 16) | (g << 8) | b);\r\n    }\r\n    Color.fromRgb = fromRgb;\r\n    function fromNormalizedRgb(r, g, b) {\r\n        return (((r * 255) << 16) | ((g * 255) << 8) | (b * 255));\r\n    }\r\n    Color.fromNormalizedRgb = fromNormalizedRgb;\r\n    function fromArray(array, offset) {\r\n        return fromRgb(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n    Color.fromArray = fromArray;\r\n    function fromNormalizedArray(array, offset) {\r\n        return fromNormalizedRgb(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n    Color.fromNormalizedArray = fromNormalizedArray;\r\n    /** Copies hex color to rgb array */\r\n    function toArray(hexColor, array, offset) {\r\n        array[offset] = (hexColor >> 16 & 255);\r\n        array[offset + 1] = (hexColor >> 8 & 255);\r\n        array[offset + 2] = (hexColor & 255);\r\n        return array;\r\n    }\r\n    Color.toArray = toArray;\r\n    /** Copies normalized (0 to 1) hex color to rgb array */\r\n    function toArrayNormalized(hexColor, array, offset) {\r\n        array[offset] = (hexColor >> 16 & 255) / 255;\r\n        array[offset + 1] = (hexColor >> 8 & 255) / 255;\r\n        array[offset + 2] = (hexColor & 255) / 255;\r\n        return array;\r\n    }\r\n    Color.toArrayNormalized = toArrayNormalized;\r\n    /** Copies hex color to rgb vec3 */\r\n    function toVec3(out, hexColor) {\r\n        out[0] = (hexColor >> 16 & 255);\r\n        out[1] = (hexColor >> 8 & 255);\r\n        out[2] = (hexColor & 255);\r\n        return out;\r\n    }\r\n    Color.toVec3 = toVec3;\r\n    /** Copies normalized (0 to 1) hex color to rgb vec3 */\r\n    function toVec3Normalized(out, hexColor) {\r\n        out[0] = (hexColor >> 16 & 255) / 255;\r\n        out[1] = (hexColor >> 8 & 255) / 255;\r\n        out[2] = (hexColor & 255) / 255;\r\n        return out;\r\n    }\r\n    Color.toVec3Normalized = toVec3Normalized;\r\n    /** Linear interpolation between two colors in rgb space */\r\n    function interpolate(c1, c2, t) {\r\n        var r1 = c1 >> 16 & 255;\r\n        var g1 = c1 >> 8 & 255;\r\n        var b1 = c1 & 255;\r\n        var r2 = c2 >> 16 & 255;\r\n        var g2 = c2 >> 8 & 255;\r\n        var b2 = c2 & 255;\r\n        var r = r1 + (r2 - r1) * t;\r\n        var g = g1 + (g2 - g1) * t;\r\n        var b = b1 + (b2 - b1) * t;\r\n        return ((r << 16) | (g << 8) | b);\r\n    }\r\n    Color.interpolate = interpolate;\r\n    var tmpSaturateHcl = [0, 0, 0];\r\n    function saturate(c, amount) {\r\n        Hcl.fromColor(tmpSaturateHcl, c);\r\n        return Hcl.toColor(Hcl.saturate(tmpSaturateHcl, tmpSaturateHcl, amount));\r\n    }\r\n    Color.saturate = saturate;\r\n    function desaturate(c, amount) {\r\n        return saturate(c, -amount);\r\n    }\r\n    Color.desaturate = desaturate;\r\n    var tmpDarkenLab = [0, 0, 0];\r\n    function darken(c, amount) {\r\n        Lab.fromColor(tmpDarkenLab, c);\r\n        return Lab.toColor(Lab.darken(tmpDarkenLab, tmpDarkenLab, amount));\r\n    }\r\n    Color.darken = darken;\r\n    function lighten(c, amount) {\r\n        return darken(c, -amount);\r\n    }\r\n    Color.lighten = lighten;\r\n    //\r\n    function _sRGBToLinear(c) {\r\n        return (c < 0.04045) ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\r\n    }\r\n    function sRGBToLinear(c) {\r\n        return fromNormalizedRgb(_sRGBToLinear((c >> 16 & 255) / 255), _sRGBToLinear((c >> 8 & 255) / 255), _sRGBToLinear((c & 255) / 255));\r\n    }\r\n    Color.sRGBToLinear = sRGBToLinear;\r\n    function _linearToSRGB(c) {\r\n        return (c < 0.0031308) ? c * 12.92 : 1.055 * (Math.pow(c, 0.41666)) - 0.055;\r\n    }\r\n    function linearToSRGB(c) {\r\n        return fromNormalizedRgb(_linearToSRGB((c >> 16 & 255) / 255), _linearToSRGB((c >> 8 & 255) / 255), _linearToSRGB((c & 255) / 255));\r\n    }\r\n    Color.linearToSRGB = linearToSRGB;\r\n})(Color || (Color = {}));\r\nexport function ColorList(label, type, description, list) {\r\n    return { label: label, description: description, list: list, type: type };\r\n}\r\nexport function ColorTable(o) { return o; }\r\nexport function ColorMap(o) { return o; }\r\nexport function getAdjustedColorMap(map, saturation, lightness) {\r\n    var adjustedMap = {};\r\n    for (var e in map) {\r\n        var c = map[e];\r\n        c = Color.saturate(c, saturation);\r\n        c = Color.darken(c, -lightness);\r\n        adjustedMap[e] = c;\r\n    }\r\n    return adjustedMap;\r\n}\r\nexport function ColorSwatch(l) { return l; }\r\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}