{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column } from '../../../mol-data/db';\nimport { Task } from '../../../mol-task';\nimport { Tokenizer } from '../common/text/tokenizer';\nimport { ReaderResult as Result } from '../result';\n\nfunction handleMolecule(tokenizer) {\n  var count = tokenizer.position >= tokenizer.data.length - 1 ? 0 : +Tokenizer.readLine(tokenizer);\n  if (isNaN(count)) count = 0;\n  var comment = Tokenizer.readLine(tokenizer);\n  var x = new Float64Array(count);\n  var y = new Float64Array(count);\n  var z = new Float64Array(count);\n  var type_symbol = new Array(count);\n\n  for (var i = 0; i < count; ++i) {\n    var line = Tokenizer.readLineTrim(tokenizer);\n    var fields = line.split(/\\s+/g);\n    type_symbol[i] = fields[0];\n    x[i] = +fields[1];\n    y[i] = +fields[2];\n    z[i] = +fields[3];\n  }\n\n  return {\n    count: count,\n    comment: comment,\n    x: Column.ofFloatArray(x),\n    y: Column.ofFloatArray(y),\n    z: Column.ofFloatArray(z),\n    type_symbol: Column.ofStringArray(type_symbol)\n  };\n}\n\nfunction parseInternal(data) {\n  var tokenizer = Tokenizer(data);\n  var molecules = [];\n\n  while (true) {\n    var mol = handleMolecule(tokenizer);\n    if (mol.count === 0) break;\n    molecules.push(mol);\n  }\n\n  var result = {\n    molecules: molecules\n  };\n  return Result.success(result);\n}\n\nexport function parseXyz(data) {\n  var _this = this;\n\n  return Task.create('Parse Mol', function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , parseInternal(data)];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/xyz/parser.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,IAAT,QAAqB,mBAArB;AACA,SAAS,SAAT,QAA0B,0BAA1B;AACA,SAAS,YAAY,IAAI,MAAzB,QAAuC,WAAvC;;AAaA,SAAS,cAAT,CAAwB,SAAxB,EAA4C;AACxC,MAAI,KAAK,GAAG,SAAS,CAAC,QAAV,IAAsB,SAAS,CAAC,IAAV,CAAe,MAAf,GAAwB,CAA9C,GAAkD,CAAlD,GAAsD,CAAC,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAnE;AACA,MAAI,KAAK,CAAC,KAAD,CAAT,EAAkB,KAAK,GAAG,CAAR;AAElB,MAAM,OAAO,GAAG,SAAS,CAAC,QAAV,CAAmB,SAAnB,CAAhB;AAEA,MAAM,CAAC,GAAG,IAAI,YAAJ,CAAiB,KAAjB,CAAV;AACA,MAAM,CAAC,GAAG,IAAI,YAAJ,CAAiB,KAAjB,CAAV;AACA,MAAM,CAAC,GAAG,IAAI,YAAJ,CAAiB,KAAjB,CAAV;AACA,MAAM,WAAW,GAAG,IAAI,KAAJ,CAAkB,KAAlB,CAApB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;AAC5B,QAAM,IAAI,GAAG,SAAS,CAAC,YAAV,CAAuB,SAAvB,CAAb;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,CAAf;AACA,IAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,MAAM,CAAC,CAAD,CAAvB;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,MAAM,CAAC,CAAD,CAAd;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,MAAM,CAAC,CAAD,CAAd;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,MAAM,CAAC,CAAD,CAAd;AACH;;AAED,SAAO;AACH,IAAA,KAAK,EAAA,KADF;AAEH,IAAA,OAAO,EAAA,OAFJ;AAGH,IAAA,CAAC,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CAHA;AAIH,IAAA,CAAC,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CAJA;AAKH,IAAA,CAAC,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CALA;AAMH,IAAA,WAAW,EAAE,MAAM,CAAC,aAAP,CAAqB,WAArB;AANV,GAAP;AAQH;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAAmC;AAC/B,MAAM,SAAS,GAAG,SAAS,CAAC,IAAD,CAA3B;AAEA,MAAM,SAAS,GAAyB,EAAxC;;AACA,SAAO,IAAP,EAAa;AACT,QAAM,GAAG,GAAG,cAAc,CAAC,SAAD,CAA1B;AACA,QAAI,GAAG,CAAC,KAAJ,KAAc,CAAlB,EAAqB;AACrB,IAAA,SAAS,CAAC,IAAV,CAAe,GAAf;AACH;;AAED,MAAM,MAAM,GAAY;AAAE,IAAA,SAAS,EAAA;AAAX,GAAxB;AACA,SAAO,MAAM,CAAC,OAAP,CAAe,MAAf,CAAP;AACH;;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA+B;AAArC,MAAA,KAAA,GAAA,IAAA;;AACI,SAAO,IAAI,CAAC,MAAL,CAA6B,WAA7B,EAA0C,YAAA;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AAC7C,eAAA,CAAA;AAAA;AAAA,UAAO,aAAa,CAAC,IAAD,CAApB,CAAA;;KAD6C,CAAA;AAEhD,GAFM,CAAP;AAGH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column } from '../../../mol-data/db';\r\nimport { Task } from '../../../mol-task';\r\nimport { Tokenizer } from '../common/text/tokenizer';\r\nimport { ReaderResult as Result } from '../result';\r\nfunction handleMolecule(tokenizer) {\r\n    var count = tokenizer.position >= tokenizer.data.length - 1 ? 0 : +Tokenizer.readLine(tokenizer);\r\n    if (isNaN(count))\r\n        count = 0;\r\n    var comment = Tokenizer.readLine(tokenizer);\r\n    var x = new Float64Array(count);\r\n    var y = new Float64Array(count);\r\n    var z = new Float64Array(count);\r\n    var type_symbol = new Array(count);\r\n    for (var i = 0; i < count; ++i) {\r\n        var line = Tokenizer.readLineTrim(tokenizer);\r\n        var fields = line.split(/\\s+/g);\r\n        type_symbol[i] = fields[0];\r\n        x[i] = +fields[1];\r\n        y[i] = +fields[2];\r\n        z[i] = +fields[3];\r\n    }\r\n    return {\r\n        count: count,\r\n        comment: comment,\r\n        x: Column.ofFloatArray(x),\r\n        y: Column.ofFloatArray(y),\r\n        z: Column.ofFloatArray(z),\r\n        type_symbol: Column.ofStringArray(type_symbol)\r\n    };\r\n}\r\nfunction parseInternal(data) {\r\n    var tokenizer = Tokenizer(data);\r\n    var molecules = [];\r\n    while (true) {\r\n        var mol = handleMolecule(tokenizer);\r\n        if (mol.count === 0)\r\n            break;\r\n        molecules.push(mol);\r\n    }\r\n    var result = { molecules: molecules };\r\n    return Result.success(result);\r\n}\r\nexport function parseXyz(data) {\r\n    var _this = this;\r\n    return Task.create('Parse Mol', function () { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, parseInternal(data)];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}