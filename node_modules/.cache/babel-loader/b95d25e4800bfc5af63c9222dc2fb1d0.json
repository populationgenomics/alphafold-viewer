{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Table, Column } from '../../../mol-data/db';\nimport { WaterNames, PolymerNames } from '../../../mol-model/structure/model/types';\nimport { SetUtils } from '../../../mol-util/set';\nimport { BasicSchema } from '../basic/schema';\nvar ProteinAtomIdsList = [new Set(['CA']), new Set(['C']), new Set(['N'])];\nvar RnaAtomIdsList = [new Set(['P', 'O3\\'', 'O3*']), new Set(['C4\\'', 'C4*']), new Set(['O2\\'', 'O2*', 'F2\\'', 'F2*'])];\nvar DnaAtomIdsList = [new Set(['P', 'O3\\'', 'O3*']), new Set(['C3\\'', 'C3*']), new Set(['O2\\'', 'O2*', 'F2\\'', 'F2*'])];\n/** Used to reduce false positives for atom name-based type guessing */\n\nvar NonPolymerNames = new Set(['FMN', 'NCN', 'FNS', 'FMA' // Mononucleotides\n]);\n\nvar StandardComponents = function () {\n  var map = new Map();\n  var components = [{\n    id: 'HIS',\n    name: 'HISTIDINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'ARG',\n    name: 'ARGININE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'LYS',\n    name: 'LYSINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'ILE',\n    name: 'ISOLEUCINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'PHE',\n    name: 'PHENYLALANINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'LEU',\n    name: 'LEUCINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'TRP',\n    name: 'TRYPTOPHAN',\n    type: 'L-peptide linking'\n  }, {\n    id: 'ALA',\n    name: 'ALANINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'MET',\n    name: 'METHIONINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'CYS',\n    name: 'CYSTEINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'ASN',\n    name: 'ASPARAGINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'VAL',\n    name: 'VALINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'GLY',\n    name: 'GLYCINE',\n    type: 'peptide linking'\n  }, {\n    id: 'SER',\n    name: 'SERINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'GLN',\n    name: 'GLUTAMINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'TYR',\n    name: 'TYROSINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'ASP',\n    name: 'ASPARTIC ACID',\n    type: 'L-peptide linking'\n  }, {\n    id: 'GLU',\n    name: 'GLUTAMIC ACID',\n    type: 'L-peptide linking'\n  }, {\n    id: 'THR',\n    name: 'THREONINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'PRO',\n    name: 'PROLINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'SEC',\n    name: 'SELENOCYSTEINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'PYL',\n    name: 'PYRROLYSINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'MSE',\n    name: 'SELENOMETHIONINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'SEP',\n    name: 'PHOSPHOSERINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'TPO',\n    name: 'PHOSPHOTHREONINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'PTR',\n    name: 'O-PHOSPHOTYROSINE',\n    type: 'L-peptide linking'\n  }, {\n    id: 'PCA',\n    name: 'PYROGLUTAMIC ACID',\n    type: 'L-peptide linking'\n  }, {\n    id: 'A',\n    name: 'ADENOSINE-5\\'-MONOPHOSPHATE',\n    type: 'RNA linking'\n  }, {\n    id: 'C',\n    name: 'CYTIDINE-5\\'-MONOPHOSPHATE',\n    type: 'RNA linking'\n  }, {\n    id: 'T',\n    name: 'THYMIDINE-5\\'-MONOPHOSPHATE',\n    type: 'RNA linking'\n  }, {\n    id: 'G',\n    name: 'GUANOSINE-5\\'-MONOPHOSPHATE',\n    type: 'RNA linking'\n  }, {\n    id: 'I',\n    name: 'INOSINIC ACID',\n    type: 'RNA linking'\n  }, {\n    id: 'U',\n    name: 'URIDINE-5\\'-MONOPHOSPHATE',\n    type: 'RNA linking'\n  }, {\n    id: 'DA',\n    name: '2\\'-DEOXYADENOSINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }, {\n    id: 'DC',\n    name: '2\\'-DEOXYCYTIDINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }, {\n    id: 'DT',\n    name: 'THYMIDINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }, {\n    id: 'DG',\n    name: '2\\'-DEOXYGUANOSINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }, {\n    id: 'DI',\n    name: '2\\'-DEOXYINOSINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }, {\n    id: 'DU',\n    name: '2\\'-DEOXYURIDINE-5\\'-MONOPHOSPHATE',\n    type: 'DNA linking'\n  }];\n  components.forEach(function (c) {\n    return map.set(c.id, c);\n  });\n  return map;\n}();\n\nvar CharmmIonComponents = function () {\n  var map = new Map();\n  var components = [{\n    id: 'ZN2',\n    name: 'ZINC ION',\n    type: 'Ion'\n  }, {\n    id: 'SOD',\n    name: 'SODIUM ION',\n    type: 'Ion'\n  }, {\n    id: 'CES',\n    name: 'CESIUM ION',\n    type: 'Ion'\n  }, {\n    id: 'CLA',\n    name: 'CHLORIDE ION',\n    type: 'Ion'\n  }, {\n    id: 'CAL',\n    name: 'CALCIUM ION',\n    type: 'Ion'\n  }, {\n    id: 'POT',\n    name: 'POTASSIUM ION',\n    type: 'Ion'\n  }];\n  components.forEach(function (c) {\n    return map.set(c.id, c);\n  });\n  return map;\n}();\n\nvar ComponentBuilder =\n/** @class */\nfunction () {\n  function ComponentBuilder(seqId, atomId) {\n    this.seqId = seqId;\n    this.atomId = atomId;\n    this.namesMap = new Map();\n    this.comps = new Map();\n    this.ids = [];\n    this.names = [];\n    this.types = [];\n    this.mon_nstd_flags = [];\n  }\n\n  ComponentBuilder.prototype.set = function (c) {\n    this.comps.set(c.id, c);\n    this.ids.push(c.id);\n    this.names.push(c.name);\n    this.types.push(c.type);\n    this.mon_nstd_flags.push(PolymerNames.has(c.id) ? 'y' : 'n');\n  };\n\n  ComponentBuilder.prototype.getAtomIds = function (index) {\n    var atomIds = new Set();\n    var prevSeqId = this.seqId.value(index);\n\n    while (index < this.seqId.rowCount) {\n      var seqId = this.seqId.value(index);\n      if (seqId !== prevSeqId) break;\n      atomIds.add(this.atomId.value(index));\n      prevSeqId - seqId;\n      index += 1;\n    }\n\n    return atomIds;\n  };\n\n  ComponentBuilder.prototype.hasAtomIds = function (atomIds, atomIdsList) {\n    for (var i = 0, il = atomIdsList.length; i < il; ++i) {\n      if (!SetUtils.areIntersecting(atomIds, atomIdsList[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ComponentBuilder.prototype.getType = function (atomIds) {\n    if (this.hasAtomIds(atomIds, ProteinAtomIdsList)) {\n      return 'peptide linking';\n    } else if (this.hasAtomIds(atomIds, RnaAtomIdsList)) {\n      return 'RNA linking';\n    } else if (this.hasAtomIds(atomIds, DnaAtomIdsList)) {\n      return 'DNA linking';\n    } else {\n      return 'other';\n    }\n  };\n\n  ComponentBuilder.prototype.has = function (compId) {\n    return this.comps.has(compId);\n  };\n\n  ComponentBuilder.prototype.get = function (compId) {\n    return this.comps.get(compId);\n  };\n\n  ComponentBuilder.prototype.add = function (compId, index) {\n    if (!this.has(compId)) {\n      if (StandardComponents.has(compId)) {\n        this.set(StandardComponents.get(compId));\n      } else if (WaterNames.has(compId)) {\n        this.set({\n          id: compId,\n          name: 'WATER',\n          type: 'non-polymer'\n        });\n      } else if (NonPolymerNames.has(compId)) {\n        this.set({\n          id: compId,\n          name: this.namesMap.get(compId) || compId,\n          type: 'non-polymer'\n        });\n      } else {\n        var atomIds = this.getAtomIds(index);\n\n        if (atomIds.size === 1 && CharmmIonComponents.has(compId)) {\n          this.set(CharmmIonComponents.get(compId));\n        } else {\n          var type = this.getType(atomIds);\n          this.set({\n            id: compId,\n            name: this.namesMap.get(compId) || compId,\n            type: type\n          });\n        }\n      }\n    }\n\n    return this.get(compId);\n  };\n\n  ComponentBuilder.prototype.getChemCompTable = function () {\n    return Table.ofPartialColumns(BasicSchema.chem_comp, {\n      id: Column.ofStringArray(this.ids),\n      name: Column.ofStringArray(this.names),\n      type: Column.ofStringAliasArray(this.types),\n      mon_nstd_flag: Column.ofStringAliasArray(this.mon_nstd_flags)\n    }, this.ids.length);\n  };\n\n  ComponentBuilder.prototype.setNames = function (names) {\n    var _this = this;\n\n    names.forEach(function (n) {\n      return _this.namesMap.set(n[0], n[1]);\n    });\n  };\n\n  return ComponentBuilder;\n}();\n\nexport { ComponentBuilder };","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/common/component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Table, Column } from '../../../mol-data/db';\r\nimport { WaterNames, PolymerNames } from '../../../mol-model/structure/model/types';\r\nimport { SetUtils } from '../../../mol-util/set';\r\nimport { BasicSchema } from '../basic/schema';\r\nvar ProteinAtomIdsList = [\r\n    new Set(['CA']),\r\n    new Set(['C']),\r\n    new Set(['N'])\r\n];\r\nvar RnaAtomIdsList = [\r\n    new Set(['P', 'O3\\'', 'O3*']),\r\n    new Set(['C4\\'', 'C4*']),\r\n    new Set(['O2\\'', 'O2*', 'F2\\'', 'F2*'])\r\n];\r\nvar DnaAtomIdsList = [\r\n    new Set(['P', 'O3\\'', 'O3*']),\r\n    new Set(['C3\\'', 'C3*']),\r\n    new Set(['O2\\'', 'O2*', 'F2\\'', 'F2*'])\r\n];\r\n/** Used to reduce false positives for atom name-based type guessing */\r\nvar NonPolymerNames = new Set([\r\n    'FMN', 'NCN', 'FNS', 'FMA' // Mononucleotides\r\n]);\r\nvar StandardComponents = (function () {\r\n    var map = new Map();\r\n    var components = [\r\n        { id: 'HIS', name: 'HISTIDINE', type: 'L-peptide linking' },\r\n        { id: 'ARG', name: 'ARGININE', type: 'L-peptide linking' },\r\n        { id: 'LYS', name: 'LYSINE', type: 'L-peptide linking' },\r\n        { id: 'ILE', name: 'ISOLEUCINE', type: 'L-peptide linking' },\r\n        { id: 'PHE', name: 'PHENYLALANINE', type: 'L-peptide linking' },\r\n        { id: 'LEU', name: 'LEUCINE', type: 'L-peptide linking' },\r\n        { id: 'TRP', name: 'TRYPTOPHAN', type: 'L-peptide linking' },\r\n        { id: 'ALA', name: 'ALANINE', type: 'L-peptide linking' },\r\n        { id: 'MET', name: 'METHIONINE', type: 'L-peptide linking' },\r\n        { id: 'CYS', name: 'CYSTEINE', type: 'L-peptide linking' },\r\n        { id: 'ASN', name: 'ASPARAGINE', type: 'L-peptide linking' },\r\n        { id: 'VAL', name: 'VALINE', type: 'L-peptide linking' },\r\n        { id: 'GLY', name: 'GLYCINE', type: 'peptide linking' },\r\n        { id: 'SER', name: 'SERINE', type: 'L-peptide linking' },\r\n        { id: 'GLN', name: 'GLUTAMINE', type: 'L-peptide linking' },\r\n        { id: 'TYR', name: 'TYROSINE', type: 'L-peptide linking' },\r\n        { id: 'ASP', name: 'ASPARTIC ACID', type: 'L-peptide linking' },\r\n        { id: 'GLU', name: 'GLUTAMIC ACID', type: 'L-peptide linking' },\r\n        { id: 'THR', name: 'THREONINE', type: 'L-peptide linking' },\r\n        { id: 'PRO', name: 'PROLINE', type: 'L-peptide linking' },\r\n        { id: 'SEC', name: 'SELENOCYSTEINE', type: 'L-peptide linking' },\r\n        { id: 'PYL', name: 'PYRROLYSINE', type: 'L-peptide linking' },\r\n        { id: 'MSE', name: 'SELENOMETHIONINE', type: 'L-peptide linking' },\r\n        { id: 'SEP', name: 'PHOSPHOSERINE', type: 'L-peptide linking' },\r\n        { id: 'TPO', name: 'PHOSPHOTHREONINE', type: 'L-peptide linking' },\r\n        { id: 'PTR', name: 'O-PHOSPHOTYROSINE', type: 'L-peptide linking' },\r\n        { id: 'PCA', name: 'PYROGLUTAMIC ACID', type: 'L-peptide linking' },\r\n        { id: 'A', name: 'ADENOSINE-5\\'-MONOPHOSPHATE', type: 'RNA linking' },\r\n        { id: 'C', name: 'CYTIDINE-5\\'-MONOPHOSPHATE', type: 'RNA linking' },\r\n        { id: 'T', name: 'THYMIDINE-5\\'-MONOPHOSPHATE', type: 'RNA linking' },\r\n        { id: 'G', name: 'GUANOSINE-5\\'-MONOPHOSPHATE', type: 'RNA linking' },\r\n        { id: 'I', name: 'INOSINIC ACID', type: 'RNA linking' },\r\n        { id: 'U', name: 'URIDINE-5\\'-MONOPHOSPHATE', type: 'RNA linking' },\r\n        { id: 'DA', name: '2\\'-DEOXYADENOSINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n        { id: 'DC', name: '2\\'-DEOXYCYTIDINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n        { id: 'DT', name: 'THYMIDINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n        { id: 'DG', name: '2\\'-DEOXYGUANOSINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n        { id: 'DI', name: '2\\'-DEOXYINOSINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n        { id: 'DU', name: '2\\'-DEOXYURIDINE-5\\'-MONOPHOSPHATE', type: 'DNA linking' },\r\n    ];\r\n    components.forEach(function (c) { return map.set(c.id, c); });\r\n    return map;\r\n})();\r\nvar CharmmIonComponents = (function () {\r\n    var map = new Map();\r\n    var components = [\r\n        { id: 'ZN2', name: 'ZINC ION', type: 'Ion' },\r\n        { id: 'SOD', name: 'SODIUM ION', type: 'Ion' },\r\n        { id: 'CES', name: 'CESIUM ION', type: 'Ion' },\r\n        { id: 'CLA', name: 'CHLORIDE ION', type: 'Ion' },\r\n        { id: 'CAL', name: 'CALCIUM ION', type: 'Ion' },\r\n        { id: 'POT', name: 'POTASSIUM ION', type: 'Ion' },\r\n    ];\r\n    components.forEach(function (c) { return map.set(c.id, c); });\r\n    return map;\r\n})();\r\nvar ComponentBuilder = /** @class */ (function () {\r\n    function ComponentBuilder(seqId, atomId) {\r\n        this.seqId = seqId;\r\n        this.atomId = atomId;\r\n        this.namesMap = new Map();\r\n        this.comps = new Map();\r\n        this.ids = [];\r\n        this.names = [];\r\n        this.types = [];\r\n        this.mon_nstd_flags = [];\r\n    }\r\n    ComponentBuilder.prototype.set = function (c) {\r\n        this.comps.set(c.id, c);\r\n        this.ids.push(c.id);\r\n        this.names.push(c.name);\r\n        this.types.push(c.type);\r\n        this.mon_nstd_flags.push(PolymerNames.has(c.id) ? 'y' : 'n');\r\n    };\r\n    ComponentBuilder.prototype.getAtomIds = function (index) {\r\n        var atomIds = new Set();\r\n        var prevSeqId = this.seqId.value(index);\r\n        while (index < this.seqId.rowCount) {\r\n            var seqId = this.seqId.value(index);\r\n            if (seqId !== prevSeqId)\r\n                break;\r\n            atomIds.add(this.atomId.value(index));\r\n            prevSeqId - seqId;\r\n            index += 1;\r\n        }\r\n        return atomIds;\r\n    };\r\n    ComponentBuilder.prototype.hasAtomIds = function (atomIds, atomIdsList) {\r\n        for (var i = 0, il = atomIdsList.length; i < il; ++i) {\r\n            if (!SetUtils.areIntersecting(atomIds, atomIdsList[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    ComponentBuilder.prototype.getType = function (atomIds) {\r\n        if (this.hasAtomIds(atomIds, ProteinAtomIdsList)) {\r\n            return 'peptide linking';\r\n        }\r\n        else if (this.hasAtomIds(atomIds, RnaAtomIdsList)) {\r\n            return 'RNA linking';\r\n        }\r\n        else if (this.hasAtomIds(atomIds, DnaAtomIdsList)) {\r\n            return 'DNA linking';\r\n        }\r\n        else {\r\n            return 'other';\r\n        }\r\n    };\r\n    ComponentBuilder.prototype.has = function (compId) { return this.comps.has(compId); };\r\n    ComponentBuilder.prototype.get = function (compId) { return this.comps.get(compId); };\r\n    ComponentBuilder.prototype.add = function (compId, index) {\r\n        if (!this.has(compId)) {\r\n            if (StandardComponents.has(compId)) {\r\n                this.set(StandardComponents.get(compId));\r\n            }\r\n            else if (WaterNames.has(compId)) {\r\n                this.set({ id: compId, name: 'WATER', type: 'non-polymer' });\r\n            }\r\n            else if (NonPolymerNames.has(compId)) {\r\n                this.set({ id: compId, name: this.namesMap.get(compId) || compId, type: 'non-polymer' });\r\n            }\r\n            else {\r\n                var atomIds = this.getAtomIds(index);\r\n                if (atomIds.size === 1 && CharmmIonComponents.has(compId)) {\r\n                    this.set(CharmmIonComponents.get(compId));\r\n                }\r\n                else {\r\n                    var type = this.getType(atomIds);\r\n                    this.set({ id: compId, name: this.namesMap.get(compId) || compId, type: type });\r\n                }\r\n            }\r\n        }\r\n        return this.get(compId);\r\n    };\r\n    ComponentBuilder.prototype.getChemCompTable = function () {\r\n        return Table.ofPartialColumns(BasicSchema.chem_comp, {\r\n            id: Column.ofStringArray(this.ids),\r\n            name: Column.ofStringArray(this.names),\r\n            type: Column.ofStringAliasArray(this.types),\r\n            mon_nstd_flag: Column.ofStringAliasArray(this.mon_nstd_flags),\r\n        }, this.ids.length);\r\n    };\r\n    ComponentBuilder.prototype.setNames = function (names) {\r\n        var _this = this;\r\n        names.forEach(function (n) { return _this.namesMap.set(n[0], n[1]); });\r\n    };\r\n    return ComponentBuilder;\r\n}());\r\nexport { ComponentBuilder };\r\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}