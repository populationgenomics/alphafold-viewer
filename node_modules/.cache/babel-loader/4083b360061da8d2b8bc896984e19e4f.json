{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * Color conversion code adapted from chroma.js (https://github.com/gka/chroma.js)\r\n * Copyright (c) 2011-2018, Gregor Aisch, BSD license\r\n */\nimport { degToRad } from '../../../mol-math/misc';\nimport { Lab } from './lab';\nexport { Hcl };\n/**\r\n * CIE HCL (Hue-Chroma-Luminance) color\r\n *\r\n * - H [0..360]\r\n * - C [0..100]\r\n * - L [0..100]\r\n *\r\n * Cylindrical representation of CIELUV (see https://en.wikipedia.org/wiki/CIELUV)\r\n */\n\nfunction Hcl() {\n  return Hcl.zero();\n}\n\n(function (Hcl) {\n  function zero() {\n    var out = [0.1, 0.0, 0.0];\n    out[0] = 0;\n    return out;\n  }\n\n  Hcl.zero = zero;\n\n  function create(h, c, l) {\n    var out = zero();\n    out[0] = h;\n    out[1] = c;\n    out[2] = l;\n    return out;\n  }\n\n  Hcl.create = create;\n  var tmpFromColorLab = [0, 0, 0];\n\n  function fromColor(out, color) {\n    return Lab.toHcl(out, Lab.fromColor(tmpFromColorLab, color));\n  }\n\n  Hcl.fromColor = fromColor;\n\n  function fromLab(hcl, lab) {\n    return Lab.toHcl(hcl, lab);\n  }\n\n  Hcl.fromLab = fromLab;\n  var tmpToColorLab = [0, 0, 0];\n\n  function toColor(hcl) {\n    return Lab.toColor(toLab(tmpToColorLab, hcl));\n  }\n\n  Hcl.toColor = toColor;\n  /**\r\n   * Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\r\n   *\r\n   * These formulas were invented by David Dalrymple to obtain maximum contrast without going\r\n   * out of gamut if the parameters are in the range 0-1.\r\n   * A saturation multiplier was added by Gregor Aisch\r\n   */\n\n  function toLab(out, hcl) {\n    var h = hcl[0],\n        c = hcl[1],\n        l = hcl[2];\n    if (isNaN(h)) h = 0;\n    h = degToRad(h);\n    out[0] = l;\n    out[1] = Math.cos(h) * c;\n    out[2] = Math.sin(h) * c;\n    return out;\n  }\n\n  Hcl.toLab = toLab;\n\n  function copy(out, c) {\n    out[0] = c[0];\n    out[1] = c[1];\n    out[2] = c[2];\n    return out;\n  }\n\n  Hcl.copy = copy;\n\n  function saturate(out, c, amount) {\n    out[0] = c[0];\n    out[1] = Math.max(0, c[1] + Kn * amount);\n    out[2] = c[2];\n    return out;\n  }\n\n  Hcl.saturate = saturate;\n\n  function desaturate(out, c, amount) {\n    return saturate(out, c, -amount);\n  }\n\n  Hcl.desaturate = desaturate;\n  var tmpDarkenLab = [0, 0, 0];\n\n  function darken(out, c, amount) {\n    toLab(tmpDarkenLab, c);\n    return Lab.toHcl(out, Lab.darken(tmpDarkenLab, tmpDarkenLab, amount));\n  }\n\n  Hcl.darken = darken;\n\n  function lighten(out, c, amount) {\n    return darken(out, c, -amount);\n  }\n\n  Hcl.lighten = lighten; // Corresponds roughly to RGB brighter/darker\n\n  var Kn = 18;\n})(Hcl || (Hcl = {}));","map":{"version":3,"sources":["../../../../src/mol-util/color/spaces/hcl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * Color conversion code adapted from chroma.js (https://github.com/gka/chroma.js)\r\n * Copyright (c) 2011-2018, Gregor Aisch, BSD license\r\n */\r\nimport { degToRad } from '../../../mol-math/misc';\r\nimport { Lab } from './lab';\r\nexport { Hcl };\r\n/**\r\n * CIE HCL (Hue-Chroma-Luminance) color\r\n *\r\n * - H [0..360]\r\n * - C [0..100]\r\n * - L [0..100]\r\n *\r\n * Cylindrical representation of CIELUV (see https://en.wikipedia.org/wiki/CIELUV)\r\n */\r\nfunction Hcl() {\r\n    return Hcl.zero();\r\n}\r\n(function (Hcl) {\r\n    function zero() {\r\n        var out = [0.1, 0.0, 0.0];\r\n        out[0] = 0;\r\n        return out;\r\n    }\r\n    Hcl.zero = zero;\r\n    function create(h, c, l) {\r\n        var out = zero();\r\n        out[0] = h;\r\n        out[1] = c;\r\n        out[2] = l;\r\n        return out;\r\n    }\r\n    Hcl.create = create;\r\n    var tmpFromColorLab = [0, 0, 0];\r\n    function fromColor(out, color) {\r\n        return Lab.toHcl(out, Lab.fromColor(tmpFromColorLab, color));\r\n    }\r\n    Hcl.fromColor = fromColor;\r\n    function fromLab(hcl, lab) {\r\n        return Lab.toHcl(hcl, lab);\r\n    }\r\n    Hcl.fromLab = fromLab;\r\n    var tmpToColorLab = [0, 0, 0];\r\n    function toColor(hcl) {\r\n        return Lab.toColor(toLab(tmpToColorLab, hcl));\r\n    }\r\n    Hcl.toColor = toColor;\r\n    /**\r\n     * Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\r\n     *\r\n     * These formulas were invented by David Dalrymple to obtain maximum contrast without going\r\n     * out of gamut if the parameters are in the range 0-1.\r\n     * A saturation multiplier was added by Gregor Aisch\r\n     */\r\n    function toLab(out, hcl) {\r\n        var h = hcl[0], c = hcl[1], l = hcl[2];\r\n        if (isNaN(h))\r\n            h = 0;\r\n        h = degToRad(h);\r\n        out[0] = l;\r\n        out[1] = Math.cos(h) * c;\r\n        out[2] = Math.sin(h) * c;\r\n        return out;\r\n    }\r\n    Hcl.toLab = toLab;\r\n    function copy(out, c) {\r\n        out[0] = c[0];\r\n        out[1] = c[1];\r\n        out[2] = c[2];\r\n        return out;\r\n    }\r\n    Hcl.copy = copy;\r\n    function saturate(out, c, amount) {\r\n        out[0] = c[0];\r\n        out[1] = Math.max(0, c[1] + Kn * amount);\r\n        out[2] = c[2];\r\n        return out;\r\n    }\r\n    Hcl.saturate = saturate;\r\n    function desaturate(out, c, amount) {\r\n        return saturate(out, c, -amount);\r\n    }\r\n    Hcl.desaturate = desaturate;\r\n    var tmpDarkenLab = [0, 0, 0];\r\n    function darken(out, c, amount) {\r\n        toLab(tmpDarkenLab, c);\r\n        return Lab.toHcl(out, Lab.darken(tmpDarkenLab, tmpDarkenLab, amount));\r\n    }\r\n    Hcl.darken = darken;\r\n    function lighten(out, c, amount) {\r\n        return darken(out, c, -amount);\r\n    }\r\n    Hcl.lighten = lighten;\r\n    // Corresponds roughly to RGB brighter/darker\r\n    var Kn = 18;\r\n})(Hcl || (Hcl = {}));\r\n//# sourceMappingURL=hcl.js.map"]},"metadata":{},"sourceType":"module"}