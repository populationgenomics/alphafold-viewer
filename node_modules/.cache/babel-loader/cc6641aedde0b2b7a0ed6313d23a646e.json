{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nvar tempPos = Vec3.zero();\nexport function toPositionsArray(unit) {\n  var pos = unit.conformation.invariantPosition;\n  var elements = unit.elements;\n  var positions = new Float32Array(elements.length * 3);\n\n  for (var i = 0, il = elements.length; i < il; i++) {\n    pos(elements[i], tempPos);\n    Vec3.toArray(tempPos, positions, i * 3);\n  }\n\n  return positions;\n}\nexport function getPrincipalAxes(unit) {\n  var positions = toPositionsArray(unit);\n  return PrincipalAxes.ofPositions(positions);\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/util/principal-axes.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,aAAT,QAA8B,2DAA9B;AAEA,SAAS,IAAT,QAAqB,qCAArB;AAEA,IAAM,OAAO,GAAG,IAAI,CAAC,IAAL,EAAhB;AACA,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAqC;AACvC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAL,CAAkB,iBAA9B;AACQ,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACR,MAAM,SAAS,GAAG,IAAI,YAAJ,CAAiB,QAAQ,CAAC,MAAT,GAAkB,CAAnC,CAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,IAAA,GAAG,CAAC,QAAQ,CAAC,CAAD,CAAT,EAAc,OAAd,CAAH;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,SAAtB,EAAiC,CAAC,GAAG,CAArC;AACH;;AACD,SAAO,SAAP;AACH;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAqC;AACvC,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAD,CAAlC;AACA,SAAO,aAAa,CAAC,WAAd,CAA0B,SAA1B,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nvar tempPos = Vec3.zero();\r\nexport function toPositionsArray(unit) {\r\n    var pos = unit.conformation.invariantPosition;\r\n    var elements = unit.elements;\r\n    var positions = new Float32Array(elements.length * 3);\r\n    for (var i = 0, il = elements.length; i < il; i++) {\r\n        pos(elements[i], tempPos);\r\n        Vec3.toArray(tempPos, positions, i * 3);\r\n    }\r\n    return positions;\r\n}\r\nexport function getPrincipalAxes(unit) {\r\n    var positions = toPositionsArray(unit);\r\n    return PrincipalAxes.ofPositions(positions);\r\n}\r\n//# sourceMappingURL=principal-axes.js.map"]},"metadata":{},"sourceType":"module"}