{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { isHalogen } from '../../../mol-model/structure/model/properties/atomic/types';\nimport { BondType } from '../../../mol-model/structure/model/types';\nimport { eachBondedAtom, bondCount, typeSymbol, bondToElementCount } from './util';\n\nfunction isAromatic(unit, index) {\n  // TODO also extend unit.rings with geometry/composition-based aromaticity detection and use it here in addition\n  var _a = unit.bonds,\n      offset = _a.offset,\n      edgeProps = _a.edgeProps;\n\n  for (var i = offset[index], il = offset[index + 1]; i < il; ++i) {\n    if (BondType.is(16\n    /* Aromatic */\n    , edgeProps.flags[i])) return true;\n  }\n\n  return false;\n}\n\nfunction bondToCarbonylCount(structure, unit, index) {\n  var carbonylCount = 0;\n  eachBondedAtom(structure, unit, index, function (unit, index) {\n    if (isCarbonyl(structure, unit, index)) carbonylCount += 1;\n  });\n  return carbonylCount;\n} //\n\n/**\r\n * Nitrogen in a quaternary amine\r\n */\n\n\nexport function isQuaternaryAmine(structure, unit, index) {\n  return typeSymbol(unit, index) === \"N\"\n  /* N */\n  && bondCount(structure, unit, index) === 4 && bondToElementCount(structure, unit, index, \"H\"\n  /* H */\n  ) === 0;\n}\n/**\r\n * Nitrogen in a tertiary amine\r\n */\n\nexport function isTertiaryAmine(structure, unit, index, idealValence) {\n  return typeSymbol(unit, index) === \"N\"\n  /* N */\n  && bondCount(structure, unit, index) === 4 && idealValence === 3;\n}\n/**\r\n * Nitrogen in an imide\r\n */\n\nexport function isImide(structure, unit, index) {\n  var flag = false;\n\n  if (typeSymbol(unit, index) === \"N\"\n  /* N */\n  && bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\"\n  /* H */\n  ) === 2) {\n    flag = bondToCarbonylCount(structure, unit, index) === 2;\n  }\n\n  return flag;\n}\n/**\r\n * Nitrogen in an amide\r\n */\n\nexport function isAmide(structure, unit, index) {\n  var flag = false;\n\n  if (typeSymbol(unit, index) === \"N\"\n  /* N */\n  && bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\"\n  /* H */\n  ) === 2) {\n    flag = bondToCarbonylCount(structure, unit, index) === 1;\n  }\n\n  return flag;\n}\n/**\r\n * Sulfur in a sulfonium group\r\n */\n\nexport function isSulfonium(structure, unit, index) {\n  return typeSymbol(unit, index) === \"S\"\n  /* S */\n  && bondCount(structure, unit, index) === 3 && bondToElementCount(structure, unit, index, \"H\"\n  /* H */\n  ) === 0;\n}\n/**\r\n * Sulfur in a sulfonic acid or sulfonate group\r\n */\n\nexport function isSulfonicAcid(structure, unit, index) {\n  return typeSymbol(unit, index) === \"S\"\n  /* S */\n  && bondToElementCount(structure, unit, index, \"O\"\n  /* O */\n  ) === 3;\n}\n/**\r\n * Sulfur in a sulfate group\r\n */\n\nexport function isSulfate(structure, unit, index) {\n  return typeSymbol(unit, index) === \"S\"\n  /* S */\n  && bondToElementCount(structure, unit, index, \"O\"\n  /* O */\n  ) === 4;\n}\n/**\r\n * Phosphor in a phosphate group\r\n */\n\nexport function isPhosphate(structure, unit, index) {\n  return typeSymbol(unit, index) === \"P\"\n  /* P */\n  && bondToElementCount(structure, unit, index, \"O\"\n  /* O */\n  ) === bondCount(structure, unit, index);\n}\n/**\r\n * Halogen with one bond to a carbon\r\n */\n\nexport function isHalocarbon(structure, unit, index) {\n  return isHalogen(typeSymbol(unit, index)) && bondCount(structure, unit, index) === 1 && bondToElementCount(structure, unit, index, \"C\"\n  /* C */\n  ) === 1;\n}\n/**\r\n * Carbon in a carbonyl/acyl group\r\n *\r\n * TODO currently only checks intra bonds for group detection\r\n */\n\nexport function isCarbonyl(structure, unit, index) {\n  var flag = false;\n\n  if (typeSymbol(unit, index) === \"C\"\n  /* C */\n  ) {\n    var _a = unit.bonds,\n        offset = _a.offset,\n        edgeProps = _a.edgeProps,\n        b = _a.b;\n\n    for (var i = offset[index], il = offset[index + 1]; i < il; ++i) {\n      if (edgeProps.order[i] === 2 && typeSymbol(unit, b[i]) === \"O\"\n      /* O */\n      ) {\n        flag = true;\n        break;\n      }\n    }\n  }\n\n  return flag;\n}\n/**\r\n * Carbon in a carboxylate group\r\n */\n\nexport function isCarboxylate(structure, unit, index) {\n  var terminalOxygenCount = 0;\n\n  if (typeSymbol(unit, index) === \"C\"\n  /* C */\n  && bondToElementCount(structure, unit, index, \"O\"\n  /* O */\n  ) === 2 && bondToElementCount(structure, unit, index, \"C\"\n  /* C */\n  ) === 1) {\n    eachBondedAtom(structure, unit, index, function (unit, index) {\n      if (typeSymbol(unit, index) === \"O\"\n      /* O */\n      && bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\"\n      /* H */\n      ) === 1) {\n        terminalOxygenCount += 1;\n      }\n    });\n  }\n\n  return terminalOxygenCount === 2;\n}\n/**\r\n * Carbon in a guanidine group\r\n */\n\nexport function isGuanidine(structure, unit, index) {\n  var terminalNitrogenCount = 0;\n\n  if (typeSymbol(unit, index) === \"C\"\n  /* C */\n  && bondCount(structure, unit, index) === 3 && bondToElementCount(structure, unit, index, \"N\"\n  /* N */\n  ) === 3) {\n    eachBondedAtom(structure, unit, index, function (unit, index) {\n      if (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\"\n      /* H */\n      ) === 1) {\n        terminalNitrogenCount += 1;\n      }\n    });\n  }\n\n  return terminalNitrogenCount === 2;\n}\n/**\r\n * Carbon in a acetamidine group\r\n */\n\nexport function isAcetamidine(structure, unit, index) {\n  var terminalNitrogenCount = 0;\n\n  if (typeSymbol(unit, index) === \"C\"\n  /* C */\n  && bondCount(structure, unit, index) === 3 && bondToElementCount(structure, unit, index, \"N\"\n  /* N */\n  ) === 2 && bondToElementCount(structure, unit, index, \"C\"\n  /* C */\n  ) === 1) {\n    eachBondedAtom(structure, unit, index, function (unit, index) {\n      if (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\"\n      /* H */\n      ) === 1) {\n        terminalNitrogenCount += 1;\n      }\n    });\n  }\n\n  return terminalNitrogenCount === 2;\n}\nvar PolarElements = new Set(['N', 'O', 'S', 'F', 'CL', 'BR', 'I']);\nexport function isPolar(element) {\n  return PolarElements.has(element);\n}\nexport function hasPolarNeighbour(structure, unit, index) {\n  var flag = false;\n  eachBondedAtom(structure, unit, index, function (unit, index) {\n    if (isPolar(typeSymbol(unit, index))) flag = true;\n  });\n  return flag;\n}\nexport function hasAromaticNeighbour(structure, unit, index) {\n  var flag = false;\n  eachBondedAtom(structure, unit, index, function (unit, index) {\n    if (isAromatic(unit, index)) flag = true;\n  });\n  return flag;\n}","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/chemistry/functional-group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { isHalogen } from '../../../mol-model/structure/model/properties/atomic/types';\r\nimport { BondType } from '../../../mol-model/structure/model/types';\r\nimport { eachBondedAtom, bondCount, typeSymbol, bondToElementCount } from './util';\r\nfunction isAromatic(unit, index) {\r\n    // TODO also extend unit.rings with geometry/composition-based aromaticity detection and use it here in addition\r\n    var _a = unit.bonds, offset = _a.offset, edgeProps = _a.edgeProps;\r\n    for (var i = offset[index], il = offset[index + 1]; i < il; ++i) {\r\n        if (BondType.is(16 /* Aromatic */, edgeProps.flags[i]))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction bondToCarbonylCount(structure, unit, index) {\r\n    var carbonylCount = 0;\r\n    eachBondedAtom(structure, unit, index, function (unit, index) {\r\n        if (isCarbonyl(structure, unit, index))\r\n            carbonylCount += 1;\r\n    });\r\n    return carbonylCount;\r\n}\r\n//\r\n/**\r\n * Nitrogen in a quaternary amine\r\n */\r\nexport function isQuaternaryAmine(structure, unit, index) {\r\n    return (typeSymbol(unit, index) === \"N\" /* N */ &&\r\n        bondCount(structure, unit, index) === 4 &&\r\n        bondToElementCount(structure, unit, index, \"H\" /* H */) === 0);\r\n}\r\n/**\r\n * Nitrogen in a tertiary amine\r\n */\r\nexport function isTertiaryAmine(structure, unit, index, idealValence) {\r\n    return (typeSymbol(unit, index) === \"N\" /* N */ &&\r\n        bondCount(structure, unit, index) === 4 &&\r\n        idealValence === 3);\r\n}\r\n/**\r\n * Nitrogen in an imide\r\n */\r\nexport function isImide(structure, unit, index) {\r\n    var flag = false;\r\n    if (typeSymbol(unit, index) === \"N\" /* N */ &&\r\n        (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\" /* H */)) === 2) {\r\n        flag = bondToCarbonylCount(structure, unit, index) === 2;\r\n    }\r\n    return flag;\r\n}\r\n/**\r\n * Nitrogen in an amide\r\n */\r\nexport function isAmide(structure, unit, index) {\r\n    var flag = false;\r\n    if (typeSymbol(unit, index) === \"N\" /* N */ &&\r\n        (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\" /* H */)) === 2) {\r\n        flag = bondToCarbonylCount(structure, unit, index) === 1;\r\n    }\r\n    return flag;\r\n}\r\n/**\r\n * Sulfur in a sulfonium group\r\n */\r\nexport function isSulfonium(structure, unit, index) {\r\n    return (typeSymbol(unit, index) === \"S\" /* S */ &&\r\n        bondCount(structure, unit, index) === 3 &&\r\n        bondToElementCount(structure, unit, index, \"H\" /* H */) === 0);\r\n}\r\n/**\r\n * Sulfur in a sulfonic acid or sulfonate group\r\n */\r\nexport function isSulfonicAcid(structure, unit, index) {\r\n    return (typeSymbol(unit, index) === \"S\" /* S */ &&\r\n        bondToElementCount(structure, unit, index, \"O\" /* O */) === 3);\r\n}\r\n/**\r\n * Sulfur in a sulfate group\r\n */\r\nexport function isSulfate(structure, unit, index) {\r\n    return (typeSymbol(unit, index) === \"S\" /* S */ &&\r\n        bondToElementCount(structure, unit, index, \"O\" /* O */) === 4);\r\n}\r\n/**\r\n * Phosphor in a phosphate group\r\n */\r\nexport function isPhosphate(structure, unit, index) {\r\n    return (typeSymbol(unit, index) === \"P\" /* P */ &&\r\n        bondToElementCount(structure, unit, index, \"O\" /* O */) === bondCount(structure, unit, index));\r\n}\r\n/**\r\n * Halogen with one bond to a carbon\r\n */\r\nexport function isHalocarbon(structure, unit, index) {\r\n    return (isHalogen(typeSymbol(unit, index)) &&\r\n        bondCount(structure, unit, index) === 1 &&\r\n        bondToElementCount(structure, unit, index, \"C\" /* C */) === 1);\r\n}\r\n/**\r\n * Carbon in a carbonyl/acyl group\r\n *\r\n * TODO currently only checks intra bonds for group detection\r\n */\r\nexport function isCarbonyl(structure, unit, index) {\r\n    var flag = false;\r\n    if (typeSymbol(unit, index) === \"C\" /* C */) {\r\n        var _a = unit.bonds, offset = _a.offset, edgeProps = _a.edgeProps, b = _a.b;\r\n        for (var i = offset[index], il = offset[index + 1]; i < il; ++i) {\r\n            if (edgeProps.order[i] === 2 && typeSymbol(unit, b[i]) === \"O\" /* O */) {\r\n                flag = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return flag;\r\n}\r\n/**\r\n * Carbon in a carboxylate group\r\n */\r\nexport function isCarboxylate(structure, unit, index) {\r\n    var terminalOxygenCount = 0;\r\n    if (typeSymbol(unit, index) === \"C\" /* C */ &&\r\n        bondToElementCount(structure, unit, index, \"O\" /* O */) === 2 &&\r\n        bondToElementCount(structure, unit, index, \"C\" /* C */) === 1) {\r\n        eachBondedAtom(structure, unit, index, function (unit, index) {\r\n            if (typeSymbol(unit, index) === \"O\" /* O */ &&\r\n                bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\" /* H */) === 1) {\r\n                terminalOxygenCount += 1;\r\n            }\r\n        });\r\n    }\r\n    return terminalOxygenCount === 2;\r\n}\r\n/**\r\n * Carbon in a guanidine group\r\n */\r\nexport function isGuanidine(structure, unit, index) {\r\n    var terminalNitrogenCount = 0;\r\n    if (typeSymbol(unit, index) === \"C\" /* C */ &&\r\n        bondCount(structure, unit, index) === 3 &&\r\n        bondToElementCount(structure, unit, index, \"N\" /* N */) === 3) {\r\n        eachBondedAtom(structure, unit, index, function (unit, index) {\r\n            if (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\" /* H */) === 1) {\r\n                terminalNitrogenCount += 1;\r\n            }\r\n        });\r\n    }\r\n    return terminalNitrogenCount === 2;\r\n}\r\n/**\r\n * Carbon in a acetamidine group\r\n */\r\nexport function isAcetamidine(structure, unit, index) {\r\n    var terminalNitrogenCount = 0;\r\n    if (typeSymbol(unit, index) === \"C\" /* C */ &&\r\n        bondCount(structure, unit, index) === 3 &&\r\n        bondToElementCount(structure, unit, index, \"N\" /* N */) === 2 &&\r\n        bondToElementCount(structure, unit, index, \"C\" /* C */) === 1) {\r\n        eachBondedAtom(structure, unit, index, function (unit, index) {\r\n            if (bondCount(structure, unit, index) - bondToElementCount(structure, unit, index, \"H\" /* H */) === 1) {\r\n                terminalNitrogenCount += 1;\r\n            }\r\n        });\r\n    }\r\n    return terminalNitrogenCount === 2;\r\n}\r\nvar PolarElements = new Set(['N', 'O', 'S', 'F', 'CL', 'BR', 'I']);\r\nexport function isPolar(element) { return PolarElements.has(element); }\r\nexport function hasPolarNeighbour(structure, unit, index) {\r\n    var flag = false;\r\n    eachBondedAtom(structure, unit, index, function (unit, index) {\r\n        if (isPolar(typeSymbol(unit, index)))\r\n            flag = true;\r\n    });\r\n    return flag;\r\n}\r\nexport function hasAromaticNeighbour(structure, unit, index) {\r\n    var flag = false;\r\n    eachBondedAtom(structure, unit, index, function (unit, index) {\r\n        if (isAromatic(unit, index))\r\n            flag = true;\r\n    });\r\n    return flag;\r\n}\r\n//# sourceMappingURL=functional-group.js.map"]},"metadata":{},"sourceType":"module"}