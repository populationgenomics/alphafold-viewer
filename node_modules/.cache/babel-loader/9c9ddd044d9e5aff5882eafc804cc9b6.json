{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { UnitsRepresentation } from '../units-representation';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { OrientationEllipsoidMeshParams, OrientationEllipsoidMeshVisual } from '../visual/orientation-ellipsoid-mesh';\nvar OrientationVisuals = {\n  'orientation-ellipsoid-mesh': function (ctx, getParams) {\n    return UnitsRepresentation('Orientation ellipsoid mesh', ctx, getParams, OrientationEllipsoidMeshVisual);\n  }\n};\nexport var OrientationParams = __assign(__assign({}, OrientationEllipsoidMeshParams), {\n  visuals: PD.MultiSelect(['orientation-ellipsoid-mesh'], PD.objectToOptions(OrientationVisuals))\n});\nexport function getOrientationParams(ctx, structure) {\n  return PD.clone(OrientationParams);\n}\nexport function OrientationRepresentation(ctx, getParams) {\n  return Representation.createMulti('Orientation', ctx, getParams, StructureRepresentationStateBuilder, OrientationVisuals);\n}\nexport var OrientationRepresentationProvider = StructureRepresentationProvider({\n  name: 'orientation',\n  label: 'Orientation',\n  description: 'Displays orientation ellipsoids for polymer chains.',\n  factory: OrientationRepresentation,\n  getParams: getOrientationParams,\n  defaultValues: PD.getDefaultValues(OrientationParams),\n  defaultColorTheme: {\n    name: 'chain-id'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/orientation.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAkC,+BAAlC,EAAmE,mCAAnE,QAA8G,mBAA9G;AACA,SAAS,cAAT,QAAkF,kCAAlF;AAGA,SAAS,8BAAT,EAAyC,8BAAzC,QAA+E,sCAA/E;AAEA,IAAM,kBAAkB,GAAG;AACvB,gCAA8B,UAAC,GAAD,EAA6B,SAA7B,EAA6G;AAAK,WAAA,mBAAmB,CAAC,4BAAD,EAA+B,GAA/B,EAAoC,SAApC,EAAnB,8BAAmB,CAAnB;AAAiG;AAD1N,CAA3B;AAIA,OAAO,IAAM,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACvB,8BADuB,CAAA,EACO;AACjC,EAAA,OAAO,EAAE,EAAE,CAAC,WAAH,CAAe,CAAC,4BAAD,CAAf,EAA+C,EAAE,CAAC,eAAH,CAAmB,kBAAnB,CAA/C;AADwB,CADP,CAAvB;AAKP,OAAM,SAAU,oBAAV,CAA+B,GAA/B,EAA0D,SAA1D,EAA8E;AAChF,SAAO,EAAE,CAAC,KAAH,CAAS,iBAAT,CAAP;AACH;AAGD,OAAM,SAAU,yBAAV,CAAoC,GAApC,EAAgE,SAAhE,EAAmI;AACrI,SAAO,cAAc,CAAC,WAAf,CAA2B,aAA3B,EAA0C,GAA1C,EAA+C,SAA/C,EAA0D,mCAA1D,EAA+F,kBAA/F,CAAP;AACH;AAED,OAAO,IAAM,iCAAiC,GAAG,+BAA+B,CAAC;AAC7E,EAAA,IAAI,EAAE,aADuE;AAE7E,EAAA,KAAK,EAAE,aAFsE;AAG7E,EAAA,WAAW,EAAE,qDAHgE;AAI7E,EAAA,OAAO,EAAE,yBAJoE;AAK7E,EAAA,SAAS,EAAE,oBALkE;AAM7E,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,iBAApB,CAN8D;AAO7E,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAP0D;AAQ7E,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAR2D;AAS7E,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATW,CAAD,CAAzE","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { OrientationEllipsoidMeshParams, OrientationEllipsoidMeshVisual } from '../visual/orientation-ellipsoid-mesh';\r\nvar OrientationVisuals = {\r\n    'orientation-ellipsoid-mesh': function (ctx, getParams) { return UnitsRepresentation('Orientation ellipsoid mesh', ctx, getParams, OrientationEllipsoidMeshVisual); },\r\n};\r\nexport var OrientationParams = __assign(__assign({}, OrientationEllipsoidMeshParams), { visuals: PD.MultiSelect(['orientation-ellipsoid-mesh'], PD.objectToOptions(OrientationVisuals)) });\r\nexport function getOrientationParams(ctx, structure) {\r\n    return PD.clone(OrientationParams);\r\n}\r\nexport function OrientationRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Orientation', ctx, getParams, StructureRepresentationStateBuilder, OrientationVisuals);\r\n}\r\nexport var OrientationRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'orientation',\r\n    label: 'Orientation',\r\n    description: 'Displays orientation ellipsoids for polymer chains.',\r\n    factory: OrientationRepresentation,\r\n    getParams: getOrientationParams,\r\n    defaultValues: PD.getDefaultValues(OrientationParams),\r\n    defaultColorTheme: { name: 'chain-id' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=orientation.js.map"]},"metadata":{},"sourceType":"module"}