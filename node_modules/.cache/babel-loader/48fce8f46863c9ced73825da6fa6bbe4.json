{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { MolScriptBuilder } from '../../mol-script/language/builder';\nimport { StructureElement, Structure, StructureSelection as Sel, Queries, QueryContext, Model } from '../../mol-model/structure';\nimport { StructureQueryHelper } from './structure-query';\nimport { PluginStateObject as SO } from '../objects';\nimport { StructureSelectionQueries } from './structure-selection-query';\nimport { StateTransformer, StateObject } from '../../mol-state';\nimport { Script } from '../../mol-script/script';\nexport var StaticStructureComponentTypes = ['all', 'polymer', 'protein', 'nucleic', 'water', 'ion', 'lipid', 'branched', 'ligand', 'non-standard', 'coarse'];\nexport var StructureComponentParams = function () {\n  return {\n    type: PD.MappedStatic('static', {\n      static: PD.Text('polymer'),\n      expression: PD.Value(MolScriptBuilder.struct.generator.all),\n      bundle: PD.Value(StructureElement.Bundle.Empty),\n      script: PD.Script({\n        language: 'mol-script',\n        expression: '(sel.atom.all)'\n      })\n    }, {\n      isHidden: true\n    }),\n    nullIfEmpty: PD.Optional(PD.Boolean(true, {\n      isHidden: true\n    })),\n    label: PD.Text('', {\n      isHidden: true\n    })\n  };\n};\nexport function createStructureComponent(a, params, cache) {\n  cache.source = a;\n  var component = Structure.Empty;\n  var label = void 0;\n\n  switch (params.type.name) {\n    case 'static':\n      {\n        var query = void 0;\n\n        switch (params.type.params) {\n          case 'all':\n            query = StructureSelectionQueries.all.query;\n            label = 'All';\n            break;\n\n          case 'polymer':\n            query = StructureSelectionQueries.polymer.query;\n            label = 'Polymer';\n            break;\n\n          case 'protein':\n            query = StructureSelectionQueries.protein.query;\n            label = 'Protein';\n            break;\n\n          case 'nucleic':\n            query = StructureSelectionQueries.nucleic.query;\n            label = 'Nucleic';\n            break;\n\n          case 'water':\n            query = Queries.internal.water();\n            label = 'Water';\n            break;\n\n          case 'ion':\n            query = StructureSelectionQueries.ion.query;\n            label = 'Ion';\n            break;\n\n          case 'lipid':\n            query = StructureSelectionQueries.lipid.query;\n            label = 'Lipid';\n            break;\n\n          case 'branched':\n            query = StructureSelectionQueries.branchedPlusConnected.query;\n            label = 'Branched';\n            break;\n\n          case 'ligand':\n            query = StructureSelectionQueries.ligandPlusConnected.query;\n            label = 'Ligand';\n            break;\n\n          case 'non-standard':\n            query = StructureSelectionQueries.nonStandardPolymer.query;\n            label = 'Non-standard';\n            break;\n\n          case 'coarse':\n            query = StructureSelectionQueries.coarse.query;\n            label = 'Coarse';\n            break;\n\n          default:\n            throw new Error(params.type + \" is a not valid complex element.\");\n        }\n\n        var result = query(new QueryContext(a));\n        component = Sel.unionStructure(result);\n        break;\n      }\n\n    case 'script':\n    case 'expression':\n      {\n        var _a = StructureQueryHelper.createAndRun(a, params.type.params),\n            selection = _a.selection,\n            entry = _a.entry;\n\n        cache.entry = entry;\n        component = Sel.unionStructure(selection);\n        break;\n      }\n\n    case 'bundle':\n      {\n        if (params.type.params.hash !== a.hashCode) break;\n        component = StructureElement.Bundle.toStructure(params.type.params, a);\n        break;\n      }\n  }\n\n  if (params.nullIfEmpty && component.elementCount === 0) return StateObject.Null;\n  var props = {\n    label: \"\" + (params.label || label || 'Component'),\n    description: Structure.elementDescription(component)\n  };\n  return new SO.Molecule.Structure(component, props);\n}\nexport function updateStructureComponent(a, b, oldParams, newParams, cache) {\n  if (oldParams.type.name !== newParams.type.name) return StateTransformer.UpdateResult.Recreate;\n  var updated = false;\n\n  switch (newParams.type.name) {\n    case 'static':\n      {\n        if (oldParams.type.params !== newParams.type.params) {\n          return StateTransformer.UpdateResult.Recreate;\n        }\n\n        if (!Structure.areEquivalent(a, cache.source)) {\n          return StateTransformer.UpdateResult.Recreate;\n        }\n\n        if (b.data.model === a.model) return StateTransformer.UpdateResult.Unchanged;\n        if (!Model.areHierarchiesEqual(a.model, b.data.model)) return StateTransformer.UpdateResult.Recreate;\n        b.data = b.data.remapModel(a.model);\n        return StateTransformer.UpdateResult.Updated;\n      }\n\n    case 'script':\n      if (!Script.areEqual(oldParams.type.params, newParams.type.params)) {\n        return StateTransformer.UpdateResult.Recreate;\n      }\n\n    case 'expression':\n      {\n        if (oldParams.type.params !== newParams.type.params) {\n          return StateTransformer.UpdateResult.Recreate;\n        }\n\n        if (a === cache.source) break;\n        var entry = cache.entry;\n        var selection = StructureQueryHelper.updateStructure(entry, a);\n        cache.source = a;\n        b.data = Sel.unionStructure(selection);\n        StructureQueryHelper.updateStructureObject(b, selection, newParams.label);\n        updated = true;\n        break;\n      }\n\n    case 'bundle':\n      {\n        if (a === cache.source && StructureElement.Bundle.areEqual(oldParams.type.params, newParams.type.params)) {\n          break;\n        }\n\n        cache.source = a;\n\n        if (newParams.type.params.hash !== a.hashCode) {\n          updated = b.data.elementCount !== 0;\n          b.data = b.data.elementCount === 0 ? b.data : Structure.Empty;\n        } else {\n          updated = true;\n          b.data = StructureElement.Bundle.toStructure(newParams.type.params, a);\n        }\n\n        break;\n      }\n  }\n\n  if (updated) {\n    if (newParams.nullIfEmpty && b.data.elementCount === 0) return StateTransformer.UpdateResult.Null;\n    b.description = Structure.elementDescription(b.data);\n  }\n\n  if (oldParams.label !== newParams.label) {\n    updated = true;\n    b.label = \"\" + (newParams.label || b.label);\n  }\n\n  return updated ? StateTransformer.UpdateResult.Updated : StateTransformer.UpdateResult.Unchanged;\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/helpers/structure-component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { MolScriptBuilder } from '../../mol-script/language/builder';\r\nimport { StructureElement, Structure, StructureSelection as Sel, Queries, QueryContext, Model } from '../../mol-model/structure';\r\nimport { StructureQueryHelper } from './structure-query';\r\nimport { PluginStateObject as SO } from '../objects';\r\nimport { StructureSelectionQueries } from './structure-selection-query';\r\nimport { StateTransformer, StateObject } from '../../mol-state';\r\nimport { Script } from '../../mol-script/script';\r\nexport var StaticStructureComponentTypes = [\r\n    'all',\r\n    'polymer',\r\n    'protein',\r\n    'nucleic',\r\n    'water',\r\n    'ion',\r\n    'lipid',\r\n    'branched',\r\n    'ligand',\r\n    'non-standard',\r\n    'coarse'\r\n];\r\nexport var StructureComponentParams = function () { return ({\r\n    type: PD.MappedStatic('static', {\r\n        static: PD.Text('polymer'),\r\n        expression: PD.Value(MolScriptBuilder.struct.generator.all),\r\n        bundle: PD.Value(StructureElement.Bundle.Empty),\r\n        script: PD.Script({ language: 'mol-script', expression: '(sel.atom.all)' }),\r\n    }, { isHidden: true }),\r\n    nullIfEmpty: PD.Optional(PD.Boolean(true, { isHidden: true })),\r\n    label: PD.Text('', { isHidden: true })\r\n}); };\r\nexport function createStructureComponent(a, params, cache) {\r\n    cache.source = a;\r\n    var component = Structure.Empty;\r\n    var label = void 0;\r\n    switch (params.type.name) {\r\n        case 'static': {\r\n            var query = void 0;\r\n            switch (params.type.params) {\r\n                case 'all':\r\n                    query = StructureSelectionQueries.all.query;\r\n                    label = 'All';\r\n                    break;\r\n                case 'polymer':\r\n                    query = StructureSelectionQueries.polymer.query;\r\n                    label = 'Polymer';\r\n                    break;\r\n                case 'protein':\r\n                    query = StructureSelectionQueries.protein.query;\r\n                    label = 'Protein';\r\n                    break;\r\n                case 'nucleic':\r\n                    query = StructureSelectionQueries.nucleic.query;\r\n                    label = 'Nucleic';\r\n                    break;\r\n                case 'water':\r\n                    query = Queries.internal.water();\r\n                    label = 'Water';\r\n                    break;\r\n                case 'ion':\r\n                    query = StructureSelectionQueries.ion.query;\r\n                    label = 'Ion';\r\n                    break;\r\n                case 'lipid':\r\n                    query = StructureSelectionQueries.lipid.query;\r\n                    label = 'Lipid';\r\n                    break;\r\n                case 'branched':\r\n                    query = StructureSelectionQueries.branchedPlusConnected.query;\r\n                    label = 'Branched';\r\n                    break;\r\n                case 'ligand':\r\n                    query = StructureSelectionQueries.ligandPlusConnected.query;\r\n                    label = 'Ligand';\r\n                    break;\r\n                case 'non-standard':\r\n                    query = StructureSelectionQueries.nonStandardPolymer.query;\r\n                    label = 'Non-standard';\r\n                    break;\r\n                case 'coarse':\r\n                    query = StructureSelectionQueries.coarse.query;\r\n                    label = 'Coarse';\r\n                    break;\r\n                default: throw new Error(params.type + \" is a not valid complex element.\");\r\n            }\r\n            var result = query(new QueryContext(a));\r\n            component = Sel.unionStructure(result);\r\n            break;\r\n        }\r\n        case 'script':\r\n        case 'expression': {\r\n            var _a = StructureQueryHelper.createAndRun(a, params.type.params), selection = _a.selection, entry = _a.entry;\r\n            cache.entry = entry;\r\n            component = Sel.unionStructure(selection);\r\n            break;\r\n        }\r\n        case 'bundle': {\r\n            if (params.type.params.hash !== a.hashCode)\r\n                break;\r\n            component = StructureElement.Bundle.toStructure(params.type.params, a);\r\n            break;\r\n        }\r\n    }\r\n    if (params.nullIfEmpty && component.elementCount === 0)\r\n        return StateObject.Null;\r\n    var props = { label: \"\" + (params.label || label || 'Component'), description: Structure.elementDescription(component) };\r\n    return new SO.Molecule.Structure(component, props);\r\n}\r\nexport function updateStructureComponent(a, b, oldParams, newParams, cache) {\r\n    if (oldParams.type.name !== newParams.type.name)\r\n        return StateTransformer.UpdateResult.Recreate;\r\n    var updated = false;\r\n    switch (newParams.type.name) {\r\n        case 'static': {\r\n            if (oldParams.type.params !== newParams.type.params) {\r\n                return StateTransformer.UpdateResult.Recreate;\r\n            }\r\n            if (!Structure.areEquivalent(a, cache.source)) {\r\n                return StateTransformer.UpdateResult.Recreate;\r\n            }\r\n            if (b.data.model === a.model)\r\n                return StateTransformer.UpdateResult.Unchanged;\r\n            if (!Model.areHierarchiesEqual(a.model, b.data.model))\r\n                return StateTransformer.UpdateResult.Recreate;\r\n            b.data = b.data.remapModel(a.model);\r\n            return StateTransformer.UpdateResult.Updated;\r\n        }\r\n        case 'script':\r\n            if (!Script.areEqual(oldParams.type.params, newParams.type.params)) {\r\n                return StateTransformer.UpdateResult.Recreate;\r\n            }\r\n        case 'expression': {\r\n            if (oldParams.type.params !== newParams.type.params) {\r\n                return StateTransformer.UpdateResult.Recreate;\r\n            }\r\n            if (a === cache.source)\r\n                break;\r\n            var entry = cache.entry;\r\n            var selection = StructureQueryHelper.updateStructure(entry, a);\r\n            cache.source = a;\r\n            b.data = Sel.unionStructure(selection);\r\n            StructureQueryHelper.updateStructureObject(b, selection, newParams.label);\r\n            updated = true;\r\n            break;\r\n        }\r\n        case 'bundle': {\r\n            if (a === cache.source && StructureElement.Bundle.areEqual(oldParams.type.params, newParams.type.params)) {\r\n                break;\r\n            }\r\n            cache.source = a;\r\n            if (newParams.type.params.hash !== a.hashCode) {\r\n                updated = b.data.elementCount !== 0;\r\n                b.data = b.data.elementCount === 0 ? b.data : Structure.Empty;\r\n            }\r\n            else {\r\n                updated = true;\r\n                b.data = StructureElement.Bundle.toStructure(newParams.type.params, a);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (updated) {\r\n        if (newParams.nullIfEmpty && b.data.elementCount === 0)\r\n            return StateTransformer.UpdateResult.Null;\r\n        b.description = Structure.elementDescription(b.data);\r\n    }\r\n    if (oldParams.label !== newParams.label) {\r\n        updated = true;\r\n        b.label = \"\" + (newParams.label || b.label);\r\n    }\r\n    return updated ? StateTransformer.UpdateResult.Updated : StateTransformer.UpdateResult.Unchanged;\r\n}\r\n//# sourceMappingURL=structure-component.js.map"]},"metadata":{},"sourceType":"module"}