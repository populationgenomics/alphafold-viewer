{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../../mol-task';\nimport { EdgeIdInfo, CubeEdges, EdgeTable, TriTable } from './tables';\nimport { defaults } from '../../../mol-util';\nimport { MarchinCubesMeshBuilder, MarchinCubesLinesBuilder } from './builder';\n\nfunction getInputParams(params) {\n  return __assign(__assign({}, params), {\n    bottomLeft: defaults(params.bottomLeft, [0, 0, 0]),\n    topRight: defaults(params.topRight, params.scalarField.space.dimensions)\n  });\n}\n\nfunction getExtent(inputParams) {\n  return {\n    dX: inputParams.topRight[0] - inputParams.bottomLeft[0],\n    dY: inputParams.topRight[1] - inputParams.bottomLeft[1],\n    dZ: inputParams.topRight[2] - inputParams.bottomLeft[2]\n  };\n}\n\nexport function computeMarchingCubesMesh(params, mesh) {\n  var _this = this;\n\n  return Task.create('Marching Cubes Mesh', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var inputParams, _a, dX, dY, dZ, vertexChunkSize, builder;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            inputParams = getInputParams(params);\n            _a = getExtent(inputParams), dX = _a.dX, dY = _a.dY, dZ = _a.dZ;\n            vertexChunkSize = Math.min(262144, Math.max(dX * dY * dZ / 32, 1024));\n            builder = MarchinCubesMeshBuilder(vertexChunkSize, mesh);\n            return [4\n            /*yield*/\n            , new MarchingCubesComputation(ctx, builder, inputParams).run()];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , builder.get()];\n        }\n      });\n    });\n  });\n}\nexport function computeMarchingCubesLines(params, lines) {\n  var _this = this;\n\n  return Task.create('Marching Cubes Lines', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var inputParams, _a, dX, dY, dZ, vertexChunkSize, builder;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            inputParams = getInputParams(params);\n            _a = getExtent(inputParams), dX = _a.dX, dY = _a.dY, dZ = _a.dZ;\n            vertexChunkSize = Math.min(262144, Math.max(dX * dY * dZ / 32, 1024));\n            builder = MarchinCubesLinesBuilder(vertexChunkSize, lines);\n            return [4\n            /*yield*/\n            , new MarchingCubesComputation(ctx, builder, inputParams).run()];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , builder.get()];\n        }\n      });\n    });\n  });\n}\n\nvar MarchingCubesComputation =\n/** @class */\nfunction () {\n  function MarchingCubesComputation(ctx, builder, params) {\n    this.ctx = ctx;\n    this.minX = 0;\n    this.minY = 0;\n    this.minZ = 0;\n    this.maxX = 0;\n    this.maxY = 0;\n    this.maxZ = 0;\n    this.state = new MarchingCubesState(builder, params);\n    this.minX = params.bottomLeft[0];\n    this.minY = params.bottomLeft[1];\n    this.minZ = params.bottomLeft[2];\n    this.maxX = params.topRight[0] - 1;\n    this.maxY = params.topRight[1] - 1;\n    this.maxZ = params.topRight[2] - 1;\n    this.size = (this.maxX - this.minX) * (this.maxY - this.minY) * (this.maxZ - this.minZ);\n    this.sliceSize = (this.maxX - this.minX) * (this.maxY - this.minY);\n  }\n\n  MarchingCubesComputation.prototype.doSlices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var done, k;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            done = 0;\n            this.edgeFilter = 15;\n            k = this.minZ;\n            _a.label = 1;\n\n          case 1:\n            if (!(k < this.maxZ)) return [3\n            /*break*/\n            , 4];\n            this.slice(k);\n            done += this.sliceSize;\n            if (!this.ctx.shouldUpdate) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.ctx.update({\n              message: 'Computing surface...',\n              current: done,\n              max: this.size\n            })];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            k++, this.edgeFilter &= ~4;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MarchingCubesComputation.prototype.slice = function (k) {\n    this.edgeFilter |= 2;\n\n    for (var j = this.minY; j < this.maxY; j++, this.edgeFilter &= ~2) {\n      this.edgeFilter |= 1;\n\n      for (var i = this.minX; i < this.maxX; i++, this.edgeFilter &= ~1) {\n        this.state.processCell(i, j, k, this.edgeFilter);\n      }\n    }\n\n    this.state.clearEdgeVertexIndexSlice(k);\n  };\n\n  MarchingCubesComputation.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.doSlices()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return MarchingCubesComputation;\n}();\n\nvar MarchingCubesState =\n/** @class */\nfunction () {\n  function MarchingCubesState(builder, params) {\n    this.builder = builder;\n    this.vertList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.i = 0;\n    this.j = 0;\n    this.k = 0;\n    var dims = params.scalarField.space.dimensions;\n    this.nX = dims[0];\n    this.nY = dims[1];\n    this.nZ = dims[2];\n    this.isoLevel = params.isoLevel;\n    this.scalarFieldGet = params.scalarField.space.get;\n    this.scalarField = params.scalarField.data;\n\n    if (params.idField) {\n      this.idField = params.idField.data;\n      this.idFieldGet = params.idField.space.get;\n    } // two layers of vertex indices. Each vertex has 3 edges associated.\n\n\n    this.verticesOnEdges = new Int32Array(3 * this.nX * this.nY * 2);\n  }\n\n  MarchingCubesState.prototype.get3dOffsetFromEdgeInfo = function (index) {\n    return this.nX * ((this.k + index.k) % 2 * this.nY + this.j + index.j) + this.i + index.i;\n  };\n  /**\r\n   * This clears the \"vertex index buffer\" for the slice that will not be accessed anymore.\r\n   */\n\n\n  MarchingCubesState.prototype.clearEdgeVertexIndexSlice = function (k) {\n    // clear either the top or bottom half of the buffer...\n    var start = k % 2 === 0 ? 0 : 3 * this.nX * this.nY;\n    var end = k % 2 === 0 ? 3 * this.nX * this.nY : this.verticesOnEdges.length;\n    this.verticesOnEdges.fill(0, start, end);\n  };\n\n  MarchingCubesState.prototype.interpolate = function (edgeNum) {\n    var info = EdgeIdInfo[edgeNum];\n    var edgeId = 3 * this.get3dOffsetFromEdgeInfo(info) + info.e;\n    var ret = this.verticesOnEdges[edgeId];\n    if (ret > 0) return ret - 1;\n    var sf = this.scalarField;\n    var sfg = this.scalarFieldGet;\n    var edge = CubeEdges[edgeNum];\n    var a = edge.a,\n        b = edge.b;\n    var li = a.i + this.i,\n        lj = a.j + this.j,\n        lk = a.k + this.k;\n    var hi = b.i + this.i,\n        hj = b.j + this.j,\n        hk = b.k + this.k;\n    var v0 = sfg(sf, li, lj, lk);\n    var v1 = sfg(sf, hi, hj, hk);\n    var t = (this.isoLevel - v0) / (v0 - v1);\n\n    if (this.idField) {\n      var u = this.idFieldGet(this.idField, li, lj, lk);\n      var v = this.idFieldGet(this.idField, hi, hj, hk);\n      var a_1 = t < 0.5 ? u : v; // -1 means 'no id', check if the other cell has an id\n\n      if (a_1 === -1) a_1 = t < 0.5 ? v : u; // -2 means 'ignore this cell'\n\n      if (a_1 === -2) return -1;\n      this.builder.addGroup(a_1);\n    } else {\n      this.builder.addGroup(0);\n    }\n\n    var id = this.builder.addVertex(li + t * (li - hi), lj + t * (lj - hj), lk + t * (lk - hk));\n    this.verticesOnEdges[edgeId] = id + 1; // TODO cache scalarField differences for slices\n    // TODO make calculation optional\n\n    var n0x = sfg(sf, Math.max(0, li - 1), lj, lk) - sfg(sf, Math.min(this.nX - 1, li + 1), lj, lk);\n    var n0y = sfg(sf, li, Math.max(0, lj - 1), lk) - sfg(sf, li, Math.min(this.nY - 1, lj + 1), lk);\n    var n0z = sfg(sf, li, lj, Math.max(0, lk - 1)) - sfg(sf, li, lj, Math.min(this.nZ, lk + 1));\n    var n1x = sfg(sf, Math.max(0, hi - 1), hj, hk) - sfg(sf, Math.min(this.nX - 1, hi + 1), hj, hk);\n    var n1y = sfg(sf, hi, Math.max(0, hj - 1), hk) - sfg(sf, hi, Math.min(this.nY - 1, hj + 1), hk);\n    var n1z = sfg(sf, hi, hj, Math.max(0, hk - 1)) - sfg(sf, hi, hj, Math.min(this.nZ - 1, hk + 1));\n    var nx = n0x + t * (n0x - n1x);\n    var ny = n0y + t * (n0y - n1y);\n    var nz = n0z + t * (n0z - n1z); // ensure normal-direction is the same for negative and positive iso-levels\n\n    if (this.isoLevel >= 0) {\n      this.builder.addNormal(nx, ny, nz);\n    } else {\n      this.builder.addNormal(-nx, -ny, -nz);\n    }\n\n    return id;\n  };\n\n  MarchingCubesState.prototype.get = function (i, j, k) {\n    return this.scalarFieldGet(this.scalarField, i, j, k);\n  };\n\n  MarchingCubesState.prototype.processCell = function (i, j, k, edgeFilter) {\n    var tableIndex = 0;\n    if (this.get(i, j, k) < this.isoLevel) tableIndex |= 1;\n    if (this.get(i + 1, j, k) < this.isoLevel) tableIndex |= 2;\n    if (this.get(i + 1, j + 1, k) < this.isoLevel) tableIndex |= 4;\n    if (this.get(i, j + 1, k) < this.isoLevel) tableIndex |= 8;\n    if (this.get(i, j, k + 1) < this.isoLevel) tableIndex |= 16;\n    if (this.get(i + 1, j, k + 1) < this.isoLevel) tableIndex |= 32;\n    if (this.get(i + 1, j + 1, k + 1) < this.isoLevel) tableIndex |= 64;\n    if (this.get(i, j + 1, k + 1) < this.isoLevel) tableIndex |= 128;\n    if (tableIndex === 0 || tableIndex === 255) return;\n    this.i = i;\n    this.j = j;\n    this.k = k;\n    var edgeInfo = EdgeTable[tableIndex];\n    if ((edgeInfo & 1) > 0) this.vertList[0] = this.interpolate(0); // 0 1\n\n    if ((edgeInfo & 2) > 0) this.vertList[1] = this.interpolate(1); // 1 2\n\n    if ((edgeInfo & 4) > 0) this.vertList[2] = this.interpolate(2); // 2 3\n\n    if ((edgeInfo & 8) > 0) this.vertList[3] = this.interpolate(3); // 0 3\n\n    if ((edgeInfo & 16) > 0) this.vertList[4] = this.interpolate(4); // 4 5\n\n    if ((edgeInfo & 32) > 0) this.vertList[5] = this.interpolate(5); // 5 6\n\n    if ((edgeInfo & 64) > 0) this.vertList[6] = this.interpolate(6); // 6 7\n\n    if ((edgeInfo & 128) > 0) this.vertList[7] = this.interpolate(7); // 4 7\n\n    if ((edgeInfo & 256) > 0) this.vertList[8] = this.interpolate(8); // 0 4\n\n    if ((edgeInfo & 512) > 0) this.vertList[9] = this.interpolate(9); // 1 5\n\n    if ((edgeInfo & 1024) > 0) this.vertList[10] = this.interpolate(10); // 2 6\n\n    if ((edgeInfo & 2048) > 0) this.vertList[11] = this.interpolate(11); // 3 7\n\n    var triInfo = TriTable[tableIndex];\n\n    for (var t = 0; t < triInfo.length; t += 3) {\n      var l = triInfo[t],\n          m = triInfo[t + 1],\n          n = triInfo[t + 2]; // ensure winding-order is the same for negative and positive iso-levels\n\n      if (this.isoLevel >= 0) {\n        this.builder.addTriangle(this.vertList, l, m, n, edgeFilter);\n      } else {\n        this.builder.addTriangle(this.vertList, n, m, l, edgeFilter);\n      }\n    }\n  };\n\n  return MarchingCubesState;\n}();","map":{"version":3,"sources":["../../../../src/mol-geo/util/marching-cubes/algorithm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../../mol-task';\r\nimport { EdgeIdInfo, CubeEdges, EdgeTable, TriTable } from './tables';\r\nimport { defaults } from '../../../mol-util';\r\nimport { MarchinCubesMeshBuilder, MarchinCubesLinesBuilder } from './builder';\r\nfunction getInputParams(params) {\r\n    return __assign(__assign({}, params), { bottomLeft: defaults(params.bottomLeft, [0, 0, 0]), topRight: defaults(params.topRight, params.scalarField.space.dimensions) });\r\n}\r\nfunction getExtent(inputParams) {\r\n    return {\r\n        dX: inputParams.topRight[0] - inputParams.bottomLeft[0],\r\n        dY: inputParams.topRight[1] - inputParams.bottomLeft[1],\r\n        dZ: inputParams.topRight[2] - inputParams.bottomLeft[2]\r\n    };\r\n}\r\nexport function computeMarchingCubesMesh(params, mesh) {\r\n    var _this = this;\r\n    return Task.create('Marching Cubes Mesh', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var inputParams, _a, dX, dY, dZ, vertexChunkSize, builder;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    inputParams = getInputParams(params);\r\n                    _a = getExtent(inputParams), dX = _a.dX, dY = _a.dY, dZ = _a.dZ;\r\n                    vertexChunkSize = Math.min(262144, Math.max(dX * dY * dZ / 32, 1024));\r\n                    builder = MarchinCubesMeshBuilder(vertexChunkSize, mesh);\r\n                    return [4 /*yield*/, (new MarchingCubesComputation(ctx, builder, inputParams)).run()];\r\n                case 1:\r\n                    _b.sent();\r\n                    return [2 /*return*/, builder.get()];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nexport function computeMarchingCubesLines(params, lines) {\r\n    var _this = this;\r\n    return Task.create('Marching Cubes Lines', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var inputParams, _a, dX, dY, dZ, vertexChunkSize, builder;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    inputParams = getInputParams(params);\r\n                    _a = getExtent(inputParams), dX = _a.dX, dY = _a.dY, dZ = _a.dZ;\r\n                    vertexChunkSize = Math.min(262144, Math.max(dX * dY * dZ / 32, 1024));\r\n                    builder = MarchinCubesLinesBuilder(vertexChunkSize, lines);\r\n                    return [4 /*yield*/, (new MarchingCubesComputation(ctx, builder, inputParams)).run()];\r\n                case 1:\r\n                    _b.sent();\r\n                    return [2 /*return*/, builder.get()];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nvar MarchingCubesComputation = /** @class */ (function () {\r\n    function MarchingCubesComputation(ctx, builder, params) {\r\n        this.ctx = ctx;\r\n        this.minX = 0;\r\n        this.minY = 0;\r\n        this.minZ = 0;\r\n        this.maxX = 0;\r\n        this.maxY = 0;\r\n        this.maxZ = 0;\r\n        this.state = new MarchingCubesState(builder, params);\r\n        this.minX = params.bottomLeft[0];\r\n        this.minY = params.bottomLeft[1];\r\n        this.minZ = params.bottomLeft[2];\r\n        this.maxX = params.topRight[0] - 1;\r\n        this.maxY = params.topRight[1] - 1;\r\n        this.maxZ = params.topRight[2] - 1;\r\n        this.size = (this.maxX - this.minX) * (this.maxY - this.minY) * (this.maxZ - this.minZ);\r\n        this.sliceSize = (this.maxX - this.minX) * (this.maxY - this.minY);\r\n    }\r\n    MarchingCubesComputation.prototype.doSlices = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var done, k;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        done = 0;\r\n                        this.edgeFilter = 15;\r\n                        k = this.minZ;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(k < this.maxZ)) return [3 /*break*/, 4];\r\n                        this.slice(k);\r\n                        done += this.sliceSize;\r\n                        if (!this.ctx.shouldUpdate) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.ctx.update({ message: 'Computing surface...', current: done, max: this.size })];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        k++, this.edgeFilter &= ~4;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MarchingCubesComputation.prototype.slice = function (k) {\r\n        this.edgeFilter |= 2;\r\n        for (var j = this.minY; j < this.maxY; j++, this.edgeFilter &= ~2) {\r\n            this.edgeFilter |= 1;\r\n            for (var i = this.minX; i < this.maxX; i++, this.edgeFilter &= ~1) {\r\n                this.state.processCell(i, j, k, this.edgeFilter);\r\n            }\r\n        }\r\n        this.state.clearEdgeVertexIndexSlice(k);\r\n    };\r\n    MarchingCubesComputation.prototype.run = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.doSlices()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return MarchingCubesComputation;\r\n}());\r\nvar MarchingCubesState = /** @class */ (function () {\r\n    function MarchingCubesState(builder, params) {\r\n        this.builder = builder;\r\n        this.vertList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this.i = 0;\r\n        this.j = 0;\r\n        this.k = 0;\r\n        var dims = params.scalarField.space.dimensions;\r\n        this.nX = dims[0];\r\n        this.nY = dims[1];\r\n        this.nZ = dims[2];\r\n        this.isoLevel = params.isoLevel;\r\n        this.scalarFieldGet = params.scalarField.space.get;\r\n        this.scalarField = params.scalarField.data;\r\n        if (params.idField) {\r\n            this.idField = params.idField.data;\r\n            this.idFieldGet = params.idField.space.get;\r\n        }\r\n        // two layers of vertex indices. Each vertex has 3 edges associated.\r\n        this.verticesOnEdges = new Int32Array(3 * this.nX * this.nY * 2);\r\n    }\r\n    MarchingCubesState.prototype.get3dOffsetFromEdgeInfo = function (index) {\r\n        return (this.nX * (((this.k + index.k) % 2) * this.nY + this.j + index.j) + this.i + index.i);\r\n    };\r\n    /**\r\n     * This clears the \"vertex index buffer\" for the slice that will not be accessed anymore.\r\n     */\r\n    MarchingCubesState.prototype.clearEdgeVertexIndexSlice = function (k) {\r\n        // clear either the top or bottom half of the buffer...\r\n        var start = k % 2 === 0 ? 0 : 3 * this.nX * this.nY;\r\n        var end = k % 2 === 0 ? 3 * this.nX * this.nY : this.verticesOnEdges.length;\r\n        this.verticesOnEdges.fill(0, start, end);\r\n    };\r\n    MarchingCubesState.prototype.interpolate = function (edgeNum) {\r\n        var info = EdgeIdInfo[edgeNum];\r\n        var edgeId = 3 * this.get3dOffsetFromEdgeInfo(info) + info.e;\r\n        var ret = this.verticesOnEdges[edgeId];\r\n        if (ret > 0)\r\n            return ret - 1;\r\n        var sf = this.scalarField;\r\n        var sfg = this.scalarFieldGet;\r\n        var edge = CubeEdges[edgeNum];\r\n        var a = edge.a, b = edge.b;\r\n        var li = a.i + this.i, lj = a.j + this.j, lk = a.k + this.k;\r\n        var hi = b.i + this.i, hj = b.j + this.j, hk = b.k + this.k;\r\n        var v0 = sfg(sf, li, lj, lk);\r\n        var v1 = sfg(sf, hi, hj, hk);\r\n        var t = (this.isoLevel - v0) / (v0 - v1);\r\n        if (this.idField) {\r\n            var u = this.idFieldGet(this.idField, li, lj, lk);\r\n            var v = this.idFieldGet(this.idField, hi, hj, hk);\r\n            var a_1 = t < 0.5 ? u : v;\r\n            // -1 means 'no id', check if the other cell has an id\r\n            if (a_1 === -1)\r\n                a_1 = t < 0.5 ? v : u;\r\n            // -2 means 'ignore this cell'\r\n            if (a_1 === -2)\r\n                return -1;\r\n            this.builder.addGroup(a_1);\r\n        }\r\n        else {\r\n            this.builder.addGroup(0);\r\n        }\r\n        var id = this.builder.addVertex(li + t * (li - hi), lj + t * (lj - hj), lk + t * (lk - hk));\r\n        this.verticesOnEdges[edgeId] = id + 1;\r\n        // TODO cache scalarField differences for slices\r\n        // TODO make calculation optional\r\n        var n0x = sfg(sf, Math.max(0, li - 1), lj, lk) - sfg(sf, Math.min(this.nX - 1, li + 1), lj, lk);\r\n        var n0y = sfg(sf, li, Math.max(0, lj - 1), lk) - sfg(sf, li, Math.min(this.nY - 1, lj + 1), lk);\r\n        var n0z = sfg(sf, li, lj, Math.max(0, lk - 1)) - sfg(sf, li, lj, Math.min(this.nZ, lk + 1));\r\n        var n1x = sfg(sf, Math.max(0, hi - 1), hj, hk) - sfg(sf, Math.min(this.nX - 1, hi + 1), hj, hk);\r\n        var n1y = sfg(sf, hi, Math.max(0, hj - 1), hk) - sfg(sf, hi, Math.min(this.nY - 1, hj + 1), hk);\r\n        var n1z = sfg(sf, hi, hj, Math.max(0, hk - 1)) - sfg(sf, hi, hj, Math.min(this.nZ - 1, hk + 1));\r\n        var nx = n0x + t * (n0x - n1x);\r\n        var ny = n0y + t * (n0y - n1y);\r\n        var nz = n0z + t * (n0z - n1z);\r\n        // ensure normal-direction is the same for negative and positive iso-levels\r\n        if (this.isoLevel >= 0) {\r\n            this.builder.addNormal(nx, ny, nz);\r\n        }\r\n        else {\r\n            this.builder.addNormal(-nx, -ny, -nz);\r\n        }\r\n        return id;\r\n    };\r\n    MarchingCubesState.prototype.get = function (i, j, k) {\r\n        return this.scalarFieldGet(this.scalarField, i, j, k);\r\n    };\r\n    MarchingCubesState.prototype.processCell = function (i, j, k, edgeFilter) {\r\n        var tableIndex = 0;\r\n        if (this.get(i, j, k) < this.isoLevel)\r\n            tableIndex |= 1;\r\n        if (this.get(i + 1, j, k) < this.isoLevel)\r\n            tableIndex |= 2;\r\n        if (this.get(i + 1, j + 1, k) < this.isoLevel)\r\n            tableIndex |= 4;\r\n        if (this.get(i, j + 1, k) < this.isoLevel)\r\n            tableIndex |= 8;\r\n        if (this.get(i, j, k + 1) < this.isoLevel)\r\n            tableIndex |= 16;\r\n        if (this.get(i + 1, j, k + 1) < this.isoLevel)\r\n            tableIndex |= 32;\r\n        if (this.get(i + 1, j + 1, k + 1) < this.isoLevel)\r\n            tableIndex |= 64;\r\n        if (this.get(i, j + 1, k + 1) < this.isoLevel)\r\n            tableIndex |= 128;\r\n        if (tableIndex === 0 || tableIndex === 255)\r\n            return;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.k = k;\r\n        var edgeInfo = EdgeTable[tableIndex];\r\n        if ((edgeInfo & 1) > 0)\r\n            this.vertList[0] = this.interpolate(0); // 0 1\r\n        if ((edgeInfo & 2) > 0)\r\n            this.vertList[1] = this.interpolate(1); // 1 2\r\n        if ((edgeInfo & 4) > 0)\r\n            this.vertList[2] = this.interpolate(2); // 2 3\r\n        if ((edgeInfo & 8) > 0)\r\n            this.vertList[3] = this.interpolate(3); // 0 3\r\n        if ((edgeInfo & 16) > 0)\r\n            this.vertList[4] = this.interpolate(4); // 4 5\r\n        if ((edgeInfo & 32) > 0)\r\n            this.vertList[5] = this.interpolate(5); // 5 6\r\n        if ((edgeInfo & 64) > 0)\r\n            this.vertList[6] = this.interpolate(6); // 6 7\r\n        if ((edgeInfo & 128) > 0)\r\n            this.vertList[7] = this.interpolate(7); // 4 7\r\n        if ((edgeInfo & 256) > 0)\r\n            this.vertList[8] = this.interpolate(8); // 0 4\r\n        if ((edgeInfo & 512) > 0)\r\n            this.vertList[9] = this.interpolate(9); // 1 5\r\n        if ((edgeInfo & 1024) > 0)\r\n            this.vertList[10] = this.interpolate(10); // 2 6\r\n        if ((edgeInfo & 2048) > 0)\r\n            this.vertList[11] = this.interpolate(11); // 3 7\r\n        var triInfo = TriTable[tableIndex];\r\n        for (var t = 0; t < triInfo.length; t += 3) {\r\n            var l = triInfo[t], m = triInfo[t + 1], n = triInfo[t + 2];\r\n            // ensure winding-order is the same for negative and positive iso-levels\r\n            if (this.isoLevel >= 0) {\r\n                this.builder.addTriangle(this.vertList, l, m, n, edgeFilter);\r\n            }\r\n            else {\r\n                this.builder.addTriangle(this.vertList, n, m, l, edgeFilter);\r\n            }\r\n        }\r\n    };\r\n    return MarchingCubesState;\r\n}());\r\n//# sourceMappingURL=algorithm.js.map"]},"metadata":{},"sourceType":"module"}