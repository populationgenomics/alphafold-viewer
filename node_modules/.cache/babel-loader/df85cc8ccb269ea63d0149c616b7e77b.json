{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { pdbToMmCif } from './pdb/to-cif';\nimport { Task } from '../../mol-task';\nimport { MmcifFormat } from './mmcif';\nimport { createModels } from './basic/parser';\nimport { Column } from '../../mol-data/db';\nimport { AtomPartialCharge } from './property/partial-charge';\nexport { PdbFormat };\nvar PdbFormat;\n\n(function (PdbFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'pdb';\n  }\n\n  PdbFormat.is = is;\n\n  function create(pdb) {\n    return {\n      kind: 'pdb',\n      name: pdb.id || '',\n      data: pdb\n    };\n  }\n\n  PdbFormat.create = create;\n})(PdbFormat || (PdbFormat = {}));\n\nexport function trajectoryFromPDB(pdb) {\n  var _this = this;\n\n  return Task.create('Parse PDB', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var cif, format, models, partial_charge, first, srcIndex, isIdentity, srcIndexArray, q_1, partialCharge;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , ctx.update('Converting to mmCIF')];\n\n          case 1:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , pdbToMmCif(pdb)];\n\n          case 2:\n            cif = _b.sent();\n            format = MmcifFormat.fromFrame(cif, undefined, PdbFormat.create(pdb));\n            return [4\n            /*yield*/\n            , createModels(format.data.db, format, ctx)];\n\n          case 3:\n            models = _b.sent();\n            partial_charge = (_a = cif.categories['atom_site']) === null || _a === void 0 ? void 0 : _a.getField('partial_charge');\n\n            if (partial_charge) {\n              // TODO works only for single, unsorted model, to work generally\n              //      would need to do model splitting again\n              if (models.frameCount === 1) {\n                first = models.representative;\n                srcIndex = first.atomicHierarchy.atomSourceIndex;\n                isIdentity = Column.isIdentity(srcIndex);\n                srcIndexArray = isIdentity ? void 0 : srcIndex.toArray({\n                  array: Int32Array\n                });\n                q_1 = partial_charge.toFloatArray();\n                partialCharge = srcIndexArray ? Column.ofFloatArray(Column.mapToArray(srcIndex, function (i) {\n                  return q_1[i];\n                }, Float32Array)) : Column.ofFloatArray(q_1);\n                AtomPartialCharge.Provider.set(first, {\n                  data: partialCharge,\n                  type: 'GASTEIGER' // from PDBQT\n\n                });\n              }\n            }\n\n            return [2\n            /*return*/\n            , models];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/pdb.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAGH,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,WAAT,QAA4B,SAA5B;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AAIA,SAAS,SAAT;AAIA,IAAU,SAAV;;AAAA,CAAA,UAAU,SAAV,EAAmB;AACf,WAAgB,EAAhB,CAAmB,CAAnB,EAAkC;AAC9B,WAAO,CAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,MAAY,KAAnB;AACH;;AAFe,EAAA,SAAA,CAAA,EAAA,GAAE,EAAF;;AAIhB,WAAgB,MAAhB,CAAuB,GAAvB,EAAmC;AAC/B,WAAO;AAAE,MAAA,IAAI,EAAE,KAAR;AAAe,MAAA,IAAI,EAAE,GAAG,CAAC,EAAJ,IAAU,EAA/B;AAAmC,MAAA,IAAI,EAAE;AAAzC,KAAP;AACH;;AAFe,EAAA,SAAA,CAAA,MAAA,GAAM,MAAN;AAGnB,CARD,EAAU,SAAS,KAAT,SAAS,GAAA,EAAA,CAAnB;;AAUA,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAwC;AAA9C,MAAA,KAAA,GAAA,IAAA;;AACI,SAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AACrC,mBAAA,CAAA;AAAA;AAAA,cAAM,GAAG,CAAC,MAAJ,CAAW,qBAAX,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACY,mBAAA,CAAA;AAAA;AAAA,cAAM,UAAU,CAAC,GAAD,CAAhB,CAAA;;;AAAN,YAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;AACA,YAAA,MAAM,GAAG,WAAW,CAAC,SAAZ,CAAsB,GAAtB,EAA2B,SAA3B,EAAsC,SAAS,CAAC,MAAV,CAAiB,GAAjB,CAAtC,CAAT;AACS,mBAAA,CAAA;AAAA;AAAA,cAAM,YAAY,CAAC,MAAM,CAAC,IAAP,CAAY,EAAb,EAAiB,MAAjB,EAAyB,GAAzB,CAAlB,CAAA;;;AAAT,YAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,YAAA,cAAc,GAAG,CAAA,EAAA,GAAA,GAAG,CAAC,UAAJ,CAAe,WAAf,CAAA,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,QAAF,CAAW,gBAAX,CAA5C;;AACN,gBAAI,cAAJ,EAAoB;AAChB;AACA;AACA,kBAAI,MAAM,CAAC,UAAP,KAAsB,CAA1B,EAA6B;AACnB,gBAAA,KAAK,GAAG,MAAM,CAAC,cAAf;AACA,gBAAA,QAAQ,GAAG,KAAK,CAAC,eAAN,CAAsB,eAAjC;AACA,gBAAA,UAAU,GAAG,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAAb;AACA,gBAAA,aAAa,GAAG,UAAU,GAAG,KAAK,CAAR,GAAY,QAAQ,CAAC,OAAT,CAAiB;AAAE,kBAAA,KAAK,EAAE;AAAT,iBAAjB,CAAtC;AAEA,gBAAA,GAAA,GAAI,cAAc,CAAC,YAAf,EAAJ;AACA,gBAAA,aAAa,GAAG,aAAa,GAC7B,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,UAAP,CAAkB,QAAlB,EAA4B,UAAA,CAAA,EAAC;AAAI,yBAAA,GAAC,CAAD,CAAC,CAAD;AAAI,iBAArC,EAAuC,YAAvC,CAApB,CAD6B,GAE7B,MAAM,CAAC,YAAP,CAAoB,GAApB,CAFA;AAIN,gBAAA,iBAAiB,CAAC,QAAlB,CAA2B,GAA3B,CAA+B,KAA/B,EAAsC;AAClC,kBAAA,IAAI,EAAE,aAD4B;AAElC,kBAAA,IAAI,EAAE,WAF4B,CAEhB;;AAFgB,iBAAtC;AAIH;AACJ;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,MAAP,CAAA;;;KA1BqC,CAAA;AA2BxC,GA3BM,CAAP;AA4BH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { pdbToMmCif } from './pdb/to-cif';\r\nimport { Task } from '../../mol-task';\r\nimport { MmcifFormat } from './mmcif';\r\nimport { createModels } from './basic/parser';\r\nimport { Column } from '../../mol-data/db';\r\nimport { AtomPartialCharge } from './property/partial-charge';\r\nexport { PdbFormat };\r\nvar PdbFormat;\r\n(function (PdbFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'pdb';\r\n    }\r\n    PdbFormat.is = is;\r\n    function create(pdb) {\r\n        return { kind: 'pdb', name: pdb.id || '', data: pdb };\r\n    }\r\n    PdbFormat.create = create;\r\n})(PdbFormat || (PdbFormat = {}));\r\nexport function trajectoryFromPDB(pdb) {\r\n    var _this = this;\r\n    return Task.create('Parse PDB', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var cif, format, models, partial_charge, first, srcIndex, isIdentity, srcIndexArray, q_1, partialCharge;\r\n        var _a;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, ctx.update('Converting to mmCIF')];\r\n                case 1:\r\n                    _b.sent();\r\n                    return [4 /*yield*/, pdbToMmCif(pdb)];\r\n                case 2:\r\n                    cif = _b.sent();\r\n                    format = MmcifFormat.fromFrame(cif, undefined, PdbFormat.create(pdb));\r\n                    return [4 /*yield*/, createModels(format.data.db, format, ctx)];\r\n                case 3:\r\n                    models = _b.sent();\r\n                    partial_charge = (_a = cif.categories['atom_site']) === null || _a === void 0 ? void 0 : _a.getField('partial_charge');\r\n                    if (partial_charge) {\r\n                        // TODO works only for single, unsorted model, to work generally\r\n                        //      would need to do model splitting again\r\n                        if (models.frameCount === 1) {\r\n                            first = models.representative;\r\n                            srcIndex = first.atomicHierarchy.atomSourceIndex;\r\n                            isIdentity = Column.isIdentity(srcIndex);\r\n                            srcIndexArray = isIdentity ? void 0 : srcIndex.toArray({ array: Int32Array });\r\n                            q_1 = partial_charge.toFloatArray();\r\n                            partialCharge = srcIndexArray\r\n                                ? Column.ofFloatArray(Column.mapToArray(srcIndex, function (i) { return q_1[i]; }, Float32Array))\r\n                                : Column.ofFloatArray(q_1);\r\n                            AtomPartialCharge.Provider.set(first, {\r\n                                data: partialCharge,\r\n                                type: 'GASTEIGER' // from PDBQT\r\n                            });\r\n                        }\r\n                    }\r\n                    return [2 /*return*/, models];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=pdb.js.map"]},"metadata":{},"sourceType":"module"}