{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { ColumnHelpers } from '../../../../../mol-data/db';\nimport { trimStr } from '../tokenizer';\nimport { parseIntSkipLeadingWhitespace, parseFloatSkipLeadingWhitespace } from '../number-parser';\nexport function FixedColumnProvider(lines) {\n  return function (offset, width, type) {\n    return FixedColumn(lines, offset, width, type);\n  };\n}\nexport function FixedColumn(lines, offset, width, schema) {\n  var data = lines.data,\n      indices = lines.indices,\n      rowCount = lines.count;\n  var type = schema.valueType;\n  var value = type === 'str' ? function (row) {\n    var s = indices[2 * row] + offset,\n        le = indices[2 * row + 1];\n    if (s >= le) return '';\n    var e = s + width;\n    if (e > le) e = le;\n    return trimStr(data, s, e);\n  } : type === 'int' ? function (row) {\n    var s = indices[2 * row] + offset;\n    if (s > indices[2 * row + 1]) return 0;\n    return parseIntSkipLeadingWhitespace(data, s, s + width);\n  } : function (row) {\n    var s = indices[2 * row] + offset;\n    if (s > indices[2 * row + 1]) return 0;\n    return parseFloatSkipLeadingWhitespace(data, s, s + width);\n  };\n  return {\n    schema: schema,\n    __array: void 0,\n    isDefined: true,\n    rowCount: rowCount,\n    value: value,\n    valueKind: function (row) {\n      return 0\n      /* Present */\n      ;\n    },\n    toArray: function (params) {\n      return ColumnHelpers.createAndFillArray(rowCount, value, params);\n    },\n    areValuesEqual: function (rowA, rowB) {\n      return value(rowA) === value(rowB);\n    }\n  };\n}","map":{"version":3,"sources":["../../../../../../src/mol-io/reader/common/text/column/fixed.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAiB,aAAjB,QAAsC,4BAAtC;AACA,SAAS,OAAT,QAAgC,cAAhC;AACA,SAAS,6BAAT,EAAwC,+BAAxC,QAA+E,kBAA/E;AAEA,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAA2C;AAC7C,SAAO,UAAkC,MAAlC,EAAkD,KAAlD,EAAiE,IAAjE,EAAwE;AAC3E,WAAO,WAAW,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,IAAvB,CAAlB;AACH,GAFD;AAGH;AAED,OAAM,SAAU,WAAV,CAA+C,KAA/C,EAA8D,MAA9D,EAA8E,KAA9E,EAA6F,MAA7F,EAAsG;AAChG,MAAA,IAAI,GAA+B,KAAK,CAApC,IAAJ;AAAA,MAAM,OAAO,GAAsB,KAAK,CAA3B,OAAb;AAAA,MAAsB,QAAQ,GAAK,KAAK,CAAV,KAA9B;AACA,MAAW,IAAI,GAAK,MAAM,CAAX,SAAf;AAER,MAAM,KAAK,GAA4B,IAAI,KAAK,KAAT,GAAiB,UAAA,GAAA,EAAG;AACvD,QAAM,CAAC,GAAG,OAAO,CAAC,IAAI,GAAL,CAAP,GAAmB,MAA7B;AAAA,QAAqC,EAAE,GAAG,OAAO,CAAC,IAAI,GAAJ,GAAU,CAAX,CAAjD;AACA,QAAI,CAAC,IAAI,EAAT,EAAa,OAAO,EAAP;AACb,QAAI,CAAC,GAAG,CAAC,GAAG,KAAZ;AACA,QAAI,CAAC,GAAG,EAAR,EAAY,CAAC,GAAG,EAAJ;AACZ,WAAO,OAAO,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAd;AACH,GANsC,GAMnC,IAAI,KAAK,KAAT,GAAiB,UAAA,GAAA,EAAG;AACpB,QAAM,CAAC,GAAG,OAAO,CAAC,IAAI,GAAL,CAAP,GAAmB,MAA7B;AACA,QAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAJ,GAAU,CAAX,CAAf,EAA8B,OAAO,CAAP;AAC9B,WAAO,6BAA6B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAC,GAAG,KAAd,CAApC;AACH,GAJG,GAIA,UAAA,GAAA,EAAG;AACH,QAAM,CAAC,GAAG,OAAO,CAAC,IAAI,GAAL,CAAP,GAAmB,MAA7B;AACA,QAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAJ,GAAU,CAAX,CAAf,EAA8B,OAAO,CAAP;AAC9B,WAAO,+BAA+B,CAAC,IAAD,EAAO,CAAP,EAAU,CAAC,GAAG,KAAd,CAAtC;AACH,GAdD;AAeA,SAAO;AACH,IAAA,MAAM,EAAE,MADL;AAEH,IAAA,OAAO,EAAE,KAAK,CAFX;AAGH,IAAA,SAAS,EAAE,IAHR;AAIH,IAAA,QAAQ,EAAA,QAJL;AAKH,IAAA,KAAK,EAAA,KALF;AAMH,IAAA,SAAS,EAAE,UAAA,GAAA,EAAG;AAAI,aAAA;AAAA;AAAA;AAAwB,KANvC;AAOH,IAAA,OAAO,EAAE,UAAA,MAAA,EAAM;AAAI,aAAA,aAAa,CAAC,kBAAd,CAAiC,QAAjC,EAA2C,KAA3C,EAAA,MAAA,CAAA;AAAyD,KAPzE;AAQH,IAAA,cAAc,EAAE,UAAC,IAAD,EAAO,IAAP,EAAW;AAAK,aAAA,KAAK,CAAC,IAAD,CAAL,KAAgB,KAAK,CAArB,IAAqB,CAArB;AAA2B;AARxD,GAAP;AAUH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { ColumnHelpers } from '../../../../../mol-data/db';\r\nimport { trimStr } from '../tokenizer';\r\nimport { parseIntSkipLeadingWhitespace, parseFloatSkipLeadingWhitespace } from '../number-parser';\r\nexport function FixedColumnProvider(lines) {\r\n    return function (offset, width, type) {\r\n        return FixedColumn(lines, offset, width, type);\r\n    };\r\n}\r\nexport function FixedColumn(lines, offset, width, schema) {\r\n    var data = lines.data, indices = lines.indices, rowCount = lines.count;\r\n    var type = schema.valueType;\r\n    var value = type === 'str' ? function (row) {\r\n        var s = indices[2 * row] + offset, le = indices[2 * row + 1];\r\n        if (s >= le)\r\n            return '';\r\n        var e = s + width;\r\n        if (e > le)\r\n            e = le;\r\n        return trimStr(data, s, e);\r\n    } : type === 'int' ? function (row) {\r\n        var s = indices[2 * row] + offset;\r\n        if (s > indices[2 * row + 1])\r\n            return 0;\r\n        return parseIntSkipLeadingWhitespace(data, s, s + width);\r\n    } : function (row) {\r\n        var s = indices[2 * row] + offset;\r\n        if (s > indices[2 * row + 1])\r\n            return 0;\r\n        return parseFloatSkipLeadingWhitespace(data, s, s + width);\r\n    };\r\n    return {\r\n        schema: schema,\r\n        __array: void 0,\r\n        isDefined: true,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: function (row) { return 0 /* Present */; },\r\n        toArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, value, params); },\r\n        areValuesEqual: function (rowA, rowB) { return value(rowA) === value(rowB); }\r\n    };\r\n}\r\n//# sourceMappingURL=fixed.js.map"]},"metadata":{},"sourceType":"module"}