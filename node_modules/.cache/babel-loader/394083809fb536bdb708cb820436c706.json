{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js)\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { StringBuilder } from '../../../../mol-util/string-builder';\nimport { Category } from '../encoder';\nimport { getFieldDigitCount, getIncludedFields, getCategoryInstanceData } from './util';\n\nvar TextEncoder =\n/** @class */\nfunction () {\n  function TextEncoder() {\n    this.builder = StringBuilder.create();\n    this.encoded = false;\n    this.dataBlockCreated = false;\n    this.filter = Category.DefaultFilter;\n    this.formatter = Category.DefaultFormatter;\n    this.isBinary = false;\n    this.binaryEncodingProvider = void 0;\n  }\n\n  TextEncoder.prototype.setFilter = function (filter) {\n    this.filter = filter || Category.DefaultFilter;\n  };\n\n  TextEncoder.prototype.isCategoryIncluded = function (name) {\n    return this.filter.includeCategory(name);\n  };\n\n  TextEncoder.prototype.setFormatter = function (formatter) {\n    this.formatter = formatter || Category.DefaultFormatter;\n  };\n\n  TextEncoder.prototype.startDataBlock = function (header) {\n    this.dataBlockCreated = true;\n    StringBuilder.write(this.builder, \"data_\" + (header || '').replace(/[ \\n\\t]/g, '').toUpperCase() + \"\\n#\\n\");\n  };\n\n  TextEncoder.prototype.writeCategory = function (category, context, options) {\n    if (this.encoded) {\n      throw new Error('The writer contents have already been encoded, no more writing.');\n    }\n\n    if (!this.dataBlockCreated) {\n      throw new Error('No data block created.');\n    }\n\n    if (!(options === null || options === void 0 ? void 0 : options.ignoreFilter) && !this.filter.includeCategory(category.name)) return;\n\n    var _a = getCategoryInstanceData(category, context),\n        instance = _a.instance,\n        rowCount = _a.rowCount,\n        source = _a.source;\n\n    if (!rowCount) return;\n\n    if (rowCount === 1) {\n      writeCifSingleRecord(category, instance, source, this.builder, this.filter, this.formatter);\n    } else {\n      writeCifLoop(category, instance, source, this.builder, this.filter, this.formatter);\n    }\n  };\n\n  TextEncoder.prototype.encode = function () {\n    this.encoded = true;\n  };\n\n  TextEncoder.prototype.writeTo = function (stream) {\n    var chunks = StringBuilder.getChunks(this.builder);\n\n    for (var i = 0, _i = chunks.length; i < _i; i++) {\n      stream.writeString(chunks[i]);\n    }\n  };\n\n  TextEncoder.prototype.getSize = function () {\n    return StringBuilder.getSize(this.builder);\n  };\n\n  TextEncoder.prototype.getData = function () {\n    return StringBuilder.getString(this.builder);\n  };\n\n  return TextEncoder;\n}();\n\nexport { TextEncoder };\n\nfunction writeValue(builder, data, key, f, floatPrecision, index) {\n  var kind = f.valueKind;\n  var p = kind ? kind(key, data) : 0\n  /* Present */\n  ;\n\n  if (p !== 0\n  /* Present */\n  ) {\n    if (p === 1\n    /* NotPresent */\n    ) writeNotPresent(builder);else writeUnknown(builder);\n  } else {\n    var val = f.value(key, data, index);\n    var t = f.type;\n\n    if (t === 0\n    /* Str */\n    ) {\n      if (isMultiline(val)) {\n        writeMultiline(builder, val);\n        return true;\n      } else {\n        return writeChecked(builder, val);\n      }\n    } else if (t === 1\n    /* Int */\n    ) {\n      writeInteger(builder, val);\n    } else {\n      writeFloat(builder, val, floatPrecision);\n    }\n  }\n\n  return false;\n}\n\nfunction getFloatPrecisions(categoryName, fields, formatter) {\n  var ret = [];\n\n  for (var _a = 0, fields_1 = fields; _a < fields_1.length; _a++) {\n    var f = fields_1[_a];\n    var format = formatter.getFormat(categoryName, f.name);\n    if (format && typeof format.digitCount !== 'undefined') ret[ret.length] = f.type === 2\n    /* Float */\n    ? Math.pow(10, Math.max(0, Math.min(format.digitCount, 15))) : 0;else ret[ret.length] = f.type === 2\n    /* Float */\n    ? Math.pow(10, getFieldDigitCount(f)) : 0;\n  }\n\n  return ret;\n}\n\nfunction writeCifSingleRecord(category, instance, source, builder, filter, formatter) {\n  var fields = getIncludedFields(instance);\n  var src = source[0];\n  var data = src.data;\n  var width = fields.reduce(function (w, f) {\n    return filter.includeField(category.name, f.name) ? Math.max(w, f.name.length) : 0;\n  }, 0); // this means no field from this category is included.\n\n  if (width === 0) return;\n  width += category.name.length + 6;\n  var it = src.keys();\n  var key = it.move();\n  var precisions = getFloatPrecisions(category.name, instance.fields, formatter);\n\n  for (var _f = 0; _f < fields.length; _f++) {\n    var f = fields[_f];\n    if (!filter.includeField(category.name, f.name)) continue;\n    StringBuilder.writePadRight(builder, \"_\" + category.name + \".\" + f.name, width);\n    var multiline = writeValue(builder, data, key, f, precisions[_f], 0);\n    if (!multiline) StringBuilder.newline(builder);\n  }\n\n  StringBuilder.write(builder, '#\\n');\n}\n\nfunction writeCifLoop(category, instance, source, builder, filter, formatter) {\n  var fieldSource = getIncludedFields(instance);\n  var fields = filter === Category.DefaultFilter ? fieldSource : fieldSource.filter(function (f) {\n    return filter.includeField(category.name, f.name);\n  });\n  var fieldCount = fields.length;\n  if (fieldCount === 0) return;\n  var precisions = getFloatPrecisions(category.name, fields, formatter);\n  writeLine(builder, 'loop_');\n\n  for (var i = 0; i < fieldCount; i++) {\n    writeLine(builder, \"_\" + category.name + \".\" + fields[i].name);\n  }\n\n  var index = 0;\n\n  for (var _c = 0; _c < source.length; _c++) {\n    var src = source[_c];\n    var data = src.data;\n    if (src.rowCount === 0) continue;\n    var it_1 = src.keys();\n\n    while (it_1.hasNext) {\n      var key = it_1.move();\n      var multiline = false;\n\n      for (var _f = 0; _f < fieldCount; _f++) {\n        multiline = writeValue(builder, data, key, fields[_f], precisions[_f], index);\n      }\n\n      if (!multiline) StringBuilder.newline(builder);\n      index++;\n    }\n  }\n\n  StringBuilder.write(builder, '#\\n');\n}\n\nfunction isMultiline(value) {\n  return typeof value === 'string' && value.indexOf('\\n') >= 0;\n}\n\nfunction writeLine(builder, val) {\n  StringBuilder.write(builder, val);\n  StringBuilder.newline(builder);\n}\n\nfunction writeInteger(builder, val) {\n  StringBuilder.writeInteger(builder, val);\n  StringBuilder.whitespace1(builder);\n}\n\nfunction writeFloat(builder, val, precisionMultiplier) {\n  StringBuilder.writeFloat(builder, val, precisionMultiplier);\n  StringBuilder.whitespace1(builder);\n}\n\nfunction writeNotPresent(builder) {\n  StringBuilder.writeSafe(builder, '. ');\n}\n\nfunction writeUnknown(builder) {\n  StringBuilder.writeSafe(builder, '? ');\n}\n\nfunction writeChecked(builder, val) {\n  if (!val) {\n    StringBuilder.writeSafe(builder, '. ');\n    return false;\n  }\n\n  var fst = val.charCodeAt(0);\n  var escape = false;\n  var escapeKind = 0; // 0 => ', 1 => \"\n\n  var hasSingleQuote = false,\n      hasDoubleQuote = false;\n\n  for (var i = 0, _l = val.length - 1; i <= _l; i++) {\n    var c = val.charCodeAt(i);\n\n    switch (c) {\n      case 9:\n        // \\t\n        escape = true;\n        break;\n\n      case 10:\n        // \\n\n        writeMultiline(builder, val);\n        return true;\n\n      case 32:\n        // ' '\n        escape = true;\n        break;\n\n      case 34:\n        // \"\n        // no need to escape quote if it's the last char and the length is > 1\n        if (i && i === _l) break;\n\n        if (hasSingleQuote) {\n          // the string already has a \" => use multiline value\n          writeMultiline(builder, val);\n          return true;\n        }\n\n        hasDoubleQuote = true;\n        escape = true;\n        escapeKind = 0;\n        break;\n\n      case 39:\n        // '\n        // no need to escape quote if it's the last char and the length is > 1\n        if (i && i === _l) break;\n\n        if (hasDoubleQuote) {\n          writeMultiline(builder, val);\n          return true;\n        }\n\n        hasSingleQuote = true;\n        escape = true;\n        escapeKind = 1;\n        break;\n    }\n  }\n\n  if (!escape && (fst === 35\n  /* # */\n  || fst === 36\n  /* $ */\n  || fst === 59\n  /* ; */\n  || fst === 91\n  /* [ */\n  || fst === 93\n  /* ] */\n  || fst === 95\n  /* _ */\n  )) {\n    escape = true;\n  }\n\n  if (escape) {\n    StringBuilder.writeSafe(builder, escapeKind ? '\"' : '\\'');\n    StringBuilder.writeSafe(builder, val);\n    StringBuilder.writeSafe(builder, escapeKind ? '\" ' : '\\' ');\n  } else {\n    StringBuilder.writeSafe(builder, val);\n    StringBuilder.writeSafe(builder, ' ');\n  }\n\n  return false;\n}\n\nfunction writeMultiline(builder, val) {\n  StringBuilder.writeSafe(builder, '\\n;' + val);\n  StringBuilder.writeSafe(builder, '\\n;\\n');\n}","map":{"version":3,"sources":["../../../../../src/mol-io/writer/cif/encoder/text.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js)\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { StringBuilder } from '../../../../mol-util/string-builder';\r\nimport { Category } from '../encoder';\r\nimport { getFieldDigitCount, getIncludedFields, getCategoryInstanceData } from './util';\r\nvar TextEncoder = /** @class */ (function () {\r\n    function TextEncoder() {\r\n        this.builder = StringBuilder.create();\r\n        this.encoded = false;\r\n        this.dataBlockCreated = false;\r\n        this.filter = Category.DefaultFilter;\r\n        this.formatter = Category.DefaultFormatter;\r\n        this.isBinary = false;\r\n        this.binaryEncodingProvider = void 0;\r\n    }\r\n    TextEncoder.prototype.setFilter = function (filter) {\r\n        this.filter = filter || Category.DefaultFilter;\r\n    };\r\n    TextEncoder.prototype.isCategoryIncluded = function (name) {\r\n        return this.filter.includeCategory(name);\r\n    };\r\n    TextEncoder.prototype.setFormatter = function (formatter) {\r\n        this.formatter = formatter || Category.DefaultFormatter;\r\n    };\r\n    TextEncoder.prototype.startDataBlock = function (header) {\r\n        this.dataBlockCreated = true;\r\n        StringBuilder.write(this.builder, \"data_\" + (header || '').replace(/[ \\n\\t]/g, '').toUpperCase() + \"\\n#\\n\");\r\n    };\r\n    TextEncoder.prototype.writeCategory = function (category, context, options) {\r\n        if (this.encoded) {\r\n            throw new Error('The writer contents have already been encoded, no more writing.');\r\n        }\r\n        if (!this.dataBlockCreated) {\r\n            throw new Error('No data block created.');\r\n        }\r\n        if (!(options === null || options === void 0 ? void 0 : options.ignoreFilter) && !this.filter.includeCategory(category.name))\r\n            return;\r\n        var _a = getCategoryInstanceData(category, context), instance = _a.instance, rowCount = _a.rowCount, source = _a.source;\r\n        if (!rowCount)\r\n            return;\r\n        if (rowCount === 1) {\r\n            writeCifSingleRecord(category, instance, source, this.builder, this.filter, this.formatter);\r\n        }\r\n        else {\r\n            writeCifLoop(category, instance, source, this.builder, this.filter, this.formatter);\r\n        }\r\n    };\r\n    TextEncoder.prototype.encode = function () {\r\n        this.encoded = true;\r\n    };\r\n    TextEncoder.prototype.writeTo = function (stream) {\r\n        var chunks = StringBuilder.getChunks(this.builder);\r\n        for (var i = 0, _i = chunks.length; i < _i; i++) {\r\n            stream.writeString(chunks[i]);\r\n        }\r\n    };\r\n    TextEncoder.prototype.getSize = function () {\r\n        return StringBuilder.getSize(this.builder);\r\n    };\r\n    TextEncoder.prototype.getData = function () {\r\n        return StringBuilder.getString(this.builder);\r\n    };\r\n    return TextEncoder;\r\n}());\r\nexport { TextEncoder };\r\nfunction writeValue(builder, data, key, f, floatPrecision, index) {\r\n    var kind = f.valueKind;\r\n    var p = kind ? kind(key, data) : 0 /* Present */;\r\n    if (p !== 0 /* Present */) {\r\n        if (p === 1 /* NotPresent */)\r\n            writeNotPresent(builder);\r\n        else\r\n            writeUnknown(builder);\r\n    }\r\n    else {\r\n        var val = f.value(key, data, index);\r\n        var t = f.type;\r\n        if (t === 0 /* Str */) {\r\n            if (isMultiline(val)) {\r\n                writeMultiline(builder, val);\r\n                return true;\r\n            }\r\n            else {\r\n                return writeChecked(builder, val);\r\n            }\r\n        }\r\n        else if (t === 1 /* Int */) {\r\n            writeInteger(builder, val);\r\n        }\r\n        else {\r\n            writeFloat(builder, val, floatPrecision);\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getFloatPrecisions(categoryName, fields, formatter) {\r\n    var ret = [];\r\n    for (var _a = 0, fields_1 = fields; _a < fields_1.length; _a++) {\r\n        var f = fields_1[_a];\r\n        var format = formatter.getFormat(categoryName, f.name);\r\n        if (format && typeof format.digitCount !== 'undefined')\r\n            ret[ret.length] = f.type === 2 /* Float */ ? Math.pow(10, Math.max(0, Math.min(format.digitCount, 15))) : 0;\r\n        else\r\n            ret[ret.length] = f.type === 2 /* Float */ ? Math.pow(10, getFieldDigitCount(f)) : 0;\r\n    }\r\n    return ret;\r\n}\r\nfunction writeCifSingleRecord(category, instance, source, builder, filter, formatter) {\r\n    var fields = getIncludedFields(instance);\r\n    var src = source[0];\r\n    var data = src.data;\r\n    var width = fields.reduce(function (w, f) { return filter.includeField(category.name, f.name) ? Math.max(w, f.name.length) : 0; }, 0);\r\n    // this means no field from this category is included.\r\n    if (width === 0)\r\n        return;\r\n    width += category.name.length + 6;\r\n    var it = src.keys();\r\n    var key = it.move();\r\n    var precisions = getFloatPrecisions(category.name, instance.fields, formatter);\r\n    for (var _f = 0; _f < fields.length; _f++) {\r\n        var f = fields[_f];\r\n        if (!filter.includeField(category.name, f.name))\r\n            continue;\r\n        StringBuilder.writePadRight(builder, \"_\" + category.name + \".\" + f.name, width);\r\n        var multiline = writeValue(builder, data, key, f, precisions[_f], 0);\r\n        if (!multiline)\r\n            StringBuilder.newline(builder);\r\n    }\r\n    StringBuilder.write(builder, '#\\n');\r\n}\r\nfunction writeCifLoop(category, instance, source, builder, filter, formatter) {\r\n    var fieldSource = getIncludedFields(instance);\r\n    var fields = filter === Category.DefaultFilter ? fieldSource : fieldSource.filter(function (f) { return filter.includeField(category.name, f.name); });\r\n    var fieldCount = fields.length;\r\n    if (fieldCount === 0)\r\n        return;\r\n    var precisions = getFloatPrecisions(category.name, fields, formatter);\r\n    writeLine(builder, 'loop_');\r\n    for (var i = 0; i < fieldCount; i++) {\r\n        writeLine(builder, \"_\" + category.name + \".\" + fields[i].name);\r\n    }\r\n    var index = 0;\r\n    for (var _c = 0; _c < source.length; _c++) {\r\n        var src = source[_c];\r\n        var data = src.data;\r\n        if (src.rowCount === 0)\r\n            continue;\r\n        var it_1 = src.keys();\r\n        while (it_1.hasNext) {\r\n            var key = it_1.move();\r\n            var multiline = false;\r\n            for (var _f = 0; _f < fieldCount; _f++) {\r\n                multiline = writeValue(builder, data, key, fields[_f], precisions[_f], index);\r\n            }\r\n            if (!multiline)\r\n                StringBuilder.newline(builder);\r\n            index++;\r\n        }\r\n    }\r\n    StringBuilder.write(builder, '#\\n');\r\n}\r\nfunction isMultiline(value) {\r\n    return typeof value === 'string' && value.indexOf('\\n') >= 0;\r\n}\r\nfunction writeLine(builder, val) {\r\n    StringBuilder.write(builder, val);\r\n    StringBuilder.newline(builder);\r\n}\r\nfunction writeInteger(builder, val) {\r\n    StringBuilder.writeInteger(builder, val);\r\n    StringBuilder.whitespace1(builder);\r\n}\r\nfunction writeFloat(builder, val, precisionMultiplier) {\r\n    StringBuilder.writeFloat(builder, val, precisionMultiplier);\r\n    StringBuilder.whitespace1(builder);\r\n}\r\nfunction writeNotPresent(builder) {\r\n    StringBuilder.writeSafe(builder, '. ');\r\n}\r\nfunction writeUnknown(builder) {\r\n    StringBuilder.writeSafe(builder, '? ');\r\n}\r\nfunction writeChecked(builder, val) {\r\n    if (!val) {\r\n        StringBuilder.writeSafe(builder, '. ');\r\n        return false;\r\n    }\r\n    var fst = val.charCodeAt(0);\r\n    var escape = false;\r\n    var escapeKind = 0; // 0 => ', 1 => \"\r\n    var hasSingleQuote = false, hasDoubleQuote = false;\r\n    for (var i = 0, _l = val.length - 1; i <= _l; i++) {\r\n        var c = val.charCodeAt(i);\r\n        switch (c) {\r\n            case 9: // \\t\r\n                escape = true;\r\n                break;\r\n            case 10: // \\n\r\n                writeMultiline(builder, val);\r\n                return true;\r\n            case 32: // ' '\r\n                escape = true;\r\n                break;\r\n            case 34: // \"\r\n                // no need to escape quote if it's the last char and the length is > 1\r\n                if (i && i === _l)\r\n                    break;\r\n                if (hasSingleQuote) {\r\n                    // the string already has a \" => use multiline value\r\n                    writeMultiline(builder, val);\r\n                    return true;\r\n                }\r\n                hasDoubleQuote = true;\r\n                escape = true;\r\n                escapeKind = 0;\r\n                break;\r\n            case 39: // '\r\n                // no need to escape quote if it's the last char and the length is > 1\r\n                if (i && i === _l)\r\n                    break;\r\n                if (hasDoubleQuote) {\r\n                    writeMultiline(builder, val);\r\n                    return true;\r\n                }\r\n                hasSingleQuote = true;\r\n                escape = true;\r\n                escapeKind = 1;\r\n                break;\r\n        }\r\n    }\r\n    if (!escape && (fst === 35 /* # */ || fst === 36 /* $ */ || fst === 59 /* ; */ || fst === 91 /* [ */ || fst === 93 /* ] */ || fst === 95 /* _ */)) {\r\n        escape = true;\r\n    }\r\n    if (escape) {\r\n        StringBuilder.writeSafe(builder, escapeKind ? '\"' : '\\'');\r\n        StringBuilder.writeSafe(builder, val);\r\n        StringBuilder.writeSafe(builder, escapeKind ? '\" ' : '\\' ');\r\n    }\r\n    else {\r\n        StringBuilder.writeSafe(builder, val);\r\n        StringBuilder.writeSafe(builder, ' ');\r\n    }\r\n    return false;\r\n}\r\nfunction writeMultiline(builder, val) {\r\n    StringBuilder.writeSafe(builder, '\\n;' + val);\r\n    StringBuilder.writeSafe(builder, '\\n;\\n');\r\n}\r\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}