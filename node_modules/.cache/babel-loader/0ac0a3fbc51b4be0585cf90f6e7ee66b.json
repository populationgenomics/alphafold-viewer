{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { SortedArray as S } from '../sorted-array';\nimport { Interval as I } from '../interval';\nexport var Empty = I.Empty;\nexport var ofSingleton = I.ofSingleton;\nexport var ofRange = I.ofRange;\nexport var ofBounds = I.ofBounds;\nexport function ofSortedArray(xs) {\n  if (!xs.length) return Empty; // check if the array is just a range\n\n  if (S.isRange(xs)) return I.ofRange(xs[0], xs[xs.length - 1]);\n  return xs;\n}\nexport function size(set) {\n  return I.is(set) ? I.size(set) : S.size(set);\n}\nexport function has(set, x) {\n  return I.is(set) ? I.has(set, x) : S.has(set, x);\n}\n/** Returns the index of `x` in `set` or -1 if not found. */\n\nexport function indexOf(set, x) {\n  return I.is(set) ? I.indexOf(set, x) : S.indexOf(set, x);\n}\nexport function getAt(set, i) {\n  return I.is(set) ? I.getAt(set, i) : set[i];\n}\nexport function min(set) {\n  return I.is(set) ? I.min(set) : S.min(set);\n}\nexport function max(set) {\n  return I.is(set) ? I.max(set) : S.max(set);\n}\nexport function start(set) {\n  return I.is(set) ? I.start(set) : S.start(set);\n}\nexport function end(set) {\n  return I.is(set) ? I.end(set) : S.end(set);\n}\nexport function hashCode(set) {\n  return I.is(set) ? I.hashCode(set) : S.hashCode(set);\n} // TODO: possibly add more hash functions to allow for multilevel hashing.\n\nexport function toString(set) {\n  return I.is(set) ? I.toString(set) : S.toString(set);\n}\nexport function areEqual(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return I.areEqual(a, b);\n    return areEqualIS(a, b);\n  } else if (I.is(b)) return areEqualIS(b, a);\n\n  return S.areEqual(a, b);\n}\nexport function areIntersecting(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return I.areIntersecting(a, b);\n    return areIntersectingSI(b, a);\n  } else if (I.is(b)) return areIntersectingSI(a, b);\n\n  return S.areIntersecting(a, b);\n}\n/** Check if the 2nd argument is a subset of the 1st */\n\nexport function isSubset(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return I.isSubInterval(a, b);\n    return isSubsetIS(a, b);\n  } else if (I.is(b)) return isSubsetSI(a, b);\n\n  return S.isSubset(a, b);\n}\nexport function findPredecessorIndex(set, x) {\n  return I.is(set) ? I.findPredecessorIndex(set, x) : S.findPredecessorIndex(set, x);\n}\nexport function findPredecessorIndexInInterval(set, x, bounds) {\n  return I.is(set) ? I.findPredecessorIndexInInterval(set, x, bounds) : S.findPredecessorIndexInInterval(set, x, bounds);\n}\nexport function findRange(set, min, max) {\n  return I.is(set) ? I.findRange(set, min, max) : S.findRange(set, min, max);\n}\nexport function intersectionSize(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return I.intersectionSize(a, b);\n    return intersectionSizeSI(b, a);\n  } else if (I.is(b)) return intersectionSizeSI(a, b);\n\n  return S.intersectionSize(a, b);\n}\nexport function union(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return unionII(a, b);\n    return unionSI(b, a);\n  } else if (I.is(b)) return unionSI(a, b);\n\n  return ofSortedArray(S.union(a, b));\n}\nexport function intersect(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return I.intersect(a, b);\n    return intersectSI(b, a);\n  } else if (I.is(b)) return intersectSI(a, b);\n\n  return ofSortedArray(S.intersect(a, b));\n}\nexport function subtract(a, b) {\n  if (I.is(a)) {\n    if (I.is(b)) return subtractII(a, b);\n    return subtractIS(a, b);\n  } else if (I.is(b)) return subtractSI(a, b);\n\n  return ofSortedArray(S.subtract(a, b));\n}\n\nfunction areEqualIS(a, b) {\n  return I.size(a) === S.size(b) && I.start(a) === S.start(b) && I.end(a) === S.end(b);\n}\n\nfunction areIntersectingSI(a, b) {\n  return a.length !== 0 && I.size(S.findRange(a, I.min(b), I.max(b))) !== 0;\n}\n\nfunction isSubsetSI(a, b) {\n  var minB = I.min(b),\n      maxB = I.max(b);\n  if (maxB - minB + 1 === 0) return true;\n  var minA = S.min(a),\n      maxA = S.max(a);\n  if (minB < minA || maxB > maxA) return false;\n  var r = S.findRange(a, minB, maxB);\n  return I.size(r) === I.size(b);\n}\n\nfunction isSubsetIS(a, b) {\n  var minA = I.min(a),\n      maxA = I.max(a);\n  if (maxA - minA + 1 === 0) return false;\n  var minB = S.min(b),\n      maxB = S.max(b);\n  return minB >= minA && maxB <= maxA;\n}\n\nfunction areRangesIntersecting(a, b) {\n  var sa = size(a),\n      sb = size(b);\n  if (sa === 0 && sb === 0) return true;\n  return sa > 0 && sb > 0 && max(a) >= min(b) && min(a) <= max(b);\n}\n\nfunction isRangeSubset(a, b) {\n  if (!size(a)) return size(b) === 0;\n  if (!size(b)) return true;\n  return min(a) <= min(b) && max(a) >= max(b);\n}\n\nfunction unionII(a, b) {\n  if (I.areEqual(a, b)) return a;\n  var sizeA = I.size(a),\n      sizeB = I.size(b);\n  if (!sizeB) return a;\n  if (!sizeA) return b;\n  var minA = I.min(a),\n      minB = I.min(b);\n  if (areRangesIntersecting(a, b)) return I.ofRange(Math.min(minA, minB), Math.max(I.max(a), I.max(b)));\n  var lSize, lMin, rSize, rMin;\n\n  if (minA < minB) {\n    lSize = sizeA;\n    lMin = minA;\n    rSize = sizeB;\n    rMin = minB;\n  } else {\n    lSize = sizeB;\n    lMin = minB;\n    rSize = sizeA;\n    rMin = minA;\n  }\n\n  var arr = new Int32Array(sizeA + sizeB);\n\n  for (var i = 0; i < lSize; i++) arr[i] = i + lMin;\n\n  for (var i = 0; i < rSize; i++) arr[i + lSize] = i + rMin;\n\n  return ofSortedArray(arr);\n}\n\nfunction unionSI(a, b) {\n  var bSize = I.size(b);\n  if (!bSize) return a; // is the array fully contained in the range?\n\n  if (isRangeSubset(b, a)) return b;\n  var min = I.min(b),\n      max = I.max(b);\n  var r = S.findRange(a, min, max);\n  var start = I.start(r),\n      end = I.end(r);\n  var indices = new Int32Array(start + (a.length - end) + bSize);\n  var offset = 0;\n\n  for (var i = 0; i < start; i++) indices[offset++] = a[i];\n\n  for (var i = min; i <= max; i++) indices[offset++] = i;\n\n  for (var i = end, _i = a.length; i < _i; i++) indices[offset++] = a[i];\n\n  return ofSortedArray(indices);\n}\n\nfunction intersectionSizeSI(a, b) {\n  if (!I.size(b)) return 0;\n  var r = S.findRange(a, I.min(b), I.max(b));\n  return I.end(r) - I.start(r);\n}\n\nfunction intersectSI(a, b) {\n  if (!I.size(b)) return Empty;\n  var r = S.findRange(a, I.min(b), I.max(b));\n  var start = I.start(r),\n      end = I.end(r);\n  var resultSize = end - start;\n  if (!resultSize) return Empty;\n  if (resultSize === a.length) return a;\n  var indices = new Int32Array(resultSize);\n  var offset = 0;\n\n  for (var i = start; i < end; i++) {\n    indices[offset++] = a[i];\n  }\n\n  return ofSortedArray(indices);\n}\n\nfunction subtractII(a, b) {\n  if (I.areEqual(a, b)) return Empty;\n  if (!I.areIntersecting(a, b)) return a;\n  var minA = I.min(a),\n      maxA = I.max(a);\n  var minB = I.min(b),\n      maxB = I.max(b);\n  if (maxA < minA || maxB < minB) return a; // is A subset of B? ==> Empty\n\n  if (I.isSubInterval(b, a)) return Empty;\n\n  if (I.isSubInterval(a, b)) {\n    // this splits the interval into two, gotta represent it as a set.\n    var l = minB - minA,\n        r = maxA - maxB;\n    if (l <= 0) return I.ofRange(maxB + 1, maxB + r);\n    if (r <= 0) return I.ofRange(minA, minA + l - 1);\n    var ret = new Int32Array(l + r);\n    var offset = 0;\n\n    for (var i = 0; i < l; i++) ret[offset++] = minA + i;\n\n    for (var i = 1; i <= r; i++) ret[offset++] = maxB + i;\n\n    return ofSortedArray(ret);\n  }\n\n  if (minA < minB) return I.ofRange(minA, minB - 1);\n  return I.ofRange(maxB + 1, maxA);\n}\n\nfunction subtractSI(a, b) {\n  var min = I.min(b),\n      max = I.max(b); // is empty?\n\n  if (max < min) return a;\n  var r = S.findRange(a, min, max);\n  var start = I.start(r),\n      end = I.end(r);\n  var resultSize = a.length - (end - start); // A is subset of B\n\n  if (resultSize <= 0) return Empty; // No common elements\n\n  if (resultSize === a.length) return a;\n  var ret = new Int32Array(resultSize);\n  var offset = 0;\n\n  for (var i = 0; i < start; i++) ret[offset++] = a[i];\n\n  for (var i = end, _i = a.length; i < _i; i++) ret[offset++] = a[i];\n\n  return ofSortedArray(ret);\n}\n\nfunction subtractIS(a, b) {\n  var min = I.min(a),\n      max = I.max(a); // is empty?\n\n  if (max < min) return a;\n  var rSize = max - min + 1;\n  var interval = S.findRange(b, min, max);\n  var start = I.start(interval),\n      end = I.end(interval);\n  var commonCount = end - start; // No common elements.\n\n  if (commonCount === 0) return a;\n  var resultSize = rSize - commonCount; // A is subset of B\n\n  if (resultSize <= 0) return Empty;\n  var ret = new Int32Array(resultSize);\n  var li = b.length - 1;\n  var fst = b[Math.min(start, li)],\n      last = b[Math.min(end, li)];\n  var offset = 0;\n\n  for (var i = min; i < fst; i++) ret[offset++] = i;\n\n  for (var i = fst; i <= last; i++) {\n    if (S.indexOfInInterval(b, i, interval) < 0) ret[offset++] = i;\n  }\n\n  for (var i = last + 1; i <= max; i++) ret[offset++] = i;\n\n  return ofSortedArray(ret);\n}\n\nexport function forEach(set, f, ctx) {\n  if (I.is(set)) {\n    var start_1 = I.min(set);\n\n    for (var i = start_1, _i = I.max(set); i <= _i; i++) {\n      f(i, i - start_1, ctx);\n    }\n  } else {\n    for (var i = 0, _i = set.length; i < _i; i++) {\n      f(set[i], i, ctx);\n    }\n  }\n\n  return ctx;\n}\nexport function forEachSegment(set, segment, f, ctx) {\n  if (I.is(set)) {\n    var sI = 0;\n\n    for (var i = I.min(set), _i = I.max(set); i <= _i; i++) {\n      var s = segment(i);\n      var endI = i + 1;\n\n      while (endI < _i && segment(endI) === s) endI++;\n\n      i = endI - 1;\n      f(s, sI, ctx);\n      sI++;\n    }\n  } else {\n    var sI = 0;\n\n    for (var i = 0, _i = set.length; i < _i; i++) {\n      var s = segment(set[i]);\n      var endI = i + 1;\n\n      while (endI < _i && segment(set[endI]) === s) endI++;\n\n      i = endI - 1;\n      f(s, sI, ctx);\n      sI++;\n    }\n  }\n\n  return ctx;\n}\nexport function indexedIntersect(idxA, a, b) {\n  if (a === b) return idxA;\n  var lenI = size(idxA),\n      lenA = a.length,\n      lenB = b.length;\n  if (lenI === 0 || lenA === 0 || lenB === 0) return Empty;\n  var startJ = S.findPredecessorIndex(b, a[min(idxA)]);\n  var endJ = S.findPredecessorIndex(b, a[max(idxA)] + 1);\n  var commonCount = 0;\n  var offset = 0;\n  var O = 0;\n  var j = startJ;\n\n  while (O < lenI && j < endJ) {\n    var x = a[getAt(idxA, O)],\n        y = b[j];\n\n    if (x < y) {\n      O++;\n    } else if (x > y) {\n      j++;\n    } else {\n      commonCount++;\n      O++;\n      j++;\n    }\n  } // no common elements\n\n\n  if (commonCount === 0) return Empty; // A === B\n\n  if (commonCount === lenA && commonCount === lenB) return idxA;\n  var indices = new Int32Array(commonCount);\n  offset = 0;\n  O = 0;\n  j = startJ;\n\n  while (O < lenI && j < endJ) {\n    var x = a[getAt(idxA, O)],\n        y = b[j];\n\n    if (x < y) {\n      O++;\n    } else if (x > y) {\n      j++;\n    } else {\n      indices[offset++] = j;\n      O++;\n      j++;\n    }\n  }\n\n  return ofSortedArray(indices);\n}","map":{"version":3,"sources":["../../../../src/mol-data/int/impl/ordered-set.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { SortedArray as S } from '../sorted-array';\r\nimport { Interval as I } from '../interval';\r\nexport var Empty = I.Empty;\r\nexport var ofSingleton = I.ofSingleton;\r\nexport var ofRange = I.ofRange;\r\nexport var ofBounds = I.ofBounds;\r\nexport function ofSortedArray(xs) {\r\n    if (!xs.length)\r\n        return Empty;\r\n    // check if the array is just a range\r\n    if (S.isRange(xs))\r\n        return I.ofRange(xs[0], xs[xs.length - 1]);\r\n    return xs;\r\n}\r\nexport function size(set) { return I.is(set) ? I.size(set) : S.size(set); }\r\nexport function has(set, x) { return I.is(set) ? I.has(set, x) : S.has(set, x); }\r\n/** Returns the index of `x` in `set` or -1 if not found. */\r\nexport function indexOf(set, x) { return I.is(set) ? I.indexOf(set, x) : S.indexOf(set, x); }\r\nexport function getAt(set, i) { return I.is(set) ? I.getAt(set, i) : set[i]; }\r\nexport function min(set) { return I.is(set) ? I.min(set) : S.min(set); }\r\nexport function max(set) { return I.is(set) ? I.max(set) : S.max(set); }\r\nexport function start(set) { return I.is(set) ? I.start(set) : S.start(set); }\r\nexport function end(set) { return I.is(set) ? I.end(set) : S.end(set); }\r\nexport function hashCode(set) { return I.is(set) ? I.hashCode(set) : S.hashCode(set); }\r\n// TODO: possibly add more hash functions to allow for multilevel hashing.\r\nexport function toString(set) { return I.is(set) ? I.toString(set) : S.toString(set); }\r\nexport function areEqual(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return I.areEqual(a, b);\r\n        return areEqualIS(a, b);\r\n    }\r\n    else if (I.is(b))\r\n        return areEqualIS(b, a);\r\n    return S.areEqual(a, b);\r\n}\r\nexport function areIntersecting(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return I.areIntersecting(a, b);\r\n        return areIntersectingSI(b, a);\r\n    }\r\n    else if (I.is(b))\r\n        return areIntersectingSI(a, b);\r\n    return S.areIntersecting(a, b);\r\n}\r\n/** Check if the 2nd argument is a subset of the 1st */\r\nexport function isSubset(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return I.isSubInterval(a, b);\r\n        return isSubsetIS(a, b);\r\n    }\r\n    else if (I.is(b))\r\n        return isSubsetSI(a, b);\r\n    return S.isSubset(a, b);\r\n}\r\nexport function findPredecessorIndex(set, x) {\r\n    return I.is(set) ? I.findPredecessorIndex(set, x) : S.findPredecessorIndex(set, x);\r\n}\r\nexport function findPredecessorIndexInInterval(set, x, bounds) {\r\n    return I.is(set) ? I.findPredecessorIndexInInterval(set, x, bounds) : S.findPredecessorIndexInInterval(set, x, bounds);\r\n}\r\nexport function findRange(set, min, max) {\r\n    return I.is(set) ? I.findRange(set, min, max) : S.findRange(set, min, max);\r\n}\r\nexport function intersectionSize(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return I.intersectionSize(a, b);\r\n        return intersectionSizeSI(b, a);\r\n    }\r\n    else if (I.is(b))\r\n        return intersectionSizeSI(a, b);\r\n    return S.intersectionSize(a, b);\r\n}\r\nexport function union(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return unionII(a, b);\r\n        return unionSI(b, a);\r\n    }\r\n    else if (I.is(b))\r\n        return unionSI(a, b);\r\n    return ofSortedArray(S.union(a, b));\r\n}\r\nexport function intersect(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return I.intersect(a, b);\r\n        return intersectSI(b, a);\r\n    }\r\n    else if (I.is(b))\r\n        return intersectSI(a, b);\r\n    return ofSortedArray(S.intersect(a, b));\r\n}\r\nexport function subtract(a, b) {\r\n    if (I.is(a)) {\r\n        if (I.is(b))\r\n            return subtractII(a, b);\r\n        return subtractIS(a, b);\r\n    }\r\n    else if (I.is(b))\r\n        return subtractSI(a, b);\r\n    return ofSortedArray(S.subtract(a, b));\r\n}\r\nfunction areEqualIS(a, b) { return I.size(a) === S.size(b) && I.start(a) === S.start(b) && I.end(a) === S.end(b); }\r\nfunction areIntersectingSI(a, b) {\r\n    return a.length !== 0 && I.size(S.findRange(a, I.min(b), I.max(b))) !== 0;\r\n}\r\nfunction isSubsetSI(a, b) {\r\n    var minB = I.min(b), maxB = I.max(b);\r\n    if (maxB - minB + 1 === 0)\r\n        return true;\r\n    var minA = S.min(a), maxA = S.max(a);\r\n    if (minB < minA || maxB > maxA)\r\n        return false;\r\n    var r = S.findRange(a, minB, maxB);\r\n    return I.size(r) === I.size(b);\r\n}\r\nfunction isSubsetIS(a, b) {\r\n    var minA = I.min(a), maxA = I.max(a);\r\n    if (maxA - minA + 1 === 0)\r\n        return false;\r\n    var minB = S.min(b), maxB = S.max(b);\r\n    return minB >= minA && maxB <= maxA;\r\n}\r\nfunction areRangesIntersecting(a, b) {\r\n    var sa = size(a), sb = size(b);\r\n    if (sa === 0 && sb === 0)\r\n        return true;\r\n    return sa > 0 && sb > 0 && max(a) >= min(b) && min(a) <= max(b);\r\n}\r\nfunction isRangeSubset(a, b) {\r\n    if (!size(a))\r\n        return size(b) === 0;\r\n    if (!size(b))\r\n        return true;\r\n    return min(a) <= min(b) && max(a) >= max(b);\r\n}\r\nfunction unionII(a, b) {\r\n    if (I.areEqual(a, b))\r\n        return a;\r\n    var sizeA = I.size(a), sizeB = I.size(b);\r\n    if (!sizeB)\r\n        return a;\r\n    if (!sizeA)\r\n        return b;\r\n    var minA = I.min(a), minB = I.min(b);\r\n    if (areRangesIntersecting(a, b))\r\n        return I.ofRange(Math.min(minA, minB), Math.max(I.max(a), I.max(b)));\r\n    var lSize, lMin, rSize, rMin;\r\n    if (minA < minB) {\r\n        lSize = sizeA;\r\n        lMin = minA;\r\n        rSize = sizeB;\r\n        rMin = minB;\r\n    }\r\n    else {\r\n        lSize = sizeB;\r\n        lMin = minB;\r\n        rSize = sizeA;\r\n        rMin = minA;\r\n    }\r\n    var arr = new Int32Array(sizeA + sizeB);\r\n    for (var i = 0; i < lSize; i++)\r\n        arr[i] = i + lMin;\r\n    for (var i = 0; i < rSize; i++)\r\n        arr[i + lSize] = i + rMin;\r\n    return ofSortedArray(arr);\r\n}\r\nfunction unionSI(a, b) {\r\n    var bSize = I.size(b);\r\n    if (!bSize)\r\n        return a;\r\n    // is the array fully contained in the range?\r\n    if (isRangeSubset(b, a))\r\n        return b;\r\n    var min = I.min(b), max = I.max(b);\r\n    var r = S.findRange(a, min, max);\r\n    var start = I.start(r), end = I.end(r);\r\n    var indices = new Int32Array(start + (a.length - end) + bSize);\r\n    var offset = 0;\r\n    for (var i = 0; i < start; i++)\r\n        indices[offset++] = a[i];\r\n    for (var i = min; i <= max; i++)\r\n        indices[offset++] = i;\r\n    for (var i = end, _i = a.length; i < _i; i++)\r\n        indices[offset++] = a[i];\r\n    return ofSortedArray(indices);\r\n}\r\nfunction intersectionSizeSI(a, b) {\r\n    if (!I.size(b))\r\n        return 0;\r\n    var r = S.findRange(a, I.min(b), I.max(b));\r\n    return I.end(r) - I.start(r);\r\n}\r\nfunction intersectSI(a, b) {\r\n    if (!I.size(b))\r\n        return Empty;\r\n    var r = S.findRange(a, I.min(b), I.max(b));\r\n    var start = I.start(r), end = I.end(r);\r\n    var resultSize = end - start;\r\n    if (!resultSize)\r\n        return Empty;\r\n    if (resultSize === a.length)\r\n        return a;\r\n    var indices = new Int32Array(resultSize);\r\n    var offset = 0;\r\n    for (var i = start; i < end; i++) {\r\n        indices[offset++] = a[i];\r\n    }\r\n    return ofSortedArray(indices);\r\n}\r\nfunction subtractII(a, b) {\r\n    if (I.areEqual(a, b))\r\n        return Empty;\r\n    if (!I.areIntersecting(a, b))\r\n        return a;\r\n    var minA = I.min(a), maxA = I.max(a);\r\n    var minB = I.min(b), maxB = I.max(b);\r\n    if (maxA < minA || maxB < minB)\r\n        return a;\r\n    // is A subset of B? ==> Empty\r\n    if (I.isSubInterval(b, a))\r\n        return Empty;\r\n    if (I.isSubInterval(a, b)) {\r\n        // this splits the interval into two, gotta represent it as a set.\r\n        var l = minB - minA, r = maxA - maxB;\r\n        if (l <= 0)\r\n            return I.ofRange(maxB + 1, maxB + r);\r\n        if (r <= 0)\r\n            return I.ofRange(minA, minA + l - 1);\r\n        var ret = new Int32Array(l + r);\r\n        var offset = 0;\r\n        for (var i = 0; i < l; i++)\r\n            ret[offset++] = minA + i;\r\n        for (var i = 1; i <= r; i++)\r\n            ret[offset++] = maxB + i;\r\n        return ofSortedArray(ret);\r\n    }\r\n    if (minA < minB)\r\n        return I.ofRange(minA, minB - 1);\r\n    return I.ofRange(maxB + 1, maxA);\r\n}\r\nfunction subtractSI(a, b) {\r\n    var min = I.min(b), max = I.max(b);\r\n    // is empty?\r\n    if (max < min)\r\n        return a;\r\n    var r = S.findRange(a, min, max);\r\n    var start = I.start(r), end = I.end(r);\r\n    var resultSize = a.length - (end - start);\r\n    // A is subset of B\r\n    if (resultSize <= 0)\r\n        return Empty;\r\n    // No common elements\r\n    if (resultSize === a.length)\r\n        return a;\r\n    var ret = new Int32Array(resultSize);\r\n    var offset = 0;\r\n    for (var i = 0; i < start; i++)\r\n        ret[offset++] = a[i];\r\n    for (var i = end, _i = a.length; i < _i; i++)\r\n        ret[offset++] = a[i];\r\n    return ofSortedArray(ret);\r\n}\r\nfunction subtractIS(a, b) {\r\n    var min = I.min(a), max = I.max(a);\r\n    // is empty?\r\n    if (max < min)\r\n        return a;\r\n    var rSize = max - min + 1;\r\n    var interval = S.findRange(b, min, max);\r\n    var start = I.start(interval), end = I.end(interval);\r\n    var commonCount = end - start;\r\n    // No common elements.\r\n    if (commonCount === 0)\r\n        return a;\r\n    var resultSize = rSize - commonCount;\r\n    // A is subset of B\r\n    if (resultSize <= 0)\r\n        return Empty;\r\n    var ret = new Int32Array(resultSize);\r\n    var li = b.length - 1;\r\n    var fst = b[Math.min(start, li)], last = b[Math.min(end, li)];\r\n    var offset = 0;\r\n    for (var i = min; i < fst; i++)\r\n        ret[offset++] = i;\r\n    for (var i = fst; i <= last; i++) {\r\n        if (S.indexOfInInterval(b, i, interval) < 0)\r\n            ret[offset++] = i;\r\n    }\r\n    for (var i = last + 1; i <= max; i++)\r\n        ret[offset++] = i;\r\n    return ofSortedArray(ret);\r\n}\r\nexport function forEach(set, f, ctx) {\r\n    if (I.is(set)) {\r\n        var start_1 = I.min(set);\r\n        for (var i = start_1, _i = I.max(set); i <= _i; i++) {\r\n            f(i, i - start_1, ctx);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0, _i = set.length; i < _i; i++) {\r\n            f(set[i], i, ctx);\r\n        }\r\n    }\r\n    return ctx;\r\n}\r\nexport function forEachSegment(set, segment, f, ctx) {\r\n    if (I.is(set)) {\r\n        var sI = 0;\r\n        for (var i = I.min(set), _i = I.max(set); i <= _i; i++) {\r\n            var s = segment(i);\r\n            var endI = i + 1;\r\n            while (endI < _i && segment(endI) === s)\r\n                endI++;\r\n            i = endI - 1;\r\n            f(s, sI, ctx);\r\n            sI++;\r\n        }\r\n    }\r\n    else {\r\n        var sI = 0;\r\n        for (var i = 0, _i = set.length; i < _i; i++) {\r\n            var s = segment(set[i]);\r\n            var endI = i + 1;\r\n            while (endI < _i && segment(set[endI]) === s)\r\n                endI++;\r\n            i = endI - 1;\r\n            f(s, sI, ctx);\r\n            sI++;\r\n        }\r\n    }\r\n    return ctx;\r\n}\r\nexport function indexedIntersect(idxA, a, b) {\r\n    if (a === b)\r\n        return idxA;\r\n    var lenI = size(idxA), lenA = a.length, lenB = b.length;\r\n    if (lenI === 0 || lenA === 0 || lenB === 0)\r\n        return Empty;\r\n    var startJ = S.findPredecessorIndex(b, a[min(idxA)]);\r\n    var endJ = S.findPredecessorIndex(b, a[max(idxA)] + 1);\r\n    var commonCount = 0;\r\n    var offset = 0;\r\n    var O = 0;\r\n    var j = startJ;\r\n    while (O < lenI && j < endJ) {\r\n        var x = a[getAt(idxA, O)], y = b[j];\r\n        if (x < y) {\r\n            O++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            commonCount++;\r\n            O++;\r\n            j++;\r\n        }\r\n    }\r\n    // no common elements\r\n    if (commonCount === 0)\r\n        return Empty;\r\n    // A === B\r\n    if (commonCount === lenA && commonCount === lenB)\r\n        return idxA;\r\n    var indices = new Int32Array(commonCount);\r\n    offset = 0;\r\n    O = 0;\r\n    j = startJ;\r\n    while (O < lenI && j < endJ) {\r\n        var x = a[getAt(idxA, O)], y = b[j];\r\n        if (x < y) {\r\n            O++;\r\n        }\r\n        else if (x > y) {\r\n            j++;\r\n        }\r\n        else {\r\n            indices[offset++] = j;\r\n            O++;\r\n            j++;\r\n        }\r\n    }\r\n    return ofSortedArray(indices);\r\n}\r\n//# sourceMappingURL=ordered-set.js.map"]},"metadata":{},"sourceType":"module"}