{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n// TODO move to mol-math as Vector???\n\n/** Get the maximum value in an array */\nexport function arrayMax(array) {\n  var max = -Infinity;\n\n  for (var i = 0, il = array.length; i < il; ++i) {\n    if (array[i] > max) max = array[i];\n  }\n\n  return max;\n}\n/** Get the minimum value in an array */\n\nexport function arrayMin(array) {\n  var min = Infinity;\n\n  for (var i = 0, il = array.length; i < il; ++i) {\n    if (array[i] < min) min = array[i];\n  }\n\n  return min;\n}\n/** Get the minimum & maximum value in an array */\n\nexport function arrayMinMax(array) {\n  var min = Infinity;\n  var max = -Infinity;\n\n  for (var i = 0, il = array.length; i < il; ++i) {\n    if (array[i] < min) min = array[i];\n    if (array[i] > max) max = array[i];\n  }\n\n  return [min, max];\n}\n/** Get the sum of values in an array */\n\nexport function arraySum(array, stride, offset) {\n  if (stride === void 0) {\n    stride = 1;\n  }\n\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var n = array.length;\n  var sum = 0;\n\n  for (var i = offset; i < n; i += stride) {\n    sum += array[i];\n  }\n\n  return sum;\n}\n/** Get the mean of values in an array */\n\nexport function arrayMean(array, stride, offset) {\n  if (stride === void 0) {\n    stride = 1;\n  }\n\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  return arraySum(array, stride, offset) / (array.length / stride);\n}\n/** Get the root mean square of values in an array */\n\nexport function arrayRms(array) {\n  var n = array.length;\n  var sumSq = 0;\n\n  for (var i = 0; i < n; ++i) {\n    var di = array[i];\n    sumSq += di * di;\n  }\n\n  return Math.sqrt(sumSq / n);\n}\n/** Fill an array with serial numbers starting from 0 until n - 1 (defaults to array.length) */\n\nexport function fillSerial(array, n) {\n  for (var i = 0, il = n ? Math.min(n, array.length) : array.length; i < il; ++i) array[i] = i;\n\n  return array;\n}\nexport function arrayRemoveInPlace(xs, x) {\n  var i = 0,\n      found = false;\n\n  for (var il = xs.length; i < il; i++) {\n    if (xs[i] === x) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) return false;\n  arrayRemoveAtInPlace(xs, i);\n  return true;\n}\nexport function arrayRemoveAtInPlace(xs, idx) {\n  for (var i = idx, _i = xs.length - 1; i < _i; i++) {\n    xs[i] = xs[i + 1];\n  }\n\n  xs.pop();\n}\nexport function arraySetAdd(xs, x) {\n  if (xs.indexOf(x) >= 0) return false;\n  xs.push(x);\n  return true;\n}\nexport function arraySetRemove(xs, x) {\n  var idx = xs.indexOf(x);\n  if (idx < 0) return false;\n\n  for (var i = idx, _i = xs.length - 1; i < _i; i++) {\n    xs[i] = xs[i + 1];\n  }\n\n  xs.pop();\n  return true;\n}\n/**\r\n * Caution, O(n^2) complexity. Only use for small input sizes.\r\n * For larger inputs consider using `SortedArray`.\r\n */\n\nexport function arrayAreIntersecting(xs, ys) {\n  for (var i = 0, il = xs.length; i < il; ++i) {\n    if (ys.includes(xs[i])) return true;\n  }\n\n  return false;\n}\n/**\r\n * Caution, O(n^2) complexity. Only use for small input sizes.\r\n * For larger inputs consider using `SortedArray`.\r\n */\n\nexport function arrayIntersectionSize(xs, ys) {\n  var count = 0;\n\n  for (var i = 0, il = xs.length; i < il; ++i) {\n    if (ys.includes(xs[i])) count += 1;\n  }\n\n  return count;\n}\nexport function arrayEqual(xs, ys) {\n  if (!xs || xs.length === 0) return !ys || ys.length === 0;\n  if (!ys) return false;\n  var lenX = xs.length;\n  if (lenX !== ys.length) return false;\n\n  for (var i = 0; i < lenX; i++) {\n    if (xs[i] !== ys[i]) return false;\n  }\n\n  return true;\n}\nexport function arrayIsIdentity(xs) {\n  for (var i = 0, _i = xs.length; i < _i; i++) {\n    if (xs[i] !== i) return false;\n  }\n\n  return true;\n}\nexport function arrayMapUpsert(xs, key, value) {\n  for (var i = 0, il = xs.length; i < il; ++i) {\n    if (xs[i][0] === key) {\n      xs[i][1] = value;\n      return;\n    }\n  }\n\n  xs.push([key, value]);\n}","map":{"version":3,"sources":["../../src/mol-util/array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n// TODO move to mol-math as Vector???\r\n/** Get the maximum value in an array */\r\nexport function arrayMax(array) {\r\n    var max = -Infinity;\r\n    for (var i = 0, il = array.length; i < il; ++i) {\r\n        if (array[i] > max)\r\n            max = array[i];\r\n    }\r\n    return max;\r\n}\r\n/** Get the minimum value in an array */\r\nexport function arrayMin(array) {\r\n    var min = Infinity;\r\n    for (var i = 0, il = array.length; i < il; ++i) {\r\n        if (array[i] < min)\r\n            min = array[i];\r\n    }\r\n    return min;\r\n}\r\n/** Get the minimum & maximum value in an array */\r\nexport function arrayMinMax(array) {\r\n    var min = Infinity;\r\n    var max = -Infinity;\r\n    for (var i = 0, il = array.length; i < il; ++i) {\r\n        if (array[i] < min)\r\n            min = array[i];\r\n        if (array[i] > max)\r\n            max = array[i];\r\n    }\r\n    return [min, max];\r\n}\r\n/** Get the sum of values in an array */\r\nexport function arraySum(array, stride, offset) {\r\n    if (stride === void 0) { stride = 1; }\r\n    if (offset === void 0) { offset = 0; }\r\n    var n = array.length;\r\n    var sum = 0;\r\n    for (var i = offset; i < n; i += stride) {\r\n        sum += array[i];\r\n    }\r\n    return sum;\r\n}\r\n/** Get the mean of values in an array */\r\nexport function arrayMean(array, stride, offset) {\r\n    if (stride === void 0) { stride = 1; }\r\n    if (offset === void 0) { offset = 0; }\r\n    return arraySum(array, stride, offset) / (array.length / stride);\r\n}\r\n/** Get the root mean square of values in an array */\r\nexport function arrayRms(array) {\r\n    var n = array.length;\r\n    var sumSq = 0;\r\n    for (var i = 0; i < n; ++i) {\r\n        var di = array[i];\r\n        sumSq += di * di;\r\n    }\r\n    return Math.sqrt(sumSq / n);\r\n}\r\n/** Fill an array with serial numbers starting from 0 until n - 1 (defaults to array.length) */\r\nexport function fillSerial(array, n) {\r\n    for (var i = 0, il = n ? Math.min(n, array.length) : array.length; i < il; ++i)\r\n        array[i] = i;\r\n    return array;\r\n}\r\nexport function arrayRemoveInPlace(xs, x) {\r\n    var i = 0, found = false;\r\n    for (var il = xs.length; i < il; i++) {\r\n        if (xs[i] === x) {\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!found)\r\n        return false;\r\n    arrayRemoveAtInPlace(xs, i);\r\n    return true;\r\n}\r\nexport function arrayRemoveAtInPlace(xs, idx) {\r\n    for (var i = idx, _i = xs.length - 1; i < _i; i++) {\r\n        xs[i] = xs[i + 1];\r\n    }\r\n    xs.pop();\r\n}\r\nexport function arraySetAdd(xs, x) {\r\n    if (xs.indexOf(x) >= 0)\r\n        return false;\r\n    xs.push(x);\r\n    return true;\r\n}\r\nexport function arraySetRemove(xs, x) {\r\n    var idx = xs.indexOf(x);\r\n    if (idx < 0)\r\n        return false;\r\n    for (var i = idx, _i = xs.length - 1; i < _i; i++) {\r\n        xs[i] = xs[i + 1];\r\n    }\r\n    xs.pop();\r\n    return true;\r\n}\r\n/**\r\n * Caution, O(n^2) complexity. Only use for small input sizes.\r\n * For larger inputs consider using `SortedArray`.\r\n */\r\nexport function arrayAreIntersecting(xs, ys) {\r\n    for (var i = 0, il = xs.length; i < il; ++i) {\r\n        if (ys.includes(xs[i]))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Caution, O(n^2) complexity. Only use for small input sizes.\r\n * For larger inputs consider using `SortedArray`.\r\n */\r\nexport function arrayIntersectionSize(xs, ys) {\r\n    var count = 0;\r\n    for (var i = 0, il = xs.length; i < il; ++i) {\r\n        if (ys.includes(xs[i]))\r\n            count += 1;\r\n    }\r\n    return count;\r\n}\r\nexport function arrayEqual(xs, ys) {\r\n    if (!xs || xs.length === 0)\r\n        return !ys || ys.length === 0;\r\n    if (!ys)\r\n        return false;\r\n    var lenX = xs.length;\r\n    if (lenX !== ys.length)\r\n        return false;\r\n    for (var i = 0; i < lenX; i++) {\r\n        if (xs[i] !== ys[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nexport function arrayIsIdentity(xs) {\r\n    for (var i = 0, _i = xs.length; i < _i; i++) {\r\n        if (xs[i] !== i)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nexport function arrayMapUpsert(xs, key, value) {\r\n    for (var i = 0, il = xs.length; i < il; ++i) {\r\n        if (xs[i][0] === key) {\r\n            xs[i][1] = value;\r\n            return;\r\n        }\r\n    }\r\n    xs.push([key, value]);\r\n}\r\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"module"}