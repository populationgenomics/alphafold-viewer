{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { MolecularSurfaceCalculationParams } from '../../../mol-math/geometry/molecular-surface';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { computeUnitMolecularSurface } from './util/molecular-surface';\nimport { computeMarchingCubesMesh } from '../../../mol-geo/util/marching-cubes/algorithm';\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\nimport { CommonSurfaceParams, getUnitExtraRadius } from './util/common';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { applyMeshColorSmoothing, ColorSmoothingParams, getColorSmoothingProps } from './util/color';\nexport var MolecularSurfaceMeshParams = __assign(__assign(__assign(__assign({}, UnitsMeshParams), MolecularSurfaceCalculationParams), CommonSurfaceParams), ColorSmoothingParams); //\n\nfunction createMolecularSurfaceMesh(ctx, unit, structure, theme, props, mesh) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, transform, field, idField, resolution, params, surface, iterations, sphere;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , computeUnitMolecularSurface(structure, unit, props).runInContext(ctx.runtime)];\n\n        case 1:\n          _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField, resolution = _a.resolution;\n          params = {\n            isoLevel: props.probeRadius,\n            scalarField: field,\n            idField: idField\n          };\n          return [4\n          /*yield*/\n          , computeMarchingCubesMesh(params, mesh).runAsChild(ctx.runtime)];\n\n        case 2:\n          surface = _b.sent();\n\n          if (props.includeParent) {\n            iterations = Math.ceil(2 / props.resolution);\n            Mesh.smoothEdges(surface, {\n              iterations: iterations,\n              maxNewEdgeLength: Math.sqrt(2)\n            });\n          }\n\n          Mesh.transform(surface, transform);\n          if (ctx.webgl && !ctx.webgl.isWebGL2) Mesh.uniformTriangleGroup(surface);\n          sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.probeRadius + getUnitExtraRadius(unit));\n          surface.setBoundingSphere(sphere);\n          surface.meta.resolution = resolution;\n          return [2\n          /*return*/\n          , surface];\n      }\n    });\n  });\n}\n\nexport function MolecularSurfaceMeshVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(MolecularSurfaceMeshParams),\n    createGeometry: createMolecularSurfaceMesh,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      if (newProps.resolution !== currentProps.resolution) state.createGeometry = true;\n      if (newProps.probeRadius !== currentProps.probeRadius) state.createGeometry = true;\n      if (newProps.probePositions !== currentProps.probePositions) state.createGeometry = true;\n      if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens) state.createGeometry = true;\n      if (newProps.traceOnly !== currentProps.traceOnly) state.createGeometry = true;\n      if (newProps.includeParent !== currentProps.includeParent) state.createGeometry = true;\n\n      if (newProps.smoothColors.name !== currentProps.smoothColors.name) {\n        state.updateColor = true;\n      } else if (newProps.smoothColors.name === 'on' && currentProps.smoothColors.name === 'on') {\n        if (newProps.smoothColors.params.resolutionFactor !== currentProps.smoothColors.params.resolutionFactor) state.updateColor = true;\n        if (newProps.smoothColors.params.sampleStride !== currentProps.smoothColors.params.sampleStride) state.updateColor = true;\n      }\n    },\n    processValues: function (values, geometry, props, theme, webgl) {\n      var _a = geometry.meta,\n          resolution = _a.resolution,\n          colorTexture = _a.colorTexture;\n      var csp = getColorSmoothingProps(props, theme, resolution);\n\n      if (csp) {\n        applyMeshColorSmoothing(values, csp.resolution, csp.stride, webgl, colorTexture);\n        geometry.meta.colorTexture = values.tColorGrid.ref.value;\n      }\n    },\n    dispose: function (geometry) {\n      var _a;\n\n      (_a = geometry.meta.colorTexture) === null || _a === void 0 ? void 0 : _a.destroy();\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/molecular-surface-mesh.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { MolecularSurfaceCalculationParams } from '../../../mol-math/geometry/molecular-surface';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { computeUnitMolecularSurface } from './util/molecular-surface';\r\nimport { computeMarchingCubesMesh } from '../../../mol-geo/util/marching-cubes/algorithm';\r\nimport { ElementIterator, getElementLoci, eachElement } from './util/element';\r\nimport { CommonSurfaceParams, getUnitExtraRadius } from './util/common';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { applyMeshColorSmoothing, ColorSmoothingParams, getColorSmoothingProps } from './util/color';\r\nexport var MolecularSurfaceMeshParams = __assign(__assign(__assign(__assign({}, UnitsMeshParams), MolecularSurfaceCalculationParams), CommonSurfaceParams), ColorSmoothingParams);\r\n//\r\nfunction createMolecularSurfaceMesh(ctx, unit, structure, theme, props, mesh) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, transform, field, idField, resolution, params, surface, iterations, sphere;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, computeUnitMolecularSurface(structure, unit, props).runInContext(ctx.runtime)];\r\n                case 1:\r\n                    _a = _b.sent(), transform = _a.transform, field = _a.field, idField = _a.idField, resolution = _a.resolution;\r\n                    params = {\r\n                        isoLevel: props.probeRadius,\r\n                        scalarField: field,\r\n                        idField: idField\r\n                    };\r\n                    return [4 /*yield*/, computeMarchingCubesMesh(params, mesh).runAsChild(ctx.runtime)];\r\n                case 2:\r\n                    surface = _b.sent();\r\n                    if (props.includeParent) {\r\n                        iterations = Math.ceil(2 / props.resolution);\r\n                        Mesh.smoothEdges(surface, { iterations: iterations, maxNewEdgeLength: Math.sqrt(2) });\r\n                    }\r\n                    Mesh.transform(surface, transform);\r\n                    if (ctx.webgl && !ctx.webgl.isWebGL2)\r\n                        Mesh.uniformTriangleGroup(surface);\r\n                    sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.probeRadius + getUnitExtraRadius(unit));\r\n                    surface.setBoundingSphere(sphere);\r\n                    surface.meta.resolution = resolution;\r\n                    return [2 /*return*/, surface];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function MolecularSurfaceMeshVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(MolecularSurfaceMeshParams),\r\n        createGeometry: createMolecularSurfaceMesh,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            if (newProps.resolution !== currentProps.resolution)\r\n                state.createGeometry = true;\r\n            if (newProps.probeRadius !== currentProps.probeRadius)\r\n                state.createGeometry = true;\r\n            if (newProps.probePositions !== currentProps.probePositions)\r\n                state.createGeometry = true;\r\n            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)\r\n                state.createGeometry = true;\r\n            if (newProps.traceOnly !== currentProps.traceOnly)\r\n                state.createGeometry = true;\r\n            if (newProps.includeParent !== currentProps.includeParent)\r\n                state.createGeometry = true;\r\n            if (newProps.smoothColors.name !== currentProps.smoothColors.name) {\r\n                state.updateColor = true;\r\n            }\r\n            else if (newProps.smoothColors.name === 'on' && currentProps.smoothColors.name === 'on') {\r\n                if (newProps.smoothColors.params.resolutionFactor !== currentProps.smoothColors.params.resolutionFactor)\r\n                    state.updateColor = true;\r\n                if (newProps.smoothColors.params.sampleStride !== currentProps.smoothColors.params.sampleStride)\r\n                    state.updateColor = true;\r\n            }\r\n        },\r\n        processValues: function (values, geometry, props, theme, webgl) {\r\n            var _a = geometry.meta, resolution = _a.resolution, colorTexture = _a.colorTexture;\r\n            var csp = getColorSmoothingProps(props, theme, resolution);\r\n            if (csp) {\r\n                applyMeshColorSmoothing(values, csp.resolution, csp.stride, webgl, colorTexture);\r\n                geometry.meta.colorTexture = values.tColorGrid.ref.value;\r\n            }\r\n        },\r\n        dispose: function (geometry) {\r\n            var _a;\r\n            (_a = geometry.meta.colorTexture) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=molecular-surface-mesh.js.map"]},"metadata":{},"sourceType":"module"}