{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nfunction Vec2() {\n  return Vec2.zero();\n}\n\n(function (Vec2) {\n  function zero() {\n    // force double backing array by 0.1.\n    var ret = [0.1, 0];\n    ret[0] = 0.0;\n    return ret;\n  }\n\n  Vec2.zero = zero;\n\n  function clone(a) {\n    var out = zero();\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n  }\n\n  Vec2.clone = clone;\n\n  function create(x, y) {\n    var out = zero();\n    out[0] = x;\n    out[1] = y;\n    return out;\n  }\n\n  Vec2.create = create;\n\n  function hasNaN(a) {\n    return isNaN(a[0]) || isNaN(a[1]);\n  }\n\n  Vec2.hasNaN = hasNaN;\n\n  function toArray(a, out, offset) {\n    out[offset + 0] = a[0];\n    out[offset + 1] = a[1];\n    return out;\n  }\n\n  Vec2.toArray = toArray;\n\n  function fromArray(a, array, offset) {\n    a[0] = array[offset + 0];\n    a[1] = array[offset + 1];\n    return a;\n  }\n\n  Vec2.fromArray = fromArray;\n\n  function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n  }\n\n  Vec2.copy = copy;\n\n  function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n  }\n\n  Vec2.set = set;\n\n  function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n  }\n\n  Vec2.add = add;\n\n  function sub(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n  }\n\n  Vec2.sub = sub;\n\n  function mul(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n  }\n\n  Vec2.mul = mul;\n\n  function div(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n  }\n\n  Vec2.div = div;\n\n  function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n  }\n\n  Vec2.scale = scale;\n  /**\r\n   * Math.round the components of a Vec2\r\n   */\n\n  function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n  }\n\n  Vec2.round = round;\n  /**\r\n   * Math.ceil the components of a Vec2\r\n   */\n\n  function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n  }\n\n  Vec2.ceil = ceil;\n  /**\r\n   * Math.floor the components of a Vec2\r\n   */\n\n  function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n  }\n\n  Vec2.floor = floor;\n\n  function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  Vec2.distance = distance;\n\n  function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n  }\n\n  Vec2.squaredDistance = squaredDistance;\n\n  function magnitude(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  Vec2.magnitude = magnitude;\n\n  function squaredMagnitude(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n  }\n\n  Vec2.squaredMagnitude = squaredMagnitude;\n  /**\r\n   * Returns the inverse of the components of a Vec2\r\n   */\n\n  function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n  }\n\n  Vec2.inverse = inverse;\n\n  function areEqual(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n\n  Vec2.areEqual = areEqual;\n\n  function toString(a, precision) {\n    return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \"}]\";\n  }\n\n  Vec2.toString = toString;\n})(Vec2 || (Vec2 = {}));\n\nexport { Vec2 };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/3d/vec2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nfunction Vec2() {\r\n    return Vec2.zero();\r\n}\r\n(function (Vec2) {\r\n    function zero() {\r\n        // force double backing array by 0.1.\r\n        var ret = [0.1, 0];\r\n        ret[0] = 0.0;\r\n        return ret;\r\n    }\r\n    Vec2.zero = zero;\r\n    function clone(a) {\r\n        var out = zero();\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        return out;\r\n    }\r\n    Vec2.clone = clone;\r\n    function create(x, y) {\r\n        var out = zero();\r\n        out[0] = x;\r\n        out[1] = y;\r\n        return out;\r\n    }\r\n    Vec2.create = create;\r\n    function hasNaN(a) {\r\n        return isNaN(a[0]) || isNaN(a[1]);\r\n    }\r\n    Vec2.hasNaN = hasNaN;\r\n    function toArray(a, out, offset) {\r\n        out[offset + 0] = a[0];\r\n        out[offset + 1] = a[1];\r\n        return out;\r\n    }\r\n    Vec2.toArray = toArray;\r\n    function fromArray(a, array, offset) {\r\n        a[0] = array[offset + 0];\r\n        a[1] = array[offset + 1];\r\n        return a;\r\n    }\r\n    Vec2.fromArray = fromArray;\r\n    function copy(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        return out;\r\n    }\r\n    Vec2.copy = copy;\r\n    function set(out, x, y) {\r\n        out[0] = x;\r\n        out[1] = y;\r\n        return out;\r\n    }\r\n    Vec2.set = set;\r\n    function add(out, a, b) {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        return out;\r\n    }\r\n    Vec2.add = add;\r\n    function sub(out, a, b) {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - b[1];\r\n        return out;\r\n    }\r\n    Vec2.sub = sub;\r\n    function mul(out, a, b) {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * b[1];\r\n        return out;\r\n    }\r\n    Vec2.mul = mul;\r\n    function div(out, a, b) {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / b[1];\r\n        return out;\r\n    }\r\n    Vec2.div = div;\r\n    function scale(out, a, b) {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        return out;\r\n    }\r\n    Vec2.scale = scale;\r\n    /**\r\n     * Math.round the components of a Vec2\r\n     */\r\n    function round(out, a) {\r\n        out[0] = Math.round(a[0]);\r\n        out[1] = Math.round(a[1]);\r\n        return out;\r\n    }\r\n    Vec2.round = round;\r\n    /**\r\n     * Math.ceil the components of a Vec2\r\n     */\r\n    function ceil(out, a) {\r\n        out[0] = Math.ceil(a[0]);\r\n        out[1] = Math.ceil(a[1]);\r\n        return out;\r\n    }\r\n    Vec2.ceil = ceil;\r\n    /**\r\n     * Math.floor the components of a Vec2\r\n     */\r\n    function floor(out, a) {\r\n        out[0] = Math.floor(a[0]);\r\n        out[1] = Math.floor(a[1]);\r\n        return out;\r\n    }\r\n    Vec2.floor = floor;\r\n    function distance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1];\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n    Vec2.distance = distance;\r\n    function squaredDistance(a, b) {\r\n        var x = b[0] - a[0], y = b[1] - a[1];\r\n        return x * x + y * y;\r\n    }\r\n    Vec2.squaredDistance = squaredDistance;\r\n    function magnitude(a) {\r\n        var x = a[0], y = a[1];\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n    Vec2.magnitude = magnitude;\r\n    function squaredMagnitude(a) {\r\n        var x = a[0], y = a[1];\r\n        return x * x + y * y;\r\n    }\r\n    Vec2.squaredMagnitude = squaredMagnitude;\r\n    /**\r\n     * Returns the inverse of the components of a Vec2\r\n     */\r\n    function inverse(out, a) {\r\n        out[0] = 1.0 / a[0];\r\n        out[1] = 1.0 / a[1];\r\n        return out;\r\n    }\r\n    Vec2.inverse = inverse;\r\n    function areEqual(a, b) {\r\n        return a[0] === b[0] && a[1] === b[1];\r\n    }\r\n    Vec2.areEqual = areEqual;\r\n    function toString(a, precision) {\r\n        return \"[\" + a[0].toPrecision(precision) + \" \" + a[1].toPrecision(precision) + \"}]\";\r\n    }\r\n    Vec2.toString = toString;\r\n})(Vec2 || (Vec2 = {}));\r\nexport { Vec2 };\r\n//# sourceMappingURL=vec2.js.map"]},"metadata":{},"sourceType":"module"}