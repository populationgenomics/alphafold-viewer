{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Unit } from '../unit';\nimport { StructureProperties } from '../properties';\nexport function property(p) {\n  return p;\n}\n\nfunction _wrongUnitKind(kind) {\n  throw new Error(\"Property only available for \" + kind + \" models.\");\n}\n\nexport function atomicProperty(p) {\n  return property(function (l) {\n    return Unit.isAtomic(l.unit) ? p(l) : _wrongUnitKind('atomic');\n  });\n}\nexport function coarseProperty(p) {\n  return property(function (l) {\n    return Unit.isCoarse(l.unit) ? p(l) : _wrongUnitKind('coarse');\n  });\n}\nexport function residueIndex(e) {\n  if (Unit.isAtomic(e.unit)) {\n    return e.unit.residueIndex[e.element];\n  } else {\n    // TODO: throw error instead?\n    return -1;\n  }\n}\nexport function chainIndex(e) {\n  if (Unit.isAtomic(e.unit)) {\n    return e.unit.chainIndex[e.element];\n  } else {\n    // TODO: throw error instead?\n    return -1;\n  }\n}\nexport function entityIndex(l) {\n  return StructureProperties.entity.key(l);\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/element/util.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAIH,SAAS,IAAT,QAAqB,SAArB;AAEA,SAAS,mBAAT,QAAoC,eAApC;AAWA,OAAM,SAAU,QAAV,CAAsB,CAAtB,EAAoC;AAAI,SAAO,CAAP;AAAW;;AAEzD,SAAS,cAAT,CAAwB,IAAxB,EAAoC;AAAI,QAAM,IAAI,KAAJ,CAAU,iCAA+B,IAA/B,GAAmC,UAA7C,CAAN;AAAiE;;AACzG,OAAM,SAAU,cAAV,CAA4B,CAA5B,EAAqE;AACvE,SAAO,QAAQ,CAAC,UAAA,CAAA,EAAC;AAAI,WAAA,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,IAAwB,CAAC,CAAC,CAAD,CAAzB,GAAwD,cAAc,CAAtE,QAAsE,CAAtE;AAAgF,GAAtF,CAAf;AACH;AAED,OAAM,SAAU,cAAV,CAA4B,CAA5B,EAAuF;AACzF,SAAO,QAAQ,CAAC,UAAA,CAAA,EAAC;AAAI,WAAA,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,IAAwB,CAAC,CAAC,CAAD,CAAzB,GAA0E,cAAc,CAAxF,QAAwF,CAAxF;AAAkG,GAAxG,CAAf;AACH;AAED,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAkC;AACpC,MAAI,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,CAAJ,EAA2B;AACvB,WAAO,CAAC,CAAC,IAAF,CAAO,YAAP,CAAoB,CAAC,CAAC,OAAtB,CAAP;AACH,GAFD,MAEO;AACH;AACA,WAAO,CAAC,CAAR;AACH;AACJ;AAED,OAAM,SAAU,UAAV,CAAqB,CAArB,EAAgC;AAClC,MAAI,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,CAAJ,EAA2B;AACvB,WAAO,CAAC,CAAC,IAAF,CAAO,UAAP,CAAkB,CAAC,CAAC,OAApB,CAAP;AACH,GAFD,MAEO;AACH;AACA,WAAO,CAAC,CAAR;AACH;AACJ;AAED,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAiC;AACnC,SAAO,mBAAmB,CAAC,MAApB,CAA2B,GAA3B,CAA+B,CAA/B,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Unit } from '../unit';\r\nimport { StructureProperties } from '../properties';\r\nexport function property(p) { return p; }\r\nfunction _wrongUnitKind(kind) { throw new Error(\"Property only available for \" + kind + \" models.\"); }\r\nexport function atomicProperty(p) {\r\n    return property(function (l) { return Unit.isAtomic(l.unit) ? p(l) : _wrongUnitKind('atomic'); });\r\n}\r\nexport function coarseProperty(p) {\r\n    return property(function (l) { return Unit.isCoarse(l.unit) ? p(l) : _wrongUnitKind('coarse'); });\r\n}\r\nexport function residueIndex(e) {\r\n    if (Unit.isAtomic(e.unit)) {\r\n        return e.unit.residueIndex[e.element];\r\n    }\r\n    else {\r\n        // TODO: throw error instead?\r\n        return -1;\r\n    }\r\n}\r\nexport function chainIndex(e) {\r\n    if (Unit.isAtomic(e.unit)) {\r\n        return e.unit.chainIndex[e.element];\r\n    }\r\n    else {\r\n        // TODO: throw error instead?\r\n        return -1;\r\n    }\r\n}\r\nexport function entityIndex(l) {\r\n    return StructureProperties.entity.key(l);\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}