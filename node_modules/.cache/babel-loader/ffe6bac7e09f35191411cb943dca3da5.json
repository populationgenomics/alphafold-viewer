{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\nexport function parseConect(lines, lineStart, lineEnd, sites) {\n  var idMap = {};\n\n  for (var i = 0, il = sites.id.rowCount; i < il; ++i) {\n    idMap[sites.id.str(i)] = i;\n  }\n\n  var getLine = function (n) {\n    return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]);\n  };\n\n  var id = [];\n  var conn_type_id = [];\n  var ptnr1_label_asym_id = [];\n  var ptnr1_label_seq_id = [];\n  var ptnr1_auth_seq_id = [];\n  var ptnr1_label_atom_id = [];\n  var ptnr2_label_asym_id = [];\n  var ptnr2_label_seq_id = [];\n  var ptnr2_auth_seq_id = [];\n  var ptnr2_label_atom_id = [];\n  var pos = [11, 16, 21, 26];\n  var k = 1;\n\n  for (var i = lineStart; i < lineEnd; i++) {\n    var line = getLine(i);\n    var idxA = idMap[parseInt(line.substr(6, 5))];\n    var bondIndex = {};\n    if (idxA === undefined) continue;\n\n    for (var j = 0; j < 4; ++j) {\n      var idB = parseInt(line.substr(pos[j], 5));\n      if (Number.isNaN(idB)) continue;\n      var idxB = idMap[idB];\n      if (idxB === undefined) continue;\n      if (idxA > idxB) continue; // TODO: interpret records where a 'idxB' atom is given multiple times\n      // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond\n\n      if (bondIndex[idxB] !== undefined) continue;\n      id.push(\"covale\" + k);\n      conn_type_id.push('covale');\n      ptnr1_label_asym_id.push(sites.label_asym_id.str(idxA));\n      ptnr1_auth_seq_id.push(sites.auth_seq_id.int(idxA));\n      ptnr1_label_seq_id.push(sites.label_seq_id.int(idxA));\n      ptnr1_label_atom_id.push(sites.label_atom_id.str(idxA));\n      ptnr2_label_asym_id.push(sites.label_asym_id.str(idxB));\n      ptnr2_auth_seq_id.push(sites.auth_seq_id.int(idxB));\n      ptnr2_label_seq_id.push(sites.label_seq_id.int(idxB));\n      ptnr2_label_atom_id.push(sites.label_atom_id.str(idxB));\n      k += 1;\n    }\n  }\n\n  var struct_conn = {\n    id: CifField.ofStrings(id),\n    conn_type_id: CifField.ofStrings(conn_type_id),\n    ptnr1_label_asym_id: CifField.ofStrings(ptnr1_label_asym_id),\n    ptnr1_auth_seq_id: CifField.ofNumbers(ptnr1_auth_seq_id),\n    ptnr1_label_seq_id: CifField.ofNumbers(ptnr1_label_seq_id),\n    ptnr1_label_atom_id: CifField.ofStrings(ptnr1_label_atom_id),\n    ptnr2_label_asym_id: CifField.ofStrings(ptnr2_label_asym_id),\n    ptnr2_label_seq_id: CifField.ofNumbers(ptnr2_label_seq_id),\n    ptnr2_auth_seq_id: CifField.ofNumbers(ptnr2_auth_seq_id),\n    ptnr2_label_atom_id: CifField.ofStrings(ptnr2_label_atom_id)\n  };\n  return CifCategory.ofFields('struct_conn', struct_conn);\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/pdb/conect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\r\nexport function parseConect(lines, lineStart, lineEnd, sites) {\r\n    var idMap = {};\r\n    for (var i = 0, il = sites.id.rowCount; i < il; ++i) {\r\n        idMap[sites.id.str(i)] = i;\r\n    }\r\n    var getLine = function (n) { return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]); };\r\n    var id = [];\r\n    var conn_type_id = [];\r\n    var ptnr1_label_asym_id = [];\r\n    var ptnr1_label_seq_id = [];\r\n    var ptnr1_auth_seq_id = [];\r\n    var ptnr1_label_atom_id = [];\r\n    var ptnr2_label_asym_id = [];\r\n    var ptnr2_label_seq_id = [];\r\n    var ptnr2_auth_seq_id = [];\r\n    var ptnr2_label_atom_id = [];\r\n    var pos = [11, 16, 21, 26];\r\n    var k = 1;\r\n    for (var i = lineStart; i < lineEnd; i++) {\r\n        var line = getLine(i);\r\n        var idxA = idMap[parseInt(line.substr(6, 5))];\r\n        var bondIndex = {};\r\n        if (idxA === undefined)\r\n            continue;\r\n        for (var j = 0; j < 4; ++j) {\r\n            var idB = parseInt(line.substr(pos[j], 5));\r\n            if (Number.isNaN(idB))\r\n                continue;\r\n            var idxB = idMap[idB];\r\n            if (idxB === undefined)\r\n                continue;\r\n            if (idxA > idxB)\r\n                continue;\r\n            // TODO: interpret records where a 'idxB' atom is given multiple times\r\n            // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond\r\n            if (bondIndex[idxB] !== undefined)\r\n                continue;\r\n            id.push(\"covale\" + k);\r\n            conn_type_id.push('covale');\r\n            ptnr1_label_asym_id.push(sites.label_asym_id.str(idxA));\r\n            ptnr1_auth_seq_id.push(sites.auth_seq_id.int(idxA));\r\n            ptnr1_label_seq_id.push(sites.label_seq_id.int(idxA));\r\n            ptnr1_label_atom_id.push(sites.label_atom_id.str(idxA));\r\n            ptnr2_label_asym_id.push(sites.label_asym_id.str(idxB));\r\n            ptnr2_auth_seq_id.push(sites.auth_seq_id.int(idxB));\r\n            ptnr2_label_seq_id.push(sites.label_seq_id.int(idxB));\r\n            ptnr2_label_atom_id.push(sites.label_atom_id.str(idxB));\r\n            k += 1;\r\n        }\r\n    }\r\n    var struct_conn = {\r\n        id: CifField.ofStrings(id),\r\n        conn_type_id: CifField.ofStrings(conn_type_id),\r\n        ptnr1_label_asym_id: CifField.ofStrings(ptnr1_label_asym_id),\r\n        ptnr1_auth_seq_id: CifField.ofNumbers(ptnr1_auth_seq_id),\r\n        ptnr1_label_seq_id: CifField.ofNumbers(ptnr1_label_seq_id),\r\n        ptnr1_label_atom_id: CifField.ofStrings(ptnr1_label_atom_id),\r\n        ptnr2_label_asym_id: CifField.ofStrings(ptnr2_label_asym_id),\r\n        ptnr2_label_seq_id: CifField.ofNumbers(ptnr2_label_seq_id),\r\n        ptnr2_auth_seq_id: CifField.ofNumbers(ptnr2_auth_seq_id),\r\n        ptnr2_label_atom_id: CifField.ofStrings(ptnr2_label_atom_id),\r\n    };\r\n    return CifCategory.ofFields('struct_conn', struct_conn);\r\n}\r\n//# sourceMappingURL=conect.js.map"]},"metadata":{},"sourceType":"module"}