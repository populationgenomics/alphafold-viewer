{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Unit, Structure, StructureElement } from '../../../mol-model/structure';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { EmptyLoci } from '../../../mol-model/loci';\nimport { Interval, OrderedSet, SortedArray } from '../../../mol-data/int';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { InteractionsProvider } from '../interactions';\nimport { createLinkCylinderMesh, LinkCylinderParams } from '../../../mol-repr/structure/visual/util/link';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../../../mol-repr/structure/units-visual';\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\nimport { Interactions } from '../interactions/interactions';\nimport { Sphere3D } from '../../../mol-math/geometry';\n\nfunction createIntraUnitInteractionsCylinderMesh(ctx, unit, structure, theme, props, mesh) {\n  return __awaiter(this, void 0, void 0, function () {\n    var child, childUnit, location, interactions, features, contacts, x, y, z, members, offsets, edgeCount, a, b, flag, sizeFactor, builderProps, m, sphere;\n    return __generator(this, function (_a) {\n      if (!Unit.isAtomic(unit)) return [2\n      /*return*/\n      , Mesh.createEmpty(mesh)];\n      child = structure.child;\n      childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n      if (child && !childUnit) return [2\n      /*return*/\n      , Mesh.createEmpty(mesh)];\n      location = StructureElement.Location.create(structure, unit);\n      interactions = InteractionsProvider.get(structure).value;\n      features = interactions.unitsFeatures.get(unit.id);\n      contacts = interactions.unitsContacts.get(unit.id);\n      x = features.x, y = features.y, z = features.z, members = features.members, offsets = features.offsets;\n      edgeCount = contacts.edgeCount, a = contacts.a, b = contacts.b, flag = contacts.edgeProps.flag;\n      sizeFactor = props.sizeFactor;\n      if (!edgeCount) return [2\n      /*return*/\n      , Mesh.createEmpty(mesh)];\n      builderProps = {\n        linkCount: edgeCount * 2,\n        position: function (posA, posB, edgeIndex) {\n          Vec3.set(posA, x[a[edgeIndex]], y[a[edgeIndex]], z[a[edgeIndex]]);\n          Vec3.set(posB, x[b[edgeIndex]], y[b[edgeIndex]], z[b[edgeIndex]]);\n        },\n        style: function (edgeIndex) {\n          return 1\n          /* Dashed */\n          ;\n        },\n        radius: function (edgeIndex) {\n          location.element = unit.elements[members[offsets[a[edgeIndex]]]];\n          var sizeA = theme.size.size(location);\n          location.element = unit.elements[members[offsets[b[edgeIndex]]]];\n          var sizeB = theme.size.size(location);\n          return Math.min(sizeA, sizeB) * sizeFactor;\n        },\n        ignore: function (edgeIndex) {\n          return flag[edgeIndex] === 1\n          /* Filtered */\n          || // TODO: check all members\n          !!childUnit && !SortedArray.has(childUnit.elements, unit.elements[members[offsets[a[edgeIndex]]]]);\n        }\n      };\n      m = createLinkCylinderMesh(ctx, builderProps, props, mesh);\n      sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * sizeFactor);\n      m.setBoundingSphere(sphere);\n      return [2\n      /*return*/\n      , m];\n    });\n  });\n}\n\nexport var InteractionsIntraUnitParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), {\n  sizeFactor: PD.Numeric(0.3, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  dashCount: PD.Numeric(6, {\n    min: 2,\n    max: 10,\n    step: 2\n  }),\n  dashScale: PD.Numeric(0.4, {\n    min: 0,\n    max: 2,\n    step: 0.1\n  }),\n  includeParent: PD.Boolean(false)\n});\nexport function InteractionsIntraUnitVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(InteractionsIntraUnitParams),\n    createGeometry: createIntraUnitInteractionsCylinderMesh,\n    createLocationIterator: createInteractionsIterator,\n    getLoci: getInteractionLoci,\n    eachLocation: eachInteraction,\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.dashCount !== currentProps.dashCount || newProps.dashScale !== currentProps.dashScale || newProps.dashCap !== currentProps.dashCap || newProps.radialSegments !== currentProps.radialSegments;\n      var interactionsHash = InteractionsProvider.get(newStructureGroup.structure).version;\n\n      if (state.info.interactionsHash !== interactionsHash) {\n        state.createGeometry = true;\n        state.updateTransform = true;\n        state.updateColor = true;\n        state.info.interactionsHash = interactionsHash;\n      }\n    }\n  }, materialId);\n}\n\nfunction getInteractionLoci(pickingId, structureGroup, id) {\n  var objectId = pickingId.objectId,\n      instanceId = pickingId.instanceId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var structure = structureGroup.structure,\n        group = structureGroup.group;\n    var unit = structure.unitMap.get(group.units[instanceId].id);\n    var interactions = InteractionsProvider.get(structure).value;\n\n    var _a = interactions.unitsContacts.get(unit.id),\n        a = _a.a,\n        b = _a.b;\n\n    return Interactions.Loci(structure, interactions, [{\n      unitA: unit,\n      indexA: a[groupId],\n      unitB: unit,\n      indexB: b[groupId]\n    }, {\n      unitA: unit,\n      indexA: b[groupId],\n      unitB: unit,\n      indexB: a[groupId]\n    }]);\n  }\n\n  return EmptyLoci;\n}\n\nfunction eachInteraction(loci, structureGroup, apply, isMarking) {\n  var changed = false;\n\n  if (Interactions.isLoci(loci)) {\n    var structure = structureGroup.structure,\n        group = structureGroup.group;\n    if (!Structure.areEquivalent(loci.data.structure, structure)) return false;\n    var interactions = InteractionsProvider.get(structure).value;\n    if (loci.data.interactions !== interactions) return false;\n    var unit = group.units[0];\n    var contacts = interactions.unitsContacts.get(unit.id);\n    var groupCount = contacts.edgeCount * 2;\n\n    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n      var e = _a[_i];\n      if (e.unitA !== e.unitB) continue;\n      var unitIdx = group.unitIndexMap.get(e.unitA.id);\n\n      if (unitIdx !== undefined) {\n        var idx = contacts.getDirectedEdgeIndex(e.indexA, e.indexB);\n\n        if (idx !== -1) {\n          if (apply(Interval.ofSingleton(unitIdx * groupCount + idx))) changed = true;\n        }\n      }\n    }\n  } else if (StructureElement.Loci.is(loci)) {\n    var structure = structureGroup.structure,\n        group = structureGroup.group;\n    if (!Structure.areEquivalent(loci.structure, structure)) return false;\n    var interactions = InteractionsProvider.get(structure).value;\n    if (!interactions) return false;\n    var unit = group.units[0];\n    var contacts = interactions.unitsContacts.get(unit.id);\n    var features = interactions.unitsFeatures.get(unit.id);\n    var groupCount_1 = contacts.edgeCount * 2;\n    var offset_1 = contacts.offset;\n    var _b = features.elementsIndex,\n        fOffsets_1 = _b.offsets,\n        fIndices_1 = _b.indices;\n\n    var _loop_1 = function (e) {\n      var unitIdx = group.unitIndexMap.get(e.unit.id);\n      if (unitIdx !== undefined) return \"continue\";\n      if (isMarking && OrderedSet.size(e.indices) === 1) return \"continue\";\n      OrderedSet.forEach(e.indices, function (v) {\n        for (var i = fOffsets_1[v], il = fOffsets_1[v + 1]; i < il; ++i) {\n          var fI = fIndices_1[i];\n\n          for (var j = offset_1[fI], jl = offset_1[fI + 1]; j < jl; ++j) {\n            if (apply(Interval.ofSingleton(unitIdx * groupCount_1 + j))) changed = true;\n          }\n        }\n      });\n    }; // TODO: when isMarking, all elements of contact features need to be in the loci\n\n\n    for (var _c = 0, _d = loci.elements; _c < _d.length; _c++) {\n      var e = _d[_c];\n\n      _loop_1(e);\n    }\n  }\n\n  return changed;\n}\n\nfunction createInteractionsIterator(structureGroup) {\n  var structure = structureGroup.structure,\n      group = structureGroup.group;\n  var unit = group.units[0];\n  var interactions = InteractionsProvider.get(structure).value;\n  var contacts = interactions.unitsContacts.get(unit.id);\n  var groupCount = contacts.edgeCount * 2;\n  var instanceCount = group.units.length;\n  var location = Interactions.Location(interactions, structure);\n  var element = location.element;\n\n  var getLocation = function (groupIndex, instanceIndex) {\n    var instanceUnit = group.units[instanceIndex];\n    element.unitA = instanceUnit;\n    element.indexA = contacts.a[groupIndex];\n    element.unitB = instanceUnit;\n    element.indexB = contacts.b[groupIndex];\n    return location;\n  };\n\n  return LocationIterator(groupCount, instanceCount, 1, getLocation);\n}","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/representations/interactions-intra-unit-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Unit, Structure, StructureElement } from '../../../mol-model/structure';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { EmptyLoci } from '../../../mol-model/loci';\r\nimport { Interval, OrderedSet, SortedArray } from '../../../mol-data/int';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { InteractionsProvider } from '../interactions';\r\nimport { createLinkCylinderMesh, LinkCylinderParams } from '../../../mol-repr/structure/visual/util/link';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../../../mol-repr/structure/units-visual';\r\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\r\nimport { Interactions } from '../interactions/interactions';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nfunction createIntraUnitInteractionsCylinderMesh(ctx, unit, structure, theme, props, mesh) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var child, childUnit, location, interactions, features, contacts, x, y, z, members, offsets, edgeCount, a, b, flag, sizeFactor, builderProps, m, sphere;\r\n        return __generator(this, function (_a) {\r\n            if (!Unit.isAtomic(unit))\r\n                return [2 /*return*/, Mesh.createEmpty(mesh)];\r\n            child = structure.child;\r\n            childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n            if (child && !childUnit)\r\n                return [2 /*return*/, Mesh.createEmpty(mesh)];\r\n            location = StructureElement.Location.create(structure, unit);\r\n            interactions = InteractionsProvider.get(structure).value;\r\n            features = interactions.unitsFeatures.get(unit.id);\r\n            contacts = interactions.unitsContacts.get(unit.id);\r\n            x = features.x, y = features.y, z = features.z, members = features.members, offsets = features.offsets;\r\n            edgeCount = contacts.edgeCount, a = contacts.a, b = contacts.b, flag = contacts.edgeProps.flag;\r\n            sizeFactor = props.sizeFactor;\r\n            if (!edgeCount)\r\n                return [2 /*return*/, Mesh.createEmpty(mesh)];\r\n            builderProps = {\r\n                linkCount: edgeCount * 2,\r\n                position: function (posA, posB, edgeIndex) {\r\n                    Vec3.set(posA, x[a[edgeIndex]], y[a[edgeIndex]], z[a[edgeIndex]]);\r\n                    Vec3.set(posB, x[b[edgeIndex]], y[b[edgeIndex]], z[b[edgeIndex]]);\r\n                },\r\n                style: function (edgeIndex) { return 1 /* Dashed */; },\r\n                radius: function (edgeIndex) {\r\n                    location.element = unit.elements[members[offsets[a[edgeIndex]]]];\r\n                    var sizeA = theme.size.size(location);\r\n                    location.element = unit.elements[members[offsets[b[edgeIndex]]]];\r\n                    var sizeB = theme.size.size(location);\r\n                    return Math.min(sizeA, sizeB) * sizeFactor;\r\n                },\r\n                ignore: function (edgeIndex) { return (flag[edgeIndex] === 1 /* Filtered */ ||\r\n                    // TODO: check all members\r\n                    (!!childUnit && !SortedArray.has(childUnit.elements, unit.elements[members[offsets[a[edgeIndex]]]]))); }\r\n            };\r\n            m = createLinkCylinderMesh(ctx, builderProps, props, mesh);\r\n            sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * sizeFactor);\r\n            m.setBoundingSphere(sphere);\r\n            return [2 /*return*/, m];\r\n        });\r\n    });\r\n}\r\nexport var InteractionsIntraUnitParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), { sizeFactor: PD.Numeric(0.3, { min: 0, max: 10, step: 0.01 }), dashCount: PD.Numeric(6, { min: 2, max: 10, step: 2 }), dashScale: PD.Numeric(0.4, { min: 0, max: 2, step: 0.1 }), includeParent: PD.Boolean(false) });\r\nexport function InteractionsIntraUnitVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(InteractionsIntraUnitParams),\r\n        createGeometry: createIntraUnitInteractionsCylinderMesh,\r\n        createLocationIterator: createInteractionsIterator,\r\n        getLoci: getInteractionLoci,\r\n        eachLocation: eachInteraction,\r\n        setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.dashCount !== currentProps.dashCount ||\r\n                newProps.dashScale !== currentProps.dashScale ||\r\n                newProps.dashCap !== currentProps.dashCap ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n            var interactionsHash = InteractionsProvider.get(newStructureGroup.structure).version;\r\n            if (state.info.interactionsHash !== interactionsHash) {\r\n                state.createGeometry = true;\r\n                state.updateTransform = true;\r\n                state.updateColor = true;\r\n                state.info.interactionsHash = interactionsHash;\r\n            }\r\n        }\r\n    }, materialId);\r\n}\r\nfunction getInteractionLoci(pickingId, structureGroup, id) {\r\n    var objectId = pickingId.objectId, instanceId = pickingId.instanceId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var structure = structureGroup.structure, group = structureGroup.group;\r\n        var unit = structure.unitMap.get(group.units[instanceId].id);\r\n        var interactions = InteractionsProvider.get(structure).value;\r\n        var _a = interactions.unitsContacts.get(unit.id), a = _a.a, b = _a.b;\r\n        return Interactions.Loci(structure, interactions, [\r\n            { unitA: unit, indexA: a[groupId], unitB: unit, indexB: b[groupId] },\r\n            { unitA: unit, indexA: b[groupId], unitB: unit, indexB: a[groupId] },\r\n        ]);\r\n    }\r\n    return EmptyLoci;\r\n}\r\nfunction eachInteraction(loci, structureGroup, apply, isMarking) {\r\n    var changed = false;\r\n    if (Interactions.isLoci(loci)) {\r\n        var structure = structureGroup.structure, group = structureGroup.group;\r\n        if (!Structure.areEquivalent(loci.data.structure, structure))\r\n            return false;\r\n        var interactions = InteractionsProvider.get(structure).value;\r\n        if (loci.data.interactions !== interactions)\r\n            return false;\r\n        var unit = group.units[0];\r\n        var contacts = interactions.unitsContacts.get(unit.id);\r\n        var groupCount = contacts.edgeCount * 2;\r\n        for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n            var e = _a[_i];\r\n            if (e.unitA !== e.unitB)\r\n                continue;\r\n            var unitIdx = group.unitIndexMap.get(e.unitA.id);\r\n            if (unitIdx !== undefined) {\r\n                var idx = contacts.getDirectedEdgeIndex(e.indexA, e.indexB);\r\n                if (idx !== -1) {\r\n                    if (apply(Interval.ofSingleton(unitIdx * groupCount + idx)))\r\n                        changed = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (StructureElement.Loci.is(loci)) {\r\n        var structure = structureGroup.structure, group = structureGroup.group;\r\n        if (!Structure.areEquivalent(loci.structure, structure))\r\n            return false;\r\n        var interactions = InteractionsProvider.get(structure).value;\r\n        if (!interactions)\r\n            return false;\r\n        var unit = group.units[0];\r\n        var contacts = interactions.unitsContacts.get(unit.id);\r\n        var features = interactions.unitsFeatures.get(unit.id);\r\n        var groupCount_1 = contacts.edgeCount * 2;\r\n        var offset_1 = contacts.offset;\r\n        var _b = features.elementsIndex, fOffsets_1 = _b.offsets, fIndices_1 = _b.indices;\r\n        var _loop_1 = function (e) {\r\n            var unitIdx = group.unitIndexMap.get(e.unit.id);\r\n            if (unitIdx !== undefined)\r\n                return \"continue\";\r\n            if (isMarking && OrderedSet.size(e.indices) === 1)\r\n                return \"continue\";\r\n            OrderedSet.forEach(e.indices, function (v) {\r\n                for (var i = fOffsets_1[v], il = fOffsets_1[v + 1]; i < il; ++i) {\r\n                    var fI = fIndices_1[i];\r\n                    for (var j = offset_1[fI], jl = offset_1[fI + 1]; j < jl; ++j) {\r\n                        if (apply(Interval.ofSingleton(unitIdx * groupCount_1 + j)))\r\n                            changed = true;\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        // TODO: when isMarking, all elements of contact features need to be in the loci\r\n        for (var _c = 0, _d = loci.elements; _c < _d.length; _c++) {\r\n            var e = _d[_c];\r\n            _loop_1(e);\r\n        }\r\n    }\r\n    return changed;\r\n}\r\nfunction createInteractionsIterator(structureGroup) {\r\n    var structure = structureGroup.structure, group = structureGroup.group;\r\n    var unit = group.units[0];\r\n    var interactions = InteractionsProvider.get(structure).value;\r\n    var contacts = interactions.unitsContacts.get(unit.id);\r\n    var groupCount = contacts.edgeCount * 2;\r\n    var instanceCount = group.units.length;\r\n    var location = Interactions.Location(interactions, structure);\r\n    var element = location.element;\r\n    var getLocation = function (groupIndex, instanceIndex) {\r\n        var instanceUnit = group.units[instanceIndex];\r\n        element.unitA = instanceUnit;\r\n        element.indexA = contacts.a[groupIndex];\r\n        element.unitB = instanceUnit;\r\n        element.indexB = contacts.b[groupIndex];\r\n        return location;\r\n    };\r\n    return LocationIterator(groupCount, instanceCount, 1, getLocation);\r\n}\r\n//# sourceMappingURL=interactions-intra-unit-cylinder.js.map"]},"metadata":{},"sourceType":"module"}