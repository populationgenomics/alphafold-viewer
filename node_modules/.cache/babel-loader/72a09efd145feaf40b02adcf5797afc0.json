{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createRenderable } from '../renderable';\nimport { createGraphicsRenderItem } from '../webgl/render-item';\nimport { GlobalUniformSchema, BaseSchema, AttributeSpec, DefineSpec, InternalSchema, SizeSchema, GlobalTextureSchema } from './schema';\nimport { PointsShaderCode } from '../shader-code';\nimport { ValueCell } from '../../mol-util';\nimport { Points } from '../../mol-geo/geometry/points/points';\nexport var PointsSchema = __assign(__assign(__assign({}, BaseSchema), SizeSchema), {\n  aGroup: AttributeSpec('float32', 1, 0),\n  aPosition: AttributeSpec('float32', 3, 0),\n  dPointSizeAttenuation: DefineSpec('boolean'),\n  dPointStyle: DefineSpec('string', Points.StyleTypeNames)\n});\nexport function PointsRenderable(ctx, id, values, state, materialId) {\n  var schema = __assign(__assign(__assign(__assign({}, GlobalUniformSchema), GlobalTextureSchema), InternalSchema), PointsSchema);\n\n  var internalValues = {\n    uObjectId: ValueCell.create(id)\n  };\n  var shaderCode = PointsShaderCode;\n  var renderItem = createGraphicsRenderItem(ctx, 'points', shaderCode, schema, __assign(__assign({}, values), internalValues), materialId);\n  return createRenderable(renderItem, values, state);\n}","map":{"version":3,"sources":["../../../src/mol-gl/renderable/points.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAsC,gBAAtC,QAA8D,eAA9D;AAEA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,mBAAT,EAA8B,UAA9B,EAA0C,aAA1C,EAAyD,UAAzD,EAA6E,cAA7E,EAA6F,UAA7F,EAAyH,mBAAzH,QAAoJ,UAApJ;AACA,SAAS,gBAAT,QAAiC,gBAAjC;AACA,SAAS,SAAT,QAA0B,gBAA1B;AACA,SAAS,MAAT,QAAuB,sCAAvB;AAEA,OAAO,IAAM,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAClB,UADkB,CAAA,EAElB,UAFkB,CAAA,EAER;AACb,EAAA,MAAM,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CADR;AAEb,EAAA,SAAS,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAFX;AAGb,EAAA,qBAAqB,EAAE,UAAU,CAAC,SAAD,CAHpB;AAIb,EAAA,WAAW,EAAE,UAAU,CAAC,QAAD,EAAW,MAAM,CAAC,cAAlB;AAJV,CAFQ,CAAlB;AAWP,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAA8C,EAA9C,EAA0D,MAA1D,EAAgF,KAAhF,EAAwG,UAAxG,EAA0H;AAC5H,MAAM,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,mBAAR,CAAA,EAAgC,mBAAhC,CAAA,EAAwD,cAAxD,CAAA,EAA2E,YAA3E,CAAZ;;AACA,MAAM,cAAc,GAAmB;AACnC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,EAAjB;AADwB,GAAvC;AAGA,MAAM,UAAU,GAAG,gBAAnB;AACA,MAAM,UAAU,GAAG,wBAAwB,CAAC,GAAD,EAAM,QAAN,EAAgB,UAAhB,EAA4B,MAA5B,EAAkC,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,MAAP,CAAA,EAAkB,cAAlB,CAAlC,EAAsE,UAAtE,CAA3C;AACA,SAAO,gBAAgB,CAAC,UAAD,EAAa,MAAb,EAAqB,KAArB,CAAvB;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createRenderable } from '../renderable';\r\nimport { createGraphicsRenderItem } from '../webgl/render-item';\r\nimport { GlobalUniformSchema, BaseSchema, AttributeSpec, DefineSpec, InternalSchema, SizeSchema, GlobalTextureSchema } from './schema';\r\nimport { PointsShaderCode } from '../shader-code';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { Points } from '../../mol-geo/geometry/points/points';\r\nexport var PointsSchema = __assign(__assign(__assign({}, BaseSchema), SizeSchema), { aGroup: AttributeSpec('float32', 1, 0), aPosition: AttributeSpec('float32', 3, 0), dPointSizeAttenuation: DefineSpec('boolean'), dPointStyle: DefineSpec('string', Points.StyleTypeNames) });\r\nexport function PointsRenderable(ctx, id, values, state, materialId) {\r\n    var schema = __assign(__assign(__assign(__assign({}, GlobalUniformSchema), GlobalTextureSchema), InternalSchema), PointsSchema);\r\n    var internalValues = {\r\n        uObjectId: ValueCell.create(id),\r\n    };\r\n    var shaderCode = PointsShaderCode;\r\n    var renderItem = createGraphicsRenderItem(ctx, 'points', shaderCode, schema, __assign(__assign({}, values), internalValues), materialId);\r\n    return createRenderable(renderItem, values, state);\r\n}\r\n//# sourceMappingURL=points.js.map"]},"metadata":{},"sourceType":"module"}