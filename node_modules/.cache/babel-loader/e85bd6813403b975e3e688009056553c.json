{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { FormatPropertyProvider } from '../../../mol-model-formats/structure/common/property';\nexport { ModelCrossLinkRestraint };\nvar ModelCrossLinkRestraint;\n\n(function (ModelCrossLinkRestraint) {\n  ModelCrossLinkRestraint.Descriptor = {\n    name: 'ihm_cross_link_restraint' // TODO cifExport\n\n  };\n  ModelCrossLinkRestraint.Provider = FormatPropertyProvider.create(ModelCrossLinkRestraint.Descriptor);\n\n  function fromTable(table, model) {\n    var p1 = {\n      entity_id: table.entity_id_1,\n      asym_id: table.asym_id_1,\n      seq_id: table.seq_id_1,\n      atom_id: table.atom_id_1\n    };\n    var p2 = {\n      entity_id: table.entity_id_2,\n      asym_id: table.asym_id_2,\n      seq_id: table.seq_id_2,\n      atom_id: table.atom_id_2\n    };\n\n    function _add(map, element, row) {\n      var indices = map.get(element);\n      if (indices) indices.push(row);else map.set(element, [row]);\n    }\n\n    function add(row, ps) {\n      var entityId = ps.entity_id.value(row);\n      var asymId = ps.asym_id.value(row);\n      var seqId = ps.seq_id.value(row);\n\n      if (table.model_granularity.value(row) === 'by-atom') {\n        var atomicElement = model.atomicHierarchy.index.findAtom({\n          auth_seq_id: seqId,\n          label_asym_id: asymId,\n          label_atom_id: ps.atom_id.value(row),\n          label_entity_id: entityId\n        });\n        if (atomicElement >= 0) _add(atomicElementMap, atomicElement, row);\n      } else if (model.coarseHierarchy.isDefined) {\n        var sphereElement = model.coarseHierarchy.spheres.findSequenceKey(entityId, asymId, seqId);\n\n        if (sphereElement >= 0) {\n          _add(sphereElementMap, sphereElement, row);\n        } else {\n          var gaussianElement = model.coarseHierarchy.gaussians.findSequenceKey(entityId, asymId, seqId);\n          if (gaussianElement >= 0) _add(gaussianElementMap, gaussianElement, row);\n        }\n      }\n    }\n\n    function getMapByKind(kind) {\n      switch (kind) {\n        case 0\n        /* Atomic */\n        :\n          return atomicElementMap;\n\n        case 1\n        /* Spheres */\n        :\n          return sphereElementMap;\n\n        case 2\n        /* Gaussians */\n        :\n          return gaussianElementMap;\n      }\n    }\n    /** map from atomic element to cross link indices */\n\n\n    var atomicElementMap = new Map();\n    /** map from sphere element to cross link indices */\n\n    var sphereElementMap = new Map();\n    /** map from gaussian element to cross link indices */\n\n    var gaussianElementMap = new Map();\n    var emptyIndexArray = [];\n\n    for (var i = 0; i < table._rowCount; ++i) {\n      add(i, p1);\n      add(i, p2);\n    }\n\n    return {\n      getIndicesByElement: function (element, kind) {\n        var map = getMapByKind(kind);\n        var idx = map.get(element);\n        return idx !== undefined ? idx : emptyIndexArray;\n      },\n      data: table\n    };\n  }\n\n  ModelCrossLinkRestraint.fromTable = fromTable;\n})(ModelCrossLinkRestraint || (ModelCrossLinkRestraint = {}));","map":{"version":3,"sources":["../../../../src/mol-model-props/integrative/cross-link-restraint/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { FormatPropertyProvider } from '../../../mol-model-formats/structure/common/property';\r\nexport { ModelCrossLinkRestraint };\r\nvar ModelCrossLinkRestraint;\r\n(function (ModelCrossLinkRestraint) {\r\n    ModelCrossLinkRestraint.Descriptor = {\r\n        name: 'ihm_cross_link_restraint',\r\n        // TODO cifExport\r\n    };\r\n    ModelCrossLinkRestraint.Provider = FormatPropertyProvider.create(ModelCrossLinkRestraint.Descriptor);\r\n    function fromTable(table, model) {\r\n        var p1 = {\r\n            entity_id: table.entity_id_1,\r\n            asym_id: table.asym_id_1,\r\n            seq_id: table.seq_id_1,\r\n            atom_id: table.atom_id_1,\r\n        };\r\n        var p2 = {\r\n            entity_id: table.entity_id_2,\r\n            asym_id: table.asym_id_2,\r\n            seq_id: table.seq_id_2,\r\n            atom_id: table.atom_id_2,\r\n        };\r\n        function _add(map, element, row) {\r\n            var indices = map.get(element);\r\n            if (indices)\r\n                indices.push(row);\r\n            else\r\n                map.set(element, [row]);\r\n        }\r\n        function add(row, ps) {\r\n            var entityId = ps.entity_id.value(row);\r\n            var asymId = ps.asym_id.value(row);\r\n            var seqId = ps.seq_id.value(row);\r\n            if (table.model_granularity.value(row) === 'by-atom') {\r\n                var atomicElement = model.atomicHierarchy.index.findAtom({\r\n                    auth_seq_id: seqId,\r\n                    label_asym_id: asymId,\r\n                    label_atom_id: ps.atom_id.value(row),\r\n                    label_entity_id: entityId,\r\n                });\r\n                if (atomicElement >= 0)\r\n                    _add(atomicElementMap, atomicElement, row);\r\n            }\r\n            else if (model.coarseHierarchy.isDefined) {\r\n                var sphereElement = model.coarseHierarchy.spheres.findSequenceKey(entityId, asymId, seqId);\r\n                if (sphereElement >= 0) {\r\n                    _add(sphereElementMap, sphereElement, row);\r\n                }\r\n                else {\r\n                    var gaussianElement = model.coarseHierarchy.gaussians.findSequenceKey(entityId, asymId, seqId);\r\n                    if (gaussianElement >= 0)\r\n                        _add(gaussianElementMap, gaussianElement, row);\r\n                }\r\n            }\r\n        }\r\n        function getMapByKind(kind) {\r\n            switch (kind) {\r\n                case 0 /* Atomic */: return atomicElementMap;\r\n                case 1 /* Spheres */: return sphereElementMap;\r\n                case 2 /* Gaussians */: return gaussianElementMap;\r\n            }\r\n        }\r\n        /** map from atomic element to cross link indices */\r\n        var atomicElementMap = new Map();\r\n        /** map from sphere element to cross link indices */\r\n        var sphereElementMap = new Map();\r\n        /** map from gaussian element to cross link indices */\r\n        var gaussianElementMap = new Map();\r\n        var emptyIndexArray = [];\r\n        for (var i = 0; i < table._rowCount; ++i) {\r\n            add(i, p1);\r\n            add(i, p2);\r\n        }\r\n        return {\r\n            getIndicesByElement: function (element, kind) {\r\n                var map = getMapByKind(kind);\r\n                var idx = map.get(element);\r\n                return idx !== undefined ? idx : emptyIndexArray;\r\n            },\r\n            data: table\r\n        };\r\n    }\r\n    ModelCrossLinkRestraint.fromTable = fromTable;\r\n})(ModelCrossLinkRestraint || (ModelCrossLinkRestraint = {}));\r\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"module"}