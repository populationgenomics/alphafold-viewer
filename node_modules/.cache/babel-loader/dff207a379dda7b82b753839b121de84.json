{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { SecondaryStructureType } from '../../../mol-model/structure/model/types';\nimport { AtomicHierarchy } from '../../../mol-model/structure/model/properties/atomic';\nimport { SecondaryStructure } from '../../../mol-model/structure/model/properties/seconday-structure';\nimport { FormatPropertyProvider } from '../common/property';\nexport { ModelSecondaryStructure };\nvar ModelSecondaryStructure;\n\n(function (ModelSecondaryStructure) {\n  ModelSecondaryStructure.Descriptor = {\n    name: 'model_secondary_structure'\n  };\n  ModelSecondaryStructure.Provider = FormatPropertyProvider.create(ModelSecondaryStructure.Descriptor);\n\n  function fromStruct(conf, sheetRange, hierarchy) {\n    var map = new Map();\n    var elements = [{\n      kind: 'none'\n    }];\n    var coordinates = getCoordinateType(conf, sheetRange);\n    addHelices(conf, coordinates, map, elements); // must add Helices 1st because of 'key' value assignment.\n\n    addSheets(sheetRange, coordinates, map, conf._rowCount, elements);\n    var n = hierarchy.residues._rowCount;\n\n    var getIndex = function (rI) {\n      return rI;\n    };\n\n    var secStruct = {\n      type: new Int32Array(n),\n      key: new Int32Array(n),\n      elements: elements\n    };\n    if (map.size > 0) assignSecondaryStructureRanges(hierarchy, coordinates, map, secStruct);\n    return SecondaryStructure(secStruct.type, secStruct.key, secStruct.elements, getIndex);\n  }\n\n  ModelSecondaryStructure.fromStruct = fromStruct;\n})(ModelSecondaryStructure || (ModelSecondaryStructure = {}));\n\nfunction getCoordinateType(conf, sheetRange) {\n  if (conf._rowCount > 0) {\n    if (conf.beg_label_seq_id.valueKind(0) !== 0\n    /* Present */\n    || conf.end_label_seq_id.valueKind(0) !== 0\n    /* Present */\n    ) return 'auth';\n  } else if (sheetRange) {\n    if (sheetRange.beg_label_seq_id.valueKind(0) !== 0\n    /* Present */\n    || sheetRange.end_label_seq_id.valueKind(0) !== 0\n    /* Present */\n    ) return 'auth';\n  }\n\n  return 'label';\n}\n\nfunction addHelices(cat, coordinates, map, elements) {\n  if (!cat._rowCount) return;\n  var beg_label_asym_id = cat.beg_label_asym_id,\n      beg_label_seq_id = cat.beg_label_seq_id,\n      beg_auth_seq_id = cat.beg_auth_seq_id,\n      pdbx_beg_PDB_ins_code = cat.pdbx_beg_PDB_ins_code;\n  var end_label_seq_id = cat.end_label_seq_id,\n      end_auth_seq_id = cat.end_auth_seq_id,\n      pdbx_end_PDB_ins_code = cat.pdbx_end_PDB_ins_code;\n  var pdbx_PDB_helix_class = cat.pdbx_PDB_helix_class,\n      conf_type_id = cat.conf_type_id,\n      details = cat.details;\n  var beg_seq_id = coordinates === 'label' ? beg_label_seq_id : beg_auth_seq_id;\n  var end_seq_id = coordinates === 'label' ? end_label_seq_id : end_auth_seq_id;\n\n  for (var i = 0, _i = cat._rowCount; i < _i; i++) {\n    var type = SecondaryStructureType.create(pdbx_PDB_helix_class.valueKind(i) === 0\n    /* Present */\n    ? SecondaryStructureType.SecondaryStructurePdb[pdbx_PDB_helix_class.value(i)] : conf_type_id.valueKind(i) === 0\n    /* Present */\n    ? SecondaryStructureType.SecondaryStructureMmcif[conf_type_id.value(i)] : 536870912\n    /* NA */\n    );\n    var element = {\n      kind: 'helix',\n      flags: type,\n      type_id: conf_type_id.valueKind(i) === 0\n      /* Present */\n      ? conf_type_id.value(i) : 'HELIX_P',\n      helix_class: pdbx_PDB_helix_class.value(i),\n      details: details.valueKind(i) === 0\n      /* Present */\n      ? details.value(i) : void 0\n    };\n    var entry = {\n      startSeqId: beg_seq_id.value(i),\n      startInsCode: pdbx_beg_PDB_ins_code.value(i),\n      endSeqId: end_seq_id.value(i),\n      endInsCode: pdbx_end_PDB_ins_code.value(i),\n      type: type,\n      key: elements.length\n    };\n    elements[elements.length] = element;\n    var asymId = beg_label_asym_id.value(i);\n\n    if (map.has(asymId)) {\n      var entries = map.get(asymId);\n\n      if (entries.has(entry.startSeqId)) {\n        entries.get(entry.startSeqId).push(entry);\n      } else {\n        entries.set(entry.startSeqId, [entry]);\n      }\n    } else {\n      map.set(asymId, new Map([[entry.startSeqId, [entry]]]));\n    }\n  }\n}\n\nfunction addSheets(cat, coordinates, map, sheetCount, elements) {\n  if (!cat._rowCount) return;\n  var beg_label_asym_id = cat.beg_label_asym_id,\n      beg_label_seq_id = cat.beg_label_seq_id,\n      beg_auth_seq_id = cat.beg_auth_seq_id,\n      pdbx_beg_PDB_ins_code = cat.pdbx_beg_PDB_ins_code;\n  var end_label_seq_id = cat.end_label_seq_id,\n      end_auth_seq_id = cat.end_auth_seq_id,\n      pdbx_end_PDB_ins_code = cat.pdbx_end_PDB_ins_code;\n  var sheet_id = cat.sheet_id;\n  var beg_seq_id = coordinates === 'label' ? beg_label_seq_id : beg_auth_seq_id;\n  var end_seq_id = coordinates === 'label' ? end_label_seq_id : end_auth_seq_id;\n  var sheet_id_key = new Map();\n  var currentKey = sheetCount + 1;\n\n  for (var i = 0, _i = cat._rowCount; i < _i; i++) {\n    var id = sheet_id.value(i);\n    var key = void 0;\n    if (sheet_id_key.has(id)) key = sheet_id_key.get(id);else {\n      key = currentKey++;\n      sheet_id_key.set(id, key);\n    }\n    var type = SecondaryStructureType.create(4\n    /* Beta */\n    | 8388608\n    /* BetaSheet */\n    );\n    var element = {\n      kind: 'sheet',\n      flags: type,\n      sheet_id: id,\n      symmetry: void 0\n    };\n    var entry = {\n      startSeqId: beg_seq_id.value(i),\n      startInsCode: pdbx_beg_PDB_ins_code.value(i),\n      endSeqId: end_seq_id.value(i),\n      endInsCode: pdbx_end_PDB_ins_code.value(i),\n      type: type,\n      key: elements.length\n    };\n    elements[elements.length] = element;\n    var asymId = beg_label_asym_id.value(i);\n\n    if (map.has(asymId)) {\n      var entries = map.get(asymId);\n\n      if (entries.has(entry.startSeqId)) {\n        entries.get(entry.startSeqId).push(entry);\n      } else {\n        entries.set(entry.startSeqId, [entry]);\n      }\n    } else {\n      map.set(asymId, new Map([[entry.startSeqId, [entry]]]));\n    }\n  }\n\n  return;\n}\n\nfunction assignSecondaryStructureEntry(hierarchy, coordinates, entry, resStart, resEnd, data) {\n  var _a = hierarchy.residues,\n      auth_seq_id = _a.auth_seq_id,\n      label_seq_id = _a.label_seq_id,\n      pdbx_PDB_ins_code = _a.pdbx_PDB_ins_code;\n  var endSeqId = entry.endSeqId,\n      endInsCode = entry.endInsCode,\n      key = entry.key,\n      type = entry.type;\n  var seq_id = coordinates === 'label' ? label_seq_id : auth_seq_id;\n  var rI = resStart;\n\n  while (rI < resEnd) {\n    var seqNumber = seq_id.value(rI);\n    data.type[rI] = type;\n    data.key[rI] = key;\n\n    if (seqNumber > endSeqId || seqNumber === endSeqId && pdbx_PDB_ins_code.value(rI) === endInsCode) {\n      break;\n    }\n\n    rI++;\n  }\n}\n\nfunction assignSecondaryStructureRanges(hierarchy, coordinates, map, data) {\n  var chainCount = hierarchy.chainAtomSegments.count;\n  var label_asym_id = hierarchy.chains.label_asym_id;\n  var _a = hierarchy.residues,\n      auth_seq_id = _a.auth_seq_id,\n      label_seq_id = _a.label_seq_id,\n      pdbx_PDB_ins_code = _a.pdbx_PDB_ins_code;\n  var seq_id = coordinates === 'label' ? label_seq_id : auth_seq_id;\n\n  for (var cI = 0; cI < chainCount; cI++) {\n    var resStart = AtomicHierarchy.chainStartResidueIndex(hierarchy, cI),\n        resEnd = AtomicHierarchy.chainEndResidueIndexExcl(hierarchy, cI);\n    var asymId = label_asym_id.value(cI);\n\n    if (map.has(asymId)) {\n      var entries = map.get(asymId);\n\n      for (var rI = resStart; rI < resEnd; rI++) {\n        var seqId = seq_id.value(rI);\n\n        if (entries.has(seqId)) {\n          var entryList = entries.get(seqId);\n\n          for (var _b = 0, entryList_1 = entryList; _b < entryList_1.length; _b++) {\n            var entry = entryList_1[_b];\n            var insCode = pdbx_PDB_ins_code.value(rI);\n            if (entry.startInsCode !== insCode) continue;\n            assignSecondaryStructureEntry(hierarchy, coordinates, entry, rI, resEnd, data);\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/property/secondary-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { SecondaryStructureType } from '../../../mol-model/structure/model/types';\r\nimport { AtomicHierarchy } from '../../../mol-model/structure/model/properties/atomic';\r\nimport { SecondaryStructure } from '../../../mol-model/structure/model/properties/seconday-structure';\r\nimport { FormatPropertyProvider } from '../common/property';\r\nexport { ModelSecondaryStructure };\r\nvar ModelSecondaryStructure;\r\n(function (ModelSecondaryStructure) {\r\n    ModelSecondaryStructure.Descriptor = {\r\n        name: 'model_secondary_structure',\r\n    };\r\n    ModelSecondaryStructure.Provider = FormatPropertyProvider.create(ModelSecondaryStructure.Descriptor);\r\n    function fromStruct(conf, sheetRange, hierarchy) {\r\n        var map = new Map();\r\n        var elements = [{ kind: 'none' }];\r\n        var coordinates = getCoordinateType(conf, sheetRange);\r\n        addHelices(conf, coordinates, map, elements);\r\n        // must add Helices 1st because of 'key' value assignment.\r\n        addSheets(sheetRange, coordinates, map, conf._rowCount, elements);\r\n        var n = hierarchy.residues._rowCount;\r\n        var getIndex = function (rI) { return rI; };\r\n        var secStruct = {\r\n            type: new Int32Array(n),\r\n            key: new Int32Array(n),\r\n            elements: elements\r\n        };\r\n        if (map.size > 0)\r\n            assignSecondaryStructureRanges(hierarchy, coordinates, map, secStruct);\r\n        return SecondaryStructure(secStruct.type, secStruct.key, secStruct.elements, getIndex);\r\n    }\r\n    ModelSecondaryStructure.fromStruct = fromStruct;\r\n})(ModelSecondaryStructure || (ModelSecondaryStructure = {}));\r\nfunction getCoordinateType(conf, sheetRange) {\r\n    if (conf._rowCount > 0) {\r\n        if (conf.beg_label_seq_id.valueKind(0) !== 0 /* Present */ || conf.end_label_seq_id.valueKind(0) !== 0 /* Present */)\r\n            return 'auth';\r\n    }\r\n    else if (sheetRange) {\r\n        if (sheetRange.beg_label_seq_id.valueKind(0) !== 0 /* Present */ || sheetRange.end_label_seq_id.valueKind(0) !== 0 /* Present */)\r\n            return 'auth';\r\n    }\r\n    return 'label';\r\n}\r\nfunction addHelices(cat, coordinates, map, elements) {\r\n    if (!cat._rowCount)\r\n        return;\r\n    var beg_label_asym_id = cat.beg_label_asym_id, beg_label_seq_id = cat.beg_label_seq_id, beg_auth_seq_id = cat.beg_auth_seq_id, pdbx_beg_PDB_ins_code = cat.pdbx_beg_PDB_ins_code;\r\n    var end_label_seq_id = cat.end_label_seq_id, end_auth_seq_id = cat.end_auth_seq_id, pdbx_end_PDB_ins_code = cat.pdbx_end_PDB_ins_code;\r\n    var pdbx_PDB_helix_class = cat.pdbx_PDB_helix_class, conf_type_id = cat.conf_type_id, details = cat.details;\r\n    var beg_seq_id = coordinates === 'label' ? beg_label_seq_id : beg_auth_seq_id;\r\n    var end_seq_id = coordinates === 'label' ? end_label_seq_id : end_auth_seq_id;\r\n    for (var i = 0, _i = cat._rowCount; i < _i; i++) {\r\n        var type = SecondaryStructureType.create(pdbx_PDB_helix_class.valueKind(i) === 0 /* Present */\r\n            ? SecondaryStructureType.SecondaryStructurePdb[pdbx_PDB_helix_class.value(i)]\r\n            : conf_type_id.valueKind(i) === 0 /* Present */\r\n                ? SecondaryStructureType.SecondaryStructureMmcif[conf_type_id.value(i)]\r\n                : 536870912 /* NA */);\r\n        var element = {\r\n            kind: 'helix',\r\n            flags: type,\r\n            type_id: conf_type_id.valueKind(i) === 0 /* Present */ ? conf_type_id.value(i) : 'HELIX_P',\r\n            helix_class: pdbx_PDB_helix_class.value(i),\r\n            details: details.valueKind(i) === 0 /* Present */ ? details.value(i) : void 0\r\n        };\r\n        var entry = {\r\n            startSeqId: beg_seq_id.value(i),\r\n            startInsCode: pdbx_beg_PDB_ins_code.value(i),\r\n            endSeqId: end_seq_id.value(i),\r\n            endInsCode: pdbx_end_PDB_ins_code.value(i),\r\n            type: type,\r\n            key: elements.length\r\n        };\r\n        elements[elements.length] = element;\r\n        var asymId = beg_label_asym_id.value(i);\r\n        if (map.has(asymId)) {\r\n            var entries = map.get(asymId);\r\n            if (entries.has(entry.startSeqId)) {\r\n                entries.get(entry.startSeqId).push(entry);\r\n            }\r\n            else {\r\n                entries.set(entry.startSeqId, [entry]);\r\n            }\r\n        }\r\n        else {\r\n            map.set(asymId, new Map([[entry.startSeqId, [entry]]]));\r\n        }\r\n    }\r\n}\r\nfunction addSheets(cat, coordinates, map, sheetCount, elements) {\r\n    if (!cat._rowCount)\r\n        return;\r\n    var beg_label_asym_id = cat.beg_label_asym_id, beg_label_seq_id = cat.beg_label_seq_id, beg_auth_seq_id = cat.beg_auth_seq_id, pdbx_beg_PDB_ins_code = cat.pdbx_beg_PDB_ins_code;\r\n    var end_label_seq_id = cat.end_label_seq_id, end_auth_seq_id = cat.end_auth_seq_id, pdbx_end_PDB_ins_code = cat.pdbx_end_PDB_ins_code;\r\n    var sheet_id = cat.sheet_id;\r\n    var beg_seq_id = coordinates === 'label' ? beg_label_seq_id : beg_auth_seq_id;\r\n    var end_seq_id = coordinates === 'label' ? end_label_seq_id : end_auth_seq_id;\r\n    var sheet_id_key = new Map();\r\n    var currentKey = sheetCount + 1;\r\n    for (var i = 0, _i = cat._rowCount; i < _i; i++) {\r\n        var id = sheet_id.value(i);\r\n        var key = void 0;\r\n        if (sheet_id_key.has(id))\r\n            key = sheet_id_key.get(id);\r\n        else {\r\n            key = currentKey++;\r\n            sheet_id_key.set(id, key);\r\n        }\r\n        var type = SecondaryStructureType.create(4 /* Beta */ | 8388608 /* BetaSheet */);\r\n        var element = {\r\n            kind: 'sheet',\r\n            flags: type,\r\n            sheet_id: id,\r\n            symmetry: void 0\r\n        };\r\n        var entry = {\r\n            startSeqId: beg_seq_id.value(i),\r\n            startInsCode: pdbx_beg_PDB_ins_code.value(i),\r\n            endSeqId: end_seq_id.value(i),\r\n            endInsCode: pdbx_end_PDB_ins_code.value(i),\r\n            type: type,\r\n            key: elements.length\r\n        };\r\n        elements[elements.length] = element;\r\n        var asymId = beg_label_asym_id.value(i);\r\n        if (map.has(asymId)) {\r\n            var entries = map.get(asymId);\r\n            if (entries.has(entry.startSeqId)) {\r\n                entries.get(entry.startSeqId).push(entry);\r\n            }\r\n            else {\r\n                entries.set(entry.startSeqId, [entry]);\r\n            }\r\n        }\r\n        else {\r\n            map.set(asymId, new Map([[entry.startSeqId, [entry]]]));\r\n        }\r\n    }\r\n    return;\r\n}\r\nfunction assignSecondaryStructureEntry(hierarchy, coordinates, entry, resStart, resEnd, data) {\r\n    var _a = hierarchy.residues, auth_seq_id = _a.auth_seq_id, label_seq_id = _a.label_seq_id, pdbx_PDB_ins_code = _a.pdbx_PDB_ins_code;\r\n    var endSeqId = entry.endSeqId, endInsCode = entry.endInsCode, key = entry.key, type = entry.type;\r\n    var seq_id = coordinates === 'label' ? label_seq_id : auth_seq_id;\r\n    var rI = resStart;\r\n    while (rI < resEnd) {\r\n        var seqNumber = seq_id.value(rI);\r\n        data.type[rI] = type;\r\n        data.key[rI] = key;\r\n        if ((seqNumber > endSeqId) ||\r\n            (seqNumber === endSeqId && pdbx_PDB_ins_code.value(rI) === endInsCode)) {\r\n            break;\r\n        }\r\n        rI++;\r\n    }\r\n}\r\nfunction assignSecondaryStructureRanges(hierarchy, coordinates, map, data) {\r\n    var chainCount = hierarchy.chainAtomSegments.count;\r\n    var label_asym_id = hierarchy.chains.label_asym_id;\r\n    var _a = hierarchy.residues, auth_seq_id = _a.auth_seq_id, label_seq_id = _a.label_seq_id, pdbx_PDB_ins_code = _a.pdbx_PDB_ins_code;\r\n    var seq_id = coordinates === 'label' ? label_seq_id : auth_seq_id;\r\n    for (var cI = 0; cI < chainCount; cI++) {\r\n        var resStart = AtomicHierarchy.chainStartResidueIndex(hierarchy, cI), resEnd = AtomicHierarchy.chainEndResidueIndexExcl(hierarchy, cI);\r\n        var asymId = label_asym_id.value(cI);\r\n        if (map.has(asymId)) {\r\n            var entries = map.get(asymId);\r\n            for (var rI = resStart; rI < resEnd; rI++) {\r\n                var seqId = seq_id.value(rI);\r\n                if (entries.has(seqId)) {\r\n                    var entryList = entries.get(seqId);\r\n                    for (var _b = 0, entryList_1 = entryList; _b < entryList_1.length; _b++) {\r\n                        var entry = entryList_1[_b];\r\n                        var insCode = pdbx_PDB_ins_code.value(rI);\r\n                        if (entry.startInsCode !== insCode)\r\n                            continue;\r\n                        assignSecondaryStructureEntry(hierarchy, coordinates, entry, rI, resEnd, data);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=secondary-structure.js.map"]},"metadata":{},"sourceType":"module"}