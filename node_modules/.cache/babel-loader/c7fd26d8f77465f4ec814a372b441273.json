{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ValueCell } from '../../../mol-util';\nimport { createComputeRenderable } from '../../../mol-gl/renderable';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { createComputeRenderItem } from '../../../mol-gl/webgl/render-item';\nimport { ValueSpec, AttributeSpec, UniformSpec, TextureSpec, DefineSpec } from '../../../mol-gl/renderable/schema';\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\nimport { normalize_frag } from '../../../mol-gl/shader/compute/color-smoothing/normalize.frag';\nimport { QuadSchema, QuadValues } from '../../../mol-gl/compute/util';\nimport { Vec2, Vec3, Vec4 } from '../../../mol-math/linear-algebra';\nimport { Box3D } from '../../../mol-math/geometry';\nimport { accumulate_frag } from '../../../mol-gl/shader/compute/color-smoothing/accumulate.frag';\nimport { accumulate_vert } from '../../../mol-gl/shader/compute/color-smoothing/accumulate.vert';\nexport var ColorAccumulateSchema = {\n  drawCount: ValueSpec('number'),\n  instanceCount: ValueSpec('number'),\n  stride: ValueSpec('number'),\n  uTotalCount: UniformSpec('i'),\n  uInstanceCount: UniformSpec('i'),\n  uGroupCount: UniformSpec('i'),\n  aTransform: AttributeSpec('float32', 16, 1),\n  aInstance: AttributeSpec('float32', 1, 1),\n  aSample: AttributeSpec('float32', 1, 0),\n  uGeoTexDim: UniformSpec('v2', 'buffered'),\n  tPosition: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  tGroup: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  uColorTexDim: UniformSpec('v2'),\n  tColor: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\n  dColorType: DefineSpec('string', ['group', 'groupInstance', 'vertex', 'vertexInstance']),\n  uCurrentSlice: UniformSpec('f'),\n  uCurrentX: UniformSpec('f'),\n  uCurrentY: UniformSpec('f'),\n  uBboxMin: UniformSpec('v3', 'material'),\n  uBboxSize: UniformSpec('v3', 'material'),\n  uResolution: UniformSpec('f', 'material')\n};\nvar ColorAccumulateName = 'color-accumulate';\n\nfunction getSampleBuffer(sampleCount, stride) {\n  var sampleBuffer = new Float32Array(sampleCount);\n\n  for (var i = 0; i < sampleCount; ++i) {\n    sampleBuffer[i] = i * stride;\n  }\n\n  return sampleBuffer;\n}\n\nfunction getAccumulateRenderable(ctx, input, box, resolution, stride) {\n  if (ctx.namedComputeRenderables[ColorAccumulateName]) {\n    var extent = Vec3.sub(Vec3(), box.max, box.min);\n    var v = ctx.namedComputeRenderables[ColorAccumulateName].values;\n    var sampleCount = Math.round(input.vertexCount / stride);\n\n    if (sampleCount > v.drawCount.ref.value || stride !== v.stride.ref.value) {\n      ValueCell.update(v.aSample, getSampleBuffer(sampleCount, stride));\n    }\n\n    ValueCell.updateIfChanged(v.drawCount, sampleCount);\n    ValueCell.updateIfChanged(v.instanceCount, input.instanceCount);\n    ValueCell.updateIfChanged(v.stride, stride);\n    ValueCell.updateIfChanged(v.uTotalCount, input.vertexCount);\n    ValueCell.updateIfChanged(v.uInstanceCount, input.instanceCount);\n    ValueCell.updateIfChanged(v.uGroupCount, input.groupCount);\n    ValueCell.update(v.aTransform, input.transformBuffer);\n    ValueCell.update(v.aInstance, input.instanceBuffer);\n    ValueCell.update(v.uGeoTexDim, Vec2.set(v.uGeoTexDim.ref.value, input.positionTexture.getWidth(), input.positionTexture.getHeight()));\n    ValueCell.update(v.tPosition, input.positionTexture);\n    ValueCell.update(v.tGroup, input.groupTexture);\n    ValueCell.update(v.uColorTexDim, Vec2.set(v.uColorTexDim.ref.value, input.colorData.width, input.colorData.height));\n    ValueCell.update(v.tColor, input.colorData);\n    ValueCell.updateIfChanged(v.dColorType, input.colorType);\n    ValueCell.updateIfChanged(v.uCurrentSlice, 0);\n    ValueCell.updateIfChanged(v.uCurrentX, 0);\n    ValueCell.updateIfChanged(v.uCurrentY, 0);\n    ValueCell.update(v.uBboxMin, box.min);\n    ValueCell.update(v.uBboxSize, extent);\n    ValueCell.updateIfChanged(v.uResolution, resolution);\n    ctx.namedComputeRenderables[ColorAccumulateName].update();\n  } else {\n    ctx.namedComputeRenderables[ColorAccumulateName] = createAccumulateRenderable(ctx, input, box, resolution, stride);\n  }\n\n  return ctx.namedComputeRenderables[ColorAccumulateName];\n}\n\nfunction createAccumulateRenderable(ctx, input, box, resolution, stride) {\n  var extent = Vec3.sub(Vec3(), box.max, box.min);\n  var sampleCount = Math.round(input.vertexCount / stride);\n  var values = {\n    drawCount: ValueCell.create(sampleCount),\n    instanceCount: ValueCell.create(input.instanceCount),\n    stride: ValueCell.create(stride),\n    uTotalCount: ValueCell.create(input.vertexCount),\n    uInstanceCount: ValueCell.create(input.instanceCount),\n    uGroupCount: ValueCell.create(input.groupCount),\n    aTransform: ValueCell.create(input.transformBuffer),\n    aInstance: ValueCell.create(input.instanceBuffer),\n    aSample: ValueCell.create(getSampleBuffer(sampleCount, stride)),\n    uGeoTexDim: ValueCell.create(Vec2.create(input.positionTexture.getWidth(), input.positionTexture.getHeight())),\n    tPosition: ValueCell.create(input.positionTexture),\n    tGroup: ValueCell.create(input.groupTexture),\n    uColorTexDim: ValueCell.create(Vec2.create(input.colorData.width, input.colorData.height)),\n    tColor: ValueCell.create(input.colorData),\n    dColorType: ValueCell.create(input.colorType),\n    uCurrentSlice: ValueCell.create(0),\n    uCurrentX: ValueCell.create(0),\n    uCurrentY: ValueCell.create(0),\n    uBboxMin: ValueCell.create(box.min),\n    uBboxSize: ValueCell.create(extent),\n    uResolution: ValueCell.create(resolution)\n  };\n\n  var schema = __assign({}, ColorAccumulateSchema);\n\n  var shaderCode = ShaderCode('accumulate', accumulate_vert, accumulate_frag);\n  var renderItem = createComputeRenderItem(ctx, 'points', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setAccumulateDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.enable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.enable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.clearColor(0, 0, 0, 0);\n  state.blendFunc(gl.ONE, gl.ONE);\n  state.blendEquation(gl.FUNC_ADD);\n} //\n\n\nexport var ColorNormalizeSchema = __assign(__assign({}, QuadSchema), {\n  tColor: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  uTexSize: UniformSpec('v2')\n});\nvar ColorNormalizeName = 'color-normalize';\n\nfunction getNormalizeRenderable(ctx, color) {\n  if (ctx.namedComputeRenderables[ColorNormalizeName]) {\n    var v = ctx.namedComputeRenderables[ColorNormalizeName].values;\n    ValueCell.update(v.tColor, color);\n    ValueCell.update(v.uTexSize, Vec2.set(v.uTexSize.ref.value, color.getWidth(), color.getHeight()));\n    ctx.namedComputeRenderables[ColorNormalizeName].update();\n  } else {\n    ctx.namedComputeRenderables[ColorNormalizeName] = createColorNormalizeRenderable(ctx, color);\n  }\n\n  return ctx.namedComputeRenderables[ColorNormalizeName];\n}\n\nfunction createColorNormalizeRenderable(ctx, color) {\n  var values = __assign(__assign({}, QuadValues), {\n    tColor: ValueCell.create(color),\n    uTexSize: ValueCell.create(Vec2.create(color.getWidth(), color.getHeight()))\n  });\n\n  var schema = __assign({}, ColorNormalizeSchema);\n\n  var shaderCode = ShaderCode('normalize', quad_vert, normalize_frag);\n  var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setNormalizeDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.enable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.enable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.clearColor(0, 0, 0, 0);\n  state.blendFunc(gl.ONE, gl.ONE);\n  state.blendEquation(gl.FUNC_ADD);\n} //\n\n\nfunction getTexture2dSize(gridDim) {\n  var area = gridDim[0] * gridDim[1] * gridDim[2];\n  var squareDim = Math.sqrt(area);\n  var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\n  var texDimX = 0;\n  var texDimY = gridDim[1];\n  var texRows = 1;\n  var texCols = gridDim[2];\n\n  if (powerOfTwoSize < gridDim[0] * gridDim[2]) {\n    texCols = Math.floor(powerOfTwoSize / gridDim[0]);\n    texRows = Math.ceil(gridDim[2] / texCols);\n    texDimX = texCols * gridDim[0];\n    texDimY *= texRows;\n  } else {\n    texDimX = gridDim[0] * gridDim[2];\n  } // console.log(texDimX, texDimY, texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2);\n\n\n  return {\n    texDimX: texDimX,\n    texDimY: texDimY,\n    texRows: texRows,\n    texCols: texCols,\n    powerOfTwoSize: texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2\n  };\n}\n\nexport function calcTextureMeshColorSmoothing(input, resolution, stride, webgl, texture) {\n  var gl = webgl.gl,\n      resources = webgl.resources,\n      state = webgl.state,\n      _a = webgl.extensions,\n      colorBufferHalfFloat = _a.colorBufferHalfFloat,\n      textureHalfFloat = _a.textureHalfFloat;\n  var isInstanceType = input.colorType.endsWith('Instance');\n  var box = Box3D.fromSphere3D(Box3D(), isInstanceType ? input.boundingSphere : input.invariantBoundingSphere);\n  var scaleFactor = 1 / resolution;\n  var scaledBox = Box3D.scale(Box3D(), box, scaleFactor);\n  var gridDim = Box3D.size(Vec3(), scaledBox);\n  Vec3.ceil(gridDim, gridDim);\n  Vec3.add(gridDim, gridDim, Vec3.create(2, 2, 2));\n  var min = box.min;\n  var dx = gridDim[0],\n      dy = gridDim[1],\n      dz = gridDim[2];\n\n  var _b = getTexture2dSize(gridDim),\n      width = _b.texDimX,\n      height = _b.texDimY,\n      texCols = _b.texCols; // console.log({ width, height, texCols, dim, resolution });\n\n\n  if (!webgl.namedTextures[ColorAccumulateName]) {\n    webgl.namedTextures[ColorAccumulateName] = colorBufferHalfFloat && textureHalfFloat ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest') : resources.texture('image-float32', 'rgba', 'float', 'nearest');\n  }\n\n  var accumulateTexture = webgl.namedTextures[ColorAccumulateName];\n  accumulateTexture.define(width, height);\n  var accumulateRenderable = getAccumulateRenderable(webgl, input, box, resolution, stride); //\n\n  var _c = accumulateRenderable.values,\n      uCurrentSlice = _c.uCurrentSlice,\n      uCurrentX = _c.uCurrentX,\n      uCurrentY = _c.uCurrentY;\n\n  if (!webgl.namedFramebuffers[ColorAccumulateName]) {\n    webgl.namedFramebuffers[ColorAccumulateName] = webgl.resources.framebuffer();\n  }\n\n  var framebuffer = webgl.namedFramebuffers[ColorAccumulateName];\n  framebuffer.bind();\n  setAccumulateDefaults(webgl);\n  state.currentRenderItemId = -1;\n  accumulateTexture.attachFramebuffer(framebuffer, 0);\n  gl.viewport(0, 0, width, height);\n  gl.scissor(0, 0, width, height);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  ValueCell.update(uCurrentY, 0);\n  var currCol = 0;\n  var currY = 0;\n  var currX = 0;\n\n  for (var i = 0; i < dz; ++i) {\n    if (currCol >= texCols) {\n      currCol -= texCols;\n      currY += dy;\n      currX = 0;\n      ValueCell.update(uCurrentY, currY);\n    } // console.log({ i, currX, currY });\n\n\n    ValueCell.update(uCurrentX, currX);\n    ValueCell.update(uCurrentSlice, i);\n    gl.viewport(currX, currY, dx, dy);\n    gl.scissor(currX, currY, dx, dy);\n    accumulateRenderable.render();\n    ++currCol;\n    currX += dx;\n  } // const accImage = new Float32Array(width * height * 4);\n  // accumulateTexture.attachFramebuffer(framebuffer, 0);\n  // webgl.readPixels(0, 0, width, height, accImage);\n  // console.log(accImage);\n  // printTextureImage({ array: accImage, width, height }, 1 / 4);\n  // normalize\n\n\n  if (!texture) texture = resources.texture('image-uint8', 'rgb', 'ubyte', 'linear');\n  texture.define(width, height);\n  var normalizeRenderable = getNormalizeRenderable(webgl, accumulateTexture);\n  setNormalizeDefaults(webgl);\n  state.currentRenderItemId = -1;\n  texture.attachFramebuffer(framebuffer, 0);\n  gl.viewport(0, 0, width, height);\n  gl.scissor(0, 0, width, height);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  normalizeRenderable.render(); // const normImage = new Uint8Array(width * height * 4);\n  // texture.attachFramebuffer(framebuffer, 0);\n  // webgl.readPixels(0, 0, width, height, normImage);\n  // console.log(normImage);\n  // printTextureImage({ array: normImage, width, height }, 1 / 4);\n\n  var gridTransform = Vec4.create(min[0], min[1], min[2], scaleFactor);\n  var type = isInstanceType ? 'volumeInstance' : 'volume';\n  return {\n    texture: texture,\n    gridDim: gridDim,\n    gridTexDim: Vec2.create(width, height),\n    gridTransform: gridTransform,\n    type: type\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/texture-mesh/color-smoothing.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,uBAAT,QAA2D,4BAA3D;AAGA,SAAS,UAAT,QAA2B,6BAA3B;AACA,SAAS,uBAAT,QAAwC,mCAAxC;AACA,SAAS,SAAT,EAAoB,aAApB,EAAmC,WAAnC,EAAgD,WAAhD,EAAqE,UAArE,QAAuF,mCAAvF;AACA,SAAS,SAAT,QAA0B,kCAA1B;AACA,SAAS,cAAT,QAA+B,+DAA/B;AACA,SAAS,UAAT,EAAqB,UAArB,QAAuC,8BAAvC;AACA,SAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,QAAiC,kCAAjC;AACA,SAAS,KAAT,QAAgC,4BAAhC;AACA,SAAS,eAAT,QAAgC,gEAAhC;AACA,SAAS,eAAT,QAAgC,gEAAhC;AAGA,OAAO,IAAM,qBAAqB,GAAG;AACjC,EAAA,SAAS,EAAE,SAAS,CAAC,QAAD,CADa;AAEjC,EAAA,aAAa,EAAE,SAAS,CAAC,QAAD,CAFS;AAGjC,EAAA,MAAM,EAAE,SAAS,CAAC,QAAD,CAHgB;AAKjC,EAAA,WAAW,EAAE,WAAW,CAAC,GAAD,CALS;AAMjC,EAAA,cAAc,EAAE,WAAW,CAAC,GAAD,CANM;AAOjC,EAAA,WAAW,EAAE,WAAW,CAAC,GAAD,CAPS;AASjC,EAAA,UAAU,EAAE,aAAa,CAAC,SAAD,EAAY,EAAZ,EAAgB,CAAhB,CATQ;AAUjC,EAAA,SAAS,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAVS;AAWjC,EAAA,OAAO,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAXW;AAajC,EAAA,UAAU,EAAE,WAAW,CAAC,IAAD,EAAO,UAAP,CAbU;AAcjC,EAAA,SAAS,EAAE,WAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,SAA7B,CAdW;AAejC,EAAA,MAAM,EAAE,WAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,SAA7B,CAfc;AAiBjC,EAAA,YAAY,EAAE,WAAW,CAAC,IAAD,CAjBQ;AAkBjC,EAAA,MAAM,EAAE,WAAW,CAAC,aAAD,EAAgB,KAAhB,EAAuB,OAAvB,EAAgC,SAAhC,CAlBc;AAmBjC,EAAA,UAAU,EAAE,UAAU,CAAC,QAAD,EAAW,CAAC,OAAD,EAAU,eAAV,EAA2B,QAA3B,EAAqC,gBAArC,CAAX,CAnBW;AAqBjC,EAAA,aAAa,EAAE,WAAW,CAAC,GAAD,CArBO;AAsBjC,EAAA,SAAS,EAAE,WAAW,CAAC,GAAD,CAtBW;AAuBjC,EAAA,SAAS,EAAE,WAAW,CAAC,GAAD,CAvBW;AAwBjC,EAAA,QAAQ,EAAE,WAAW,CAAC,IAAD,EAAO,UAAP,CAxBY;AAyBjC,EAAA,SAAS,EAAE,WAAW,CAAC,IAAD,EAAO,UAAP,CAzBW;AA0BjC,EAAA,WAAW,EAAE,WAAW,CAAC,GAAD,EAAM,UAAN;AA1BS,CAA9B;AA6BP,IAAM,mBAAmB,GAAG,kBAA5B;;AAcA,SAAS,eAAT,CAAyB,WAAzB,EAA8C,MAA9C,EAA4D;AACxD,MAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,WAAjB,CAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAApB,EAAiC,EAAE,CAAnC,EAAsC;AAClC,IAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAC,GAAG,MAAtB;AACH;;AACD,SAAO,YAAP;AACH;;AAED,SAAS,uBAAT,CAAiC,GAAjC,EAAoD,KAApD,EAA4E,GAA5E,EAAwF,UAAxF,EAA4G,MAA5G,EAA0H;AACtH,MAAI,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,CAAJ,EAAsD;AAClD,QAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,EAAb,EAAiB,GAAG,CAAC,GAArB,EAA0B,GAAG,CAAC,GAA9B,CAAf;AACA,QAAM,CAAC,GAAG,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,EAAiD,MAA3D;AAEA,QAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,WAAN,GAAoB,MAA/B,CAApB;;AACA,QAAI,WAAW,GAAG,CAAC,CAAC,SAAF,CAAY,GAAZ,CAAgB,KAA9B,IAAuC,MAAM,KAAK,CAAC,CAAC,MAAF,CAAS,GAAT,CAAa,KAAnE,EAA0E;AACtE,MAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,OAAnB,EAA4B,eAAe,CAAC,WAAD,EAAc,MAAd,CAA3C;AACH;;AAED,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,SAA5B,EAAuC,WAAvC;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,aAA5B,EAA2C,KAAK,CAAC,aAAjD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,MAA5B,EAAoC,MAApC;AAEA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,WAA5B,EAAyC,KAAK,CAAC,WAA/C;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,cAA5B,EAA4C,KAAK,CAAC,aAAlD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,WAA5B,EAAyC,KAAK,CAAC,UAA/C;AAEA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,UAAnB,EAA+B,KAAK,CAAC,eAArC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,SAAnB,EAA8B,KAAK,CAAC,cAApC;AAEA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,UAAnB,EAA+B,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,UAAF,CAAa,GAAb,CAAiB,KAA1B,EAAiC,KAAK,CAAC,eAAN,CAAsB,QAAtB,EAAjC,EAAmE,KAAK,CAAC,eAAN,CAAsB,SAAtB,EAAnE,CAA/B;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,SAAnB,EAA8B,KAAK,CAAC,eAApC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,MAAnB,EAA2B,KAAK,CAAC,YAAjC;AAEA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,YAAnB,EAAiC,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,YAAF,CAAe,GAAf,CAAmB,KAA5B,EAAmC,KAAK,CAAC,SAAN,CAAgB,KAAnD,EAA0D,KAAK,CAAC,SAAN,CAAgB,MAA1E,CAAjC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,MAAnB,EAA2B,KAAK,CAAC,SAAjC;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,UAA5B,EAAwC,KAAK,CAAC,SAA9C;AAEA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,aAA5B,EAA2C,CAA3C;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,SAA5B,EAAuC,CAAvC;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,SAA5B,EAAuC,CAAvC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,QAAnB,EAA6B,GAAG,CAAC,GAAjC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,SAAnB,EAA8B,MAA9B;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,CAAC,CAAC,WAA5B,EAAyC,UAAzC;AAEA,IAAA,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,EAAiD,MAAjD;AACH,GApCD,MAoCO;AACH,IAAA,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,IAAmD,0BAA0B,CAAC,GAAD,EAAM,KAAN,EAAa,GAAb,EAAkB,UAAlB,EAA8B,MAA9B,CAA7E;AACH;;AACD,SAAO,GAAG,CAAC,uBAAJ,CAA4B,mBAA5B,CAAP;AACH;;AAED,SAAS,0BAAT,CAAoC,GAApC,EAAuD,KAAvD,EAA+E,GAA/E,EAA2F,UAA3F,EAA+G,MAA/G,EAA6H;AACzH,MAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,EAAb,EAAiB,GAAG,CAAC,GAArB,EAA0B,GAAG,CAAC,GAA9B,CAAf;AACA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,WAAN,GAAoB,MAA/B,CAApB;AAEA,MAAM,MAAM,GAA0B;AAClC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,WAAjB,CADuB;AAElC,IAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,aAAvB,CAFmB;AAGlC,IAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAH0B;AAKlC,IAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,WAAvB,CALqB;AAMlC,IAAA,cAAc,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,aAAvB,CANkB;AAOlC,IAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,UAAvB,CAPqB;AASlC,IAAA,UAAU,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,eAAvB,CATsB;AAUlC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,cAAvB,CAVuB;AAWlC,IAAA,OAAO,EAAE,SAAS,CAAC,MAAV,CAAiB,eAAe,CAAC,WAAD,EAAc,MAAd,CAAhC,CAXyB;AAalC,IAAA,UAAU,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,MAAL,CAAY,KAAK,CAAC,eAAN,CAAsB,QAAtB,EAAZ,EAA8C,KAAK,CAAC,eAAN,CAAsB,SAAtB,EAA9C,CAAjB,CAbsB;AAclC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,eAAvB,CAduB;AAelC,IAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,YAAvB,CAf0B;AAiBlC,IAAA,YAAY,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,MAAL,CAAY,KAAK,CAAC,SAAN,CAAgB,KAA5B,EAAmC,KAAK,CAAC,SAAN,CAAgB,MAAnD,CAAjB,CAjBoB;AAkBlC,IAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,SAAvB,CAlB0B;AAmBlC,IAAA,UAAU,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,SAAvB,CAnBsB;AAqBlC,IAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB,CArBmB;AAsBlC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAtBuB;AAuBlC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAvBuB;AAwBlC,IAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,GAAG,CAAC,GAArB,CAxBwB;AAyBlC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAzBuB;AA0BlC,IAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,UAAjB;AA1BqB,GAAtC;;AA6BA,MAAM,MAAM,GAAA,QAAA,CAAA,EAAA,EAAQ,qBAAR,CAAZ;;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,YAAD,EAAe,eAAf,EAAgC,eAAhC,CAA7B;AACA,MAAM,UAAU,GAAG,uBAAuB,CAAC,GAAD,EAAM,QAAN,EAAgB,UAAhB,EAA4B,MAA5B,EAAoC,MAApC,CAA1C;AAEA,SAAO,uBAAuB,CAAC,UAAD,EAAa,MAAb,CAA9B;AACH;;AAED,SAAS,qBAAT,CAA+B,GAA/B,EAAgD;AACpC,MAAA,EAAE,GAAY,GAAG,CAAf,EAAF;AAAA,MAAI,KAAK,GAAK,GAAG,CAAR,KAAT;AACR,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,SAAjB;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,EAAE,CAAC,KAAhB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,UAAjB;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,EAAE,CAAC,YAAhB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB;AACA,EAAA,KAAK,CAAC,UAAN,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAE,CAAC,GAAnB,EAAwB,EAAE,CAAC,GAA3B;AACA,EAAA,KAAK,CAAC,aAAN,CAAoB,EAAE,CAAC,QAAvB;AACH,C,CAED;;;AAEA,OAAO,IAAM,oBAAoB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC1B,UAD0B,CAAA,EAChB;AAEb,EAAA,MAAM,EAAE,WAAW,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,SAA7B,CAFN;AAGb,EAAA,QAAQ,EAAE,WAAW,CAAC,IAAD;AAHR,CADgB,CAA1B;AAQP,IAAM,kBAAkB,GAAG,iBAA3B;;AAEA,SAAS,sBAAT,CAAgC,GAAhC,EAAmD,KAAnD,EAAiE;AAC7D,MAAI,GAAG,CAAC,uBAAJ,CAA4B,kBAA5B,CAAJ,EAAqD;AACjD,QAAM,CAAC,GAAG,GAAG,CAAC,uBAAJ,CAA4B,kBAA5B,EAAgD,MAA1D;AAEA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,MAAnB,EAA2B,KAA3B;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,QAAnB,EAA6B,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,QAAF,CAAW,GAAX,CAAe,KAAxB,EAA+B,KAAK,CAAC,QAAN,EAA/B,EAAiD,KAAK,CAAC,SAAN,EAAjD,CAA7B;AAEA,IAAA,GAAG,CAAC,uBAAJ,CAA4B,kBAA5B,EAAgD,MAAhD;AACH,GAPD,MAOO;AACH,IAAA,GAAG,CAAC,uBAAJ,CAA4B,kBAA5B,IAAkD,8BAA8B,CAAC,GAAD,EAAM,KAAN,CAAhF;AACH;;AACD,SAAO,GAAG,CAAC,uBAAJ,CAA4B,kBAA5B,CAAP;AACH;;AAED,SAAS,8BAAT,CAAwC,GAAxC,EAA2D,KAA3D,EAAyE;AACrE,MAAM,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACL,UADK,CAAA,EACK;AACb,IAAA,MAAM,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAjB,CADK;AAEb,IAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,MAAL,CAAY,KAAK,CAAC,QAAN,EAAZ,EAA8B,KAAK,CAAC,SAAN,EAA9B,CAAjB;AAFG,GADL,CAAZ;;AAMA,MAAM,MAAM,GAAA,QAAA,CAAA,EAAA,EAAQ,oBAAR,CAAZ;;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,WAAD,EAAc,SAAd,EAAyB,cAAzB,CAA7B;AACA,MAAM,UAAU,GAAG,uBAAuB,CAAC,GAAD,EAAM,WAAN,EAAmB,UAAnB,EAA+B,MAA/B,EAAuC,MAAvC,CAA1C;AAEA,SAAO,uBAAuB,CAAC,UAAD,EAAa,MAAb,CAA9B;AACH;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAA+C;AACnC,MAAA,EAAE,GAAY,GAAG,CAAf,EAAF;AAAA,MAAI,KAAK,GAAK,GAAG,CAAR,KAAT;AACR,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,SAAjB;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,EAAE,CAAC,KAAhB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,EAAE,CAAC,UAAjB;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,EAAE,CAAC,YAAhB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,KAAhB;AACA,EAAA,KAAK,CAAC,UAAN,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,EAAE,CAAC,GAAnB,EAAwB,EAAE,CAAC,GAA3B;AACA,EAAA,KAAK,CAAC,aAAN,CAAoB,EAAE,CAAC,QAAvB;AACH,C,CAED;;;AAEA,SAAS,gBAAT,CAA0B,OAA1B,EAAuC;AACnC,MAAM,IAAI,GAAG,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAD,CAApB,GAA0B,OAAO,CAAC,CAAD,CAA9C;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,IAAV,CAAlB;AACA,MAAM,cAAc,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,GAAL,CAAS,SAAT,IAAsB,IAAI,CAAC,GAAL,CAAS,CAAT,CAAhC,CAAZ,CAAvB;AAEA,MAAI,OAAO,GAAG,CAAd;AACA,MAAI,OAAO,GAAG,OAAO,CAAC,CAAD,CAArB;AACA,MAAI,OAAO,GAAG,CAAd;AACA,MAAI,OAAO,GAAG,OAAO,CAAC,CAAD,CAArB;;AACA,MAAI,cAAc,GAAG,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAD,CAAzC,EAA8C;AAC1C,IAAA,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,cAAc,GAAG,OAAO,CAAC,CAAD,CAAnC,CAAV;AACA,IAAA,OAAO,GAAG,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,CAAD,CAAP,GAAa,OAAvB,CAAV;AACA,IAAA,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC,CAAD,CAA3B;AACA,IAAA,OAAO,IAAI,OAAX;AACH,GALD,MAKO;AACH,IAAA,OAAO,GAAG,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAD,CAA9B;AACH,GAhBkC,CAiBnC;;;AACA,SAAO;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,OAAO,EAAA,OAAlB;AAAoB,IAAA,OAAO,EAAA,OAA3B;AAA6B,IAAA,OAAO,EAAA,OAApC;AAAsC,IAAA,cAAc,EAAE,OAAO,GAAG,cAAV,GAA2B,cAA3B,GAA4C,cAAc,GAAG;AAAnH,GAAP;AACH;;AAOD,OAAM,SAAU,6BAAV,CAAwC,KAAxC,EAAoE,UAApE,EAAwF,MAAxF,EAAwG,KAAxG,EAA6H,OAA7H,EAA8I;AACxI,MAAA,EAAE,GAA+E,KAAK,CAApF,EAAF;AAAA,MAAI,SAAS,GAAoE,KAAK,CAAzE,SAAb;AAAA,MAAe,KAAK,GAA6D,KAAK,CAAlE,KAApB;AAAA,MAAsB,EAAA,GAA2D,KAAK,CAAV,UAA5E;AAAA,MAAoC,oBAAoB,GAAA,EAAA,CAAA,oBAAxD;AAAA,MAA0D,gBAAgB,GAAA,EAAA,CAAA,gBAA1E;AAER,MAAM,cAAc,GAAG,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAyB,UAAzB,CAAvB;AACA,MAAM,GAAG,GAAG,KAAK,CAAC,YAAN,CAAmB,KAAK,EAAxB,EAA4B,cAAc,GAAG,KAAK,CAAC,cAAT,GAA0B,KAAK,CAAC,uBAA1E,CAAZ;AAEA,MAAM,WAAW,GAAG,IAAI,UAAxB;AACA,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,EAAjB,EAAqB,GAArB,EAA0B,WAA1B,CAAlB;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,IAAN,CAAW,IAAI,EAAf,EAAmB,SAAnB,CAAhB;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,OAAV,EAAmB,OAAnB;AACA,EAAA,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAlB,EAA2B,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA3B;AACQ,MAAA,GAAG,GAAK,GAAG,CAAR,GAAH;AAED,MAAA,EAAE,GAAY,OAAO,CAAnB,CAAmB,CAArB;AAAA,MAAI,EAAE,GAAQ,OAAO,CAAf,CAAe,CAArB;AAAA,MAAQ,EAAE,GAAI,OAAO,CAAX,CAAW,CAArB;;AACD,MAAA,EAAA,GAA+C,gBAAgB,CAAC,OAAD,CAA/D;AAAA,MAAW,KAAK,GAAA,EAAA,CAAA,OAAhB;AAAA,MAA2B,MAAM,GAAA,EAAA,CAAA,OAAjC;AAAA,MAAmC,OAAO,GAAA,EAAA,CAAA,OAA1C,CAd0I,CAehJ;;;AAEA,MAAI,CAAC,KAAK,CAAC,aAAN,CAAoB,mBAApB,CAAL,EAA+C;AAC3C,IAAA,KAAK,CAAC,aAAN,CAAoB,mBAApB,IAA2C,oBAAoB,IAAI,gBAAxB,GACrC,SAAS,CAAC,OAAV,CAAkB,eAAlB,EAAmC,MAAnC,EAA2C,MAA3C,EAAmD,SAAnD,CADqC,GAErC,SAAS,CAAC,OAAV,CAAkB,eAAlB,EAAmC,MAAnC,EAA2C,OAA3C,EAAoD,SAApD,CAFN;AAGH;;AACD,MAAM,iBAAiB,GAAG,KAAK,CAAC,aAAN,CAAoB,mBAApB,CAA1B;AACA,EAAA,iBAAiB,CAAC,MAAlB,CAAyB,KAAzB,EAAgC,MAAhC;AAEA,MAAM,oBAAoB,GAAG,uBAAuB,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,UAApB,EAAgC,MAAhC,CAApD,CAzBgJ,CA2BhJ;;AAEM,MAAA,EAAA,GAA0C,oBAAoB,CAAC,MAA/D;AAAA,MAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,MAAiB,SAAS,GAAA,EAAA,CAAA,SAA1B;AAAA,MAA4B,SAAS,GAAA,EAAA,CAAA,SAArC;;AAEN,MAAI,CAAC,KAAK,CAAC,iBAAN,CAAwB,mBAAxB,CAAL,EAAmD;AAC/C,IAAA,KAAK,CAAC,iBAAN,CAAwB,mBAAxB,IAA+C,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAA/C;AACH;;AACD,MAAM,WAAW,GAAG,KAAK,CAAC,iBAAN,CAAwB,mBAAxB,CAApB;AACA,EAAA,WAAW,CAAC,IAAZ;AAEA,EAAA,qBAAqB,CAAC,KAAD,CAArB;AACA,EAAA,KAAK,CAAC,mBAAN,GAA4B,CAAC,CAA7B;AACA,EAAA,iBAAiB,CAAC,iBAAlB,CAAoC,WAApC,EAAiD,CAAjD;AACA,EAAA,EAAE,CAAC,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB,KAAlB,EAAyB,MAAzB;AACA,EAAA,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB;AACA,EAAA,EAAE,CAAC,KAAH,CAAS,EAAE,CAAC,gBAAZ;AACA,EAAA,SAAS,CAAC,MAAV,CAAiB,SAAjB,EAA4B,CAA5B;AACA,MAAI,OAAO,GAAG,CAAd;AACA,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AACzB,QAAI,OAAO,IAAI,OAAf,EAAwB;AACpB,MAAA,OAAO,IAAI,OAAX;AACA,MAAA,KAAK,IAAI,EAAT;AACA,MAAA,KAAK,GAAG,CAAR;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,SAAjB,EAA4B,KAA5B;AACH,KANwB,CAOzB;;;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,SAAjB,EAA4B,KAA5B;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;AACA,IAAA,EAAE,CAAC,QAAH,CAAY,KAAZ,EAAmB,KAAnB,EAA0B,EAA1B,EAA8B,EAA9B;AACA,IAAA,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB,KAAlB,EAAyB,EAAzB,EAA6B,EAA7B;AACA,IAAA,oBAAoB,CAAC,MAArB;AACA,MAAE,OAAF;AACA,IAAA,KAAK,IAAI,EAAT;AACH,GA9D+I,CAgEhJ;AACA;AACA;AACA;AACA;AAEA;;;AAEA,MAAI,CAAC,OAAL,EAAc,OAAO,GAAG,SAAS,CAAC,OAAV,CAAkB,aAAlB,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,QAAjD,CAAV;AACd,EAAA,OAAO,CAAC,MAAR,CAAe,KAAf,EAAsB,MAAtB;AAEA,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,KAAD,EAAQ,iBAAR,CAAlD;AAEA,EAAA,oBAAoB,CAAC,KAAD,CAApB;AACA,EAAA,KAAK,CAAC,mBAAN,GAA4B,CAAC,CAA7B;AACA,EAAA,OAAO,CAAC,iBAAR,CAA0B,WAA1B,EAAuC,CAAvC;AACA,EAAA,EAAE,CAAC,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB,KAAlB,EAAyB,MAAzB;AACA,EAAA,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB;AACA,EAAA,EAAE,CAAC,KAAH,CAAS,EAAE,CAAC,gBAAZ;AACA,EAAA,mBAAmB,CAAC,MAApB,GAnFgJ,CAqFhJ;AACA;AACA;AACA;AACA;;AAEA,MAAM,aAAa,GAAG,IAAI,CAAC,MAAL,CAAY,GAAG,CAAC,CAAD,CAAf,EAAoB,GAAG,CAAC,CAAD,CAAvB,EAA4B,GAAG,CAAC,CAAD,CAA/B,EAAoC,WAApC,CAAtB;AACA,MAAM,IAAI,GAAG,cAAc,GAAG,gBAAH,GAAsB,QAAjD;AAEA,SAAO;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,OAAO,EAAA,OAAlB;AAAoB,IAAA,UAAU,EAAE,IAAI,CAAC,MAAL,CAAY,KAAZ,EAAmB,MAAnB,CAAhC;AAA4D,IAAA,aAAa,EAAA,aAAzE;AAA2E,IAAA,IAAI,EAAA;AAA/E,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { createComputeRenderable } from '../../../mol-gl/renderable';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { createComputeRenderItem } from '../../../mol-gl/webgl/render-item';\r\nimport { ValueSpec, AttributeSpec, UniformSpec, TextureSpec, DefineSpec } from '../../../mol-gl/renderable/schema';\r\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\r\nimport { normalize_frag } from '../../../mol-gl/shader/compute/color-smoothing/normalize.frag';\r\nimport { QuadSchema, QuadValues } from '../../../mol-gl/compute/util';\r\nimport { Vec2, Vec3, Vec4 } from '../../../mol-math/linear-algebra';\r\nimport { Box3D } from '../../../mol-math/geometry';\r\nimport { accumulate_frag } from '../../../mol-gl/shader/compute/color-smoothing/accumulate.frag';\r\nimport { accumulate_vert } from '../../../mol-gl/shader/compute/color-smoothing/accumulate.vert';\r\nexport var ColorAccumulateSchema = {\r\n    drawCount: ValueSpec('number'),\r\n    instanceCount: ValueSpec('number'),\r\n    stride: ValueSpec('number'),\r\n    uTotalCount: UniformSpec('i'),\r\n    uInstanceCount: UniformSpec('i'),\r\n    uGroupCount: UniformSpec('i'),\r\n    aTransform: AttributeSpec('float32', 16, 1),\r\n    aInstance: AttributeSpec('float32', 1, 1),\r\n    aSample: AttributeSpec('float32', 1, 0),\r\n    uGeoTexDim: UniformSpec('v2', 'buffered'),\r\n    tPosition: TextureSpec('texture', 'rgba', 'float', 'nearest'),\r\n    tGroup: TextureSpec('texture', 'rgba', 'float', 'nearest'),\r\n    uColorTexDim: UniformSpec('v2'),\r\n    tColor: TextureSpec('image-uint8', 'rgb', 'ubyte', 'nearest'),\r\n    dColorType: DefineSpec('string', ['group', 'groupInstance', 'vertex', 'vertexInstance']),\r\n    uCurrentSlice: UniformSpec('f'),\r\n    uCurrentX: UniformSpec('f'),\r\n    uCurrentY: UniformSpec('f'),\r\n    uBboxMin: UniformSpec('v3', 'material'),\r\n    uBboxSize: UniformSpec('v3', 'material'),\r\n    uResolution: UniformSpec('f', 'material'),\r\n};\r\nvar ColorAccumulateName = 'color-accumulate';\r\nfunction getSampleBuffer(sampleCount, stride) {\r\n    var sampleBuffer = new Float32Array(sampleCount);\r\n    for (var i = 0; i < sampleCount; ++i) {\r\n        sampleBuffer[i] = i * stride;\r\n    }\r\n    return sampleBuffer;\r\n}\r\nfunction getAccumulateRenderable(ctx, input, box, resolution, stride) {\r\n    if (ctx.namedComputeRenderables[ColorAccumulateName]) {\r\n        var extent = Vec3.sub(Vec3(), box.max, box.min);\r\n        var v = ctx.namedComputeRenderables[ColorAccumulateName].values;\r\n        var sampleCount = Math.round(input.vertexCount / stride);\r\n        if (sampleCount > v.drawCount.ref.value || stride !== v.stride.ref.value) {\r\n            ValueCell.update(v.aSample, getSampleBuffer(sampleCount, stride));\r\n        }\r\n        ValueCell.updateIfChanged(v.drawCount, sampleCount);\r\n        ValueCell.updateIfChanged(v.instanceCount, input.instanceCount);\r\n        ValueCell.updateIfChanged(v.stride, stride);\r\n        ValueCell.updateIfChanged(v.uTotalCount, input.vertexCount);\r\n        ValueCell.updateIfChanged(v.uInstanceCount, input.instanceCount);\r\n        ValueCell.updateIfChanged(v.uGroupCount, input.groupCount);\r\n        ValueCell.update(v.aTransform, input.transformBuffer);\r\n        ValueCell.update(v.aInstance, input.instanceBuffer);\r\n        ValueCell.update(v.uGeoTexDim, Vec2.set(v.uGeoTexDim.ref.value, input.positionTexture.getWidth(), input.positionTexture.getHeight()));\r\n        ValueCell.update(v.tPosition, input.positionTexture);\r\n        ValueCell.update(v.tGroup, input.groupTexture);\r\n        ValueCell.update(v.uColorTexDim, Vec2.set(v.uColorTexDim.ref.value, input.colorData.width, input.colorData.height));\r\n        ValueCell.update(v.tColor, input.colorData);\r\n        ValueCell.updateIfChanged(v.dColorType, input.colorType);\r\n        ValueCell.updateIfChanged(v.uCurrentSlice, 0);\r\n        ValueCell.updateIfChanged(v.uCurrentX, 0);\r\n        ValueCell.updateIfChanged(v.uCurrentY, 0);\r\n        ValueCell.update(v.uBboxMin, box.min);\r\n        ValueCell.update(v.uBboxSize, extent);\r\n        ValueCell.updateIfChanged(v.uResolution, resolution);\r\n        ctx.namedComputeRenderables[ColorAccumulateName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[ColorAccumulateName] = createAccumulateRenderable(ctx, input, box, resolution, stride);\r\n    }\r\n    return ctx.namedComputeRenderables[ColorAccumulateName];\r\n}\r\nfunction createAccumulateRenderable(ctx, input, box, resolution, stride) {\r\n    var extent = Vec3.sub(Vec3(), box.max, box.min);\r\n    var sampleCount = Math.round(input.vertexCount / stride);\r\n    var values = {\r\n        drawCount: ValueCell.create(sampleCount),\r\n        instanceCount: ValueCell.create(input.instanceCount),\r\n        stride: ValueCell.create(stride),\r\n        uTotalCount: ValueCell.create(input.vertexCount),\r\n        uInstanceCount: ValueCell.create(input.instanceCount),\r\n        uGroupCount: ValueCell.create(input.groupCount),\r\n        aTransform: ValueCell.create(input.transformBuffer),\r\n        aInstance: ValueCell.create(input.instanceBuffer),\r\n        aSample: ValueCell.create(getSampleBuffer(sampleCount, stride)),\r\n        uGeoTexDim: ValueCell.create(Vec2.create(input.positionTexture.getWidth(), input.positionTexture.getHeight())),\r\n        tPosition: ValueCell.create(input.positionTexture),\r\n        tGroup: ValueCell.create(input.groupTexture),\r\n        uColorTexDim: ValueCell.create(Vec2.create(input.colorData.width, input.colorData.height)),\r\n        tColor: ValueCell.create(input.colorData),\r\n        dColorType: ValueCell.create(input.colorType),\r\n        uCurrentSlice: ValueCell.create(0),\r\n        uCurrentX: ValueCell.create(0),\r\n        uCurrentY: ValueCell.create(0),\r\n        uBboxMin: ValueCell.create(box.min),\r\n        uBboxSize: ValueCell.create(extent),\r\n        uResolution: ValueCell.create(resolution),\r\n    };\r\n    var schema = __assign({}, ColorAccumulateSchema);\r\n    var shaderCode = ShaderCode('accumulate', accumulate_vert, accumulate_frag);\r\n    var renderItem = createComputeRenderItem(ctx, 'points', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setAccumulateDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.enable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.enable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.clearColor(0, 0, 0, 0);\r\n    state.blendFunc(gl.ONE, gl.ONE);\r\n    state.blendEquation(gl.FUNC_ADD);\r\n}\r\n//\r\nexport var ColorNormalizeSchema = __assign(__assign({}, QuadSchema), { tColor: TextureSpec('texture', 'rgba', 'float', 'nearest'), uTexSize: UniformSpec('v2') });\r\nvar ColorNormalizeName = 'color-normalize';\r\nfunction getNormalizeRenderable(ctx, color) {\r\n    if (ctx.namedComputeRenderables[ColorNormalizeName]) {\r\n        var v = ctx.namedComputeRenderables[ColorNormalizeName].values;\r\n        ValueCell.update(v.tColor, color);\r\n        ValueCell.update(v.uTexSize, Vec2.set(v.uTexSize.ref.value, color.getWidth(), color.getHeight()));\r\n        ctx.namedComputeRenderables[ColorNormalizeName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[ColorNormalizeName] = createColorNormalizeRenderable(ctx, color);\r\n    }\r\n    return ctx.namedComputeRenderables[ColorNormalizeName];\r\n}\r\nfunction createColorNormalizeRenderable(ctx, color) {\r\n    var values = __assign(__assign({}, QuadValues), { tColor: ValueCell.create(color), uTexSize: ValueCell.create(Vec2.create(color.getWidth(), color.getHeight())) });\r\n    var schema = __assign({}, ColorNormalizeSchema);\r\n    var shaderCode = ShaderCode('normalize', quad_vert, normalize_frag);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setNormalizeDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.enable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.enable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.clearColor(0, 0, 0, 0);\r\n    state.blendFunc(gl.ONE, gl.ONE);\r\n    state.blendEquation(gl.FUNC_ADD);\r\n}\r\n//\r\nfunction getTexture2dSize(gridDim) {\r\n    var area = gridDim[0] * gridDim[1] * gridDim[2];\r\n    var squareDim = Math.sqrt(area);\r\n    var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\r\n    var texDimX = 0;\r\n    var texDimY = gridDim[1];\r\n    var texRows = 1;\r\n    var texCols = gridDim[2];\r\n    if (powerOfTwoSize < gridDim[0] * gridDim[2]) {\r\n        texCols = Math.floor(powerOfTwoSize / gridDim[0]);\r\n        texRows = Math.ceil(gridDim[2] / texCols);\r\n        texDimX = texCols * gridDim[0];\r\n        texDimY *= texRows;\r\n    }\r\n    else {\r\n        texDimX = gridDim[0] * gridDim[2];\r\n    }\r\n    // console.log(texDimX, texDimY, texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2);\r\n    return { texDimX: texDimX, texDimY: texDimY, texRows: texRows, texCols: texCols, powerOfTwoSize: texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2 };\r\n}\r\nexport function calcTextureMeshColorSmoothing(input, resolution, stride, webgl, texture) {\r\n    var gl = webgl.gl, resources = webgl.resources, state = webgl.state, _a = webgl.extensions, colorBufferHalfFloat = _a.colorBufferHalfFloat, textureHalfFloat = _a.textureHalfFloat;\r\n    var isInstanceType = input.colorType.endsWith('Instance');\r\n    var box = Box3D.fromSphere3D(Box3D(), isInstanceType ? input.boundingSphere : input.invariantBoundingSphere);\r\n    var scaleFactor = 1 / resolution;\r\n    var scaledBox = Box3D.scale(Box3D(), box, scaleFactor);\r\n    var gridDim = Box3D.size(Vec3(), scaledBox);\r\n    Vec3.ceil(gridDim, gridDim);\r\n    Vec3.add(gridDim, gridDim, Vec3.create(2, 2, 2));\r\n    var min = box.min;\r\n    var dx = gridDim[0], dy = gridDim[1], dz = gridDim[2];\r\n    var _b = getTexture2dSize(gridDim), width = _b.texDimX, height = _b.texDimY, texCols = _b.texCols;\r\n    // console.log({ width, height, texCols, dim, resolution });\r\n    if (!webgl.namedTextures[ColorAccumulateName]) {\r\n        webgl.namedTextures[ColorAccumulateName] = colorBufferHalfFloat && textureHalfFloat\r\n            ? resources.texture('image-float16', 'rgba', 'fp16', 'nearest')\r\n            : resources.texture('image-float32', 'rgba', 'float', 'nearest');\r\n    }\r\n    var accumulateTexture = webgl.namedTextures[ColorAccumulateName];\r\n    accumulateTexture.define(width, height);\r\n    var accumulateRenderable = getAccumulateRenderable(webgl, input, box, resolution, stride);\r\n    //\r\n    var _c = accumulateRenderable.values, uCurrentSlice = _c.uCurrentSlice, uCurrentX = _c.uCurrentX, uCurrentY = _c.uCurrentY;\r\n    if (!webgl.namedFramebuffers[ColorAccumulateName]) {\r\n        webgl.namedFramebuffers[ColorAccumulateName] = webgl.resources.framebuffer();\r\n    }\r\n    var framebuffer = webgl.namedFramebuffers[ColorAccumulateName];\r\n    framebuffer.bind();\r\n    setAccumulateDefaults(webgl);\r\n    state.currentRenderItemId = -1;\r\n    accumulateTexture.attachFramebuffer(framebuffer, 0);\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    ValueCell.update(uCurrentY, 0);\r\n    var currCol = 0;\r\n    var currY = 0;\r\n    var currX = 0;\r\n    for (var i = 0; i < dz; ++i) {\r\n        if (currCol >= texCols) {\r\n            currCol -= texCols;\r\n            currY += dy;\r\n            currX = 0;\r\n            ValueCell.update(uCurrentY, currY);\r\n        }\r\n        // console.log({ i, currX, currY });\r\n        ValueCell.update(uCurrentX, currX);\r\n        ValueCell.update(uCurrentSlice, i);\r\n        gl.viewport(currX, currY, dx, dy);\r\n        gl.scissor(currX, currY, dx, dy);\r\n        accumulateRenderable.render();\r\n        ++currCol;\r\n        currX += dx;\r\n    }\r\n    // const accImage = new Float32Array(width * height * 4);\r\n    // accumulateTexture.attachFramebuffer(framebuffer, 0);\r\n    // webgl.readPixels(0, 0, width, height, accImage);\r\n    // console.log(accImage);\r\n    // printTextureImage({ array: accImage, width, height }, 1 / 4);\r\n    // normalize\r\n    if (!texture)\r\n        texture = resources.texture('image-uint8', 'rgb', 'ubyte', 'linear');\r\n    texture.define(width, height);\r\n    var normalizeRenderable = getNormalizeRenderable(webgl, accumulateTexture);\r\n    setNormalizeDefaults(webgl);\r\n    state.currentRenderItemId = -1;\r\n    texture.attachFramebuffer(framebuffer, 0);\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    normalizeRenderable.render();\r\n    // const normImage = new Uint8Array(width * height * 4);\r\n    // texture.attachFramebuffer(framebuffer, 0);\r\n    // webgl.readPixels(0, 0, width, height, normImage);\r\n    // console.log(normImage);\r\n    // printTextureImage({ array: normImage, width, height }, 1 / 4);\r\n    var gridTransform = Vec4.create(min[0], min[1], min[2], scaleFactor);\r\n    var type = isInstanceType ? 'volumeInstance' : 'volume';\r\n    return { texture: texture, gridDim: gridDim, gridTexDim: Vec2.create(width, height), gridTransform: gridTransform, type: type };\r\n}\r\n//# sourceMappingURL=color-smoothing.js.map"]},"metadata":{},"sourceType":"module"}