{"ast":null,"code":"/**\r\n * Copyright (c) 2017 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\n// TODO check if the removal of FastSet and the removal of the context object for forEach\n// have any performance implications\nfunction _ascSort(a, b) {\n  return a - b;\n}\n\nexport function sortAsc(array) {\n  Array.prototype.sort.call(array, _ascSort);\n  return array;\n}\nvar Mask;\n\n(function (Mask) {\n  var EmptyMask =\n  /** @class */\n  function () {\n    function EmptyMask() {\n      this.size = 0;\n    }\n\n    EmptyMask.prototype.has = function (i) {\n      return false;\n    };\n\n    EmptyMask.prototype.forEach = function (f, ctx) {\n      return ctx;\n    };\n\n    return EmptyMask;\n  }();\n\n  var SingletonMask =\n  /** @class */\n  function () {\n    function SingletonMask(idx) {\n      this.idx = idx;\n      this.size = 1;\n    }\n\n    SingletonMask.prototype.has = function (i) {\n      return i === this.idx;\n    };\n\n    SingletonMask.prototype.forEach = function (f, ctx) {\n      f(this.idx, ctx);\n      return ctx;\n    };\n\n    return SingletonMask;\n  }();\n\n  var BitMask =\n  /** @class */\n  function () {\n    function BitMask(mask, size) {\n      this.mask = mask;\n      this.size = size;\n      this.length = mask.length;\n    }\n\n    BitMask.prototype.has = function (i) {\n      return i < this.length && !!this.mask[i];\n    };\n\n    BitMask.prototype._forEach = function (f, ctx) {\n      for (var i = 0; i < this.length; i++) {\n        if (this.mask[i]) f(i, ctx);\n      }\n    };\n\n    BitMask.prototype.forEach = function (f, ctx) {\n      this._forEach(f, ctx);\n\n      return ctx;\n    };\n\n    return BitMask;\n  }();\n\n  var AllMask =\n  /** @class */\n  function () {\n    function AllMask(size) {\n      this.size = size;\n    }\n\n    AllMask.prototype.has = function (i) {\n      return true;\n    };\n\n    AllMask.prototype._forEach = function (f, ctx) {\n      for (var i = 0; i < this.size; i++) {\n        f(i, ctx);\n      }\n    };\n\n    AllMask.prototype.forEach = function (f, ctx) {\n      this._forEach(f, ctx);\n\n      return ctx;\n    };\n\n    return AllMask;\n  }();\n\n  var SetMask =\n  /** @class */\n  function () {\n    function SetMask(set) {\n      this.set = set;\n      this._flat = void 0;\n      this.size = set.size;\n    }\n\n    SetMask.prototype.has = function (i) {\n      return this.set.has(i);\n    };\n\n    SetMask.prototype._forEach = function (f, ctx) {\n      for (var _i = 0, _a = this.flatten(); _i < _a.length; _i++) {\n        var idx = _a[_i];\n        f(idx, ctx);\n      }\n    };\n\n    SetMask.prototype.flatten = function () {\n      if (this._flat) return this._flat;\n      var indices = new Int32Array(this.size);\n      var offset = 0;\n      this.set.forEach(function (i) {\n        return indices[offset++] = i;\n      });\n      sortAsc(indices);\n      this._flat = indices;\n      return this._flat;\n    };\n\n    SetMask.prototype.forEach = function (f, ctx) {\n      this._forEach(f, ctx);\n\n      return ctx;\n    };\n\n    return SetMask;\n  }();\n\n  function always(size) {\n    return new AllMask(size);\n  }\n\n  Mask.always = always;\n  Mask.never = new EmptyMask();\n\n  function ofSet(set) {\n    return new SetMask(set);\n  }\n\n  Mask.ofSet = ofSet;\n\n  function singleton(i) {\n    return new SingletonMask(i);\n  }\n\n  Mask.singleton = singleton;\n\n  function ofUniqueIndices(indices) {\n    var len = indices.length;\n    if (len === 0) return new EmptyMask();\n    if (len === 1) return new SingletonMask(indices[0]);\n    var max = 0;\n\n    for (var _i = 0, _a = indices; _i < _a.length; _i++) {\n      var i = _a[_i];\n      if (i > max) max = i;\n    }\n\n    if (len === max) return new AllMask(len);\n    var f = len / max;\n\n    if (f < 1 / 12) {\n      var set = new Set();\n\n      for (var _b = 0, _c = indices; _b < _c.length; _b++) {\n        var i = _c[_b];\n        set.add(i);\n      }\n\n      return new SetMask(set);\n    }\n\n    var mask = new Int8Array(max + 1);\n\n    for (var _d = 0, _e = indices; _d < _e.length; _d++) {\n      var i = _e[_d];\n      mask[i] = 1;\n    }\n\n    return new BitMask(mask, indices.length);\n  }\n\n  Mask.ofUniqueIndices = ofUniqueIndices;\n\n  function ofMask(mask, size) {\n    return new BitMask(mask, size);\n  }\n\n  Mask.ofMask = ofMask;\n\n  function hasAny(mask, xs) {\n    for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {\n      var x = xs_1[_i];\n      if (mask.has(x)) return true;\n    }\n\n    return false;\n  }\n\n  Mask.hasAny = hasAny;\n\n  function complement(mask, against) {\n    var count = 0;\n    var max = 0;\n    against.forEach(function (i) {\n      if (!mask.has(i)) {\n        count++;\n        if (i > max) max = i;\n      }\n    });\n\n    if (count / max < 1 / 12) {\n      // set based\n      var set_1 = new Set();\n      against.forEach(function (i) {\n        if (!mask.has(i)) {\n          set_1.add(i);\n        }\n      });\n      return ofSet(set_1);\n    } else {\n      // mask based\n      var target_1 = new Uint8Array(max + 1);\n      against.forEach(function (i) {\n        if (!mask.has(i)) {\n          target_1[i] = 1;\n        }\n      });\n      return ofMask(target_1, count);\n    }\n  }\n\n  Mask.complement = complement;\n})(Mask || (Mask = {}));\n\nexport { Mask };","map":{"version":3,"sources":["../../src/mol-util/mask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\n// TODO check if the removal of FastSet and the removal of the context object for forEach\r\n// have any performance implications\r\nfunction _ascSort(a, b) {\r\n    return a - b;\r\n}\r\nexport function sortAsc(array) {\r\n    Array.prototype.sort.call(array, _ascSort);\r\n    return array;\r\n}\r\nvar Mask;\r\n(function (Mask) {\r\n    var EmptyMask = /** @class */ (function () {\r\n        function EmptyMask() {\r\n            this.size = 0;\r\n        }\r\n        EmptyMask.prototype.has = function (i) { return false; };\r\n        EmptyMask.prototype.forEach = function (f, ctx) { return ctx; };\r\n        return EmptyMask;\r\n    }());\r\n    var SingletonMask = /** @class */ (function () {\r\n        function SingletonMask(idx) {\r\n            this.idx = idx;\r\n            this.size = 1;\r\n        }\r\n        SingletonMask.prototype.has = function (i) { return i === this.idx; };\r\n        SingletonMask.prototype.forEach = function (f, ctx) { f(this.idx, ctx); return ctx; };\r\n        return SingletonMask;\r\n    }());\r\n    var BitMask = /** @class */ (function () {\r\n        function BitMask(mask, size) {\r\n            this.mask = mask;\r\n            this.size = size;\r\n            this.length = mask.length;\r\n        }\r\n        BitMask.prototype.has = function (i) { return i < this.length && !!this.mask[i]; };\r\n        BitMask.prototype._forEach = function (f, ctx) {\r\n            for (var i = 0; i < this.length; i++) {\r\n                if (this.mask[i])\r\n                    f(i, ctx);\r\n            }\r\n        };\r\n        BitMask.prototype.forEach = function (f, ctx) {\r\n            this._forEach(f, ctx);\r\n            return ctx;\r\n        };\r\n        return BitMask;\r\n    }());\r\n    var AllMask = /** @class */ (function () {\r\n        function AllMask(size) {\r\n            this.size = size;\r\n        }\r\n        AllMask.prototype.has = function (i) { return true; };\r\n        AllMask.prototype._forEach = function (f, ctx) {\r\n            for (var i = 0; i < this.size; i++) {\r\n                f(i, ctx);\r\n            }\r\n        };\r\n        AllMask.prototype.forEach = function (f, ctx) {\r\n            this._forEach(f, ctx);\r\n            return ctx;\r\n        };\r\n        return AllMask;\r\n    }());\r\n    var SetMask = /** @class */ (function () {\r\n        function SetMask(set) {\r\n            this.set = set;\r\n            this._flat = void 0;\r\n            this.size = set.size;\r\n        }\r\n        SetMask.prototype.has = function (i) { return this.set.has(i); };\r\n        SetMask.prototype._forEach = function (f, ctx) {\r\n            for (var _i = 0, _a = this.flatten(); _i < _a.length; _i++) {\r\n                var idx = _a[_i];\r\n                f(idx, ctx);\r\n            }\r\n        };\r\n        SetMask.prototype.flatten = function () {\r\n            if (this._flat)\r\n                return this._flat;\r\n            var indices = new Int32Array(this.size);\r\n            var offset = 0;\r\n            this.set.forEach(function (i) { return indices[offset++] = i; });\r\n            sortAsc(indices);\r\n            this._flat = indices;\r\n            return this._flat;\r\n        };\r\n        SetMask.prototype.forEach = function (f, ctx) {\r\n            this._forEach(f, ctx);\r\n            return ctx;\r\n        };\r\n        return SetMask;\r\n    }());\r\n    function always(size) { return new AllMask(size); }\r\n    Mask.always = always;\r\n    Mask.never = new EmptyMask();\r\n    function ofSet(set) {\r\n        return new SetMask(set);\r\n    }\r\n    Mask.ofSet = ofSet;\r\n    function singleton(i) {\r\n        return new SingletonMask(i);\r\n    }\r\n    Mask.singleton = singleton;\r\n    function ofUniqueIndices(indices) {\r\n        var len = indices.length;\r\n        if (len === 0)\r\n            return new EmptyMask();\r\n        if (len === 1)\r\n            return new SingletonMask(indices[0]);\r\n        var max = 0;\r\n        for (var _i = 0, _a = indices; _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            if (i > max)\r\n                max = i;\r\n        }\r\n        if (len === max)\r\n            return new AllMask(len);\r\n        var f = len / max;\r\n        if (f < 1 / 12) {\r\n            var set = new Set();\r\n            for (var _b = 0, _c = indices; _b < _c.length; _b++) {\r\n                var i = _c[_b];\r\n                set.add(i);\r\n            }\r\n            return new SetMask(set);\r\n        }\r\n        var mask = new Int8Array(max + 1);\r\n        for (var _d = 0, _e = indices; _d < _e.length; _d++) {\r\n            var i = _e[_d];\r\n            mask[i] = 1;\r\n        }\r\n        return new BitMask(mask, indices.length);\r\n    }\r\n    Mask.ofUniqueIndices = ofUniqueIndices;\r\n    function ofMask(mask, size) {\r\n        return new BitMask(mask, size);\r\n    }\r\n    Mask.ofMask = ofMask;\r\n    function hasAny(mask, xs) {\r\n        for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {\r\n            var x = xs_1[_i];\r\n            if (mask.has(x))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Mask.hasAny = hasAny;\r\n    function complement(mask, against) {\r\n        var count = 0;\r\n        var max = 0;\r\n        against.forEach(function (i) {\r\n            if (!mask.has(i)) {\r\n                count++;\r\n                if (i > max)\r\n                    max = i;\r\n            }\r\n        });\r\n        if (count / max < 1 / 12) {\r\n            // set based\r\n            var set_1 = new Set();\r\n            against.forEach(function (i) {\r\n                if (!mask.has(i)) {\r\n                    set_1.add(i);\r\n                }\r\n            });\r\n            return ofSet(set_1);\r\n        }\r\n        else {\r\n            // mask based\r\n            var target_1 = new Uint8Array(max + 1);\r\n            against.forEach(function (i) {\r\n                if (!mask.has(i)) {\r\n                    target_1[i] = 1;\r\n                }\r\n            });\r\n            return ofMask(target_1, count);\r\n        }\r\n    }\r\n    Mask.complement = complement;\r\n})(Mask || (Mask = {}));\r\nexport { Mask };\r\n//# sourceMappingURL=mask.js.map"]},"metadata":{},"sourceType":"module"}