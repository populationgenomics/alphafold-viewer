{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Unit, StructureElement, Bond } from '../../../mol-model/structure';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { arrayEqual } from '../../../mol-util';\nimport { createLinkCylinderImpostors, createLinkCylinderMesh } from './util/link';\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsCylindersParams, UnitsCylindersVisual } from '../units-visual';\nimport { BondType } from '../../../mol-model/structure/model/types';\nimport { BondCylinderParams, BondIterator, eachIntraBond, getIntraBondLoci, ignoreBondType, makeIntraBondIgnoreTest } from './util/bond';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { IntAdjacencyGraph } from '../../../mol-math/graph';\nimport { Cylinders } from '../../../mol-geo/geometry/cylinders/cylinders';\nimport { SortedArray } from '../../../mol-data/int';\nimport { arrayIntersectionSize } from '../../../mol-util/array'; // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar isBondType = BondType.is;\n\nfunction getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props) {\n  var elements = unit.elements;\n  var bonds = unit.bonds;\n  var edgeCount = bonds.edgeCount,\n      a = bonds.a,\n      b = bonds.b,\n      edgeProps = bonds.edgeProps,\n      offset = bonds.offset;\n  var _order = edgeProps.order,\n      _flags = edgeProps.flags;\n  var sizeFactor = props.sizeFactor,\n      sizeAspectRatio = props.sizeAspectRatio,\n      adjustCylinderLength = props.adjustCylinderLength,\n      aromaticBonds = props.aromaticBonds,\n      includeTypes = props.includeTypes,\n      excludeTypes = props.excludeTypes,\n      multipleBonds = props.multipleBonds;\n  var mbOff = multipleBonds === 'off';\n  var mbSymmetric = multipleBonds === 'symmetric';\n  var include = BondType.fromNames(includeTypes);\n  var exclude = BondType.fromNames(excludeTypes);\n  var ignoreComputedAromatic = ignoreBondType(include, exclude, 32\n  /* Computed */\n  );\n  var vRef = Vec3(),\n      delta = Vec3();\n  var pos = unit.conformation.invariantPosition;\n  var stub;\n  var locE = StructureElement.Location.create(structure, unit);\n  var locB = Bond.Location(structure, unit, undefined, structure, unit, undefined);\n  var child = structure.child;\n\n  if (props.includeParent && child) {\n    var childUnit_1 = child.unitMap.get(unit.id);\n    if (!childUnit_1) throw new Error('expected childUnit to exist');\n\n    stub = function (edgeIndex) {\n      var eA = elements[a[edgeIndex]];\n      var eB = elements[b[edgeIndex]];\n      return SortedArray.has(childUnit_1.elements, eA) && !SortedArray.has(childUnit_1.elements, eB);\n    };\n  }\n\n  var radius = function (edgeIndex) {\n    locB.aIndex = a[edgeIndex];\n    locB.bIndex = b[edgeIndex];\n    return theme.size.size(locB) * sizeFactor;\n  };\n\n  var radiusA = function (edgeIndex) {\n    locE.element = elements[a[edgeIndex]];\n    return theme.size.size(locE) * sizeFactor;\n  };\n\n  var radiusB = function (edgeIndex) {\n    locE.element = elements[b[edgeIndex]];\n    return theme.size.size(locE) * sizeFactor;\n  };\n\n  var _a = unit.rings,\n      elementRingIndices = _a.elementRingIndices,\n      elementAromaticRingIndices = _a.elementAromaticRingIndices;\n  return {\n    linkCount: edgeCount * 2,\n    referencePosition: function (edgeIndex) {\n      var _a, _b;\n\n      var aI = a[edgeIndex],\n          bI = b[edgeIndex];\n      if (aI > bI) _a = [bI, aI], aI = _a[0], bI = _a[1];\n      if (offset[aI + 1] - offset[aI] === 1) _b = [bI, aI], aI = _b[0], bI = _b[1];\n      var aR = elementRingIndices.get(aI);\n      var maxSize = 0;\n\n      for (var i = offset[aI], il = offset[aI + 1]; i < il; ++i) {\n        var _bI = b[i];\n\n        if (_bI !== bI && _bI !== aI) {\n          if (aR) {\n            var _bR = elementRingIndices.get(_bI);\n\n            if (!_bR) continue;\n            var size = arrayIntersectionSize(aR, _bR);\n\n            if (size > maxSize) {\n              maxSize = size;\n              pos(elements[_bI], vRef);\n            }\n          } else {\n            return pos(elements[_bI], vRef);\n          }\n        }\n      }\n\n      return maxSize > 0 ? vRef : null;\n    },\n    position: function (posA, posB, edgeIndex) {\n      pos(elements[a[edgeIndex]], posA);\n      pos(elements[b[edgeIndex]], posB);\n\n      if (adjustCylinderLength) {\n        var rA = radiusA(edgeIndex),\n            rB = radiusB(edgeIndex);\n        var r = Math.min(rA, rB) * sizeAspectRatio;\n        var oA = Math.sqrt(Math.max(0, rA * rA - r * r)) - 0.05;\n        var oB = Math.sqrt(Math.max(0, rB * rB - r * r)) - 0.05;\n        if (oA <= 0.01 && oB <= 0.01) return;\n        Vec3.normalize(delta, Vec3.sub(delta, posB, posA));\n        Vec3.scaleAndAdd(posA, posA, delta, oA);\n        Vec3.scaleAndAdd(posB, posB, delta, -oB);\n      }\n    },\n    style: function (edgeIndex) {\n      var o = _order[edgeIndex];\n      var f = _flags[edgeIndex];\n\n      if (isBondType(f, 2\n      /* MetallicCoordination */\n      ) || isBondType(f, 4\n      /* HydrogenBond */\n      )) {\n        // show metallic coordinations and hydrogen bonds with dashed cylinders\n        return 1\n        /* Dashed */\n        ;\n      } else if (o === 3) {\n        return mbOff ? 0\n        /* Solid */\n        : mbSymmetric ? 4\n        /* Triple */\n        : 5\n        /* OffsetTriple */\n        ;\n      } else if (aromaticBonds) {\n        var aI = a[edgeIndex],\n            bI = b[edgeIndex];\n        var aR = elementAromaticRingIndices.get(aI);\n        var bR = elementAromaticRingIndices.get(bI);\n        var arCount = aR && bR ? arrayIntersectionSize(aR, bR) : 0;\n\n        if (isBondType(f, 16\n        /* Aromatic */\n        ) || arCount && !ignoreComputedAromatic) {\n          if (arCount === 2) {\n            return 8\n            /* MirroredAromatic */\n            ;\n          } else {\n            return 7\n            /* Aromatic */\n            ;\n          }\n        }\n      }\n\n      return o !== 2 || mbOff ? 0\n      /* Solid */\n      : mbSymmetric ? 2\n      /* Double */\n      : 3\n      /* OffsetDouble */\n      ;\n    },\n    radius: function (edgeIndex) {\n      return radius(edgeIndex) * sizeAspectRatio;\n    },\n    ignore: makeIntraBondIgnoreTest(structure, unit, props),\n    stub: stub\n  };\n}\n\nfunction createIntraUnitBondCylinderImpostors(ctx, unit, structure, theme, props, cylinders) {\n  if (!Unit.isAtomic(unit)) return Cylinders.createEmpty(cylinders);\n  if (!unit.bonds.edgeCount) return Cylinders.createEmpty(cylinders);\n  var child = structure.child;\n  var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n  if (child && !childUnit) return Cylinders.createEmpty(cylinders);\n  var builderProps = getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props);\n  var c = createLinkCylinderImpostors(ctx, builderProps, props, cylinders);\n  var sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * props.sizeFactor);\n  c.setBoundingSphere(sphere);\n  return c;\n}\n\nfunction createIntraUnitBondCylinderMesh(ctx, unit, structure, theme, props, mesh) {\n  if (!Unit.isAtomic(unit)) return Mesh.createEmpty(mesh);\n  if (!unit.bonds.edgeCount) return Mesh.createEmpty(mesh);\n  var child = structure.child;\n  var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n  if (child && !childUnit) return Mesh.createEmpty(mesh);\n  var builderProps = getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props);\n  var m = createLinkCylinderMesh(ctx, builderProps, props, mesh);\n  var sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var IntraUnitBondCylinderParams = __assign(__assign(__assign(__assign({}, UnitsMeshParams), UnitsCylindersParams), BondCylinderParams), {\n  sizeFactor: PD.Numeric(0.3, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  sizeAspectRatio: PD.Numeric(2 / 3, {\n    min: 0,\n    max: 3,\n    step: 0.01\n  }),\n  tryUseImpostor: PD.Boolean(true),\n  includeParent: PD.Boolean(false)\n});\nexport function IntraUnitBondCylinderVisual(materialId, structure, props, webgl) {\n  return props.tryUseImpostor && webgl && webgl.extensions.fragDepth ? IntraUnitBondCylinderImpostorVisual(materialId) : IntraUnitBondCylinderMeshVisual(materialId);\n}\nexport function IntraUnitBondCylinderImpostorVisual(materialId) {\n  return UnitsCylindersVisual({\n    defaultProps: PD.getDefaultValues(IntraUnitBondCylinderParams),\n    createGeometry: createIntraUnitBondCylinderImpostors,\n    createLocationIterator: BondIterator.fromGroup,\n    getLoci: getIntraBondLoci,\n    eachLocation: eachIntraBond,\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      state.createGeometry = newProps.sizeAspectRatio !== currentProps.sizeAspectRatio || newProps.linkScale !== currentProps.linkScale || newProps.linkSpacing !== currentProps.linkSpacing || newProps.ignoreHydrogens !== currentProps.ignoreHydrogens || newProps.linkCap !== currentProps.linkCap || newProps.dashCount !== currentProps.dashCount || newProps.dashScale !== currentProps.dashScale || newProps.dashCap !== currentProps.dashCap || newProps.stubCap !== currentProps.stubCap || !arrayEqual(newProps.includeTypes, currentProps.includeTypes) || !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) || newProps.adjustCylinderLength !== currentProps.adjustCylinderLength || newProps.aromaticBonds !== currentProps.aromaticBonds || newProps.multipleBonds !== currentProps.multipleBonds;\n      var newUnit = newStructureGroup.group.units[0];\n      var currentUnit = currentStructureGroup.group.units[0];\n\n      if (Unit.isAtomic(newUnit) && Unit.isAtomic(currentUnit)) {\n        if (!IntAdjacencyGraph.areEqual(newUnit.bonds, currentUnit.bonds)) {\n          state.createGeometry = true;\n          state.updateTransform = true;\n          state.updateColor = true;\n          state.updateSize = true;\n        }\n      }\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return !props.tryUseImpostor || !webgl;\n    }\n  }, materialId);\n}\nexport function IntraUnitBondCylinderMeshVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(IntraUnitBondCylinderParams),\n    createGeometry: createIntraUnitBondCylinderMesh,\n    createLocationIterator: BondIterator.fromGroup,\n    getLoci: getIntraBondLoci,\n    eachLocation: eachIntraBond,\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.sizeAspectRatio !== currentProps.sizeAspectRatio || newProps.radialSegments !== currentProps.radialSegments || newProps.linkScale !== currentProps.linkScale || newProps.linkSpacing !== currentProps.linkSpacing || newProps.ignoreHydrogens !== currentProps.ignoreHydrogens || newProps.linkCap !== currentProps.linkCap || newProps.dashCount !== currentProps.dashCount || newProps.dashScale !== currentProps.dashScale || newProps.dashCap !== currentProps.dashCap || newProps.stubCap !== currentProps.stubCap || !arrayEqual(newProps.includeTypes, currentProps.includeTypes) || !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) || newProps.adjustCylinderLength !== currentProps.adjustCylinderLength || newProps.aromaticBonds !== currentProps.aromaticBonds || newProps.multipleBonds !== currentProps.multipleBonds;\n      var newUnit = newStructureGroup.group.units[0];\n      var currentUnit = currentStructureGroup.group.units[0];\n\n      if (Unit.isAtomic(newUnit) && Unit.isAtomic(currentUnit)) {\n        if (!IntAdjacencyGraph.areEqual(newUnit.bonds, currentUnit.bonds)) {\n          state.createGeometry = true;\n          state.updateTransform = true;\n          state.updateColor = true;\n          state.updateSize = true;\n        }\n      }\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return props.tryUseImpostor && !!webgl;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/bond-intra-unit-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Unit, StructureElement, Bond } from '../../../mol-model/structure';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { arrayEqual } from '../../../mol-util';\r\nimport { createLinkCylinderImpostors, createLinkCylinderMesh } from './util/link';\r\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsCylindersParams, UnitsCylindersVisual } from '../units-visual';\r\nimport { BondType } from '../../../mol-model/structure/model/types';\r\nimport { BondCylinderParams, BondIterator, eachIntraBond, getIntraBondLoci, ignoreBondType, makeIntraBondIgnoreTest } from './util/bond';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { IntAdjacencyGraph } from '../../../mol-math/graph';\r\nimport { Cylinders } from '../../../mol-geo/geometry/cylinders/cylinders';\r\nimport { SortedArray } from '../../../mol-data/int';\r\nimport { arrayIntersectionSize } from '../../../mol-util/array';\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar isBondType = BondType.is;\r\nfunction getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props) {\r\n    var elements = unit.elements;\r\n    var bonds = unit.bonds;\r\n    var edgeCount = bonds.edgeCount, a = bonds.a, b = bonds.b, edgeProps = bonds.edgeProps, offset = bonds.offset;\r\n    var _order = edgeProps.order, _flags = edgeProps.flags;\r\n    var sizeFactor = props.sizeFactor, sizeAspectRatio = props.sizeAspectRatio, adjustCylinderLength = props.adjustCylinderLength, aromaticBonds = props.aromaticBonds, includeTypes = props.includeTypes, excludeTypes = props.excludeTypes, multipleBonds = props.multipleBonds;\r\n    var mbOff = multipleBonds === 'off';\r\n    var mbSymmetric = multipleBonds === 'symmetric';\r\n    var include = BondType.fromNames(includeTypes);\r\n    var exclude = BondType.fromNames(excludeTypes);\r\n    var ignoreComputedAromatic = ignoreBondType(include, exclude, 32 /* Computed */);\r\n    var vRef = Vec3(), delta = Vec3();\r\n    var pos = unit.conformation.invariantPosition;\r\n    var stub;\r\n    var locE = StructureElement.Location.create(structure, unit);\r\n    var locB = Bond.Location(structure, unit, undefined, structure, unit, undefined);\r\n    var child = structure.child;\r\n    if (props.includeParent && child) {\r\n        var childUnit_1 = child.unitMap.get(unit.id);\r\n        if (!childUnit_1)\r\n            throw new Error('expected childUnit to exist');\r\n        stub = function (edgeIndex) {\r\n            var eA = elements[a[edgeIndex]];\r\n            var eB = elements[b[edgeIndex]];\r\n            return SortedArray.has(childUnit_1.elements, eA) && !SortedArray.has(childUnit_1.elements, eB);\r\n        };\r\n    }\r\n    var radius = function (edgeIndex) {\r\n        locB.aIndex = a[edgeIndex];\r\n        locB.bIndex = b[edgeIndex];\r\n        return theme.size.size(locB) * sizeFactor;\r\n    };\r\n    var radiusA = function (edgeIndex) {\r\n        locE.element = elements[a[edgeIndex]];\r\n        return theme.size.size(locE) * sizeFactor;\r\n    };\r\n    var radiusB = function (edgeIndex) {\r\n        locE.element = elements[b[edgeIndex]];\r\n        return theme.size.size(locE) * sizeFactor;\r\n    };\r\n    var _a = unit.rings, elementRingIndices = _a.elementRingIndices, elementAromaticRingIndices = _a.elementAromaticRingIndices;\r\n    return {\r\n        linkCount: edgeCount * 2,\r\n        referencePosition: function (edgeIndex) {\r\n            var _a, _b;\r\n            var aI = a[edgeIndex], bI = b[edgeIndex];\r\n            if (aI > bI)\r\n                _a = [bI, aI], aI = _a[0], bI = _a[1];\r\n            if (offset[aI + 1] - offset[aI] === 1)\r\n                _b = [bI, aI], aI = _b[0], bI = _b[1];\r\n            var aR = elementRingIndices.get(aI);\r\n            var maxSize = 0;\r\n            for (var i = offset[aI], il = offset[aI + 1]; i < il; ++i) {\r\n                var _bI = b[i];\r\n                if (_bI !== bI && _bI !== aI) {\r\n                    if (aR) {\r\n                        var _bR = elementRingIndices.get(_bI);\r\n                        if (!_bR)\r\n                            continue;\r\n                        var size = arrayIntersectionSize(aR, _bR);\r\n                        if (size > maxSize) {\r\n                            maxSize = size;\r\n                            pos(elements[_bI], vRef);\r\n                        }\r\n                    }\r\n                    else {\r\n                        return pos(elements[_bI], vRef);\r\n                    }\r\n                }\r\n            }\r\n            return maxSize > 0 ? vRef : null;\r\n        },\r\n        position: function (posA, posB, edgeIndex) {\r\n            pos(elements[a[edgeIndex]], posA);\r\n            pos(elements[b[edgeIndex]], posB);\r\n            if (adjustCylinderLength) {\r\n                var rA = radiusA(edgeIndex), rB = radiusB(edgeIndex);\r\n                var r = Math.min(rA, rB) * sizeAspectRatio;\r\n                var oA = Math.sqrt(Math.max(0, rA * rA - r * r)) - 0.05;\r\n                var oB = Math.sqrt(Math.max(0, rB * rB - r * r)) - 0.05;\r\n                if (oA <= 0.01 && oB <= 0.01)\r\n                    return;\r\n                Vec3.normalize(delta, Vec3.sub(delta, posB, posA));\r\n                Vec3.scaleAndAdd(posA, posA, delta, oA);\r\n                Vec3.scaleAndAdd(posB, posB, delta, -oB);\r\n            }\r\n        },\r\n        style: function (edgeIndex) {\r\n            var o = _order[edgeIndex];\r\n            var f = _flags[edgeIndex];\r\n            if (isBondType(f, 2 /* MetallicCoordination */) || isBondType(f, 4 /* HydrogenBond */)) {\r\n                // show metallic coordinations and hydrogen bonds with dashed cylinders\r\n                return 1 /* Dashed */;\r\n            }\r\n            else if (o === 3) {\r\n                return mbOff ? 0 /* Solid */ :\r\n                    mbSymmetric ? 4 /* Triple */ :\r\n                        5 /* OffsetTriple */;\r\n            }\r\n            else if (aromaticBonds) {\r\n                var aI = a[edgeIndex], bI = b[edgeIndex];\r\n                var aR = elementAromaticRingIndices.get(aI);\r\n                var bR = elementAromaticRingIndices.get(bI);\r\n                var arCount = (aR && bR) ? arrayIntersectionSize(aR, bR) : 0;\r\n                if (isBondType(f, 16 /* Aromatic */) || (arCount && !ignoreComputedAromatic)) {\r\n                    if (arCount === 2) {\r\n                        return 8 /* MirroredAromatic */;\r\n                    }\r\n                    else {\r\n                        return 7 /* Aromatic */;\r\n                    }\r\n                }\r\n            }\r\n            return (o !== 2 || mbOff) ? 0 /* Solid */ :\r\n                mbSymmetric ? 2 /* Double */ :\r\n                    3 /* OffsetDouble */;\r\n        },\r\n        radius: function (edgeIndex) {\r\n            return radius(edgeIndex) * sizeAspectRatio;\r\n        },\r\n        ignore: makeIntraBondIgnoreTest(structure, unit, props),\r\n        stub: stub\r\n    };\r\n}\r\nfunction createIntraUnitBondCylinderImpostors(ctx, unit, structure, theme, props, cylinders) {\r\n    if (!Unit.isAtomic(unit))\r\n        return Cylinders.createEmpty(cylinders);\r\n    if (!unit.bonds.edgeCount)\r\n        return Cylinders.createEmpty(cylinders);\r\n    var child = structure.child;\r\n    var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n    if (child && !childUnit)\r\n        return Cylinders.createEmpty(cylinders);\r\n    var builderProps = getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props);\r\n    var c = createLinkCylinderImpostors(ctx, builderProps, props, cylinders);\r\n    var sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * props.sizeFactor);\r\n    c.setBoundingSphere(sphere);\r\n    return c;\r\n}\r\nfunction createIntraUnitBondCylinderMesh(ctx, unit, structure, theme, props, mesh) {\r\n    if (!Unit.isAtomic(unit))\r\n        return Mesh.createEmpty(mesh);\r\n    if (!unit.bonds.edgeCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var child = structure.child;\r\n    var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n    if (child && !childUnit)\r\n        return Mesh.createEmpty(mesh);\r\n    var builderProps = getIntraUnitBondCylinderBuilderProps(unit, structure, theme, props);\r\n    var m = createLinkCylinderMesh(ctx, builderProps, props, mesh);\r\n    var sphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var IntraUnitBondCylinderParams = __assign(__assign(__assign(__assign({}, UnitsMeshParams), UnitsCylindersParams), BondCylinderParams), { sizeFactor: PD.Numeric(0.3, { min: 0, max: 10, step: 0.01 }), sizeAspectRatio: PD.Numeric(2 / 3, { min: 0, max: 3, step: 0.01 }), tryUseImpostor: PD.Boolean(true), includeParent: PD.Boolean(false) });\r\nexport function IntraUnitBondCylinderVisual(materialId, structure, props, webgl) {\r\n    return props.tryUseImpostor && webgl && webgl.extensions.fragDepth\r\n        ? IntraUnitBondCylinderImpostorVisual(materialId)\r\n        : IntraUnitBondCylinderMeshVisual(materialId);\r\n}\r\nexport function IntraUnitBondCylinderImpostorVisual(materialId) {\r\n    return UnitsCylindersVisual({\r\n        defaultProps: PD.getDefaultValues(IntraUnitBondCylinderParams),\r\n        createGeometry: createIntraUnitBondCylinderImpostors,\r\n        createLocationIterator: BondIterator.fromGroup,\r\n        getLoci: getIntraBondLoci,\r\n        eachLocation: eachIntraBond,\r\n        setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            state.createGeometry = (newProps.sizeAspectRatio !== currentProps.sizeAspectRatio ||\r\n                newProps.linkScale !== currentProps.linkScale ||\r\n                newProps.linkSpacing !== currentProps.linkSpacing ||\r\n                newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||\r\n                newProps.linkCap !== currentProps.linkCap ||\r\n                newProps.dashCount !== currentProps.dashCount ||\r\n                newProps.dashScale !== currentProps.dashScale ||\r\n                newProps.dashCap !== currentProps.dashCap ||\r\n                newProps.stubCap !== currentProps.stubCap ||\r\n                !arrayEqual(newProps.includeTypes, currentProps.includeTypes) ||\r\n                !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) ||\r\n                newProps.adjustCylinderLength !== currentProps.adjustCylinderLength ||\r\n                newProps.aromaticBonds !== currentProps.aromaticBonds ||\r\n                newProps.multipleBonds !== currentProps.multipleBonds);\r\n            var newUnit = newStructureGroup.group.units[0];\r\n            var currentUnit = currentStructureGroup.group.units[0];\r\n            if (Unit.isAtomic(newUnit) && Unit.isAtomic(currentUnit)) {\r\n                if (!IntAdjacencyGraph.areEqual(newUnit.bonds, currentUnit.bonds)) {\r\n                    state.createGeometry = true;\r\n                    state.updateTransform = true;\r\n                    state.updateColor = true;\r\n                    state.updateSize = true;\r\n                }\r\n            }\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return !props.tryUseImpostor || !webgl;\r\n        }\r\n    }, materialId);\r\n}\r\nexport function IntraUnitBondCylinderMeshVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(IntraUnitBondCylinderParams),\r\n        createGeometry: createIntraUnitBondCylinderMesh,\r\n        createLocationIterator: BondIterator.fromGroup,\r\n        getLoci: getIntraBondLoci,\r\n        eachLocation: eachIntraBond,\r\n        setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.sizeAspectRatio !== currentProps.sizeAspectRatio ||\r\n                newProps.radialSegments !== currentProps.radialSegments ||\r\n                newProps.linkScale !== currentProps.linkScale ||\r\n                newProps.linkSpacing !== currentProps.linkSpacing ||\r\n                newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||\r\n                newProps.linkCap !== currentProps.linkCap ||\r\n                newProps.dashCount !== currentProps.dashCount ||\r\n                newProps.dashScale !== currentProps.dashScale ||\r\n                newProps.dashCap !== currentProps.dashCap ||\r\n                newProps.stubCap !== currentProps.stubCap ||\r\n                !arrayEqual(newProps.includeTypes, currentProps.includeTypes) ||\r\n                !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) ||\r\n                newProps.adjustCylinderLength !== currentProps.adjustCylinderLength ||\r\n                newProps.aromaticBonds !== currentProps.aromaticBonds ||\r\n                newProps.multipleBonds !== currentProps.multipleBonds);\r\n            var newUnit = newStructureGroup.group.units[0];\r\n            var currentUnit = currentStructureGroup.group.units[0];\r\n            if (Unit.isAtomic(newUnit) && Unit.isAtomic(currentUnit)) {\r\n                if (!IntAdjacencyGraph.areEqual(newUnit.bonds, currentUnit.bonds)) {\r\n                    state.createGeometry = true;\r\n                    state.updateTransform = true;\r\n                    state.updateColor = true;\r\n                    state.updateSize = true;\r\n                }\r\n            }\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return props.tryUseImpostor && !!webgl;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=bond-intra-unit-cylinder.js.map"]},"metadata":{},"sourceType":"module"}