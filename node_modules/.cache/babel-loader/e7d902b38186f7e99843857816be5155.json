{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\nimport { Wedge } from '../../../mol-geo/primitive/wedge';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { createCurveSegmentState, PolymerTraceIterator, interpolateCurveSegment, PolymerLocationIterator, getPolymerElementLoci, eachPolymerElement } from './util/polymer';\nimport { isNucleic, SecondaryStructureType } from '../../../mol-model/structure/model/types';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { Sphere3D } from '../../../mol-math/geometry';\nvar t = Mat4.identity();\nvar sVec = Vec3.zero();\nvar n0 = Vec3.zero();\nvar n1 = Vec3.zero();\nvar upVec = Vec3.zero();\nvar depthFactor = 4;\nvar widthFactor = 4;\nvar heightFactor = 6;\nvar wedge = Wedge();\nexport var PolymerDirectionWedgeParams = {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  })\n};\nexport var DefaultPolymerDirectionWedgeProps = PD.getDefaultValues(PolymerDirectionWedgeParams);\n\nfunction createPolymerDirectionWedgeMesh(ctx, unit, structure, theme, props, mesh) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Mesh.createEmpty(mesh);\n  var sizeFactor = props.sizeFactor;\n  var vertexCount = polymerElementCount * 24;\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 10, mesh);\n  var linearSegments = 1;\n  var state = createCurveSegmentState(linearSegments);\n  var normalVectors = state.normalVectors,\n      binormalVectors = state.binormalVectors;\n  var i = 0;\n  var polymerTraceIt = PolymerTraceIterator(unit, structure);\n\n  while (polymerTraceIt.hasNext) {\n    var v = polymerTraceIt.move();\n    builderState.currentGroup = i;\n    var isNucleicType = isNucleic(v.moleculeType);\n    var isSheet = SecondaryStructureType.is(v.secStrucType, 4\n    /* Beta */\n    );\n    var tension = isNucleicType || isSheet ? 0.5 : 0.9;\n    var shift = isNucleicType ? 0.3 : 0.5;\n    interpolateCurveSegment(state, v, tension, shift);\n\n    if (isSheet && !v.secStrucLast || !isSheet) {\n      var size = theme.size.size(v.center) * sizeFactor;\n      var depth = depthFactor * size;\n      var width = widthFactor * size;\n      var height = heightFactor * size;\n      var vectors = isNucleicType ? binormalVectors : normalVectors;\n      Vec3.fromArray(n0, vectors, 0);\n      Vec3.fromArray(n1, vectors, 3);\n      Vec3.normalize(upVec, Vec3.add(upVec, n0, n1));\n      Mat4.targetTo(t, v.p3, v.p1, upVec);\n      Mat4.mul(t, t, Mat4.rotY90Z180);\n      Mat4.scale(t, t, Vec3.set(sVec, height, width, depth));\n      Mat4.setTranslation(t, v.p2);\n      MeshBuilder.addPrimitive(builderState, t, wedge);\n    }\n\n    ++i;\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var PolymerDirectionParams = __assign(__assign({}, UnitsMeshParams), PolymerDirectionWedgeParams);\nexport function PolymerDirectionVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(PolymerDirectionParams),\n    createGeometry: createPolymerDirectionWedgeMesh,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/polymer-direction-wedge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { Wedge } from '../../../mol-geo/primitive/wedge';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { createCurveSegmentState, PolymerTraceIterator, interpolateCurveSegment, PolymerLocationIterator, getPolymerElementLoci, eachPolymerElement } from './util/polymer';\r\nimport { isNucleic, SecondaryStructureType } from '../../../mol-model/structure/model/types';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nvar t = Mat4.identity();\r\nvar sVec = Vec3.zero();\r\nvar n0 = Vec3.zero();\r\nvar n1 = Vec3.zero();\r\nvar upVec = Vec3.zero();\r\nvar depthFactor = 4;\r\nvar widthFactor = 4;\r\nvar heightFactor = 6;\r\nvar wedge = Wedge();\r\nexport var PolymerDirectionWedgeParams = {\r\n    sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }),\r\n};\r\nexport var DefaultPolymerDirectionWedgeProps = PD.getDefaultValues(PolymerDirectionWedgeParams);\r\nfunction createPolymerDirectionWedgeMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var sizeFactor = props.sizeFactor;\r\n    var vertexCount = polymerElementCount * 24;\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 10, mesh);\r\n    var linearSegments = 1;\r\n    var state = createCurveSegmentState(linearSegments);\r\n    var normalVectors = state.normalVectors, binormalVectors = state.binormalVectors;\r\n    var i = 0;\r\n    var polymerTraceIt = PolymerTraceIterator(unit, structure);\r\n    while (polymerTraceIt.hasNext) {\r\n        var v = polymerTraceIt.move();\r\n        builderState.currentGroup = i;\r\n        var isNucleicType = isNucleic(v.moleculeType);\r\n        var isSheet = SecondaryStructureType.is(v.secStrucType, 4 /* Beta */);\r\n        var tension = (isNucleicType || isSheet) ? 0.5 : 0.9;\r\n        var shift = isNucleicType ? 0.3 : 0.5;\r\n        interpolateCurveSegment(state, v, tension, shift);\r\n        if ((isSheet && !v.secStrucLast) || !isSheet) {\r\n            var size = theme.size.size(v.center) * sizeFactor;\r\n            var depth = depthFactor * size;\r\n            var width = widthFactor * size;\r\n            var height = heightFactor * size;\r\n            var vectors = isNucleicType ? binormalVectors : normalVectors;\r\n            Vec3.fromArray(n0, vectors, 0);\r\n            Vec3.fromArray(n1, vectors, 3);\r\n            Vec3.normalize(upVec, Vec3.add(upVec, n0, n1));\r\n            Mat4.targetTo(t, v.p3, v.p1, upVec);\r\n            Mat4.mul(t, t, Mat4.rotY90Z180);\r\n            Mat4.scale(t, t, Vec3.set(sVec, height, width, depth));\r\n            Mat4.setTranslation(t, v.p2);\r\n            MeshBuilder.addPrimitive(builderState, t, wedge);\r\n        }\r\n        ++i;\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var PolymerDirectionParams = __assign(__assign({}, UnitsMeshParams), PolymerDirectionWedgeParams);\r\nexport function PolymerDirectionVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerDirectionParams),\r\n        createGeometry: createPolymerDirectionWedgeMesh,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor);\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=polymer-direction-wedge.js.map"]},"metadata":{},"sourceType":"module"}