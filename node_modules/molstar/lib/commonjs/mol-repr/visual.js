"use strict";
/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Visual = void 0;
var loci_1 = require("../mol-model/loci");
var marker_action_1 = require("../mol-util/marker-action");
var linear_algebra_1 = require("../mol-math/linear-algebra");
var transform_data_1 = require("../mol-geo/geometry/transform-data");
var util_1 = require("../mol-gl/renderable/util");
var mol_util_1 = require("../mol-util");
var overpaint_data_1 = require("../mol-geo/geometry/overpaint-data");
var int_1 = require("../mol-data/int");
var transparency_data_1 = require("../mol-geo/geometry/transparency-data");
var clipping_data_1 = require("../mol-geo/geometry/clipping-data");
var marker_data_1 = require("../mol-geo/geometry/marker-data");
var Visual;
(function (Visual) {
    function setVisibility(renderObject, visible) {
        if (renderObject)
            renderObject.state.visible = visible;
    }
    Visual.setVisibility = setVisibility;
    function setAlphaFactor(renderObject, alphaFactor) {
        if (renderObject)
            renderObject.state.alphaFactor = alphaFactor;
    }
    Visual.setAlphaFactor = setAlphaFactor;
    function setPickable(renderObject, pickable) {
        if (renderObject)
            renderObject.state.pickable = pickable;
    }
    Visual.setPickable = setPickable;
    function setColorOnly(renderObject, colorOnly) {
        if (renderObject)
            renderObject.state.colorOnly = colorOnly;
    }
    Visual.setColorOnly = setColorOnly;
    function mark(renderObject, loci, action, lociApply, previous) {
        if (!renderObject || (0, loci_1.isEmptyLoci)(loci))
            return false;
        var _a = renderObject.values, tMarker = _a.tMarker, dMarkerType = _a.dMarkerType, uMarker = _a.uMarker, markerAverage = _a.markerAverage, markerStatus = _a.markerStatus, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;
        var count = uGroupCount.ref.value * instanceCount.ref.value;
        var array = tMarker.ref.value.array;
        var currentStatus = markerStatus.ref.value;
        if (!(0, loci_1.isEveryLoci)(loci)) {
            var intervalSize_1 = 0;
            lociApply(loci, function (interval) {
                intervalSize_1 += int_1.Interval.size(interval);
                return true;
            }, true);
            if (intervalSize_1 === 0)
                return false;
            if (intervalSize_1 === count)
                loci = loci_1.EveryLoci;
        }
        var changed = false;
        var average = -1;
        var status = -1;
        if ((0, loci_1.isEveryLoci)(loci)) {
            var info = (0, marker_action_1.getMarkerInfo)(action, currentStatus);
            if (info.status !== -1) {
                changed = currentStatus !== info.status;
                if (changed)
                    (0, marker_action_1.setMarkerValue)(array, info.status, count);
            }
            else {
                changed = (0, marker_action_1.applyMarkerAction)(array, int_1.Interval.ofLength(count), action);
            }
            average = info.average;
            status = info.status;
        }
        else {
            changed = lociApply(loci, function (interval) { return (0, marker_action_1.applyMarkerAction)(array, interval, action); }, true);
            if (changed) {
                average = (0, marker_action_1.getPartialMarkerAverage)(action, currentStatus);
                if (previous && previous.status !== -1 && average === -1 &&
                    marker_action_1.MarkerActions.isReverse(previous.action, action) &&
                    loci_1.Loci.areEqual(loci, previous.loci)) {
                    status = previous.status;
                    average = status === 0 ? 0 : 0.5;
                }
            }
        }
        if (changed) {
            if (average === -1) {
                average = (0, marker_data_1.getMarkersAverage)(array, count);
                if (average === 0)
                    status = 0;
            }
            if (previous) {
                previous.action = action;
                previous.loci = loci;
                previous.status = currentStatus;
            }
            mol_util_1.ValueCell.updateIfChanged(uMarker, status);
            if (status === -1)
                mol_util_1.ValueCell.update(tMarker, tMarker.ref.value);
            mol_util_1.ValueCell.updateIfChanged(dMarkerType, status === -1 ? 'groupInstance' : 'uniform');
            mol_util_1.ValueCell.updateIfChanged(markerAverage, average);
            mol_util_1.ValueCell.updateIfChanged(markerStatus, status);
        }
        return changed;
    }
    Visual.mark = mark;
    function setOverpaint(renderObject, overpaint, lociApply, clear) {
        if (!renderObject)
            return;
        var _a = renderObject.values, tOverpaint = _a.tOverpaint, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;
        var count = uGroupCount.ref.value * instanceCount.ref.value;
        // ensure texture has right size
        (0, overpaint_data_1.createOverpaint)(overpaint.layers.length ? count : 0, renderObject.values);
        var array = tOverpaint.ref.value.array;
        // clear all if requested
        if (clear)
            (0, overpaint_data_1.clearOverpaint)(array, 0, count);
        var _loop_1 = function (i, il) {
            var _b = overpaint.layers[i], loci = _b.loci, color = _b.color, clear_1 = _b.clear;
            var apply = function (interval) {
                var start = int_1.Interval.start(interval);
                var end = int_1.Interval.end(interval);
                return clear_1
                    ? (0, overpaint_data_1.clearOverpaint)(array, start, end)
                    : (0, overpaint_data_1.applyOverpaintColor)(array, start, end, color);
            };
            lociApply(loci, apply, false);
        };
        for (var i = 0, il = overpaint.layers.length; i < il; ++i) {
            _loop_1(i, il);
        }
        mol_util_1.ValueCell.update(tOverpaint, tOverpaint.ref.value);
    }
    Visual.setOverpaint = setOverpaint;
    function setTransparency(renderObject, transparency, lociApply, clear) {
        if (!renderObject)
            return;
        var _a = renderObject.values, tTransparency = _a.tTransparency, transparencyAverage = _a.transparencyAverage, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;
        var count = uGroupCount.ref.value * instanceCount.ref.value;
        // ensure texture has right size and variant
        (0, transparency_data_1.createTransparency)(transparency.layers.length ? count : 0, renderObject.values);
        var array = tTransparency.ref.value.array;
        // clear if requested
        if (clear)
            (0, transparency_data_1.clearTransparency)(array, 0, count);
        var _loop_2 = function (i, il) {
            var _b = transparency.layers[i], loci = _b.loci, value = _b.value;
            var apply = function (interval) {
                var start = int_1.Interval.start(interval);
                var end = int_1.Interval.end(interval);
                return (0, transparency_data_1.applyTransparencyValue)(array, start, end, value);
            };
            lociApply(loci, apply, false);
        };
        for (var i = 0, il = transparency.layers.length; i < il; ++i) {
            _loop_2(i, il);
        }
        mol_util_1.ValueCell.update(tTransparency, tTransparency.ref.value);
        mol_util_1.ValueCell.updateIfChanged(transparencyAverage, (0, transparency_data_1.getTransparencyAverage)(array, count));
    }
    Visual.setTransparency = setTransparency;
    function setClipping(renderObject, clipping, lociApply, clear) {
        if (!renderObject)
            return;
        var _a = renderObject.values, tClipping = _a.tClipping, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;
        var count = uGroupCount.ref.value * instanceCount.ref.value;
        // ensure texture has right size
        (0, clipping_data_1.createClipping)(clipping.layers.length ? count : 0, renderObject.values);
        var array = tClipping.ref.value.array;
        // clear if requested
        if (clear)
            (0, clipping_data_1.clearClipping)(array, 0, count);
        var _loop_3 = function (i, il) {
            var _b = clipping.layers[i], loci = _b.loci, groups = _b.groups;
            var apply = function (interval) {
                var start = int_1.Interval.start(interval);
                var end = int_1.Interval.end(interval);
                return (0, clipping_data_1.applyClippingGroups)(array, start, end, groups);
            };
            lociApply(loci, apply, false);
        };
        for (var i = 0, il = clipping.layers.length; i < il; ++i) {
            _loop_3(i, il);
        }
        mol_util_1.ValueCell.update(tClipping, tClipping.ref.value);
    }
    Visual.setClipping = setClipping;
    function setTransform(renderObject, transform, instanceTransforms) {
        if (!renderObject || (!transform && !instanceTransforms))
            return;
        var values = renderObject.values;
        if (transform) {
            linear_algebra_1.Mat4.copy(values.matrix.ref.value, transform);
            mol_util_1.ValueCell.update(values.matrix, values.matrix.ref.value);
        }
        if (instanceTransforms) {
            values.extraTransform.ref.value.set(instanceTransforms);
            mol_util_1.ValueCell.update(values.extraTransform, values.extraTransform.ref.value);
        }
        else if (instanceTransforms === null) {
            (0, transform_data_1.fillIdentityTransform)(values.extraTransform.ref.value, values.instanceCount.ref.value);
            mol_util_1.ValueCell.update(values.extraTransform, values.extraTransform.ref.value);
        }
        (0, transform_data_1.updateTransformData)(values);
        var boundingSphere = (0, util_1.calculateTransformBoundingSphere)(values.invariantBoundingSphere.ref.value, values.aTransform.ref.value, values.instanceCount.ref.value);
        mol_util_1.ValueCell.update(values.boundingSphere, boundingSphere);
    }
    Visual.setTransform = setTransform;
})(Visual || (Visual = {}));
exports.Visual = Visual;
//# sourceMappingURL=visual.js.map