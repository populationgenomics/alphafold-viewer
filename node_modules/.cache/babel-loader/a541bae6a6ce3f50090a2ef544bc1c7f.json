{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { MolScriptBuilder as B } from '../../language/builder';\nexport function getPositionalArgs(args) {\n  return Object.keys(args).filter(function (k) {\n    return !isNaN(k);\n  }).map(function (k) {\n    return +k;\n  }).sort(function (a, b) {\n    return a - b;\n  }).map(function (k) {\n    return args[k];\n  });\n}\nexport function tryGetArg(args, name, defaultValue) {\n  return args && args[name] !== void 0 ? args[name] : defaultValue;\n}\nexport function pickArgs(args) {\n  var names = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    names[_i - 1] = arguments[_i];\n  }\n\n  var ret = Object.create(null);\n  var count = 0;\n\n  for (var _a = 0, _b = Object.keys(args); _a < _b.length; _a++) {\n    var k = _b[_a];\n\n    if (names.indexOf(k) >= 0) {\n      ret[k] = args[k];\n      count++;\n    }\n  }\n\n  return count ? ret : void 0;\n}\nexport function aggregate(property, fn, initial) {\n  return B.struct.atomSet.reduce({\n    initial: initial !== void 0 ? initial : property,\n    value: fn([B.struct.slot.elementSetReduce(), property])\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-script/script/mol-script/script-macro.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,gBAAgB,IAAI,CAA7B,QAAsC,wBAAtC;AAEA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAqC;AACvC,SAAO,MAAM,CAAC,IAAP,CAAY,IAAZ,EACF,MADE,CACK,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,KAAK,CAAN,CAAM,CAAN;AAAgB,GAD1B,EAEF,GAFE,CAEE,UAAA,CAAA,EAAC;AAAI,WAAA,CAAA,CAAA;AAAE,GAFT,EAGF,IAHE,CAGG,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAA,CAAC,GAAD,CAAA;AAAK,GAHlB,EAIF,GAJE,CAIE,UAAA,CAAA,EAAC;AAAI,WAAA,IAAI,CAAJ,CAAI,CAAJ;AAAO,GAJd,CAAP;AAKH;AAED,OAAM,SAAU,SAAV,CAAoB,IAApB,EAA+B,IAA/B,EAAsD,YAAtD,EAAwE;AAC1E,SAAQ,IAAI,IAAI,IAAI,CAAC,IAAD,CAAJ,KAAe,KAAK,CAA7B,GAAkC,IAAI,CAAC,IAAD,CAAtC,GAA+C,YAAtD;AACH;AAED,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAA4B;AAAE,MAAA,KAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAkB;AAAlB,IAAA,KAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAChC,MAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAAZ;AACA,MAAI,KAAK,GAAG,CAAZ;;AACA,OAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAhB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAmC;AAA9B,QAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;;AACD,QAAI,KAAK,CAAC,OAAN,CAAc,CAAd,KAAoB,CAAxB,EAA2B;AACvB,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAI,CAAC,CAAD,CAAb;AACA,MAAA,KAAK;AACR;AACJ;;AACD,SAAO,KAAK,GAAG,GAAH,GAAS,KAAK,CAA1B;AACH;AAED,OAAM,SAAU,SAAV,CAAoB,QAApB,EAAmC,EAAnC,EAA4C,OAA5C,EAAyD;AAC3D,SAAO,CAAC,CAAC,MAAF,CAAS,OAAT,CAAiB,MAAjB,CAAwB;AAC3B,IAAA,OAAO,EAAE,OAAO,KAAK,KAAK,CAAjB,GAAqB,OAArB,GAA+B,QADb;AAE3B,IAAA,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAF,CAAS,IAAT,CAAc,gBAAd,EAAD,EAAmC,QAAnC,CAAD;AAFkB,GAAxB,CAAP;AAIH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { MolScriptBuilder as B } from '../../language/builder';\r\nexport function getPositionalArgs(args) {\r\n    return Object.keys(args)\r\n        .filter(function (k) { return !isNaN(k); })\r\n        .map(function (k) { return +k; })\r\n        .sort(function (a, b) { return a - b; })\r\n        .map(function (k) { return args[k]; });\r\n}\r\nexport function tryGetArg(args, name, defaultValue) {\r\n    return (args && args[name] !== void 0) ? args[name] : defaultValue;\r\n}\r\nexport function pickArgs(args) {\r\n    var names = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        names[_i - 1] = arguments[_i];\r\n    }\r\n    var ret = Object.create(null);\r\n    var count = 0;\r\n    for (var _a = 0, _b = Object.keys(args); _a < _b.length; _a++) {\r\n        var k = _b[_a];\r\n        if (names.indexOf(k) >= 0) {\r\n            ret[k] = args[k];\r\n            count++;\r\n        }\r\n    }\r\n    return count ? ret : void 0;\r\n}\r\nexport function aggregate(property, fn, initial) {\r\n    return B.struct.atomSet.reduce({\r\n        initial: initial !== void 0 ? initial : property,\r\n        value: fn([B.struct.slot.elementSetReduce(), property])\r\n    });\r\n}\r\n//# sourceMappingURL=script-macro.js.map"]},"metadata":{},"sourceType":"module"}