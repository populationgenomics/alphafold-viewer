/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Renderable, RenderableState } from '../renderable';
import { WebGLContext } from '../webgl/context';
import { AttributeSpec, DefineSpec, Values } from './schema';
export declare const PointsSchema: {
    aGroup: AttributeSpec<"float32">;
    aPosition: AttributeSpec<"float32">;
    dPointSizeAttenuation: DefineSpec<"boolean">;
    dPointStyle: DefineSpec<"string">;
    uSize: import("./schema").UniformSpec<"f">;
    uSizeTexDim: import("./schema").UniformSpec<"v2">;
    tSize: import("./schema").TextureSpec<"image-uint8">;
    dSizeType: DefineSpec<"string">;
    uSizeFactor: import("./schema").UniformSpec<"f">;
    aInstance: AttributeSpec<"float32">;
    aTransform: AttributeSpec<"float32">;
    uAlpha: import("./schema").UniformSpec<"f">;
    uVertexCount: import("./schema").UniformSpec<"i">;
    uInstanceCount: import("./schema").UniformSpec<"i">;
    uGroupCount: import("./schema").UniformSpec<"i">;
    uInvariantBoundingSphere: import("./schema").UniformSpec<"v4">;
    drawCount: import("./schema").ValueSpec<"number">;
    instanceCount: import("./schema").ValueSpec<"number">;
    alpha: import("./schema").ValueSpec<"number">;
    matrix: import("./schema").ValueSpec<"m4">;
    transform: import("./schema").ValueSpec<"float32">;
    extraTransform: import("./schema").ValueSpec<"float32">;
    hasReflection: import("./schema").ValueSpec<"boolean">;
    boundingSphere: import("./schema").ValueSpec<"sphere">;
    invariantBoundingSphere: import("./schema").ValueSpec<"sphere">;
    dClipObjectCount: DefineSpec<"number">;
    dClipVariant: DefineSpec<"string">;
    uClippingTexDim: import("./schema").UniformSpec<"v2">;
    tClipping: import("./schema").TextureSpec<"image-uint8">;
    dClipping: DefineSpec<"boolean">;
    uTransparencyTexDim: import("./schema").UniformSpec<"v2">;
    tTransparency: import("./schema").TextureSpec<"image-uint8">;
    dTransparency: DefineSpec<"boolean">;
    transparencyAverage: import("./schema").ValueSpec<"number">;
    uOverpaintTexDim: import("./schema").UniformSpec<"v2">;
    tOverpaint: import("./schema").TextureSpec<"image-uint8">;
    dOverpaint: DefineSpec<"boolean">;
    uMarker: import("./schema").UniformSpec<"f">;
    uMarkerTexDim: import("./schema").UniformSpec<"v2">;
    tMarker: import("./schema").TextureSpec<"image-uint8">;
    dMarkerType: DefineSpec<"string">;
    markerAverage: import("./schema").ValueSpec<"number">;
    markerStatus: import("./schema").ValueSpec<"number">;
    uColor: import("./schema").UniformSpec<"v3">;
    uColorTexDim: import("./schema").UniformSpec<"v2">;
    uColorGridDim: import("./schema").UniformSpec<"v3">;
    uColorGridTransform: import("./schema").UniformSpec<"v4">;
    tColor: import("./schema").TextureSpec<"image-uint8">;
    tPalette: import("./schema").TextureSpec<"image-uint8">;
    tColorGrid: import("./schema").TextureSpec<"texture">;
    dColorType: DefineSpec<"string">;
    dUsePalette: DefineSpec<"boolean">;
};
export declare type PointsSchema = typeof PointsSchema;
export declare type PointsValues = Values<PointsSchema>;
export declare function PointsRenderable(ctx: WebGLContext, id: number, values: PointsValues, state: RenderableState, materialId: number): Renderable<PointsValues>;
