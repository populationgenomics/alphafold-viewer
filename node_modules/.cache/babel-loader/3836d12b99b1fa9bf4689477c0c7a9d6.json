{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport * as Base from './impl/ordered-set';\nimport { Interval } from './interval';\nvar OrderedSet;\n\n(function (OrderedSet) {\n  OrderedSet.Empty = Base.Empty;\n  OrderedSet.ofSingleton = Base.ofSingleton;\n  /** Create interval from range [min, max] */\n\n  OrderedSet.ofRange = Base.ofRange;\n  /** Create interval from bounds [start, end), i.e. [start, end - 1] */\n\n  OrderedSet.ofBounds = Base.ofBounds;\n  /** It is the responsibility of the caller to ensure the array is sorted and contains unique values. */\n\n  OrderedSet.ofSortedArray = Base.ofSortedArray;\n  OrderedSet.has = Base.has;\n  /** Returns the index of `x` in `set` or -1 if not found. */\n\n  OrderedSet.indexOf = Base.indexOf;\n  /** Returns the value in `set` at index `i`. */\n\n  OrderedSet.getAt = Base.getAt;\n  OrderedSet.min = Base.min;\n  OrderedSet.max = Base.max;\n  OrderedSet.start = Base.start;\n  OrderedSet.end = Base.end;\n  /** Number of elements in the OrderedSet */\n\n  OrderedSet.size = Base.size;\n  OrderedSet.hashCode = Base.hashCode;\n  OrderedSet.areEqual = Base.areEqual;\n  OrderedSet.areIntersecting = Base.areIntersecting;\n  /** Check if the 2nd argument is a subset of the 1st */\n\n  OrderedSet.isSubset = Base.isSubset;\n  OrderedSet.union = Base.union;\n  OrderedSet.intersect = Base.intersect;\n  OrderedSet.indexedIntersect = Base.indexedIntersect;\n  /** Returns elements of `a` that are not in `b`, i.e `a` - `b` */\n\n  OrderedSet.subtract = Base.subtract;\n  /**\r\n   * Returns 0 if `x` is smaller or equal the first element of `set`\r\n   * Returns length of `set` if `x` is bigger than the last element of `set`\r\n   * Otherwise returns the first index where the value of `set` is equal or bigger than `x`\r\n   */\n\n  OrderedSet.findPredecessorIndex = Base.findPredecessorIndex;\n  OrderedSet.findPredecessorIndexInInterval = Base.findPredecessorIndexInInterval;\n  OrderedSet.findRange = Base.findRange;\n  OrderedSet.intersectionSize = Base.intersectionSize;\n\n  function forEach(set, f, ctx) {\n    return Base.forEach(set, f, ctx);\n  }\n\n  OrderedSet.forEach = forEach;\n\n  function forEachSegment(set, segment, f, ctx) {\n    return Base.forEachSegment(set, segment, f, ctx);\n  }\n\n  OrderedSet.forEachSegment = forEachSegment;\n\n  function isInterval(set) {\n    return Interval.is(set);\n  }\n\n  OrderedSet.isInterval = isInterval;\n\n  function isSortedArray(set) {\n    return !Interval.is(set);\n  }\n\n  OrderedSet.isSortedArray = isSortedArray;\n\n  function toArray(set) {\n    var array = [];\n    OrderedSet.forEach(set, function (v) {\n      return array.push(v);\n    });\n    return array;\n  }\n\n  OrderedSet.toArray = toArray;\n\n  function toString(set) {\n    return Base.toString(set);\n  }\n\n  OrderedSet.toString = toString;\n})(OrderedSet || (OrderedSet = {}));\n\nexport { OrderedSet };","map":{"version":3,"sources":["../../../src/mol-data/int/ordered-set.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport * as Base from './impl/ordered-set';\r\nimport { Interval } from './interval';\r\nvar OrderedSet;\r\n(function (OrderedSet) {\r\n    OrderedSet.Empty = Base.Empty;\r\n    OrderedSet.ofSingleton = Base.ofSingleton;\r\n    /** Create interval from range [min, max] */\r\n    OrderedSet.ofRange = Base.ofRange;\r\n    /** Create interval from bounds [start, end), i.e. [start, end - 1] */\r\n    OrderedSet.ofBounds = Base.ofBounds;\r\n    /** It is the responsibility of the caller to ensure the array is sorted and contains unique values. */\r\n    OrderedSet.ofSortedArray = Base.ofSortedArray;\r\n    OrderedSet.has = Base.has;\r\n    /** Returns the index of `x` in `set` or -1 if not found. */\r\n    OrderedSet.indexOf = Base.indexOf;\r\n    /** Returns the value in `set` at index `i`. */\r\n    OrderedSet.getAt = Base.getAt;\r\n    OrderedSet.min = Base.min;\r\n    OrderedSet.max = Base.max;\r\n    OrderedSet.start = Base.start;\r\n    OrderedSet.end = Base.end;\r\n    /** Number of elements in the OrderedSet */\r\n    OrderedSet.size = Base.size;\r\n    OrderedSet.hashCode = Base.hashCode;\r\n    OrderedSet.areEqual = Base.areEqual;\r\n    OrderedSet.areIntersecting = Base.areIntersecting;\r\n    /** Check if the 2nd argument is a subset of the 1st */\r\n    OrderedSet.isSubset = Base.isSubset;\r\n    OrderedSet.union = Base.union;\r\n    OrderedSet.intersect = Base.intersect;\r\n    OrderedSet.indexedIntersect = Base.indexedIntersect;\r\n    /** Returns elements of `a` that are not in `b`, i.e `a` - `b` */\r\n    OrderedSet.subtract = Base.subtract;\r\n    /**\r\n     * Returns 0 if `x` is smaller or equal the first element of `set`\r\n     * Returns length of `set` if `x` is bigger than the last element of `set`\r\n     * Otherwise returns the first index where the value of `set` is equal or bigger than `x`\r\n     */\r\n    OrderedSet.findPredecessorIndex = Base.findPredecessorIndex;\r\n    OrderedSet.findPredecessorIndexInInterval = Base.findPredecessorIndexInInterval;\r\n    OrderedSet.findRange = Base.findRange;\r\n    OrderedSet.intersectionSize = Base.intersectionSize;\r\n    function forEach(set, f, ctx) {\r\n        return Base.forEach(set, f, ctx);\r\n    }\r\n    OrderedSet.forEach = forEach;\r\n    function forEachSegment(set, segment, f, ctx) {\r\n        return Base.forEachSegment(set, segment, f, ctx);\r\n    }\r\n    OrderedSet.forEachSegment = forEachSegment;\r\n    function isInterval(set) {\r\n        return Interval.is(set);\r\n    }\r\n    OrderedSet.isInterval = isInterval;\r\n    function isSortedArray(set) {\r\n        return !Interval.is(set);\r\n    }\r\n    OrderedSet.isSortedArray = isSortedArray;\r\n    function toArray(set) {\r\n        var array = [];\r\n        OrderedSet.forEach(set, function (v) { return array.push(v); });\r\n        return array;\r\n    }\r\n    OrderedSet.toArray = toArray;\r\n    function toString(set) {\r\n        return Base.toString(set);\r\n    }\r\n    OrderedSet.toString = toString;\r\n})(OrderedSet || (OrderedSet = {}));\r\nexport { OrderedSet };\r\n//# sourceMappingURL=ordered-set.js.map"]},"metadata":{},"sourceType":"module"}