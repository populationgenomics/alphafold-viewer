{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * Adapted from three.js, The MIT License, Copyright Â© 2010-2020 three.js authors\r\n */\nimport { __assign } from \"tslib\";\nimport { Mat4 } from '../../mol-math/linear-algebra';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Camera } from '../camera';\nimport { Viewport } from './util';\nexport var StereoCameraParams = {\n  eyeSeparation: PD.Numeric(0.064, {\n    min: 0.01,\n    max: 0.5,\n    step: 0.001\n  }),\n  focus: PD.Numeric(10, {\n    min: 1,\n    max: 100,\n    step: 0.01\n  })\n};\nexport var DefaultStereoCameraProps = PD.getDefaultValues(StereoCameraParams);\nexport { StereoCamera };\n\nvar StereoCamera =\n/** @class */\nfunction () {\n  function StereoCamera(parent, props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.parent = parent;\n    this.left = new EyeCamera();\n    this.right = new EyeCamera();\n    this.props = __assign(__assign({}, DefaultStereoCameraProps), props);\n  }\n\n  Object.defineProperty(StereoCamera.prototype, \"viewport\", {\n    get: function () {\n      return this.parent.viewport;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StereoCamera.prototype, \"viewOffset\", {\n    get: function () {\n      return this.parent.viewOffset;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StereoCamera.prototype.setProps = function (props) {\n    Object.assign(this.props, props);\n  };\n\n  StereoCamera.prototype.update = function () {\n    this.parent.update();\n    update(this.parent, this.props, this.left, this.right);\n  };\n\n  return StereoCamera;\n}();\n\n(function (StereoCamera) {\n  function is(camera) {\n    return 'left' in camera && 'right' in camera;\n  }\n\n  StereoCamera.is = is;\n})(StereoCamera || (StereoCamera = {}));\n\nvar EyeCamera =\n/** @class */\nfunction () {\n  function EyeCamera() {\n    this.viewport = Viewport.create(0, 0, 0, 0);\n    this.view = Mat4();\n    this.projection = Mat4();\n    this.projectionView = Mat4();\n    this.inverseProjectionView = Mat4();\n    this.state = Camera.createDefaultSnapshot();\n    this.viewOffset = Camera.ViewOffset();\n    this.far = 0;\n    this.near = 0;\n    this.fogFar = 0;\n    this.fogNear = 0;\n  }\n\n  return EyeCamera;\n}();\n\nvar eyeLeft = Mat4.identity(),\n    eyeRight = Mat4.identity();\n\nfunction update(camera, props, left, right) {\n  // Copy the states\n  Viewport.copy(left.viewport, camera.viewport);\n  Mat4.copy(left.view, camera.view);\n  Mat4.copy(left.projection, camera.projection);\n  Camera.copySnapshot(left.state, camera.state);\n  Camera.copyViewOffset(left.viewOffset, camera.viewOffset);\n  left.far = camera.far;\n  left.near = camera.near;\n  left.fogFar = camera.fogFar;\n  left.fogNear = camera.fogNear;\n  Viewport.copy(right.viewport, camera.viewport);\n  Mat4.copy(right.view, camera.view);\n  Mat4.copy(right.projection, camera.projection);\n  Camera.copySnapshot(right.state, camera.state);\n  Camera.copyViewOffset(right.viewOffset, camera.viewOffset);\n  right.far = camera.far;\n  right.near = camera.near;\n  right.fogFar = camera.fogFar;\n  right.fogNear = camera.fogNear; // update the view offsets\n\n  var w = Math.floor(camera.viewport.width / 2);\n  var aspect = w / camera.viewport.height;\n  left.viewport.width = w;\n  right.viewport.x += w;\n  right.viewport.width -= w; // update the projection and view matrices\n\n  var eyeSepHalf = props.eyeSeparation / 2;\n  var eyeSepOnProjection = eyeSepHalf * camera.near / props.focus;\n  var ymax = camera.near * Math.tan(camera.state.fov * 0.5);\n  var xmin, xmax; // translate xOffset\n\n  eyeLeft[12] = -eyeSepHalf;\n  eyeRight[12] = eyeSepHalf; // for left eye\n\n  xmin = -ymax * aspect + eyeSepOnProjection;\n  xmax = ymax * aspect + eyeSepOnProjection;\n  left.projection[0] = 2 * camera.near / (xmax - xmin);\n  left.projection[8] = (xmax + xmin) / (xmax - xmin);\n  Mat4.mul(left.view, left.view, eyeLeft);\n  Mat4.mul(left.projectionView, left.projection, left.view);\n  Mat4.invert(left.inverseProjectionView, left.projectionView); // for right eye\n\n  xmin = -ymax * aspect - eyeSepOnProjection;\n  xmax = ymax * aspect - eyeSepOnProjection;\n  right.projection[0] = 2 * camera.near / (xmax - xmin);\n  right.projection[8] = (xmax + xmin) / (xmax - xmin);\n  Mat4.mul(right.view, right.view, eyeRight);\n  Mat4.mul(right.projectionView, right.projection, right.view);\n  Mat4.invert(right.inverseProjectionView, right.projectionView);\n}","map":{"version":3,"sources":["../../../src/mol-canvas3d/camera/stereo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * Adapted from three.js, The MIT License, Copyright Â© 2010-2020 three.js authors\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Mat4 } from '../../mol-math/linear-algebra';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Camera } from '../camera';\r\nimport { Viewport } from './util';\r\nexport var StereoCameraParams = {\r\n    eyeSeparation: PD.Numeric(0.064, { min: 0.01, max: 0.5, step: 0.001 }),\r\n    focus: PD.Numeric(10, { min: 1, max: 100, step: 0.01 }),\r\n};\r\nexport var DefaultStereoCameraProps = PD.getDefaultValues(StereoCameraParams);\r\nexport { StereoCamera };\r\nvar StereoCamera = /** @class */ (function () {\r\n    function StereoCamera(parent, props) {\r\n        if (props === void 0) { props = {}; }\r\n        this.parent = parent;\r\n        this.left = new EyeCamera();\r\n        this.right = new EyeCamera();\r\n        this.props = __assign(__assign({}, DefaultStereoCameraProps), props);\r\n    }\r\n    Object.defineProperty(StereoCamera.prototype, \"viewport\", {\r\n        get: function () {\r\n            return this.parent.viewport;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StereoCamera.prototype, \"viewOffset\", {\r\n        get: function () {\r\n            return this.parent.viewOffset;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    StereoCamera.prototype.setProps = function (props) {\r\n        Object.assign(this.props, props);\r\n    };\r\n    StereoCamera.prototype.update = function () {\r\n        this.parent.update();\r\n        update(this.parent, this.props, this.left, this.right);\r\n    };\r\n    return StereoCamera;\r\n}());\r\n(function (StereoCamera) {\r\n    function is(camera) {\r\n        return 'left' in camera && 'right' in camera;\r\n    }\r\n    StereoCamera.is = is;\r\n})(StereoCamera || (StereoCamera = {}));\r\nvar EyeCamera = /** @class */ (function () {\r\n    function EyeCamera() {\r\n        this.viewport = Viewport.create(0, 0, 0, 0);\r\n        this.view = Mat4();\r\n        this.projection = Mat4();\r\n        this.projectionView = Mat4();\r\n        this.inverseProjectionView = Mat4();\r\n        this.state = Camera.createDefaultSnapshot();\r\n        this.viewOffset = Camera.ViewOffset();\r\n        this.far = 0;\r\n        this.near = 0;\r\n        this.fogFar = 0;\r\n        this.fogNear = 0;\r\n    }\r\n    return EyeCamera;\r\n}());\r\nvar eyeLeft = Mat4.identity(), eyeRight = Mat4.identity();\r\nfunction update(camera, props, left, right) {\r\n    // Copy the states\r\n    Viewport.copy(left.viewport, camera.viewport);\r\n    Mat4.copy(left.view, camera.view);\r\n    Mat4.copy(left.projection, camera.projection);\r\n    Camera.copySnapshot(left.state, camera.state);\r\n    Camera.copyViewOffset(left.viewOffset, camera.viewOffset);\r\n    left.far = camera.far;\r\n    left.near = camera.near;\r\n    left.fogFar = camera.fogFar;\r\n    left.fogNear = camera.fogNear;\r\n    Viewport.copy(right.viewport, camera.viewport);\r\n    Mat4.copy(right.view, camera.view);\r\n    Mat4.copy(right.projection, camera.projection);\r\n    Camera.copySnapshot(right.state, camera.state);\r\n    Camera.copyViewOffset(right.viewOffset, camera.viewOffset);\r\n    right.far = camera.far;\r\n    right.near = camera.near;\r\n    right.fogFar = camera.fogFar;\r\n    right.fogNear = camera.fogNear;\r\n    // update the view offsets\r\n    var w = Math.floor(camera.viewport.width / 2);\r\n    var aspect = w / camera.viewport.height;\r\n    left.viewport.width = w;\r\n    right.viewport.x += w;\r\n    right.viewport.width -= w;\r\n    // update the projection and view matrices\r\n    var eyeSepHalf = props.eyeSeparation / 2;\r\n    var eyeSepOnProjection = eyeSepHalf * camera.near / props.focus;\r\n    var ymax = camera.near * Math.tan(camera.state.fov * 0.5);\r\n    var xmin, xmax;\r\n    // translate xOffset\r\n    eyeLeft[12] = -eyeSepHalf;\r\n    eyeRight[12] = eyeSepHalf;\r\n    // for left eye\r\n    xmin = -ymax * aspect + eyeSepOnProjection;\r\n    xmax = ymax * aspect + eyeSepOnProjection;\r\n    left.projection[0] = 2 * camera.near / (xmax - xmin);\r\n    left.projection[8] = (xmax + xmin) / (xmax - xmin);\r\n    Mat4.mul(left.view, left.view, eyeLeft);\r\n    Mat4.mul(left.projectionView, left.projection, left.view);\r\n    Mat4.invert(left.inverseProjectionView, left.projectionView);\r\n    // for right eye\r\n    xmin = -ymax * aspect - eyeSepOnProjection;\r\n    xmax = ymax * aspect - eyeSepOnProjection;\r\n    right.projection[0] = 2 * camera.near / (xmax - xmin);\r\n    right.projection[8] = (xmax + xmin) / (xmax - xmin);\r\n    Mat4.mul(right.view, right.view, eyeRight);\r\n    Mat4.mul(right.projectionView, right.projection, right.view);\r\n    Mat4.invert(right.inverseProjectionView, right.projectionView);\r\n}\r\n//# sourceMappingURL=stereo.js.map"]},"metadata":{},"sourceType":"module"}