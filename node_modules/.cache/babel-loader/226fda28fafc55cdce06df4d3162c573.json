{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Geometry } from '../../mol-geo/geometry/geometry';\nimport { Representation } from '../representation';\nimport { Shape, ShapeGroup } from '../../mol-model/shape';\nimport { Subject } from 'rxjs';\nimport { getNextMaterialId, createRenderObject } from '../../mol-gl/render-object';\nimport { Theme } from '../../mol-theme/theme';\nimport { VisualUpdateState } from '../util';\nimport { createMarkers } from '../../mol-geo/geometry/marker-data';\nimport { MarkerActions } from '../../mol-util/marker-action';\nimport { ValueCell } from '../../mol-util';\nimport { createColors } from '../../mol-geo/geometry/color-data';\nimport { createSizes } from '../../mol-geo/geometry/size-data';\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\nimport { Interval, OrderedSet } from '../../mol-data/int';\nimport { Visual } from '../visual';\nimport { Task } from '../../mol-task';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { isDebugMode } from '../../mol-util/debug';\nexport function ShapeRepresentation(getShape, geometryUtils, builder) {\n  if (builder === void 0) {\n    builder = {};\n  }\n\n  var version = 0;\n  var updated = new Subject();\n\n  var _state = Representation.createState();\n\n  var materialId = getNextMaterialId();\n  var renderObjects = [];\n\n  var _renderObject;\n\n  var _shape;\n\n  var _theme = Theme.createEmpty();\n\n  var currentProps = PD.getDefaultValues(geometryUtils.Params); // TODO avoid casting\n\n  var currentParams;\n  var locationIt;\n  var positionIt;\n  if (builder.modifyState) Representation.updateState(_state, builder.modifyState(_state));\n  var updateState = VisualUpdateState.create();\n\n  function prepareUpdate(props, shape) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    VisualUpdateState.reset(updateState);\n\n    if (!shape && !_shape) {\n      // console.error('no shape given')\n      return;\n    } else if (shape && !_shape) {\n      // console.log('first shape')\n      updateState.createNew = true;\n    } else if (shape && _shape && shape.id === _shape.id) {// console.log('same shape')\n      // nothing to set\n    } else if (shape && _shape && shape.id !== _shape.id) {\n      // console.log('new shape')\n      updateState.updateTransform = true;\n      updateState.createGeometry = true;\n    } else if (!shape) {// console.log('only props')\n      // nothing to set\n    } else {\n      console.warn('unexpected state');\n    }\n\n    if (updateState.updateTransform) {\n      updateState.updateColor = true;\n      updateState.updateSize = true;\n    }\n\n    if (updateState.createGeometry) {\n      updateState.updateColor = true;\n      updateState.updateSize = true;\n    }\n  }\n\n  function createOrUpdate(props, data) {\n    var _this = this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (builder.modifyProps) props = builder.modifyProps(props);\n    return Task.create('ShapeRepresentation.create', function (runtime) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var newProps, shape, _a, transform, values, state, instanceCount, groupCount;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newProps = Object.assign(currentProps, props);\n              if (!data) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , getShape(runtime, data, newProps, _shape)];\n\n            case 1:\n              _a = _b.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = undefined;\n              _b.label = 3;\n\n            case 3:\n              shape = _a;\n              prepareUpdate(props, shape);\n\n              if (shape) {\n                _shape = shape;\n                Object.assign(_theme, Shape.getTheme(_shape));\n              }\n\n              if (updateState.createNew) {\n                renderObjects.length = 0; // clear list o renderObjects\n\n                locationIt = Shape.groupIterator(_shape);\n                transform = Shape.createTransform(_shape.transforms);\n                values = geometryUtils.createValues(_shape.geometry, transform, locationIt, _theme, newProps);\n                state = geometryUtils.createRenderableState(newProps);\n                if (builder.modifyState) Object.assign(state, builder.modifyState(state));\n                Representation.updateState(_state, state);\n                _renderObject = createRenderObject(_shape.geometry.kind, values, state, materialId);\n                if (_renderObject) renderObjects.push(_renderObject); // add new renderObject to list\n\n                positionIt = geometryUtils.createPositionIterator(_shape.geometry, _renderObject.values);\n              } else {\n                if (!_renderObject) {\n                  throw new Error('expected renderObject to be available');\n                }\n\n                if (updateState.updateTransform) {\n                  // console.log('update transform')\n                  Shape.createTransform(_shape.transforms, _renderObject.values);\n                  locationIt = Shape.groupIterator(_shape);\n                  instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;\n                  createMarkers(instanceCount * groupCount, _renderObject.values);\n                }\n\n                if (updateState.createGeometry) {\n                  // console.log('update geometry')\n                  ValueCell.updateIfChanged(_renderObject.values.drawCount, Geometry.getDrawCount(_shape.geometry));\n                  ValueCell.updateIfChanged(_renderObject.values.uVertexCount, Geometry.getVertexCount(_shape.geometry));\n                }\n\n                if (updateState.updateTransform || updateState.createGeometry) {\n                  // console.log('updateBoundingSphere')\n                  geometryUtils.updateBoundingSphere(_renderObject.values, _shape.geometry);\n                  positionIt = geometryUtils.createPositionIterator(_shape.geometry, _renderObject.values);\n                }\n\n                if (updateState.updateColor) {\n                  // console.log('update color')\n                  createColors(locationIt, positionIt, _theme.color, _renderObject.values);\n                }\n\n                if (updateState.updateSize) {\n                  // not all geometries have size data, so check here\n                  if ('uSize' in _renderObject.values) {\n                    // console.log('update size')\n                    createSizes(locationIt, _theme.size, _renderObject.values);\n                  }\n                }\n\n                geometryUtils.updateValues(_renderObject.values, newProps);\n                geometryUtils.updateRenderableState(_renderObject.state, newProps);\n              }\n\n              currentProps = newProps; // increment version\n\n              updated.next(version++);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  function lociApply(loci, apply) {\n    if (isEveryLoci(loci) || Shape.isLoci(loci) && loci.shape === _shape) {\n      return apply(Interval.ofBounds(0, _shape.groupCount * _shape.transforms.length));\n    } else {\n      return eachShapeGroup(loci, _shape, apply);\n    }\n  }\n\n  return {\n    label: 'Shape geometry',\n\n    get groupCount() {\n      return locationIt ? locationIt.count : 0;\n    },\n\n    get props() {\n      return currentProps;\n    },\n\n    get params() {\n      return currentParams;\n    },\n\n    get state() {\n      return _state;\n    },\n\n    get theme() {\n      return _theme;\n    },\n\n    renderObjects: renderObjects,\n    updated: updated,\n    createOrUpdate: createOrUpdate,\n    getLoci: function (pickingId) {\n      if (pickingId === undefined) return Shape.Loci(_shape);\n      var objectId = pickingId.objectId,\n          groupId = pickingId.groupId,\n          instanceId = pickingId.instanceId;\n\n      if (_renderObject && _renderObject.id === objectId) {\n        return ShapeGroup.Loci(_shape, [{\n          ids: OrderedSet.ofSingleton(groupId),\n          instance: instanceId\n        }]);\n      }\n\n      return EmptyLoci;\n    },\n    mark: function (loci, action) {\n      if (!MarkerActions.is(_state.markerActions, action)) return false;\n\n      if (ShapeGroup.isLoci(loci) || Shape.isLoci(loci)) {\n        if (loci.shape !== _shape) return false;\n      } else if (!isEveryLoci(loci)) {\n        return false;\n      }\n\n      return Visual.mark(_renderObject, loci, action, lociApply);\n    },\n    setState: function (state) {\n      if (builder.modifyState) state = builder.modifyState(state);\n\n      if (_renderObject) {\n        if (state.visible !== undefined) Visual.setVisibility(_renderObject, state.visible);\n        if (state.alphaFactor !== undefined) Visual.setAlphaFactor(_renderObject, state.alphaFactor);\n        if (state.pickable !== undefined) Visual.setPickable(_renderObject, state.pickable);\n        if (state.colorOnly !== undefined) Visual.setColorOnly(_renderObject, state.colorOnly);\n\n        if (state.overpaint !== undefined) {\n          Visual.setOverpaint(_renderObject, state.overpaint, lociApply, true);\n        }\n\n        if (state.transparency !== undefined) {\n          Visual.setTransparency(_renderObject, state.transparency, lociApply, true);\n        }\n\n        if (state.transform !== undefined) Visual.setTransform(_renderObject, state.transform);\n      }\n\n      Representation.updateState(_state, state);\n    },\n    setTheme: function (theme) {\n      if (isDebugMode) {\n        console.warn('The `ShapeRepresentation` theme is fixed to `ShapeGroupColorTheme` and `ShapeGroupSizeTheme`. Colors are taken from `Shape.getColor` and sizes from `Shape.getSize`');\n      }\n    },\n    destroy: function () {\n      renderObjects.length = 0;\n\n      if (_renderObject) {\n        _renderObject.state.disposed = true;\n        _renderObject = undefined;\n      }\n    }\n  };\n}\n\nfunction eachShapeGroup(loci, shape, apply) {\n  if (!ShapeGroup.isLoci(loci)) return false;\n  if (loci.shape !== shape) return false;\n  var changed = false;\n  var groupCount = shape.groupCount;\n  var groups = loci.groups;\n\n  for (var _a = 0, groups_1 = groups; _a < groups_1.length; _a++) {\n    var _b = groups_1[_a],\n        ids = _b.ids,\n        instance = _b.instance;\n\n    if (Interval.is(ids)) {\n      var start = instance * groupCount + Interval.start(ids);\n      var end = instance * groupCount + Interval.end(ids);\n      if (apply(Interval.ofBounds(start, end))) changed = true;\n    } else {\n      for (var i = 0, _i = ids.length; i < _i; i++) {\n        var idx = instance * groupCount + ids[i];\n        if (apply(Interval.ofSingleton(idx))) changed = true;\n      }\n    }\n  }\n\n  return changed;\n}","map":{"version":3,"sources":["../../../src/mol-repr/shape/representation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Geometry } from '../../mol-geo/geometry/geometry';\r\nimport { Representation } from '../representation';\r\nimport { Shape, ShapeGroup } from '../../mol-model/shape';\r\nimport { Subject } from 'rxjs';\r\nimport { getNextMaterialId, createRenderObject } from '../../mol-gl/render-object';\r\nimport { Theme } from '../../mol-theme/theme';\r\nimport { VisualUpdateState } from '../util';\r\nimport { createMarkers } from '../../mol-geo/geometry/marker-data';\r\nimport { MarkerActions } from '../../mol-util/marker-action';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { createColors } from '../../mol-geo/geometry/color-data';\r\nimport { createSizes } from '../../mol-geo/geometry/size-data';\r\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\r\nimport { Interval, OrderedSet } from '../../mol-data/int';\r\nimport { Visual } from '../visual';\r\nimport { Task } from '../../mol-task';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { isDebugMode } from '../../mol-util/debug';\r\nexport function ShapeRepresentation(getShape, geometryUtils, builder) {\r\n    if (builder === void 0) { builder = {}; }\r\n    var version = 0;\r\n    var updated = new Subject();\r\n    var _state = Representation.createState();\r\n    var materialId = getNextMaterialId();\r\n    var renderObjects = [];\r\n    var _renderObject;\r\n    var _shape;\r\n    var _theme = Theme.createEmpty();\r\n    var currentProps = PD.getDefaultValues(geometryUtils.Params); // TODO avoid casting\r\n    var currentParams;\r\n    var locationIt;\r\n    var positionIt;\r\n    if (builder.modifyState)\r\n        Representation.updateState(_state, builder.modifyState(_state));\r\n    var updateState = VisualUpdateState.create();\r\n    function prepareUpdate(props, shape) {\r\n        if (props === void 0) { props = {}; }\r\n        VisualUpdateState.reset(updateState);\r\n        if (!shape && !_shape) {\r\n            // console.error('no shape given')\r\n            return;\r\n        }\r\n        else if (shape && !_shape) {\r\n            // console.log('first shape')\r\n            updateState.createNew = true;\r\n        }\r\n        else if (shape && _shape && shape.id === _shape.id) {\r\n            // console.log('same shape')\r\n            // nothing to set\r\n        }\r\n        else if (shape && _shape && shape.id !== _shape.id) {\r\n            // console.log('new shape')\r\n            updateState.updateTransform = true;\r\n            updateState.createGeometry = true;\r\n        }\r\n        else if (!shape) {\r\n            // console.log('only props')\r\n            // nothing to set\r\n        }\r\n        else {\r\n            console.warn('unexpected state');\r\n        }\r\n        if (updateState.updateTransform) {\r\n            updateState.updateColor = true;\r\n            updateState.updateSize = true;\r\n        }\r\n        if (updateState.createGeometry) {\r\n            updateState.updateColor = true;\r\n            updateState.updateSize = true;\r\n        }\r\n    }\r\n    function createOrUpdate(props, data) {\r\n        var _this = this;\r\n        if (props === void 0) { props = {}; }\r\n        if (builder.modifyProps)\r\n            props = builder.modifyProps(props);\r\n        return Task.create('ShapeRepresentation.create', function (runtime) { return __awaiter(_this, void 0, void 0, function () {\r\n            var newProps, shape, _a, transform, values, state, instanceCount, groupCount;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        newProps = Object.assign(currentProps, props);\r\n                        if (!data) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, getShape(runtime, data, newProps, _shape)];\r\n                    case 1:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        _a = undefined;\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        shape = _a;\r\n                        prepareUpdate(props, shape);\r\n                        if (shape) {\r\n                            _shape = shape;\r\n                            Object.assign(_theme, Shape.getTheme(_shape));\r\n                        }\r\n                        if (updateState.createNew) {\r\n                            renderObjects.length = 0; // clear list o renderObjects\r\n                            locationIt = Shape.groupIterator(_shape);\r\n                            transform = Shape.createTransform(_shape.transforms);\r\n                            values = geometryUtils.createValues(_shape.geometry, transform, locationIt, _theme, newProps);\r\n                            state = geometryUtils.createRenderableState(newProps);\r\n                            if (builder.modifyState)\r\n                                Object.assign(state, builder.modifyState(state));\r\n                            Representation.updateState(_state, state);\r\n                            _renderObject = createRenderObject(_shape.geometry.kind, values, state, materialId);\r\n                            if (_renderObject)\r\n                                renderObjects.push(_renderObject); // add new renderObject to list\r\n                            positionIt = geometryUtils.createPositionIterator(_shape.geometry, _renderObject.values);\r\n                        }\r\n                        else {\r\n                            if (!_renderObject) {\r\n                                throw new Error('expected renderObject to be available');\r\n                            }\r\n                            if (updateState.updateTransform) {\r\n                                // console.log('update transform')\r\n                                Shape.createTransform(_shape.transforms, _renderObject.values);\r\n                                locationIt = Shape.groupIterator(_shape);\r\n                                instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;\r\n                                createMarkers(instanceCount * groupCount, _renderObject.values);\r\n                            }\r\n                            if (updateState.createGeometry) {\r\n                                // console.log('update geometry')\r\n                                ValueCell.updateIfChanged(_renderObject.values.drawCount, Geometry.getDrawCount(_shape.geometry));\r\n                                ValueCell.updateIfChanged(_renderObject.values.uVertexCount, Geometry.getVertexCount(_shape.geometry));\r\n                            }\r\n                            if (updateState.updateTransform || updateState.createGeometry) {\r\n                                // console.log('updateBoundingSphere')\r\n                                geometryUtils.updateBoundingSphere(_renderObject.values, _shape.geometry);\r\n                                positionIt = geometryUtils.createPositionIterator(_shape.geometry, _renderObject.values);\r\n                            }\r\n                            if (updateState.updateColor) {\r\n                                // console.log('update color')\r\n                                createColors(locationIt, positionIt, _theme.color, _renderObject.values);\r\n                            }\r\n                            if (updateState.updateSize) {\r\n                                // not all geometries have size data, so check here\r\n                                if ('uSize' in _renderObject.values) {\r\n                                    // console.log('update size')\r\n                                    createSizes(locationIt, _theme.size, _renderObject.values);\r\n                                }\r\n                            }\r\n                            geometryUtils.updateValues(_renderObject.values, newProps);\r\n                            geometryUtils.updateRenderableState(_renderObject.state, newProps);\r\n                        }\r\n                        currentProps = newProps;\r\n                        // increment version\r\n                        updated.next(version++);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    function lociApply(loci, apply) {\r\n        if (isEveryLoci(loci) || (Shape.isLoci(loci) && loci.shape === _shape)) {\r\n            return apply(Interval.ofBounds(0, _shape.groupCount * _shape.transforms.length));\r\n        }\r\n        else {\r\n            return eachShapeGroup(loci, _shape, apply);\r\n        }\r\n    }\r\n    return {\r\n        label: 'Shape geometry',\r\n        get groupCount() { return locationIt ? locationIt.count : 0; },\r\n        get props() { return currentProps; },\r\n        get params() { return currentParams; },\r\n        get state() { return _state; },\r\n        get theme() { return _theme; },\r\n        renderObjects: renderObjects,\r\n        updated: updated,\r\n        createOrUpdate: createOrUpdate,\r\n        getLoci: function (pickingId) {\r\n            if (pickingId === undefined)\r\n                return Shape.Loci(_shape);\r\n            var objectId = pickingId.objectId, groupId = pickingId.groupId, instanceId = pickingId.instanceId;\r\n            if (_renderObject && _renderObject.id === objectId) {\r\n                return ShapeGroup.Loci(_shape, [{ ids: OrderedSet.ofSingleton(groupId), instance: instanceId }]);\r\n            }\r\n            return EmptyLoci;\r\n        },\r\n        mark: function (loci, action) {\r\n            if (!MarkerActions.is(_state.markerActions, action))\r\n                return false;\r\n            if (ShapeGroup.isLoci(loci) || Shape.isLoci(loci)) {\r\n                if (loci.shape !== _shape)\r\n                    return false;\r\n            }\r\n            else if (!isEveryLoci(loci)) {\r\n                return false;\r\n            }\r\n            return Visual.mark(_renderObject, loci, action, lociApply);\r\n        },\r\n        setState: function (state) {\r\n            if (builder.modifyState)\r\n                state = builder.modifyState(state);\r\n            if (_renderObject) {\r\n                if (state.visible !== undefined)\r\n                    Visual.setVisibility(_renderObject, state.visible);\r\n                if (state.alphaFactor !== undefined)\r\n                    Visual.setAlphaFactor(_renderObject, state.alphaFactor);\r\n                if (state.pickable !== undefined)\r\n                    Visual.setPickable(_renderObject, state.pickable);\r\n                if (state.colorOnly !== undefined)\r\n                    Visual.setColorOnly(_renderObject, state.colorOnly);\r\n                if (state.overpaint !== undefined) {\r\n                    Visual.setOverpaint(_renderObject, state.overpaint, lociApply, true);\r\n                }\r\n                if (state.transparency !== undefined) {\r\n                    Visual.setTransparency(_renderObject, state.transparency, lociApply, true);\r\n                }\r\n                if (state.transform !== undefined)\r\n                    Visual.setTransform(_renderObject, state.transform);\r\n            }\r\n            Representation.updateState(_state, state);\r\n        },\r\n        setTheme: function (theme) {\r\n            if (isDebugMode) {\r\n                console.warn('The `ShapeRepresentation` theme is fixed to `ShapeGroupColorTheme` and `ShapeGroupSizeTheme`. Colors are taken from `Shape.getColor` and sizes from `Shape.getSize`');\r\n            }\r\n        },\r\n        destroy: function () {\r\n            renderObjects.length = 0;\r\n            if (_renderObject) {\r\n                _renderObject.state.disposed = true;\r\n                _renderObject = undefined;\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction eachShapeGroup(loci, shape, apply) {\r\n    if (!ShapeGroup.isLoci(loci))\r\n        return false;\r\n    if (loci.shape !== shape)\r\n        return false;\r\n    var changed = false;\r\n    var groupCount = shape.groupCount;\r\n    var groups = loci.groups;\r\n    for (var _a = 0, groups_1 = groups; _a < groups_1.length; _a++) {\r\n        var _b = groups_1[_a], ids = _b.ids, instance = _b.instance;\r\n        if (Interval.is(ids)) {\r\n            var start = instance * groupCount + Interval.start(ids);\r\n            var end = instance * groupCount + Interval.end(ids);\r\n            if (apply(Interval.ofBounds(start, end)))\r\n                changed = true;\r\n        }\r\n        else {\r\n            for (var i = 0, _i = ids.length; i < _i; i++) {\r\n                var idx = instance * groupCount + ids[i];\r\n                if (apply(Interval.ofSingleton(idx)))\r\n                    changed = true;\r\n            }\r\n        }\r\n    }\r\n    return changed;\r\n}\r\n//# sourceMappingURL=representation.js.map"]},"metadata":{},"sourceType":"module"}