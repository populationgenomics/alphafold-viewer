{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * ported from https://github.com/photopea/UZIP.js/blob/master/UZIP.js\r\n * MIT License, Copyright (c) 2018 Photopea\r\n */\nexport var U = function () {\n  var u16 = Uint16Array,\n      u32 = Uint32Array;\n  return {\n    next_code: new u16(16),\n    bl_count: new u16(16),\n    ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n    of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\n    exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n    ldef: new u16(32),\n    df0: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],\n    dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n    ddef: new u32(32),\n    flmap: new u16(512),\n    fltree: [],\n    fdmap: new u16(32),\n    fdtree: [],\n    lmap: new u16(32768),\n    ltree: [],\n    ttree: [],\n    dmap: new u16(32768),\n    dtree: [],\n    imap: new u16(512),\n    itree: [],\n    // rev9 : new u16(  512)\n    rev15: new u16(1 << 15),\n    lhst: new u32(286),\n    dhst: new u32(30),\n    ihst: new u32(19),\n    lits: new u32(15000),\n    strt: new u16(1 << 16),\n    prev: new u16(1 << 15)\n  };\n}();\n\n(function () {\n  var len = 1 << 15;\n\n  for (var i = 0; i < len; i++) {\n    var x = i;\n    x = (x & 0xaaaaaaaa) >>> 1 | (x & 0x55555555) << 1;\n    x = (x & 0xcccccccc) >>> 2 | (x & 0x33333333) << 2;\n    x = (x & 0xf0f0f0f0) >>> 4 | (x & 0x0f0f0f0f) << 4;\n    x = (x & 0xff00ff00) >>> 8 | (x & 0x00ff00ff) << 8;\n    U.rev15[i] = (x >>> 16 | x << 16) >>> 17;\n  }\n\n  function pushV(tgt, n, sv) {\n    while (n-- !== 0) tgt.push(0, sv);\n  }\n\n  for (var i = 0; i < 32; i++) {\n    U.ldef[i] = U.of0[i] << 3 | U.exb[i];\n    U.ddef[i] = U.df0[i] << 4 | U.dxb[i];\n  }\n\n  pushV(U.fltree, 144, 8);\n  pushV(U.fltree, 255 - 143, 9);\n  pushV(U.fltree, 279 - 255, 7);\n  pushV(U.fltree, 287 - 279, 8);\n  /*\r\n  var i = 0;\r\n  for(; i<=143; i++) U.fltree.push(0,8);\r\n  for(; i<=255; i++) U.fltree.push(0,9);\r\n  for(; i<=279; i++) U.fltree.push(0,7);\r\n  for(; i<=287; i++) U.fltree.push(0,8);\r\n  */\n\n  makeCodes(U.fltree, 9);\n  codes2map(U.fltree, 9, U.flmap);\n  revCodes(U.fltree, 9);\n  pushV(U.fdtree, 32, 5); // for(i=0;i<32; i++) U.fdtree.push(0,5);\n\n  makeCodes(U.fdtree, 5);\n  codes2map(U.fdtree, 5, U.fdmap);\n  revCodes(U.fdtree, 5);\n  pushV(U.itree, 19, 0);\n  pushV(U.ltree, 286, 0);\n  pushV(U.dtree, 30, 0);\n  pushV(U.ttree, 320, 0);\n  /*\r\n  for(var i=0; i< 19; i++) U.itree.push(0,0);\r\n  for(var i=0; i<286; i++) U.ltree.push(0,0);\r\n  for(var i=0; i< 30; i++) U.dtree.push(0,0);\r\n  for(var i=0; i<320; i++) U.ttree.push(0,0);\r\n  */\n})();\n\nexport function codes2map(tree, MAX_BITS, map) {\n  var max_code = tree.length;\n  var r15 = U.rev15;\n\n  for (var i = 0; i < max_code; i += 2) {\n    if (tree[i + 1] !== 0) {\n      var lit = i >> 1;\n      var cl = tree[i + 1],\n          val = lit << 4 | cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\n\n      var rest = MAX_BITS - cl;\n      var i0 = tree[i] << rest;\n      var i1 = i0 + (1 << rest); // tree[i]=r15[i0]>>>(15-MAX_BITS);\n\n      while (i0 !== i1) {\n        var p0 = r15[i0] >>> 15 - MAX_BITS;\n        map[p0] = val;\n        i0++;\n      }\n    }\n  }\n}\nexport function makeCodes(tree, MAX_BITS) {\n  var max_code = tree.length;\n  var bl_count = U.bl_count;\n\n  for (var i = 0; i <= MAX_BITS; i++) bl_count[i] = 0;\n\n  for (var i = 1; i < max_code; i += 2) bl_count[tree[i]]++;\n\n  var next_code = U.next_code; // smallest code for each length\n\n  var code = 0;\n  bl_count[0] = 0;\n\n  for (var bits = 1; bits <= MAX_BITS; bits++) {\n    code = code + bl_count[bits - 1] << 1;\n    next_code[bits] = code;\n  }\n\n  for (var n = 0; n < max_code; n += 2) {\n    var len = tree[n + 1];\n\n    if (len !== 0) {\n      tree[n] = next_code[len];\n      next_code[len]++;\n    }\n  }\n}\nexport function revCodes(tree, MAX_BITS) {\n  var r15 = U.rev15,\n      imb = 15 - MAX_BITS;\n\n  for (var i = 0; i < tree.length; i += 2) {\n    var i0 = tree[i] << MAX_BITS - tree[i + 1];\n    tree[i] = r15[i0] >>> imb;\n  }\n}","map":{"version":3,"sources":["../../../src/mol-util/zip/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * ported from https://github.com/photopea/UZIP.js/blob/master/UZIP.js\r\n * MIT License, Copyright (c) 2018 Photopea\r\n */\r\nexport var U = (function () {\r\n    var u16 = Uint16Array, u32 = Uint32Array;\r\n    return {\r\n        next_code: new u16(16),\r\n        bl_count: new u16(16),\r\n        ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\r\n        of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\r\n        exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\r\n        ldef: new u16(32),\r\n        df0: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],\r\n        dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\r\n        ddef: new u32(32),\r\n        flmap: new u16(512), fltree: [],\r\n        fdmap: new u16(32), fdtree: [],\r\n        lmap: new u16(32768), ltree: [], ttree: [],\r\n        dmap: new u16(32768), dtree: [],\r\n        imap: new u16(512), itree: [],\r\n        // rev9 : new u16(  512)\r\n        rev15: new u16(1 << 15),\r\n        lhst: new u32(286), dhst: new u32(30), ihst: new u32(19),\r\n        lits: new u32(15000),\r\n        strt: new u16(1 << 16),\r\n        prev: new u16(1 << 15)\r\n    };\r\n})();\r\n(function () {\r\n    var len = 1 << 15;\r\n    for (var i = 0; i < len; i++) {\r\n        var x = i;\r\n        x = (((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1));\r\n        x = (((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) << 2));\r\n        x = (((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) << 4));\r\n        x = (((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8));\r\n        U.rev15[i] = (((x >>> 16) | (x << 16))) >>> 17;\r\n    }\r\n    function pushV(tgt, n, sv) {\r\n        while (n-- !== 0)\r\n            tgt.push(0, sv);\r\n    }\r\n    for (var i = 0; i < 32; i++) {\r\n        U.ldef[i] = (U.of0[i] << 3) | U.exb[i];\r\n        U.ddef[i] = (U.df0[i] << 4) | U.dxb[i];\r\n    }\r\n    pushV(U.fltree, 144, 8);\r\n    pushV(U.fltree, 255 - 143, 9);\r\n    pushV(U.fltree, 279 - 255, 7);\r\n    pushV(U.fltree, 287 - 279, 8);\r\n    /*\r\n    var i = 0;\r\n    for(; i<=143; i++) U.fltree.push(0,8);\r\n    for(; i<=255; i++) U.fltree.push(0,9);\r\n    for(; i<=279; i++) U.fltree.push(0,7);\r\n    for(; i<=287; i++) U.fltree.push(0,8);\r\n    */\r\n    makeCodes(U.fltree, 9);\r\n    codes2map(U.fltree, 9, U.flmap);\r\n    revCodes(U.fltree, 9);\r\n    pushV(U.fdtree, 32, 5);\r\n    // for(i=0;i<32; i++) U.fdtree.push(0,5);\r\n    makeCodes(U.fdtree, 5);\r\n    codes2map(U.fdtree, 5, U.fdmap);\r\n    revCodes(U.fdtree, 5);\r\n    pushV(U.itree, 19, 0);\r\n    pushV(U.ltree, 286, 0);\r\n    pushV(U.dtree, 30, 0);\r\n    pushV(U.ttree, 320, 0);\r\n    /*\r\n    for(var i=0; i< 19; i++) U.itree.push(0,0);\r\n    for(var i=0; i<286; i++) U.ltree.push(0,0);\r\n    for(var i=0; i< 30; i++) U.dtree.push(0,0);\r\n    for(var i=0; i<320; i++) U.ttree.push(0,0);\r\n    */\r\n})();\r\nexport function codes2map(tree, MAX_BITS, map) {\r\n    var max_code = tree.length;\r\n    var r15 = U.rev15;\r\n    for (var i = 0; i < max_code; i += 2) {\r\n        if (tree[i + 1] !== 0) {\r\n            var lit = i >> 1;\r\n            var cl = tree[i + 1], val = (lit << 4) | cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\r\n            var rest = (MAX_BITS - cl);\r\n            var i0 = tree[i] << rest;\r\n            var i1 = i0 + (1 << rest);\r\n            // tree[i]=r15[i0]>>>(15-MAX_BITS);\r\n            while (i0 !== i1) {\r\n                var p0 = r15[i0] >>> (15 - MAX_BITS);\r\n                map[p0] = val;\r\n                i0++;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function makeCodes(tree, MAX_BITS) {\r\n    var max_code = tree.length;\r\n    var bl_count = U.bl_count;\r\n    for (var i = 0; i <= MAX_BITS; i++)\r\n        bl_count[i] = 0;\r\n    for (var i = 1; i < max_code; i += 2)\r\n        bl_count[tree[i]]++;\r\n    var next_code = U.next_code; // smallest code for each length\r\n    var code = 0;\r\n    bl_count[0] = 0;\r\n    for (var bits = 1; bits <= MAX_BITS; bits++) {\r\n        code = (code + bl_count[bits - 1]) << 1;\r\n        next_code[bits] = code;\r\n    }\r\n    for (var n = 0; n < max_code; n += 2) {\r\n        var len = tree[n + 1];\r\n        if (len !== 0) {\r\n            tree[n] = next_code[len];\r\n            next_code[len]++;\r\n        }\r\n    }\r\n}\r\nexport function revCodes(tree, MAX_BITS) {\r\n    var r15 = U.rev15, imb = 15 - MAX_BITS;\r\n    for (var i = 0; i < tree.length; i += 2) {\r\n        var i0 = (tree[i] << (MAX_BITS - tree[i + 1]));\r\n        tree[i] = r15[i0] >>> imb;\r\n    }\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}