{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Column, Table } from '../../mol-data/db';\nimport { Task } from '../../mol-task';\nimport { createModels } from './basic/parser';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\n\nfunction getModels(mol, ctx) {\n  var molecules = mol.molecules;\n  var count = 0;\n\n  for (var _i = 0, molecules_1 = molecules; _i < molecules_1.length; _i++) {\n    var m = molecules_1[_i];\n    count += m.count;\n  }\n\n  var type_symbols = new Array(count);\n  var id = new Int32Array(count);\n  var x = new Float32Array(count);\n  var y = new Float32Array(count);\n  var z = new Float32Array(count);\n  var model_num = new Int32Array(count);\n  var offset = 0;\n\n  for (var i = 0; i < molecules.length; i++) {\n    var m = molecules[i];\n\n    for (var j = 0; j < m.count; j++) {\n      type_symbols[offset] = m.type_symbol.value(j);\n      x[offset] = m.x.value(j);\n      y[offset] = m.y.value(j);\n      z[offset] = m.z.value(j);\n      id[offset] = j;\n      model_num[offset] = i;\n      offset++;\n    }\n  }\n\n  var MOL = Column.ofConst('MOL', count, Column.Schema.str);\n  var A = Column.ofConst('A', count, Column.Schema.str);\n  var seq_id = Column.ofConst(1, count, Column.Schema.int);\n  var type_symbol = Column.ofStringArray(type_symbols);\n  var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n    auth_asym_id: A,\n    auth_atom_id: type_symbol,\n    auth_comp_id: MOL,\n    auth_seq_id: seq_id,\n    Cartn_x: Column.ofFloatArray(x),\n    Cartn_y: Column.ofFloatArray(y),\n    Cartn_z: Column.ofFloatArray(z),\n    id: Column.ofIntArray(id),\n    label_asym_id: A,\n    label_atom_id: type_symbol,\n    label_comp_id: MOL,\n    label_seq_id: seq_id,\n    label_entity_id: Column.ofConst('1', count, Column.Schema.str),\n    occupancy: Column.ofConst(1, count, Column.Schema.float),\n    type_symbol: type_symbol,\n    pdbx_PDB_model_num: Column.ofIntArray(model_num)\n  }, count);\n  var entityBuilder = new EntityBuilder();\n  entityBuilder.setNames([['MOL', 'Unknown Entity']]);\n  entityBuilder.getEntityId('MOL', 0\n  /* Unknown */\n  , 'A');\n  var componentBuilder = new ComponentBuilder(seq_id, type_symbol);\n  componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\n  componentBuilder.add('MOL', 0);\n  var basics = createBasic({\n    entity: entityBuilder.getEntityTable(),\n    chem_comp: componentBuilder.getChemCompTable(),\n    atom_site: atom_site\n  });\n  return createModels(basics, XyzFormat.create(mol), ctx);\n} //\n\n\nexport { XyzFormat };\nvar XyzFormat;\n\n(function (XyzFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'xyz';\n  }\n\n  XyzFormat.is = is;\n\n  function create(mol) {\n    return {\n      kind: 'xyz',\n      name: 'xyz',\n      data: mol\n    };\n  }\n\n  XyzFormat.create = create;\n})(XyzFormat || (XyzFormat = {}));\n\nexport function trajectoryFromXyz(mol) {\n  return Task.create('Parse XYZ', function (ctx) {\n    return getModels(mol, ctx);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/xyz.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { Task } from '../../mol-task';\r\nimport { createModels } from './basic/parser';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nfunction getModels(mol, ctx) {\r\n    var molecules = mol.molecules;\r\n    var count = 0;\r\n    for (var _i = 0, molecules_1 = molecules; _i < molecules_1.length; _i++) {\r\n        var m = molecules_1[_i];\r\n        count += m.count;\r\n    }\r\n    var type_symbols = new Array(count);\r\n    var id = new Int32Array(count);\r\n    var x = new Float32Array(count);\r\n    var y = new Float32Array(count);\r\n    var z = new Float32Array(count);\r\n    var model_num = new Int32Array(count);\r\n    var offset = 0;\r\n    for (var i = 0; i < molecules.length; i++) {\r\n        var m = molecules[i];\r\n        for (var j = 0; j < m.count; j++) {\r\n            type_symbols[offset] = m.type_symbol.value(j);\r\n            x[offset] = m.x.value(j);\r\n            y[offset] = m.y.value(j);\r\n            z[offset] = m.z.value(j);\r\n            id[offset] = j;\r\n            model_num[offset] = i;\r\n            offset++;\r\n        }\r\n    }\r\n    var MOL = Column.ofConst('MOL', count, Column.Schema.str);\r\n    var A = Column.ofConst('A', count, Column.Schema.str);\r\n    var seq_id = Column.ofConst(1, count, Column.Schema.int);\r\n    var type_symbol = Column.ofStringArray(type_symbols);\r\n    var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n        auth_asym_id: A,\r\n        auth_atom_id: type_symbol,\r\n        auth_comp_id: MOL,\r\n        auth_seq_id: seq_id,\r\n        Cartn_x: Column.ofFloatArray(x),\r\n        Cartn_y: Column.ofFloatArray(y),\r\n        Cartn_z: Column.ofFloatArray(z),\r\n        id: Column.ofIntArray(id),\r\n        label_asym_id: A,\r\n        label_atom_id: type_symbol,\r\n        label_comp_id: MOL,\r\n        label_seq_id: seq_id,\r\n        label_entity_id: Column.ofConst('1', count, Column.Schema.str),\r\n        occupancy: Column.ofConst(1, count, Column.Schema.float),\r\n        type_symbol: type_symbol,\r\n        pdbx_PDB_model_num: Column.ofIntArray(model_num),\r\n    }, count);\r\n    var entityBuilder = new EntityBuilder();\r\n    entityBuilder.setNames([['MOL', 'Unknown Entity']]);\r\n    entityBuilder.getEntityId('MOL', 0 /* Unknown */, 'A');\r\n    var componentBuilder = new ComponentBuilder(seq_id, type_symbol);\r\n    componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\r\n    componentBuilder.add('MOL', 0);\r\n    var basics = createBasic({\r\n        entity: entityBuilder.getEntityTable(),\r\n        chem_comp: componentBuilder.getChemCompTable(),\r\n        atom_site: atom_site\r\n    });\r\n    return createModels(basics, XyzFormat.create(mol), ctx);\r\n}\r\n//\r\nexport { XyzFormat };\r\nvar XyzFormat;\r\n(function (XyzFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'xyz';\r\n    }\r\n    XyzFormat.is = is;\r\n    function create(mol) {\r\n        return { kind: 'xyz', name: 'xyz', data: mol };\r\n    }\r\n    XyzFormat.create = create;\r\n})(XyzFormat || (XyzFormat = {}));\r\nexport function trajectoryFromXyz(mol) {\r\n    return Task.create('Parse XYZ', function (ctx) { return getModels(mol, ctx); });\r\n}\r\n//# sourceMappingURL=xyz.js.map"]},"metadata":{},"sourceType":"module"}