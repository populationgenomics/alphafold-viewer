{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorMap } from '../../mol-util/color';\nimport { StructureElement, Bond } from '../../mol-model/structure';\nimport { getElementMoleculeType } from '../../mol-model/structure/util';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { TableLegend } from '../../mol-util/legend';\nimport { getAdjustedColorMap } from '../../mol-util/color/color';\nexport var MoleculeTypeColors = ColorMap({\n  water: 0x386cb0,\n  ion: 0xf0027f,\n  protein: 0xbeaed4,\n  RNA: 0xfdc086,\n  DNA: 0xbf5b17,\n  PNA: 0x42A49A,\n  saccharide: 0x7fc97f\n});\nvar DefaultMoleculeTypeColor = Color(0xffff99);\nvar Description = 'Assigns a color based on the molecule type of a residue.';\nexport var MoleculeTypeColorThemeParams = {\n  saturation: PD.Numeric(0, {\n    min: -6,\n    max: 6,\n    step: 0.1\n  }),\n  lightness: PD.Numeric(0, {\n    min: -6,\n    max: 6,\n    step: 0.1\n  })\n};\nexport function getMoleculeTypeColorThemeParams(ctx) {\n  return MoleculeTypeColorThemeParams; // TODO return copy\n}\nexport function moleculeTypeColor(colorMap, unit, element) {\n  var moleculeType = getElementMoleculeType(unit, element);\n\n  switch (moleculeType) {\n    case 2\n    /* Water */\n    :\n      return colorMap.water;\n\n    case 3\n    /* Ion */\n    :\n      return colorMap.ion;\n\n    case 5\n    /* Protein */\n    :\n      return colorMap.protein;\n\n    case 6\n    /* RNA */\n    :\n      return colorMap.RNA;\n\n    case 7\n    /* DNA */\n    :\n      return colorMap.DNA;\n\n    case 8\n    /* PNA */\n    :\n      return colorMap.PNA;\n\n    case 9\n    /* Saccharide */\n    :\n      return colorMap.saccharide;\n  }\n\n  return DefaultMoleculeTypeColor;\n}\nexport function MoleculeTypeColorTheme(ctx, props) {\n  var colorMap = getAdjustedColorMap(MoleculeTypeColors, props.saturation, props.lightness);\n\n  function color(location) {\n    if (StructureElement.Location.is(location)) {\n      return moleculeTypeColor(colorMap, location.unit, location.element);\n    } else if (Bond.isLocation(location)) {\n      return moleculeTypeColor(colorMap, location.aUnit, location.aUnit.elements[location.aIndex]);\n    }\n\n    return DefaultMoleculeTypeColor;\n  }\n\n  return {\n    factory: MoleculeTypeColorTheme,\n    granularity: 'group',\n    color: color,\n    props: props,\n    description: Description,\n    legend: TableLegend(Object.keys(MoleculeTypeColors).map(function (name) {\n      return [name, MoleculeTypeColors[name]];\n    }).concat([['Other/unknown', DefaultMoleculeTypeColor]]))\n  };\n}\nexport var MoleculeTypeColorThemeProvider = {\n  name: 'molecule-type',\n  label: 'Molecule Type',\n  category: \"Residue Property\"\n  /* Residue */\n  ,\n  factory: MoleculeTypeColorTheme,\n  getParams: getMoleculeTypeColorThemeParams,\n  defaultValues: PD.getDefaultValues(MoleculeTypeColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/molecule-type.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorMap } from '../../mol-util/color';\r\nimport { StructureElement, Bond } from '../../mol-model/structure';\r\nimport { getElementMoleculeType } from '../../mol-model/structure/util';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { TableLegend } from '../../mol-util/legend';\r\nimport { getAdjustedColorMap } from '../../mol-util/color/color';\r\nexport var MoleculeTypeColors = ColorMap({\r\n    water: 0x386cb0,\r\n    ion: 0xf0027f,\r\n    protein: 0xbeaed4,\r\n    RNA: 0xfdc086,\r\n    DNA: 0xbf5b17,\r\n    PNA: 0x42A49A,\r\n    saccharide: 0x7fc97f,\r\n});\r\nvar DefaultMoleculeTypeColor = Color(0xffff99);\r\nvar Description = 'Assigns a color based on the molecule type of a residue.';\r\nexport var MoleculeTypeColorThemeParams = {\r\n    saturation: PD.Numeric(0, { min: -6, max: 6, step: 0.1 }),\r\n    lightness: PD.Numeric(0, { min: -6, max: 6, step: 0.1 })\r\n};\r\nexport function getMoleculeTypeColorThemeParams(ctx) {\r\n    return MoleculeTypeColorThemeParams; // TODO return copy\r\n}\r\nexport function moleculeTypeColor(colorMap, unit, element) {\r\n    var moleculeType = getElementMoleculeType(unit, element);\r\n    switch (moleculeType) {\r\n        case 2 /* Water */: return colorMap.water;\r\n        case 3 /* Ion */: return colorMap.ion;\r\n        case 5 /* Protein */: return colorMap.protein;\r\n        case 6 /* RNA */: return colorMap.RNA;\r\n        case 7 /* DNA */: return colorMap.DNA;\r\n        case 8 /* PNA */: return colorMap.PNA;\r\n        case 9 /* Saccharide */: return colorMap.saccharide;\r\n    }\r\n    return DefaultMoleculeTypeColor;\r\n}\r\nexport function MoleculeTypeColorTheme(ctx, props) {\r\n    var colorMap = getAdjustedColorMap(MoleculeTypeColors, props.saturation, props.lightness);\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location)) {\r\n            return moleculeTypeColor(colorMap, location.unit, location.element);\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            return moleculeTypeColor(colorMap, location.aUnit, location.aUnit.elements[location.aIndex]);\r\n        }\r\n        return DefaultMoleculeTypeColor;\r\n    }\r\n    return {\r\n        factory: MoleculeTypeColorTheme,\r\n        granularity: 'group',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: TableLegend(Object.keys(MoleculeTypeColors).map(function (name) {\r\n            return [name, MoleculeTypeColors[name]];\r\n        }).concat([['Other/unknown', DefaultMoleculeTypeColor]]))\r\n    };\r\n}\r\nexport var MoleculeTypeColorThemeProvider = {\r\n    name: 'molecule-type',\r\n    label: 'Molecule Type',\r\n    category: \"Residue Property\" /* Residue */,\r\n    factory: MoleculeTypeColorTheme,\r\n    getParams: getMoleculeTypeColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(MoleculeTypeColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=molecule-type.js.map"]},"metadata":{},"sourceType":"module"}