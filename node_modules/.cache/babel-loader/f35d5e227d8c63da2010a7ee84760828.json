{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Vec3 } from '../../mol-math/linear-algebra';\nimport { PrimitiveBuilder } from './primitive';\nimport { polygon } from './polygon';\nvar on = Vec3(),\n    op = Vec3();\nvar a = Vec3(),\n    b = Vec3(),\n    c = Vec3(),\n    d = Vec3();\nexport var DefaultPrismProps = {\n  height: 1,\n  topCap: true,\n  bottomCap: true\n};\n/**\r\n * Create a prism with a base of 3 or more points\r\n */\n\nexport function Prism(points, props) {\n  var sideCount = points.length / 3;\n  if (sideCount < 3) throw new Error('need at least 3 points to build a prism');\n\n  var _a = __assign(__assign({}, DefaultPrismProps), props),\n      height = _a.height,\n      topCap = _a.topCap,\n      bottomCap = _a.bottomCap;\n\n  var triangleCount = sideCount * 2;\n  var vertexCount = sideCount * 4;\n  var capCount = (topCap ? 1 : 0) + (bottomCap ? 1 : 0);\n\n  if (sideCount === 3) {\n    triangleCount += capCount;\n    vertexCount += capCount * 3;\n  } else if (sideCount === 4) {\n    triangleCount += capCount * 2;\n    vertexCount += capCount * 4;\n  } else {\n    triangleCount += capCount * sideCount;\n    vertexCount += capCount * sideCount * 3;\n  }\n\n  var builder = PrimitiveBuilder(triangleCount, vertexCount);\n  var halfHeight = height * 0.5;\n  Vec3.set(on, 0, 0, -halfHeight);\n  Vec3.set(op, 0, 0, halfHeight); // create sides\n\n  for (var i = 0; i < sideCount; ++i) {\n    var ni = (i + 1) % sideCount;\n    Vec3.set(a, points[i * 3], points[i * 3 + 1], -halfHeight);\n    Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -halfHeight);\n    Vec3.set(c, points[ni * 3], points[ni * 3 + 1], halfHeight);\n    Vec3.set(d, points[i * 3], points[i * 3 + 1], halfHeight);\n    builder.addQuad(a, b, c, d);\n  } // create bases\n\n\n  if (sideCount === 3) {\n    if (topCap) {\n      Vec3.set(a, points[0], points[1], -halfHeight);\n      Vec3.set(b, points[3], points[4], -halfHeight);\n      Vec3.set(c, points[6], points[7], -halfHeight);\n      builder.add(c, b, a);\n    }\n\n    if (bottomCap) {\n      Vec3.set(a, points[0], points[1], halfHeight);\n      Vec3.set(b, points[3], points[4], halfHeight);\n      Vec3.set(c, points[6], points[7], halfHeight);\n      builder.add(a, b, c);\n    }\n  } else if (sideCount === 4) {\n    if (topCap) {\n      Vec3.set(a, points[0], points[1], -halfHeight);\n      Vec3.set(b, points[3], points[4], -halfHeight);\n      Vec3.set(c, points[6], points[7], -halfHeight);\n      Vec3.set(d, points[9], points[10], -halfHeight);\n      builder.addQuad(d, c, b, a);\n    }\n\n    if (bottomCap) {\n      Vec3.set(a, points[0], points[1], halfHeight);\n      Vec3.set(b, points[3], points[4], halfHeight);\n      Vec3.set(c, points[6], points[7], halfHeight);\n      Vec3.set(d, points[9], points[10], halfHeight);\n      builder.addQuad(a, b, c, d);\n    }\n  } else {\n    for (var i = 0; i < sideCount; ++i) {\n      var ni = (i + 1) % sideCount;\n\n      if (topCap) {\n        Vec3.set(a, points[i * 3], points[i * 3 + 1], -halfHeight);\n        Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -halfHeight);\n        builder.add(on, b, a);\n      }\n\n      if (bottomCap) {\n        Vec3.set(a, points[i * 3], points[i * 3 + 1], halfHeight);\n        Vec3.set(b, points[ni * 3], points[ni * 3 + 1], halfHeight);\n        builder.add(a, b, op);\n      }\n    }\n  }\n\n  return builder.getPrimitive();\n}\nvar diamond;\nexport function DiamondPrism() {\n  if (!diamond) diamond = Prism(polygon(4, false));\n  return diamond;\n}\nvar pentagonalPrism;\nexport function PentagonalPrism() {\n  if (!pentagonalPrism) pentagonalPrism = Prism(polygon(5, false));\n  return pentagonalPrism;\n}\nvar hexagonalPrism;\nexport function HexagonalPrism() {\n  if (!hexagonalPrism) hexagonalPrism = Prism(polygon(6, false));\n  return hexagonalPrism;\n}\nvar shiftedHexagonalPrism;\nexport function ShiftedHexagonalPrism() {\n  if (!shiftedHexagonalPrism) shiftedHexagonalPrism = Prism(polygon(6, true));\n  return shiftedHexagonalPrism;\n}\nvar heptagonalPrism;\nexport function HeptagonalPrism() {\n  if (!heptagonalPrism) heptagonalPrism = Prism(polygon(7, false));\n  return heptagonalPrism;\n} //\n\n/**\r\n * Create a prism cage\r\n */\n\nexport function PrismCage(points, height) {\n  if (height === void 0) {\n    height = 1;\n  }\n\n  var sideCount = points.length / 3;\n  var vertices = [];\n  var edges = [];\n  var halfHeight = height * 0.5;\n  var offset = 0; // vertices and side edges\n\n  for (var i = 0; i < sideCount; ++i) {\n    vertices.push(points[i * 3], points[i * 3 + 1], -halfHeight, points[i * 3], points[i * 3 + 1], halfHeight);\n    edges.push(offset, offset + 1);\n    offset += 2;\n  } // bases edges\n\n\n  for (var i = 0; i < sideCount; ++i) {\n    var ni = (i + 1) % sideCount;\n    edges.push(i * 2, ni * 2, i * 2 + 1, ni * 2 + 1);\n  }\n\n  return {\n    vertices: vertices,\n    edges: edges\n  };\n}\nvar diamondCage;\nexport function DiamondPrismCage() {\n  if (!diamondCage) diamondCage = PrismCage(polygon(4, false));\n  return diamondCage;\n}\nvar pentagonalPrismCage;\nexport function PentagonalPrismCage() {\n  if (!pentagonalPrismCage) pentagonalPrismCage = PrismCage(polygon(5, false));\n  return pentagonalPrismCage;\n}\nvar hexagonalPrismCage;\nexport function HexagonalPrismCage() {\n  if (!hexagonalPrismCage) hexagonalPrismCage = PrismCage(polygon(6, false));\n  return hexagonalPrismCage;\n}","map":{"version":3,"sources":["../../../src/mol-geo/primitive/prism.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nimport { PrimitiveBuilder } from './primitive';\r\nimport { polygon } from './polygon';\r\nvar on = Vec3(), op = Vec3();\r\nvar a = Vec3(), b = Vec3(), c = Vec3(), d = Vec3();\r\nexport var DefaultPrismProps = {\r\n    height: 1,\r\n    topCap: true,\r\n    bottomCap: true,\r\n};\r\n/**\r\n * Create a prism with a base of 3 or more points\r\n */\r\nexport function Prism(points, props) {\r\n    var sideCount = points.length / 3;\r\n    if (sideCount < 3)\r\n        throw new Error('need at least 3 points to build a prism');\r\n    var _a = __assign(__assign({}, DefaultPrismProps), props), height = _a.height, topCap = _a.topCap, bottomCap = _a.bottomCap;\r\n    var triangleCount = sideCount * 2;\r\n    var vertexCount = sideCount * 4;\r\n    var capCount = (topCap ? 1 : 0) + (bottomCap ? 1 : 0);\r\n    if (sideCount === 3) {\r\n        triangleCount += capCount;\r\n        vertexCount += capCount * 3;\r\n    }\r\n    else if (sideCount === 4) {\r\n        triangleCount += capCount * 2;\r\n        vertexCount += capCount * 4;\r\n    }\r\n    else {\r\n        triangleCount += capCount * sideCount;\r\n        vertexCount += capCount * sideCount * 3;\r\n    }\r\n    var builder = PrimitiveBuilder(triangleCount, vertexCount);\r\n    var halfHeight = height * 0.5;\r\n    Vec3.set(on, 0, 0, -halfHeight);\r\n    Vec3.set(op, 0, 0, halfHeight);\r\n    // create sides\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        var ni = (i + 1) % sideCount;\r\n        Vec3.set(a, points[i * 3], points[i * 3 + 1], -halfHeight);\r\n        Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -halfHeight);\r\n        Vec3.set(c, points[ni * 3], points[ni * 3 + 1], halfHeight);\r\n        Vec3.set(d, points[i * 3], points[i * 3 + 1], halfHeight);\r\n        builder.addQuad(a, b, c, d);\r\n    }\r\n    // create bases\r\n    if (sideCount === 3) {\r\n        if (topCap) {\r\n            Vec3.set(a, points[0], points[1], -halfHeight);\r\n            Vec3.set(b, points[3], points[4], -halfHeight);\r\n            Vec3.set(c, points[6], points[7], -halfHeight);\r\n            builder.add(c, b, a);\r\n        }\r\n        if (bottomCap) {\r\n            Vec3.set(a, points[0], points[1], halfHeight);\r\n            Vec3.set(b, points[3], points[4], halfHeight);\r\n            Vec3.set(c, points[6], points[7], halfHeight);\r\n            builder.add(a, b, c);\r\n        }\r\n    }\r\n    else if (sideCount === 4) {\r\n        if (topCap) {\r\n            Vec3.set(a, points[0], points[1], -halfHeight);\r\n            Vec3.set(b, points[3], points[4], -halfHeight);\r\n            Vec3.set(c, points[6], points[7], -halfHeight);\r\n            Vec3.set(d, points[9], points[10], -halfHeight);\r\n            builder.addQuad(d, c, b, a);\r\n        }\r\n        if (bottomCap) {\r\n            Vec3.set(a, points[0], points[1], halfHeight);\r\n            Vec3.set(b, points[3], points[4], halfHeight);\r\n            Vec3.set(c, points[6], points[7], halfHeight);\r\n            Vec3.set(d, points[9], points[10], halfHeight);\r\n            builder.addQuad(a, b, c, d);\r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i < sideCount; ++i) {\r\n            var ni = (i + 1) % sideCount;\r\n            if (topCap) {\r\n                Vec3.set(a, points[i * 3], points[i * 3 + 1], -halfHeight);\r\n                Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -halfHeight);\r\n                builder.add(on, b, a);\r\n            }\r\n            if (bottomCap) {\r\n                Vec3.set(a, points[i * 3], points[i * 3 + 1], halfHeight);\r\n                Vec3.set(b, points[ni * 3], points[ni * 3 + 1], halfHeight);\r\n                builder.add(a, b, op);\r\n            }\r\n        }\r\n    }\r\n    return builder.getPrimitive();\r\n}\r\nvar diamond;\r\nexport function DiamondPrism() {\r\n    if (!diamond)\r\n        diamond = Prism(polygon(4, false));\r\n    return diamond;\r\n}\r\nvar pentagonalPrism;\r\nexport function PentagonalPrism() {\r\n    if (!pentagonalPrism)\r\n        pentagonalPrism = Prism(polygon(5, false));\r\n    return pentagonalPrism;\r\n}\r\nvar hexagonalPrism;\r\nexport function HexagonalPrism() {\r\n    if (!hexagonalPrism)\r\n        hexagonalPrism = Prism(polygon(6, false));\r\n    return hexagonalPrism;\r\n}\r\nvar shiftedHexagonalPrism;\r\nexport function ShiftedHexagonalPrism() {\r\n    if (!shiftedHexagonalPrism)\r\n        shiftedHexagonalPrism = Prism(polygon(6, true));\r\n    return shiftedHexagonalPrism;\r\n}\r\nvar heptagonalPrism;\r\nexport function HeptagonalPrism() {\r\n    if (!heptagonalPrism)\r\n        heptagonalPrism = Prism(polygon(7, false));\r\n    return heptagonalPrism;\r\n}\r\n//\r\n/**\r\n * Create a prism cage\r\n */\r\nexport function PrismCage(points, height) {\r\n    if (height === void 0) { height = 1; }\r\n    var sideCount = points.length / 3;\r\n    var vertices = [];\r\n    var edges = [];\r\n    var halfHeight = height * 0.5;\r\n    var offset = 0;\r\n    // vertices and side edges\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        vertices.push(points[i * 3], points[i * 3 + 1], -halfHeight, points[i * 3], points[i * 3 + 1], halfHeight);\r\n        edges.push(offset, offset + 1);\r\n        offset += 2;\r\n    }\r\n    // bases edges\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        var ni = (i + 1) % sideCount;\r\n        edges.push(i * 2, ni * 2, i * 2 + 1, ni * 2 + 1);\r\n    }\r\n    return { vertices: vertices, edges: edges };\r\n}\r\nvar diamondCage;\r\nexport function DiamondPrismCage() {\r\n    if (!diamondCage)\r\n        diamondCage = PrismCage(polygon(4, false));\r\n    return diamondCage;\r\n}\r\nvar pentagonalPrismCage;\r\nexport function PentagonalPrismCage() {\r\n    if (!pentagonalPrismCage)\r\n        pentagonalPrismCage = PrismCage(polygon(5, false));\r\n    return pentagonalPrismCage;\r\n}\r\nvar hexagonalPrismCage;\r\nexport function HexagonalPrismCage() {\r\n    if (!hexagonalPrismCage)\r\n        hexagonalPrismCage = PrismCage(polygon(6, false));\r\n    return hexagonalPrismCage;\r\n}\r\n//# sourceMappingURL=prism.js.map"]},"metadata":{},"sourceType":"module"}