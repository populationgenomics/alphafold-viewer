{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\n/**\r\n * 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\r\n */\nexport function edt(data, width, height, f, d, v, z) {\n  for (var x = 0; x < width; x++) {\n    for (var y = 0; y < height; y++) {\n      f[y] = data[y * width + x];\n    }\n\n    edt1d(f, d, v, z, height);\n\n    for (var y = 0; y < height; y++) {\n      data[y * width + x] = d[y];\n    }\n  }\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      f[x] = data[y * width + x];\n    }\n\n    edt1d(f, d, v, z, width);\n\n    for (var x = 0; x < width; x++) {\n      data[y * width + x] = Math.sqrt(d[x]);\n    }\n  }\n}\n/**\r\n * 1D squared distance transform\r\n */\n\nfunction edt1d(f, d, v, z, n) {\n  v[0] = 0;\n  z[0] = Number.MIN_SAFE_INTEGER;\n  z[1] = Number.MAX_SAFE_INTEGER;\n\n  for (var q = 1, k = 0; q < n; q++) {\n    var s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\n\n    while (s <= z[k]) {\n      k--;\n      s = (f[q] + q * q - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\n    }\n\n    k++;\n    v[k] = q;\n    z[k] = s;\n    z[k + 1] = Number.MAX_SAFE_INTEGER;\n  }\n\n  for (var q = 0, k = 0; q < n; q++) {\n    while (z[k + 1] < q) k++;\n\n    d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];\n  }\n}","map":{"version":3,"sources":["../../../src/mol-math/geometry/distance-transform.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n/**\r\n * 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\r\n */\r\nexport function edt(data, width, height, f, d, v, z) {\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            f[y] = data[y * width + x];\r\n        }\r\n        edt1d(f, d, v, z, height);\r\n        for (var y = 0; y < height; y++) {\r\n            data[y * width + x] = d[y];\r\n        }\r\n    }\r\n    for (var y = 0; y < height; y++) {\r\n        for (var x = 0; x < width; x++) {\r\n            f[x] = data[y * width + x];\r\n        }\r\n        edt1d(f, d, v, z, width);\r\n        for (var x = 0; x < width; x++) {\r\n            data[y * width + x] = Math.sqrt(d[x]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * 1D squared distance transform\r\n */\r\nfunction edt1d(f, d, v, z, n) {\r\n    v[0] = 0;\r\n    z[0] = Number.MIN_SAFE_INTEGER;\r\n    z[1] = Number.MAX_SAFE_INTEGER;\r\n    for (var q = 1, k = 0; q < n; q++) {\r\n        var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\r\n        while (s <= z[k]) {\r\n            k--;\r\n            s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);\r\n        }\r\n        k++;\r\n        v[k] = q;\r\n        z[k] = s;\r\n        z[k + 1] = Number.MAX_SAFE_INTEGER;\r\n    }\r\n    for (var q = 0, k = 0; q < n; q++) {\r\n        while (z[k + 1] < q)\r\n            k++;\r\n        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];\r\n    }\r\n}\r\n//# sourceMappingURL=distance-transform.js.map"]},"metadata":{},"sourceType":"module"}