{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { computeRings, getFingerprint, createIndex } from './rings/compute';\nimport { SortedArray } from '../../../../mol-data/int';\nimport { BondType } from '../../model/types';\nimport { getPositions } from '../../util';\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\n\nvar UnitRings =\n/** @class */\nfunction () {\n  function UnitRings(all, unit) {\n    this.unit = unit;\n    this.all = all;\n  }\n\n  Object.defineProperty(UnitRings.prototype, \"index\", {\n    get: function () {\n      if (this._index) return this._index;\n      this._index = createIndex(this.all, this.aromaticRings);\n      return this._index;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"byFingerprint\", {\n    get: function () {\n      if (this._byFingerprint) return this._byFingerprint;\n      this._byFingerprint = createByFingerprint(this.unit, this.all);\n      return this._byFingerprint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"elementRingIndices\", {\n    /** Maps atom index inside a Unit to ring indices (an atom can be part of more than one ring) */\n    get: function () {\n      return this.index.elementRingIndices;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"elementAromaticRingIndices\", {\n    get: function () {\n      return this.index.elementAromaticRingIndices;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"ringComponentIndex\", {\n    /** Maps UnitRings.Index to index to ringComponents */\n    get: function () {\n      return this.index.ringComponentIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"ringComponents\", {\n    get: function () {\n      return this.index.ringComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UnitRings.prototype, \"aromaticRings\", {\n    get: function () {\n      if (this._aromaticRings) return this._aromaticRings;\n      this._aromaticRings = getAromaticRings(this.unit, this.all);\n      return this._aromaticRings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UnitRings;\n}();\n\nvar UnitRing;\n\n(function (UnitRing) {\n  function fingerprint(unit, ring) {\n    var elements = unit.elements;\n    var type_symbol = unit.model.atomicHierarchy.atoms.type_symbol;\n    var symbols = [];\n\n    for (var i = 0, _i = ring.length; i < _i; i++) symbols[symbols.length] = type_symbol.value(elements[ring[i]]);\n\n    return elementFingerprint(symbols);\n  }\n\n  UnitRing.fingerprint = fingerprint;\n\n  function elementFingerprint(elements) {\n    return getFingerprint(elements);\n  }\n\n  UnitRing.elementFingerprint = elementFingerprint;\n  var AromaticRingElements = new Set([\"B\"\n  /* B */\n  , \"C\"\n  /* C */\n  , \"N\"\n  /* N */\n  , \"O\"\n  /* O */\n  , \"SI\"\n  /* SI */\n  , \"P\"\n  /* P */\n  , \"S\"\n  /* S */\n  , \"GE\"\n  /* GE */\n  , \"AS\"\n  /* AS */\n  , \"SN\"\n  /* SN */\n  , \"SB\"\n  /* SB */\n  , \"BI\"\n  /* BI */\n  ]);\n  var AromaticRingPlanarityThreshold = 0.05;\n\n  function isAromatic(unit, ring) {\n    var elements = unit.elements,\n        _a = unit.bonds,\n        b = _a.b,\n        offset = _a.offset,\n        flags = _a.edgeProps.flags;\n    var _b = unit.model.atomicHierarchy.atoms,\n        type_symbol = _b.type_symbol,\n        label_comp_id = _b.label_comp_id; // ignore Proline (can be flat because of bad geometry)\n\n    if (label_comp_id.value(unit.elements[ring[0]]) === 'PRO') return false;\n    var aromaticBondCount = 0;\n    var hasAromaticRingElement = false;\n\n    for (var i = 0, il = ring.length; i < il; ++i) {\n      var aI = ring[i];\n\n      if (!hasAromaticRingElement && AromaticRingElements.has(type_symbol.value(elements[aI]))) {\n        hasAromaticRingElement = true;\n      }\n\n      for (var j = offset[aI], jl = offset[aI + 1]; j < jl; ++j) {\n        // comes e.g. from `chem_comp_bond.pdbx_aromatic_flag`\n        if (BondType.is(16\n        /* Aromatic */\n        , flags[j])) {\n          if (SortedArray.has(ring, b[j])) aromaticBondCount += 1;\n        }\n      }\n    }\n\n    if (aromaticBondCount === 2 * ring.length) return true;\n    if (!hasAromaticRingElement) return false;\n    var ma = PrincipalAxes.calculateMomentsAxes(getPositions(unit, ring));\n    return Vec3.magnitude(ma.dirC) < AromaticRingPlanarityThreshold;\n  }\n\n  UnitRing.isAromatic = isAromatic;\n  /** Get the alternate location of the 1st non '' alt loc atom. */\n\n  function getAltId(unit, ring) {\n    var label_alt_id = unit.model.atomicHierarchy.atoms.label_alt_id;\n    var elements = unit.elements;\n\n    for (var i = 0, il = ring.length; i < il; ++i) {\n      var eI = elements[ring[i]];\n      var altId = label_alt_id.value(eI);\n      if (altId) return altId;\n    }\n\n    return '';\n  }\n\n  UnitRing.getAltId = getAltId;\n})(UnitRing || (UnitRing = {}));\n\n(function (UnitRings) {\n  function create(unit) {\n    var rings = computeRings(unit);\n    return new UnitRings(rings, unit);\n  }\n\n  UnitRings.create = create;\n  /** Creates a mapping ResidueIndex -> list or rings that are on that residue and have one of the specified fingerprints. */\n\n  function byFingerprintAndResidue(rings, fingerprints) {\n    var map = new Map();\n\n    for (var fI = 0, _fI = fingerprints.length; fI < _fI; fI++) {\n      var fp = fingerprints[fI];\n      addSingleResidueRings(rings, fp, map);\n    }\n\n    return map;\n  }\n\n  UnitRings.byFingerprintAndResidue = byFingerprintAndResidue;\n})(UnitRings || (UnitRings = {}));\n\nfunction createByFingerprint(unit, rings) {\n  var byFingerprint = new Map();\n  var idx = 0;\n\n  for (var rI = 0, _rI = rings.length; rI < _rI; rI++) {\n    var r = rings[rI];\n    var fp = UnitRing.fingerprint(unit, r);\n    if (byFingerprint.has(fp)) byFingerprint.get(fp).push(idx);else byFingerprint.set(fp, [idx]);\n    idx++;\n  }\n\n  return byFingerprint;\n}\n\nfunction ringResidueIdx(unit, ring) {\n  var elements = unit.elements;\n  var residueIndex = unit.model.atomicHierarchy.residueAtomSegments.index;\n  var idx = residueIndex[elements[ring[0]]];\n\n  for (var rI = 1, _rI = ring.length; rI < _rI; rI++) {\n    if (idx !== residueIndex[elements[ring[rI]]]) return -1;\n  }\n\n  return idx;\n}\n\nfunction addSingleResidueRings(rings, fp, map) {\n  var byFp = rings.byFingerprint.get(fp);\n  if (!byFp) return;\n\n  for (var rI = 0, _rI = byFp.length; rI < _rI; rI++) {\n    var r = byFp[rI];\n    var idx = ringResidueIdx(rings.unit, rings.all[r]);\n\n    if (idx >= 0) {\n      if (map.has(idx)) map.get(idx).push(r);else map.set(idx, [r]);\n    }\n  }\n}\n\nfunction getAromaticRings(unit, rings) {\n  var aromaticRings = [];\n\n  for (var i = 0, il = rings.length; i < il; ++i) {\n    if (UnitRing.isAromatic(unit, rings[i])) aromaticRings.push(i);\n  }\n\n  return aromaticRings;\n}\n\nexport { UnitRing, UnitRings };","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/unit/rings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { computeRings, getFingerprint, createIndex } from './rings/compute';\r\nimport { SortedArray } from '../../../../mol-data/int';\r\nimport { BondType } from '../../model/types';\r\nimport { getPositions } from '../../util';\r\nimport { PrincipalAxes } from '../../../../mol-math/linear-algebra/matrix/principal-axes';\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nvar UnitRings = /** @class */ (function () {\r\n    function UnitRings(all, unit) {\r\n        this.unit = unit;\r\n        this.all = all;\r\n    }\r\n    Object.defineProperty(UnitRings.prototype, \"index\", {\r\n        get: function () {\r\n            if (this._index)\r\n                return this._index;\r\n            this._index = createIndex(this.all, this.aromaticRings);\r\n            return this._index;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"byFingerprint\", {\r\n        get: function () {\r\n            if (this._byFingerprint)\r\n                return this._byFingerprint;\r\n            this._byFingerprint = createByFingerprint(this.unit, this.all);\r\n            return this._byFingerprint;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"elementRingIndices\", {\r\n        /** Maps atom index inside a Unit to ring indices (an atom can be part of more than one ring) */\r\n        get: function () {\r\n            return this.index.elementRingIndices;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"elementAromaticRingIndices\", {\r\n        get: function () {\r\n            return this.index.elementAromaticRingIndices;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"ringComponentIndex\", {\r\n        /** Maps UnitRings.Index to index to ringComponents */\r\n        get: function () {\r\n            return this.index.ringComponentIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"ringComponents\", {\r\n        get: function () {\r\n            return this.index.ringComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UnitRings.prototype, \"aromaticRings\", {\r\n        get: function () {\r\n            if (this._aromaticRings)\r\n                return this._aromaticRings;\r\n            this._aromaticRings = getAromaticRings(this.unit, this.all);\r\n            return this._aromaticRings;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return UnitRings;\r\n}());\r\nvar UnitRing;\r\n(function (UnitRing) {\r\n    function fingerprint(unit, ring) {\r\n        var elements = unit.elements;\r\n        var type_symbol = unit.model.atomicHierarchy.atoms.type_symbol;\r\n        var symbols = [];\r\n        for (var i = 0, _i = ring.length; i < _i; i++)\r\n            symbols[symbols.length] = type_symbol.value(elements[ring[i]]);\r\n        return elementFingerprint(symbols);\r\n    }\r\n    UnitRing.fingerprint = fingerprint;\r\n    function elementFingerprint(elements) {\r\n        return getFingerprint(elements);\r\n    }\r\n    UnitRing.elementFingerprint = elementFingerprint;\r\n    var AromaticRingElements = new Set([\r\n        \"B\" /* B */, \"C\" /* C */, \"N\" /* N */, \"O\" /* O */,\r\n        \"SI\" /* SI */, \"P\" /* P */, \"S\" /* S */,\r\n        \"GE\" /* GE */, \"AS\" /* AS */,\r\n        \"SN\" /* SN */, \"SB\" /* SB */,\r\n        \"BI\" /* BI */\r\n    ]);\r\n    var AromaticRingPlanarityThreshold = 0.05;\r\n    function isAromatic(unit, ring) {\r\n        var elements = unit.elements, _a = unit.bonds, b = _a.b, offset = _a.offset, flags = _a.edgeProps.flags;\r\n        var _b = unit.model.atomicHierarchy.atoms, type_symbol = _b.type_symbol, label_comp_id = _b.label_comp_id;\r\n        // ignore Proline (can be flat because of bad geometry)\r\n        if (label_comp_id.value(unit.elements[ring[0]]) === 'PRO')\r\n            return false;\r\n        var aromaticBondCount = 0;\r\n        var hasAromaticRingElement = false;\r\n        for (var i = 0, il = ring.length; i < il; ++i) {\r\n            var aI = ring[i];\r\n            if (!hasAromaticRingElement && AromaticRingElements.has(type_symbol.value(elements[aI]))) {\r\n                hasAromaticRingElement = true;\r\n            }\r\n            for (var j = offset[aI], jl = offset[aI + 1]; j < jl; ++j) {\r\n                // comes e.g. from `chem_comp_bond.pdbx_aromatic_flag`\r\n                if (BondType.is(16 /* Aromatic */, flags[j])) {\r\n                    if (SortedArray.has(ring, b[j]))\r\n                        aromaticBondCount += 1;\r\n                }\r\n            }\r\n        }\r\n        if (aromaticBondCount === 2 * ring.length)\r\n            return true;\r\n        if (!hasAromaticRingElement)\r\n            return false;\r\n        var ma = PrincipalAxes.calculateMomentsAxes(getPositions(unit, ring));\r\n        return Vec3.magnitude(ma.dirC) < AromaticRingPlanarityThreshold;\r\n    }\r\n    UnitRing.isAromatic = isAromatic;\r\n    /** Get the alternate location of the 1st non '' alt loc atom. */\r\n    function getAltId(unit, ring) {\r\n        var label_alt_id = unit.model.atomicHierarchy.atoms.label_alt_id;\r\n        var elements = unit.elements;\r\n        for (var i = 0, il = ring.length; i < il; ++i) {\r\n            var eI = elements[ring[i]];\r\n            var altId = label_alt_id.value(eI);\r\n            if (altId)\r\n                return altId;\r\n        }\r\n        return '';\r\n    }\r\n    UnitRing.getAltId = getAltId;\r\n})(UnitRing || (UnitRing = {}));\r\n(function (UnitRings) {\r\n    function create(unit) {\r\n        var rings = computeRings(unit);\r\n        return new UnitRings(rings, unit);\r\n    }\r\n    UnitRings.create = create;\r\n    /** Creates a mapping ResidueIndex -> list or rings that are on that residue and have one of the specified fingerprints. */\r\n    function byFingerprintAndResidue(rings, fingerprints) {\r\n        var map = new Map();\r\n        for (var fI = 0, _fI = fingerprints.length; fI < _fI; fI++) {\r\n            var fp = fingerprints[fI];\r\n            addSingleResidueRings(rings, fp, map);\r\n        }\r\n        return map;\r\n    }\r\n    UnitRings.byFingerprintAndResidue = byFingerprintAndResidue;\r\n})(UnitRings || (UnitRings = {}));\r\nfunction createByFingerprint(unit, rings) {\r\n    var byFingerprint = new Map();\r\n    var idx = 0;\r\n    for (var rI = 0, _rI = rings.length; rI < _rI; rI++) {\r\n        var r = rings[rI];\r\n        var fp = UnitRing.fingerprint(unit, r);\r\n        if (byFingerprint.has(fp))\r\n            byFingerprint.get(fp).push(idx);\r\n        else\r\n            byFingerprint.set(fp, [idx]);\r\n        idx++;\r\n    }\r\n    return byFingerprint;\r\n}\r\nfunction ringResidueIdx(unit, ring) {\r\n    var elements = unit.elements;\r\n    var residueIndex = unit.model.atomicHierarchy.residueAtomSegments.index;\r\n    var idx = residueIndex[elements[ring[0]]];\r\n    for (var rI = 1, _rI = ring.length; rI < _rI; rI++) {\r\n        if (idx !== residueIndex[elements[ring[rI]]])\r\n            return -1;\r\n    }\r\n    return idx;\r\n}\r\nfunction addSingleResidueRings(rings, fp, map) {\r\n    var byFp = rings.byFingerprint.get(fp);\r\n    if (!byFp)\r\n        return;\r\n    for (var rI = 0, _rI = byFp.length; rI < _rI; rI++) {\r\n        var r = byFp[rI];\r\n        var idx = ringResidueIdx(rings.unit, rings.all[r]);\r\n        if (idx >= 0) {\r\n            if (map.has(idx))\r\n                map.get(idx).push(r);\r\n            else\r\n                map.set(idx, [r]);\r\n        }\r\n    }\r\n}\r\nfunction getAromaticRings(unit, rings) {\r\n    var aromaticRings = [];\r\n    for (var i = 0, il = rings.length; i < il; ++i) {\r\n        if (UnitRing.isAromatic(unit, rings[i]))\r\n            aromaticRings.push(i);\r\n    }\r\n    return aromaticRings;\r\n}\r\nexport { UnitRing, UnitRings };\r\n//# sourceMappingURL=rings.js.map"]},"metadata":{},"sourceType":"module"}