{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nvar HashSetImpl =\n/** @class */\nfunction () {\n  function HashSetImpl(getHash, areEqual) {\n    this.getHash = getHash;\n    this.areEqual = areEqual;\n    this.size = 0;\n    this.byHash = new Map();\n  }\n\n  HashSetImpl.prototype.add = function (a) {\n    var hash = this.getHash(a);\n\n    if (this.byHash.has(hash)) {\n      var xs = this.byHash.get(hash);\n\n      for (var i = 0, _i = xs.length; i < _i; i++) {\n        if (this.areEqual(a, xs[i])) return false;\n      }\n\n      xs[xs.length] = a;\n      this.size++;\n      return true;\n    } else {\n      this.byHash.set(hash, [a]);\n      this.size++;\n      return true;\n    }\n  };\n\n  HashSetImpl.prototype.has = function (v) {\n    var hash = this.getHash(v);\n    if (!this.byHash.has(hash)) return false;\n    var xs = this.byHash.get(hash);\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      if (this.areEqual(v, xs[i])) return true;\n    }\n\n    return false;\n  };\n\n  return HashSetImpl;\n}(); // TODO: add implementations with multilevel hashing support?\n\n\nexport function HashSet(getHash, areEqual) {\n  return new HashSetImpl(getHash, areEqual);\n}","map":{"version":3,"sources":["../../../src/mol-data/generic/hash-set.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAQH,IAAA,WAAA;AAAA;AAAA,YAAA;AA+BI,WAAA,WAAA,CAAoB,OAApB,EAAoD,QAApD,EAAqF;AAAjE,SAAA,OAAA,GAAA,OAAA;AAAgC,SAAA,QAAA,GAAA,QAAA;AA9BpD,SAAA,IAAA,GAAe,CAAf;AACQ,SAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;AA6BkF;;AA3B1F,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,CAAJ,EAAQ;AACJ,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,CAAb,CAAb;;AACA,QAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,UAAM,EAAE,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAX;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,EAAE,CAAC,MAAxB,EAAgC,CAAC,GAAG,EAApC,EAAwC,CAAC,EAAzC,EAA6C;AACzC,YAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,EAAE,CAAC,CAAD,CAAnB,CAAJ,EAA6B,OAAO,KAAP;AAChC;;AACD,MAAA,EAAE,CAAC,EAAE,CAAC,MAAJ,CAAF,GAAgB,CAAhB;AACA,WAAK,IAAL;AACA,aAAO,IAAP;AACH,KARD,MAQO;AACH,WAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,EAAsB,CAAC,CAAD,CAAtB;AACA,WAAK,IAAL;AACA,aAAO,IAAP;AACH;AACJ,GAfD;;AAiBA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,CAAJ,EAAQ;AACJ,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,CAAb,CAAb;AACA,QAAI,CAAC,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAL,EAA4B,OAAO,KAAP;AAC5B,QAAM,EAAE,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAX;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,EAAE,CAAC,MAAxB,EAAgC,CAAC,GAAG,EAApC,EAAwC,CAAC,EAAzC,EAA6C;AACzC,UAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,EAAE,CAAC,CAAD,CAAnB,CAAJ,EAA6B,OAAO,IAAP;AAChC;;AACD,WAAO,KAAP;AACH,GARD;;AAWJ,SAAA,WAAA;AAAC,CAhCD,EAAA,C,CAiCA;;;AAEA,OAAM,SAAU,OAAV,CAAqB,OAArB,EAA6C,QAA7C,EAA8E;AAChF,SAAO,IAAI,WAAJ,CAAmB,OAAnB,EAA4B,QAA5B,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nvar HashSetImpl = /** @class */ (function () {\r\n    function HashSetImpl(getHash, areEqual) {\r\n        this.getHash = getHash;\r\n        this.areEqual = areEqual;\r\n        this.size = 0;\r\n        this.byHash = new Map();\r\n    }\r\n    HashSetImpl.prototype.add = function (a) {\r\n        var hash = this.getHash(a);\r\n        if (this.byHash.has(hash)) {\r\n            var xs = this.byHash.get(hash);\r\n            for (var i = 0, _i = xs.length; i < _i; i++) {\r\n                if (this.areEqual(a, xs[i]))\r\n                    return false;\r\n            }\r\n            xs[xs.length] = a;\r\n            this.size++;\r\n            return true;\r\n        }\r\n        else {\r\n            this.byHash.set(hash, [a]);\r\n            this.size++;\r\n            return true;\r\n        }\r\n    };\r\n    HashSetImpl.prototype.has = function (v) {\r\n        var hash = this.getHash(v);\r\n        if (!this.byHash.has(hash))\r\n            return false;\r\n        var xs = this.byHash.get(hash);\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            if (this.areEqual(v, xs[i]))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    return HashSetImpl;\r\n}());\r\n// TODO: add implementations with multilevel hashing support?\r\nexport function HashSet(getHash, areEqual) {\r\n    return new HashSetImpl(getHash, areEqual);\r\n}\r\n//# sourceMappingURL=hash-set.js.map"]},"metadata":{},"sourceType":"module"}