{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\nimport { SortedArray } from '../../../../mol-data/int';\nexport function getUnitProteinInfo(unit) {\n  var index = unit.model.atomicHierarchy.index;\n  var proteinElements = unit.proteinElements,\n      residueIndex = unit.residueIndex;\n  var residueCount = proteinElements.length;\n  var unitProteinResidues = new Uint32Array(residueCount);\n  var c = new Int32Array(residueCount);\n  var h = new Int32Array(residueCount);\n  var o = new Int32Array(residueCount);\n  var n = new Int32Array(residueCount);\n\n  for (var i = 0; i < residueCount; ++i) {\n    var rI = residueIndex[proteinElements[i]];\n    unitProteinResidues[i] = rI;\n    c[i] = index.findAtomOnResidue(rI, 'C');\n    h[i] = index.findAtomOnResidue(rI, 'H');\n    o[i] = index.findAtomOnResidue(rI, 'O');\n    n[i] = index.findAtomOnResidue(rI, 'N');\n  }\n\n  return {\n    residueIndices: SortedArray.ofSortedArray(unitProteinResidues),\n    cIndices: c,\n    hIndices: h,\n    oIndices: o,\n    nIndices: n\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/secondary-structure/dssp/protein-info.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAGH,SAAS,WAAT,QAA4B,0BAA5B;AAUA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAA8C;AACxC,MAAA,KAAK,GAAK,IAAI,CAAC,KAAL,CAAW,eAAX,CAAL,KAAL;AACA,MAAA,eAAe,GAAmB,IAAI,CAAvB,eAAf;AAAA,MAAiB,YAAY,GAAK,IAAI,CAAT,YAA7B;AACR,MAAM,YAAY,GAAG,eAAe,CAAC,MAArC;AAEA,MAAM,mBAAmB,GAAG,IAAI,WAAJ,CAAgB,YAAhB,CAA5B;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,YAAf,CAAV;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,YAAf,CAAV;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,YAAf,CAAV;AACA,MAAM,CAAC,GAAG,IAAI,UAAJ,CAAe,YAAf,CAAV;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAApB,EAAkC,EAAE,CAApC,EAAuC;AACnC,QAAM,EAAE,GAAG,YAAY,CAAC,eAAe,CAAC,CAAD,CAAhB,CAAvB;AACA,IAAA,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,EAAzB;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK,CAAC,iBAAN,CAAwB,EAAxB,EAA4B,GAA5B,CAAP;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK,CAAC,iBAAN,CAAwB,EAAxB,EAA4B,GAA5B,CAAP;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK,CAAC,iBAAN,CAAwB,EAAxB,EAA4B,GAA5B,CAAP;AACA,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK,CAAC,iBAAN,CAAwB,EAAxB,EAA4B,GAA5B,CAAP;AACH;;AAED,SAAO;AACH,IAAA,cAAc,EAAE,WAAW,CAAC,aAAZ,CAA0B,mBAA1B,CADb;AAEH,IAAA,QAAQ,EAAE,CAFP;AAGH,IAAA,QAAQ,EAAE,CAHP;AAIH,IAAA,QAAQ,EAAE,CAJP;AAKH,IAAA,QAAQ,EAAE;AALP,GAAP;AAOH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\r\nimport { SortedArray } from '../../../../mol-data/int';\r\nexport function getUnitProteinInfo(unit) {\r\n    var index = unit.model.atomicHierarchy.index;\r\n    var proteinElements = unit.proteinElements, residueIndex = unit.residueIndex;\r\n    var residueCount = proteinElements.length;\r\n    var unitProteinResidues = new Uint32Array(residueCount);\r\n    var c = new Int32Array(residueCount);\r\n    var h = new Int32Array(residueCount);\r\n    var o = new Int32Array(residueCount);\r\n    var n = new Int32Array(residueCount);\r\n    for (var i = 0; i < residueCount; ++i) {\r\n        var rI = residueIndex[proteinElements[i]];\r\n        unitProteinResidues[i] = rI;\r\n        c[i] = index.findAtomOnResidue(rI, 'C');\r\n        h[i] = index.findAtomOnResidue(rI, 'H');\r\n        o[i] = index.findAtomOnResidue(rI, 'O');\r\n        n[i] = index.findAtomOnResidue(rI, 'N');\r\n    }\r\n    return {\r\n        residueIndices: SortedArray.ofSortedArray(unitProteinResidues),\r\n        cIndices: c,\r\n        hIndices: h,\r\n        oIndices: o,\r\n        nIndices: n,\r\n    };\r\n}\r\n//# sourceMappingURL=protein-info.js.map"]},"metadata":{},"sourceType":"module"}