{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Representation } from '../../../mol-repr/representation';\nimport { UnitsRepresentation, StructureRepresentationStateBuilder, StructureRepresentationProvider, ComplexRepresentation } from '../../../mol-repr/structure/representation';\nimport { EllipsoidMeshParams, EllipsoidMeshVisual } from '../visual/ellipsoid-mesh';\nimport { AtomSiteAnisotrop } from '../../../mol-model-formats/structure/property/anisotropic';\nimport { IntraUnitBondCylinderParams, IntraUnitBondCylinderVisual } from '../visual/bond-intra-unit-cylinder';\nimport { InterUnitBondCylinderVisual, InterUnitBondCylinderParams } from '../visual/bond-inter-unit-cylinder';\nimport { getUnitKindsParam } from '../params';\nvar EllipsoidVisuals = {\n  'ellipsoid-mesh': function (ctx, getParams) {\n    return UnitsRepresentation('Ellipsoid Mesh', ctx, getParams, EllipsoidMeshVisual);\n  },\n  'intra-bond': function (ctx, getParams) {\n    return UnitsRepresentation('Intra-unit bond cylinder', ctx, getParams, IntraUnitBondCylinderVisual);\n  },\n  'inter-bond': function (ctx, getParams) {\n    return ComplexRepresentation('Inter-unit bond cylinder', ctx, getParams, InterUnitBondCylinderVisual);\n  }\n};\nexport var EllipsoidParams = __assign(__assign(__assign(__assign({}, EllipsoidMeshParams), IntraUnitBondCylinderParams), InterUnitBondCylinderParams), {\n  includeParent: PD.Boolean(false),\n  adjustCylinderLength: PD.Boolean(false, {\n    isHidden: true\n  }),\n  unitKinds: getUnitKindsParam(['atomic']),\n  sizeFactor: PD.Numeric(1, {\n    min: 0.01,\n    max: 10,\n    step: 0.01\n  }),\n  sizeAspectRatio: PD.Numeric(0.1, {\n    min: 0.01,\n    max: 3,\n    step: 0.01\n  }),\n  linkCap: PD.Boolean(true),\n  visuals: PD.MultiSelect(['ellipsoid-mesh', 'intra-bond', 'inter-bond'], PD.objectToOptions(EllipsoidVisuals))\n});\nexport function getEllipsoidParams(ctx, structure) {\n  return PD.clone(EllipsoidParams);\n}\nexport function EllipsoidRepresentation(ctx, getParams) {\n  return Representation.createMulti('Ellipsoid', ctx, getParams, StructureRepresentationStateBuilder, EllipsoidVisuals);\n}\nexport var EllipsoidRepresentationProvider = StructureRepresentationProvider({\n  name: 'ellipsoid',\n  label: 'Ellipsoid',\n  description: 'Displays anisotropic displacement ellipsoids of atomic elements plus bonds as cylinders.',\n  factory: EllipsoidRepresentation,\n  getParams: getEllipsoidParams,\n  defaultValues: PD.getDefaultValues(EllipsoidParams),\n  defaultColorTheme: {\n    name: 'element-symbol'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0 && structure.models.some(function (m) {\n      return AtomSiteAnisotrop.Provider.isApplicable(m);\n    });\n  },\n  getData: function (structure, props) {\n    return props.includeParent ? structure.asParent() : structure;\n  },\n  mustRecreate: function (oldProps, newProps) {\n    return oldProps.includeParent !== newProps.includeParent;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/ellipsoid.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { UnitsRepresentation, StructureRepresentationStateBuilder, StructureRepresentationProvider, ComplexRepresentation } from '../../../mol-repr/structure/representation';\r\nimport { EllipsoidMeshParams, EllipsoidMeshVisual } from '../visual/ellipsoid-mesh';\r\nimport { AtomSiteAnisotrop } from '../../../mol-model-formats/structure/property/anisotropic';\r\nimport { IntraUnitBondCylinderParams, IntraUnitBondCylinderVisual } from '../visual/bond-intra-unit-cylinder';\r\nimport { InterUnitBondCylinderVisual, InterUnitBondCylinderParams } from '../visual/bond-inter-unit-cylinder';\r\nimport { getUnitKindsParam } from '../params';\r\nvar EllipsoidVisuals = {\r\n    'ellipsoid-mesh': function (ctx, getParams) { return UnitsRepresentation('Ellipsoid Mesh', ctx, getParams, EllipsoidMeshVisual); },\r\n    'intra-bond': function (ctx, getParams) { return UnitsRepresentation('Intra-unit bond cylinder', ctx, getParams, IntraUnitBondCylinderVisual); },\r\n    'inter-bond': function (ctx, getParams) { return ComplexRepresentation('Inter-unit bond cylinder', ctx, getParams, InterUnitBondCylinderVisual); },\r\n};\r\nexport var EllipsoidParams = __assign(__assign(__assign(__assign({}, EllipsoidMeshParams), IntraUnitBondCylinderParams), InterUnitBondCylinderParams), { includeParent: PD.Boolean(false), adjustCylinderLength: PD.Boolean(false, { isHidden: true }), unitKinds: getUnitKindsParam(['atomic']), sizeFactor: PD.Numeric(1, { min: 0.01, max: 10, step: 0.01 }), sizeAspectRatio: PD.Numeric(0.1, { min: 0.01, max: 3, step: 0.01 }), linkCap: PD.Boolean(true), visuals: PD.MultiSelect(['ellipsoid-mesh', 'intra-bond', 'inter-bond'], PD.objectToOptions(EllipsoidVisuals)) });\r\nexport function getEllipsoidParams(ctx, structure) {\r\n    return PD.clone(EllipsoidParams);\r\n}\r\nexport function EllipsoidRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Ellipsoid', ctx, getParams, StructureRepresentationStateBuilder, EllipsoidVisuals);\r\n}\r\nexport var EllipsoidRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'ellipsoid',\r\n    label: 'Ellipsoid',\r\n    description: 'Displays anisotropic displacement ellipsoids of atomic elements plus bonds as cylinders.',\r\n    factory: EllipsoidRepresentation,\r\n    getParams: getEllipsoidParams,\r\n    defaultValues: PD.getDefaultValues(EllipsoidParams),\r\n    defaultColorTheme: { name: 'element-symbol' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0 && structure.models.some(function (m) { return AtomSiteAnisotrop.Provider.isApplicable(m); }); },\r\n    getData: function (structure, props) {\r\n        return props.includeParent ? structure.asParent() : structure;\r\n    },\r\n    mustRecreate: function (oldProps, newProps) {\r\n        return oldProps.includeParent !== newProps.includeParent;\r\n    }\r\n});\r\n//# sourceMappingURL=ellipsoid.js.map"]},"metadata":{},"sourceType":"module"}