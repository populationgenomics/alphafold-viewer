{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { ChunkedArray } from '../../../../mol-data/util'; // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar v3fromArray = Vec3.fromArray;\nvar v3magnitude = Vec3.magnitude;\nvar v3sub = Vec3.sub;\nvar v3add = Vec3.add;\nvar v3scale = Vec3.scale;\nvar v3negate = Vec3.negate;\nvar v3copy = Vec3.copy;\nvar v3cross = Vec3.cross;\nvar caAdd3 = ChunkedArray.add3;\nvar caAdd = ChunkedArray.add;\nvar tA = Vec3();\nvar tB = Vec3();\nvar tV = Vec3();\nvar horizontalVector = Vec3();\nvar verticalVector = Vec3();\nvar normalOffset = Vec3();\nvar positionVector = Vec3();\nvar normalVector = Vec3();\nvar torsionVector = Vec3();\n/** set arrowHeight = 0 for no arrow */\n\nexport function addRibbon(state, controlPoints, normalVectors, binormalVectors, linearSegments, widthValues, heightValues, arrowHeight) {\n  var currentGroup = state.currentGroup,\n      vertices = state.vertices,\n      normals = state.normals,\n      indices = state.indices,\n      groups = state.groups;\n  var vertexCount = vertices.elementCount;\n  var offsetLength = 0;\n\n  if (arrowHeight > 0) {\n    v3fromArray(tA, controlPoints, 0);\n    v3fromArray(tB, controlPoints, linearSegments * 3);\n    offsetLength = arrowHeight / v3magnitude(v3sub(tV, tB, tA));\n  }\n\n  for (var i = 0; i <= linearSegments; ++i) {\n    var width = widthValues[i];\n    var height = heightValues[i];\n    var actualHeight = arrowHeight === 0 ? height : arrowHeight * (1 - i / linearSegments);\n    var i3 = i * 3;\n    v3fromArray(verticalVector, normalVectors, i3);\n    v3scale(verticalVector, verticalVector, actualHeight);\n    v3fromArray(horizontalVector, binormalVectors, i3);\n    v3scale(horizontalVector, horizontalVector, width);\n\n    if (arrowHeight > 0) {\n      v3fromArray(tA, normalVectors, i3);\n      v3fromArray(tB, binormalVectors, i3);\n      v3scale(normalOffset, v3cross(normalOffset, tA, tB), offsetLength);\n    }\n\n    v3fromArray(positionVector, controlPoints, i3);\n    v3fromArray(normalVector, normalVectors, i3);\n    v3fromArray(torsionVector, binormalVectors, i3);\n    v3add(tA, positionVector, verticalVector);\n    v3negate(tB, torsionVector);\n    caAdd3(vertices, tA[0], tA[1], tA[2]);\n    caAdd3(normals, tB[0], tB[1], tB[2]);\n    v3sub(tA, positionVector, verticalVector);\n    caAdd3(vertices, tA[0], tA[1], tA[2]);\n    caAdd3(normals, tB[0], tB[1], tB[2]);\n    v3add(tA, positionVector, verticalVector);\n    v3copy(tB, torsionVector);\n    caAdd3(vertices, tA[0], tA[1], tA[2]);\n    caAdd3(normals, tB[0], tB[1], tB[2]);\n    v3sub(tA, positionVector, verticalVector);\n    caAdd3(vertices, tA[0], tA[1], tA[2]);\n    caAdd3(normals, tB[0], tB[1], tB[2]);\n  }\n\n  for (var i = 0; i < linearSegments; ++i) {\n    caAdd3(indices, vertexCount + i * 4, vertexCount + (i + 1) * 4 + 1, vertexCount + i * 4 + 1);\n    caAdd3(indices, vertexCount + i * 4, vertexCount + (i + 1) * 4, vertexCount + (i + 1) * 4 + 1);\n    caAdd3(indices, vertexCount + i * 4 + 2 + 1, vertexCount + (i + 1) * 4 + 2 + 1, vertexCount + i * 4 + 2);\n    caAdd3(indices, vertexCount + i * 4 + 2, vertexCount + (i + 1) * 4 + 2 + 1, vertexCount + (i + 1) * 4 + 2);\n  }\n\n  var addedVertexCount = (linearSegments + 1) * 4;\n\n  for (var i = 0, il = addedVertexCount; i < il; ++i) caAdd(groups, currentGroup);\n}","map":{"version":3,"sources":["../../../../../src/mol-geo/geometry/mesh/builder/ribbon.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { ChunkedArray } from '../../../../mol-data/util';\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3fromArray = Vec3.fromArray;\r\nvar v3magnitude = Vec3.magnitude;\r\nvar v3sub = Vec3.sub;\r\nvar v3add = Vec3.add;\r\nvar v3scale = Vec3.scale;\r\nvar v3negate = Vec3.negate;\r\nvar v3copy = Vec3.copy;\r\nvar v3cross = Vec3.cross;\r\nvar caAdd3 = ChunkedArray.add3;\r\nvar caAdd = ChunkedArray.add;\r\nvar tA = Vec3();\r\nvar tB = Vec3();\r\nvar tV = Vec3();\r\nvar horizontalVector = Vec3();\r\nvar verticalVector = Vec3();\r\nvar normalOffset = Vec3();\r\nvar positionVector = Vec3();\r\nvar normalVector = Vec3();\r\nvar torsionVector = Vec3();\r\n/** set arrowHeight = 0 for no arrow */\r\nexport function addRibbon(state, controlPoints, normalVectors, binormalVectors, linearSegments, widthValues, heightValues, arrowHeight) {\r\n    var currentGroup = state.currentGroup, vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups;\r\n    var vertexCount = vertices.elementCount;\r\n    var offsetLength = 0;\r\n    if (arrowHeight > 0) {\r\n        v3fromArray(tA, controlPoints, 0);\r\n        v3fromArray(tB, controlPoints, linearSegments * 3);\r\n        offsetLength = arrowHeight / v3magnitude(v3sub(tV, tB, tA));\r\n    }\r\n    for (var i = 0; i <= linearSegments; ++i) {\r\n        var width = widthValues[i];\r\n        var height = heightValues[i];\r\n        var actualHeight = arrowHeight === 0 ? height : arrowHeight * (1 - i / linearSegments);\r\n        var i3 = i * 3;\r\n        v3fromArray(verticalVector, normalVectors, i3);\r\n        v3scale(verticalVector, verticalVector, actualHeight);\r\n        v3fromArray(horizontalVector, binormalVectors, i3);\r\n        v3scale(horizontalVector, horizontalVector, width);\r\n        if (arrowHeight > 0) {\r\n            v3fromArray(tA, normalVectors, i3);\r\n            v3fromArray(tB, binormalVectors, i3);\r\n            v3scale(normalOffset, v3cross(normalOffset, tA, tB), offsetLength);\r\n        }\r\n        v3fromArray(positionVector, controlPoints, i3);\r\n        v3fromArray(normalVector, normalVectors, i3);\r\n        v3fromArray(torsionVector, binormalVectors, i3);\r\n        v3add(tA, positionVector, verticalVector);\r\n        v3negate(tB, torsionVector);\r\n        caAdd3(vertices, tA[0], tA[1], tA[2]);\r\n        caAdd3(normals, tB[0], tB[1], tB[2]);\r\n        v3sub(tA, positionVector, verticalVector);\r\n        caAdd3(vertices, tA[0], tA[1], tA[2]);\r\n        caAdd3(normals, tB[0], tB[1], tB[2]);\r\n        v3add(tA, positionVector, verticalVector);\r\n        v3copy(tB, torsionVector);\r\n        caAdd3(vertices, tA[0], tA[1], tA[2]);\r\n        caAdd3(normals, tB[0], tB[1], tB[2]);\r\n        v3sub(tA, positionVector, verticalVector);\r\n        caAdd3(vertices, tA[0], tA[1], tA[2]);\r\n        caAdd3(normals, tB[0], tB[1], tB[2]);\r\n    }\r\n    for (var i = 0; i < linearSegments; ++i) {\r\n        caAdd3(indices, vertexCount + i * 4, vertexCount + (i + 1) * 4 + 1, vertexCount + i * 4 + 1);\r\n        caAdd3(indices, vertexCount + i * 4, vertexCount + (i + 1) * 4, vertexCount + (i + 1) * 4 + 1);\r\n        caAdd3(indices, vertexCount + i * 4 + 2 + 1, vertexCount + (i + 1) * 4 + 2 + 1, vertexCount + i * 4 + 2);\r\n        caAdd3(indices, vertexCount + i * 4 + 2, vertexCount + (i + 1) * 4 + 2 + 1, vertexCount + (i + 1) * 4 + 2);\r\n    }\r\n    var addedVertexCount = (linearSegments + 1) * 4;\r\n    for (var i = 0, il = addedVertexCount; i < il; ++i)\r\n        caAdd(groups, currentGroup);\r\n}\r\n//# sourceMappingURL=ribbon.js.map"]},"metadata":{},"sourceType":"module"}