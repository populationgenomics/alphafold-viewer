{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\nimport { Column } from '../../../mol-data/db';\nvar HelixTypes = {\n  // CLASS NUMBER\n  // TYPE OF  HELIX                     (COLUMNS 39 - 40)\n  // --------------------------------------------------------------\n  // Right-handed alpha (default)                1\n  // Right-handed omega                          2\n  // Right-handed pi                             3\n  // Right-handed gamma                          4\n  // Right-handed 3 - 10                         5\n  // Left-handed alpha                           6\n  // Left-handed omega                           7\n  // Left-handed gamma                           8\n  // 2 - 7 ribbon/helix                          9\n  // Polyproline                                10\n  1: 'HELX_RH_AL_P',\n  2: 'HELX_RH_OM_P',\n  3: 'HELX_RH_PI_P',\n  4: 'HELX_RH_GA_P',\n  5: 'HELX_RH_3T_P',\n  6: 'HELX_LH_AL_P',\n  7: 'HELX_LH_OM_P',\n  8: 'HELX_LH_GA_P',\n  9: 'HELX_RH_27_P',\n  10: 'HELX_RH_PP_P' // TODO or left-handed???\n\n};\n\nfunction getStructConfTypeId(type) {\n  return HelixTypes[type] || 'HELX_P';\n}\n\nexport function parseHelix(lines, lineStart, lineEnd) {\n  var helices = [];\n\n  var getLine = function (n) {\n    return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]);\n  };\n\n  for (var i = lineStart; i < lineEnd; i++) {\n    var line = getLine(i); // COLUMNS        DATA  TYPE     FIELD         DEFINITION\n    // -----------------------------------------------------------------------------------\n    // 1 -  6        Record name    \"HELIX \"\n    // 8 - 10        Integer        serNum        Serial number of the helix. This starts\n    //                                             at 1  and increases incrementally.\n    // 12 - 14        LString(3)     helixID       Helix  identifier. In addition to a serial\n    //                                             number, each helix is given an\n    //                                             alphanumeric character helix identifier.\n    // 16 - 18        Residue name   initResName   Name of the initial residue.\n    // 20             Character      initChainID   Chain identifier for the chain containing\n    //                                             this  helix.\n    // 22 - 25        Integer        initSeqNum    Sequence number of the initial residue.\n    // 26             AChar          initICode     Insertion code of the initial residue.\n    // 28 - 30        Residue  name  endResName    Name of the terminal residue of the helix.\n    // 32             Character      endChainID    Chain identifier for the chain containing\n    //                                             this  helix.\n    // 34 - 37        Integer        endSeqNum     Sequence number of the terminal residue.\n    // 38             AChar          endICode      Insertion code of the terminal residue.\n    // 39 - 40        Integer        helixClass    Helix class (see below).\n    // 41 - 70        String         comment       Comment about this helix.\n    // 72 - 76        Integer        length        Length of this helix.\n\n    helices.push({\n      serNum: line.substr(7, 3).trim(),\n      helixID: line.substr(11, 3).trim(),\n      initResName: line.substr(15, 3).trim(),\n      initChainID: line.substr(19, 1).trim(),\n      initSeqNum: line.substr(21, 4).trim(),\n      initICode: line.substr(25, 1).trim(),\n      endResName: line.substr(27, 3).trim(),\n      endChainID: line.substr(31, 3).trim(),\n      endSeqNum: line.substr(33, 4).trim(),\n      endICode: line.substr(37, 1).trim(),\n      helixClass: line.substr(38, 2).trim(),\n      comment: line.substr(40, 30).trim(),\n      length: line.substr(71, 5).trim()\n    });\n  }\n\n  var beg_auth_asym_id = CifField.ofStrings(helices.map(function (h) {\n    return h.initChainID;\n  }));\n  var beg_auth_comp_id = CifField.ofStrings(helices.map(function (h) {\n    return h.initResName;\n  }));\n  var end_auth_asym_id = CifField.ofStrings(helices.map(function (h) {\n    return h.endChainID;\n  }));\n  var end_auth_comp_id = CifField.ofStrings(helices.map(function (h) {\n    return h.endResName;\n  }));\n  var struct_conf = {\n    beg_label_asym_id: beg_auth_asym_id,\n    beg_label_comp_id: beg_auth_comp_id,\n    beg_label_seq_id: CifField.ofUndefined(helices.length, Column.Schema.int),\n    beg_auth_asym_id: beg_auth_asym_id,\n    beg_auth_comp_id: beg_auth_comp_id,\n    beg_auth_seq_id: CifField.ofStrings(helices.map(function (h) {\n      return h.initSeqNum;\n    })),\n    conf_type_id: CifField.ofStrings(helices.map(function (h) {\n      return getStructConfTypeId(h.helixClass);\n    })),\n    details: CifField.ofStrings(helices.map(function (h) {\n      return h.comment;\n    })),\n    end_label_asym_id: end_auth_asym_id,\n    end_label_comp_id: end_auth_comp_id,\n    end_label_seq_id: CifField.ofUndefined(helices.length, Column.Schema.int),\n    end_auth_asym_id: end_auth_asym_id,\n    end_auth_comp_id: end_auth_comp_id,\n    end_auth_seq_id: CifField.ofStrings(helices.map(function (h) {\n      return h.endSeqNum;\n    })),\n    id: CifField.ofStrings(helices.map(function (h) {\n      return h.serNum;\n    })),\n    pdbx_beg_PDB_ins_code: CifField.ofStrings(helices.map(function (h) {\n      return h.initICode;\n    })),\n    pdbx_end_PDB_ins_code: CifField.ofStrings(helices.map(function (h) {\n      return h.endICode;\n    })),\n    pdbx_PDB_helix_class: CifField.ofStrings(helices.map(function (h) {\n      return h.helixClass;\n    })),\n    pdbx_PDB_helix_length: CifField.ofStrings(helices.map(function (h) {\n      return h.length;\n    })),\n    pdbx_PDB_helix_id: CifField.ofStrings(helices.map(function (h) {\n      return h.helixID;\n    }))\n  };\n  return CifCategory.ofFields('struct_conf', struct_conf);\n}\nexport function parseSheet(lines, lineStart, lineEnd) {\n  var sheets = [];\n\n  var getLine = function (n) {\n    return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]);\n  };\n\n  for (var i = lineStart; i < lineEnd; i++) {\n    var line = getLine(i); // COLUMNS       DATA  TYPE     FIELD          DEFINITION\n    // -------------------------------------------------------------------------------------\n    // 1 -  6        Record name   \"SHEET \"\n    // 8 - 10        Integer       strand         Strand  number which starts at 1 for each\n    //                                             strand within a sheet and increases by one.\n    // 12 - 14        LString(3)    sheetID        Sheet  identifier.\n    // 15 - 16        Integer       numStrands     Number  of strands in sheet.\n    // 18 - 20        Residue name  initResName    Residue  name of initial residue.\n    // 22             Character     initChainID    Chain identifier of initial residue\n    //                                             in strand.\n    // 23 - 26        Integer       initSeqNum     Sequence number of initial residue\n    //                                             in strand.\n    // 27             AChar         initICode      Insertion code of initial residue\n    //                                             in  strand.\n    // 29 - 31        Residue name  endResName     Residue name of terminal residue.\n    // 33             Character     endChainID     Chain identifier of terminal residue.\n    // 34 - 37        Integer       endSeqNum      Sequence number of terminal residue.\n    // 38             AChar         endICode       Insertion code of terminal residue.\n    // 39 - 40        Integer       sense          Sense of strand with respect to previous\n    //                                             strand in the sheet. 0 if first strand,\n    //                                             1 if  parallel,and -1 if anti-parallel.\n    // 42 - 45        Atom          curAtom        Registration.  Atom name in current strand.\n    // 46 - 48        Residue name  curResName     Registration.  Residue name in current strand\n    // 50             Character     curChainId     Registration. Chain identifier in\n    //                                             current strand.\n    // 51 - 54        Integer       curResSeq      Registration.  Residue sequence number\n    //                                             in current strand.\n    // 55             AChar         curICode       Registration. Insertion code in\n    //                                             current strand.\n    // 57 - 60        Atom          prevAtom       Registration.  Atom name in previous strand.\n    // 61 - 63        Residue name  prevResName    Registration.  Residue name in\n    //                                             previous strand.\n    // 65             Character     prevChainId    Registration.  Chain identifier in\n    //                                             previous  strand.\n    // 66 - 69        Integer       prevResSeq     Registration. Residue sequence number\n    //                                             in previous strand.\n    // 70             AChar         prevICode      Registration.  Insertion code in\n    //                                             previous strand.\n\n    sheets.push({\n      strand: line.substr(7, 3).trim(),\n      sheetID: line.substr(11, 3).trim(),\n      numStrands: line.substr(14, 2).trim(),\n      initResName: line.substr(17, 3).trim(),\n      initChainID: line.substr(21, 1).trim(),\n      initSeqNum: line.substr(22, 4).trim(),\n      initICode: line.substr(26, 1).trim(),\n      endResName: line.substr(28, 3).trim(),\n      endChainID: line.substr(32, 1).trim(),\n      endSeqNum: line.substr(33, 4).trim(),\n      endICode: line.substr(37, 1).trim(),\n      sense: line.substr(38, 2).trim(),\n      curAtom: line.substr(41, 4).trim(),\n      curResName: line.substr(45, 3).trim(),\n      curChainId: line.substr(49, 1).trim(),\n      curResSeq: line.substr(50, 4).trim(),\n      curICode: line.substr(54, 1).trim(),\n      prevAtom: line.substr(56, 4).trim(),\n      prevResName: line.substr(60, 3).trim(),\n      prevChainId: line.substr(64, 1).trim(),\n      prevResSeq: line.substr(65, 4).trim(),\n      prevICode: line.substr(69, 1).trim()\n    });\n  }\n\n  var beg_auth_asym_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.initChainID;\n  }));\n  var beg_auth_comp_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.initResName;\n  }));\n  var beg_auth_seq_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.initSeqNum;\n  }));\n  var end_auth_asym_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.endChainID;\n  }));\n  var end_auth_comp_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.endResName;\n  }));\n  var end_auth_seq_id = CifField.ofStrings(sheets.map(function (s) {\n    return s.endSeqNum;\n  }));\n  var struct_sheet_range = {\n    beg_label_asym_id: beg_auth_asym_id,\n    beg_label_comp_id: beg_auth_comp_id,\n    beg_label_seq_id: beg_auth_seq_id,\n    beg_auth_asym_id: beg_auth_asym_id,\n    beg_auth_comp_id: beg_auth_comp_id,\n    beg_auth_seq_id: beg_auth_seq_id,\n    end_label_asym_id: end_auth_asym_id,\n    end_label_comp_id: end_auth_asym_id,\n    end_label_seq_id: end_auth_seq_id,\n    end_auth_asym_id: end_auth_asym_id,\n    end_auth_comp_id: end_auth_comp_id,\n    end_auth_seq_id: end_auth_seq_id,\n    id: CifField.ofStrings(sheets.map(function (s) {\n      return s.strand;\n    })),\n    sheet_id: CifField.ofStrings(sheets.map(function (s) {\n      return s.sheetID;\n    })),\n    pdbx_beg_PDB_ins_code: CifField.ofStrings(sheets.map(function (s) {\n      return s.initICode;\n    })),\n    pdbx_end_PDB_ins_code: CifField.ofStrings(sheets.map(function (s) {\n      return s.endICode;\n    }))\n  };\n  return CifCategory.ofFields('struct_sheet_range', struct_sheet_range);\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/pdb/secondary-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { CifCategory, CifField } from '../../../mol-io/reader/cif';\r\nimport { Column } from '../../../mol-data/db';\r\nvar HelixTypes = {\r\n    // CLASS NUMBER\r\n    // TYPE OF  HELIX                     (COLUMNS 39 - 40)\r\n    // --------------------------------------------------------------\r\n    // Right-handed alpha (default)                1\r\n    // Right-handed omega                          2\r\n    // Right-handed pi                             3\r\n    // Right-handed gamma                          4\r\n    // Right-handed 3 - 10                         5\r\n    // Left-handed alpha                           6\r\n    // Left-handed omega                           7\r\n    // Left-handed gamma                           8\r\n    // 2 - 7 ribbon/helix                          9\r\n    // Polyproline                                10\r\n    1: 'HELX_RH_AL_P',\r\n    2: 'HELX_RH_OM_P',\r\n    3: 'HELX_RH_PI_P',\r\n    4: 'HELX_RH_GA_P',\r\n    5: 'HELX_RH_3T_P',\r\n    6: 'HELX_LH_AL_P',\r\n    7: 'HELX_LH_OM_P',\r\n    8: 'HELX_LH_GA_P',\r\n    9: 'HELX_RH_27_P',\r\n    10: 'HELX_RH_PP_P', // TODO or left-handed???\r\n};\r\nfunction getStructConfTypeId(type) {\r\n    return HelixTypes[type] || 'HELX_P';\r\n}\r\nexport function parseHelix(lines, lineStart, lineEnd) {\r\n    var helices = [];\r\n    var getLine = function (n) { return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]); };\r\n    for (var i = lineStart; i < lineEnd; i++) {\r\n        var line = getLine(i);\r\n        // COLUMNS        DATA  TYPE     FIELD         DEFINITION\r\n        // -----------------------------------------------------------------------------------\r\n        // 1 -  6        Record name    \"HELIX \"\r\n        // 8 - 10        Integer        serNum        Serial number of the helix. This starts\r\n        //                                             at 1  and increases incrementally.\r\n        // 12 - 14        LString(3)     helixID       Helix  identifier. In addition to a serial\r\n        //                                             number, each helix is given an\r\n        //                                             alphanumeric character helix identifier.\r\n        // 16 - 18        Residue name   initResName   Name of the initial residue.\r\n        // 20             Character      initChainID   Chain identifier for the chain containing\r\n        //                                             this  helix.\r\n        // 22 - 25        Integer        initSeqNum    Sequence number of the initial residue.\r\n        // 26             AChar          initICode     Insertion code of the initial residue.\r\n        // 28 - 30        Residue  name  endResName    Name of the terminal residue of the helix.\r\n        // 32             Character      endChainID    Chain identifier for the chain containing\r\n        //                                             this  helix.\r\n        // 34 - 37        Integer        endSeqNum     Sequence number of the terminal residue.\r\n        // 38             AChar          endICode      Insertion code of the terminal residue.\r\n        // 39 - 40        Integer        helixClass    Helix class (see below).\r\n        // 41 - 70        String         comment       Comment about this helix.\r\n        // 72 - 76        Integer        length        Length of this helix.\r\n        helices.push({\r\n            serNum: line.substr(7, 3).trim(),\r\n            helixID: line.substr(11, 3).trim(),\r\n            initResName: line.substr(15, 3).trim(),\r\n            initChainID: line.substr(19, 1).trim(),\r\n            initSeqNum: line.substr(21, 4).trim(),\r\n            initICode: line.substr(25, 1).trim(),\r\n            endResName: line.substr(27, 3).trim(),\r\n            endChainID: line.substr(31, 3).trim(),\r\n            endSeqNum: line.substr(33, 4).trim(),\r\n            endICode: line.substr(37, 1).trim(),\r\n            helixClass: line.substr(38, 2).trim(),\r\n            comment: line.substr(40, 30).trim(),\r\n            length: line.substr(71, 5).trim()\r\n        });\r\n    }\r\n    var beg_auth_asym_id = CifField.ofStrings(helices.map(function (h) { return h.initChainID; }));\r\n    var beg_auth_comp_id = CifField.ofStrings(helices.map(function (h) { return h.initResName; }));\r\n    var end_auth_asym_id = CifField.ofStrings(helices.map(function (h) { return h.endChainID; }));\r\n    var end_auth_comp_id = CifField.ofStrings(helices.map(function (h) { return h.endResName; }));\r\n    var struct_conf = {\r\n        beg_label_asym_id: beg_auth_asym_id,\r\n        beg_label_comp_id: beg_auth_comp_id,\r\n        beg_label_seq_id: CifField.ofUndefined(helices.length, Column.Schema.int),\r\n        beg_auth_asym_id: beg_auth_asym_id,\r\n        beg_auth_comp_id: beg_auth_comp_id,\r\n        beg_auth_seq_id: CifField.ofStrings(helices.map(function (h) { return h.initSeqNum; })),\r\n        conf_type_id: CifField.ofStrings(helices.map(function (h) { return getStructConfTypeId(h.helixClass); })),\r\n        details: CifField.ofStrings(helices.map(function (h) { return h.comment; })),\r\n        end_label_asym_id: end_auth_asym_id,\r\n        end_label_comp_id: end_auth_comp_id,\r\n        end_label_seq_id: CifField.ofUndefined(helices.length, Column.Schema.int),\r\n        end_auth_asym_id: end_auth_asym_id,\r\n        end_auth_comp_id: end_auth_comp_id,\r\n        end_auth_seq_id: CifField.ofStrings(helices.map(function (h) { return h.endSeqNum; })),\r\n        id: CifField.ofStrings(helices.map(function (h) { return h.serNum; })),\r\n        pdbx_beg_PDB_ins_code: CifField.ofStrings(helices.map(function (h) { return h.initICode; })),\r\n        pdbx_end_PDB_ins_code: CifField.ofStrings(helices.map(function (h) { return h.endICode; })),\r\n        pdbx_PDB_helix_class: CifField.ofStrings(helices.map(function (h) { return h.helixClass; })),\r\n        pdbx_PDB_helix_length: CifField.ofStrings(helices.map(function (h) { return h.length; })),\r\n        pdbx_PDB_helix_id: CifField.ofStrings(helices.map(function (h) { return h.helixID; })),\r\n    };\r\n    return CifCategory.ofFields('struct_conf', struct_conf);\r\n}\r\nexport function parseSheet(lines, lineStart, lineEnd) {\r\n    var sheets = [];\r\n    var getLine = function (n) { return lines.data.substring(lines.indices[2 * n], lines.indices[2 * n + 1]); };\r\n    for (var i = lineStart; i < lineEnd; i++) {\r\n        var line = getLine(i);\r\n        // COLUMNS       DATA  TYPE     FIELD          DEFINITION\r\n        // -------------------------------------------------------------------------------------\r\n        // 1 -  6        Record name   \"SHEET \"\r\n        // 8 - 10        Integer       strand         Strand  number which starts at 1 for each\r\n        //                                             strand within a sheet and increases by one.\r\n        // 12 - 14        LString(3)    sheetID        Sheet  identifier.\r\n        // 15 - 16        Integer       numStrands     Number  of strands in sheet.\r\n        // 18 - 20        Residue name  initResName    Residue  name of initial residue.\r\n        // 22             Character     initChainID    Chain identifier of initial residue\r\n        //                                             in strand.\r\n        // 23 - 26        Integer       initSeqNum     Sequence number of initial residue\r\n        //                                             in strand.\r\n        // 27             AChar         initICode      Insertion code of initial residue\r\n        //                                             in  strand.\r\n        // 29 - 31        Residue name  endResName     Residue name of terminal residue.\r\n        // 33             Character     endChainID     Chain identifier of terminal residue.\r\n        // 34 - 37        Integer       endSeqNum      Sequence number of terminal residue.\r\n        // 38             AChar         endICode       Insertion code of terminal residue.\r\n        // 39 - 40        Integer       sense          Sense of strand with respect to previous\r\n        //                                             strand in the sheet. 0 if first strand,\r\n        //                                             1 if  parallel,and -1 if anti-parallel.\r\n        // 42 - 45        Atom          curAtom        Registration.  Atom name in current strand.\r\n        // 46 - 48        Residue name  curResName     Registration.  Residue name in current strand\r\n        // 50             Character     curChainId     Registration. Chain identifier in\r\n        //                                             current strand.\r\n        // 51 - 54        Integer       curResSeq      Registration.  Residue sequence number\r\n        //                                             in current strand.\r\n        // 55             AChar         curICode       Registration. Insertion code in\r\n        //                                             current strand.\r\n        // 57 - 60        Atom          prevAtom       Registration.  Atom name in previous strand.\r\n        // 61 - 63        Residue name  prevResName    Registration.  Residue name in\r\n        //                                             previous strand.\r\n        // 65             Character     prevChainId    Registration.  Chain identifier in\r\n        //                                             previous  strand.\r\n        // 66 - 69        Integer       prevResSeq     Registration. Residue sequence number\r\n        //                                             in previous strand.\r\n        // 70             AChar         prevICode      Registration.  Insertion code in\r\n        //                                             previous strand.\r\n        sheets.push({\r\n            strand: line.substr(7, 3).trim(),\r\n            sheetID: line.substr(11, 3).trim(),\r\n            numStrands: line.substr(14, 2).trim(),\r\n            initResName: line.substr(17, 3).trim(),\r\n            initChainID: line.substr(21, 1).trim(),\r\n            initSeqNum: line.substr(22, 4).trim(),\r\n            initICode: line.substr(26, 1).trim(),\r\n            endResName: line.substr(28, 3).trim(),\r\n            endChainID: line.substr(32, 1).trim(),\r\n            endSeqNum: line.substr(33, 4).trim(),\r\n            endICode: line.substr(37, 1).trim(),\r\n            sense: line.substr(38, 2).trim(),\r\n            curAtom: line.substr(41, 4).trim(),\r\n            curResName: line.substr(45, 3).trim(),\r\n            curChainId: line.substr(49, 1).trim(),\r\n            curResSeq: line.substr(50, 4).trim(),\r\n            curICode: line.substr(54, 1).trim(),\r\n            prevAtom: line.substr(56, 4).trim(),\r\n            prevResName: line.substr(60, 3).trim(),\r\n            prevChainId: line.substr(64, 1).trim(),\r\n            prevResSeq: line.substr(65, 4).trim(),\r\n            prevICode: line.substr(69, 1).trim(),\r\n        });\r\n    }\r\n    var beg_auth_asym_id = CifField.ofStrings(sheets.map(function (s) { return s.initChainID; }));\r\n    var beg_auth_comp_id = CifField.ofStrings(sheets.map(function (s) { return s.initResName; }));\r\n    var beg_auth_seq_id = CifField.ofStrings(sheets.map(function (s) { return s.initSeqNum; }));\r\n    var end_auth_asym_id = CifField.ofStrings(sheets.map(function (s) { return s.endChainID; }));\r\n    var end_auth_comp_id = CifField.ofStrings(sheets.map(function (s) { return s.endResName; }));\r\n    var end_auth_seq_id = CifField.ofStrings(sheets.map(function (s) { return s.endSeqNum; }));\r\n    var struct_sheet_range = {\r\n        beg_label_asym_id: beg_auth_asym_id,\r\n        beg_label_comp_id: beg_auth_comp_id,\r\n        beg_label_seq_id: beg_auth_seq_id,\r\n        beg_auth_asym_id: beg_auth_asym_id,\r\n        beg_auth_comp_id: beg_auth_comp_id,\r\n        beg_auth_seq_id: beg_auth_seq_id,\r\n        end_label_asym_id: end_auth_asym_id,\r\n        end_label_comp_id: end_auth_asym_id,\r\n        end_label_seq_id: end_auth_seq_id,\r\n        end_auth_asym_id: end_auth_asym_id,\r\n        end_auth_comp_id: end_auth_comp_id,\r\n        end_auth_seq_id: end_auth_seq_id,\r\n        id: CifField.ofStrings(sheets.map(function (s) { return s.strand; })),\r\n        sheet_id: CifField.ofStrings(sheets.map(function (s) { return s.sheetID; })),\r\n        pdbx_beg_PDB_ins_code: CifField.ofStrings(sheets.map(function (s) { return s.initICode; })),\r\n        pdbx_end_PDB_ins_code: CifField.ofStrings(sheets.map(function (s) { return s.endICode; })),\r\n    };\r\n    return CifCategory.ofFields('struct_sheet_range', struct_sheet_range);\r\n}\r\n//# sourceMappingURL=secondary-structure.js.map"]},"metadata":{},"sourceType":"module"}