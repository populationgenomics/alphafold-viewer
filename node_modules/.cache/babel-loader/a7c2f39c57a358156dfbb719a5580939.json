{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n// TODO only support compressed files for which uncompression support is available???\n// TODO store globally with decompression plugins?\nvar compressedExtList = ['gz', 'zip']; // TODO store globally with parser plugins?\n\nvar binaryExtList = ['bcif', 'ccp4', 'dcd'];\nexport function getFileInfo(file) {\n  var path;\n  var compressed;\n  var protocol = '';\n\n  if (file instanceof File) {\n    path = file.name;\n  } else if (file instanceof Blob) {\n    path = '';\n  } else {\n    path = file;\n  }\n\n  var queryIndex = path.lastIndexOf('?');\n  var query = queryIndex !== -1 ? path.substring(queryIndex) : '';\n  path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);\n  var name = path.replace(/^.*[\\\\/]/, '');\n  var base = name.substring(0, name.lastIndexOf('.'));\n  var nameSplit = name.split('.');\n  var ext = nameSplit.length > 1 ? (nameSplit.pop() || '').toLowerCase() : '';\n  var protocolMatch = path.match(/^(.+):\\/\\/(.+)$/);\n\n  if (protocolMatch) {\n    protocol = protocolMatch[1].toLowerCase();\n    path = protocolMatch[2] || '';\n  }\n\n  var dir = path.substring(0, path.lastIndexOf('/') + 1);\n\n  if (compressedExtList.includes(ext)) {\n    compressed = ext;\n    var n = path.length - ext.length - 1;\n    ext = (path.substr(0, n).split('.').pop() || '').toLowerCase();\n    var m = base.length - ext.length - 1;\n    base = base.substr(0, m);\n  } else {\n    compressed = false;\n  }\n\n  var binary = binaryExtList.includes(ext);\n  return {\n    path: path,\n    name: name,\n    ext: ext,\n    base: base,\n    dir: dir,\n    compressed: compressed,\n    binary: binary,\n    protocol: protocol,\n    query: query,\n    src: file\n  };\n}","map":{"version":3,"sources":["../../src/mol-util/file-info.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n// TODO only support compressed files for which uncompression support is available???\r\n// TODO store globally with decompression plugins?\r\nvar compressedExtList = ['gz', 'zip'];\r\n// TODO store globally with parser plugins?\r\nvar binaryExtList = ['bcif', 'ccp4', 'dcd'];\r\nexport function getFileInfo(file) {\r\n    var path;\r\n    var compressed;\r\n    var protocol = '';\r\n    if (file instanceof File) {\r\n        path = file.name;\r\n    }\r\n    else if (file instanceof Blob) {\r\n        path = '';\r\n    }\r\n    else {\r\n        path = file;\r\n    }\r\n    var queryIndex = path.lastIndexOf('?');\r\n    var query = queryIndex !== -1 ? path.substring(queryIndex) : '';\r\n    path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);\r\n    var name = path.replace(/^.*[\\\\/]/, '');\r\n    var base = name.substring(0, name.lastIndexOf('.'));\r\n    var nameSplit = name.split('.');\r\n    var ext = nameSplit.length > 1 ? (nameSplit.pop() || '').toLowerCase() : '';\r\n    var protocolMatch = path.match(/^(.+):\\/\\/(.+)$/);\r\n    if (protocolMatch) {\r\n        protocol = protocolMatch[1].toLowerCase();\r\n        path = protocolMatch[2] || '';\r\n    }\r\n    var dir = path.substring(0, path.lastIndexOf('/') + 1);\r\n    if (compressedExtList.includes(ext)) {\r\n        compressed = ext;\r\n        var n = path.length - ext.length - 1;\r\n        ext = (path.substr(0, n).split('.').pop() || '').toLowerCase();\r\n        var m = base.length - ext.length - 1;\r\n        base = base.substr(0, m);\r\n    }\r\n    else {\r\n        compressed = false;\r\n    }\r\n    var binary = binaryExtList.includes(ext);\r\n    return { path: path, name: name, ext: ext, base: base, dir: dir, compressed: compressed, binary: binary, protocol: protocol, query: query, src: file };\r\n}\r\n//# sourceMappingURL=file-info.js.map"]},"metadata":{},"sourceType":"module"}