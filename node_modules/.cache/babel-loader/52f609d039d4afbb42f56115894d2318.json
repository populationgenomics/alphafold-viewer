{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { AtomNumber } from '../atomic';\nimport { getMoleculeType, getComponentType, getPolymerType } from '../../types';\nimport { getAtomIdForAtomRole } from '../../../../../mol-model/structure/util';\nimport { isProductionMode } from '../../../../../mol-util/debug';\nexport function getAtomicDerivedData(data, segments, index, chemicalComponentMap) {\n  var _a = data.atoms,\n      label_comp_id = _a.label_comp_id,\n      type_symbol = _a.type_symbol,\n      atomCount = _a._rowCount;\n  var residueCount = data.residues._rowCount;\n  var offsets = segments.residueAtomSegments.offsets;\n  var atomicNumber = new Uint8Array(atomCount);\n\n  for (var i = 0; i < atomCount; ++i) {\n    atomicNumber[i] = AtomNumber(type_symbol.value(i));\n  }\n\n  var traceElementIndex = new Int32Array(residueCount);\n  var directionFromElementIndex = new Int32Array(residueCount);\n  var directionToElementIndex = new Int32Array(residueCount);\n  var moleculeType = new Uint8Array(residueCount);\n  var polymerType = new Uint8Array(residueCount);\n  var moleculeTypeMap = new Map();\n  var polymerTypeMap = new Map();\n\n  for (var i = 0; i < residueCount; ++i) {\n    var compId = label_comp_id.value(offsets[i]);\n    var chemCompMap = chemicalComponentMap;\n    var molType = void 0;\n    var polyType = void 0;\n\n    if (moleculeTypeMap.has(compId)) {\n      molType = moleculeTypeMap.get(compId);\n      polyType = polymerTypeMap.get(compId);\n    } else {\n      var type = void 0;\n\n      if (chemCompMap.has(compId)) {\n        type = chemCompMap.get(compId).type;\n      } else {\n        if (!isProductionMode) console.info('chemComp not found', compId);\n        type = getComponentType(compId);\n      }\n\n      molType = getMoleculeType(type, compId); // TODO if unknown molecule type, use atom names to guess molecule type\n\n      polyType = getPolymerType(type, molType);\n      moleculeTypeMap.set(compId, molType);\n      polymerTypeMap.set(compId, polyType);\n    }\n\n    moleculeType[i] = molType;\n    polymerType[i] = polyType;\n    var traceAtomId = getAtomIdForAtomRole(polyType, 'trace');\n    var traceIndex = index.findAtomsOnResidue(i, traceAtomId);\n\n    if (traceIndex === -1) {\n      var coarseAtomId = getAtomIdForAtomRole(polyType, 'coarseBackbone');\n      traceIndex = index.findAtomsOnResidue(i, coarseAtomId);\n    }\n\n    traceElementIndex[i] = traceIndex;\n    var directionFromAtomId = getAtomIdForAtomRole(polyType, 'directionFrom');\n    directionFromElementIndex[i] = index.findAtomsOnResidue(i, directionFromAtomId);\n    var directionToAtomId = getAtomIdForAtomRole(polyType, 'directionTo');\n    directionToElementIndex[i] = index.findAtomsOnResidue(i, directionToAtomId);\n  }\n\n  return {\n    atom: {\n      atomicNumber: atomicNumber\n    },\n    residue: {\n      traceElementIndex: traceElementIndex,\n      directionFromElementIndex: directionFromElementIndex,\n      directionToElementIndex: directionToElementIndex,\n      moleculeType: moleculeType,\n      polymerType: polymerType\n    }\n  };\n}","map":{"version":3,"sources":["../../../../../../src/mol-model/structure/model/properties/utils/atomic-derived.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { AtomNumber } from '../atomic';\r\nimport { getMoleculeType, getComponentType, getPolymerType } from '../../types';\r\nimport { getAtomIdForAtomRole } from '../../../../../mol-model/structure/util';\r\nimport { isProductionMode } from '../../../../../mol-util/debug';\r\nexport function getAtomicDerivedData(data, segments, index, chemicalComponentMap) {\r\n    var _a = data.atoms, label_comp_id = _a.label_comp_id, type_symbol = _a.type_symbol, atomCount = _a._rowCount;\r\n    var residueCount = data.residues._rowCount;\r\n    var offsets = segments.residueAtomSegments.offsets;\r\n    var atomicNumber = new Uint8Array(atomCount);\r\n    for (var i = 0; i < atomCount; ++i) {\r\n        atomicNumber[i] = AtomNumber(type_symbol.value(i));\r\n    }\r\n    var traceElementIndex = new Int32Array(residueCount);\r\n    var directionFromElementIndex = new Int32Array(residueCount);\r\n    var directionToElementIndex = new Int32Array(residueCount);\r\n    var moleculeType = new Uint8Array(residueCount);\r\n    var polymerType = new Uint8Array(residueCount);\r\n    var moleculeTypeMap = new Map();\r\n    var polymerTypeMap = new Map();\r\n    for (var i = 0; i < residueCount; ++i) {\r\n        var compId = label_comp_id.value(offsets[i]);\r\n        var chemCompMap = chemicalComponentMap;\r\n        var molType = void 0;\r\n        var polyType = void 0;\r\n        if (moleculeTypeMap.has(compId)) {\r\n            molType = moleculeTypeMap.get(compId);\r\n            polyType = polymerTypeMap.get(compId);\r\n        }\r\n        else {\r\n            var type = void 0;\r\n            if (chemCompMap.has(compId)) {\r\n                type = chemCompMap.get(compId).type;\r\n            }\r\n            else {\r\n                if (!isProductionMode)\r\n                    console.info('chemComp not found', compId);\r\n                type = getComponentType(compId);\r\n            }\r\n            molType = getMoleculeType(type, compId);\r\n            // TODO if unknown molecule type, use atom names to guess molecule type\r\n            polyType = getPolymerType(type, molType);\r\n            moleculeTypeMap.set(compId, molType);\r\n            polymerTypeMap.set(compId, polyType);\r\n        }\r\n        moleculeType[i] = molType;\r\n        polymerType[i] = polyType;\r\n        var traceAtomId = getAtomIdForAtomRole(polyType, 'trace');\r\n        var traceIndex = index.findAtomsOnResidue(i, traceAtomId);\r\n        if (traceIndex === -1) {\r\n            var coarseAtomId = getAtomIdForAtomRole(polyType, 'coarseBackbone');\r\n            traceIndex = index.findAtomsOnResidue(i, coarseAtomId);\r\n        }\r\n        traceElementIndex[i] = traceIndex;\r\n        var directionFromAtomId = getAtomIdForAtomRole(polyType, 'directionFrom');\r\n        directionFromElementIndex[i] = index.findAtomsOnResidue(i, directionFromAtomId);\r\n        var directionToAtomId = getAtomIdForAtomRole(polyType, 'directionTo');\r\n        directionToElementIndex[i] = index.findAtomsOnResidue(i, directionToAtomId);\r\n    }\r\n    return {\r\n        atom: {\r\n            atomicNumber: atomicNumber\r\n        },\r\n        residue: {\r\n            traceElementIndex: traceElementIndex,\r\n            directionFromElementIndex: directionFromElementIndex,\r\n            directionToElementIndex: directionToElementIndex,\r\n            moleculeType: moleculeType,\r\n            polymerType: polymerType,\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=atomic-derived.js.map"]},"metadata":{},"sourceType":"module"}