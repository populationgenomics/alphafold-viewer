{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { PluginCommands } from '../../../mol-plugin/commands';\nimport { StateSelection } from '../../../mol-state';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { PluginStateObject } from '../../objects';\nimport { StateTransforms } from '../../transforms';\nimport { PluginStateAnimation } from '../model';\nexport var AnimateStructureSpin = PluginStateAnimation.create({\n  name: 'built-in.animate-structure-spin',\n  display: {\n    name: 'Spin Structure'\n  },\n  isExportable: true,\n  params: function () {\n    return {\n      durationInMs: PD.Numeric(3000, {\n        min: 100,\n        max: 10000,\n        step: 100\n      })\n    };\n  },\n  initialState: function () {\n    return {\n      t: 0\n    };\n  },\n  getDuration: function (p) {\n    return {\n      kind: 'fixed',\n      durationMs: p.durationInMs\n    };\n  },\n  setup: function (_, __, plugin) {\n    return __awaiter(this, void 0, void 0, function () {\n      var state, reprs, update, changed, _i, reprs_1, r, spins;\n\n      return __generator(this, function (_a) {\n        state = plugin.state.data;\n        reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D));\n        update = state.build();\n        changed = false;\n\n        for (_i = 0, reprs_1 = reprs; _i < reprs_1.length; _i++) {\n          r = reprs_1[_i];\n          spins = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.SpinStructureRepresentation3D, r.transform.ref));\n          if (spins.length > 0) continue;\n          changed = true;\n          update.to(r.transform.ref).apply(StateTransforms.Representation.SpinStructureRepresentation3D, {\n            t: 0\n          }, {\n            tags: 'animate-structure-spin'\n          });\n        }\n\n        if (!changed) return [2\n        /*return*/\n        ];\n        return [2\n        /*return*/\n        , update.commit({\n          doNotUpdateCurrent: true\n        })];\n      });\n    });\n  },\n  teardown: function (_, __, plugin) {\n    var state = plugin.state.data;\n    var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3DState).withTag('animate-structure-spin'));\n    if (reprs.length === 0) return;\n    var update = state.build();\n\n    for (var _i = 0, reprs_2 = reprs; _i < reprs_2.length; _i++) {\n      var r = reprs_2[_i];\n      update.delete(r.transform.ref);\n    }\n\n    return update.commit();\n  },\n  apply: function (animState, t, ctx) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var state, anims, update, d, newTime, _i, anims_1, m;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            state = ctx.plugin.state.data;\n            anims = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.SpinStructureRepresentation3D));\n\n            if (anims.length === 0) {\n              return [2\n              /*return*/\n              , {\n                kind: 'finished'\n              }];\n            }\n\n            update = state.build();\n            d = (t.current - t.lastApplied) / ctx.params.durationInMs;\n            newTime = (animState.t + d) % 1;\n\n            for (_i = 0, anims_1 = anims; _i < anims_1.length; _i++) {\n              m = anims_1[_i];\n              update.to(m).update(__assign(__assign({}, (_a = m.params) === null || _a === void 0 ? void 0 : _a.values), {\n                t: newTime\n              }));\n            }\n\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(ctx.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , {\n              kind: 'next',\n              state: {\n                t: newTime\n              }\n            }];\n        }\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-plugin-state/animation/built-in/spin-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { PluginCommands } from '../../../mol-plugin/commands';\r\nimport { StateSelection } from '../../../mol-state';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { PluginStateObject } from '../../objects';\r\nimport { StateTransforms } from '../../transforms';\r\nimport { PluginStateAnimation } from '../model';\r\nexport var AnimateStructureSpin = PluginStateAnimation.create({\r\n    name: 'built-in.animate-structure-spin',\r\n    display: { name: 'Spin Structure' },\r\n    isExportable: true,\r\n    params: function () { return ({\r\n        durationInMs: PD.Numeric(3000, { min: 100, max: 10000, step: 100 })\r\n    }); },\r\n    initialState: function () { return ({ t: 0 }); },\r\n    getDuration: function (p) { return ({ kind: 'fixed', durationMs: p.durationInMs }); },\r\n    setup: function (_, __, plugin) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var state, reprs, update, changed, _i, reprs_1, r, spins;\r\n            return __generator(this, function (_a) {\r\n                state = plugin.state.data;\r\n                reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D));\r\n                update = state.build();\r\n                changed = false;\r\n                for (_i = 0, reprs_1 = reprs; _i < reprs_1.length; _i++) {\r\n                    r = reprs_1[_i];\r\n                    spins = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.SpinStructureRepresentation3D, r.transform.ref));\r\n                    if (spins.length > 0)\r\n                        continue;\r\n                    changed = true;\r\n                    update.to(r.transform.ref)\r\n                        .apply(StateTransforms.Representation.SpinStructureRepresentation3D, { t: 0 }, { tags: 'animate-structure-spin' });\r\n                }\r\n                if (!changed)\r\n                    return [2 /*return*/];\r\n                return [2 /*return*/, update.commit({ doNotUpdateCurrent: true })];\r\n            });\r\n        });\r\n    },\r\n    teardown: function (_, __, plugin) {\r\n        var state = plugin.state.data;\r\n        var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3DState)\r\n            .withTag('animate-structure-spin'));\r\n        if (reprs.length === 0)\r\n            return;\r\n        var update = state.build();\r\n        for (var _i = 0, reprs_2 = reprs; _i < reprs_2.length; _i++) {\r\n            var r = reprs_2[_i];\r\n            update.delete(r.transform.ref);\r\n        }\r\n        return update.commit();\r\n    },\r\n    apply: function (animState, t, ctx) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var state, anims, update, d, newTime, _i, anims_1, m;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        state = ctx.plugin.state.data;\r\n                        anims = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.SpinStructureRepresentation3D));\r\n                        if (anims.length === 0) {\r\n                            return [2 /*return*/, { kind: 'finished' }];\r\n                        }\r\n                        update = state.build();\r\n                        d = (t.current - t.lastApplied) / ctx.params.durationInMs;\r\n                        newTime = (animState.t + d) % 1;\r\n                        for (_i = 0, anims_1 = anims; _i < anims_1.length; _i++) {\r\n                            m = anims_1[_i];\r\n                            update.to(m).update(__assign(__assign({}, (_a = m.params) === null || _a === void 0 ? void 0 : _a.values), { t: newTime }));\r\n                        }\r\n                        return [4 /*yield*/, PluginCommands.State.Update(ctx.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _b.sent();\r\n                        return [2 /*return*/, { kind: 'next', state: { t: newTime } }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n//# sourceMappingURL=spin-structure.js.map"]},"metadata":{},"sourceType":"module"}