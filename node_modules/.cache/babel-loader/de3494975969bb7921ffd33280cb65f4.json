{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsMeshParams, UnitsSpheresParams, UnitsSpheresVisual, UnitsMeshVisual } from '../units-visual';\nimport { createElementSphereImpostor, ElementIterator, getElementLoci, eachElement, createElementSphereMesh } from './util/element';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nexport var ElementSphereParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsSpheresParams), {\n  sizeFactor: PD.Numeric(1, {\n    min: 0,\n    max: 10,\n    step: 0.1\n  }),\n  detail: PD.Numeric(0, {\n    min: 0,\n    max: 3,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo),\n  ignoreHydrogens: PD.Boolean(false),\n  traceOnly: PD.Boolean(false),\n  tryUseImpostor: PD.Boolean(true)\n});\nexport function ElementSphereVisual(materialId, structure, props, webgl) {\n  return props.tryUseImpostor && webgl && webgl.extensions.fragDepth ? ElementSphereImpostorVisual(materialId) : ElementSphereMeshVisual(materialId);\n}\nexport function ElementSphereImpostorVisual(materialId) {\n  return UnitsSpheresVisual({\n    defaultProps: PD.getDefaultValues(ElementSphereParams),\n    createGeometry: createElementSphereImpostor,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.ignoreHydrogens !== currentProps.ignoreHydrogens || newProps.traceOnly !== currentProps.traceOnly;\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return !props.tryUseImpostor || !webgl;\n    }\n  }, materialId);\n}\nexport function ElementSphereMeshVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(ElementSphereParams),\n    createGeometry: createElementSphereMesh,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.detail !== currentProps.detail || newProps.ignoreHydrogens !== currentProps.ignoreHydrogens || newProps.traceOnly !== currentProps.traceOnly;\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return props.tryUseImpostor && !!webgl;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/element-sphere.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsMeshParams, UnitsSpheresParams, UnitsSpheresVisual, UnitsMeshVisual } from '../units-visual';\r\nimport { createElementSphereImpostor, ElementIterator, getElementLoci, eachElement, createElementSphereMesh } from './util/element';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nexport var ElementSphereParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsSpheresParams), { sizeFactor: PD.Numeric(1, { min: 0, max: 10, step: 0.1 }), detail: PD.Numeric(0, { min: 0, max: 3, step: 1 }, BaseGeometry.CustomQualityParamInfo), ignoreHydrogens: PD.Boolean(false), traceOnly: PD.Boolean(false), tryUseImpostor: PD.Boolean(true) });\r\nexport function ElementSphereVisual(materialId, structure, props, webgl) {\r\n    return props.tryUseImpostor && webgl && webgl.extensions.fragDepth\r\n        ? ElementSphereImpostorVisual(materialId)\r\n        : ElementSphereMeshVisual(materialId);\r\n}\r\nexport function ElementSphereImpostorVisual(materialId) {\r\n    return UnitsSpheresVisual({\r\n        defaultProps: PD.getDefaultValues(ElementSphereParams),\r\n        createGeometry: createElementSphereImpostor,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||\r\n                newProps.traceOnly !== currentProps.traceOnly);\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return !props.tryUseImpostor || !webgl;\r\n        }\r\n    }, materialId);\r\n}\r\nexport function ElementSphereMeshVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(ElementSphereParams),\r\n        createGeometry: createElementSphereMesh,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.detail !== currentProps.detail ||\r\n                newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||\r\n                newProps.traceOnly !== currentProps.traceOnly);\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return props.tryUseImpostor && !!webgl;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=element-sphere.js.map"]},"metadata":{},"sourceType":"module"}