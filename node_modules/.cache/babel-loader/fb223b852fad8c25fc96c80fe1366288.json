{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\nimport { Color } from '../../mol-util/color';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nvar DefaultList = 'many-distinct';\nvar DefaultColor = Color(0xFAFAFA);\nvar Description = 'Gives every atom a color based on its `label_atom_id` value.';\nexport var AtomIdColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: DefaultList\n}));\nexport function getAtomIdColorThemeParams(ctx) {\n  var params = PD.clone(AtomIdColorThemeParams);\n  return params;\n}\n\nfunction getAtomIdSerialMap(structure) {\n  var map = new Map();\n\n  for (var _i = 0, _a = structure.models; _i < _a.length; _i++) {\n    var m = _a[_i];\n    var label_atom_id = m.atomicHierarchy.atoms.label_atom_id;\n\n    for (var i = 0, il = label_atom_id.rowCount; i < il; ++i) {\n      var id = label_atom_id.value(i);\n      if (!map.has(id)) map.set(id, map.size);\n    }\n  }\n\n  return map;\n}\n\nexport function AtomIdColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var l_1 = StructureElement.Location.create(ctx.structure.root);\n    var atomIdSerialMap_1 = getAtomIdSerialMap(ctx.structure.root);\n    var labelTable_1 = Array.from(atomIdSerialMap_1.keys());\n\n    var valueLabel = function (i) {\n      return labelTable_1[i];\n    };\n\n    var palette_1 = getPalette(atomIdSerialMap_1.size, props, {\n      valueLabel: valueLabel\n    });\n    legend = palette_1.legend;\n\n    color = function (location) {\n      var serial = undefined;\n\n      if (StructureElement.Location.is(location)) {\n        var id = StructureProperties.atom.label_atom_id(location);\n        serial = atomIdSerialMap_1.get(id);\n      } else if (Bond.isLocation(location)) {\n        l_1.unit = location.aUnit;\n        l_1.element = location.aUnit.elements[location.aIndex];\n        var id = StructureProperties.atom.label_atom_id(l_1);\n        serial = atomIdSerialMap_1.get(id);\n      }\n\n      return serial === undefined ? DefaultColor : palette_1.color(serial);\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: AtomIdColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var AtomIdColorThemeProvider = {\n  name: 'atom-id',\n  label: 'Atom Id',\n  category: \"Atom Property\"\n  /* Atom */\n  ,\n  factory: AtomIdColorTheme,\n  getParams: getAtomIdColorThemeParams,\n  defaultValues: PD.getDefaultValues(AtomIdColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/atom-id.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\r\nimport { Color } from '../../mol-util/color';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nvar DefaultList = 'many-distinct';\r\nvar DefaultColor = Color(0xFAFAFA);\r\nvar Description = 'Gives every atom a color based on its `label_atom_id` value.';\r\nexport var AtomIdColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: DefaultList }));\r\nexport function getAtomIdColorThemeParams(ctx) {\r\n    var params = PD.clone(AtomIdColorThemeParams);\r\n    return params;\r\n}\r\nfunction getAtomIdSerialMap(structure) {\r\n    var map = new Map();\r\n    for (var _i = 0, _a = structure.models; _i < _a.length; _i++) {\r\n        var m = _a[_i];\r\n        var label_atom_id = m.atomicHierarchy.atoms.label_atom_id;\r\n        for (var i = 0, il = label_atom_id.rowCount; i < il; ++i) {\r\n            var id = label_atom_id.value(i);\r\n            if (!map.has(id))\r\n                map.set(id, map.size);\r\n        }\r\n    }\r\n    return map;\r\n}\r\nexport function AtomIdColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var l_1 = StructureElement.Location.create(ctx.structure.root);\r\n        var atomIdSerialMap_1 = getAtomIdSerialMap(ctx.structure.root);\r\n        var labelTable_1 = Array.from(atomIdSerialMap_1.keys());\r\n        var valueLabel = function (i) { return labelTable_1[i]; };\r\n        var palette_1 = getPalette(atomIdSerialMap_1.size, props, { valueLabel: valueLabel });\r\n        legend = palette_1.legend;\r\n        color = function (location) {\r\n            var serial = undefined;\r\n            if (StructureElement.Location.is(location)) {\r\n                var id = StructureProperties.atom.label_atom_id(location);\r\n                serial = atomIdSerialMap_1.get(id);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                l_1.unit = location.aUnit;\r\n                l_1.element = location.aUnit.elements[location.aIndex];\r\n                var id = StructureProperties.atom.label_atom_id(l_1);\r\n                serial = atomIdSerialMap_1.get(id);\r\n            }\r\n            return serial === undefined ? DefaultColor : palette_1.color(serial);\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: AtomIdColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var AtomIdColorThemeProvider = {\r\n    name: 'atom-id',\r\n    label: 'Atom Id',\r\n    category: \"Atom Property\" /* Atom */,\r\n    factory: AtomIdColorTheme,\r\n    getParams: getAtomIdColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(AtomIdColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=atom-id.js.map"]},"metadata":{},"sourceType":"module"}