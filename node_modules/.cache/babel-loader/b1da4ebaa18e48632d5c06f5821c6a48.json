{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder, ComplexRepresentation } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { LabelTextVisual, LabelTextParams } from '../visual/label-text';\nimport { MarkerAction } from '../../../mol-util/marker-action';\nvar LabelVisuals = {\n  'label-text': function (ctx, getParams) {\n    return ComplexRepresentation('Label text', ctx, getParams, LabelTextVisual);\n  }\n};\nexport var LabelParams = __assign(__assign({}, LabelTextParams), {\n  visuals: PD.MultiSelect(['label-text'], PD.objectToOptions(LabelVisuals))\n});\nexport function getLabelParams(ctx, structure) {\n  return PD.clone(LabelParams);\n}\nexport function LabelRepresentation(ctx, getParams) {\n  var repr = Representation.createMulti('Label', ctx, getParams, StructureRepresentationStateBuilder, LabelVisuals);\n  repr.setState({\n    pickable: false,\n    markerActions: MarkerAction.None\n  });\n  return repr;\n}\nexport var LabelRepresentationProvider = StructureRepresentationProvider({\n  name: 'label',\n  label: 'Label',\n  description: 'Displays labels.',\n  factory: LabelRepresentation,\n  getParams: getLabelParams,\n  defaultValues: PD.getDefaultValues(LabelParams),\n  defaultColorTheme: {\n    name: 'uniform'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/label.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAkC,+BAAlC,EAAmE,mCAAnE,EAAwG,qBAAxG,QAAqI,mBAArI;AACA,SAAS,cAAT,QAAkF,kCAAlF;AAGA,SAAS,eAAT,EAA0B,eAA1B,QAAiD,sBAAjD;AACA,SAAS,YAAT,QAA6B,iCAA7B;AAEA,IAAM,YAAY,GAAG;AACjB,gBAAc,UAAC,GAAD,EAA6B,SAA7B,EAA8F;AAAK,WAAA,qBAAqB,CAAC,YAAD,EAAe,GAAf,EAAoB,SAApB,EAArB,eAAqB,CAArB;AAAoE;AADpK,CAArB;AAIA,OAAO,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACjB,eADiB,CAAA,EACF;AAClB,EAAA,OAAO,EAAE,EAAE,CAAC,WAAH,CAAe,CAAC,YAAD,CAAf,EAA+B,EAAE,CAAC,eAAH,CAAmB,YAAnB,CAA/B;AADS,CADE,CAAjB;AAKP,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoD,SAApD,EAAwE;AAC1E,SAAO,EAAE,CAAC,KAAH,CAAS,WAAT,CAAP;AACH;AAGD,OAAM,SAAU,mBAAV,CAA8B,GAA9B,EAA0D,SAA1D,EAAuH;AACzH,MAAM,IAAI,GAAG,cAAc,CAAC,WAAf,CAA2B,OAA3B,EAAoC,GAApC,EAAyC,SAAzC,EAAoD,mCAApD,EAAyF,YAAzF,CAAb;AACA,EAAA,IAAI,CAAC,QAAL,CAAc;AAAE,IAAA,QAAQ,EAAE,KAAZ;AAAmB,IAAA,aAAa,EAAE,YAAY,CAAC;AAA/C,GAAd;AACA,SAAO,IAAP;AACH;AAED,OAAO,IAAM,2BAA2B,GAAG,+BAA+B,CAAC;AACvE,EAAA,IAAI,EAAE,OADiE;AAEvE,EAAA,KAAK,EAAE,OAFgE;AAGvE,EAAA,WAAW,EAAE,kBAH0D;AAIvE,EAAA,OAAO,EAAE,mBAJ8D;AAKvE,EAAA,SAAS,EAAE,cAL4D;AAMvE,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,WAApB,CANwD;AAOvE,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAPoD;AAQvE,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GARqD;AASvE,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATK,CAAD,CAAnE","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder, ComplexRepresentation } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { LabelTextVisual, LabelTextParams } from '../visual/label-text';\r\nimport { MarkerAction } from '../../../mol-util/marker-action';\r\nvar LabelVisuals = {\r\n    'label-text': function (ctx, getParams) { return ComplexRepresentation('Label text', ctx, getParams, LabelTextVisual); },\r\n};\r\nexport var LabelParams = __assign(__assign({}, LabelTextParams), { visuals: PD.MultiSelect(['label-text'], PD.objectToOptions(LabelVisuals)) });\r\nexport function getLabelParams(ctx, structure) {\r\n    return PD.clone(LabelParams);\r\n}\r\nexport function LabelRepresentation(ctx, getParams) {\r\n    var repr = Representation.createMulti('Label', ctx, getParams, StructureRepresentationStateBuilder, LabelVisuals);\r\n    repr.setState({ pickable: false, markerActions: MarkerAction.None });\r\n    return repr;\r\n}\r\nexport var LabelRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'label',\r\n    label: 'Label',\r\n    description: 'Displays labels.',\r\n    factory: LabelRepresentation,\r\n    getParams: getLabelParams,\r\n    defaultValues: PD.getDefaultValues(LabelParams),\r\n    defaultColorTheme: { name: 'uniform' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=label.js.map"]},"metadata":{},"sourceType":"module"}