{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { clamp } from '../../../mol-math/interpolate';\nimport { Quat } from '../../../mol-math/linear-algebra/3d/quat';\nimport { Vec3 } from '../../../mol-math/linear-algebra/3d/vec3';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { PluginStateAnimation } from '../model';\n\nvar _dir = Vec3(),\n    _axis = Vec3(),\n    _rot = Quat();\n\nexport var AnimateCameraSpin = PluginStateAnimation.create({\n  name: 'built-in.animate-camera-spin',\n  display: {\n    name: 'Camera Spin'\n  },\n  isExportable: true,\n  params: function () {\n    return {\n      durationInMs: PD.Numeric(4000, {\n        min: 100,\n        max: 20000,\n        step: 100\n      }),\n      speed: PD.Numeric(1, {\n        min: 1,\n        max: 10,\n        step: 1\n      }, {\n        description: 'How many times to spin in the specified dutation.'\n      }),\n      direction: PD.Select('cw', [['cw', 'Clockwise'], ['ccw', 'Counter Clockwise']], {\n        cycle: true\n      })\n    };\n  },\n  initialState: function (_, ctx) {\n    var _a;\n\n    return {\n      snapshot: (_a = ctx.canvas3d) === null || _a === void 0 ? void 0 : _a.camera.getSnapshot()\n    };\n  },\n  getDuration: function (p) {\n    return {\n      kind: 'fixed',\n      durationMs: p.durationInMs\n    };\n  },\n  teardown: function (_, state, ctx) {\n    var _a;\n\n    (_a = ctx.canvas3d) === null || _a === void 0 ? void 0 : _a.requestCameraReset({\n      snapshot: state.snapshot,\n      durationMs: 0\n    });\n  },\n  apply: function (animState, t, ctx) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var snapshot, phase, angle, position;\n      return __generator(this, function (_c) {\n        if (t.current === 0) {\n          return [2\n          /*return*/\n          , {\n            kind: 'next',\n            state: animState\n          }];\n        }\n\n        snapshot = animState.snapshot;\n\n        if (snapshot.radiusMax < 0.0001) {\n          return [2\n          /*return*/\n          , {\n            kind: 'finished'\n          }];\n        }\n\n        phase = clamp(t.current / ctx.params.durationInMs, 0, 1);\n\n        if (phase >= 0.99999) {\n          (_a = ctx.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.requestCameraReset({\n            snapshot: snapshot,\n            durationMs: 0\n          });\n          return [2\n          /*return*/\n          , {\n            kind: 'finished'\n          }];\n        }\n\n        angle = 2 * Math.PI * phase * ctx.params.speed * (ctx.params.direction === 'ccw' ? -1 : 1);\n        Vec3.sub(_dir, snapshot.position, snapshot.target);\n        Vec3.normalize(_axis, snapshot.up);\n        Quat.setAxisAngle(_rot, _axis, angle);\n        Vec3.transformQuat(_dir, _dir, _rot);\n        position = Vec3.add(Vec3(), snapshot.target, _dir);\n        (_b = ctx.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.requestCameraReset({\n          snapshot: __assign(__assign({}, snapshot), {\n            position: position\n          }),\n          durationMs: 0\n        });\n        return [2\n        /*return*/\n        , {\n          kind: 'next',\n          state: animState\n        }];\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-plugin-state/animation/built-in/camera-spin.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAGH,SAAS,KAAT,QAAsB,+BAAtB;AACA,SAAS,IAAT,QAAqB,0CAArB;AACA,SAAS,IAAT,QAAqB,0CAArB;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAS,oBAAT,QAAqC,UAArC;;AAEA,IAAM,IAAI,GAAG,IAAI,EAAjB;AAAA,IAAqB,KAAK,GAAG,IAAI,EAAjC;AAAA,IAAqC,IAAI,GAAG,IAAI,EAAhD;;AAIA,OAAO,IAAM,iBAAiB,GAAG,oBAAoB,CAAC,MAArB,CAA4B;AACzD,EAAA,IAAI,EAAE,8BADmD;AAEzD,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAFgD;AAGzD,EAAA,YAAY,EAAE,IAH2C;AAIzD,EAAA,MAAM,EAAE,YAAA;AAAM,WAAC;AACX,MAAA,YAAY,EAAE,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB;AAAE,QAAA,GAAG,EAAE,GAAP;AAAY,QAAA,GAAG,EAAE,KAAjB;AAAwB,QAAA,IAAI,EAAE;AAA9B,OAAjB,CADH;AAEX,MAAA,KAAK,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE,EAAf;AAAmB,QAAA,IAAI,EAAE;AAAzB,OAAd,EAA4C;AAAE,QAAA,WAAW,EAAE;AAAf,OAA5C,CAFI;AAGX,MAAA,SAAS,EAAE,EAAE,CAAC,MAAH,CAAwB,IAAxB,EAA8B,CAAC,CAAC,IAAD,EAAO,WAAP,CAAD,EAAsB,CAAC,KAAD,EAAQ,mBAAR,CAAtB,CAA9B,EAAmF;AAAE,QAAA,KAAK,EAAE;AAAT,OAAnF;AAHA,KAAD;AAIZ,GARuD;AASzD,EAAA,YAAY,EAAE,UAAC,CAAD,EAAI,GAAJ,EAAO;AAAA,QAAA,EAAA;;AAAK,WAAC;AAAE,MAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,GAAG,CAAC,QAAJ,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,MAAF,CAAS,WAAT;AAAxB,KAAD;AAA4D,GAT7B;AAUzD,EAAA,WAAW,EAAE,UAAA,CAAA,EAAC;AAAI,WAAC;AAAE,MAAA,IAAI,EAAE,OAAR;AAAiB,MAAA,UAAU,EAAE,CAAC,CAA/B;AAAC,KAAD;AAA+C,GAVR;AAWzD,EAAA,QAAQ,EAAE,UAAC,CAAD,EAAI,KAAJ,EAAkB,GAAlB,EAAqB;;;AAC3B,KAAA,EAAA,GAAA,GAAG,CAAC,QAAJ,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,kBAAF,CAAqB;AAAE,MAAA,QAAQ,EAAE,KAAK,CAAC,QAAlB;AAA4B,MAAA,UAAU,EAAE;AAAxC,KAArB,CAAZ;AACH,GAbwD;AAcnD,EAAA,KAAK,EAAX,UAAY,SAAZ,EAA8B,CAA9B,EAAiC,GAAjC,EAAoC;;;;;;AAChC,YAAI,CAAC,CAAC,OAAF,KAAc,CAAlB,EAAqB;AACjB,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,IAAI,EAAE,MAAR;AAAgB,YAAA,KAAK,EAAE;AAAvB,WAAP,CAAA;AACH;;AAEK,QAAA,QAAQ,GAAG,SAAS,CAAC,QAArB;;AACN,YAAI,QAAQ,CAAC,SAAT,GAAqB,MAAzB,EAAiC;AAC7B,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,IAAI,EAAE;AAAR,WAAP,CAAA;AACH;;AAEK,QAAA,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,OAAF,GAAY,GAAG,CAAC,MAAJ,CAAW,YAAxB,EAAsC,CAAtC,EAAyC,CAAzC,CAAb;;AAEN,YAAI,KAAK,IAAI,OAAb,EAAsB;AAClB,WAAA,EAAA,GAAA,GAAG,CAAC,MAAJ,CAAW,QAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,kBAAF,CAAqB;AAAE,YAAA,QAAQ,EAAA,QAAV;AAAY,YAAA,UAAU,EAAE;AAAxB,WAArB,CAAnB;AACA,iBAAA,CAAA;AAAA;AAAA,YAAO;AAAE,YAAA,IAAI,EAAE;AAAR,WAAP,CAAA;AACH;;AAEK,QAAA,KAAK,GAAG,IAAI,IAAI,CAAC,EAAT,GAAc,KAAd,GAAsB,GAAG,CAAC,MAAJ,CAAW,KAAjC,IAA0C,GAAG,CAAC,MAAJ,CAAW,SAAX,KAAyB,KAAzB,GAAiC,CAAC,CAAlC,GAAsC,CAAhF,CAAR;AAEN,QAAA,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,QAAQ,CAAC,QAAxB,EAAkC,QAAQ,CAAC,MAA3C;AACA,QAAA,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,QAAQ,CAAC,EAA/B;AACA,QAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,KAA/B;AACA,QAAA,IAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B;AACM,QAAA,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,EAAb,EAAiB,QAAQ,CAAC,MAA1B,EAAkC,IAAlC,CAAX;AACN,SAAA,EAAA,GAAA,GAAG,CAAC,MAAJ,CAAW,QAAX,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,KAAA,CAAnB,GAAmB,EAAA,CAAE,kBAAF,CAAqB;AAAE,UAAA,QAAQ,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,QAAP,CAAA,EAAe;AAAE,YAAA,QAAQ,EAAA;AAAV,WAAf,CAAV;AAAuC,UAAA,UAAU,EAAE;AAAnD,SAArB,CAAnB;AAEA,eAAA,CAAA;AAAA;AAAA,UAAO;AAAE,UAAA,IAAI,EAAE,MAAR;AAAgB,UAAA,KAAK,EAAE;AAAvB,SAAP,CAAA;;;AACH;AAzCwD,CAA5B,CAA1B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { clamp } from '../../../mol-math/interpolate';\r\nimport { Quat } from '../../../mol-math/linear-algebra/3d/quat';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra/3d/vec3';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { PluginStateAnimation } from '../model';\r\nvar _dir = Vec3(), _axis = Vec3(), _rot = Quat();\r\nexport var AnimateCameraSpin = PluginStateAnimation.create({\r\n    name: 'built-in.animate-camera-spin',\r\n    display: { name: 'Camera Spin' },\r\n    isExportable: true,\r\n    params: function () { return ({\r\n        durationInMs: PD.Numeric(4000, { min: 100, max: 20000, step: 100 }),\r\n        speed: PD.Numeric(1, { min: 1, max: 10, step: 1 }, { description: 'How many times to spin in the specified dutation.' }),\r\n        direction: PD.Select('cw', [['cw', 'Clockwise'], ['ccw', 'Counter Clockwise']], { cycle: true })\r\n    }); },\r\n    initialState: function (_, ctx) { var _a; return ({ snapshot: (_a = ctx.canvas3d) === null || _a === void 0 ? void 0 : _a.camera.getSnapshot() }); },\r\n    getDuration: function (p) { return ({ kind: 'fixed', durationMs: p.durationInMs }); },\r\n    teardown: function (_, state, ctx) {\r\n        var _a;\r\n        (_a = ctx.canvas3d) === null || _a === void 0 ? void 0 : _a.requestCameraReset({ snapshot: state.snapshot, durationMs: 0 });\r\n    },\r\n    apply: function (animState, t, ctx) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var snapshot, phase, angle, position;\r\n            return __generator(this, function (_c) {\r\n                if (t.current === 0) {\r\n                    return [2 /*return*/, { kind: 'next', state: animState }];\r\n                }\r\n                snapshot = animState.snapshot;\r\n                if (snapshot.radiusMax < 0.0001) {\r\n                    return [2 /*return*/, { kind: 'finished' }];\r\n                }\r\n                phase = clamp(t.current / ctx.params.durationInMs, 0, 1);\r\n                if (phase >= 0.99999) {\r\n                    (_a = ctx.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.requestCameraReset({ snapshot: snapshot, durationMs: 0 });\r\n                    return [2 /*return*/, { kind: 'finished' }];\r\n                }\r\n                angle = 2 * Math.PI * phase * ctx.params.speed * (ctx.params.direction === 'ccw' ? -1 : 1);\r\n                Vec3.sub(_dir, snapshot.position, snapshot.target);\r\n                Vec3.normalize(_axis, snapshot.up);\r\n                Quat.setAxisAngle(_rot, _axis, angle);\r\n                Vec3.transformQuat(_dir, _dir, _rot);\r\n                position = Vec3.add(Vec3(), snapshot.target, _dir);\r\n                (_b = ctx.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.requestCameraReset({ snapshot: __assign(__assign({}, snapshot), { position: position }), durationMs: 0 });\r\n                return [2 /*return*/, { kind: 'next', state: animState }];\r\n            });\r\n        });\r\n    }\r\n});\r\n//# sourceMappingURL=camera-spin.js.map"]},"metadata":{},"sourceType":"module"}