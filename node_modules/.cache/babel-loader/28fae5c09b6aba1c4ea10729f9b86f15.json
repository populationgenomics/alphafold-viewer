{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Column, Table } from '../../../mol-data/db';\nimport { Interval, Segmentation } from '../../../mol-data/int';\nimport { UUID } from '../../../mol-util/uuid';\nimport { AtomsSchema, ChainsSchema, ResiduesSchema } from '../../../mol-model/structure/model/properties/atomic';\nimport { getAtomicIndex } from '../../../mol-model/structure/model/properties/utils/atomic-index';\nimport { ElementSymbol } from '../../../mol-model/structure/model/types';\nimport { getAtomicDerivedData } from '../../../mol-model/structure/model/properties/utils/atomic-derived';\nimport { SymmetryOperator } from '../../../mol-math/geometry';\nimport { MmcifFormat } from '../mmcif';\nimport { AtomSiteOperatorMappingSchema } from '../../../mol-model/structure/export/categories/atom_site_operator_mapping';\nimport { toDatabase } from '../../../mol-io/reader/cif/schema';\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\n\nfunction findHierarchyOffsets(atom_site) {\n  if (atom_site._rowCount === 0) return {\n    residues: [],\n    chains: []\n  };\n  var start = 0,\n      end = atom_site._rowCount;\n  var residues = [start],\n      chains = [start];\n  var label_entity_id = atom_site.label_entity_id,\n      label_asym_id = atom_site.label_asym_id,\n      label_seq_id = atom_site.label_seq_id,\n      auth_seq_id = atom_site.auth_seq_id,\n      pdbx_PDB_ins_code = atom_site.pdbx_PDB_ins_code;\n\n  for (var i = start + 1; i < end; i++) {\n    var newChain = !label_entity_id.areValuesEqual(i - 1, i) || !label_asym_id.areValuesEqual(i - 1, i);\n    var newResidue = newChain || !label_seq_id.areValuesEqual(i - 1, i) || !auth_seq_id.areValuesEqual(i - 1, i) || !pdbx_PDB_ins_code.areValuesEqual(i - 1, i); // not checking label_comp_id to allow for MICROHETEROGENEITY\n\n    if (newResidue) residues[residues.length] = i;\n    if (newChain) chains[chains.length] = i;\n  }\n\n  return {\n    residues: residues,\n    chains: chains\n  };\n}\n\nfunction substUndefinedColumn(table, a, b) {\n  if (!table[a].isDefined) {\n    table[a] = table[b];\n  }\n\n  if (!table[b].isDefined) {\n    table[b] = table[a];\n  }\n}\n\nfunction createHierarchyData(atom_site, sourceIndex, offsets) {\n  var atoms = Table.ofColumns(AtomsSchema, {\n    type_symbol: Column.ofArray({\n      array: Column.mapToArray(atom_site.type_symbol, ElementSymbol),\n      schema: Column.Schema.Aliased(Column.Schema.str)\n    }),\n    label_atom_id: atom_site.label_atom_id,\n    auth_atom_id: atom_site.auth_atom_id,\n    label_alt_id: atom_site.label_alt_id,\n    label_comp_id: atom_site.label_comp_id,\n    auth_comp_id: atom_site.auth_comp_id,\n    pdbx_formal_charge: atom_site.pdbx_formal_charge\n  });\n  var residues = Table.view(atom_site, ResiduesSchema, offsets.residues);\n  var chains = Table.view(atom_site, ChainsSchema, offsets.chains);\n\n  if (!residues.label_seq_id.isDefined) {\n    var seqIds = new Int32Array(residues.label_seq_id.rowCount);\n    var residueOffsets = offsets.residues,\n        chainOffsets = offsets.chains;\n    var cI = 0;\n    var seqId = 0;\n\n    for (var i = 0, il = seqIds.length; i < il; ++i) {\n      if (residueOffsets[i] >= chainOffsets[cI + 1]) {\n        cI += 1;\n        seqId = 0;\n      }\n\n      seqIds[i] = ++seqId; // start id on one\n    }\n\n    residues.label_seq_id = Column.ofIntArray(seqIds);\n  } // Optimize the numeric columns\n\n\n  Table.columnToArray(residues, 'label_seq_id', Int32Array);\n  Table.columnToArray(residues, 'auth_seq_id', Int32Array); // Fix possibly missing auth_/label_ columns\n\n  substUndefinedColumn(atoms, 'label_atom_id', 'auth_atom_id');\n  substUndefinedColumn(atoms, 'label_comp_id', 'auth_comp_id');\n  substUndefinedColumn(residues, 'label_seq_id', 'auth_seq_id');\n  substUndefinedColumn(chains, 'label_asym_id', 'auth_asym_id');\n  return {\n    atoms: atoms,\n    residues: residues,\n    chains: chains,\n    atomSourceIndex: sourceIndex\n  };\n}\n\nfunction getConformation(atom_site) {\n  return {\n    id: UUID.create22(),\n    atomId: atom_site.id,\n    occupancy: atom_site.occupancy.isDefined ? atom_site.occupancy : Column.ofConst(1, atom_site._rowCount, Column.Schema.float),\n    B_iso_or_equiv: atom_site.B_iso_or_equiv,\n    xyzDefined: atom_site.Cartn_x.isDefined && atom_site.Cartn_y.isDefined && atom_site.Cartn_z.isDefined,\n    x: atom_site.Cartn_x.toArray({\n      array: Float32Array\n    }),\n    y: atom_site.Cartn_y.toArray({\n      array: Float32Array\n    }),\n    z: atom_site.Cartn_z.toArray({\n      array: Float32Array\n    })\n  };\n}\n\nfunction isHierarchyDataEqual(a, b) {\n  return Table.areEqual(a.chains, b.chains) && Table.areEqual(a.residues, b.residues) && Table.areEqual(a.atoms, b.atoms);\n}\n\nfunction createChainOperatorMappingAndSubstituteNames(hierarchy, format) {\n  var mapping = new Map();\n  if (!MmcifFormat.is(format)) return mapping;\n  var entries = toDatabase(AtomSiteOperatorMappingSchema, format.data.frame).molstar_atom_site_operator_mapping;\n  if (entries._rowCount === 0) return mapping;\n  var labelMap = new Map();\n  var authMap = new Map();\n\n  for (var i = 0; i < entries._rowCount; i++) {\n    var assembly = entries.assembly_operator_id.valueKind(i) === 0\n    /* Present */\n    ? {\n      id: entries.assembly_id.value(i),\n      operList: [],\n      operId: entries.assembly_operator_id.value(i)\n    } : void 0;\n    var operator = SymmetryOperator.create(entries.operator_name.value(i), Mat4.identity(), {\n      assembly: assembly,\n      spgrOp: entries.symmetry_operator_index.valueKind(i) === 0\n      /* Present */\n      ? entries.symmetry_operator_index.value(i) : void 0,\n      hkl: Vec3.ofArray(entries.symmetry_hkl.value(i)),\n      ncsId: entries.ncs_id.value(i)\n    });\n    var suffix = entries.suffix.value(i);\n    var label = entries.label_asym_id.value(i);\n    labelMap.set(\"\" + label + suffix, {\n      name: label,\n      operator: operator\n    });\n    var auth = entries.auth_asym_id.value(i);\n    authMap.set(\"\" + auth + suffix, auth);\n  }\n\n  var _a = hierarchy.chains,\n      label_asym_id = _a.label_asym_id,\n      auth_asym_id = _a.auth_asym_id;\n  var mappedLabel = new Array(label_asym_id.rowCount);\n  var mappedAuth = new Array(label_asym_id.rowCount);\n\n  for (var i = 0; i < label_asym_id.rowCount; i++) {\n    var label = label_asym_id.value(i),\n        auth = auth_asym_id.value(i);\n\n    if (!labelMap.has(label)) {\n      mappedLabel[i] = label;\n      mappedAuth[i] = auth;\n      continue;\n    }\n\n    var _b = labelMap.get(label),\n        name_1 = _b.name,\n        operator = _b.operator;\n\n    mapping.set(i, operator);\n    mappedLabel[i] = name_1;\n    mappedAuth[i] = authMap.get(auth) || auth;\n  }\n\n  hierarchy.chains.label_asym_id = Column.ofArray({\n    array: mappedLabel,\n    valueKind: hierarchy.chains.label_asym_id.valueKind,\n    schema: hierarchy.chains.label_asym_id.schema\n  });\n  hierarchy.chains.auth_asym_id = Column.ofArray({\n    array: mappedAuth,\n    valueKind: hierarchy.chains.auth_asym_id.valueKind,\n    schema: hierarchy.chains.auth_asym_id.schema\n  });\n  return mapping;\n}\n\nfunction getAtomicHierarchy(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous) {\n  var hierarchyOffsets = findHierarchyOffsets(atom_site);\n  var hierarchyData = createHierarchyData(atom_site, sourceIndex, hierarchyOffsets);\n  var chainOperatorMapping = createChainOperatorMappingAndSubstituteNames(hierarchyData, format);\n\n  if (previous && isHierarchyDataEqual(previous.atomicHierarchy, hierarchyData)) {\n    return {\n      sameAsPrevious: true,\n      hierarchy: previous.atomicHierarchy,\n      chainOperatorMapping: chainOperatorMapping\n    };\n  }\n\n  var hierarchySegments = {\n    residueAtomSegments: Segmentation.ofOffsets(hierarchyOffsets.residues, Interval.ofBounds(0, atom_site._rowCount)),\n    chainAtomSegments: Segmentation.ofOffsets(hierarchyOffsets.chains, Interval.ofBounds(0, atom_site._rowCount))\n  };\n  var index = getAtomicIndex(hierarchyData, entities, hierarchySegments);\n  var derived = getAtomicDerivedData(hierarchyData, hierarchySegments, index, chemicalComponentMap);\n\n  var hierarchy = __assign(__assign(__assign({}, hierarchyData), hierarchySegments), {\n    index: index,\n    derived: derived\n  });\n\n  return {\n    sameAsPrevious: false,\n    hierarchy: hierarchy,\n    chainOperatorMapping: chainOperatorMapping\n  };\n}\n\nexport function getAtomicHierarchyAndConformation(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous) {\n  var _a = getAtomicHierarchy(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous),\n      sameAsPrevious = _a.sameAsPrevious,\n      hierarchy = _a.hierarchy,\n      chainOperatorMapping = _a.chainOperatorMapping;\n\n  var conformation = getConformation(atom_site);\n  return {\n    sameAsPrevious: sameAsPrevious,\n    hierarchy: hierarchy,\n    conformation: conformation,\n    chainOperatorMapping: chainOperatorMapping\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/atomic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Column, Table } from '../../../mol-data/db';\r\nimport { Interval, Segmentation } from '../../../mol-data/int';\r\nimport { UUID } from '../../../mol-util/uuid';\r\nimport { AtomsSchema, ChainsSchema, ResiduesSchema } from '../../../mol-model/structure/model/properties/atomic';\r\nimport { getAtomicIndex } from '../../../mol-model/structure/model/properties/utils/atomic-index';\r\nimport { ElementSymbol } from '../../../mol-model/structure/model/types';\r\nimport { getAtomicDerivedData } from '../../../mol-model/structure/model/properties/utils/atomic-derived';\r\nimport { SymmetryOperator } from '../../../mol-math/geometry';\r\nimport { MmcifFormat } from '../mmcif';\r\nimport { AtomSiteOperatorMappingSchema } from '../../../mol-model/structure/export/categories/atom_site_operator_mapping';\r\nimport { toDatabase } from '../../../mol-io/reader/cif/schema';\r\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\r\nfunction findHierarchyOffsets(atom_site) {\r\n    if (atom_site._rowCount === 0)\r\n        return { residues: [], chains: [] };\r\n    var start = 0, end = atom_site._rowCount;\r\n    var residues = [start], chains = [start];\r\n    var label_entity_id = atom_site.label_entity_id, label_asym_id = atom_site.label_asym_id, label_seq_id = atom_site.label_seq_id, auth_seq_id = atom_site.auth_seq_id, pdbx_PDB_ins_code = atom_site.pdbx_PDB_ins_code;\r\n    for (var i = start + 1; i < end; i++) {\r\n        var newChain = !label_entity_id.areValuesEqual(i - 1, i) || !label_asym_id.areValuesEqual(i - 1, i);\r\n        var newResidue = newChain\r\n            || !label_seq_id.areValuesEqual(i - 1, i)\r\n            || !auth_seq_id.areValuesEqual(i - 1, i)\r\n            || !pdbx_PDB_ins_code.areValuesEqual(i - 1, i);\r\n        // not checking label_comp_id to allow for MICROHETEROGENEITY\r\n        if (newResidue)\r\n            residues[residues.length] = i;\r\n        if (newChain)\r\n            chains[chains.length] = i;\r\n    }\r\n    return { residues: residues, chains: chains };\r\n}\r\nfunction substUndefinedColumn(table, a, b) {\r\n    if (!table[a].isDefined) {\r\n        table[a] = table[b];\r\n    }\r\n    if (!table[b].isDefined) {\r\n        table[b] = table[a];\r\n    }\r\n}\r\nfunction createHierarchyData(atom_site, sourceIndex, offsets) {\r\n    var atoms = Table.ofColumns(AtomsSchema, {\r\n        type_symbol: Column.ofArray({ array: Column.mapToArray(atom_site.type_symbol, ElementSymbol), schema: Column.Schema.Aliased(Column.Schema.str) }),\r\n        label_atom_id: atom_site.label_atom_id,\r\n        auth_atom_id: atom_site.auth_atom_id,\r\n        label_alt_id: atom_site.label_alt_id,\r\n        label_comp_id: atom_site.label_comp_id,\r\n        auth_comp_id: atom_site.auth_comp_id,\r\n        pdbx_formal_charge: atom_site.pdbx_formal_charge\r\n    });\r\n    var residues = Table.view(atom_site, ResiduesSchema, offsets.residues);\r\n    var chains = Table.view(atom_site, ChainsSchema, offsets.chains);\r\n    if (!residues.label_seq_id.isDefined) {\r\n        var seqIds = new Int32Array(residues.label_seq_id.rowCount);\r\n        var residueOffsets = offsets.residues, chainOffsets = offsets.chains;\r\n        var cI = 0;\r\n        var seqId = 0;\r\n        for (var i = 0, il = seqIds.length; i < il; ++i) {\r\n            if (residueOffsets[i] >= chainOffsets[cI + 1]) {\r\n                cI += 1;\r\n                seqId = 0;\r\n            }\r\n            seqIds[i] = ++seqId; // start id on one\r\n        }\r\n        residues.label_seq_id = Column.ofIntArray(seqIds);\r\n    }\r\n    // Optimize the numeric columns\r\n    Table.columnToArray(residues, 'label_seq_id', Int32Array);\r\n    Table.columnToArray(residues, 'auth_seq_id', Int32Array);\r\n    // Fix possibly missing auth_/label_ columns\r\n    substUndefinedColumn(atoms, 'label_atom_id', 'auth_atom_id');\r\n    substUndefinedColumn(atoms, 'label_comp_id', 'auth_comp_id');\r\n    substUndefinedColumn(residues, 'label_seq_id', 'auth_seq_id');\r\n    substUndefinedColumn(chains, 'label_asym_id', 'auth_asym_id');\r\n    return { atoms: atoms, residues: residues, chains: chains, atomSourceIndex: sourceIndex };\r\n}\r\nfunction getConformation(atom_site) {\r\n    return {\r\n        id: UUID.create22(),\r\n        atomId: atom_site.id,\r\n        occupancy: atom_site.occupancy.isDefined ? atom_site.occupancy : Column.ofConst(1, atom_site._rowCount, Column.Schema.float),\r\n        B_iso_or_equiv: atom_site.B_iso_or_equiv,\r\n        xyzDefined: atom_site.Cartn_x.isDefined && atom_site.Cartn_y.isDefined && atom_site.Cartn_z.isDefined,\r\n        x: atom_site.Cartn_x.toArray({ array: Float32Array }),\r\n        y: atom_site.Cartn_y.toArray({ array: Float32Array }),\r\n        z: atom_site.Cartn_z.toArray({ array: Float32Array }),\r\n    };\r\n}\r\nfunction isHierarchyDataEqual(a, b) {\r\n    return Table.areEqual(a.chains, b.chains)\r\n        && Table.areEqual(a.residues, b.residues)\r\n        && Table.areEqual(a.atoms, b.atoms);\r\n}\r\nfunction createChainOperatorMappingAndSubstituteNames(hierarchy, format) {\r\n    var mapping = new Map();\r\n    if (!MmcifFormat.is(format))\r\n        return mapping;\r\n    var entries = toDatabase(AtomSiteOperatorMappingSchema, format.data.frame).molstar_atom_site_operator_mapping;\r\n    if (entries._rowCount === 0)\r\n        return mapping;\r\n    var labelMap = new Map();\r\n    var authMap = new Map();\r\n    for (var i = 0; i < entries._rowCount; i++) {\r\n        var assembly = entries.assembly_operator_id.valueKind(i) === 0 /* Present */\r\n            ? { id: entries.assembly_id.value(i), operList: [], operId: entries.assembly_operator_id.value(i) }\r\n            : void 0;\r\n        var operator = SymmetryOperator.create(entries.operator_name.value(i), Mat4.identity(), {\r\n            assembly: assembly,\r\n            spgrOp: entries.symmetry_operator_index.valueKind(i) === 0 /* Present */ ? entries.symmetry_operator_index.value(i) : void 0,\r\n            hkl: Vec3.ofArray(entries.symmetry_hkl.value(i)),\r\n            ncsId: entries.ncs_id.value(i)\r\n        });\r\n        var suffix = entries.suffix.value(i);\r\n        var label = entries.label_asym_id.value(i);\r\n        labelMap.set(\"\" + label + suffix, { name: label, operator: operator });\r\n        var auth = entries.auth_asym_id.value(i);\r\n        authMap.set(\"\" + auth + suffix, auth);\r\n    }\r\n    var _a = hierarchy.chains, label_asym_id = _a.label_asym_id, auth_asym_id = _a.auth_asym_id;\r\n    var mappedLabel = new Array(label_asym_id.rowCount);\r\n    var mappedAuth = new Array(label_asym_id.rowCount);\r\n    for (var i = 0; i < label_asym_id.rowCount; i++) {\r\n        var label = label_asym_id.value(i), auth = auth_asym_id.value(i);\r\n        if (!labelMap.has(label)) {\r\n            mappedLabel[i] = label;\r\n            mappedAuth[i] = auth;\r\n            continue;\r\n        }\r\n        var _b = labelMap.get(label), name_1 = _b.name, operator = _b.operator;\r\n        mapping.set(i, operator);\r\n        mappedLabel[i] = name_1;\r\n        mappedAuth[i] = authMap.get(auth) || auth;\r\n    }\r\n    hierarchy.chains.label_asym_id = Column.ofArray({ array: mappedLabel, valueKind: hierarchy.chains.label_asym_id.valueKind, schema: hierarchy.chains.label_asym_id.schema });\r\n    hierarchy.chains.auth_asym_id = Column.ofArray({ array: mappedAuth, valueKind: hierarchy.chains.auth_asym_id.valueKind, schema: hierarchy.chains.auth_asym_id.schema });\r\n    return mapping;\r\n}\r\nfunction getAtomicHierarchy(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous) {\r\n    var hierarchyOffsets = findHierarchyOffsets(atom_site);\r\n    var hierarchyData = createHierarchyData(atom_site, sourceIndex, hierarchyOffsets);\r\n    var chainOperatorMapping = createChainOperatorMappingAndSubstituteNames(hierarchyData, format);\r\n    if (previous && isHierarchyDataEqual(previous.atomicHierarchy, hierarchyData)) {\r\n        return {\r\n            sameAsPrevious: true,\r\n            hierarchy: previous.atomicHierarchy,\r\n            chainOperatorMapping: chainOperatorMapping\r\n        };\r\n    }\r\n    var hierarchySegments = {\r\n        residueAtomSegments: Segmentation.ofOffsets(hierarchyOffsets.residues, Interval.ofBounds(0, atom_site._rowCount)),\r\n        chainAtomSegments: Segmentation.ofOffsets(hierarchyOffsets.chains, Interval.ofBounds(0, atom_site._rowCount)),\r\n    };\r\n    var index = getAtomicIndex(hierarchyData, entities, hierarchySegments);\r\n    var derived = getAtomicDerivedData(hierarchyData, hierarchySegments, index, chemicalComponentMap);\r\n    var hierarchy = __assign(__assign(__assign({}, hierarchyData), hierarchySegments), { index: index, derived: derived });\r\n    return { sameAsPrevious: false, hierarchy: hierarchy, chainOperatorMapping: chainOperatorMapping };\r\n}\r\nexport function getAtomicHierarchyAndConformation(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous) {\r\n    var _a = getAtomicHierarchy(atom_site, sourceIndex, entities, chemicalComponentMap, format, previous), sameAsPrevious = _a.sameAsPrevious, hierarchy = _a.hierarchy, chainOperatorMapping = _a.chainOperatorMapping;\r\n    var conformation = getConformation(atom_site);\r\n    return { sameAsPrevious: sameAsPrevious, hierarchy: hierarchy, conformation: conformation, chainOperatorMapping: chainOperatorMapping };\r\n}\r\n//# sourceMappingURL=atomic.js.map"]},"metadata":{},"sourceType":"module"}