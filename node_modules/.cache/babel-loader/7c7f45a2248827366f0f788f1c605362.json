{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { spline } from '../../../mol-math/interpolate';\nimport { ColorScale } from '../../../mol-util/color';\nimport { ValueCell } from '../../../mol-util';\nexport function getControlPointsFromString(s) {\n  return s.split(/\\s*,\\s*/).map(function (p) {\n    var ps = p.split(/\\s*:\\s*/);\n    return {\n      x: parseFloat(ps[0]),\n      alpha: parseFloat(ps[1])\n    };\n  });\n}\nexport function getControlPointsFromVec2Array(array) {\n  return array.map(function (v) {\n    return {\n      x: v[0],\n      alpha: v[1]\n    };\n  });\n}\nexport function createTransferFunctionTexture(controlPoints, listOrName, texture) {\n  var cp = __spreadArray(__spreadArray([{\n    x: 0,\n    alpha: 0\n  }, {\n    x: 0,\n    alpha: 0\n  }], controlPoints, true), [{\n    x: 1,\n    alpha: 0\n  }, {\n    x: 1,\n    alpha: 0\n  }], false);\n\n  var scale = ColorScale.create({\n    domain: [0, 1],\n    listOrName: listOrName\n  });\n  var n = 256;\n  var array = texture ? texture.ref.value.array : new Uint8Array(n * 4);\n  var k = 0;\n  var x1, x2;\n  var a0, a1, a2, a3;\n  var il = controlPoints.length + 1;\n\n  for (var i = 0; i < il; ++i) {\n    x1 = cp[i + 1].x;\n    x2 = cp[i + 2].x;\n    a0 = cp[i].alpha;\n    a1 = cp[i + 1].alpha;\n    a2 = cp[i + 2].alpha;\n    a3 = cp[i + 3].alpha;\n    var jl = Math.round((x2 - x1) * n);\n\n    for (var j = 0; j < jl; ++j) {\n      var t = j / jl;\n      array[k * 4 + 3] = Math.max(0, spline(a0, a1, a2, a3, t, 0.5) * 255);\n      scale.colorToArray(k / 255, array, k * 4);\n      ++k;\n    }\n  }\n\n  var textureImage = {\n    array: array,\n    width: 256,\n    height: 1\n  };\n\n  if (texture) {\n    ValueCell.update(texture, textureImage);\n    return texture;\n  } else {\n    return ValueCell.create(textureImage);\n  }\n}","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/direct-volume/transfer-function.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { spline } from '../../../mol-math/interpolate';\r\nimport { ColorScale } from '../../../mol-util/color';\r\nimport { ValueCell } from '../../../mol-util';\r\nexport function getControlPointsFromString(s) {\r\n    return s.split(/\\s*,\\s*/).map(function (p) {\r\n        var ps = p.split(/\\s*:\\s*/);\r\n        return { x: parseFloat(ps[0]), alpha: parseFloat(ps[1]) };\r\n    });\r\n}\r\nexport function getControlPointsFromVec2Array(array) {\r\n    return array.map(function (v) { return ({ x: v[0], alpha: v[1] }); });\r\n}\r\nexport function createTransferFunctionTexture(controlPoints, listOrName, texture) {\r\n    var cp = __spreadArray(__spreadArray([\r\n        { x: 0, alpha: 0 },\r\n        { x: 0, alpha: 0 }\r\n    ], controlPoints, true), [\r\n        { x: 1, alpha: 0 },\r\n        { x: 1, alpha: 0 },\r\n    ], false);\r\n    var scale = ColorScale.create({ domain: [0, 1], listOrName: listOrName });\r\n    var n = 256;\r\n    var array = texture ? texture.ref.value.array : new Uint8Array(n * 4);\r\n    var k = 0;\r\n    var x1, x2;\r\n    var a0, a1, a2, a3;\r\n    var il = controlPoints.length + 1;\r\n    for (var i = 0; i < il; ++i) {\r\n        x1 = cp[i + 1].x;\r\n        x2 = cp[i + 2].x;\r\n        a0 = cp[i].alpha;\r\n        a1 = cp[i + 1].alpha;\r\n        a2 = cp[i + 2].alpha;\r\n        a3 = cp[i + 3].alpha;\r\n        var jl = Math.round((x2 - x1) * n);\r\n        for (var j = 0; j < jl; ++j) {\r\n            var t = j / jl;\r\n            array[k * 4 + 3] = Math.max(0, spline(a0, a1, a2, a3, t, 0.5) * 255);\r\n            scale.colorToArray(k / 255, array, k * 4);\r\n            ++k;\r\n        }\r\n    }\r\n    var textureImage = { array: array, width: 256, height: 1 };\r\n    if (texture) {\r\n        ValueCell.update(texture, textureImage);\r\n        return texture;\r\n    }\r\n    else {\r\n        return ValueCell.create(textureImage);\r\n    }\r\n}\r\n//# sourceMappingURL=transfer-function.js.map"]},"metadata":{},"sourceType":"module"}