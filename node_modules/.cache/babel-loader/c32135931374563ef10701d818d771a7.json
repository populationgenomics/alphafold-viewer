{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { StructureElement } from '../../../../../mol-model/structure';\nimport { SortedRanges } from '../../../../../mol-data/int/sorted-ranges';\nimport { getGapRanges } from '../polymer';\n/** Iterates over gaps, i.e. the stem residues/coarse elements adjacent to gaps */\n\nexport function PolymerGapIterator(structure, unit) {\n  switch (unit.kind) {\n    case 0\n    /* Atomic */\n    :\n      return new AtomicPolymerGapIterator(structure, unit);\n\n    case 1\n    /* Spheres */\n    :\n    case 2\n    /* Gaussians */\n    :\n      return new CoarsePolymerGapIterator(structure, unit);\n  }\n}\n\nfunction createPolymerGapPair(structure, unit) {\n  return {\n    centerA: StructureElement.Location.create(structure, unit),\n    centerB: StructureElement.Location.create(structure, unit)\n  };\n}\n\nvar AtomicPolymerGapIterator =\n/** @class */\nfunction () {\n  function AtomicPolymerGapIterator(structure, unit) {\n    this.unit = unit;\n    this.hasNext = false;\n    this.traceElementIndex = unit.model.atomicHierarchy.derived.residue.traceElementIndex; // can assume it won't be -1 for polymer residues\n\n    this.gapIt = SortedRanges.transientSegments(getGapRanges(unit), unit.elements);\n    this.value = createPolymerGapPair(structure, unit);\n    this.hasNext = this.gapIt.hasNext;\n  }\n\n  AtomicPolymerGapIterator.prototype.move = function () {\n    var _a = this.unit,\n        elements = _a.elements,\n        residueIndex = _a.residueIndex;\n    var gapSegment = this.gapIt.move();\n    this.value.centerA.element = this.traceElementIndex[residueIndex[elements[gapSegment.start]]];\n    this.value.centerB.element = this.traceElementIndex[residueIndex[elements[gapSegment.end - 1]]];\n    this.hasNext = this.gapIt.hasNext;\n    return this.value;\n  };\n\n  return AtomicPolymerGapIterator;\n}();\n\nexport { AtomicPolymerGapIterator };\n\nvar CoarsePolymerGapIterator =\n/** @class */\nfunction () {\n  function CoarsePolymerGapIterator(structure, unit) {\n    this.unit = unit;\n    this.hasNext = false;\n    this.gapIt = SortedRanges.transientSegments(getGapRanges(unit), unit.elements);\n    this.value = createPolymerGapPair(structure, unit);\n    this.hasNext = this.gapIt.hasNext;\n  }\n\n  CoarsePolymerGapIterator.prototype.move = function () {\n    var gapSegment = this.gapIt.move();\n    this.value.centerA.element = this.unit.elements[gapSegment.start];\n    this.value.centerB.element = this.unit.elements[gapSegment.end - 1];\n    this.hasNext = this.gapIt.hasNext;\n    return this.value;\n  };\n\n  return CoarsePolymerGapIterator;\n}();\n\nexport { CoarsePolymerGapIterator };","map":{"version":3,"sources":["../../../../../../src/mol-repr/structure/visual/util/polymer/gap-iterator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { StructureElement } from '../../../../../mol-model/structure';\r\nimport { SortedRanges } from '../../../../../mol-data/int/sorted-ranges';\r\nimport { getGapRanges } from '../polymer';\r\n/** Iterates over gaps, i.e. the stem residues/coarse elements adjacent to gaps */\r\nexport function PolymerGapIterator(structure, unit) {\r\n    switch (unit.kind) {\r\n        case 0 /* Atomic */: return new AtomicPolymerGapIterator(structure, unit);\r\n        case 1 /* Spheres */:\r\n        case 2 /* Gaussians */:\r\n            return new CoarsePolymerGapIterator(structure, unit);\r\n    }\r\n}\r\nfunction createPolymerGapPair(structure, unit) {\r\n    return {\r\n        centerA: StructureElement.Location.create(structure, unit),\r\n        centerB: StructureElement.Location.create(structure, unit),\r\n    };\r\n}\r\nvar AtomicPolymerGapIterator = /** @class */ (function () {\r\n    function AtomicPolymerGapIterator(structure, unit) {\r\n        this.unit = unit;\r\n        this.hasNext = false;\r\n        this.traceElementIndex = unit.model.atomicHierarchy.derived.residue.traceElementIndex; // can assume it won't be -1 for polymer residues\r\n        this.gapIt = SortedRanges.transientSegments(getGapRanges(unit), unit.elements);\r\n        this.value = createPolymerGapPair(structure, unit);\r\n        this.hasNext = this.gapIt.hasNext;\r\n    }\r\n    AtomicPolymerGapIterator.prototype.move = function () {\r\n        var _a = this.unit, elements = _a.elements, residueIndex = _a.residueIndex;\r\n        var gapSegment = this.gapIt.move();\r\n        this.value.centerA.element = this.traceElementIndex[residueIndex[elements[gapSegment.start]]];\r\n        this.value.centerB.element = this.traceElementIndex[residueIndex[elements[gapSegment.end - 1]]];\r\n        this.hasNext = this.gapIt.hasNext;\r\n        return this.value;\r\n    };\r\n    return AtomicPolymerGapIterator;\r\n}());\r\nexport { AtomicPolymerGapIterator };\r\nvar CoarsePolymerGapIterator = /** @class */ (function () {\r\n    function CoarsePolymerGapIterator(structure, unit) {\r\n        this.unit = unit;\r\n        this.hasNext = false;\r\n        this.gapIt = SortedRanges.transientSegments(getGapRanges(unit), unit.elements);\r\n        this.value = createPolymerGapPair(structure, unit);\r\n        this.hasNext = this.gapIt.hasNext;\r\n    }\r\n    CoarsePolymerGapIterator.prototype.move = function () {\r\n        var gapSegment = this.gapIt.move();\r\n        this.value.centerA.element = this.unit.elements[gapSegment.start];\r\n        this.value.centerB.element = this.unit.elements[gapSegment.end - 1];\r\n        this.hasNext = this.gapIt.hasNext;\r\n        return this.value;\r\n    };\r\n    return CoarsePolymerGapIterator;\r\n}());\r\nexport { CoarsePolymerGapIterator };\r\n//# sourceMappingURL=gap-iterator.js.map"]},"metadata":{},"sourceType":"module"}