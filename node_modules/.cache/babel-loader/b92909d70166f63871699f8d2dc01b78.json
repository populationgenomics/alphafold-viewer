{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { hashFnv32a } from '../../../mol-data/util';\nimport { LocationIterator, PositionLocation } from '../../../mol-geo/util/location-iterator';\nimport { calculateTransformBoundingSphere } from '../../../mol-gl/renderable/util';\nimport { createNullTexture } from '../../../mol-gl/webgl/texture';\nimport { Box3D, Sphere3D } from '../../../mol-math/geometry';\nimport { Mat4, Vec2, Vec3, Vec4 } from '../../../mol-math/linear-algebra';\nimport { ValueCell } from '../../../mol-util';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Box } from '../../primitive/box';\nimport { BaseGeometry } from '../base';\nimport { createColors } from '../color-data';\nimport { createMarkers } from '../marker-data';\nimport { createEmptyOverpaint } from '../overpaint-data';\nimport { createEmptyTransparency } from '../transparency-data';\nimport { createTransferFunctionTexture, getControlPointsFromVec2Array } from './transfer-function';\nimport { createEmptyClipping } from '../clipping-data';\nimport { Grid, Volume } from '../../../mol-model/volume';\nimport { ColorNames } from '../../../mol-util/color/names';\nvar VolumeBox = Box();\nexport var DirectVolume;\n\n(function (DirectVolume) {\n  function create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) {\n    return directVolume ? update(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) : fromData(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup);\n  }\n\n  DirectVolume.create = create;\n\n  function hashCode(directVolume) {\n    return hashFnv32a([directVolume.bboxSize.ref.version, directVolume.gridDimension.ref.version, directVolume.gridTexture.ref.version, directVolume.transform.ref.version, directVolume.gridStats.ref.version]);\n  }\n\n  function fromData(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup) {\n    var boundingSphere = Sphere3D();\n    var currentHash = -1;\n    var width = texture.getWidth();\n    var height = texture.getHeight();\n    var depth = texture.getDepth();\n    var directVolume = {\n      kind: 'direct-volume',\n      gridDimension: ValueCell.create(gridDimension),\n      gridTexture: ValueCell.create(texture),\n      gridTextureDim: ValueCell.create(Vec3.create(width, height, depth)),\n      gridStats: ValueCell.create(Vec4.create(stats.min, stats.max, stats.mean, stats.sigma)),\n      bboxMin: ValueCell.create(bbox.min),\n      bboxMax: ValueCell.create(bbox.max),\n      bboxSize: ValueCell.create(Vec3.sub(Vec3(), bbox.max, bbox.min)),\n      transform: ValueCell.create(transform),\n      cellDim: ValueCell.create(cellDim),\n      unitToCartn: ValueCell.create(unitToCartn),\n      cartnToUnit: ValueCell.create(Mat4.invert(Mat4(), unitToCartn)),\n\n      get boundingSphere() {\n        var newHash = hashCode(directVolume);\n\n        if (newHash !== currentHash) {\n          var b = getBoundingSphere(directVolume.gridDimension.ref.value, directVolume.transform.ref.value);\n          Sphere3D.copy(boundingSphere, b);\n          currentHash = newHash;\n        }\n\n        return boundingSphere;\n      },\n\n      packedGroup: ValueCell.create(packedGroup),\n      setBoundingSphere: function (sphere) {\n        Sphere3D.copy(boundingSphere, sphere);\n        currentHash = hashCode(directVolume);\n      }\n    };\n    return directVolume;\n  }\n\n  function update(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) {\n    var width = texture.getWidth();\n    var height = texture.getHeight();\n    var depth = texture.getDepth();\n    ValueCell.update(directVolume.gridDimension, gridDimension);\n    ValueCell.update(directVolume.gridTexture, texture);\n    ValueCell.update(directVolume.gridTextureDim, Vec3.set(directVolume.gridTextureDim.ref.value, width, height, depth));\n    ValueCell.update(directVolume.gridStats, Vec4.set(directVolume.gridStats.ref.value, stats.min, stats.max, stats.mean, stats.sigma));\n    ValueCell.update(directVolume.bboxMin, bbox.min);\n    ValueCell.update(directVolume.bboxMax, bbox.max);\n    ValueCell.update(directVolume.bboxSize, Vec3.sub(directVolume.bboxSize.ref.value, bbox.max, bbox.min));\n    ValueCell.update(directVolume.transform, transform);\n    ValueCell.update(directVolume.cellDim, cellDim);\n    ValueCell.update(directVolume.unitToCartn, unitToCartn);\n    ValueCell.update(directVolume.cartnToUnit, Mat4.invert(Mat4(), unitToCartn));\n    ValueCell.updateIfChanged(directVolume.packedGroup, packedGroup);\n    return directVolume;\n  }\n\n  function createEmpty(directVolume) {\n    var bbox = Box3D();\n    var gridDimension = Vec3();\n    var transform = Mat4.identity();\n    var unitToCartn = Mat4.identity();\n    var cellDim = Vec3();\n    var texture = createNullTexture();\n    var stats = Grid.One.stats;\n    var packedGroup = false;\n    return create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume);\n  }\n\n  DirectVolume.createEmpty = createEmpty;\n\n  function createRenderModeParam(stats) {\n    var isoValueParam = stats ? Volume.createIsoValueParam(Volume.IsoValue.relative(2), stats) : Volume.IsoValueParam;\n    return PD.MappedStatic('volume', {\n      isosurface: PD.Group({\n        isoValue: isoValueParam,\n        singleLayer: PD.Boolean(false, {\n          isEssential: true\n        })\n      }, {\n        isFlat: true\n      }),\n      volume: PD.Group({\n        controlPoints: PD.LineGraph([Vec2.create(0.19, 0.0), Vec2.create(0.2, 0.05), Vec2.create(0.25, 0.05), Vec2.create(0.26, 0.0), Vec2.create(0.79, 0.0), Vec2.create(0.8, 0.05), Vec2.create(0.85, 0.05), Vec2.create(0.86, 0.0)]),\n        list: PD.ColorList({\n          kind: 'interpolate',\n          colors: [[ColorNames.white, 0], [ColorNames.red, 0.25], [ColorNames.white, 0.5], [ColorNames.blue, 0.75], [ColorNames.white, 1]]\n        }, {\n          offsets: true\n        })\n      }, {\n        isFlat: true\n      })\n    }, {\n      isEssential: true\n    });\n  }\n\n  DirectVolume.createRenderModeParam = createRenderModeParam;\n  DirectVolume.Params = __assign(__assign({}, BaseGeometry.Params), {\n    doubleSided: PD.Boolean(false, BaseGeometry.CustomQualityParamInfo),\n    flipSided: PD.Boolean(false, BaseGeometry.ShadingCategory),\n    flatShaded: PD.Boolean(false, BaseGeometry.ShadingCategory),\n    ignoreLight: PD.Boolean(false, BaseGeometry.ShadingCategory),\n    xrayShaded: PD.Boolean(false, BaseGeometry.ShadingCategory),\n    renderMode: createRenderModeParam(),\n    stepsPerCell: PD.Numeric(5, {\n      min: 1,\n      max: 20,\n      step: 1\n    }),\n    jumpLength: PD.Numeric(0, {\n      min: 0,\n      max: 20,\n      step: 0.1\n    })\n  });\n  DirectVolume.Utils = {\n    Params: DirectVolume.Params,\n    createEmpty: createEmpty,\n    createValues: createValues,\n    createValuesSimple: createValuesSimple,\n    updateValues: updateValues,\n    updateBoundingSphere: updateBoundingSphere,\n    createRenderableState: createRenderableState,\n    updateRenderableState: updateRenderableState,\n    createPositionIterator: createPositionIterator\n  };\n\n  function createPositionIterator(directVolume, transform) {\n    var t = directVolume.transform.ref.value;\n    var _a = directVolume.gridDimension.ref.value,\n        x = _a[0],\n        y = _a[1],\n        z = _a[2];\n    var groupCount = x * y * z;\n    var instanceCount = transform.instanceCount.ref.value;\n    var location = PositionLocation();\n    var p = location.position;\n    var m = transform.aTransform.ref.value;\n\n    var getLocation = function (groupIndex, instanceIndex) {\n      var k = Math.floor(groupIndex / z);\n      p[0] = Math.floor(k / y);\n      p[1] = k % y;\n      p[2] = groupIndex % z;\n      Vec3.transformMat4(p, p, t);\n\n      if (instanceIndex >= 0) {\n        Vec3.transformMat4Offset(p, p, m, 0, 0, instanceIndex * 16);\n      }\n\n      return location;\n    };\n\n    return LocationIterator(groupCount, instanceCount, 1, getLocation);\n  }\n\n  function getNormalizedIsoValue(out, isoValue, stats) {\n    var min = stats[0],\n        max = stats[1],\n        mean = stats[2],\n        sigma = stats[3];\n    var value = Volume.IsoValue.toAbsolute(isoValue, {\n      min: min,\n      max: max,\n      mean: mean,\n      sigma: sigma\n    }).absoluteValue;\n    Vec2.set(out, (value - min) / (max - min), (0 - min) / (max - min));\n    return out;\n  }\n\n  function getMaxSteps(gridDim, stepsPerCell) {\n    return Math.ceil(Vec3.magnitude(gridDim) * stepsPerCell);\n  }\n\n  function getStepScale(cellDim, stepsPerCell) {\n    return Math.min.apply(Math, cellDim) * (1 / stepsPerCell);\n  }\n\n  function getTransferScale(stepsPerCell) {\n    return 1 / stepsPerCell;\n  }\n\n  function createValues(directVolume, transform, locationIt, theme, props) {\n    var gridTexture = directVolume.gridTexture,\n        gridTextureDim = directVolume.gridTextureDim,\n        gridStats = directVolume.gridStats;\n    var bboxSize = directVolume.bboxSize,\n        bboxMin = directVolume.bboxMin,\n        bboxMax = directVolume.bboxMax,\n        gridDimension = directVolume.gridDimension,\n        gridTransform = directVolume.transform;\n    var instanceCount = locationIt.instanceCount,\n        groupCount = locationIt.groupCount;\n    var positionIt = DirectVolume.Utils.createPositionIterator(directVolume, transform);\n    var color = createColors(locationIt, positionIt, theme.color);\n    var marker = createMarkers(instanceCount * groupCount);\n    var overpaint = createEmptyOverpaint();\n    var transparency = createEmptyTransparency();\n    var clipping = createEmptyClipping();\n    var _a = gridDimension.ref.value,\n        x = _a[0],\n        y = _a[1],\n        z = _a[2];\n    var counts = {\n      drawCount: VolumeBox.indices.length,\n      vertexCount: x * y * z,\n      groupCount: groupCount,\n      instanceCount: instanceCount\n    };\n    var invariantBoundingSphere = Sphere3D.clone(directVolume.boundingSphere);\n    var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, transform.aTransform.ref.value, instanceCount);\n    var controlPoints = props.renderMode.name === 'volume' ? getControlPointsFromVec2Array(props.renderMode.params.controlPoints) : [];\n    var transferTex = createTransferFunctionTexture(controlPoints, props.renderMode.name === 'volume' ? props.renderMode.params.list.colors : []);\n    var isoValue = props.renderMode.name === 'isosurface' ? props.renderMode.params.isoValue : Volume.IsoValue.relative(2);\n    var singleLayer = props.renderMode.name === 'isosurface' ? props.renderMode.params.singleLayer : false;\n    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, color), marker), overpaint), transparency), clipping), transform), BaseGeometry.createValues(props, counts)), {\n      aPosition: ValueCell.create(VolumeBox.vertices),\n      elements: ValueCell.create(VolumeBox.indices),\n      boundingSphere: ValueCell.create(boundingSphere),\n      invariantBoundingSphere: ValueCell.create(invariantBoundingSphere),\n      uInvariantBoundingSphere: ValueCell.create(Vec4.ofSphere(invariantBoundingSphere)),\n      uIsoValue: ValueCell.create(getNormalizedIsoValue(Vec2(), isoValue, directVolume.gridStats.ref.value)),\n      uBboxMin: bboxMin,\n      uBboxMax: bboxMax,\n      uBboxSize: bboxSize,\n      uMaxSteps: ValueCell.create(getMaxSteps(gridDimension.ref.value, props.stepsPerCell)),\n      uStepScale: ValueCell.create(getStepScale(directVolume.cellDim.ref.value, props.stepsPerCell)),\n      uJumpLength: ValueCell.create(props.jumpLength),\n      uTransform: gridTransform,\n      uGridDim: gridDimension,\n      dRenderMode: ValueCell.create(props.renderMode.name),\n      tTransferTex: transferTex,\n      uTransferScale: ValueCell.create(getTransferScale(props.stepsPerCell)),\n      dGridTexType: ValueCell.create(gridTexture.ref.value.getDepth() > 0 ? '3d' : '2d'),\n      uGridTexDim: gridTextureDim,\n      tGridTex: gridTexture,\n      uGridStats: gridStats,\n      uCellDim: directVolume.cellDim,\n      uCartnToUnit: directVolume.cartnToUnit,\n      uUnitToCartn: directVolume.unitToCartn,\n      dPackedGroup: directVolume.packedGroup,\n      dSingleLayer: ValueCell.create(singleLayer),\n      dDoubleSided: ValueCell.create(props.doubleSided),\n      dFlatShaded: ValueCell.create(props.flatShaded),\n      dFlipSided: ValueCell.create(props.flipSided),\n      dIgnoreLight: ValueCell.create(props.ignoreLight),\n      dXrayShaded: ValueCell.create(props.xrayShaded)\n    });\n  }\n\n  function createValuesSimple(directVolume, props, colorValue, sizeValue, transform) {\n    var s = BaseGeometry.createSimple(colorValue, sizeValue, transform);\n\n    var p = __assign(__assign({}, PD.getDefaultValues(DirectVolume.Params)), props);\n\n    return createValues(directVolume, s.transform, s.locationIterator, s.theme, p);\n  }\n\n  function updateValues(values, props) {\n    ValueCell.updateIfChanged(values.alpha, props.alpha);\n    ValueCell.updateIfChanged(values.uAlpha, props.alpha);\n    ValueCell.updateIfChanged(values.dDoubleSided, props.doubleSided);\n    ValueCell.updateIfChanged(values.dFlatShaded, props.flatShaded);\n    ValueCell.updateIfChanged(values.dFlipSided, props.flipSided);\n    ValueCell.updateIfChanged(values.dIgnoreLight, props.ignoreLight);\n    ValueCell.updateIfChanged(values.dXrayShaded, props.xrayShaded);\n    ValueCell.updateIfChanged(values.dRenderMode, props.renderMode.name);\n\n    if (props.renderMode.name === 'isosurface') {\n      ValueCell.updateIfChanged(values.uIsoValue, getNormalizedIsoValue(values.uIsoValue.ref.value, props.renderMode.params.isoValue, values.uGridStats.ref.value));\n      ValueCell.updateIfChanged(values.dSingleLayer, props.renderMode.params.singleLayer);\n    } else if (props.renderMode.name === 'volume') {\n      var controlPoints = getControlPointsFromVec2Array(props.renderMode.params.controlPoints);\n      createTransferFunctionTexture(controlPoints, props.renderMode.params.list.colors, values.tTransferTex);\n    }\n\n    ValueCell.updateIfChanged(values.uMaxSteps, getMaxSteps(values.uGridDim.ref.value, props.stepsPerCell));\n    ValueCell.updateIfChanged(values.uStepScale, getStepScale(values.uCellDim.ref.value, props.stepsPerCell));\n    ValueCell.updateIfChanged(values.uTransferScale, getTransferScale(props.stepsPerCell));\n    ValueCell.updateIfChanged(values.uJumpLength, props.jumpLength);\n  }\n\n  function updateBoundingSphere(values, directVolume) {\n    var invariantBoundingSphere = Sphere3D.clone(directVolume.boundingSphere);\n    var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, values.aTransform.ref.value, values.instanceCount.ref.value);\n\n    if (!Sphere3D.equals(boundingSphere, values.boundingSphere.ref.value)) {\n      ValueCell.update(values.boundingSphere, boundingSphere);\n    }\n\n    if (!Sphere3D.equals(invariantBoundingSphere, values.invariantBoundingSphere.ref.value)) {\n      ValueCell.update(values.invariantBoundingSphere, invariantBoundingSphere);\n      ValueCell.update(values.uInvariantBoundingSphere, Vec4.fromSphere(values.uInvariantBoundingSphere.ref.value, invariantBoundingSphere));\n    }\n  }\n\n  function createRenderableState(props) {\n    var state = BaseGeometry.createRenderableState(props);\n    state.opaque = false;\n    state.writeDepth = props.renderMode.name === 'isosurface';\n    return state;\n  }\n\n  function updateRenderableState(state, props) {\n    BaseGeometry.updateRenderableState(state, props);\n    state.opaque = false;\n    state.writeDepth = props.renderMode.name === 'isosurface';\n  }\n})(DirectVolume || (DirectVolume = {})); //\n\n\nfunction getBoundingSphere(gridDimension, gridTransform) {\n  return Sphere3D.fromDimensionsAndTransform(Sphere3D(), gridDimension, gridTransform);\n}","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/direct-volume/direct-volume.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { hashFnv32a } from '../../../mol-data/util';\r\nimport { LocationIterator, PositionLocation } from '../../../mol-geo/util/location-iterator';\r\nimport { calculateTransformBoundingSphere } from '../../../mol-gl/renderable/util';\r\nimport { createNullTexture } from '../../../mol-gl/webgl/texture';\r\nimport { Box3D, Sphere3D } from '../../../mol-math/geometry';\r\nimport { Mat4, Vec2, Vec3, Vec4 } from '../../../mol-math/linear-algebra';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Box } from '../../primitive/box';\r\nimport { BaseGeometry } from '../base';\r\nimport { createColors } from '../color-data';\r\nimport { createMarkers } from '../marker-data';\r\nimport { createEmptyOverpaint } from '../overpaint-data';\r\nimport { createEmptyTransparency } from '../transparency-data';\r\nimport { createTransferFunctionTexture, getControlPointsFromVec2Array } from './transfer-function';\r\nimport { createEmptyClipping } from '../clipping-data';\r\nimport { Grid, Volume } from '../../../mol-model/volume';\r\nimport { ColorNames } from '../../../mol-util/color/names';\r\nvar VolumeBox = Box();\r\nexport var DirectVolume;\r\n(function (DirectVolume) {\r\n    function create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) {\r\n        return directVolume ?\r\n            update(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) :\r\n            fromData(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup);\r\n    }\r\n    DirectVolume.create = create;\r\n    function hashCode(directVolume) {\r\n        return hashFnv32a([\r\n            directVolume.bboxSize.ref.version, directVolume.gridDimension.ref.version,\r\n            directVolume.gridTexture.ref.version, directVolume.transform.ref.version,\r\n            directVolume.gridStats.ref.version\r\n        ]);\r\n    }\r\n    function fromData(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup) {\r\n        var boundingSphere = Sphere3D();\r\n        var currentHash = -1;\r\n        var width = texture.getWidth();\r\n        var height = texture.getHeight();\r\n        var depth = texture.getDepth();\r\n        var directVolume = {\r\n            kind: 'direct-volume',\r\n            gridDimension: ValueCell.create(gridDimension),\r\n            gridTexture: ValueCell.create(texture),\r\n            gridTextureDim: ValueCell.create(Vec3.create(width, height, depth)),\r\n            gridStats: ValueCell.create(Vec4.create(stats.min, stats.max, stats.mean, stats.sigma)),\r\n            bboxMin: ValueCell.create(bbox.min),\r\n            bboxMax: ValueCell.create(bbox.max),\r\n            bboxSize: ValueCell.create(Vec3.sub(Vec3(), bbox.max, bbox.min)),\r\n            transform: ValueCell.create(transform),\r\n            cellDim: ValueCell.create(cellDim),\r\n            unitToCartn: ValueCell.create(unitToCartn),\r\n            cartnToUnit: ValueCell.create(Mat4.invert(Mat4(), unitToCartn)),\r\n            get boundingSphere() {\r\n                var newHash = hashCode(directVolume);\r\n                if (newHash !== currentHash) {\r\n                    var b = getBoundingSphere(directVolume.gridDimension.ref.value, directVolume.transform.ref.value);\r\n                    Sphere3D.copy(boundingSphere, b);\r\n                    currentHash = newHash;\r\n                }\r\n                return boundingSphere;\r\n            },\r\n            packedGroup: ValueCell.create(packedGroup),\r\n            setBoundingSphere: function (sphere) {\r\n                Sphere3D.copy(boundingSphere, sphere);\r\n                currentHash = hashCode(directVolume);\r\n            }\r\n        };\r\n        return directVolume;\r\n    }\r\n    function update(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume) {\r\n        var width = texture.getWidth();\r\n        var height = texture.getHeight();\r\n        var depth = texture.getDepth();\r\n        ValueCell.update(directVolume.gridDimension, gridDimension);\r\n        ValueCell.update(directVolume.gridTexture, texture);\r\n        ValueCell.update(directVolume.gridTextureDim, Vec3.set(directVolume.gridTextureDim.ref.value, width, height, depth));\r\n        ValueCell.update(directVolume.gridStats, Vec4.set(directVolume.gridStats.ref.value, stats.min, stats.max, stats.mean, stats.sigma));\r\n        ValueCell.update(directVolume.bboxMin, bbox.min);\r\n        ValueCell.update(directVolume.bboxMax, bbox.max);\r\n        ValueCell.update(directVolume.bboxSize, Vec3.sub(directVolume.bboxSize.ref.value, bbox.max, bbox.min));\r\n        ValueCell.update(directVolume.transform, transform);\r\n        ValueCell.update(directVolume.cellDim, cellDim);\r\n        ValueCell.update(directVolume.unitToCartn, unitToCartn);\r\n        ValueCell.update(directVolume.cartnToUnit, Mat4.invert(Mat4(), unitToCartn));\r\n        ValueCell.updateIfChanged(directVolume.packedGroup, packedGroup);\r\n        return directVolume;\r\n    }\r\n    function createEmpty(directVolume) {\r\n        var bbox = Box3D();\r\n        var gridDimension = Vec3();\r\n        var transform = Mat4.identity();\r\n        var unitToCartn = Mat4.identity();\r\n        var cellDim = Vec3();\r\n        var texture = createNullTexture();\r\n        var stats = Grid.One.stats;\r\n        var packedGroup = false;\r\n        return create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, stats, packedGroup, directVolume);\r\n    }\r\n    DirectVolume.createEmpty = createEmpty;\r\n    function createRenderModeParam(stats) {\r\n        var isoValueParam = stats\r\n            ? Volume.createIsoValueParam(Volume.IsoValue.relative(2), stats)\r\n            : Volume.IsoValueParam;\r\n        return PD.MappedStatic('volume', {\r\n            isosurface: PD.Group({\r\n                isoValue: isoValueParam,\r\n                singleLayer: PD.Boolean(false, { isEssential: true }),\r\n            }, { isFlat: true }),\r\n            volume: PD.Group({\r\n                controlPoints: PD.LineGraph([\r\n                    Vec2.create(0.19, 0.0), Vec2.create(0.2, 0.05), Vec2.create(0.25, 0.05), Vec2.create(0.26, 0.0),\r\n                    Vec2.create(0.79, 0.0), Vec2.create(0.8, 0.05), Vec2.create(0.85, 0.05), Vec2.create(0.86, 0.0),\r\n                ]),\r\n                list: PD.ColorList({\r\n                    kind: 'interpolate',\r\n                    colors: [\r\n                        [ColorNames.white, 0],\r\n                        [ColorNames.red, 0.25],\r\n                        [ColorNames.white, 0.5],\r\n                        [ColorNames.blue, 0.75],\r\n                        [ColorNames.white, 1]\r\n                    ]\r\n                }, { offsets: true }),\r\n            }, { isFlat: true })\r\n        }, { isEssential: true });\r\n    }\r\n    DirectVolume.createRenderModeParam = createRenderModeParam;\r\n    DirectVolume.Params = __assign(__assign({}, BaseGeometry.Params), { doubleSided: PD.Boolean(false, BaseGeometry.CustomQualityParamInfo), flipSided: PD.Boolean(false, BaseGeometry.ShadingCategory), flatShaded: PD.Boolean(false, BaseGeometry.ShadingCategory), ignoreLight: PD.Boolean(false, BaseGeometry.ShadingCategory), xrayShaded: PD.Boolean(false, BaseGeometry.ShadingCategory), renderMode: createRenderModeParam(), stepsPerCell: PD.Numeric(5, { min: 1, max: 20, step: 1 }), jumpLength: PD.Numeric(0, { min: 0, max: 20, step: 0.1 }) });\r\n    DirectVolume.Utils = {\r\n        Params: DirectVolume.Params,\r\n        createEmpty: createEmpty,\r\n        createValues: createValues,\r\n        createValuesSimple: createValuesSimple,\r\n        updateValues: updateValues,\r\n        updateBoundingSphere: updateBoundingSphere,\r\n        createRenderableState: createRenderableState,\r\n        updateRenderableState: updateRenderableState,\r\n        createPositionIterator: createPositionIterator\r\n    };\r\n    function createPositionIterator(directVolume, transform) {\r\n        var t = directVolume.transform.ref.value;\r\n        var _a = directVolume.gridDimension.ref.value, x = _a[0], y = _a[1], z = _a[2];\r\n        var groupCount = x * y * z;\r\n        var instanceCount = transform.instanceCount.ref.value;\r\n        var location = PositionLocation();\r\n        var p = location.position;\r\n        var m = transform.aTransform.ref.value;\r\n        var getLocation = function (groupIndex, instanceIndex) {\r\n            var k = Math.floor(groupIndex / z);\r\n            p[0] = Math.floor(k / y);\r\n            p[1] = k % y;\r\n            p[2] = groupIndex % z;\r\n            Vec3.transformMat4(p, p, t);\r\n            if (instanceIndex >= 0) {\r\n                Vec3.transformMat4Offset(p, p, m, 0, 0, instanceIndex * 16);\r\n            }\r\n            return location;\r\n        };\r\n        return LocationIterator(groupCount, instanceCount, 1, getLocation);\r\n    }\r\n    function getNormalizedIsoValue(out, isoValue, stats) {\r\n        var min = stats[0], max = stats[1], mean = stats[2], sigma = stats[3];\r\n        var value = Volume.IsoValue.toAbsolute(isoValue, { min: min, max: max, mean: mean, sigma: sigma }).absoluteValue;\r\n        Vec2.set(out, (value - min) / (max - min), (0 - min) / (max - min));\r\n        return out;\r\n    }\r\n    function getMaxSteps(gridDim, stepsPerCell) {\r\n        return Math.ceil(Vec3.magnitude(gridDim) * stepsPerCell);\r\n    }\r\n    function getStepScale(cellDim, stepsPerCell) {\r\n        return Math.min.apply(Math, cellDim) * (1 / stepsPerCell);\r\n    }\r\n    function getTransferScale(stepsPerCell) {\r\n        return (1 / stepsPerCell);\r\n    }\r\n    function createValues(directVolume, transform, locationIt, theme, props) {\r\n        var gridTexture = directVolume.gridTexture, gridTextureDim = directVolume.gridTextureDim, gridStats = directVolume.gridStats;\r\n        var bboxSize = directVolume.bboxSize, bboxMin = directVolume.bboxMin, bboxMax = directVolume.bboxMax, gridDimension = directVolume.gridDimension, gridTransform = directVolume.transform;\r\n        var instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;\r\n        var positionIt = DirectVolume.Utils.createPositionIterator(directVolume, transform);\r\n        var color = createColors(locationIt, positionIt, theme.color);\r\n        var marker = createMarkers(instanceCount * groupCount);\r\n        var overpaint = createEmptyOverpaint();\r\n        var transparency = createEmptyTransparency();\r\n        var clipping = createEmptyClipping();\r\n        var _a = gridDimension.ref.value, x = _a[0], y = _a[1], z = _a[2];\r\n        var counts = { drawCount: VolumeBox.indices.length, vertexCount: x * y * z, groupCount: groupCount, instanceCount: instanceCount };\r\n        var invariantBoundingSphere = Sphere3D.clone(directVolume.boundingSphere);\r\n        var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, transform.aTransform.ref.value, instanceCount);\r\n        var controlPoints = props.renderMode.name === 'volume' ? getControlPointsFromVec2Array(props.renderMode.params.controlPoints) : [];\r\n        var transferTex = createTransferFunctionTexture(controlPoints, props.renderMode.name === 'volume' ? props.renderMode.params.list.colors : []);\r\n        var isoValue = props.renderMode.name === 'isosurface'\r\n            ? props.renderMode.params.isoValue\r\n            : Volume.IsoValue.relative(2);\r\n        var singleLayer = props.renderMode.name === 'isosurface'\r\n            ? props.renderMode.params.singleLayer\r\n            : false;\r\n        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, color), marker), overpaint), transparency), clipping), transform), BaseGeometry.createValues(props, counts)), { aPosition: ValueCell.create(VolumeBox.vertices), elements: ValueCell.create(VolumeBox.indices), boundingSphere: ValueCell.create(boundingSphere), invariantBoundingSphere: ValueCell.create(invariantBoundingSphere), uInvariantBoundingSphere: ValueCell.create(Vec4.ofSphere(invariantBoundingSphere)), uIsoValue: ValueCell.create(getNormalizedIsoValue(Vec2(), isoValue, directVolume.gridStats.ref.value)), uBboxMin: bboxMin, uBboxMax: bboxMax, uBboxSize: bboxSize, uMaxSteps: ValueCell.create(getMaxSteps(gridDimension.ref.value, props.stepsPerCell)), uStepScale: ValueCell.create(getStepScale(directVolume.cellDim.ref.value, props.stepsPerCell)), uJumpLength: ValueCell.create(props.jumpLength), uTransform: gridTransform, uGridDim: gridDimension, dRenderMode: ValueCell.create(props.renderMode.name), tTransferTex: transferTex, uTransferScale: ValueCell.create(getTransferScale(props.stepsPerCell)), dGridTexType: ValueCell.create(gridTexture.ref.value.getDepth() > 0 ? '3d' : '2d'), uGridTexDim: gridTextureDim, tGridTex: gridTexture, uGridStats: gridStats, uCellDim: directVolume.cellDim, uCartnToUnit: directVolume.cartnToUnit, uUnitToCartn: directVolume.unitToCartn, dPackedGroup: directVolume.packedGroup, dSingleLayer: ValueCell.create(singleLayer), dDoubleSided: ValueCell.create(props.doubleSided), dFlatShaded: ValueCell.create(props.flatShaded), dFlipSided: ValueCell.create(props.flipSided), dIgnoreLight: ValueCell.create(props.ignoreLight), dXrayShaded: ValueCell.create(props.xrayShaded) });\r\n    }\r\n    function createValuesSimple(directVolume, props, colorValue, sizeValue, transform) {\r\n        var s = BaseGeometry.createSimple(colorValue, sizeValue, transform);\r\n        var p = __assign(__assign({}, PD.getDefaultValues(DirectVolume.Params)), props);\r\n        return createValues(directVolume, s.transform, s.locationIterator, s.theme, p);\r\n    }\r\n    function updateValues(values, props) {\r\n        ValueCell.updateIfChanged(values.alpha, props.alpha);\r\n        ValueCell.updateIfChanged(values.uAlpha, props.alpha);\r\n        ValueCell.updateIfChanged(values.dDoubleSided, props.doubleSided);\r\n        ValueCell.updateIfChanged(values.dFlatShaded, props.flatShaded);\r\n        ValueCell.updateIfChanged(values.dFlipSided, props.flipSided);\r\n        ValueCell.updateIfChanged(values.dIgnoreLight, props.ignoreLight);\r\n        ValueCell.updateIfChanged(values.dXrayShaded, props.xrayShaded);\r\n        ValueCell.updateIfChanged(values.dRenderMode, props.renderMode.name);\r\n        if (props.renderMode.name === 'isosurface') {\r\n            ValueCell.updateIfChanged(values.uIsoValue, getNormalizedIsoValue(values.uIsoValue.ref.value, props.renderMode.params.isoValue, values.uGridStats.ref.value));\r\n            ValueCell.updateIfChanged(values.dSingleLayer, props.renderMode.params.singleLayer);\r\n        }\r\n        else if (props.renderMode.name === 'volume') {\r\n            var controlPoints = getControlPointsFromVec2Array(props.renderMode.params.controlPoints);\r\n            createTransferFunctionTexture(controlPoints, props.renderMode.params.list.colors, values.tTransferTex);\r\n        }\r\n        ValueCell.updateIfChanged(values.uMaxSteps, getMaxSteps(values.uGridDim.ref.value, props.stepsPerCell));\r\n        ValueCell.updateIfChanged(values.uStepScale, getStepScale(values.uCellDim.ref.value, props.stepsPerCell));\r\n        ValueCell.updateIfChanged(values.uTransferScale, getTransferScale(props.stepsPerCell));\r\n        ValueCell.updateIfChanged(values.uJumpLength, props.jumpLength);\r\n    }\r\n    function updateBoundingSphere(values, directVolume) {\r\n        var invariantBoundingSphere = Sphere3D.clone(directVolume.boundingSphere);\r\n        var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, values.aTransform.ref.value, values.instanceCount.ref.value);\r\n        if (!Sphere3D.equals(boundingSphere, values.boundingSphere.ref.value)) {\r\n            ValueCell.update(values.boundingSphere, boundingSphere);\r\n        }\r\n        if (!Sphere3D.equals(invariantBoundingSphere, values.invariantBoundingSphere.ref.value)) {\r\n            ValueCell.update(values.invariantBoundingSphere, invariantBoundingSphere);\r\n            ValueCell.update(values.uInvariantBoundingSphere, Vec4.fromSphere(values.uInvariantBoundingSphere.ref.value, invariantBoundingSphere));\r\n        }\r\n    }\r\n    function createRenderableState(props) {\r\n        var state = BaseGeometry.createRenderableState(props);\r\n        state.opaque = false;\r\n        state.writeDepth = props.renderMode.name === 'isosurface';\r\n        return state;\r\n    }\r\n    function updateRenderableState(state, props) {\r\n        BaseGeometry.updateRenderableState(state, props);\r\n        state.opaque = false;\r\n        state.writeDepth = props.renderMode.name === 'isosurface';\r\n    }\r\n})(DirectVolume || (DirectVolume = {}));\r\n//\r\nfunction getBoundingSphere(gridDimension, gridTransform) {\r\n    return Sphere3D.fromDimensionsAndTransform(Sphere3D(), gridDimension, gridTransform);\r\n}\r\n//# sourceMappingURL=direct-volume.js.map"]},"metadata":{},"sourceType":"module"}