{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../../mol-task';\nimport { ReaderResult as Result } from '../result';\nimport { FileHandle } from '../../common/file-handle';\nimport { SimpleBuffer } from '../../../mol-io/common/simple-buffer';\nexport var dsn6HeaderSize = 512;\n\nfunction parseBrixHeader(str) {\n  return {\n    xStart: parseInt(str.substr(10, 5)),\n    yStart: parseInt(str.substr(15, 5)),\n    zStart: parseInt(str.substr(20, 5)),\n    xExtent: parseInt(str.substr(32, 5)),\n    yExtent: parseInt(str.substr(38, 5)),\n    zExtent: parseInt(str.substr(42, 5)),\n    xRate: parseInt(str.substr(52, 5)),\n    yRate: parseInt(str.substr(58, 5)),\n    zRate: parseInt(str.substr(62, 5)),\n    xlen: parseFloat(str.substr(73, 10)),\n    ylen: parseFloat(str.substr(83, 10)),\n    zlen: parseFloat(str.substr(93, 10)),\n    alpha: parseFloat(str.substr(103, 10)),\n    beta: parseFloat(str.substr(113, 10)),\n    gamma: parseFloat(str.substr(123, 10)),\n    divisor: parseFloat(str.substr(138, 12)),\n    summand: parseInt(str.substr(155, 8)),\n    sigma: parseFloat(str.substr(170, 12))\n  };\n}\n\nfunction parseDsn6Header(buffer, littleEndian) {\n  var readInt = littleEndian ? function (o) {\n    return buffer.readInt16LE(o * 2);\n  } : function (o) {\n    return buffer.readInt16BE(o * 2);\n  };\n  var factor = 1 / readInt(17);\n  return {\n    xStart: readInt(0),\n    yStart: readInt(1),\n    zStart: readInt(2),\n    xExtent: readInt(3),\n    yExtent: readInt(4),\n    zExtent: readInt(5),\n    xRate: readInt(6),\n    yRate: readInt(7),\n    zRate: readInt(8),\n    xlen: readInt(9) * factor,\n    ylen: readInt(10) * factor,\n    zlen: readInt(11) * factor,\n    alpha: readInt(12) * factor,\n    beta: readInt(13) * factor,\n    gamma: readInt(14) * factor,\n    divisor: readInt(15) / 100,\n    summand: readInt(16),\n    sigma: undefined\n  };\n}\n\nfunction getBlocks(header) {\n  var xExtent = header.xExtent,\n      yExtent = header.yExtent,\n      zExtent = header.zExtent;\n  var xBlocks = Math.ceil(xExtent / 8);\n  var yBlocks = Math.ceil(yExtent / 8);\n  var zBlocks = Math.ceil(zExtent / 8);\n  return {\n    xBlocks: xBlocks,\n    yBlocks: yBlocks,\n    zBlocks: zBlocks\n  };\n}\n\nexport function readDsn6Header(file) {\n  return __awaiter(this, void 0, void 0, function () {\n    var buffer, brixStr, isBrix, littleEndian, header;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , file.readBuffer(0, dsn6HeaderSize)];\n\n        case 1:\n          buffer = _a.sent().buffer;\n          brixStr = String.fromCharCode.apply(null, buffer);\n          isBrix = brixStr.startsWith(':-)');\n          littleEndian = isBrix || buffer.readInt16LE(18 * 2) === 100;\n          header = isBrix ? parseBrixHeader(brixStr) : parseDsn6Header(buffer, littleEndian);\n          return [2\n          /*return*/\n          , {\n            header: header,\n            littleEndian: littleEndian\n          }];\n      }\n    });\n  });\n}\nexport function parseDsn6Values(header, source, target, littleEndian) {\n  return __awaiter(this, void 0, void 0, function () {\n    var divisor, summand, xExtent, yExtent, zExtent, _a, xBlocks, yBlocks, zBlocks, offset, zz, yy, xx, k, z, j, y, i, x, idx;\n\n    return __generator(this, function (_b) {\n      if (!littleEndian) {\n        // even though the values are one byte they need to be swapped like they are 2\n        SimpleBuffer.flipByteOrderInPlace2(source.buffer);\n      }\n\n      divisor = header.divisor, summand = header.summand, xExtent = header.xExtent, yExtent = header.yExtent, zExtent = header.zExtent;\n      _a = getBlocks(header), xBlocks = _a.xBlocks, yBlocks = _a.yBlocks, zBlocks = _a.zBlocks;\n      offset = 0; // loop over blocks\n\n      for (zz = 0; zz < zBlocks; ++zz) {\n        for (yy = 0; yy < yBlocks; ++yy) {\n          for (xx = 0; xx < xBlocks; ++xx) {\n            // loop inside block\n            for (k = 0; k < 8; ++k) {\n              z = 8 * zz + k;\n\n              for (j = 0; j < 8; ++j) {\n                y = 8 * yy + j;\n\n                for (i = 0; i < 8; ++i) {\n                  x = 8 * xx + i; // check if remaining slice-part contains values\n\n                  if (x < xExtent && y < yExtent && z < zExtent) {\n                    idx = (x * yExtent + y) * zExtent + z;\n                    target[idx] = (source[offset] - summand) / divisor;\n                    ++offset;\n                  } else {\n                    offset += 8 - i;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\nexport function getDsn6Counts(header) {\n  var xExtent = header.xExtent,\n      yExtent = header.yExtent,\n      zExtent = header.zExtent;\n\n  var _a = getBlocks(header),\n      xBlocks = _a.xBlocks,\n      yBlocks = _a.yBlocks,\n      zBlocks = _a.zBlocks;\n\n  var valueCount = xExtent * yExtent * zExtent;\n  var count = xBlocks * 8 * yBlocks * 8 * zBlocks * 8;\n  var elementByteSize = 1;\n  var byteCount = count * elementByteSize;\n  return {\n    count: count,\n    byteCount: byteCount,\n    valueCount: valueCount\n  };\n}\n\nfunction parseInternal(file, size, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, header, littleEndian, buffer, valueCount, values, result;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , ctx.update({\n            message: 'Parsing DSN6/BRIX file...'\n          })];\n\n        case 1:\n          _b.sent();\n\n          return [4\n          /*yield*/\n          , readDsn6Header(file)];\n\n        case 2:\n          _a = _b.sent(), header = _a.header, littleEndian = _a.littleEndian;\n          return [4\n          /*yield*/\n          , file.readBuffer(dsn6HeaderSize, size - dsn6HeaderSize)];\n\n        case 3:\n          buffer = _b.sent().buffer;\n          valueCount = getDsn6Counts(header).valueCount;\n          values = new Float32Array(valueCount);\n          return [4\n          /*yield*/\n          , parseDsn6Values(header, buffer, values, littleEndian)];\n\n        case 4:\n          _b.sent();\n\n          result = {\n            header: header,\n            values: values,\n            name: file.name\n          };\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n\nexport function parseFile(file, size) {\n  var _this = this;\n\n  return Task.create('Parse DSN6/BRIX', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, e_1;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n\n            _b = (_a = Result).success;\n            return [4\n            /*yield*/\n            , parseInternal(file, size, ctx)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.apply(_a, [_c.sent()])];\n\n          case 2:\n            e_1 = _c.sent();\n            return [2\n            /*return*/\n            , Result.error(e_1)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n}\nexport function parse(buffer, name) {\n  return parseFile(FileHandle.fromBuffer(SimpleBuffer.fromUint8Array(buffer), name), buffer.length);\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/dsn6/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../../mol-task';\r\nimport { ReaderResult as Result } from '../result';\r\nimport { FileHandle } from '../../common/file-handle';\r\nimport { SimpleBuffer } from '../../../mol-io/common/simple-buffer';\r\nexport var dsn6HeaderSize = 512;\r\nfunction parseBrixHeader(str) {\r\n    return {\r\n        xStart: parseInt(str.substr(10, 5)),\r\n        yStart: parseInt(str.substr(15, 5)),\r\n        zStart: parseInt(str.substr(20, 5)),\r\n        xExtent: parseInt(str.substr(32, 5)),\r\n        yExtent: parseInt(str.substr(38, 5)),\r\n        zExtent: parseInt(str.substr(42, 5)),\r\n        xRate: parseInt(str.substr(52, 5)),\r\n        yRate: parseInt(str.substr(58, 5)),\r\n        zRate: parseInt(str.substr(62, 5)),\r\n        xlen: parseFloat(str.substr(73, 10)),\r\n        ylen: parseFloat(str.substr(83, 10)),\r\n        zlen: parseFloat(str.substr(93, 10)),\r\n        alpha: parseFloat(str.substr(103, 10)),\r\n        beta: parseFloat(str.substr(113, 10)),\r\n        gamma: parseFloat(str.substr(123, 10)),\r\n        divisor: parseFloat(str.substr(138, 12)),\r\n        summand: parseInt(str.substr(155, 8)),\r\n        sigma: parseFloat(str.substr(170, 12))\r\n    };\r\n}\r\nfunction parseDsn6Header(buffer, littleEndian) {\r\n    var readInt = littleEndian ? function (o) { return buffer.readInt16LE(o * 2); } : function (o) { return buffer.readInt16BE(o * 2); };\r\n    var factor = 1 / readInt(17);\r\n    return {\r\n        xStart: readInt(0),\r\n        yStart: readInt(1),\r\n        zStart: readInt(2),\r\n        xExtent: readInt(3),\r\n        yExtent: readInt(4),\r\n        zExtent: readInt(5),\r\n        xRate: readInt(6),\r\n        yRate: readInt(7),\r\n        zRate: readInt(8),\r\n        xlen: readInt(9) * factor,\r\n        ylen: readInt(10) * factor,\r\n        zlen: readInt(11) * factor,\r\n        alpha: readInt(12) * factor,\r\n        beta: readInt(13) * factor,\r\n        gamma: readInt(14) * factor,\r\n        divisor: readInt(15) / 100,\r\n        summand: readInt(16),\r\n        sigma: undefined\r\n    };\r\n}\r\nfunction getBlocks(header) {\r\n    var xExtent = header.xExtent, yExtent = header.yExtent, zExtent = header.zExtent;\r\n    var xBlocks = Math.ceil(xExtent / 8);\r\n    var yBlocks = Math.ceil(yExtent / 8);\r\n    var zBlocks = Math.ceil(zExtent / 8);\r\n    return { xBlocks: xBlocks, yBlocks: yBlocks, zBlocks: zBlocks };\r\n}\r\nexport function readDsn6Header(file) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var buffer, brixStr, isBrix, littleEndian, header;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, file.readBuffer(0, dsn6HeaderSize)];\r\n                case 1:\r\n                    buffer = (_a.sent()).buffer;\r\n                    brixStr = String.fromCharCode.apply(null, buffer);\r\n                    isBrix = brixStr.startsWith(':-)');\r\n                    littleEndian = isBrix || buffer.readInt16LE(18 * 2) === 100;\r\n                    header = isBrix ? parseBrixHeader(brixStr) : parseDsn6Header(buffer, littleEndian);\r\n                    return [2 /*return*/, { header: header, littleEndian: littleEndian }];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function parseDsn6Values(header, source, target, littleEndian) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var divisor, summand, xExtent, yExtent, zExtent, _a, xBlocks, yBlocks, zBlocks, offset, zz, yy, xx, k, z, j, y, i, x, idx;\r\n        return __generator(this, function (_b) {\r\n            if (!littleEndian) {\r\n                // even though the values are one byte they need to be swapped like they are 2\r\n                SimpleBuffer.flipByteOrderInPlace2(source.buffer);\r\n            }\r\n            divisor = header.divisor, summand = header.summand, xExtent = header.xExtent, yExtent = header.yExtent, zExtent = header.zExtent;\r\n            _a = getBlocks(header), xBlocks = _a.xBlocks, yBlocks = _a.yBlocks, zBlocks = _a.zBlocks;\r\n            offset = 0;\r\n            // loop over blocks\r\n            for (zz = 0; zz < zBlocks; ++zz) {\r\n                for (yy = 0; yy < yBlocks; ++yy) {\r\n                    for (xx = 0; xx < xBlocks; ++xx) {\r\n                        // loop inside block\r\n                        for (k = 0; k < 8; ++k) {\r\n                            z = 8 * zz + k;\r\n                            for (j = 0; j < 8; ++j) {\r\n                                y = 8 * yy + j;\r\n                                for (i = 0; i < 8; ++i) {\r\n                                    x = 8 * xx + i;\r\n                                    // check if remaining slice-part contains values\r\n                                    if (x < xExtent && y < yExtent && z < zExtent) {\r\n                                        idx = ((((x * yExtent) + y) * zExtent) + z);\r\n                                        target[idx] = (source[offset] - summand) / divisor;\r\n                                        ++offset;\r\n                                    }\r\n                                    else {\r\n                                        offset += 8 - i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nexport function getDsn6Counts(header) {\r\n    var xExtent = header.xExtent, yExtent = header.yExtent, zExtent = header.zExtent;\r\n    var _a = getBlocks(header), xBlocks = _a.xBlocks, yBlocks = _a.yBlocks, zBlocks = _a.zBlocks;\r\n    var valueCount = xExtent * yExtent * zExtent;\r\n    var count = xBlocks * 8 * yBlocks * 8 * zBlocks * 8;\r\n    var elementByteSize = 1;\r\n    var byteCount = count * elementByteSize;\r\n    return { count: count, byteCount: byteCount, valueCount: valueCount };\r\n}\r\nfunction parseInternal(file, size, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, header, littleEndian, buffer, valueCount, values, result;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, ctx.update({ message: 'Parsing DSN6/BRIX file...' })];\r\n                case 1:\r\n                    _b.sent();\r\n                    return [4 /*yield*/, readDsn6Header(file)];\r\n                case 2:\r\n                    _a = _b.sent(), header = _a.header, littleEndian = _a.littleEndian;\r\n                    return [4 /*yield*/, file.readBuffer(dsn6HeaderSize, size - dsn6HeaderSize)];\r\n                case 3:\r\n                    buffer = (_b.sent()).buffer;\r\n                    valueCount = getDsn6Counts(header).valueCount;\r\n                    values = new Float32Array(valueCount);\r\n                    return [4 /*yield*/, parseDsn6Values(header, buffer, values, littleEndian)];\r\n                case 4:\r\n                    _b.sent();\r\n                    result = { header: header, values: values, name: file.name };\r\n                    return [2 /*return*/, result];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function parseFile(file, size) {\r\n    var _this = this;\r\n    return Task.create('Parse DSN6/BRIX', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var _a, _b, e_1;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    _c.trys.push([0, 2, , 3]);\r\n                    _b = (_a = Result).success;\r\n                    return [4 /*yield*/, parseInternal(file, size, ctx)];\r\n                case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\r\n                case 2:\r\n                    e_1 = _c.sent();\r\n                    return [2 /*return*/, Result.error(e_1)];\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nexport function parse(buffer, name) {\r\n    return parseFile(FileHandle.fromBuffer(SimpleBuffer.fromUint8Array(buffer), name), buffer.length);\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}