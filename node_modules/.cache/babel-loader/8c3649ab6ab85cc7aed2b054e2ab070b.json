{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Segmentation } from '../../../mol-data/int/segmentation';\nimport { SortedRanges } from '../../../mol-data/int/sorted-ranges';\nimport { OrderedSet } from '../../../mol-data/int';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\n/** Usees same definition as GROMACS' helixorient */\n\nexport function calcHelixOrientation(model) {\n  var _a = model.atomicConformation,\n      x = _a.x,\n      y = _a.y,\n      z = _a.z;\n  var _b = model.atomicHierarchy.derived.residue,\n      polymerType = _b.polymerType,\n      traceElementIndex = _b.traceElementIndex;\n  var n = polymerType.length;\n  var elements = OrderedSet.ofBounds(0, model.atomicConformation.atomId.rowCount);\n  var polymerIt = SortedRanges.transientSegments(model.atomicRanges.polymerRanges, elements);\n  var residueIt = Segmentation.transientSegments(model.atomicHierarchy.residueAtomSegments, elements);\n  var centers = new Float32Array(n * 3);\n  var axes = new Float32Array(n * 3);\n  var i = 0;\n  var j = -1;\n  var s = -1;\n  var a1 = Vec3();\n  var a2 = Vec3();\n  var a3 = Vec3();\n  var a4 = Vec3();\n  var r12 = Vec3();\n  var r23 = Vec3();\n  var r34 = Vec3();\n  var v1 = Vec3();\n  var v2 = Vec3();\n  var vt = Vec3();\n  var diff13 = Vec3();\n  var diff24 = Vec3();\n  var axis = Vec3();\n  var prevAxis = Vec3();\n\n  while (polymerIt.hasNext) {\n    var ps = polymerIt.move();\n    residueIt.setSegment(ps);\n    i = -1;\n    s = -1;\n\n    while (residueIt.hasNext) {\n      i += 1;\n      var index = residueIt.move().index;\n      if (i === 0) s = index;\n      j = index - 2;\n      var j3 = j * 3;\n      Vec3.copy(a1, a2);\n      Vec3.copy(a2, a3);\n      Vec3.copy(a3, a4);\n      var eI_1 = traceElementIndex[index];\n      Vec3.set(a4, x[eI_1], y[eI_1], z[eI_1]);\n      if (i < 3) continue;\n      Vec3.sub(r12, a2, a1);\n      Vec3.sub(r23, a3, a2);\n      Vec3.sub(r34, a4, a3);\n      Vec3.sub(diff13, r12, r23);\n      Vec3.sub(diff24, r23, r34);\n      Vec3.cross(axis, diff13, diff24);\n      Vec3.normalize(axis, axis);\n      Vec3.toArray(axis, axes, j3);\n      var tmp = Math.cos(Vec3.angle(diff13, diff24));\n      var diff13Length = Vec3.magnitude(diff13);\n      var diff24Length = Vec3.magnitude(diff24);\n      var r = Math.sqrt(diff24Length * diff13Length) / // clamp, to avoid numerical instabilities for when\n      // angle between diff13 and diff24 is close to 0\n      Math.max(2.0, 2.0 * (1.0 - tmp));\n      Vec3.scale(v1, diff13, r / diff13Length);\n      Vec3.sub(v1, a2, v1);\n      Vec3.toArray(v1, centers, j3);\n      Vec3.scale(v2, diff24, r / diff24Length);\n      Vec3.sub(v2, a3, v2);\n      Vec3.toArray(v2, centers, j3 + 3);\n      Vec3.copy(prevAxis, axis);\n    } // calc axis as dir of second and third center pos\n    // project first trace atom onto axis to get first center pos\n\n\n    var s3 = s * 3;\n    Vec3.fromArray(v1, centers, s3 + 3);\n    Vec3.fromArray(v2, centers, s3 + 6);\n    Vec3.normalize(axis, Vec3.sub(axis, v1, v2));\n    var sI = traceElementIndex[s];\n    Vec3.set(a1, x[sI], y[sI], z[sI]);\n    Vec3.copy(vt, a1);\n    Vec3.projectPointOnVector(vt, vt, axis, v1);\n    Vec3.toArray(vt, centers, s3); // calc axis as dir of n-1 and n-2 center pos\n    // project last traceAtom onto axis to get last center pos\n\n    var e = j + 2;\n    var e3 = e * 3;\n    Vec3.fromArray(v1, centers, e3 - 3);\n    Vec3.fromArray(v2, centers, e3 - 6);\n    Vec3.normalize(axis, Vec3.sub(axis, v1, v2));\n    var eI = traceElementIndex[e];\n    Vec3.set(a1, x[eI], y[eI], z[eI]);\n    Vec3.copy(vt, a1);\n    Vec3.projectPointOnVector(vt, vt, axis, v1);\n    Vec3.toArray(vt, centers, e3);\n  }\n\n  return {\n    centers: centers\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/helix-orientation/helix-orientation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Segmentation } from '../../../mol-data/int/segmentation';\r\nimport { SortedRanges } from '../../../mol-data/int/sorted-ranges';\r\nimport { OrderedSet } from '../../../mol-data/int';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\n/** Usees same definition as GROMACS' helixorient */\r\nexport function calcHelixOrientation(model) {\r\n    var _a = model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n    var _b = model.atomicHierarchy.derived.residue, polymerType = _b.polymerType, traceElementIndex = _b.traceElementIndex;\r\n    var n = polymerType.length;\r\n    var elements = OrderedSet.ofBounds(0, model.atomicConformation.atomId.rowCount);\r\n    var polymerIt = SortedRanges.transientSegments(model.atomicRanges.polymerRanges, elements);\r\n    var residueIt = Segmentation.transientSegments(model.atomicHierarchy.residueAtomSegments, elements);\r\n    var centers = new Float32Array(n * 3);\r\n    var axes = new Float32Array(n * 3);\r\n    var i = 0;\r\n    var j = -1;\r\n    var s = -1;\r\n    var a1 = Vec3();\r\n    var a2 = Vec3();\r\n    var a3 = Vec3();\r\n    var a4 = Vec3();\r\n    var r12 = Vec3();\r\n    var r23 = Vec3();\r\n    var r34 = Vec3();\r\n    var v1 = Vec3();\r\n    var v2 = Vec3();\r\n    var vt = Vec3();\r\n    var diff13 = Vec3();\r\n    var diff24 = Vec3();\r\n    var axis = Vec3();\r\n    var prevAxis = Vec3();\r\n    while (polymerIt.hasNext) {\r\n        var ps = polymerIt.move();\r\n        residueIt.setSegment(ps);\r\n        i = -1;\r\n        s = -1;\r\n        while (residueIt.hasNext) {\r\n            i += 1;\r\n            var index = residueIt.move().index;\r\n            if (i === 0)\r\n                s = index;\r\n            j = (index - 2);\r\n            var j3 = j * 3;\r\n            Vec3.copy(a1, a2);\r\n            Vec3.copy(a2, a3);\r\n            Vec3.copy(a3, a4);\r\n            var eI_1 = traceElementIndex[index];\r\n            Vec3.set(a4, x[eI_1], y[eI_1], z[eI_1]);\r\n            if (i < 3)\r\n                continue;\r\n            Vec3.sub(r12, a2, a1);\r\n            Vec3.sub(r23, a3, a2);\r\n            Vec3.sub(r34, a4, a3);\r\n            Vec3.sub(diff13, r12, r23);\r\n            Vec3.sub(diff24, r23, r34);\r\n            Vec3.cross(axis, diff13, diff24);\r\n            Vec3.normalize(axis, axis);\r\n            Vec3.toArray(axis, axes, j3);\r\n            var tmp = Math.cos(Vec3.angle(diff13, diff24));\r\n            var diff13Length = Vec3.magnitude(diff13);\r\n            var diff24Length = Vec3.magnitude(diff24);\r\n            var r = (Math.sqrt(diff24Length * diff13Length) /\r\n                // clamp, to avoid numerical instabilities for when\r\n                // angle between diff13 and diff24 is close to 0\r\n                Math.max(2.0, 2.0 * (1.0 - tmp)));\r\n            Vec3.scale(v1, diff13, r / diff13Length);\r\n            Vec3.sub(v1, a2, v1);\r\n            Vec3.toArray(v1, centers, j3);\r\n            Vec3.scale(v2, diff24, r / diff24Length);\r\n            Vec3.sub(v2, a3, v2);\r\n            Vec3.toArray(v2, centers, j3 + 3);\r\n            Vec3.copy(prevAxis, axis);\r\n        }\r\n        // calc axis as dir of second and third center pos\r\n        // project first trace atom onto axis to get first center pos\r\n        var s3 = s * 3;\r\n        Vec3.fromArray(v1, centers, s3 + 3);\r\n        Vec3.fromArray(v2, centers, s3 + 6);\r\n        Vec3.normalize(axis, Vec3.sub(axis, v1, v2));\r\n        var sI = traceElementIndex[s];\r\n        Vec3.set(a1, x[sI], y[sI], z[sI]);\r\n        Vec3.copy(vt, a1);\r\n        Vec3.projectPointOnVector(vt, vt, axis, v1);\r\n        Vec3.toArray(vt, centers, s3);\r\n        // calc axis as dir of n-1 and n-2 center pos\r\n        // project last traceAtom onto axis to get last center pos\r\n        var e = j + 2;\r\n        var e3 = e * 3;\r\n        Vec3.fromArray(v1, centers, e3 - 3);\r\n        Vec3.fromArray(v2, centers, e3 - 6);\r\n        Vec3.normalize(axis, Vec3.sub(axis, v1, v2));\r\n        var eI = traceElementIndex[e];\r\n        Vec3.set(a1, x[eI], y[eI], z[eI]);\r\n        Vec3.copy(vt, a1);\r\n        Vec3.projectPointOnVector(vt, vt, axis, v1);\r\n        Vec3.toArray(vt, centers, e3);\r\n    }\r\n    return {\r\n        centers: centers\r\n    };\r\n}\r\n//# sourceMappingURL=helix-orientation.js.map"]},"metadata":{},"sourceType":"module"}