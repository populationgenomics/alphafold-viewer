{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Image } from '../../mol-geo/geometry/image/image';\nimport { Grid, Volume } from '../../mol-model/volume';\nimport { VolumeVisual, VolumeRepresentation, VolumeRepresentationProvider } from './representation';\nimport { LocationIterator } from '../../mol-geo/util/location-iterator';\nimport { NullLocation } from '../../mol-model/location';\nimport { EmptyLoci } from '../../mol-model/loci';\nimport { Interval, SortedArray } from '../../mol-data/int';\nimport { transformPositionArray } from '../../mol-geo/util';\nimport { Color } from '../../mol-util/color';\nimport { ColorTheme } from '../../mol-theme/color';\nimport { encodeFloatRGBtoArray } from '../../mol-util/float-packing';\nimport { eachVolumeLoci } from './util';\nexport function createImage(ctx, volume, theme, props, image) {\n  return __awaiter(this, void 0, void 0, function () {\n    var dim, isoValue, _a, space, data, _b, min, max, isoVal, color, _c, r, g, b, _d, width, height, x, y, z, x0, y0, z0, nx, ny, nz, corners, imageArray, groupArray, i, iy, ix, iz, val, normVal, imageTexture, groupTexture, transform;\n\n    return __generator(this, function (_e) {\n      dim = props.dimension.name, isoValue = props.isoValue;\n      _a = volume.grid.cells, space = _a.space, data = _a.data;\n      _b = volume.grid.stats, min = _b.min, max = _b.max;\n      isoVal = Volume.IsoValue.toAbsolute(isoValue, volume.grid.stats).absoluteValue;\n      color = theme.color.color(NullLocation, false);\n      _c = Color.toRgbNormalized(color), r = _c[0], g = _c[1], b = _c[2];\n      _d = getSliceInfo(volume.grid, props), width = _d.width, height = _d.height, x = _d.x, y = _d.y, z = _d.z, x0 = _d.x0, y0 = _d.y0, z0 = _d.z0, nx = _d.nx, ny = _d.ny, nz = _d.nz;\n      corners = new Float32Array(dim === 'x' ? [x, 0, 0, x, y, 0, x, 0, z, x, y, z] : dim === 'y' ? [0, y, 0, x, y, 0, 0, y, z, x, y, z] : [0, 0, z, 0, y, z, x, 0, z, x, y, z]);\n      imageArray = new Uint8Array(width * height * 4);\n      groupArray = getPackedGroupArray(volume.grid, props);\n      i = 0;\n\n      for (iy = y0; iy < ny; ++iy) {\n        for (ix = x0; ix < nx; ++ix) {\n          for (iz = z0; iz < nz; ++iz) {\n            val = space.get(data, ix, iy, iz);\n            normVal = (val - min) / (max - min);\n            imageArray[i] = r * normVal * 2 * 255;\n            imageArray[i + 1] = g * normVal * 2 * 255;\n            imageArray[i + 2] = b * normVal * 2 * 255;\n            imageArray[i + 3] = val >= isoVal ? 255 : 0;\n            i += 4;\n          }\n        }\n      }\n\n      imageTexture = {\n        width: width,\n        height: height,\n        array: imageArray,\n        flipY: true\n      };\n      groupTexture = {\n        width: width,\n        height: height,\n        array: groupArray,\n        flipY: true\n      };\n      transform = Grid.getGridToCartesianTransform(volume.grid);\n      transformPositionArray(transform, corners, 0, 4);\n      return [2\n      /*return*/\n      , Image.create(imageTexture, corners, groupTexture, image)];\n    });\n  });\n}\n\nfunction getSliceInfo(grid, props) {\n  var _a = props.dimension,\n      dim = _a.name,\n      index = _a.params;\n  var space = grid.cells.space;\n  var width, height;\n  var x, y, z;\n  var x0 = 0,\n      y0 = 0,\n      z0 = 0;\n  var _b = space.dimensions,\n      nx = _b[0],\n      ny = _b[1],\n      nz = _b[2];\n\n  if (dim === 'x') {\n    x = index, y = ny - 1, z = nz - 1;\n    width = nz, height = ny;\n    x0 = x, nx = x0 + 1;\n  } else if (dim === 'y') {\n    x = nx - 1, y = index, z = nz - 1;\n    width = nz, height = nx;\n    y0 = y, ny = y0 + 1;\n  } else {\n    x = nx - 1, y = ny - 1, z = index;\n    width = nx, height = ny;\n    z0 = z, nz = z0 + 1;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y,\n    z: z,\n    x0: x0,\n    y0: y0,\n    z0: z0,\n    nx: nx,\n    ny: ny,\n    nz: nz\n  };\n}\n\nfunction getPackedGroupArray(grid, props) {\n  var space = grid.cells.space;\n\n  var _a = getSliceInfo(grid, props),\n      width = _a.width,\n      height = _a.height,\n      x0 = _a.x0,\n      y0 = _a.y0,\n      z0 = _a.z0,\n      nx = _a.nx,\n      ny = _a.ny,\n      nz = _a.nz;\n\n  var groupArray = new Uint8Array(width * height * 4);\n  var j = 0;\n\n  for (var iy = y0; iy < ny; ++iy) {\n    for (var ix = x0; ix < nx; ++ix) {\n      for (var iz = z0; iz < nz; ++iz) {\n        encodeFloatRGBtoArray(space.dataOffset(ix, iy, iz), groupArray, j);\n        j += 4;\n      }\n    }\n  }\n\n  return groupArray;\n}\n\nfunction getGroupArray(grid, props) {\n  var space = grid.cells.space;\n\n  var _a = getSliceInfo(grid, props),\n      width = _a.width,\n      height = _a.height,\n      x0 = _a.x0,\n      y0 = _a.y0,\n      z0 = _a.z0,\n      nx = _a.nx,\n      ny = _a.ny,\n      nz = _a.nz;\n\n  var groupArray = new Uint32Array(width * height);\n  var j = 0;\n\n  for (var iy = y0; iy < ny; ++iy) {\n    for (var ix = x0; ix < nx; ++ix) {\n      for (var iz = z0; iz < nz; ++iz) {\n        groupArray[j] = space.dataOffset(ix, iy, iz);\n        j += 1;\n      }\n    }\n  }\n\n  return groupArray;\n}\n\nfunction getLoci(volume, props) {\n  // TODO cache somehow?\n  var groupArray = getGroupArray(volume.grid, props);\n  return Volume.Cell.Loci(volume, SortedArray.ofUnsortedArray(groupArray));\n}\n\nfunction getSliceLoci(pickingId, volume, props, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    return Volume.Cell.Loci(volume, Interval.ofSingleton(groupId));\n  }\n\n  return EmptyLoci;\n}\n\nfunction eachSlice(loci, volume, props, apply) {\n  return eachVolumeLoci(loci, volume, undefined, apply);\n} //\n\n\nexport var SliceParams = __assign(__assign({}, Image.Params), {\n  quality: __assign(__assign({}, Image.Params.quality), {\n    isEssential: false\n  }),\n  dimension: PD.MappedStatic('x', {\n    x: PD.Numeric(0, {\n      min: 0,\n      max: 0,\n      step: 1\n    }),\n    y: PD.Numeric(0, {\n      min: 0,\n      max: 0,\n      step: 1\n    }),\n    z: PD.Numeric(0, {\n      min: 0,\n      max: 0,\n      step: 1\n    })\n  }, {\n    isEssential: true\n  }),\n  isoValue: Volume.IsoValueParam\n});\nexport function getSliceParams(ctx, volume) {\n  var p = PD.clone(SliceParams);\n  var dim = volume.grid.cells.space.dimensions;\n  p.dimension = PD.MappedStatic('x', {\n    x: PD.Numeric(0, {\n      min: 0,\n      max: dim[0] - 1,\n      step: 1\n    }),\n    y: PD.Numeric(0, {\n      min: 0,\n      max: dim[1] - 1,\n      step: 1\n    }),\n    z: PD.Numeric(0, {\n      min: 0,\n      max: dim[2] - 1,\n      step: 1\n    })\n  }, {\n    isEssential: true\n  });\n  p.isoValue = Volume.createIsoValueParam(Volume.IsoValue.absolute(volume.grid.stats.min), volume.grid.stats);\n  return p;\n}\nexport function SliceVisual(materialId) {\n  return VolumeVisual({\n    defaultProps: PD.getDefaultValues(SliceParams),\n    createGeometry: createImage,\n    createLocationIterator: function (volume) {\n      return LocationIterator(volume.grid.cells.data.length, 1, 1, function () {\n        return NullLocation;\n      });\n    },\n    getLoci: getSliceLoci,\n    eachLocation: eachSlice,\n    setUpdateState: function (state, volume, newProps, currentProps, newTheme, currentTheme) {\n      state.createGeometry = newProps.dimension.name !== currentProps.dimension.name || newProps.dimension.params !== currentProps.dimension.params || !Volume.IsoValue.areSame(newProps.isoValue, currentProps.isoValue, volume.grid.stats) || !ColorTheme.areEqual(newTheme.color, currentTheme.color);\n    },\n    geometryUtils: __assign(__assign({}, Image.Utils), {\n      createRenderableState: function (props) {\n        var state = Image.Utils.createRenderableState(props);\n        updateRenderableState(state, props);\n        return state;\n      },\n      updateRenderableState: updateRenderableState\n    })\n  }, materialId);\n}\n\nfunction updateRenderableState(state, props) {\n  Image.Utils.updateRenderableState(state, props);\n  state.opaque = false;\n  state.writeDepth = true;\n}\n\nexport function SliceRepresentation(ctx, getParams) {\n  return VolumeRepresentation('Slice', ctx, getParams, SliceVisual, getLoci);\n}\nexport var SliceRepresentationProvider = VolumeRepresentationProvider({\n  name: 'slice',\n  label: 'Slice',\n  description: 'Slice of volume rendered as image with interpolation.',\n  factory: SliceRepresentation,\n  getParams: getSliceParams,\n  defaultValues: PD.getDefaultValues(SliceParams),\n  defaultColorTheme: {\n    name: 'uniform'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (volume) {\n    return !Volume.isEmpty(volume);\n  }\n});","map":{"version":3,"sources":["../../../src/mol-repr/volume/slice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Image } from '../../mol-geo/geometry/image/image';\r\nimport { Grid, Volume } from '../../mol-model/volume';\r\nimport { VolumeVisual, VolumeRepresentation, VolumeRepresentationProvider } from './representation';\r\nimport { LocationIterator } from '../../mol-geo/util/location-iterator';\r\nimport { NullLocation } from '../../mol-model/location';\r\nimport { EmptyLoci } from '../../mol-model/loci';\r\nimport { Interval, SortedArray } from '../../mol-data/int';\r\nimport { transformPositionArray } from '../../mol-geo/util';\r\nimport { Color } from '../../mol-util/color';\r\nimport { ColorTheme } from '../../mol-theme/color';\r\nimport { encodeFloatRGBtoArray } from '../../mol-util/float-packing';\r\nimport { eachVolumeLoci } from './util';\r\nexport function createImage(ctx, volume, theme, props, image) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var dim, isoValue, _a, space, data, _b, min, max, isoVal, color, _c, r, g, b, _d, width, height, x, y, z, x0, y0, z0, nx, ny, nz, corners, imageArray, groupArray, i, iy, ix, iz, val, normVal, imageTexture, groupTexture, transform;\r\n        return __generator(this, function (_e) {\r\n            dim = props.dimension.name, isoValue = props.isoValue;\r\n            _a = volume.grid.cells, space = _a.space, data = _a.data;\r\n            _b = volume.grid.stats, min = _b.min, max = _b.max;\r\n            isoVal = Volume.IsoValue.toAbsolute(isoValue, volume.grid.stats).absoluteValue;\r\n            color = theme.color.color(NullLocation, false);\r\n            _c = Color.toRgbNormalized(color), r = _c[0], g = _c[1], b = _c[2];\r\n            _d = getSliceInfo(volume.grid, props), width = _d.width, height = _d.height, x = _d.x, y = _d.y, z = _d.z, x0 = _d.x0, y0 = _d.y0, z0 = _d.z0, nx = _d.nx, ny = _d.ny, nz = _d.nz;\r\n            corners = new Float32Array(dim === 'x' ? [x, 0, 0, x, y, 0, x, 0, z, x, y, z] :\r\n                dim === 'y' ? [0, y, 0, x, y, 0, 0, y, z, x, y, z] :\r\n                    [0, 0, z, 0, y, z, x, 0, z, x, y, z]);\r\n            imageArray = new Uint8Array(width * height * 4);\r\n            groupArray = getPackedGroupArray(volume.grid, props);\r\n            i = 0;\r\n            for (iy = y0; iy < ny; ++iy) {\r\n                for (ix = x0; ix < nx; ++ix) {\r\n                    for (iz = z0; iz < nz; ++iz) {\r\n                        val = space.get(data, ix, iy, iz);\r\n                        normVal = (val - min) / (max - min);\r\n                        imageArray[i] = r * normVal * 2 * 255;\r\n                        imageArray[i + 1] = g * normVal * 2 * 255;\r\n                        imageArray[i + 2] = b * normVal * 2 * 255;\r\n                        imageArray[i + 3] = val >= isoVal ? 255 : 0;\r\n                        i += 4;\r\n                    }\r\n                }\r\n            }\r\n            imageTexture = { width: width, height: height, array: imageArray, flipY: true };\r\n            groupTexture = { width: width, height: height, array: groupArray, flipY: true };\r\n            transform = Grid.getGridToCartesianTransform(volume.grid);\r\n            transformPositionArray(transform, corners, 0, 4);\r\n            return [2 /*return*/, Image.create(imageTexture, corners, groupTexture, image)];\r\n        });\r\n    });\r\n}\r\nfunction getSliceInfo(grid, props) {\r\n    var _a = props.dimension, dim = _a.name, index = _a.params;\r\n    var space = grid.cells.space;\r\n    var width, height;\r\n    var x, y, z;\r\n    var x0 = 0, y0 = 0, z0 = 0;\r\n    var _b = space.dimensions, nx = _b[0], ny = _b[1], nz = _b[2];\r\n    if (dim === 'x') {\r\n        x = index, y = ny - 1, z = nz - 1;\r\n        width = nz, height = ny;\r\n        x0 = x, nx = x0 + 1;\r\n    }\r\n    else if (dim === 'y') {\r\n        x = nx - 1, y = index, z = nz - 1;\r\n        width = nz, height = nx;\r\n        y0 = y, ny = y0 + 1;\r\n    }\r\n    else {\r\n        x = nx - 1, y = ny - 1, z = index;\r\n        width = nx, height = ny;\r\n        z0 = z, nz = z0 + 1;\r\n    }\r\n    return {\r\n        width: width,\r\n        height: height,\r\n        x: x,\r\n        y: y,\r\n        z: z,\r\n        x0: x0,\r\n        y0: y0,\r\n        z0: z0,\r\n        nx: nx,\r\n        ny: ny,\r\n        nz: nz\r\n    };\r\n}\r\nfunction getPackedGroupArray(grid, props) {\r\n    var space = grid.cells.space;\r\n    var _a = getSliceInfo(grid, props), width = _a.width, height = _a.height, x0 = _a.x0, y0 = _a.y0, z0 = _a.z0, nx = _a.nx, ny = _a.ny, nz = _a.nz;\r\n    var groupArray = new Uint8Array(width * height * 4);\r\n    var j = 0;\r\n    for (var iy = y0; iy < ny; ++iy) {\r\n        for (var ix = x0; ix < nx; ++ix) {\r\n            for (var iz = z0; iz < nz; ++iz) {\r\n                encodeFloatRGBtoArray(space.dataOffset(ix, iy, iz), groupArray, j);\r\n                j += 4;\r\n            }\r\n        }\r\n    }\r\n    return groupArray;\r\n}\r\nfunction getGroupArray(grid, props) {\r\n    var space = grid.cells.space;\r\n    var _a = getSliceInfo(grid, props), width = _a.width, height = _a.height, x0 = _a.x0, y0 = _a.y0, z0 = _a.z0, nx = _a.nx, ny = _a.ny, nz = _a.nz;\r\n    var groupArray = new Uint32Array(width * height);\r\n    var j = 0;\r\n    for (var iy = y0; iy < ny; ++iy) {\r\n        for (var ix = x0; ix < nx; ++ix) {\r\n            for (var iz = z0; iz < nz; ++iz) {\r\n                groupArray[j] = space.dataOffset(ix, iy, iz);\r\n                j += 1;\r\n            }\r\n        }\r\n    }\r\n    return groupArray;\r\n}\r\nfunction getLoci(volume, props) {\r\n    // TODO cache somehow?\r\n    var groupArray = getGroupArray(volume.grid, props);\r\n    return Volume.Cell.Loci(volume, SortedArray.ofUnsortedArray(groupArray));\r\n}\r\nfunction getSliceLoci(pickingId, volume, props, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        return Volume.Cell.Loci(volume, Interval.ofSingleton(groupId));\r\n    }\r\n    return EmptyLoci;\r\n}\r\nfunction eachSlice(loci, volume, props, apply) {\r\n    return eachVolumeLoci(loci, volume, undefined, apply);\r\n}\r\n//\r\nexport var SliceParams = __assign(__assign({}, Image.Params), { quality: __assign(__assign({}, Image.Params.quality), { isEssential: false }), dimension: PD.MappedStatic('x', {\r\n        x: PD.Numeric(0, { min: 0, max: 0, step: 1 }),\r\n        y: PD.Numeric(0, { min: 0, max: 0, step: 1 }),\r\n        z: PD.Numeric(0, { min: 0, max: 0, step: 1 }),\r\n    }, { isEssential: true }), isoValue: Volume.IsoValueParam });\r\nexport function getSliceParams(ctx, volume) {\r\n    var p = PD.clone(SliceParams);\r\n    var dim = volume.grid.cells.space.dimensions;\r\n    p.dimension = PD.MappedStatic('x', {\r\n        x: PD.Numeric(0, { min: 0, max: dim[0] - 1, step: 1 }),\r\n        y: PD.Numeric(0, { min: 0, max: dim[1] - 1, step: 1 }),\r\n        z: PD.Numeric(0, { min: 0, max: dim[2] - 1, step: 1 }),\r\n    }, { isEssential: true });\r\n    p.isoValue = Volume.createIsoValueParam(Volume.IsoValue.absolute(volume.grid.stats.min), volume.grid.stats);\r\n    return p;\r\n}\r\nexport function SliceVisual(materialId) {\r\n    return VolumeVisual({\r\n        defaultProps: PD.getDefaultValues(SliceParams),\r\n        createGeometry: createImage,\r\n        createLocationIterator: function (volume) { return LocationIterator(volume.grid.cells.data.length, 1, 1, function () { return NullLocation; }); },\r\n        getLoci: getSliceLoci,\r\n        eachLocation: eachSlice,\r\n        setUpdateState: function (state, volume, newProps, currentProps, newTheme, currentTheme) {\r\n            state.createGeometry = (newProps.dimension.name !== currentProps.dimension.name ||\r\n                newProps.dimension.params !== currentProps.dimension.params ||\r\n                !Volume.IsoValue.areSame(newProps.isoValue, currentProps.isoValue, volume.grid.stats) ||\r\n                !ColorTheme.areEqual(newTheme.color, currentTheme.color));\r\n        },\r\n        geometryUtils: __assign(__assign({}, Image.Utils), { createRenderableState: function (props) {\r\n                var state = Image.Utils.createRenderableState(props);\r\n                updateRenderableState(state, props);\r\n                return state;\r\n            }, updateRenderableState: updateRenderableState })\r\n    }, materialId);\r\n}\r\nfunction updateRenderableState(state, props) {\r\n    Image.Utils.updateRenderableState(state, props);\r\n    state.opaque = false;\r\n    state.writeDepth = true;\r\n}\r\nexport function SliceRepresentation(ctx, getParams) {\r\n    return VolumeRepresentation('Slice', ctx, getParams, SliceVisual, getLoci);\r\n}\r\nexport var SliceRepresentationProvider = VolumeRepresentationProvider({\r\n    name: 'slice',\r\n    label: 'Slice',\r\n    description: 'Slice of volume rendered as image with interpolation.',\r\n    factory: SliceRepresentation,\r\n    getParams: getSliceParams,\r\n    defaultValues: PD.getDefaultValues(SliceParams),\r\n    defaultColorTheme: { name: 'uniform' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (volume) { return !Volume.isEmpty(volume); }\r\n});\r\n//# sourceMappingURL=slice.js.map"]},"metadata":{},"sourceType":"module"}