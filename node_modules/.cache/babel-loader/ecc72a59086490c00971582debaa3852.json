{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { SymmetryOperator } from '../../mol-math/geometry';\nimport { Mat4, Vec3 } from '../../mol-math/linear-algebra';\nimport { Structure } from '../../mol-model/structure';\n\nvar _unwindMatrix = Mat4();\n\nexport function unwindStructureAssembly(structure, unitTransforms, t) {\n  for (var i = 0, _i = structure.units.length; i < _i; i++) {\n    var u = structure.units[i];\n    SymmetryOperator.lerpFromIdentity(_unwindMatrix, u.conformation.operator, t);\n    unitTransforms.setTransform(_unwindMatrix, u);\n  }\n}\n\nvar _centerVec = Vec3(),\n    _transVec = Vec3(),\n    _transMat = Mat4();\n\nexport function explodeStructure(structure, unitTransforms, t, sphere) {\n  var d = sphere.radius * t;\n\n  for (var i = 0, _i = structure.units.length; i < _i; i++) {\n    var u = structure.units[i];\n    Vec3.transformMat4(_centerVec, u.lookup3d.boundary.sphere.center, u.conformation.operator.matrix);\n    Vec3.sub(_transVec, _centerVec, sphere.center);\n    Vec3.setMagnitude(_transVec, _transVec, d);\n    Mat4.fromTranslation(_transMat, _transVec);\n    unitTransforms.setTransform(_transMat, u);\n  }\n} //\n\nexport var SpinStructureParams = {\n  axis: PD.MappedStatic('custom', {\n    structure: PD.Group({\n      principalAxis: PD.Select('dirA', [['dirA', 'A'], ['dirB', 'B'], ['dirC', 'C']])\n    }),\n    custom: PD.Group({\n      vector: PD.Vec3(Vec3.create(0, 0, 1))\n    })\n  }),\n  origin: PD.MappedStatic('structure', {\n    structure: PD.Group({}),\n    custom: PD.Group({\n      vector: PD.Vec3(Vec3.create(0, 0, 0))\n    })\n  })\n};\nexport function getSpinStructureAxisAndOrigin(structure, props) {\n  var axis, origin;\n\n  if (props.axis.name === 'custom') {\n    axis = props.axis.params.vector;\n  } else {\n    var pa = Structure.getPrincipalAxes(structure);\n    axis = pa.momentsAxes[props.axis.params.principalAxis];\n  }\n\n  if (props.origin.name === 'custom') {\n    origin = props.origin.params.vector;\n  } else {\n    var pa = Structure.getPrincipalAxes(structure);\n    origin = pa.momentsAxes.origin;\n  }\n\n  return {\n    axis: axis,\n    origin: origin\n  };\n}\n\nvar _rotMat = Mat4();\n\nvar _transMat2 = Mat4();\n\nvar _t = Mat4();\n\nexport function spinStructure(structure, unitTransforms, t, axis, origin) {\n  for (var i = 0, _i = structure.units.length; i < _i; i++) {\n    var u = structure.units[i];\n    Vec3.negate(_transVec, origin);\n    Mat4.fromTranslation(_transMat, _transVec);\n    Mat4.fromRotation(_rotMat, Math.PI * t * 2, axis);\n    Mat4.fromTranslation(_transMat2, origin);\n    Mat4.mul(_t, _rotMat, _transMat);\n    Mat4.mul(_t, _transMat2, _t);\n    unitTransforms.setTransform(_t, u);\n  }\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/animation/helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { SymmetryOperator } from '../../mol-math/geometry';\r\nimport { Mat4, Vec3 } from '../../mol-math/linear-algebra';\r\nimport { Structure } from '../../mol-model/structure';\r\nvar _unwindMatrix = Mat4();\r\nexport function unwindStructureAssembly(structure, unitTransforms, t) {\r\n    for (var i = 0, _i = structure.units.length; i < _i; i++) {\r\n        var u = structure.units[i];\r\n        SymmetryOperator.lerpFromIdentity(_unwindMatrix, u.conformation.operator, t);\r\n        unitTransforms.setTransform(_unwindMatrix, u);\r\n    }\r\n}\r\nvar _centerVec = Vec3(), _transVec = Vec3(), _transMat = Mat4();\r\nexport function explodeStructure(structure, unitTransforms, t, sphere) {\r\n    var d = sphere.radius * t;\r\n    for (var i = 0, _i = structure.units.length; i < _i; i++) {\r\n        var u = structure.units[i];\r\n        Vec3.transformMat4(_centerVec, u.lookup3d.boundary.sphere.center, u.conformation.operator.matrix);\r\n        Vec3.sub(_transVec, _centerVec, sphere.center);\r\n        Vec3.setMagnitude(_transVec, _transVec, d);\r\n        Mat4.fromTranslation(_transMat, _transVec);\r\n        unitTransforms.setTransform(_transMat, u);\r\n    }\r\n}\r\n//\r\nexport var SpinStructureParams = {\r\n    axis: PD.MappedStatic('custom', {\r\n        structure: PD.Group({\r\n            principalAxis: PD.Select('dirA', [['dirA', 'A'], ['dirB', 'B'], ['dirC', 'C']])\r\n        }),\r\n        custom: PD.Group({\r\n            vector: PD.Vec3(Vec3.create(0, 0, 1))\r\n        })\r\n    }),\r\n    origin: PD.MappedStatic('structure', {\r\n        structure: PD.Group({}),\r\n        custom: PD.Group({\r\n            vector: PD.Vec3(Vec3.create(0, 0, 0))\r\n        })\r\n    }),\r\n};\r\nexport function getSpinStructureAxisAndOrigin(structure, props) {\r\n    var axis, origin;\r\n    if (props.axis.name === 'custom') {\r\n        axis = props.axis.params.vector;\r\n    }\r\n    else {\r\n        var pa = Structure.getPrincipalAxes(structure);\r\n        axis = pa.momentsAxes[props.axis.params.principalAxis];\r\n    }\r\n    if (props.origin.name === 'custom') {\r\n        origin = props.origin.params.vector;\r\n    }\r\n    else {\r\n        var pa = Structure.getPrincipalAxes(structure);\r\n        origin = pa.momentsAxes.origin;\r\n    }\r\n    return { axis: axis, origin: origin };\r\n}\r\nvar _rotMat = Mat4();\r\nvar _transMat2 = Mat4();\r\nvar _t = Mat4();\r\nexport function spinStructure(structure, unitTransforms, t, axis, origin) {\r\n    for (var i = 0, _i = structure.units.length; i < _i; i++) {\r\n        var u = structure.units[i];\r\n        Vec3.negate(_transVec, origin);\r\n        Mat4.fromTranslation(_transMat, _transVec);\r\n        Mat4.fromRotation(_rotMat, Math.PI * t * 2, axis);\r\n        Mat4.fromTranslation(_transMat2, origin);\r\n        Mat4.mul(_t, _rotMat, _transMat);\r\n        Mat4.mul(_t, _transMat2, _t);\r\n        unitTransforms.setTransform(_t, u);\r\n    }\r\n}\r\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}