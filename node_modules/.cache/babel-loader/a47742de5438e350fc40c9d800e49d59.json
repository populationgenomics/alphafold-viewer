{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3 } from '../linear-algebra';\nimport { Box3D } from '../geometry';\nexport function getRegularGrid3dDelta(_a) {\n  var box = _a.box,\n      dimensions = _a.dimensions;\n  return Vec3.div(Vec3(), Box3D.size(Vec3(), box), Vec3.subScalar(Vec3(), dimensions, 1));\n}\nexport function fillGridDim(length, start, step) {\n  var a = new Float32Array(length);\n\n  for (var i = 0; i < a.length; i++) {\n    a[i] = start + step * i;\n  }\n\n  return a;\n}","map":{"version":3,"sources":["../../../src/mol-math/geometry/common.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAGH,SAAuB,IAAvB,QAAyC,mBAAzC;AACA,SAAS,KAAT,QAAsB,aAAtB;AAoCA,OAAM,SAAU,qBAAV,CAAgC,EAAhC,EAAkE;MAAhC,GAAG,GAAA,EAAA,CAAA,G;MAAE,UAAU,GAAA,EAAA,CAAA,U;AACnD,SAAO,IAAI,CAAC,GAAL,CAAS,IAAI,EAAb,EAAiB,KAAK,CAAC,IAAN,CAAW,IAAI,EAAf,EAAmB,GAAnB,CAAjB,EAA0C,IAAI,CAAC,SAAL,CAAe,IAAI,EAAnB,EAAuB,UAAvB,EAAmC,CAAnC,CAA1C,CAAP;AACH;AAED,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAsC,KAAtC,EAAqD,IAArD,EAAiE;AACnE,MAAM,CAAC,GAAG,IAAI,YAAJ,CAAiB,MAAjB,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAAC,CAAC,MAAtB,EAA8B,CAAC,EAA/B,EAAmC;AAC/B,IAAA,CAAC,CAAC,CAAD,CAAD,GAAO,KAAK,GAAI,IAAI,GAAG,CAAvB;AACH;;AACD,SAAO,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3 } from '../linear-algebra';\r\nimport { Box3D } from '../geometry';\r\nexport function getRegularGrid3dDelta(_a) {\r\n    var box = _a.box, dimensions = _a.dimensions;\r\n    return Vec3.div(Vec3(), Box3D.size(Vec3(), box), Vec3.subScalar(Vec3(), dimensions, 1));\r\n}\r\nexport function fillGridDim(length, start, step) {\r\n    var a = new Float32Array(length);\r\n    for (var i = 0; i < a.length; i++) {\r\n        a[i] = start + (step * i);\r\n    }\r\n    return a;\r\n}\r\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}