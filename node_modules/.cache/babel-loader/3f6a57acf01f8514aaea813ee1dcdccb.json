{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\n/** Set canvas size taking `devicePixelRatio` into account */\n\nexport function setCanvasSize(canvas, width, height, scale) {\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  canvas.width = Math.round(window.devicePixelRatio * scale * width);\n  canvas.height = Math.round(window.devicePixelRatio * scale * height);\n  Object.assign(canvas.style, {\n    width: width + \"px\",\n    height: height + \"px\"\n  });\n}\n/** Resize canvas to container element taking `devicePixelRatio` into account */\n\nexport function resizeCanvas(canvas, container, scale) {\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  var width = window.innerWidth;\n  var height = window.innerHeight;\n\n  if (container !== document.body) {\n    // fixes issue #molstar/molstar#147, offsetWidth/offsetHeight is correct size when css transform:scale is used\n    width = container.offsetWidth;\n    height = container.offsetHeight;\n  }\n\n  setCanvasSize(canvas, width, height, scale);\n}\n\nfunction _canvasToBlob(canvas, callback, type, quality) {\n  var bin = atob(canvas.toDataURL(type, quality).split(',')[1]);\n  var len = bin.length;\n  var len32 = len >> 2;\n  var a8 = new Uint8Array(len);\n  var a32 = new Uint32Array(a8.buffer, 0, len32);\n  var j = 0;\n\n  for (var i = 0; i < len32; ++i) {\n    a32[i] = bin.charCodeAt(j++) | bin.charCodeAt(j++) << 8 | bin.charCodeAt(j++) << 16 | bin.charCodeAt(j++) << 24;\n  }\n\n  var tailLength = len & 3;\n\n  while (tailLength--) a8[j] = bin.charCodeAt(j++);\n\n  callback(new Blob([a8], {\n    type: type || 'image/png'\n  }));\n}\n\nexport function canvasToBlob(canvas, type, quality) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve, reject) {\n        var callback = function (blob) {\n          if (blob) resolve(blob);else reject('no blob returned');\n        };\n\n        if (!HTMLCanvasElement.prototype.toBlob) {\n          _canvasToBlob(canvas, callback, type, quality);\n        } else {\n          canvas.toBlob(callback, type, quality);\n        }\n      })];\n    });\n  });\n}","map":{"version":3,"sources":["../../src/mol-canvas3d/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\n/** Set canvas size taking `devicePixelRatio` into account */\r\nexport function setCanvasSize(canvas, width, height, scale) {\r\n    if (scale === void 0) { scale = 1; }\r\n    canvas.width = Math.round(window.devicePixelRatio * scale * width);\r\n    canvas.height = Math.round(window.devicePixelRatio * scale * height);\r\n    Object.assign(canvas.style, { width: width + \"px\", height: height + \"px\" });\r\n}\r\n/** Resize canvas to container element taking `devicePixelRatio` into account */\r\nexport function resizeCanvas(canvas, container, scale) {\r\n    if (scale === void 0) { scale = 1; }\r\n    var width = window.innerWidth;\r\n    var height = window.innerHeight;\r\n    if (container !== document.body) {\r\n        // fixes issue #molstar/molstar#147, offsetWidth/offsetHeight is correct size when css transform:scale is used\r\n        width = container.offsetWidth;\r\n        height = container.offsetHeight;\r\n    }\r\n    setCanvasSize(canvas, width, height, scale);\r\n}\r\nfunction _canvasToBlob(canvas, callback, type, quality) {\r\n    var bin = atob(canvas.toDataURL(type, quality).split(',')[1]);\r\n    var len = bin.length;\r\n    var len32 = len >> 2;\r\n    var a8 = new Uint8Array(len);\r\n    var a32 = new Uint32Array(a8.buffer, 0, len32);\r\n    var j = 0;\r\n    for (var i = 0; i < len32; ++i) {\r\n        a32[i] = bin.charCodeAt(j++) |\r\n            bin.charCodeAt(j++) << 8 |\r\n            bin.charCodeAt(j++) << 16 |\r\n            bin.charCodeAt(j++) << 24;\r\n    }\r\n    var tailLength = len & 3;\r\n    while (tailLength--)\r\n        a8[j] = bin.charCodeAt(j++);\r\n    callback(new Blob([a8], { type: type || 'image/png' }));\r\n}\r\nexport function canvasToBlob(canvas, type, quality) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                    var callback = function (blob) {\r\n                        if (blob)\r\n                            resolve(blob);\r\n                        else\r\n                            reject('no blob returned');\r\n                    };\r\n                    if (!HTMLCanvasElement.prototype.toBlob) {\r\n                        _canvasToBlob(canvas, callback, type, quality);\r\n                    }\r\n                    else {\r\n                        canvas.toBlob(callback, type, quality);\r\n                    }\r\n                })];\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}