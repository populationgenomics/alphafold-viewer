{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Color } from '../../mol-util/color';\nimport { StructureElement, Bond } from '../../mol-model/structure';\nimport { OrderedSet } from '../../mol-data/int';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = 'Gives every element (atom or coarse sphere/gaussian) a unique color based on the position (index) of the element in the list of elements in the structure.';\nexport var ElementIndexColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: 'red-yellow-blue'\n}));\nexport function getElementIndexColorThemeParams(ctx) {\n  return ElementIndexColorThemeParams; // TODO return copy\n}\nexport function ElementIndexColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var units_1 = ctx.structure.root.units;\n    var unitCount = units_1.length;\n    var cummulativeElementCount_1 = new Map();\n    var unitIdIndex_1 = new Map();\n    var elementCount = 0;\n\n    for (var i = 0; i < unitCount; ++i) {\n      cummulativeElementCount_1.set(i, elementCount);\n      elementCount += units_1[i].elements.length;\n      unitIdIndex_1.set(units_1[i].id, i);\n    }\n\n    var palette_1 = getPalette(elementCount, props);\n    legend = palette_1.legend;\n\n    color = function (location) {\n      if (StructureElement.Location.is(location)) {\n        var unitIndex = unitIdIndex_1.get(location.unit.id);\n        var unitElementIndex = OrderedSet.findPredecessorIndex(units_1[unitIndex].elements, location.element);\n        return palette_1.color(cummulativeElementCount_1.get(unitIndex) + unitElementIndex);\n      } else if (Bond.isLocation(location)) {\n        var unitIndex = unitIdIndex_1.get(location.aUnit.id);\n        var unitElementIndex = OrderedSet.findPredecessorIndex(units_1[unitIndex].elements, location.aUnit.elements[location.aIndex]);\n        return palette_1.color(cummulativeElementCount_1.get(unitIndex) + unitElementIndex);\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: ElementIndexColorTheme,\n    granularity: 'groupInstance',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var ElementIndexColorThemeProvider = {\n  name: 'element-index',\n  label: 'Element Index',\n  category: \"Atom Property\"\n  /* Atom */\n  ,\n  factory: ElementIndexColorTheme,\n  getParams: getElementIndexColorThemeParams,\n  defaultValues: PD.getDefaultValues(ElementIndexColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/element-index.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,KAAT,QAAsB,sBAAtB;AAEA,SAAS,gBAAT,EAA2B,IAA3B,QAAuC,2BAAvC;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AAEA,SAAS,gBAAT,EAA2B,UAA3B,QAA6C,8BAA7C;AAGA,IAAM,YAAY,GAAG,KAAK,CAAC,QAAD,CAA1B;AACA,IAAM,WAAW,GAAG,4JAApB;AAEA,OAAO,IAAM,4BAA4B,GAAA,QAAA,CAAA,EAAA,EAClC,gBAAgB,CAAC;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,SAAS,EAAE;AAA7B,CAAD,CADkB,CAAlC;AAIP,OAAM,SAAU,+BAAV,CAA0C,GAA1C,EAA+D;AACjE,SAAO,4BAAP,CADiE,CAC5B;AACxC;AAED,OAAM,SAAU,sBAAV,CAAiC,GAAjC,EAAwD,KAAxD,EAAsG;AACxG,MAAI,KAAJ;AACA,MAAI,MAAJ;;AAEA,MAAI,GAAG,CAAC,SAAR,EAAmB;AACP,QAAA,OAAK,GAAK,GAAG,CAAC,SAAJ,CAAc,IAAd,CAAL,KAAL;AACR,QAAM,SAAS,GAAG,OAAK,CAAC,MAAxB;AACA,QAAM,yBAAuB,GAAG,IAAI,GAAJ,EAAhC;AACA,QAAM,aAAW,GAAG,IAAI,GAAJ,EAApB;AAEA,QAAI,YAAY,GAAG,CAAnB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAChC,MAAA,yBAAuB,CAAC,GAAxB,CAA4B,CAA5B,EAA+B,YAA/B;AACA,MAAA,YAAY,IAAI,OAAK,CAAC,CAAD,CAAL,CAAS,QAAT,CAAkB,MAAlC;AACA,MAAA,aAAW,CAAC,GAAZ,CAAgB,OAAK,CAAC,CAAD,CAAL,CAAS,EAAzB,EAA6B,CAA7B;AACH;;AAED,QAAM,SAAO,GAAG,UAAU,CAAC,YAAD,EAAe,KAAf,CAA1B;AACA,IAAA,MAAM,GAAG,SAAO,CAAC,MAAjB;;AAEA,IAAA,KAAK,GAAG,UAAC,QAAD,EAAmB;AACvB,UAAI,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,CAA6B,QAA7B,CAAJ,EAA4C;AACxC,YAAM,SAAS,GAAG,aAAW,CAAC,GAAZ,CAAgB,QAAQ,CAAC,IAAT,CAAc,EAA9B,CAAlB;AACA,YAAM,gBAAgB,GAAG,UAAU,CAAC,oBAAX,CAAgC,OAAK,CAAC,SAAD,CAAL,CAAiB,QAAjD,EAA2D,QAAQ,CAAC,OAApE,CAAzB;AACA,eAAO,SAAO,CAAC,KAAR,CAAc,yBAAuB,CAAC,GAAxB,CAA4B,SAA5B,IAA0C,gBAAxD,CAAP;AACH,OAJD,MAIO,IAAI,IAAI,CAAC,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAClC,YAAM,SAAS,GAAG,aAAW,CAAC,GAAZ,CAAgB,QAAQ,CAAC,KAAT,CAAe,EAA/B,CAAlB;AACA,YAAM,gBAAgB,GAAG,UAAU,CAAC,oBAAX,CAAgC,OAAK,CAAC,SAAD,CAAL,CAAiB,QAAjD,EAA2D,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,QAAQ,CAAC,MAAjC,CAA3D,CAAzB;AACA,eAAO,SAAO,CAAC,KAAR,CAAc,yBAAuB,CAAC,GAAxB,CAA4B,SAA5B,IAA0C,gBAAxD,CAAP;AACH;;AACD,aAAO,YAAP;AACH,KAXD;AAYH,GA5BD,MA4BO;AACH,IAAA,KAAK,GAAG,YAAA;AAAM,aAAA,YAAA;AAAY,KAA1B;AACH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,sBADN;AAEH,IAAA,WAAW,EAAE,eAFV;AAGH,IAAA,eAAe,EAAE,IAHd;AAIH,IAAA,KAAK,EAAA,KAJF;AAKH,IAAA,KAAK,EAAA,KALF;AAMH,IAAA,WAAW,EAAE,WANV;AAOH,IAAA,MAAM,EAAA;AAPH,GAAP;AASH;AAED,OAAO,IAAM,8BAA8B,GAAuE;AAC9G,EAAA,IAAI,EAAE,eADwG;AAE9G,EAAA,KAAK,EAAE,eAFuG;AAG9G,EAAA,QAAQ,EAAA;AAAA;AAHsG;AAI9G,EAAA,OAAO,EAAE,sBAJqG;AAK9G,EAAA,SAAS,EAAE,+BALmG;AAM9G,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,4BAApB,CAN+F;AAO9G,EAAA,YAAY,EAAE,UAAC,GAAD,EAAsB;AAAK,WAAA,CAAC,CAAC,GAAG,CAAL,SAAA;AAAe;AAPsD,CAA3G","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Color } from '../../mol-util/color';\r\nimport { StructureElement, Bond } from '../../mol-model/structure';\r\nimport { OrderedSet } from '../../mol-data/int';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = 'Gives every element (atom or coarse sphere/gaussian) a unique color based on the position (index) of the element in the list of elements in the structure.';\r\nexport var ElementIndexColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: 'red-yellow-blue' }));\r\nexport function getElementIndexColorThemeParams(ctx) {\r\n    return ElementIndexColorThemeParams; // TODO return copy\r\n}\r\nexport function ElementIndexColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var units_1 = ctx.structure.root.units;\r\n        var unitCount = units_1.length;\r\n        var cummulativeElementCount_1 = new Map();\r\n        var unitIdIndex_1 = new Map();\r\n        var elementCount = 0;\r\n        for (var i = 0; i < unitCount; ++i) {\r\n            cummulativeElementCount_1.set(i, elementCount);\r\n            elementCount += units_1[i].elements.length;\r\n            unitIdIndex_1.set(units_1[i].id, i);\r\n        }\r\n        var palette_1 = getPalette(elementCount, props);\r\n        legend = palette_1.legend;\r\n        color = function (location) {\r\n            if (StructureElement.Location.is(location)) {\r\n                var unitIndex = unitIdIndex_1.get(location.unit.id);\r\n                var unitElementIndex = OrderedSet.findPredecessorIndex(units_1[unitIndex].elements, location.element);\r\n                return palette_1.color(cummulativeElementCount_1.get(unitIndex) + unitElementIndex);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                var unitIndex = unitIdIndex_1.get(location.aUnit.id);\r\n                var unitElementIndex = OrderedSet.findPredecessorIndex(units_1[unitIndex].elements, location.aUnit.elements[location.aIndex]);\r\n                return palette_1.color(cummulativeElementCount_1.get(unitIndex) + unitElementIndex);\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: ElementIndexColorTheme,\r\n        granularity: 'groupInstance',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var ElementIndexColorThemeProvider = {\r\n    name: 'element-index',\r\n    label: 'Element Index',\r\n    category: \"Atom Property\" /* Atom */,\r\n    factory: ElementIndexColorTheme,\r\n    getParams: getElementIndexColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(ElementIndexColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=element-index.js.map"]},"metadata":{},"sourceType":"module"}