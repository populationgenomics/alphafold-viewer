{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { Spheres } from './spheres';\nvar quadMapping = new Float32Array([-1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0]);\nvar quadIndices = new Uint16Array([0, 1, 2, 1, 3, 2]); // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar caAdd3 = ChunkedArray.add3;\nvar caAdd2 = ChunkedArray.add2;\nvar caAdd = ChunkedArray.add;\nexport var SpheresBuilder;\n\n(function (SpheresBuilder) {\n  function create(initialCount, chunkSize, spheres) {\n    if (initialCount === void 0) {\n      initialCount = 2048;\n    }\n\n    if (chunkSize === void 0) {\n      chunkSize = 1024;\n    }\n\n    initialCount *= 4;\n    chunkSize *= 4;\n    var centers = ChunkedArray.create(Float32Array, 3, chunkSize, spheres ? spheres.centerBuffer.ref.value : initialCount);\n    var mappings = ChunkedArray.create(Float32Array, 2, chunkSize, spheres ? spheres.mappingBuffer.ref.value : initialCount);\n    var indices = ChunkedArray.create(Uint32Array, 3, chunkSize / 2, spheres ? spheres.indexBuffer.ref.value : initialCount / 2);\n    var groups = ChunkedArray.create(Float32Array, 1, chunkSize, spheres ? spheres.groupBuffer.ref.value : initialCount);\n    return {\n      add: function (x, y, z, group) {\n        var offset = centers.elementCount;\n\n        for (var i = 0; i < 4; ++i) {\n          caAdd3(centers, x, y, z);\n          caAdd2(mappings, quadMapping[i * 2], quadMapping[i * 2 + 1]);\n          caAdd(groups, group);\n        }\n\n        caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\n        caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\n      },\n      getSpheres: function () {\n        var cb = ChunkedArray.compact(centers, true);\n        var mb = ChunkedArray.compact(mappings, true);\n        var ib = ChunkedArray.compact(indices, true);\n        var gb = ChunkedArray.compact(groups, true);\n        return Spheres.create(cb, mb, ib, gb, centers.elementCount / 4, spheres);\n      }\n    };\n  }\n\n  SpheresBuilder.create = create;\n})(SpheresBuilder || (SpheresBuilder = {}));","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/spheres/spheres-builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { Spheres } from './spheres';\r\nvar quadMapping = new Float32Array([\r\n    -1.0, 1.0,\r\n    -1.0, -1.0,\r\n    1.0, 1.0,\r\n    1.0, -1.0\r\n]);\r\nvar quadIndices = new Uint16Array([\r\n    0, 1, 2,\r\n    1, 3, 2\r\n]);\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar caAdd3 = ChunkedArray.add3;\r\nvar caAdd2 = ChunkedArray.add2;\r\nvar caAdd = ChunkedArray.add;\r\nexport var SpheresBuilder;\r\n(function (SpheresBuilder) {\r\n    function create(initialCount, chunkSize, spheres) {\r\n        if (initialCount === void 0) { initialCount = 2048; }\r\n        if (chunkSize === void 0) { chunkSize = 1024; }\r\n        initialCount *= 4;\r\n        chunkSize *= 4;\r\n        var centers = ChunkedArray.create(Float32Array, 3, chunkSize, spheres ? spheres.centerBuffer.ref.value : initialCount);\r\n        var mappings = ChunkedArray.create(Float32Array, 2, chunkSize, spheres ? spheres.mappingBuffer.ref.value : initialCount);\r\n        var indices = ChunkedArray.create(Uint32Array, 3, chunkSize / 2, spheres ? spheres.indexBuffer.ref.value : initialCount / 2);\r\n        var groups = ChunkedArray.create(Float32Array, 1, chunkSize, spheres ? spheres.groupBuffer.ref.value : initialCount);\r\n        return {\r\n            add: function (x, y, z, group) {\r\n                var offset = centers.elementCount;\r\n                for (var i = 0; i < 4; ++i) {\r\n                    caAdd3(centers, x, y, z);\r\n                    caAdd2(mappings, quadMapping[i * 2], quadMapping[i * 2 + 1]);\r\n                    caAdd(groups, group);\r\n                }\r\n                caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\r\n                caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\r\n            },\r\n            getSpheres: function () {\r\n                var cb = ChunkedArray.compact(centers, true);\r\n                var mb = ChunkedArray.compact(mappings, true);\r\n                var ib = ChunkedArray.compact(indices, true);\r\n                var gb = ChunkedArray.compact(groups, true);\r\n                return Spheres.create(cb, mb, ib, gb, centers.elementCount / 4, spheres);\r\n            }\r\n        };\r\n    }\r\n    SpheresBuilder.create = create;\r\n})(SpheresBuilder || (SpheresBuilder = {}));\r\n//# sourceMappingURL=spheres-builder.js.map"]},"metadata":{},"sourceType":"module"}