{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\n\n/**\r\n * The basic turn pattern is a single H bond of type (i, i + n).\r\n * We assign an n-turn at residue i if there is an H bond from CO(i) to NH(i + n),\r\n * i.e., “n-turn(i)=: Hbond(i, i + n), n = 3, 4, 5.”\r\n *\r\n * Type: T\r\n */\nexport function assignTurns(ctx) {\n  var proteinInfo = ctx.proteinInfo,\n      hbonds = ctx.hbonds,\n      flags = ctx.flags;\n  var turnFlag = [1024\n  /* T3S */\n  , 2048\n  /* T4S */\n  , 4096\n  /* T5S */\n  , 128\n  /* T3 */\n  , 256\n  /* T4 */\n  , 512\n  /* T5 */\n  ];\n\n  for (var idx = 0; idx < 3; idx++) {\n    for (var i = 0, il = proteinInfo.residueIndices.length - 1; i < il; ++i) {\n      // check if hbond exists\n      if (hbonds.getDirectedEdgeIndex(i, i + idx + 3) !== -1) {\n        flags[i] |= turnFlag[idx + 3] | turnFlag[idx];\n\n        if (ctx.params.oldDefinition) {\n          for (var k = 1; k < idx + 3; ++k) {\n            flags[i + k] |= turnFlag[idx + 3] | 64\n            /* T */\n            ;\n          }\n        } else {\n          for (var k = 0; k <= idx + 3; ++k) {\n            flags[i + k] |= turnFlag[idx + 3] | 64\n            /* T */\n            ;\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/secondary-structure/dssp/turns.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAKH;;;;;;AAMG;AACH,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAAsC;AAChC,MAAA,WAAW,GAAoB,GAAG,CAAvB,WAAX;AAAA,MAAa,MAAM,GAAY,GAAG,CAAf,MAAnB;AAAA,MAAqB,KAAK,GAAK,GAAG,CAAR,KAA1B;AAER,MAAM,QAAQ,GAAG,CAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,GAAjB;;AAEA,OAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,CAAxB,EAA2B,GAAG,EAA9B,EAAkC;AAC9B,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,WAAW,CAAC,cAAZ,CAA2B,MAA3B,GAAoC,CAAzD,EAA4D,CAAC,GAAG,EAAhE,EAAoE,EAAE,CAAtE,EAAyE;AAErE;AACA,UAAI,MAAM,CAAC,oBAAP,CAA4B,CAA5B,EAA+B,CAAC,GAAG,GAAJ,GAAU,CAAzC,MAAgD,CAAC,CAArD,EAAwD;AACpD,QAAA,KAAK,CAAC,CAAD,CAAL,IAAY,QAAQ,CAAC,GAAG,GAAG,CAAP,CAAR,GAAoB,QAAQ,CAAC,GAAD,CAAxC;;AACA,YAAI,GAAG,CAAC,MAAJ,CAAW,aAAf,EAA8B;AAC1B,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,GAAG,CAA1B,EAA6B,EAAE,CAA/B,EAAkC;AAC9B,YAAA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,IAAgB,QAAQ,CAAC,GAAG,GAAG,CAAP,CAAR,GAAiB;AAAA;AAAjC;AACH;AACJ,SAJD,MAIO;AACH,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,GAAG,GAAG,CAA3B,EAA8B,EAAE,CAAhC,EAAmC;AAC/B,YAAA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,IAAgB,QAAQ,CAAC,GAAG,GAAG,CAAP,CAAR,GAAiB;AAAA;AAAjC;AACH;AACJ;AACJ;AACJ;AACJ;AACJ","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n */\r\n/**\r\n * The basic turn pattern is a single H bond of type (i, i + n).\r\n * We assign an n-turn at residue i if there is an H bond from CO(i) to NH(i + n),\r\n * i.e., “n-turn(i)=: Hbond(i, i + n), n = 3, 4, 5.”\r\n *\r\n * Type: T\r\n */\r\nexport function assignTurns(ctx) {\r\n    var proteinInfo = ctx.proteinInfo, hbonds = ctx.hbonds, flags = ctx.flags;\r\n    var turnFlag = [1024 /* T3S */, 2048 /* T4S */, 4096 /* T5S */, 128 /* T3 */, 256 /* T4 */, 512 /* T5 */];\r\n    for (var idx = 0; idx < 3; idx++) {\r\n        for (var i = 0, il = proteinInfo.residueIndices.length - 1; i < il; ++i) {\r\n            // check if hbond exists\r\n            if (hbonds.getDirectedEdgeIndex(i, i + idx + 3) !== -1) {\r\n                flags[i] |= turnFlag[idx + 3] | turnFlag[idx];\r\n                if (ctx.params.oldDefinition) {\r\n                    for (var k = 1; k < idx + 3; ++k) {\r\n                        flags[i + k] |= turnFlag[idx + 3] | 64 /* T */;\r\n                    }\r\n                }\r\n                else {\r\n                    for (var k = 0; k <= idx + 3; ++k) {\r\n                        flags[i + k] |= turnFlag[idx + 3] | 64 /* T */;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=turns.js.map"]},"metadata":{},"sourceType":"module"}