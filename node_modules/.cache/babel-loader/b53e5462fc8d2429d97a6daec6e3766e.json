{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../../mol-data/db';\nimport { UUID } from '../../../mol-util/uuid';\nimport { Model } from '../../../mol-model/structure/model/model';\nimport { CustomProperties } from '../../../mol-model/custom-property';\nimport { getAtomicHierarchyAndConformation } from './atomic';\nimport { getCoarse, EmptyCoarse } from './coarse';\nimport { getSequence } from './sequence';\nimport { sortAtomSite } from './sort';\nimport { getAtomicRanges } from '../../../mol-model/structure/model/properties/utils/atomic-ranges';\nimport { getProperties } from './properties';\nimport { getEntities } from './entities';\nimport { getModelGroupName } from './util';\nimport { ArrayTrajectory } from '../../../mol-model/structure/trajectory';\nexport function createModels(data, format, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var properties, models, _a, i;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          properties = getProperties(data);\n          if (!(data.ihm_model_list._rowCount > 0)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , readIntegrative(ctx, data, properties, format)];\n\n        case 1:\n          _a = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , readStandard(ctx, data, properties, format)];\n\n        case 3:\n          _a = _b.sent();\n          _b.label = 4;\n\n        case 4:\n          models = _a;\n\n          for (i = 0; i < models.length; i++) {\n            Model.TrajectoryInfo.set(models[i], {\n              index: i,\n              size: models.length\n            });\n          }\n\n          return [2\n          /*return*/\n          , new ArrayTrajectory(models)];\n      }\n    });\n  });\n}\n/** Standard atomic model */\n\nfunction createStandardModel(data, atom_site, sourceIndex, entities, properties, format, previous) {\n  var atomic = getAtomicHierarchyAndConformation(atom_site, sourceIndex, entities, properties.chemicalComponentMap, format, previous);\n  var modelNum = atom_site.pdbx_PDB_model_num.value(0);\n\n  if (previous && atomic.sameAsPrevious) {\n    return __assign(__assign({}, previous), {\n      id: UUID.create22(),\n      modelNum: modelNum,\n      atomicConformation: atomic.conformation,\n      _dynamicPropertyData: Object.create(null)\n    });\n  }\n\n  var coarse = EmptyCoarse;\n  var sequence = getSequence(data, entities, atomic.hierarchy, coarse.hierarchy);\n  var atomicRanges = getAtomicRanges(atomic.hierarchy, entities, atomic.conformation, sequence);\n  var entry = data.entry.id.valueKind(0) === 0\n  /* Present */\n  ? data.entry.id.value(0) : format.name;\n  var label = [];\n  if (entry) label.push(entry);\n  if (data.struct.title.valueKind(0) === 0\n  /* Present */\n  ) label.push(data.struct.title.value(0));\n  return {\n    id: UUID.create22(),\n    entryId: entry,\n    label: label.join(' | '),\n    entry: entry,\n    sourceData: format,\n    modelNum: modelNum,\n    parent: undefined,\n    entities: entities,\n    sequence: sequence,\n    atomicHierarchy: atomic.hierarchy,\n    atomicConformation: atomic.conformation,\n    atomicRanges: atomicRanges,\n    atomicChainOperatorMappinng: atomic.chainOperatorMapping,\n    coarseHierarchy: coarse.hierarchy,\n    coarseConformation: coarse.conformation,\n    properties: properties,\n    customProperties: new CustomProperties(),\n    _staticPropertyData: Object.create(null),\n    _dynamicPropertyData: Object.create(null)\n  };\n}\n/** Integrative model with atomic/coarse parts */\n\n\nfunction createIntegrativeModel(data, ihm, properties, format) {\n  var atomic = getAtomicHierarchyAndConformation(ihm.atom_site, ihm.atom_site_sourceIndex, ihm.entities, properties.chemicalComponentMap, format);\n  var coarse = getCoarse(ihm, properties);\n  var sequence = getSequence(data, ihm.entities, atomic.hierarchy, coarse.hierarchy);\n  var atomicRanges = getAtomicRanges(atomic.hierarchy, ihm.entities, atomic.conformation, sequence);\n  var entry = data.entry.id.valueKind(0) === 0\n  /* Present */\n  ? data.entry.id.value(0) : format.name;\n  var label = [];\n  if (entry) label.push(entry);\n  if (data.struct.title.valueKind(0) === 0\n  /* Present */\n  ) label.push(data.struct.title.value(0));\n  if (ihm.model_name) label.push(ihm.model_name);\n  if (ihm.model_group_name) label.push(ihm.model_group_name);\n  return {\n    id: UUID.create22(),\n    entryId: entry,\n    label: label.join(' | '),\n    entry: entry,\n    sourceData: format,\n    modelNum: ihm.model_id,\n    parent: undefined,\n    entities: ihm.entities,\n    sequence: sequence,\n    atomicHierarchy: atomic.hierarchy,\n    atomicConformation: atomic.conformation,\n    atomicRanges: atomicRanges,\n    atomicChainOperatorMappinng: atomic.chainOperatorMapping,\n    coarseHierarchy: coarse.hierarchy,\n    coarseConformation: coarse.conformation,\n    properties: properties,\n    customProperties: new CustomProperties(),\n    _staticPropertyData: Object.create(null),\n    _dynamicPropertyData: Object.create(null)\n  };\n}\n\nfunction findModelEnd(num, startIndex) {\n  var rowCount = num.rowCount;\n  if (!num.isDefined) return rowCount;\n  var endIndex = startIndex + 1;\n\n  while (endIndex < rowCount && num.areValuesEqual(startIndex, endIndex)) endIndex++;\n\n  return endIndex;\n}\n\nfunction readStandard(ctx, data, properties, format) {\n  return __awaiter(this, void 0, void 0, function () {\n    var models, atomCount, entities, modelStart, modelEnd, _a, atom_site, sourceIndex, model;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          models = [];\n          if (!data.atom_site) return [3\n          /*break*/\n          , 3];\n          atomCount = data.atom_site.id.rowCount;\n          entities = getEntities(data, properties);\n          modelStart = 0;\n          _b.label = 1;\n\n        case 1:\n          if (!(modelStart < atomCount)) return [3\n          /*break*/\n          , 3];\n          modelEnd = findModelEnd(data.atom_site.pdbx_PDB_model_num, modelStart);\n          return [4\n          /*yield*/\n          , sortAtomSite(ctx, data.atom_site, modelStart, modelEnd)];\n\n        case 2:\n          _a = _b.sent(), atom_site = _a.atom_site, sourceIndex = _a.sourceIndex;\n          model = createStandardModel(data, atom_site, sourceIndex, entities, properties, format, models.length > 0 ? models[models.length - 1] : void 0);\n          models.push(model);\n          modelStart = modelEnd;\n          return [3\n          /*break*/\n          , 1];\n\n        case 3:\n          return [2\n          /*return*/\n          , models];\n      }\n    });\n  });\n}\n\nfunction splitTable(table, col) {\n  var ret = new Map();\n  var rowCount = table._rowCount;\n  var modelStart = 0;\n\n  while (modelStart < rowCount) {\n    var modelEnd = findModelEnd(col, modelStart);\n    var id = col.value(modelStart);\n    ret.set(id, {\n      table: Table.window(table, table._schema, modelStart, modelEnd),\n      start: modelStart,\n      end: modelEnd\n    });\n    modelStart = modelEnd;\n  }\n\n  return ret;\n}\n\nfunction readIntegrative(ctx, data, properties, format) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entities, atom_sites_modelColumn, atom_sites, sphere_sites, gauss_sites, models, _a, model_id, model_name, i, id, atom_site, atom_site_sourceIndex, e, _b, sorted, sourceIndex, ihm, model;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          entities = getEntities(data, properties);\n          atom_sites_modelColumn = data.atom_site.ihm_model_id.isDefined ? data.atom_site.ihm_model_id : data.atom_site.pdbx_PDB_model_num;\n          atom_sites = splitTable(data.atom_site, atom_sites_modelColumn);\n          sphere_sites = splitTable(data.ihm_sphere_obj_site, data.ihm_sphere_obj_site.model_id);\n          gauss_sites = splitTable(data.ihm_gaussian_obj_site, data.ihm_gaussian_obj_site.model_id);\n          models = [];\n          if (!data.ihm_model_list) return [3\n          /*break*/\n          , 6];\n          _a = data.ihm_model_list, model_id = _a.model_id, model_name = _a.model_name;\n          i = 0;\n          _c.label = 1;\n\n        case 1:\n          if (!(i < data.ihm_model_list._rowCount)) return [3\n          /*break*/\n          , 6];\n          id = model_id.value(i);\n          atom_site = void 0, atom_site_sourceIndex = void 0;\n          if (!atom_sites.has(id)) return [3\n          /*break*/\n          , 3];\n          e = atom_sites.get(id);\n          return [4\n          /*yield*/\n          , sortAtomSite(ctx, data.atom_site, e.start, e.end)];\n\n        case 2:\n          _b = _c.sent(), sorted = _b.atom_site, sourceIndex = _b.sourceIndex;\n          atom_site = sorted;\n          atom_site_sourceIndex = sourceIndex;\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          atom_site = Table.window(data.atom_site, data.atom_site._schema, 0, 0);\n          atom_site_sourceIndex = Column.ofIntArray([]);\n          _c.label = 4;\n\n        case 4:\n          ihm = {\n            model_id: id,\n            model_name: model_name.value(i),\n            model_group_name: getModelGroupName(id, data),\n            entities: entities,\n            atom_site: atom_site,\n            atom_site_sourceIndex: atom_site_sourceIndex,\n            ihm_sphere_obj_site: sphere_sites.has(id) ? sphere_sites.get(id).table : Table.window(data.ihm_sphere_obj_site, data.ihm_sphere_obj_site._schema, 0, 0),\n            ihm_gaussian_obj_site: gauss_sites.has(id) ? gauss_sites.get(id).table : Table.window(data.ihm_gaussian_obj_site, data.ihm_gaussian_obj_site._schema, 0, 0)\n          };\n          model = createIntegrativeModel(data, ihm, properties, format);\n          models.push(model);\n          _c.label = 5;\n\n        case 5:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 6:\n          return [2\n          /*return*/\n          , models];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../../mol-data/db';\r\nimport { UUID } from '../../../mol-util/uuid';\r\nimport { Model } from '../../../mol-model/structure/model/model';\r\nimport { CustomProperties } from '../../../mol-model/custom-property';\r\nimport { getAtomicHierarchyAndConformation } from './atomic';\r\nimport { getCoarse, EmptyCoarse } from './coarse';\r\nimport { getSequence } from './sequence';\r\nimport { sortAtomSite } from './sort';\r\nimport { getAtomicRanges } from '../../../mol-model/structure/model/properties/utils/atomic-ranges';\r\nimport { getProperties } from './properties';\r\nimport { getEntities } from './entities';\r\nimport { getModelGroupName } from './util';\r\nimport { ArrayTrajectory } from '../../../mol-model/structure/trajectory';\r\nexport function createModels(data, format, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var properties, models, _a, i;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    properties = getProperties(data);\r\n                    if (!(data.ihm_model_list._rowCount > 0)) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, readIntegrative(ctx, data, properties, format)];\r\n                case 1:\r\n                    _a = _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2: return [4 /*yield*/, readStandard(ctx, data, properties, format)];\r\n                case 3:\r\n                    _a = _b.sent();\r\n                    _b.label = 4;\r\n                case 4:\r\n                    models = _a;\r\n                    for (i = 0; i < models.length; i++) {\r\n                        Model.TrajectoryInfo.set(models[i], { index: i, size: models.length });\r\n                    }\r\n                    return [2 /*return*/, new ArrayTrajectory(models)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Standard atomic model */\r\nfunction createStandardModel(data, atom_site, sourceIndex, entities, properties, format, previous) {\r\n    var atomic = getAtomicHierarchyAndConformation(atom_site, sourceIndex, entities, properties.chemicalComponentMap, format, previous);\r\n    var modelNum = atom_site.pdbx_PDB_model_num.value(0);\r\n    if (previous && atomic.sameAsPrevious) {\r\n        return __assign(__assign({}, previous), { id: UUID.create22(), modelNum: modelNum, atomicConformation: atomic.conformation, _dynamicPropertyData: Object.create(null) });\r\n    }\r\n    var coarse = EmptyCoarse;\r\n    var sequence = getSequence(data, entities, atomic.hierarchy, coarse.hierarchy);\r\n    var atomicRanges = getAtomicRanges(atomic.hierarchy, entities, atomic.conformation, sequence);\r\n    var entry = data.entry.id.valueKind(0) === 0 /* Present */\r\n        ? data.entry.id.value(0) : format.name;\r\n    var label = [];\r\n    if (entry)\r\n        label.push(entry);\r\n    if (data.struct.title.valueKind(0) === 0 /* Present */)\r\n        label.push(data.struct.title.value(0));\r\n    return {\r\n        id: UUID.create22(),\r\n        entryId: entry,\r\n        label: label.join(' | '),\r\n        entry: entry,\r\n        sourceData: format,\r\n        modelNum: modelNum,\r\n        parent: undefined,\r\n        entities: entities,\r\n        sequence: sequence,\r\n        atomicHierarchy: atomic.hierarchy,\r\n        atomicConformation: atomic.conformation,\r\n        atomicRanges: atomicRanges,\r\n        atomicChainOperatorMappinng: atomic.chainOperatorMapping,\r\n        coarseHierarchy: coarse.hierarchy,\r\n        coarseConformation: coarse.conformation,\r\n        properties: properties,\r\n        customProperties: new CustomProperties(),\r\n        _staticPropertyData: Object.create(null),\r\n        _dynamicPropertyData: Object.create(null)\r\n    };\r\n}\r\n/** Integrative model with atomic/coarse parts */\r\nfunction createIntegrativeModel(data, ihm, properties, format) {\r\n    var atomic = getAtomicHierarchyAndConformation(ihm.atom_site, ihm.atom_site_sourceIndex, ihm.entities, properties.chemicalComponentMap, format);\r\n    var coarse = getCoarse(ihm, properties);\r\n    var sequence = getSequence(data, ihm.entities, atomic.hierarchy, coarse.hierarchy);\r\n    var atomicRanges = getAtomicRanges(atomic.hierarchy, ihm.entities, atomic.conformation, sequence);\r\n    var entry = data.entry.id.valueKind(0) === 0 /* Present */\r\n        ? data.entry.id.value(0) : format.name;\r\n    var label = [];\r\n    if (entry)\r\n        label.push(entry);\r\n    if (data.struct.title.valueKind(0) === 0 /* Present */)\r\n        label.push(data.struct.title.value(0));\r\n    if (ihm.model_name)\r\n        label.push(ihm.model_name);\r\n    if (ihm.model_group_name)\r\n        label.push(ihm.model_group_name);\r\n    return {\r\n        id: UUID.create22(),\r\n        entryId: entry,\r\n        label: label.join(' | '),\r\n        entry: entry,\r\n        sourceData: format,\r\n        modelNum: ihm.model_id,\r\n        parent: undefined,\r\n        entities: ihm.entities,\r\n        sequence: sequence,\r\n        atomicHierarchy: atomic.hierarchy,\r\n        atomicConformation: atomic.conformation,\r\n        atomicRanges: atomicRanges,\r\n        atomicChainOperatorMappinng: atomic.chainOperatorMapping,\r\n        coarseHierarchy: coarse.hierarchy,\r\n        coarseConformation: coarse.conformation,\r\n        properties: properties,\r\n        customProperties: new CustomProperties(),\r\n        _staticPropertyData: Object.create(null),\r\n        _dynamicPropertyData: Object.create(null)\r\n    };\r\n}\r\nfunction findModelEnd(num, startIndex) {\r\n    var rowCount = num.rowCount;\r\n    if (!num.isDefined)\r\n        return rowCount;\r\n    var endIndex = startIndex + 1;\r\n    while (endIndex < rowCount && num.areValuesEqual(startIndex, endIndex))\r\n        endIndex++;\r\n    return endIndex;\r\n}\r\nfunction readStandard(ctx, data, properties, format) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var models, atomCount, entities, modelStart, modelEnd, _a, atom_site, sourceIndex, model;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    models = [];\r\n                    if (!data.atom_site) return [3 /*break*/, 3];\r\n                    atomCount = data.atom_site.id.rowCount;\r\n                    entities = getEntities(data, properties);\r\n                    modelStart = 0;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    if (!(modelStart < atomCount)) return [3 /*break*/, 3];\r\n                    modelEnd = findModelEnd(data.atom_site.pdbx_PDB_model_num, modelStart);\r\n                    return [4 /*yield*/, sortAtomSite(ctx, data.atom_site, modelStart, modelEnd)];\r\n                case 2:\r\n                    _a = _b.sent(), atom_site = _a.atom_site, sourceIndex = _a.sourceIndex;\r\n                    model = createStandardModel(data, atom_site, sourceIndex, entities, properties, format, models.length > 0 ? models[models.length - 1] : void 0);\r\n                    models.push(model);\r\n                    modelStart = modelEnd;\r\n                    return [3 /*break*/, 1];\r\n                case 3: return [2 /*return*/, models];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction splitTable(table, col) {\r\n    var ret = new Map();\r\n    var rowCount = table._rowCount;\r\n    var modelStart = 0;\r\n    while (modelStart < rowCount) {\r\n        var modelEnd = findModelEnd(col, modelStart);\r\n        var id = col.value(modelStart);\r\n        ret.set(id, {\r\n            table: Table.window(table, table._schema, modelStart, modelEnd),\r\n            start: modelStart,\r\n            end: modelEnd\r\n        });\r\n        modelStart = modelEnd;\r\n    }\r\n    return ret;\r\n}\r\nfunction readIntegrative(ctx, data, properties, format) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var entities, atom_sites_modelColumn, atom_sites, sphere_sites, gauss_sites, models, _a, model_id, model_name, i, id, atom_site, atom_site_sourceIndex, e, _b, sorted, sourceIndex, ihm, model;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    entities = getEntities(data, properties);\r\n                    atom_sites_modelColumn = data.atom_site.ihm_model_id.isDefined\r\n                        ? data.atom_site.ihm_model_id : data.atom_site.pdbx_PDB_model_num;\r\n                    atom_sites = splitTable(data.atom_site, atom_sites_modelColumn);\r\n                    sphere_sites = splitTable(data.ihm_sphere_obj_site, data.ihm_sphere_obj_site.model_id);\r\n                    gauss_sites = splitTable(data.ihm_gaussian_obj_site, data.ihm_gaussian_obj_site.model_id);\r\n                    models = [];\r\n                    if (!data.ihm_model_list) return [3 /*break*/, 6];\r\n                    _a = data.ihm_model_list, model_id = _a.model_id, model_name = _a.model_name;\r\n                    i = 0;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(i < data.ihm_model_list._rowCount)) return [3 /*break*/, 6];\r\n                    id = model_id.value(i);\r\n                    atom_site = void 0, atom_site_sourceIndex = void 0;\r\n                    if (!atom_sites.has(id)) return [3 /*break*/, 3];\r\n                    e = atom_sites.get(id);\r\n                    return [4 /*yield*/, sortAtomSite(ctx, data.atom_site, e.start, e.end)];\r\n                case 2:\r\n                    _b = _c.sent(), sorted = _b.atom_site, sourceIndex = _b.sourceIndex;\r\n                    atom_site = sorted;\r\n                    atom_site_sourceIndex = sourceIndex;\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    atom_site = Table.window(data.atom_site, data.atom_site._schema, 0, 0);\r\n                    atom_site_sourceIndex = Column.ofIntArray([]);\r\n                    _c.label = 4;\r\n                case 4:\r\n                    ihm = {\r\n                        model_id: id,\r\n                        model_name: model_name.value(i),\r\n                        model_group_name: getModelGroupName(id, data),\r\n                        entities: entities,\r\n                        atom_site: atom_site,\r\n                        atom_site_sourceIndex: atom_site_sourceIndex,\r\n                        ihm_sphere_obj_site: sphere_sites.has(id) ? sphere_sites.get(id).table : Table.window(data.ihm_sphere_obj_site, data.ihm_sphere_obj_site._schema, 0, 0),\r\n                        ihm_gaussian_obj_site: gauss_sites.has(id) ? gauss_sites.get(id).table : Table.window(data.ihm_gaussian_obj_site, data.ihm_gaussian_obj_site._schema, 0, 0)\r\n                    };\r\n                    model = createIntegrativeModel(data, ihm, properties, format);\r\n                    models.push(model);\r\n                    _c.label = 5;\r\n                case 5:\r\n                    i++;\r\n                    return [3 /*break*/, 1];\r\n                case 6: return [2 /*return*/, models];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}