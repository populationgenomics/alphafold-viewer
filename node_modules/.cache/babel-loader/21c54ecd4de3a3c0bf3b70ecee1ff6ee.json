{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { arrayEqual, UUID } from '../../../mol-util';\nimport { Column } from '../../../mol-data/db'; //\n\nexport { Time };\n\nfunction Time(value, unit) {\n  return {\n    value: value,\n    unit: unit\n  };\n} //\n\n\nexport { Coordinates };\nvar Coordinates;\n\n(function (Coordinates) {\n  function create(frames, deltaTime, timeOffset) {\n    var hasCell = !!frames[0].cell;\n    var hasVelocities = !!frames[0].velocities;\n    var hasForces = !!frames[0].forces;\n    return {\n      id: UUID.create22(),\n      frames: frames,\n      hasCell: hasCell,\n      hasVelocities: hasVelocities,\n      hasForces: hasForces,\n      deltaTime: deltaTime,\n      timeOffset: timeOffset\n    };\n  }\n\n  Coordinates.create = create;\n  /**\r\n   * Only use ordering if it's not identity.\r\n   */\n\n  function getAtomicConformation(frame, atomId, ordering) {\n    var x = frame.x,\n        y = frame.y,\n        z = frame.z;\n\n    if (frame.xyzOrdering.frozen) {\n      if (ordering) {\n        if (frame.xyzOrdering.isIdentity) {\n          // simple list reordering\n          x = getOrderedCoords(x, ordering);\n          y = getOrderedCoords(y, ordering);\n          z = getOrderedCoords(z, ordering);\n        } else if (!arrayEqual(frame.xyzOrdering.index, ordering)) {\n          x = getSourceOrderedCoords(x, frame.xyzOrdering.index, ordering);\n          y = getSourceOrderedCoords(y, frame.xyzOrdering.index, ordering);\n          z = getSourceOrderedCoords(z, frame.xyzOrdering.index, ordering);\n        }\n      } else if (!frame.xyzOrdering.isIdentity) {\n        x = getInvertedCoords(x, frame.xyzOrdering.index);\n        y = getInvertedCoords(y, frame.xyzOrdering.index);\n        z = getInvertedCoords(z, frame.xyzOrdering.index);\n      }\n    } else if (ordering) {\n      if (frame.xyzOrdering.isIdentity) {\n        frame.xyzOrdering.isIdentity = false;\n        frame.xyzOrdering.index = ordering;\n        reorderCoordsInPlace(x, ordering);\n        reorderCoordsInPlace(y, ordering);\n        reorderCoordsInPlace(z, ordering);\n      } else {\n        // is current ordering is not the same as requested?\n        //   => copy the conformations into a new array\n        if (!arrayEqual(frame.xyzOrdering.index, ordering)) {\n          x = getSourceOrderedCoords(x, frame.xyzOrdering.index, ordering);\n          y = getSourceOrderedCoords(y, frame.xyzOrdering.index, ordering);\n          z = getSourceOrderedCoords(z, frame.xyzOrdering.index, ordering);\n        }\n      }\n    } // once the conformation has been accessed at least once, freeze it.\n    //   => any other request to the frame with different ordering will result in a copy.\n\n\n    frame.xyzOrdering.frozen = true;\n    return {\n      id: UUID.create22(),\n      atomId: atomId,\n      occupancy: Column.ofConst(1, frame.elementCount, Column.Schema.int),\n      B_iso_or_equiv: Column.ofConst(0, frame.elementCount, Column.Schema.float),\n      xyzDefined: true,\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n\n  Coordinates.getAtomicConformation = getAtomicConformation;\n  var _reorderBuffer = [0.123];\n\n  function reorderCoordsInPlace(xs, index) {\n    var buffer = _reorderBuffer;\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      buffer[i] = xs[index[i]];\n    }\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      xs[i] = buffer[i];\n    }\n  }\n\n  function getSourceOrderedCoords(xs, srcIndex, index) {\n    var ret = new Float32Array(xs.length);\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      ret[i] = xs[srcIndex[index[i]]];\n    }\n\n    return ret;\n  }\n\n  function getOrderedCoords(xs, index) {\n    var ret = new Float32Array(xs.length);\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      ret[i] = xs[index[i]];\n    }\n\n    return ret;\n  }\n\n  function getInvertedCoords(xs, index) {\n    var ret = new Float32Array(xs.length);\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      ret[index[i]] = xs[i];\n    }\n\n    return ret;\n  }\n})(Coordinates || (Coordinates = {}));","map":{"version":3,"sources":["../../../../src/mol-model/structure/coordinates/coordinates.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { arrayEqual, UUID } from '../../../mol-util';\r\nimport { Column } from '../../../mol-data/db';\r\n//\r\nexport { Time };\r\nfunction Time(value, unit) {\r\n    return { value: value, unit: unit };\r\n}\r\n//\r\nexport { Coordinates };\r\nvar Coordinates;\r\n(function (Coordinates) {\r\n    function create(frames, deltaTime, timeOffset) {\r\n        var hasCell = !!frames[0].cell;\r\n        var hasVelocities = !!frames[0].velocities;\r\n        var hasForces = !!frames[0].forces;\r\n        return {\r\n            id: UUID.create22(),\r\n            frames: frames,\r\n            hasCell: hasCell,\r\n            hasVelocities: hasVelocities,\r\n            hasForces: hasForces,\r\n            deltaTime: deltaTime,\r\n            timeOffset: timeOffset,\r\n        };\r\n    }\r\n    Coordinates.create = create;\r\n    /**\r\n     * Only use ordering if it's not identity.\r\n     */\r\n    function getAtomicConformation(frame, atomId, ordering) {\r\n        var x = frame.x, y = frame.y, z = frame.z;\r\n        if (frame.xyzOrdering.frozen) {\r\n            if (ordering) {\r\n                if (frame.xyzOrdering.isIdentity) {\r\n                    // simple list reordering\r\n                    x = getOrderedCoords(x, ordering);\r\n                    y = getOrderedCoords(y, ordering);\r\n                    z = getOrderedCoords(z, ordering);\r\n                }\r\n                else if (!arrayEqual(frame.xyzOrdering.index, ordering)) {\r\n                    x = getSourceOrderedCoords(x, frame.xyzOrdering.index, ordering);\r\n                    y = getSourceOrderedCoords(y, frame.xyzOrdering.index, ordering);\r\n                    z = getSourceOrderedCoords(z, frame.xyzOrdering.index, ordering);\r\n                }\r\n            }\r\n            else if (!frame.xyzOrdering.isIdentity) {\r\n                x = getInvertedCoords(x, frame.xyzOrdering.index);\r\n                y = getInvertedCoords(y, frame.xyzOrdering.index);\r\n                z = getInvertedCoords(z, frame.xyzOrdering.index);\r\n            }\r\n        }\r\n        else if (ordering) {\r\n            if (frame.xyzOrdering.isIdentity) {\r\n                frame.xyzOrdering.isIdentity = false;\r\n                frame.xyzOrdering.index = ordering;\r\n                reorderCoordsInPlace(x, ordering);\r\n                reorderCoordsInPlace(y, ordering);\r\n                reorderCoordsInPlace(z, ordering);\r\n            }\r\n            else {\r\n                // is current ordering is not the same as requested?\r\n                //   => copy the conformations into a new array\r\n                if (!arrayEqual(frame.xyzOrdering.index, ordering)) {\r\n                    x = getSourceOrderedCoords(x, frame.xyzOrdering.index, ordering);\r\n                    y = getSourceOrderedCoords(y, frame.xyzOrdering.index, ordering);\r\n                    z = getSourceOrderedCoords(z, frame.xyzOrdering.index, ordering);\r\n                }\r\n            }\r\n        }\r\n        // once the conformation has been accessed at least once, freeze it.\r\n        //   => any other request to the frame with different ordering will result in a copy.\r\n        frame.xyzOrdering.frozen = true;\r\n        return {\r\n            id: UUID.create22(),\r\n            atomId: atomId,\r\n            occupancy: Column.ofConst(1, frame.elementCount, Column.Schema.int),\r\n            B_iso_or_equiv: Column.ofConst(0, frame.elementCount, Column.Schema.float),\r\n            xyzDefined: true,\r\n            x: x,\r\n            y: y,\r\n            z: z,\r\n        };\r\n    }\r\n    Coordinates.getAtomicConformation = getAtomicConformation;\r\n    var _reorderBuffer = [0.123];\r\n    function reorderCoordsInPlace(xs, index) {\r\n        var buffer = _reorderBuffer;\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            buffer[i] = xs[index[i]];\r\n        }\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            xs[i] = buffer[i];\r\n        }\r\n    }\r\n    function getSourceOrderedCoords(xs, srcIndex, index) {\r\n        var ret = new Float32Array(xs.length);\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            ret[i] = xs[srcIndex[index[i]]];\r\n        }\r\n        return ret;\r\n    }\r\n    function getOrderedCoords(xs, index) {\r\n        var ret = new Float32Array(xs.length);\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            ret[i] = xs[index[i]];\r\n        }\r\n        return ret;\r\n    }\r\n    function getInvertedCoords(xs, index) {\r\n        var ret = new Float32Array(xs.length);\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            ret[index[i]] = xs[i];\r\n        }\r\n        return ret;\r\n    }\r\n})(Coordinates || (Coordinates = {}));\r\n//# sourceMappingURL=coordinates.js.map"]},"metadata":{},"sourceType":"module"}