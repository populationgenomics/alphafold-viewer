{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\n/**\r\n * on node `process.env.NODE_ENV` is available, in webpack build it is automatically set\r\n * by the DefinePlugin to the webpack `mode` value\r\n */\nvar isProductionMode = function () {\n  try {\n    return process.env.NODE_ENV === 'production';\n  } catch (_a) {\n    return false;\n  }\n}();\n/**\r\n * set to true to enable more comprehensive checks and assertions,\r\n * mostly used in `mol-gl` and in valence-model calculation\r\n */\n\n\nvar isDebugMode = function getIsDebug() {\n  try {\n    var val = process.env.DEBUG;\n    return val === '*' || val === 'molstar';\n  } catch (_a) {\n    return false;\n  }\n}();\n\nexport { isProductionMode, isDebugMode };\nexport function setProductionMode(value) {\n  if (typeof value !== 'undefined') isProductionMode = value;\n}\nexport function setDebugMode(value) {\n  if (typeof value !== 'undefined') isDebugMode = value;\n}","map":{"version":3,"sources":["../../src/mol-util/debug.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH;;;AAGG;AAEH,IAAI,gBAAgB,GAAG,YAAA;AACnB,MAAI;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAhC;AACH,GAFD,CAEE,OAAA,EAAA,EAAM;AACJ,WAAO,KAAP;AACH;AACJ,CANsB,EAAvB;AAQA;;;AAGG;;;AACH,IAAI,WAAW,GAAG,SAAS,UAAT,GAAmB;AACjC,MAAI;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,KAAxB;AACA,WAAO,GAAG,KAAK,GAAR,IAAe,GAAG,KAAK,SAA9B;AACH,GAHD,CAGE,OAAA,EAAA,EAAM;AACJ,WAAO,KAAP;AACH;AACJ,CAPiB,EAAlB;;AASA,SAAS,gBAAT,EAA2B,WAA3B;AAEA,OAAM,SAAU,iBAAV,CAA4B,KAA5B,EAA2C;AAC7C,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC,gBAAgB,GAAG,KAAnB;AACrC;AAED,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAsC;AACxC,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC,WAAW,GAAG,KAAd;AACrC","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n/**\r\n * on node `process.env.NODE_ENV` is available, in webpack build it is automatically set\r\n * by the DefinePlugin to the webpack `mode` value\r\n */\r\nvar isProductionMode = function () {\r\n    try {\r\n        return process.env.NODE_ENV === 'production';\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}();\r\n/**\r\n * set to true to enable more comprehensive checks and assertions,\r\n * mostly used in `mol-gl` and in valence-model calculation\r\n */\r\nvar isDebugMode = function getIsDebug() {\r\n    try {\r\n        var val = process.env.DEBUG;\r\n        return val === '*' || val === 'molstar';\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}();\r\nexport { isProductionMode, isDebugMode };\r\nexport function setProductionMode(value) {\r\n    if (typeof value !== 'undefined')\r\n        isProductionMode = value;\r\n}\r\nexport function setDebugMode(value) {\r\n    if (typeof value !== 'undefined')\r\n        isDebugMode = value;\r\n}\r\n//# sourceMappingURL=debug.js.map"]},"metadata":{},"sourceType":"module"}