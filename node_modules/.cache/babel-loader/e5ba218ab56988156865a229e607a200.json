{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js)\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { encodeMsgPack } from '../../../common/msgpack/encode';\nimport { ArrayEncoder, ArrayEncoding as E, VERSION } from '../../../common/binary-cif';\nimport { Category } from '../encoder';\nimport { getIncludedFields, getCategoryInstanceData } from './util';\nimport { classifyIntArray, classifyFloatArray } from '../../../common/binary-cif/classifier';\n\nvar BinaryEncoder =\n/** @class */\nfunction () {\n  function BinaryEncoder(encoder, encodingProvider, autoClassify) {\n    this.autoClassify = autoClassify;\n    this.dataBlocks = [];\n    this.filter = Category.DefaultFilter;\n    this.formatter = Category.DefaultFormatter;\n    this.isBinary = true;\n    this.binaryEncodingProvider = void 0;\n    this.binaryEncodingProvider = encodingProvider;\n    this.data = {\n      encoder: encoder,\n      version: VERSION,\n      dataBlocks: this.dataBlocks\n    };\n  }\n\n  BinaryEncoder.prototype.setFilter = function (filter) {\n    this.filter = filter || Category.DefaultFilter;\n  };\n\n  BinaryEncoder.prototype.isCategoryIncluded = function (name) {\n    return this.filter.includeCategory(name);\n  };\n\n  BinaryEncoder.prototype.setFormatter = function (formatter) {\n    this.formatter = formatter || Category.DefaultFormatter;\n  };\n\n  BinaryEncoder.prototype.startDataBlock = function (header) {\n    this.dataBlocks.push({\n      header: (header || '').replace(/[ \\n\\t]/g, '').toUpperCase(),\n      categories: []\n    });\n  };\n\n  BinaryEncoder.prototype.writeCategory = function (category, context, options) {\n    if (!this.data) {\n      throw new Error('The writer contents have already been encoded, no more writing.');\n    }\n\n    if (!this.dataBlocks.length) {\n      throw new Error('No data block created.');\n    }\n\n    if (!(options === null || options === void 0 ? void 0 : options.ignoreFilter) && !this.filter.includeCategory(category.name)) return;\n\n    var _a = getCategoryInstanceData(category, context),\n        instance = _a.instance,\n        rowCount = _a.rowCount,\n        source = _a.source;\n\n    if (!rowCount) return;\n    var cat = {\n      name: '_' + category.name,\n      columns: [],\n      rowCount: rowCount\n    };\n    var fields = getIncludedFields(instance);\n\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n      var f = fields_1[_i];\n      if (!this.filter.includeField(category.name, f.name)) continue;\n      var format = this.formatter.getFormat(category.name, f.name);\n      cat.columns.push(encodeField(category.name, f, source, rowCount, format, this.binaryEncodingProvider, this.autoClassify));\n    } // no columns included.\n\n\n    if (!cat.columns.length) return;\n    this.dataBlocks[this.dataBlocks.length - 1].categories.push(cat);\n  };\n\n  BinaryEncoder.prototype.encode = function () {\n    if (this.encodedData) return;\n    this.encodedData = encodeMsgPack(this.data);\n    this.data = null;\n    this.dataBlocks = null;\n  };\n\n  BinaryEncoder.prototype.writeTo = function (writer) {\n    writer.writeBinary(this.encodedData);\n  };\n\n  BinaryEncoder.prototype.getData = function () {\n    this.encode();\n    return this.encodedData;\n  };\n\n  BinaryEncoder.prototype.getSize = function () {\n    return this.encodedData.length;\n  };\n\n  return BinaryEncoder;\n}();\n\nexport { BinaryEncoder };\n\nfunction getArrayCtor(field, format) {\n  if (format && format.typedArray) return format.typedArray;\n  if (field.defaultFormat && field.defaultFormat.typedArray) return field.defaultFormat.typedArray;\n  if (field.type === 0\n  /* Str */\n  ) return Array;\n  if (field.type === 1\n  /* Int */\n  ) return Int32Array;\n  return Float64Array;\n}\n\nfunction getDefaultEncoder(type) {\n  if (type === 0\n  /* Str */\n  ) return ArrayEncoder.by(E.stringArray);\n  return ArrayEncoder.by(E.byteArray);\n}\n\nfunction tryGetEncoder(categoryName, field, format, provider) {\n  if (format && format.encoder) {\n    return format.encoder;\n  } else if (field.defaultFormat && field.defaultFormat.encoder) {\n    return field.defaultFormat.encoder;\n  } else if (provider) {\n    return provider.get(categoryName, field.name);\n  } else {\n    return void 0;\n  }\n}\n\nfunction classify(type, data) {\n  if (type === 0\n  /* Str */\n  ) return ArrayEncoder.by(E.stringArray);\n  if (type === 1\n  /* Int */\n  ) return classifyIntArray(data);\n  return classifyFloatArray(data);\n}\n\nfunction encodeField(categoryName, field, data, totalCount, format, encoderProvider, autoClassify) {\n  var _a = getFieldData(field, getArrayCtor(field, format), totalCount, data),\n      array = _a.array,\n      allPresent = _a.allPresent,\n      mask = _a.mask;\n\n  var encoder = tryGetEncoder(categoryName, field, format, encoderProvider);\n\n  if (!encoder) {\n    if (autoClassify) encoder = classify(field.type, array);else encoder = getDefaultEncoder(field.type);\n  }\n\n  var encoded = encoder.encode(array);\n  var maskData = void 0;\n\n  if (!allPresent) {\n    var maskRLE = ArrayEncoder.by(E.runLength).and(E.byteArray).encode(mask);\n\n    if (maskRLE.data.length < mask.length) {\n      maskData = maskRLE;\n    } else {\n      maskData = ArrayEncoder.by(E.byteArray).encode(mask);\n    }\n  }\n\n  return {\n    name: field.name,\n    data: encoded,\n    mask: maskData\n  };\n}\n\nfunction getFieldData(field, arrayCtor, totalCount, data) {\n  var isStr = field.type === 0\n  /* Str */\n  ;\n  var array = new arrayCtor(totalCount);\n  var mask = new Uint8Array(totalCount);\n  var valueKind = field.valueKind;\n  var getter = field.value;\n  var allPresent = true;\n  var offset = 0;\n\n  for (var _d = 0; _d < data.length; _d++) {\n    var d = data[_d].data;\n\n    var keys = data[_d].keys();\n\n    while (keys.hasNext) {\n      var key = keys.move();\n      var p = valueKind ? valueKind(key, d) : 0\n      /* Present */\n      ;\n\n      if (p !== 0\n      /* Present */\n      ) {\n        mask[offset] = p;\n        if (isStr) array[offset] = '';\n        allPresent = false;\n      } else {\n        mask[offset] = 0\n        /* Present */\n        ;\n        array[offset] = getter(key, d, offset);\n      }\n\n      offset++;\n    }\n  }\n\n  return {\n    array: array,\n    allPresent: allPresent,\n    mask: mask\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-io/writer/cif/encoder/binary.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js)\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { encodeMsgPack } from '../../../common/msgpack/encode';\r\nimport { ArrayEncoder, ArrayEncoding as E, VERSION } from '../../../common/binary-cif';\r\nimport { Category } from '../encoder';\r\nimport { getIncludedFields, getCategoryInstanceData } from './util';\r\nimport { classifyIntArray, classifyFloatArray } from '../../../common/binary-cif/classifier';\r\nvar BinaryEncoder = /** @class */ (function () {\r\n    function BinaryEncoder(encoder, encodingProvider, autoClassify) {\r\n        this.autoClassify = autoClassify;\r\n        this.dataBlocks = [];\r\n        this.filter = Category.DefaultFilter;\r\n        this.formatter = Category.DefaultFormatter;\r\n        this.isBinary = true;\r\n        this.binaryEncodingProvider = void 0;\r\n        this.binaryEncodingProvider = encodingProvider;\r\n        this.data = {\r\n            encoder: encoder,\r\n            version: VERSION,\r\n            dataBlocks: this.dataBlocks\r\n        };\r\n    }\r\n    BinaryEncoder.prototype.setFilter = function (filter) {\r\n        this.filter = filter || Category.DefaultFilter;\r\n    };\r\n    BinaryEncoder.prototype.isCategoryIncluded = function (name) {\r\n        return this.filter.includeCategory(name);\r\n    };\r\n    BinaryEncoder.prototype.setFormatter = function (formatter) {\r\n        this.formatter = formatter || Category.DefaultFormatter;\r\n    };\r\n    BinaryEncoder.prototype.startDataBlock = function (header) {\r\n        this.dataBlocks.push({\r\n            header: (header || '').replace(/[ \\n\\t]/g, '').toUpperCase(),\r\n            categories: []\r\n        });\r\n    };\r\n    BinaryEncoder.prototype.writeCategory = function (category, context, options) {\r\n        if (!this.data) {\r\n            throw new Error('The writer contents have already been encoded, no more writing.');\r\n        }\r\n        if (!this.dataBlocks.length) {\r\n            throw new Error('No data block created.');\r\n        }\r\n        if (!(options === null || options === void 0 ? void 0 : options.ignoreFilter) && !this.filter.includeCategory(category.name))\r\n            return;\r\n        var _a = getCategoryInstanceData(category, context), instance = _a.instance, rowCount = _a.rowCount, source = _a.source;\r\n        if (!rowCount)\r\n            return;\r\n        var cat = { name: '_' + category.name, columns: [], rowCount: rowCount };\r\n        var fields = getIncludedFields(instance);\r\n        for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\r\n            var f = fields_1[_i];\r\n            if (!this.filter.includeField(category.name, f.name))\r\n                continue;\r\n            var format = this.formatter.getFormat(category.name, f.name);\r\n            cat.columns.push(encodeField(category.name, f, source, rowCount, format, this.binaryEncodingProvider, this.autoClassify));\r\n        }\r\n        // no columns included.\r\n        if (!cat.columns.length)\r\n            return;\r\n        this.dataBlocks[this.dataBlocks.length - 1].categories.push(cat);\r\n    };\r\n    BinaryEncoder.prototype.encode = function () {\r\n        if (this.encodedData)\r\n            return;\r\n        this.encodedData = encodeMsgPack(this.data);\r\n        this.data = null;\r\n        this.dataBlocks = null;\r\n    };\r\n    BinaryEncoder.prototype.writeTo = function (writer) {\r\n        writer.writeBinary(this.encodedData);\r\n    };\r\n    BinaryEncoder.prototype.getData = function () {\r\n        this.encode();\r\n        return this.encodedData;\r\n    };\r\n    BinaryEncoder.prototype.getSize = function () {\r\n        return this.encodedData.length;\r\n    };\r\n    return BinaryEncoder;\r\n}());\r\nexport { BinaryEncoder };\r\nfunction getArrayCtor(field, format) {\r\n    if (format && format.typedArray)\r\n        return format.typedArray;\r\n    if (field.defaultFormat && field.defaultFormat.typedArray)\r\n        return field.defaultFormat.typedArray;\r\n    if (field.type === 0 /* Str */)\r\n        return Array;\r\n    if (field.type === 1 /* Int */)\r\n        return Int32Array;\r\n    return Float64Array;\r\n}\r\nfunction getDefaultEncoder(type) {\r\n    if (type === 0 /* Str */)\r\n        return ArrayEncoder.by(E.stringArray);\r\n    return ArrayEncoder.by(E.byteArray);\r\n}\r\nfunction tryGetEncoder(categoryName, field, format, provider) {\r\n    if (format && format.encoder) {\r\n        return format.encoder;\r\n    }\r\n    else if (field.defaultFormat && field.defaultFormat.encoder) {\r\n        return field.defaultFormat.encoder;\r\n    }\r\n    else if (provider) {\r\n        return provider.get(categoryName, field.name);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\nfunction classify(type, data) {\r\n    if (type === 0 /* Str */)\r\n        return ArrayEncoder.by(E.stringArray);\r\n    if (type === 1 /* Int */)\r\n        return classifyIntArray(data);\r\n    return classifyFloatArray(data);\r\n}\r\nfunction encodeField(categoryName, field, data, totalCount, format, encoderProvider, autoClassify) {\r\n    var _a = getFieldData(field, getArrayCtor(field, format), totalCount, data), array = _a.array, allPresent = _a.allPresent, mask = _a.mask;\r\n    var encoder = tryGetEncoder(categoryName, field, format, encoderProvider);\r\n    if (!encoder) {\r\n        if (autoClassify)\r\n            encoder = classify(field.type, array);\r\n        else\r\n            encoder = getDefaultEncoder(field.type);\r\n    }\r\n    var encoded = encoder.encode(array);\r\n    var maskData = void 0;\r\n    if (!allPresent) {\r\n        var maskRLE = ArrayEncoder.by(E.runLength).and(E.byteArray).encode(mask);\r\n        if (maskRLE.data.length < mask.length) {\r\n            maskData = maskRLE;\r\n        }\r\n        else {\r\n            maskData = ArrayEncoder.by(E.byteArray).encode(mask);\r\n        }\r\n    }\r\n    return {\r\n        name: field.name,\r\n        data: encoded,\r\n        mask: maskData\r\n    };\r\n}\r\nfunction getFieldData(field, arrayCtor, totalCount, data) {\r\n    var isStr = field.type === 0 /* Str */;\r\n    var array = new arrayCtor(totalCount);\r\n    var mask = new Uint8Array(totalCount);\r\n    var valueKind = field.valueKind;\r\n    var getter = field.value;\r\n    var allPresent = true;\r\n    var offset = 0;\r\n    for (var _d = 0; _d < data.length; _d++) {\r\n        var d = data[_d].data;\r\n        var keys = data[_d].keys();\r\n        while (keys.hasNext) {\r\n            var key = keys.move();\r\n            var p = valueKind ? valueKind(key, d) : 0 /* Present */;\r\n            if (p !== 0 /* Present */) {\r\n                mask[offset] = p;\r\n                if (isStr)\r\n                    array[offset] = '';\r\n                allPresent = false;\r\n            }\r\n            else {\r\n                mask[offset] = 0 /* Present */;\r\n                array[offset] = getter(key, d, offset);\r\n            }\r\n            offset++;\r\n        }\r\n    }\r\n    return { array: array, allPresent: allPresent, mask: mask };\r\n}\r\n//# sourceMappingURL=binary.js.map"]},"metadata":{},"sourceType":"module"}