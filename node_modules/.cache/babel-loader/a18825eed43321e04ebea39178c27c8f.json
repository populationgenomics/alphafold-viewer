{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Column } from '../db';\n\nvar GroupingImpl =\n/** @class */\nfunction () {\n  function GroupingImpl(getKey) {\n    this.getKey = getKey;\n    this.map = new Map();\n    this.keys = [];\n    this.groups = [];\n  }\n\n  GroupingImpl.prototype.add = function (a) {\n    var key = this.getKey(a);\n\n    if (!!this.map.has(key)) {\n      var group = this.map.get(key);\n      group[group.length] = a;\n    } else {\n      var group = [a];\n      this.map.set(key, group);\n      this.keys[this.keys.length] = key;\n      this.groups[this.groups.length] = group;\n    }\n  };\n\n  GroupingImpl.prototype.getGrouping = function () {\n    return {\n      keys: this.keys,\n      groups: this.groups,\n      map: this.map\n    };\n  };\n\n  return GroupingImpl;\n}();\n\nexport function Grouper(getKey) {\n  return new GroupingImpl(getKey);\n}\nexport function groupBy(values, getKey) {\n  var gs = Grouper(getKey);\n\n  if (Column.is(values)) {\n    var v = values.value;\n\n    for (var i = 0, _i = values.rowCount; i < _i; i++) gs.add(v(i));\n  } else {\n    for (var i = 0, _i = values.length; i < _i; i++) gs.add(values[i]);\n  }\n\n  return gs.getGrouping();\n}","map":{"version":3,"sources":["../../../src/mol-data/util/grouping.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,MAAT,QAAuB,OAAvB;;AAQA,IAAA,YAAA;AAAA;AAAA,YAAA;AAsBI,WAAA,YAAA,CAAoB,MAApB,EAAuC;AAAnB,SAAA,MAAA,GAAA,MAAA;AArBX,SAAA,GAAA,GAAM,IAAI,GAAJ,EAAN;AACA,SAAA,IAAA,GAAY,EAAZ;AACA,SAAA,MAAA,GAAgB,EAAhB;AAmBmC;;AAjB5C,EAAA,YAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,CAAJ,EAAQ;AACJ,QAAM,GAAG,GAAG,KAAK,MAAL,CAAY,CAAZ,CAAZ;;AACA,QAAI,CAAC,CAAC,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAN,EAAyB;AACrB,UAAM,KAAK,GAAG,KAAK,GAAL,CAAS,GAAT,CAAa,GAAb,CAAd;AACA,MAAA,KAAK,CAAC,KAAK,CAAC,MAAP,CAAL,GAAsB,CAAtB;AACH,KAHD,MAGO;AACH,UAAM,KAAK,GAAG,CAAC,CAAD,CAAd;AACA,WAAK,GAAL,CAAS,GAAT,CAAa,GAAb,EAAkB,KAAlB;AACA,WAAK,IAAL,CAAU,KAAK,IAAL,CAAU,MAApB,IAA8B,GAA9B;AACA,WAAK,MAAL,CAAY,KAAK,MAAL,CAAY,MAAxB,IAAkC,KAAlC;AACH;AACJ,GAXD;;AAaA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACI,WAAO;AAAE,MAAA,IAAI,EAAE,KAAK,IAAb;AAAmB,MAAA,MAAM,EAAE,KAAK,MAAhC;AAAwC,MAAA,GAAG,EAAE,KAAK;AAAlD,KAAP;AACH,GAFD;;AAKJ,SAAA,YAAA;AAAC,CAvBD,EAAA;;AAyBA,OAAM,SAAU,OAAV,CAAwB,MAAxB,EAA2C;AAC7C,SAAO,IAAI,YAAJ,CAAuB,MAAvB,CAAP;AACH;AAED,OAAM,SAAU,OAAV,CAAwB,MAAxB,EAA0D,MAA1D,EAA6E;AAC/E,MAAM,EAAE,GAAG,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAI,MAAM,CAAC,EAAP,CAAU,MAAV,CAAJ,EAAuB;AACnB,QAAM,CAAC,GAAG,MAAM,CAAC,KAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,MAAM,CAAC,QAA5B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,CAAC,EAA/C,EAAmD,EAAE,CAAC,GAAH,CAAO,CAAC,CAAC,CAAD,CAAR;AACtD,GAHD,MAGO;AACH,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,MAAM,CAAC,MAA5B,EAAoC,CAAC,GAAG,EAAxC,EAA4C,CAAC,EAA7C,EAAiD,EAAE,CAAC,GAAH,CAAO,MAAM,CAAC,CAAD,CAAb;AACpD;;AACD,SAAO,EAAE,CAAC,WAAH,EAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Column } from '../db';\r\nvar GroupingImpl = /** @class */ (function () {\r\n    function GroupingImpl(getKey) {\r\n        this.getKey = getKey;\r\n        this.map = new Map();\r\n        this.keys = [];\r\n        this.groups = [];\r\n    }\r\n    GroupingImpl.prototype.add = function (a) {\r\n        var key = this.getKey(a);\r\n        if (!!this.map.has(key)) {\r\n            var group = this.map.get(key);\r\n            group[group.length] = a;\r\n        }\r\n        else {\r\n            var group = [a];\r\n            this.map.set(key, group);\r\n            this.keys[this.keys.length] = key;\r\n            this.groups[this.groups.length] = group;\r\n        }\r\n    };\r\n    GroupingImpl.prototype.getGrouping = function () {\r\n        return { keys: this.keys, groups: this.groups, map: this.map };\r\n    };\r\n    return GroupingImpl;\r\n}());\r\nexport function Grouper(getKey) {\r\n    return new GroupingImpl(getKey);\r\n}\r\nexport function groupBy(values, getKey) {\r\n    var gs = Grouper(getKey);\r\n    if (Column.is(values)) {\r\n        var v = values.value;\r\n        for (var i = 0, _i = values.rowCount; i < _i; i++)\r\n            gs.add(v(i));\r\n    }\r\n    else {\r\n        for (var i = 0, _i = values.length; i < _i; i++)\r\n            gs.add(values[i]);\r\n    }\r\n    return gs.getGrouping();\r\n}\r\n//# sourceMappingURL=grouping.js.map"]},"metadata":{},"sourceType":"module"}