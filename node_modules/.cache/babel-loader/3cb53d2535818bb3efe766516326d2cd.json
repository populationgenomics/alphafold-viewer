{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport * as Impl from './impl/sorted-array';\nvar SortedArray;\n\n(function (SortedArray) {\n  SortedArray.Empty = Impl.Empty;\n  SortedArray.ofUnsortedArray = Impl.ofUnsortedArray;\n  SortedArray.ofSingleton = Impl.ofSingleton;\n  SortedArray.ofSortedArray = Impl.ofSortedArray;\n  /** create sorted array [min, max] (it DOES contain the max value) */\n\n  SortedArray.ofRange = Impl.ofRange;\n  /** create sorted array [min, max) (it does NOT contain the max value) */\n\n  SortedArray.ofBounds = function (min, max) {\n    return Impl.ofRange(min, max - 1);\n  };\n\n  SortedArray.is = Impl.is;\n  SortedArray.isRange = Impl.isRange;\n  SortedArray.has = Impl.has;\n  /** Returns the index of `x` in `set` or -1 if not found. */\n\n  SortedArray.indexOf = Impl.indexOf;\n  SortedArray.indexOfInInterval = Impl.indexOfInInterval;\n  SortedArray.indexOfInRange = Impl.indexOfInRange;\n  /** Returns `array[0]` */\n\n  SortedArray.start = Impl.start;\n  /** Returns `array[array.length - 1] + 1` */\n\n  SortedArray.end = Impl.end;\n  SortedArray.min = Impl.min;\n  SortedArray.max = Impl.max;\n  SortedArray.size = Impl.size;\n  SortedArray.hashCode = Impl.hashCode;\n  SortedArray.toString = Impl.toString;\n  SortedArray.areEqual = Impl.areEqual;\n  SortedArray.areIntersecting = Impl.areIntersecting;\n  SortedArray.isSubset = Impl.isSubset;\n  SortedArray.union = Impl.union;\n  SortedArray.intersect = Impl.intersect;\n  SortedArray.subtract = Impl.subtract;\n  SortedArray.findPredecessorIndex = Impl.findPredecessorIndex;\n  SortedArray.findPredecessorIndexInInterval = Impl.findPredecessorIndexInInterval;\n  SortedArray.findRange = Impl.findRange;\n  SortedArray.intersectionSize = Impl.intersectionSize;\n  SortedArray.deduplicate = Impl.deduplicate;\n  /** Returns indices of xs in the array. E.g. indicesOf([10, 11, 12], [10, 12]) ==> [0, 2] */\n\n  SortedArray.indicesOf = Impl.indicesOf;\n})(SortedArray || (SortedArray = {}));\n\nexport { SortedArray };","map":{"version":3,"sources":["../../../src/mol-data/int/sorted-array.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,OAAO,KAAK,IAAZ,MAAsB,qBAAtB;AAGA,IAAU,WAAV;;AAAA,CAAA,UAAU,WAAV,EAAqB;AACJ,EAAA,WAAA,CAAA,KAAA,GAAqB,IAAI,CAAC,KAA1B;AACA,EAAA,WAAA,CAAA,eAAA,GAAwF,IAAI,CAAC,eAA7F;AACA,EAAA,WAAA,CAAA,WAAA,GAAwE,IAAI,CAAC,WAA7E;AACA,EAAA,WAAA,CAAA,aAAA,GAAsF,IAAI,CAAC,aAA3F;AACb;;AACa,EAAA,WAAA,CAAA,OAAA,GAAyE,IAAI,CAAC,OAA9E;AACb;;AACa,EAAA,WAAA,CAAA,QAAA,GAA0E,UAAC,GAAD,EAAM,GAAN,EAAS;AAAK,WAAA,IAAI,CAAC,OAAL,CAAa,GAAb,EAAkB,GAAG,GAArB,CAAA,CAAA;AAAiC,GAAzH;;AACA,EAAA,WAAA,CAAA,EAAA,GAAiE,IAAI,CAAC,EAAtE;AACA,EAAA,WAAA,CAAA,OAAA,GAA4E,IAAI,CAAC,OAAjF;AAEA,EAAA,WAAA,CAAA,GAAA,GAA2E,IAAI,CAAC,GAAhF;AACb;;AACa,EAAA,WAAA,CAAA,OAAA,GAA8E,IAAI,CAAC,OAAnF;AACA,EAAA,WAAA,CAAA,iBAAA,GAA+G,IAAI,CAAC,iBAApH;AACA,EAAA,WAAA,CAAA,cAAA,GAAsH,IAAI,CAAC,cAA3H;AAEb;;AACa,EAAA,WAAA,CAAA,KAAA,GAAiE,IAAI,CAAC,KAAtE;AACb;;AACa,EAAA,WAAA,CAAA,GAAA,GAA+D,IAAI,CAAC,GAApE;AACA,EAAA,WAAA,CAAA,GAAA,GAA+D,IAAI,CAAC,GAApE;AACA,EAAA,WAAA,CAAA,GAAA,GAA+D,IAAI,CAAC,GAApE;AACA,EAAA,WAAA,CAAA,IAAA,GAAqE,IAAI,CAAC,IAA1E;AACA,EAAA,WAAA,CAAA,QAAA,GAAyE,IAAI,CAAC,QAA9E;AACA,EAAA,WAAA,CAAA,QAAA,GAAyE,IAAI,CAAC,QAA9E;AAEA,EAAA,WAAA,CAAA,QAAA,GAAyF,IAAI,CAAC,QAA9F;AACA,EAAA,WAAA,CAAA,eAAA,GAAgG,IAAI,CAAC,eAArG;AACA,EAAA,WAAA,CAAA,QAAA,GAAyF,IAAI,CAAC,QAA9F;AAEA,EAAA,WAAA,CAAA,KAAA,GAA6F,IAAI,CAAC,KAAlG;AACA,EAAA,WAAA,CAAA,SAAA,GAAiG,IAAI,CAAC,SAAtG;AACA,EAAA,WAAA,CAAA,QAAA,GAAgG,IAAI,CAAC,QAArG;AAEA,EAAA,WAAA,CAAA,oBAAA,GAA2F,IAAI,CAAC,oBAAhG;AACA,EAAA,WAAA,CAAA,8BAAA,GAAuH,IAAI,CAAC,8BAA5H;AACA,EAAA,WAAA,CAAA,SAAA,GAA4F,IAAI,CAAC,SAAjG;AACA,EAAA,WAAA,CAAA,gBAAA,GAAgG,IAAI,CAAC,gBAArG;AAEA,EAAA,WAAA,CAAA,WAAA,GAAoF,IAAI,CAAC,WAAzF;AACb;;AACa,EAAA,WAAA,CAAA,SAAA,GAAiI,IAAI,CAAC,SAAtI;AAChB,CA5CD,EAAU,WAAW,KAAX,WAAW,GAAA,EAAA,CAArB;;AAgDA,SAAS,WAAT","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport * as Impl from './impl/sorted-array';\r\nvar SortedArray;\r\n(function (SortedArray) {\r\n    SortedArray.Empty = Impl.Empty;\r\n    SortedArray.ofUnsortedArray = Impl.ofUnsortedArray;\r\n    SortedArray.ofSingleton = Impl.ofSingleton;\r\n    SortedArray.ofSortedArray = Impl.ofSortedArray;\r\n    /** create sorted array [min, max] (it DOES contain the max value) */\r\n    SortedArray.ofRange = Impl.ofRange;\r\n    /** create sorted array [min, max) (it does NOT contain the max value) */\r\n    SortedArray.ofBounds = function (min, max) { return Impl.ofRange(min, max - 1); };\r\n    SortedArray.is = Impl.is;\r\n    SortedArray.isRange = Impl.isRange;\r\n    SortedArray.has = Impl.has;\r\n    /** Returns the index of `x` in `set` or -1 if not found. */\r\n    SortedArray.indexOf = Impl.indexOf;\r\n    SortedArray.indexOfInInterval = Impl.indexOfInInterval;\r\n    SortedArray.indexOfInRange = Impl.indexOfInRange;\r\n    /** Returns `array[0]` */\r\n    SortedArray.start = Impl.start;\r\n    /** Returns `array[array.length - 1] + 1` */\r\n    SortedArray.end = Impl.end;\r\n    SortedArray.min = Impl.min;\r\n    SortedArray.max = Impl.max;\r\n    SortedArray.size = Impl.size;\r\n    SortedArray.hashCode = Impl.hashCode;\r\n    SortedArray.toString = Impl.toString;\r\n    SortedArray.areEqual = Impl.areEqual;\r\n    SortedArray.areIntersecting = Impl.areIntersecting;\r\n    SortedArray.isSubset = Impl.isSubset;\r\n    SortedArray.union = Impl.union;\r\n    SortedArray.intersect = Impl.intersect;\r\n    SortedArray.subtract = Impl.subtract;\r\n    SortedArray.findPredecessorIndex = Impl.findPredecessorIndex;\r\n    SortedArray.findPredecessorIndexInInterval = Impl.findPredecessorIndexInInterval;\r\n    SortedArray.findRange = Impl.findRange;\r\n    SortedArray.intersectionSize = Impl.intersectionSize;\r\n    SortedArray.deduplicate = Impl.deduplicate;\r\n    /** Returns indices of xs in the array. E.g. indicesOf([10, 11, 12], [10, 12]) ==> [0, 2] */\r\n    SortedArray.indicesOf = Impl.indicesOf;\r\n})(SortedArray || (SortedArray = {}));\r\nexport { SortedArray };\r\n//# sourceMappingURL=sorted-array.js.map"]},"metadata":{},"sourceType":"module"}