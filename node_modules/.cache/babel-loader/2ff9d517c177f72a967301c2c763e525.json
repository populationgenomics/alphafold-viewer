{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureElement } from '../../../mol-model/structure';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { eachPolymerElement, getPolymerElementLoci, NucleicShift, PolymerLocationIterator, StandardShift } from './util/polymer';\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsCylindersVisual, UnitsCylindersParams } from '../units-visual';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { isNucleic } from '../../../mol-model/structure/model/types';\nimport { Cylinders } from '../../../mol-geo/geometry/cylinders/cylinders';\nimport { CylindersBuilder } from '../../../mol-geo/geometry/cylinders/cylinders-builder';\nimport { eachPolymerBackboneLink } from './util/polymer/backbone'; // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar v3scale = Vec3.scale;\nvar v3add = Vec3.add;\nvar v3sub = Vec3.sub;\nexport var PolymerBackboneCylinderParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsCylindersParams), {\n  sizeFactor: PD.Numeric(0.3, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  radialSegments: PD.Numeric(16, {\n    min: 2,\n    max: 56,\n    step: 2\n  }, BaseGeometry.CustomQualityParamInfo),\n  tryUseImpostor: PD.Boolean(true)\n});\nexport function PolymerBackboneCylinderVisual(materialId, structure, props, webgl) {\n  return props.tryUseImpostor && webgl && webgl.extensions.fragDepth ? PolymerBackboneCylinderImpostorVisual(materialId) : PolymerBackboneCylinderMeshVisual(materialId);\n}\n\nfunction createPolymerBackboneCylinderImpostor(ctx, unit, structure, theme, props, cylinders) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Cylinders.createEmpty(cylinders);\n  var cylindersCountEstimate = polymerElementCount * 2;\n  var builder = CylindersBuilder.create(cylindersCountEstimate, cylindersCountEstimate / 4, cylinders);\n  var pos = unit.conformation.invariantPosition;\n  var pA = Vec3();\n  var pB = Vec3();\n  var pM = Vec3();\n\n  var add = function (indexA, indexB, groupA, groupB, moleculeType) {\n    pos(indexA, pA);\n    pos(indexB, pB);\n    var isNucleicType = isNucleic(moleculeType);\n    var shift = isNucleicType ? NucleicShift : StandardShift;\n    v3add(pM, pA, v3scale(pM, v3sub(pM, pB, pA), shift));\n    builder.add(pA[0], pA[1], pA[2], pM[0], pM[1], pM[2], 1, false, false, groupA);\n    builder.add(pM[0], pM[1], pM[2], pB[0], pB[1], pB[2], 1, false, false, groupB);\n  };\n\n  eachPolymerBackboneLink(unit, add);\n  var c = builder.getCylinders();\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  c.setBoundingSphere(sphere);\n  return c;\n}\n\nexport function PolymerBackboneCylinderImpostorVisual(materialId) {\n  return UnitsCylindersVisual({\n    defaultProps: PD.getDefaultValues(PolymerBackboneCylinderParams),\n    createGeometry: createPolymerBackboneCylinderImpostor,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {},\n    mustRecreate: function (structureGroup, props, webgl) {\n      return !props.tryUseImpostor || !webgl;\n    }\n  }, materialId);\n}\n\nfunction createPolymerBackboneCylinderMesh(ctx, unit, structure, theme, props, mesh) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Mesh.createEmpty(mesh);\n  var radialSegments = props.radialSegments,\n      sizeFactor = props.sizeFactor;\n  var vertexCountEstimate = radialSegments * 2 * polymerElementCount * 2;\n  var builderState = MeshBuilder.createState(vertexCountEstimate, vertexCountEstimate / 10, mesh);\n  var pos = unit.conformation.invariantPosition;\n  var pA = Vec3();\n  var pB = Vec3();\n  var cylinderProps = {\n    radiusTop: 1,\n    radiusBottom: 1,\n    radialSegments: radialSegments\n  };\n  var centerA = StructureElement.Location.create(structure, unit);\n  var centerB = StructureElement.Location.create(structure, unit);\n\n  var add = function (indexA, indexB, groupA, groupB, moleculeType) {\n    centerA.element = indexA;\n    centerB.element = indexB;\n    pos(centerA.element, pA);\n    pos(centerB.element, pB);\n    var isNucleicType = isNucleic(moleculeType);\n    var shift = isNucleicType ? NucleicShift : StandardShift;\n    cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerA) * sizeFactor;\n    builderState.currentGroup = groupA;\n    addCylinder(builderState, pA, pB, shift, cylinderProps);\n    cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerB) * sizeFactor;\n    builderState.currentGroup = groupB;\n    addCylinder(builderState, pB, pA, 1 - shift, cylinderProps);\n  };\n\n  eachPolymerBackboneLink(unit, add);\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport function PolymerBackboneCylinderMeshVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(PolymerBackboneCylinderParams),\n    createGeometry: createPolymerBackboneCylinderMesh,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.radialSegments !== currentProps.radialSegments;\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return props.tryUseImpostor && !!webgl;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/polymer-backbone-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureElement } from '../../../mol-model/structure';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { eachPolymerElement, getPolymerElementLoci, NucleicShift, PolymerLocationIterator, StandardShift } from './util/polymer';\r\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\r\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsCylindersVisual, UnitsCylindersParams } from '../units-visual';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { isNucleic } from '../../../mol-model/structure/model/types';\r\nimport { Cylinders } from '../../../mol-geo/geometry/cylinders/cylinders';\r\nimport { CylindersBuilder } from '../../../mol-geo/geometry/cylinders/cylinders-builder';\r\nimport { eachPolymerBackboneLink } from './util/polymer/backbone';\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3scale = Vec3.scale;\r\nvar v3add = Vec3.add;\r\nvar v3sub = Vec3.sub;\r\nexport var PolymerBackboneCylinderParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsCylindersParams), { sizeFactor: PD.Numeric(0.3, { min: 0, max: 10, step: 0.01 }), radialSegments: PD.Numeric(16, { min: 2, max: 56, step: 2 }, BaseGeometry.CustomQualityParamInfo), tryUseImpostor: PD.Boolean(true) });\r\nexport function PolymerBackboneCylinderVisual(materialId, structure, props, webgl) {\r\n    return props.tryUseImpostor && webgl && webgl.extensions.fragDepth\r\n        ? PolymerBackboneCylinderImpostorVisual(materialId)\r\n        : PolymerBackboneCylinderMeshVisual(materialId);\r\n}\r\nfunction createPolymerBackboneCylinderImpostor(ctx, unit, structure, theme, props, cylinders) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Cylinders.createEmpty(cylinders);\r\n    var cylindersCountEstimate = polymerElementCount * 2;\r\n    var builder = CylindersBuilder.create(cylindersCountEstimate, cylindersCountEstimate / 4, cylinders);\r\n    var pos = unit.conformation.invariantPosition;\r\n    var pA = Vec3();\r\n    var pB = Vec3();\r\n    var pM = Vec3();\r\n    var add = function (indexA, indexB, groupA, groupB, moleculeType) {\r\n        pos(indexA, pA);\r\n        pos(indexB, pB);\r\n        var isNucleicType = isNucleic(moleculeType);\r\n        var shift = isNucleicType ? NucleicShift : StandardShift;\r\n        v3add(pM, pA, v3scale(pM, v3sub(pM, pB, pA), shift));\r\n        builder.add(pA[0], pA[1], pA[2], pM[0], pM[1], pM[2], 1, false, false, groupA);\r\n        builder.add(pM[0], pM[1], pM[2], pB[0], pB[1], pB[2], 1, false, false, groupB);\r\n    };\r\n    eachPolymerBackboneLink(unit, add);\r\n    var c = builder.getCylinders();\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    c.setBoundingSphere(sphere);\r\n    return c;\r\n}\r\nexport function PolymerBackboneCylinderImpostorVisual(materialId) {\r\n    return UnitsCylindersVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerBackboneCylinderParams),\r\n        createGeometry: createPolymerBackboneCylinderImpostor,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) { },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return !props.tryUseImpostor || !webgl;\r\n        }\r\n    }, materialId);\r\n}\r\nfunction createPolymerBackboneCylinderMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var radialSegments = props.radialSegments, sizeFactor = props.sizeFactor;\r\n    var vertexCountEstimate = radialSegments * 2 * polymerElementCount * 2;\r\n    var builderState = MeshBuilder.createState(vertexCountEstimate, vertexCountEstimate / 10, mesh);\r\n    var pos = unit.conformation.invariantPosition;\r\n    var pA = Vec3();\r\n    var pB = Vec3();\r\n    var cylinderProps = { radiusTop: 1, radiusBottom: 1, radialSegments: radialSegments };\r\n    var centerA = StructureElement.Location.create(structure, unit);\r\n    var centerB = StructureElement.Location.create(structure, unit);\r\n    var add = function (indexA, indexB, groupA, groupB, moleculeType) {\r\n        centerA.element = indexA;\r\n        centerB.element = indexB;\r\n        pos(centerA.element, pA);\r\n        pos(centerB.element, pB);\r\n        var isNucleicType = isNucleic(moleculeType);\r\n        var shift = isNucleicType ? NucleicShift : StandardShift;\r\n        cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerA) * sizeFactor;\r\n        builderState.currentGroup = groupA;\r\n        addCylinder(builderState, pA, pB, shift, cylinderProps);\r\n        cylinderProps.radiusTop = cylinderProps.radiusBottom = theme.size.size(centerB) * sizeFactor;\r\n        builderState.currentGroup = groupB;\r\n        addCylinder(builderState, pB, pA, 1 - shift, cylinderProps);\r\n    };\r\n    eachPolymerBackboneLink(unit, add);\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport function PolymerBackboneCylinderMeshVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerBackboneCylinderParams),\r\n        createGeometry: createPolymerBackboneCylinderMesh,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return props.tryUseImpostor && !!webgl;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=polymer-backbone-cylinder.js.map"]},"metadata":{},"sourceType":"module"}