{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../mol-data/db';\nimport { getElementFromAtomicNumber } from '../../mol-model/structure/model/types';\nimport { Task } from '../../mol-task';\nimport { createModels } from './basic/parser';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\n\nfunction getModels(cube, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var atoms, MOL, A, type_symbol, seq_id, atom_site, entityBuilder, componentBuilder, basics;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          atoms = cube.atoms;\n          MOL = Column.ofConst('MOL', cube.atoms.count, Column.Schema.str);\n          A = Column.ofConst('A', cube.atoms.count, Column.Schema.str);\n          type_symbol = Column.ofArray({\n            array: Column.mapToArray(atoms.number, function (n) {\n              return getElementFromAtomicNumber(n);\n            }),\n            schema: Column.Schema.Aliased(Column.Schema.str)\n          });\n          seq_id = Column.ofConst(1, atoms.count, Column.Schema.int);\n          atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n            auth_asym_id: A,\n            auth_atom_id: type_symbol,\n            auth_comp_id: MOL,\n            auth_seq_id: seq_id,\n            Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\n            Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\n            Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\n            id: Column.range(0, atoms.count - 1),\n            label_asym_id: A,\n            label_atom_id: type_symbol,\n            label_comp_id: MOL,\n            label_seq_id: seq_id,\n            label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\n            occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\n            type_symbol: type_symbol,\n            pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int)\n          }, atoms.count);\n          entityBuilder = new EntityBuilder();\n          entityBuilder.setNames([['MOL', 'Unknown Entity']]);\n          entityBuilder.getEntityId('MOL', 0\n          /* Unknown */\n          , 'A');\n          componentBuilder = new ComponentBuilder(seq_id, type_symbol);\n          componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\n          componentBuilder.add('MOL', 0);\n          basics = createBasic({\n            entity: entityBuilder.getEntityTable(),\n            chem_comp: componentBuilder.getChemCompTable(),\n            atom_site: atom_site\n          });\n          return [4\n          /*yield*/\n          , createModels(basics, MolFormat.create(cube), ctx)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\n\nvar MolFormat;\n\n(function (MolFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'cube';\n  }\n\n  MolFormat.is = is;\n\n  function create(cube) {\n    return {\n      kind: 'cube',\n      name: cube.header.comment1,\n      data: cube\n    };\n  }\n\n  MolFormat.create = create;\n})(MolFormat || (MolFormat = {}));\n\nexport function trajectoryFromCube(cube) {\n  return Task.create('Parse Cube', function (ctx) {\n    return getModels(cube, ctx);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/cube.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { getElementFromAtomicNumber } from '../../mol-model/structure/model/types';\r\nimport { Task } from '../../mol-task';\r\nimport { createModels } from './basic/parser';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nfunction getModels(cube, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var atoms, MOL, A, type_symbol, seq_id, atom_site, entityBuilder, componentBuilder, basics;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    atoms = cube.atoms;\r\n                    MOL = Column.ofConst('MOL', cube.atoms.count, Column.Schema.str);\r\n                    A = Column.ofConst('A', cube.atoms.count, Column.Schema.str);\r\n                    type_symbol = Column.ofArray({ array: Column.mapToArray(atoms.number, function (n) { return getElementFromAtomicNumber(n); }), schema: Column.Schema.Aliased(Column.Schema.str) });\r\n                    seq_id = Column.ofConst(1, atoms.count, Column.Schema.int);\r\n                    atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n                        auth_asym_id: A,\r\n                        auth_atom_id: type_symbol,\r\n                        auth_comp_id: MOL,\r\n                        auth_seq_id: seq_id,\r\n                        Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\r\n                        Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\r\n                        Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\r\n                        id: Column.range(0, atoms.count - 1),\r\n                        label_asym_id: A,\r\n                        label_atom_id: type_symbol,\r\n                        label_comp_id: MOL,\r\n                        label_seq_id: seq_id,\r\n                        label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\r\n                        occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\r\n                        type_symbol: type_symbol,\r\n                        pdbx_PDB_model_num: Column.ofConst(1, atoms.count, Column.Schema.int),\r\n                    }, atoms.count);\r\n                    entityBuilder = new EntityBuilder();\r\n                    entityBuilder.setNames([['MOL', 'Unknown Entity']]);\r\n                    entityBuilder.getEntityId('MOL', 0 /* Unknown */, 'A');\r\n                    componentBuilder = new ComponentBuilder(seq_id, type_symbol);\r\n                    componentBuilder.setNames([['MOL', 'Unknown Molecule']]);\r\n                    componentBuilder.add('MOL', 0);\r\n                    basics = createBasic({\r\n                        entity: entityBuilder.getEntityTable(),\r\n                        chem_comp: componentBuilder.getChemCompTable(),\r\n                        atom_site: atom_site\r\n                    });\r\n                    return [4 /*yield*/, createModels(basics, MolFormat.create(cube), ctx)];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\r\nvar MolFormat;\r\n(function (MolFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'cube';\r\n    }\r\n    MolFormat.is = is;\r\n    function create(cube) {\r\n        return { kind: 'cube', name: cube.header.comment1, data: cube };\r\n    }\r\n    MolFormat.create = create;\r\n})(MolFormat || (MolFormat = {}));\r\nexport function trajectoryFromCube(cube) {\r\n    return Task.create('Parse Cube', function (ctx) { return getModels(cube, ctx); });\r\n}\r\n//# sourceMappingURL=cube.js.map"]},"metadata":{},"sourceType":"module"}