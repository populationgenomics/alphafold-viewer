{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorScale } from '../../../mol-util/color';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { CrossLinkRestraintProvider, CrossLinkRestraint } from './property';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = 'Colors cross-links by the deviation of the observed distance versus the modeled distance (e.g. modeled / `ihm_cross_link_restraint.distance_threshold`).';\nexport var CrossLinkColorThemeParams = {\n  domain: PD.Interval([0.5, 1.5], {\n    step: 0.01\n  }),\n  list: PD.ColorList('red-grey', {\n    presetKind: 'scale'\n  })\n};\nexport function getCrossLinkColorThemeParams(ctx) {\n  return CrossLinkColorThemeParams; // TODO return copy\n}\nexport function CrossLinkColorTheme(ctx, props) {\n  var color;\n  var scale = undefined;\n  var crossLinkRestraints = ctx.structure && CrossLinkRestraintProvider.get(ctx.structure).value;\n\n  if (crossLinkRestraints) {\n    scale = ColorScale.create({\n      domain: props.domain,\n      listOrName: props.list.colors\n    });\n    var scaleColor_1 = scale.color;\n\n    color = function (location) {\n      if (CrossLinkRestraint.isLocation(location)) {\n        var pair = crossLinkRestraints.pairs[location.element];\n\n        if (pair) {\n          return scaleColor_1(CrossLinkRestraint.distance(pair) / pair.distanceThreshold);\n        }\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: CrossLinkColorTheme,\n    granularity: 'group',\n    color: color,\n    props: props,\n    description: Description,\n    legend: scale ? scale.legend : undefined\n  };\n}\nexport var CrossLinkColorThemeProvider = {\n  name: 'cross-link',\n  label: 'Cross Link',\n  category: \"Miscellaneous\"\n  /* Misc */\n  ,\n  factory: CrossLinkColorTheme,\n  getParams: getCrossLinkColorThemeParams,\n  defaultValues: PD.getDefaultValues(CrossLinkColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && CrossLinkRestraint.isApplicable(ctx.structure);\n  },\n  ensureCustomProperties: {\n    attach: function (ctx, data) {\n      return data.structure ? CrossLinkRestraintProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve();\n    },\n    detach: function (data) {\n      return data.structure && CrossLinkRestraintProvider.ref(data.structure, false);\n    }\n  }\n};","map":{"version":3,"sources":["../../../../src/mol-model-props/integrative/cross-link-restraint/color.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorScale } from '../../../mol-util/color';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { CrossLinkRestraintProvider, CrossLinkRestraint } from './property';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = 'Colors cross-links by the deviation of the observed distance versus the modeled distance (e.g. modeled / `ihm_cross_link_restraint.distance_threshold`).';\r\nexport var CrossLinkColorThemeParams = {\r\n    domain: PD.Interval([0.5, 1.5], { step: 0.01 }),\r\n    list: PD.ColorList('red-grey', { presetKind: 'scale' }),\r\n};\r\nexport function getCrossLinkColorThemeParams(ctx) {\r\n    return CrossLinkColorThemeParams; // TODO return copy\r\n}\r\nexport function CrossLinkColorTheme(ctx, props) {\r\n    var color;\r\n    var scale = undefined;\r\n    var crossLinkRestraints = ctx.structure && CrossLinkRestraintProvider.get(ctx.structure).value;\r\n    if (crossLinkRestraints) {\r\n        scale = ColorScale.create({\r\n            domain: props.domain,\r\n            listOrName: props.list.colors\r\n        });\r\n        var scaleColor_1 = scale.color;\r\n        color = function (location) {\r\n            if (CrossLinkRestraint.isLocation(location)) {\r\n                var pair = crossLinkRestraints.pairs[location.element];\r\n                if (pair) {\r\n                    return scaleColor_1(CrossLinkRestraint.distance(pair) / pair.distanceThreshold);\r\n                }\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: CrossLinkColorTheme,\r\n        granularity: 'group',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: scale ? scale.legend : undefined\r\n    };\r\n}\r\nexport var CrossLinkColorThemeProvider = {\r\n    name: 'cross-link',\r\n    label: 'Cross Link',\r\n    category: \"Miscellaneous\" /* Misc */,\r\n    factory: CrossLinkColorTheme,\r\n    getParams: getCrossLinkColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(CrossLinkColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && CrossLinkRestraint.isApplicable(ctx.structure); },\r\n    ensureCustomProperties: {\r\n        attach: function (ctx, data) { return data.structure ? CrossLinkRestraintProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve(); },\r\n        detach: function (data) { return data.structure && CrossLinkRestraintProvider.ref(data.structure, false); }\r\n    }\r\n};\r\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}