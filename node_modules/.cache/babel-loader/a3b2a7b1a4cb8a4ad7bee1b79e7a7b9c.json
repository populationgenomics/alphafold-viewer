{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { AtomNumber } from './measures';\nexport var ElementNames = {\n  H: 'Hydrogen',\n  HE: 'Helium',\n  LI: 'Lithium',\n  BE: 'Beryllium',\n  B: 'Boron',\n  C: 'Carbon',\n  N: 'Nitrogen',\n  O: 'Oxygen',\n  F: 'Fluorine',\n  NE: 'Neon',\n  NA: 'Sodium',\n  MG: 'Magnesium',\n  AL: 'Aluminum',\n  SI: 'Silicon',\n  P: 'Phosphorus',\n  S: 'Sulfur',\n  CL: 'Chlorine',\n  AR: 'Argon',\n  K: 'Potassium',\n  CA: 'Calcium',\n  SC: 'Scandium',\n  TI: 'Titanium',\n  V: 'Vanadium',\n  CR: 'Chromium',\n  MN: 'Manganese',\n  FE: 'Iron',\n  CO: 'Cobalt',\n  NI: 'Nickel',\n  CU: 'Copper',\n  ZN: 'Zinc',\n  GA: 'Gallium',\n  GE: 'Germanium',\n  AS: 'Arsenic',\n  SE: 'Selenium',\n  BR: 'Bromine',\n  KR: 'Krypton',\n  RB: 'Rubidium',\n  SR: 'Strontium',\n  Y: 'Yttrium',\n  ZR: 'Zirconium',\n  NB: 'Niobium',\n  MO: 'Molybdenum',\n  TC: 'Technetium',\n  RU: 'Ruthenium',\n  RH: 'Rhodium',\n  PD: 'Palladium',\n  AG: 'Silver',\n  CD: 'Cadmium',\n  IN: 'Indium',\n  SN: 'Tin',\n  SB: 'Antimony',\n  TE: 'Tellurium',\n  I: 'Iodine',\n  XE: 'Xenon',\n  CS: 'Cesium',\n  BA: 'Barium',\n  LA: 'Lanthanum',\n  CE: 'Cerium',\n  PR: 'Praseodymium',\n  ND: 'Neodymium',\n  PM: 'Promethium',\n  SM: 'Samarium',\n  EU: 'Europium',\n  GD: 'Gadolinium',\n  TB: 'Terbium',\n  DY: 'Dysprosium',\n  HO: 'Holmium',\n  ER: 'Erbium',\n  TM: 'Thulium',\n  YB: 'Ytterbium',\n  LU: 'Lutetium',\n  HF: 'Hafnium',\n  TA: 'Tantalum',\n  W: 'Wolfram',\n  RE: 'Rhenium',\n  OS: 'Osmium',\n  IR: 'Iridium',\n  PT: 'Platinum',\n  AU: 'Gold',\n  HG: 'Mercury',\n  TL: 'Thallium',\n  PB: 'Lead',\n  BI: 'Bismuth',\n  PO: 'Polonium',\n  AT: 'Astatine',\n  RN: 'Radon',\n  FR: 'Francium',\n  RA: 'Radium',\n  AC: 'Actinium',\n  TH: 'Thorium',\n  PA: 'Protactinium',\n  U: 'Uranium',\n  NP: 'Neptunium',\n  PU: 'Plutonium',\n  AM: 'Americium',\n  CM: 'Curium',\n  BK: 'Berkelium',\n  CF: 'Californium',\n  ES: 'Einsteinium',\n  FM: 'Fermium',\n  MD: 'Mendelevium',\n  NO: 'Nobelium',\n  LR: 'Lawrencium',\n  RF: 'Rutherfordium',\n  DB: 'Dubnium',\n  SG: 'Seaborgium',\n  BH: 'Bohrium',\n  HS: 'Hassium',\n  MT: 'Meitnerium',\n  DS: 'Darmstadtium',\n  RG: 'Roentgenium',\n  CN: 'Copernicium',\n  NH: 'Nihonium',\n  FL: 'Flerovium',\n  MC: 'Moscovium',\n  LV: 'Livermorium',\n  TS: 'Tennessine',\n  OG: 'Oganesson'\n};\nexport var AlkaliMetals = new Set(['LI', 'NA', 'K', 'RB', 'CS', 'FR']);\nexport function isAlkaliMetal(element) {\n  return AlkaliMetals.has(element);\n}\nexport var AlkalineEarthMetals = new Set(['BE', 'MG', 'CA', 'SR', 'BA', 'RA']);\nexport function isAlkalineEarthMetal(element) {\n  return AlkalineEarthMetals.has(element);\n}\nexport var PolyatomicNonmetals = new Set(['C', 'P', 'S', 'SE']);\nexport function isPolyatomicNonmetal(element) {\n  return PolyatomicNonmetals.has(element);\n}\nexport var DiatomicNonmetals = new Set(['H', 'N', 'O', 'F', 'CL', 'BR', 'I']);\nexport function isDiatomicNonmetal(element) {\n  return DiatomicNonmetals.has(element);\n}\nexport var NobleGases = new Set(['HE', 'NE', 'AR', 'KR', 'XE', 'RN']);\nexport function isNobleGas(element) {\n  return NobleGases.has(element);\n}\nexport var PostTransitionMetals = new Set(['ZN', 'GA', 'CD', 'IN', 'SN', 'HG', 'TI', 'PB', 'BI', 'PO', 'CN']);\nexport function isPostTransitionMetal(element) {\n  return PostTransitionMetals.has(element);\n}\nexport var Metalloids = new Set(['B', 'SI', 'GE', 'AS', 'SB', 'TE', 'AT']);\nexport function isMetalloid(element) {\n  return Metalloids.has(element);\n}\nexport var Halogens = new Set(['F', 'CL', 'BR', 'I', 'AT']);\nexport function isHalogen(element) {\n  return Halogens.has(element);\n}\nexport function isTransitionMetal(element) {\n  var no = AtomNumber(element);\n  return no >= 21 && no <= 29 || no >= 39 && no <= 47 || no >= 72 && no <= 79 || no >= 104 && no <= 108;\n}\nexport function isLanthanide(element) {\n  var no = AtomNumber(element);\n  return no >= 57 && no <= 71;\n}\nexport function isActinide(element) {\n  var no = AtomNumber(element);\n  return no >= 89 && no <= 103;\n}\nexport function isMetal(element) {\n  return isAlkaliMetal(element) || isAlkalineEarthMetal(element) || isLanthanide(element) || isActinide(element) || isTransitionMetal(element) || isPostTransitionMetal(element);\n}\nexport function isNonmetal(element) {\n  return isDiatomicNonmetal(element) || isPolyatomicNonmetal(element) || isNobleGas(element);\n}","map":{"version":3,"sources":["../../../../../../src/mol-model/structure/model/properties/atomic/types.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { AtomNumber } from './measures';\r\nexport var ElementNames = {\r\n    H: 'Hydrogen', HE: 'Helium', LI: 'Lithium', BE: 'Beryllium', B: 'Boron', C: 'Carbon', N: 'Nitrogen', O: 'Oxygen', F: 'Fluorine', NE: 'Neon', NA: 'Sodium', MG: 'Magnesium', AL: 'Aluminum', SI: 'Silicon', P: 'Phosphorus', S: 'Sulfur', CL: 'Chlorine', AR: 'Argon', K: 'Potassium', CA: 'Calcium', SC: 'Scandium', TI: 'Titanium', V: 'Vanadium', CR: 'Chromium', MN: 'Manganese', FE: 'Iron', CO: 'Cobalt', NI: 'Nickel', CU: 'Copper', ZN: 'Zinc', GA: 'Gallium', GE: 'Germanium', AS: 'Arsenic', SE: 'Selenium', BR: 'Bromine', KR: 'Krypton', RB: 'Rubidium', SR: 'Strontium', Y: 'Yttrium', ZR: 'Zirconium', NB: 'Niobium', MO: 'Molybdenum', TC: 'Technetium', RU: 'Ruthenium', RH: 'Rhodium', PD: 'Palladium', AG: 'Silver', CD: 'Cadmium', IN: 'Indium', SN: 'Tin', SB: 'Antimony', TE: 'Tellurium', I: 'Iodine', XE: 'Xenon', CS: 'Cesium', BA: 'Barium', LA: 'Lanthanum', CE: 'Cerium', PR: 'Praseodymium', ND: 'Neodymium', PM: 'Promethium', SM: 'Samarium', EU: 'Europium', GD: 'Gadolinium', TB: 'Terbium', DY: 'Dysprosium', HO: 'Holmium', ER: 'Erbium', TM: 'Thulium', YB: 'Ytterbium', LU: 'Lutetium', HF: 'Hafnium', TA: 'Tantalum', W: 'Wolfram', RE: 'Rhenium', OS: 'Osmium', IR: 'Iridium', PT: 'Platinum', AU: 'Gold', HG: 'Mercury', TL: 'Thallium', PB: 'Lead', BI: 'Bismuth', PO: 'Polonium', AT: 'Astatine', RN: 'Radon', FR: 'Francium', RA: 'Radium', AC: 'Actinium', TH: 'Thorium', PA: 'Protactinium', U: 'Uranium', NP: 'Neptunium', PU: 'Plutonium', AM: 'Americium', CM: 'Curium', BK: 'Berkelium', CF: 'Californium', ES: 'Einsteinium', FM: 'Fermium', MD: 'Mendelevium', NO: 'Nobelium', LR: 'Lawrencium', RF: 'Rutherfordium', DB: 'Dubnium', SG: 'Seaborgium', BH: 'Bohrium', HS: 'Hassium', MT: 'Meitnerium', DS: 'Darmstadtium', RG: 'Roentgenium', CN: 'Copernicium', NH: 'Nihonium', FL: 'Flerovium', MC: 'Moscovium', LV: 'Livermorium', TS: 'Tennessine', OG: 'Oganesson'\r\n};\r\nexport var AlkaliMetals = new Set(['LI', 'NA', 'K', 'RB', 'CS', 'FR']);\r\nexport function isAlkaliMetal(element) { return AlkaliMetals.has(element); }\r\nexport var AlkalineEarthMetals = new Set(['BE', 'MG', 'CA', 'SR', 'BA', 'RA']);\r\nexport function isAlkalineEarthMetal(element) { return AlkalineEarthMetals.has(element); }\r\nexport var PolyatomicNonmetals = new Set(['C', 'P', 'S', 'SE']);\r\nexport function isPolyatomicNonmetal(element) { return PolyatomicNonmetals.has(element); }\r\nexport var DiatomicNonmetals = new Set(['H', 'N', 'O', 'F', 'CL', 'BR', 'I']);\r\nexport function isDiatomicNonmetal(element) { return DiatomicNonmetals.has(element); }\r\nexport var NobleGases = new Set(['HE', 'NE', 'AR', 'KR', 'XE', 'RN']);\r\nexport function isNobleGas(element) { return NobleGases.has(element); }\r\nexport var PostTransitionMetals = new Set(['ZN', 'GA', 'CD', 'IN', 'SN', 'HG', 'TI', 'PB', 'BI', 'PO', 'CN']);\r\nexport function isPostTransitionMetal(element) { return PostTransitionMetals.has(element); }\r\nexport var Metalloids = new Set(['B', 'SI', 'GE', 'AS', 'SB', 'TE', 'AT']);\r\nexport function isMetalloid(element) { return Metalloids.has(element); }\r\nexport var Halogens = new Set(['F', 'CL', 'BR', 'I', 'AT']);\r\nexport function isHalogen(element) { return Halogens.has(element); }\r\nexport function isTransitionMetal(element) {\r\n    var no = AtomNumber(element);\r\n    return ((no >= 21 && no <= 29) ||\r\n        (no >= 39 && no <= 47) ||\r\n        (no >= 72 && no <= 79) ||\r\n        (no >= 104 && no <= 108));\r\n}\r\nexport function isLanthanide(element) {\r\n    var no = AtomNumber(element);\r\n    return no >= 57 && no <= 71;\r\n}\r\nexport function isActinide(element) {\r\n    var no = AtomNumber(element);\r\n    return no >= 89 && no <= 103;\r\n}\r\nexport function isMetal(element) {\r\n    return (isAlkaliMetal(element) ||\r\n        isAlkalineEarthMetal(element) ||\r\n        isLanthanide(element) ||\r\n        isActinide(element) ||\r\n        isTransitionMetal(element) ||\r\n        isPostTransitionMetal(element));\r\n}\r\nexport function isNonmetal(element) {\r\n    return (isDiatomicNonmetal(element) ||\r\n        isPolyatomicNonmetal(element) ||\r\n        isNobleGas(element));\r\n}\r\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}