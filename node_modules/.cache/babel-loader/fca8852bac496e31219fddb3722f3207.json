{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { ValueCell } from '../../mol-util';\nimport { createTextureImage } from '../../mol-gl/renderable/util';\nimport { Color } from '../../mol-util/color';\nimport { Vec2, Vec3, Vec4 } from '../../mol-math/linear-algebra';\nimport { NullLocation } from '../../mol-model/location';\nimport { Geometry } from './geometry';\nimport { createNullTexture } from '../../mol-gl/webgl/texture';\nexport function createColors(locationIt, positionIt, colorTheme, colorData) {\n  var data = _createColors(locationIt, positionIt, colorTheme, colorData);\n\n  if (colorTheme.palette) {\n    ValueCell.updateIfChanged(data.dUsePalette, true);\n    updatePaletteTexture(colorTheme.palette, data.tPalette);\n  } else {\n    ValueCell.updateIfChanged(data.dUsePalette, false);\n  }\n\n  return data;\n}\n\nfunction _createColors(locationIt, positionIt, colorTheme, colorData) {\n  switch (Geometry.getGranularity(locationIt, colorTheme.granularity)) {\n    case 'uniform':\n      return createUniformColor(locationIt, colorTheme.color, colorData);\n\n    case 'instance':\n      return createInstanceColor(locationIt, colorTheme.color, colorData);\n\n    case 'group':\n      return createGroupColor(locationIt, colorTheme.color, colorData);\n\n    case 'groupInstance':\n      return createGroupInstanceColor(locationIt, colorTheme.color, colorData);\n\n    case 'vertex':\n      return createVertexColor(positionIt, colorTheme.color, colorData);\n\n    case 'vertexInstance':\n      return createVertexInstanceColor(positionIt, colorTheme.color, colorData);\n\n    case 'volume':\n      return createGridColor(colorTheme.grid, 'volume', colorData);\n\n    case 'volumeInstance':\n      return createGridColor(colorTheme.grid, 'volumeInstance', colorData);\n  }\n}\n\nfunction updatePaletteTexture(palette, cell) {\n  var isSynced = true;\n  var texture = cell.ref.value;\n\n  if (palette.colors.length !== texture.width || texture.filter !== palette.filter) {\n    isSynced = false;\n  } else {\n    var data = texture.array;\n    var o_1 = 0;\n\n    for (var _i = 0, _a = palette.colors; _i < _a.length; _i++) {\n      var c = _a[_i];\n\n      var _b = Color.toRgb(c),\n          r = _b[0],\n          g = _b[1],\n          b = _b[2];\n\n      if (data[o_1++] !== r || data[o_1++] !== g || data[o_1++] !== b) {\n        isSynced = false;\n        break;\n      }\n    }\n  }\n\n  if (isSynced) return;\n  var array = new Uint8Array(palette.colors.length * 3);\n  var o = 0;\n\n  for (var _c = 0, _d = palette.colors; _c < _d.length; _c++) {\n    var c = _d[_c];\n\n    var _e = Color.toRgb(c),\n        r = _e[0],\n        g = _e[1],\n        b = _e[2];\n\n    array[o++] = r;\n    array[o++] = g;\n    array[o++] = b;\n  }\n\n  ValueCell.update(cell, {\n    array: array,\n    height: 1,\n    width: palette.colors.length,\n    filter: palette.filter\n  });\n} //\n\n\nexport function createValueColor(value, colorData) {\n  if (colorData) {\n    ValueCell.update(colorData.uColor, Color.toVec3Normalized(colorData.uColor.ref.value, value));\n    ValueCell.updateIfChanged(colorData.dColorType, 'uniform');\n    return colorData;\n  } else {\n    return {\n      uColor: ValueCell.create(Color.toVec3Normalized(Vec3(), value)),\n      tColor: ValueCell.create({\n        array: new Uint8Array(3),\n        width: 1,\n        height: 1\n      }),\n      tColorGrid: ValueCell.create(createNullTexture()),\n      tPalette: ValueCell.create({\n        array: new Uint8Array(3),\n        width: 1,\n        height: 1\n      }),\n      uColorTexDim: ValueCell.create(Vec2.create(1, 1)),\n      uColorGridDim: ValueCell.create(Vec3.create(1, 1, 1)),\n      uColorGridTransform: ValueCell.create(Vec4.create(0, 0, 0, 1)),\n      dColorType: ValueCell.create('uniform'),\n      dUsePalette: ValueCell.create(false)\n    };\n  }\n}\n/** Creates color uniform */\n\nfunction createUniformColor(locationIt, color, colorData) {\n  return createValueColor(color(NullLocation, false), colorData);\n} //\n\n\nexport function createTextureColor(colors, type, colorData) {\n  if (colorData) {\n    ValueCell.update(colorData.tColor, colors);\n    ValueCell.update(colorData.uColorTexDim, Vec2.create(colors.width, colors.height));\n    ValueCell.updateIfChanged(colorData.dColorType, type);\n    return colorData;\n  } else {\n    return {\n      uColor: ValueCell.create(Vec3()),\n      tColor: ValueCell.create(colors),\n      tColorGrid: ValueCell.create(createNullTexture()),\n      tPalette: ValueCell.create({\n        array: new Uint8Array(3),\n        width: 1,\n        height: 1\n      }),\n      uColorTexDim: ValueCell.create(Vec2.create(colors.width, colors.height)),\n      uColorGridDim: ValueCell.create(Vec3.create(1, 1, 1)),\n      uColorGridTransform: ValueCell.create(Vec4.create(0, 0, 0, 1)),\n      dColorType: ValueCell.create(type),\n      dUsePalette: ValueCell.create(false)\n    };\n  }\n}\n/** Creates color texture with color for each instance */\n\nfunction createInstanceColor(locationIt, color, colorData) {\n  var instanceCount = locationIt.instanceCount;\n  var colors = createTextureImage(Math.max(1, instanceCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\n  locationIt.reset();\n\n  while (locationIt.hasNext) {\n    var _a = locationIt.move(),\n        location_1 = _a.location,\n        isSecondary = _a.isSecondary,\n        instanceIndex = _a.instanceIndex;\n\n    Color.toArray(color(location_1, isSecondary), colors.array, instanceIndex * 3);\n    locationIt.skipInstance();\n  }\n\n  return createTextureColor(colors, 'instance', colorData);\n}\n/** Creates color texture with color for each group (i.e. shared across instances) */\n\n\nfunction createGroupColor(locationIt, color, colorData) {\n  var groupCount = locationIt.groupCount;\n  var colors = createTextureImage(Math.max(1, groupCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\n  locationIt.reset();\n\n  while (locationIt.hasNext && !locationIt.isNextNewInstance) {\n    var _a = locationIt.move(),\n        location_2 = _a.location,\n        isSecondary = _a.isSecondary,\n        groupIndex = _a.groupIndex;\n\n    Color.toArray(color(location_2, isSecondary), colors.array, groupIndex * 3);\n  }\n\n  return createTextureColor(colors, 'group', colorData);\n}\n/** Creates color texture with color for each group in each instance */\n\n\nfunction createGroupInstanceColor(locationIt, color, colorData) {\n  var groupCount = locationIt.groupCount,\n      instanceCount = locationIt.instanceCount;\n  var count = instanceCount * groupCount;\n  var colors = createTextureImage(Math.max(1, count), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\n  locationIt.reset();\n\n  while (locationIt.hasNext) {\n    var _a = locationIt.move(),\n        location_3 = _a.location,\n        isSecondary = _a.isSecondary,\n        index = _a.index;\n\n    Color.toArray(color(location_3, isSecondary), colors.array, index * 3);\n  }\n\n  return createTextureColor(colors, 'groupInstance', colorData);\n}\n/** Creates color texture with color for each vertex (i.e. shared across instances) */\n\n\nfunction createVertexColor(locationIt, color, colorData) {\n  var groupCount = locationIt.groupCount,\n      stride = locationIt.stride;\n  var colors = createTextureImage(Math.max(1, groupCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\n  locationIt.reset();\n  locationIt.voidInstances();\n\n  while (locationIt.hasNext && !locationIt.isNextNewInstance) {\n    var _a = locationIt.move(),\n        location_4 = _a.location,\n        isSecondary = _a.isSecondary,\n        groupIndex = _a.groupIndex;\n\n    var c = color(location_4, isSecondary);\n\n    for (var i = 0; i < stride; ++i) {\n      Color.toArray(c, colors.array, (groupIndex + i) * 3);\n    }\n  }\n\n  return createTextureColor(colors, 'vertex', colorData);\n}\n/** Creates color texture with color for each vertex in each instance */\n\n\nfunction createVertexInstanceColor(locationIt, color, colorData) {\n  var groupCount = locationIt.groupCount,\n      instanceCount = locationIt.instanceCount,\n      stride = locationIt.stride;\n  var count = instanceCount * groupCount;\n  var colors = createTextureImage(Math.max(1, count), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\n  locationIt.reset();\n\n  while (locationIt.hasNext) {\n    var _a = locationIt.move(),\n        location_5 = _a.location,\n        isSecondary = _a.isSecondary,\n        index = _a.index;\n\n    var c = color(location_5, isSecondary);\n\n    for (var i = 0; i < stride; ++i) {\n      Color.toArray(c, colors.array, (index + i) * 3);\n    }\n  }\n\n  return createTextureColor(colors, 'vertexInstance', colorData);\n}\n\nexport function createGridColor(grid, type, colorData) {\n  var colors = grid.colors,\n      dimension = grid.dimension,\n      transform = grid.transform;\n  var width = colors.getWidth();\n  var height = colors.getHeight();\n\n  if (colorData) {\n    ValueCell.update(colorData.tColorGrid, colors);\n    ValueCell.update(colorData.uColorTexDim, Vec2.create(width, height));\n    ValueCell.update(colorData.uColorGridDim, Vec3.clone(dimension));\n    ValueCell.update(colorData.uColorGridTransform, Vec4.clone(transform));\n    ValueCell.updateIfChanged(colorData.dColorType, type);\n    return colorData;\n  } else {\n    return {\n      uColor: ValueCell.create(Vec3()),\n      tColor: ValueCell.create({\n        array: new Uint8Array(3),\n        width: 1,\n        height: 1\n      }),\n      tColorGrid: ValueCell.create(colors),\n      tPalette: ValueCell.create({\n        array: new Uint8Array(3),\n        width: 1,\n        height: 1\n      }),\n      uColorTexDim: ValueCell.create(Vec2.create(width, height)),\n      uColorGridDim: ValueCell.create(Vec3.clone(dimension)),\n      uColorGridTransform: ValueCell.create(Vec4.clone(transform)),\n      dColorType: ValueCell.create(type),\n      dUsePalette: ValueCell.create(false)\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/mol-geo/geometry/color-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { ValueCell } from '../../mol-util';\r\nimport { createTextureImage } from '../../mol-gl/renderable/util';\r\nimport { Color } from '../../mol-util/color';\r\nimport { Vec2, Vec3, Vec4 } from '../../mol-math/linear-algebra';\r\nimport { NullLocation } from '../../mol-model/location';\r\nimport { Geometry } from './geometry';\r\nimport { createNullTexture } from '../../mol-gl/webgl/texture';\r\nexport function createColors(locationIt, positionIt, colorTheme, colorData) {\r\n    var data = _createColors(locationIt, positionIt, colorTheme, colorData);\r\n    if (colorTheme.palette) {\r\n        ValueCell.updateIfChanged(data.dUsePalette, true);\r\n        updatePaletteTexture(colorTheme.palette, data.tPalette);\r\n    }\r\n    else {\r\n        ValueCell.updateIfChanged(data.dUsePalette, false);\r\n    }\r\n    return data;\r\n}\r\nfunction _createColors(locationIt, positionIt, colorTheme, colorData) {\r\n    switch (Geometry.getGranularity(locationIt, colorTheme.granularity)) {\r\n        case 'uniform': return createUniformColor(locationIt, colorTheme.color, colorData);\r\n        case 'instance': return createInstanceColor(locationIt, colorTheme.color, colorData);\r\n        case 'group': return createGroupColor(locationIt, colorTheme.color, colorData);\r\n        case 'groupInstance': return createGroupInstanceColor(locationIt, colorTheme.color, colorData);\r\n        case 'vertex': return createVertexColor(positionIt, colorTheme.color, colorData);\r\n        case 'vertexInstance': return createVertexInstanceColor(positionIt, colorTheme.color, colorData);\r\n        case 'volume': return createGridColor(colorTheme.grid, 'volume', colorData);\r\n        case 'volumeInstance': return createGridColor(colorTheme.grid, 'volumeInstance', colorData);\r\n    }\r\n}\r\nfunction updatePaletteTexture(palette, cell) {\r\n    var isSynced = true;\r\n    var texture = cell.ref.value;\r\n    if (palette.colors.length !== texture.width || texture.filter !== palette.filter) {\r\n        isSynced = false;\r\n    }\r\n    else {\r\n        var data = texture.array;\r\n        var o_1 = 0;\r\n        for (var _i = 0, _a = palette.colors; _i < _a.length; _i++) {\r\n            var c = _a[_i];\r\n            var _b = Color.toRgb(c), r = _b[0], g = _b[1], b = _b[2];\r\n            if (data[o_1++] !== r || data[o_1++] !== g || data[o_1++] !== b) {\r\n                isSynced = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (isSynced)\r\n        return;\r\n    var array = new Uint8Array(palette.colors.length * 3);\r\n    var o = 0;\r\n    for (var _c = 0, _d = palette.colors; _c < _d.length; _c++) {\r\n        var c = _d[_c];\r\n        var _e = Color.toRgb(c), r = _e[0], g = _e[1], b = _e[2];\r\n        array[o++] = r;\r\n        array[o++] = g;\r\n        array[o++] = b;\r\n    }\r\n    ValueCell.update(cell, { array: array, height: 1, width: palette.colors.length, filter: palette.filter });\r\n}\r\n//\r\nexport function createValueColor(value, colorData) {\r\n    if (colorData) {\r\n        ValueCell.update(colorData.uColor, Color.toVec3Normalized(colorData.uColor.ref.value, value));\r\n        ValueCell.updateIfChanged(colorData.dColorType, 'uniform');\r\n        return colorData;\r\n    }\r\n    else {\r\n        return {\r\n            uColor: ValueCell.create(Color.toVec3Normalized(Vec3(), value)),\r\n            tColor: ValueCell.create({ array: new Uint8Array(3), width: 1, height: 1 }),\r\n            tColorGrid: ValueCell.create(createNullTexture()),\r\n            tPalette: ValueCell.create({ array: new Uint8Array(3), width: 1, height: 1 }),\r\n            uColorTexDim: ValueCell.create(Vec2.create(1, 1)),\r\n            uColorGridDim: ValueCell.create(Vec3.create(1, 1, 1)),\r\n            uColorGridTransform: ValueCell.create(Vec4.create(0, 0, 0, 1)),\r\n            dColorType: ValueCell.create('uniform'),\r\n            dUsePalette: ValueCell.create(false),\r\n        };\r\n    }\r\n}\r\n/** Creates color uniform */\r\nfunction createUniformColor(locationIt, color, colorData) {\r\n    return createValueColor(color(NullLocation, false), colorData);\r\n}\r\n//\r\nexport function createTextureColor(colors, type, colorData) {\r\n    if (colorData) {\r\n        ValueCell.update(colorData.tColor, colors);\r\n        ValueCell.update(colorData.uColorTexDim, Vec2.create(colors.width, colors.height));\r\n        ValueCell.updateIfChanged(colorData.dColorType, type);\r\n        return colorData;\r\n    }\r\n    else {\r\n        return {\r\n            uColor: ValueCell.create(Vec3()),\r\n            tColor: ValueCell.create(colors),\r\n            tColorGrid: ValueCell.create(createNullTexture()),\r\n            tPalette: ValueCell.create({ array: new Uint8Array(3), width: 1, height: 1 }),\r\n            uColorTexDim: ValueCell.create(Vec2.create(colors.width, colors.height)),\r\n            uColorGridDim: ValueCell.create(Vec3.create(1, 1, 1)),\r\n            uColorGridTransform: ValueCell.create(Vec4.create(0, 0, 0, 1)),\r\n            dColorType: ValueCell.create(type),\r\n            dUsePalette: ValueCell.create(false),\r\n        };\r\n    }\r\n}\r\n/** Creates color texture with color for each instance */\r\nfunction createInstanceColor(locationIt, color, colorData) {\r\n    var instanceCount = locationIt.instanceCount;\r\n    var colors = createTextureImage(Math.max(1, instanceCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\r\n    locationIt.reset();\r\n    while (locationIt.hasNext) {\r\n        var _a = locationIt.move(), location_1 = _a.location, isSecondary = _a.isSecondary, instanceIndex = _a.instanceIndex;\r\n        Color.toArray(color(location_1, isSecondary), colors.array, instanceIndex * 3);\r\n        locationIt.skipInstance();\r\n    }\r\n    return createTextureColor(colors, 'instance', colorData);\r\n}\r\n/** Creates color texture with color for each group (i.e. shared across instances) */\r\nfunction createGroupColor(locationIt, color, colorData) {\r\n    var groupCount = locationIt.groupCount;\r\n    var colors = createTextureImage(Math.max(1, groupCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\r\n    locationIt.reset();\r\n    while (locationIt.hasNext && !locationIt.isNextNewInstance) {\r\n        var _a = locationIt.move(), location_2 = _a.location, isSecondary = _a.isSecondary, groupIndex = _a.groupIndex;\r\n        Color.toArray(color(location_2, isSecondary), colors.array, groupIndex * 3);\r\n    }\r\n    return createTextureColor(colors, 'group', colorData);\r\n}\r\n/** Creates color texture with color for each group in each instance */\r\nfunction createGroupInstanceColor(locationIt, color, colorData) {\r\n    var groupCount = locationIt.groupCount, instanceCount = locationIt.instanceCount;\r\n    var count = instanceCount * groupCount;\r\n    var colors = createTextureImage(Math.max(1, count), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\r\n    locationIt.reset();\r\n    while (locationIt.hasNext) {\r\n        var _a = locationIt.move(), location_3 = _a.location, isSecondary = _a.isSecondary, index = _a.index;\r\n        Color.toArray(color(location_3, isSecondary), colors.array, index * 3);\r\n    }\r\n    return createTextureColor(colors, 'groupInstance', colorData);\r\n}\r\n/** Creates color texture with color for each vertex (i.e. shared across instances) */\r\nfunction createVertexColor(locationIt, color, colorData) {\r\n    var groupCount = locationIt.groupCount, stride = locationIt.stride;\r\n    var colors = createTextureImage(Math.max(1, groupCount), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\r\n    locationIt.reset();\r\n    locationIt.voidInstances();\r\n    while (locationIt.hasNext && !locationIt.isNextNewInstance) {\r\n        var _a = locationIt.move(), location_4 = _a.location, isSecondary = _a.isSecondary, groupIndex = _a.groupIndex;\r\n        var c = color(location_4, isSecondary);\r\n        for (var i = 0; i < stride; ++i) {\r\n            Color.toArray(c, colors.array, (groupIndex + i) * 3);\r\n        }\r\n    }\r\n    return createTextureColor(colors, 'vertex', colorData);\r\n}\r\n/** Creates color texture with color for each vertex in each instance */\r\nfunction createVertexInstanceColor(locationIt, color, colorData) {\r\n    var groupCount = locationIt.groupCount, instanceCount = locationIt.instanceCount, stride = locationIt.stride;\r\n    var count = instanceCount * groupCount;\r\n    var colors = createTextureImage(Math.max(1, count), 3, Uint8Array, colorData && colorData.tColor.ref.value.array);\r\n    locationIt.reset();\r\n    while (locationIt.hasNext) {\r\n        var _a = locationIt.move(), location_5 = _a.location, isSecondary = _a.isSecondary, index = _a.index;\r\n        var c = color(location_5, isSecondary);\r\n        for (var i = 0; i < stride; ++i) {\r\n            Color.toArray(c, colors.array, (index + i) * 3);\r\n        }\r\n    }\r\n    return createTextureColor(colors, 'vertexInstance', colorData);\r\n}\r\nexport function createGridColor(grid, type, colorData) {\r\n    var colors = grid.colors, dimension = grid.dimension, transform = grid.transform;\r\n    var width = colors.getWidth();\r\n    var height = colors.getHeight();\r\n    if (colorData) {\r\n        ValueCell.update(colorData.tColorGrid, colors);\r\n        ValueCell.update(colorData.uColorTexDim, Vec2.create(width, height));\r\n        ValueCell.update(colorData.uColorGridDim, Vec3.clone(dimension));\r\n        ValueCell.update(colorData.uColorGridTransform, Vec4.clone(transform));\r\n        ValueCell.updateIfChanged(colorData.dColorType, type);\r\n        return colorData;\r\n    }\r\n    else {\r\n        return {\r\n            uColor: ValueCell.create(Vec3()),\r\n            tColor: ValueCell.create({ array: new Uint8Array(3), width: 1, height: 1 }),\r\n            tColorGrid: ValueCell.create(colors),\r\n            tPalette: ValueCell.create({ array: new Uint8Array(3), width: 1, height: 1 }),\r\n            uColorTexDim: ValueCell.create(Vec2.create(width, height)),\r\n            uColorGridDim: ValueCell.create(Vec3.clone(dimension)),\r\n            uColorGridTransform: ValueCell.create(Vec4.clone(transform)),\r\n            dColorType: ValueCell.create(type),\r\n            dUsePalette: ValueCell.create(false),\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=color-data.js.map"]},"metadata":{},"sourceType":"module"}