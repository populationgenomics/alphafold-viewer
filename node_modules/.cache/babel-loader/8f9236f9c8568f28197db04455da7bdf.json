{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3, Mat3 } from '../../../mol-math/linear-algebra';\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { Mesh } from './mesh';\nimport { addSphere } from './builder/sphere';\nimport { addCylinder } from './builder/cylinder';\nvar tmpV = Vec3();\nvar tmpMat3 = Mat3();\nvar tmpVecA = Vec3();\nvar tmpVecB = Vec3();\nvar tmpVecC = Vec3();\nvar tmpVecD = Vec3(); // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar v3fromArray = Vec3.fromArray;\nvar v3triangleNormal = Vec3.triangleNormal;\nvar v3copy = Vec3.copy;\nvar v3transformMat4 = Vec3.transformMat4;\nvar v3transformMat3 = Vec3.transformMat3;\nvar mat3directionTransform = Mat3.directionTransform;\nvar caAdd3 = ChunkedArray.add3;\nvar caAdd = ChunkedArray.add;\nexport var MeshBuilder;\n\n(function (MeshBuilder) {\n  function createState(initialCount, chunkSize, mesh) {\n    if (initialCount === void 0) {\n      initialCount = 2048;\n    }\n\n    if (chunkSize === void 0) {\n      chunkSize = 1024;\n    }\n\n    return {\n      currentGroup: -1,\n      vertices: ChunkedArray.create(Float32Array, 3, chunkSize, mesh ? mesh.vertexBuffer.ref.value : initialCount),\n      normals: ChunkedArray.create(Float32Array, 3, chunkSize, mesh ? mesh.normalBuffer.ref.value : initialCount),\n      indices: ChunkedArray.create(Uint32Array, 3, chunkSize * 3, mesh ? mesh.indexBuffer.ref.value : initialCount * 3),\n      groups: ChunkedArray.create(Float32Array, 1, chunkSize, mesh ? mesh.groupBuffer.ref.value : initialCount),\n      mesh: mesh\n    };\n  }\n\n  MeshBuilder.createState = createState;\n\n  function addTriangle(state, a, b, c) {\n    var vertices = state.vertices,\n        normals = state.normals,\n        indices = state.indices,\n        groups = state.groups,\n        currentGroup = state.currentGroup;\n    var offset = vertices.elementCount; // positions\n\n    caAdd3(vertices, a[0], a[1], a[2]);\n    caAdd3(vertices, b[0], b[1], b[2]);\n    caAdd3(vertices, c[0], c[1], c[2]);\n    v3triangleNormal(tmpV, a, b, c);\n\n    for (var i = 0; i < 3; ++i) {\n      caAdd3(normals, tmpV[0], tmpV[1], tmpV[2]); // normal\n\n      caAdd(groups, currentGroup); // group\n    }\n\n    caAdd3(indices, offset, offset + 1, offset + 2);\n  }\n\n  MeshBuilder.addTriangle = addTriangle;\n\n  function addTriangleStrip(state, vertices, indices) {\n    v3fromArray(tmpVecC, vertices, indices[0] * 3);\n    v3fromArray(tmpVecD, vertices, indices[1] * 3);\n\n    for (var i = 2, il = indices.length; i < il; i += 2) {\n      v3copy(tmpVecA, tmpVecC);\n      v3copy(tmpVecB, tmpVecD);\n      v3fromArray(tmpVecC, vertices, indices[i] * 3);\n      v3fromArray(tmpVecD, vertices, indices[i + 1] * 3);\n      addTriangle(state, tmpVecA, tmpVecB, tmpVecC);\n      addTriangle(state, tmpVecB, tmpVecD, tmpVecC);\n    }\n  }\n\n  MeshBuilder.addTriangleStrip = addTriangleStrip;\n\n  function addTriangleFan(state, vertices, indices) {\n    v3fromArray(tmpVecA, vertices, indices[0] * 3);\n\n    for (var i = 2, il = indices.length; i < il; ++i) {\n      v3fromArray(tmpVecB, vertices, indices[i - 1] * 3);\n      v3fromArray(tmpVecC, vertices, indices[i] * 3);\n      addTriangle(state, tmpVecA, tmpVecC, tmpVecB);\n    }\n  }\n\n  MeshBuilder.addTriangleFan = addTriangleFan;\n\n  function addPrimitive(state, t, primitive) {\n    var va = primitive.vertices,\n        na = primitive.normals,\n        ia = primitive.indices;\n    var vertices = state.vertices,\n        normals = state.normals,\n        indices = state.indices,\n        groups = state.groups,\n        currentGroup = state.currentGroup;\n    var offset = vertices.elementCount;\n    var n = mat3directionTransform(tmpMat3, t);\n\n    for (var i = 0, il = va.length; i < il; i += 3) {\n      // position\n      v3transformMat4(tmpV, v3fromArray(tmpV, va, i), t);\n      caAdd3(vertices, tmpV[0], tmpV[1], tmpV[2]); // normal\n\n      v3transformMat3(tmpV, v3fromArray(tmpV, na, i), n);\n      caAdd3(normals, tmpV[0], tmpV[1], tmpV[2]); // group\n\n      caAdd(groups, currentGroup);\n    }\n\n    for (var i = 0, il = ia.length; i < il; i += 3) {\n      caAdd3(indices, ia[i] + offset, ia[i + 1] + offset, ia[i + 2] + offset);\n    }\n  }\n\n  MeshBuilder.addPrimitive = addPrimitive;\n  /** Flips triangle normals and winding order */\n\n  function addPrimitiveFlipped(state, t, primitive) {\n    var va = primitive.vertices,\n        na = primitive.normals,\n        ia = primitive.indices;\n    var vertices = state.vertices,\n        normals = state.normals,\n        indices = state.indices,\n        groups = state.groups,\n        currentGroup = state.currentGroup;\n    var offset = vertices.elementCount;\n    var n = mat3directionTransform(tmpMat3, t);\n\n    for (var i = 0, il = va.length; i < il; i += 3) {\n      // position\n      v3transformMat4(tmpV, v3fromArray(tmpV, va, i), t);\n      caAdd3(vertices, tmpV[0], tmpV[1], tmpV[2]); // normal\n\n      v3transformMat3(tmpV, v3fromArray(tmpV, na, i), n);\n      caAdd3(normals, -tmpV[0], -tmpV[1], -tmpV[2]); // group\n\n      caAdd(groups, currentGroup);\n    }\n\n    for (var i = 0, il = ia.length; i < il; i += 3) {\n      caAdd3(indices, ia[i + 2] + offset, ia[i + 1] + offset, ia[i] + offset);\n    }\n  }\n\n  MeshBuilder.addPrimitiveFlipped = addPrimitiveFlipped;\n\n  function addCage(state, t, cage, radius, detail, radialSegments) {\n    var va = cage.vertices,\n        ea = cage.edges;\n    var cylinderProps = {\n      radiusTop: radius,\n      radiusBottom: radius,\n      radialSegments: radialSegments\n    };\n\n    for (var i = 0, il = ea.length; i < il; i += 2) {\n      v3fromArray(tmpVecA, va, ea[i] * 3);\n      v3fromArray(tmpVecB, va, ea[i + 1] * 3);\n      v3transformMat4(tmpVecA, tmpVecA, t);\n      v3transformMat4(tmpVecB, tmpVecB, t);\n      addSphere(state, tmpVecA, radius, detail);\n      addSphere(state, tmpVecB, radius, detail);\n      addCylinder(state, tmpVecA, tmpVecB, 1, cylinderProps);\n    }\n  }\n\n  MeshBuilder.addCage = addCage;\n\n  function addMesh(state, t, mesh) {\n    addPrimitive(state, t, {\n      vertices: mesh.vertexBuffer.ref.value.subarray(0, mesh.vertexCount * 3),\n      normals: mesh.normalBuffer.ref.value.subarray(0, mesh.vertexCount * 3),\n      indices: mesh.indexBuffer.ref.value.subarray(0, mesh.triangleCount * 3)\n    });\n  }\n\n  MeshBuilder.addMesh = addMesh;\n\n  function getMesh(state) {\n    var vertices = state.vertices,\n        normals = state.normals,\n        indices = state.indices,\n        groups = state.groups,\n        mesh = state.mesh;\n    var vb = ChunkedArray.compact(vertices, true);\n    var ib = ChunkedArray.compact(indices, true);\n    var nb = ChunkedArray.compact(normals, true);\n    var gb = ChunkedArray.compact(groups, true);\n    return Mesh.create(vb, ib, nb, gb, state.vertices.elementCount, state.indices.elementCount, mesh);\n  }\n\n  MeshBuilder.getMesh = getMesh;\n})(MeshBuilder || (MeshBuilder = {}));","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/mesh/mesh-builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3, Mat3 } from '../../../mol-math/linear-algebra';\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { Mesh } from './mesh';\r\nimport { addSphere } from './builder/sphere';\r\nimport { addCylinder } from './builder/cylinder';\r\nvar tmpV = Vec3();\r\nvar tmpMat3 = Mat3();\r\nvar tmpVecA = Vec3();\r\nvar tmpVecB = Vec3();\r\nvar tmpVecC = Vec3();\r\nvar tmpVecD = Vec3();\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3fromArray = Vec3.fromArray;\r\nvar v3triangleNormal = Vec3.triangleNormal;\r\nvar v3copy = Vec3.copy;\r\nvar v3transformMat4 = Vec3.transformMat4;\r\nvar v3transformMat3 = Vec3.transformMat3;\r\nvar mat3directionTransform = Mat3.directionTransform;\r\nvar caAdd3 = ChunkedArray.add3;\r\nvar caAdd = ChunkedArray.add;\r\nexport var MeshBuilder;\r\n(function (MeshBuilder) {\r\n    function createState(initialCount, chunkSize, mesh) {\r\n        if (initialCount === void 0) { initialCount = 2048; }\r\n        if (chunkSize === void 0) { chunkSize = 1024; }\r\n        return {\r\n            currentGroup: -1,\r\n            vertices: ChunkedArray.create(Float32Array, 3, chunkSize, mesh ? mesh.vertexBuffer.ref.value : initialCount),\r\n            normals: ChunkedArray.create(Float32Array, 3, chunkSize, mesh ? mesh.normalBuffer.ref.value : initialCount),\r\n            indices: ChunkedArray.create(Uint32Array, 3, chunkSize * 3, mesh ? mesh.indexBuffer.ref.value : initialCount * 3),\r\n            groups: ChunkedArray.create(Float32Array, 1, chunkSize, mesh ? mesh.groupBuffer.ref.value : initialCount),\r\n            mesh: mesh\r\n        };\r\n    }\r\n    MeshBuilder.createState = createState;\r\n    function addTriangle(state, a, b, c) {\r\n        var vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups, currentGroup = state.currentGroup;\r\n        var offset = vertices.elementCount;\r\n        // positions\r\n        caAdd3(vertices, a[0], a[1], a[2]);\r\n        caAdd3(vertices, b[0], b[1], b[2]);\r\n        caAdd3(vertices, c[0], c[1], c[2]);\r\n        v3triangleNormal(tmpV, a, b, c);\r\n        for (var i = 0; i < 3; ++i) {\r\n            caAdd3(normals, tmpV[0], tmpV[1], tmpV[2]); // normal\r\n            caAdd(groups, currentGroup); // group\r\n        }\r\n        caAdd3(indices, offset, offset + 1, offset + 2);\r\n    }\r\n    MeshBuilder.addTriangle = addTriangle;\r\n    function addTriangleStrip(state, vertices, indices) {\r\n        v3fromArray(tmpVecC, vertices, indices[0] * 3);\r\n        v3fromArray(tmpVecD, vertices, indices[1] * 3);\r\n        for (var i = 2, il = indices.length; i < il; i += 2) {\r\n            v3copy(tmpVecA, tmpVecC);\r\n            v3copy(tmpVecB, tmpVecD);\r\n            v3fromArray(tmpVecC, vertices, indices[i] * 3);\r\n            v3fromArray(tmpVecD, vertices, indices[i + 1] * 3);\r\n            addTriangle(state, tmpVecA, tmpVecB, tmpVecC);\r\n            addTriangle(state, tmpVecB, tmpVecD, tmpVecC);\r\n        }\r\n    }\r\n    MeshBuilder.addTriangleStrip = addTriangleStrip;\r\n    function addTriangleFan(state, vertices, indices) {\r\n        v3fromArray(tmpVecA, vertices, indices[0] * 3);\r\n        for (var i = 2, il = indices.length; i < il; ++i) {\r\n            v3fromArray(tmpVecB, vertices, indices[i - 1] * 3);\r\n            v3fromArray(tmpVecC, vertices, indices[i] * 3);\r\n            addTriangle(state, tmpVecA, tmpVecC, tmpVecB);\r\n        }\r\n    }\r\n    MeshBuilder.addTriangleFan = addTriangleFan;\r\n    function addPrimitive(state, t, primitive) {\r\n        var va = primitive.vertices, na = primitive.normals, ia = primitive.indices;\r\n        var vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups, currentGroup = state.currentGroup;\r\n        var offset = vertices.elementCount;\r\n        var n = mat3directionTransform(tmpMat3, t);\r\n        for (var i = 0, il = va.length; i < il; i += 3) {\r\n            // position\r\n            v3transformMat4(tmpV, v3fromArray(tmpV, va, i), t);\r\n            caAdd3(vertices, tmpV[0], tmpV[1], tmpV[2]);\r\n            // normal\r\n            v3transformMat3(tmpV, v3fromArray(tmpV, na, i), n);\r\n            caAdd3(normals, tmpV[0], tmpV[1], tmpV[2]);\r\n            // group\r\n            caAdd(groups, currentGroup);\r\n        }\r\n        for (var i = 0, il = ia.length; i < il; i += 3) {\r\n            caAdd3(indices, ia[i] + offset, ia[i + 1] + offset, ia[i + 2] + offset);\r\n        }\r\n    }\r\n    MeshBuilder.addPrimitive = addPrimitive;\r\n    /** Flips triangle normals and winding order */\r\n    function addPrimitiveFlipped(state, t, primitive) {\r\n        var va = primitive.vertices, na = primitive.normals, ia = primitive.indices;\r\n        var vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups, currentGroup = state.currentGroup;\r\n        var offset = vertices.elementCount;\r\n        var n = mat3directionTransform(tmpMat3, t);\r\n        for (var i = 0, il = va.length; i < il; i += 3) {\r\n            // position\r\n            v3transformMat4(tmpV, v3fromArray(tmpV, va, i), t);\r\n            caAdd3(vertices, tmpV[0], tmpV[1], tmpV[2]);\r\n            // normal\r\n            v3transformMat3(tmpV, v3fromArray(tmpV, na, i), n);\r\n            caAdd3(normals, -tmpV[0], -tmpV[1], -tmpV[2]);\r\n            // group\r\n            caAdd(groups, currentGroup);\r\n        }\r\n        for (var i = 0, il = ia.length; i < il; i += 3) {\r\n            caAdd3(indices, ia[i + 2] + offset, ia[i + 1] + offset, ia[i] + offset);\r\n        }\r\n    }\r\n    MeshBuilder.addPrimitiveFlipped = addPrimitiveFlipped;\r\n    function addCage(state, t, cage, radius, detail, radialSegments) {\r\n        var va = cage.vertices, ea = cage.edges;\r\n        var cylinderProps = { radiusTop: radius, radiusBottom: radius, radialSegments: radialSegments };\r\n        for (var i = 0, il = ea.length; i < il; i += 2) {\r\n            v3fromArray(tmpVecA, va, ea[i] * 3);\r\n            v3fromArray(tmpVecB, va, ea[i + 1] * 3);\r\n            v3transformMat4(tmpVecA, tmpVecA, t);\r\n            v3transformMat4(tmpVecB, tmpVecB, t);\r\n            addSphere(state, tmpVecA, radius, detail);\r\n            addSphere(state, tmpVecB, radius, detail);\r\n            addCylinder(state, tmpVecA, tmpVecB, 1, cylinderProps);\r\n        }\r\n    }\r\n    MeshBuilder.addCage = addCage;\r\n    function addMesh(state, t, mesh) {\r\n        addPrimitive(state, t, {\r\n            vertices: mesh.vertexBuffer.ref.value.subarray(0, mesh.vertexCount * 3),\r\n            normals: mesh.normalBuffer.ref.value.subarray(0, mesh.vertexCount * 3),\r\n            indices: mesh.indexBuffer.ref.value.subarray(0, mesh.triangleCount * 3),\r\n        });\r\n    }\r\n    MeshBuilder.addMesh = addMesh;\r\n    function getMesh(state) {\r\n        var vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups, mesh = state.mesh;\r\n        var vb = ChunkedArray.compact(vertices, true);\r\n        var ib = ChunkedArray.compact(indices, true);\r\n        var nb = ChunkedArray.compact(normals, true);\r\n        var gb = ChunkedArray.compact(groups, true);\r\n        return Mesh.create(vb, ib, nb, gb, state.vertices.elementCount, state.indices.elementCount, mesh);\r\n    }\r\n    MeshBuilder.getMesh = getMesh;\r\n})(MeshBuilder || (MeshBuilder = {}));\r\n//# sourceMappingURL=mesh-builder.js.map"]},"metadata":{},"sourceType":"module"}