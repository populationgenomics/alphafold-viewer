{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { PluginStateAnimation } from '../model';\nimport { PluginStateObject } from '../../objects';\nimport { StateTransforms } from '../../transforms';\nimport { StateSelection, StateTransform } from '../../../mol-state';\nimport { PluginCommands } from '../../../mol-plugin/commands';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nexport var AnimateAssemblyUnwind = PluginStateAnimation.create({\n  name: 'built-in.animate-assembly-unwind',\n  display: {\n    name: 'Unwind Assembly'\n  },\n  isExportable: true,\n  params: function (plugin) {\n    var targets = [['all', 'All']];\n    var structures = plugin.state.data.select(StateSelection.Generators.rootsOfType(PluginStateObject.Molecule.Structure));\n\n    for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\n      var s = structures_1[_i];\n      targets.push([s.transform.ref, s.obj.data.models[0].label]);\n    }\n\n    return {\n      durationInMs: PD.Numeric(3000, {\n        min: 100,\n        max: 10000,\n        step: 100\n      }),\n      playOnce: PD.Boolean(false),\n      target: PD.Select(targets[0][0], targets)\n    };\n  },\n  canApply: function (plugin) {\n    var state = plugin.state.data;\n    var root = StateTransform.RootRef;\n    var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D, root));\n    return {\n      canApply: reprs.length > 0\n    };\n  },\n  getDuration: function (params) {\n    return {\n      kind: 'fixed',\n      durationMs: params.durationInMs\n    };\n  },\n  initialState: function () {\n    return {\n      t: 0\n    };\n  },\n  setup: function (params, _, plugin) {\n    var state = plugin.state.data;\n    var root = !params.target || params.target === 'all' ? StateTransform.RootRef : params.target;\n    var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D, root));\n    var update = state.build();\n    var changed = false;\n\n    for (var _i = 0, reprs_1 = reprs; _i < reprs_1.length; _i++) {\n      var r = reprs_1[_i];\n      var unwinds = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, r.transform.ref));\n      if (unwinds.length > 0) continue;\n      changed = true;\n      update.to(r).apply(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, {\n        t: 0\n      }, {\n        tags: 'animate-assembly-unwind'\n      });\n    }\n\n    if (!changed) return;\n    return update.commit({\n      doNotUpdateCurrent: true\n    });\n  },\n  teardown: function (_, __, plugin) {\n    var state = plugin.state.data;\n    var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3DState).withTag('animate-assembly-unwind'));\n    if (reprs.length === 0) return;\n    var update = state.build();\n\n    for (var _i = 0, reprs_2 = reprs; _i < reprs_2.length; _i++) {\n      var r = reprs_2[_i];\n      update.delete(r.transform.ref);\n    }\n\n    return update.commit();\n  },\n  apply: function (animState, t, ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var state, root, anims, update, d, newTime, finished, _i, anims_1, m;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            state = ctx.plugin.state.data;\n            root = !ctx.params.target || ctx.params.target === 'all' ? StateTransform.RootRef : ctx.params.target;\n            anims = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, root));\n\n            if (anims.length === 0) {\n              return [2\n              /*return*/\n              , {\n                kind: 'finished'\n              }];\n            }\n\n            update = state.build();\n            d = (t.current - t.lastApplied) / ctx.params.durationInMs;\n            newTime = animState.t + d, finished = false;\n\n            if (ctx.params.playOnce && newTime >= 1) {\n              finished = true;\n              newTime = 1;\n            } else {\n              newTime = newTime % 1;\n            }\n\n            for (_i = 0, anims_1 = anims; _i < anims_1.length; _i++) {\n              m = anims_1[_i];\n              update.to(m).update({\n                t: newTime\n              });\n            }\n\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(ctx.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            if (finished) return [2\n            /*return*/\n            , {\n              kind: 'finished'\n            }];\n            return [2\n            /*return*/\n            , {\n              kind: 'next',\n              state: {\n                t: newTime\n              }\n            }];\n        }\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-plugin-state/animation/built-in/assembly-unwind.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { PluginStateAnimation } from '../model';\r\nimport { PluginStateObject } from '../../objects';\r\nimport { StateTransforms } from '../../transforms';\r\nimport { StateSelection, StateTransform } from '../../../mol-state';\r\nimport { PluginCommands } from '../../../mol-plugin/commands';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nexport var AnimateAssemblyUnwind = PluginStateAnimation.create({\r\n    name: 'built-in.animate-assembly-unwind',\r\n    display: { name: 'Unwind Assembly' },\r\n    isExportable: true,\r\n    params: function (plugin) {\r\n        var targets = [['all', 'All']];\r\n        var structures = plugin.state.data.select(StateSelection.Generators.rootsOfType(PluginStateObject.Molecule.Structure));\r\n        for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\r\n            var s = structures_1[_i];\r\n            targets.push([s.transform.ref, s.obj.data.models[0].label]);\r\n        }\r\n        return {\r\n            durationInMs: PD.Numeric(3000, { min: 100, max: 10000, step: 100 }),\r\n            playOnce: PD.Boolean(false),\r\n            target: PD.Select(targets[0][0], targets)\r\n        };\r\n    },\r\n    canApply: function (plugin) {\r\n        var state = plugin.state.data;\r\n        var root = StateTransform.RootRef;\r\n        var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D, root));\r\n        return { canApply: reprs.length > 0 };\r\n    },\r\n    getDuration: function (params) {\r\n        return {\r\n            kind: 'fixed',\r\n            durationMs: params.durationInMs\r\n        };\r\n    },\r\n    initialState: function () { return ({ t: 0 }); },\r\n    setup: function (params, _, plugin) {\r\n        var state = plugin.state.data;\r\n        var root = !params.target || params.target === 'all' ? StateTransform.RootRef : params.target;\r\n        var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3D, root));\r\n        var update = state.build();\r\n        var changed = false;\r\n        for (var _i = 0, reprs_1 = reprs; _i < reprs_1.length; _i++) {\r\n            var r = reprs_1[_i];\r\n            var unwinds = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, r.transform.ref));\r\n            if (unwinds.length > 0)\r\n                continue;\r\n            changed = true;\r\n            update.to(r)\r\n                .apply(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, { t: 0 }, { tags: 'animate-assembly-unwind' });\r\n        }\r\n        if (!changed)\r\n            return;\r\n        return update.commit({ doNotUpdateCurrent: true });\r\n    },\r\n    teardown: function (_, __, plugin) {\r\n        var state = plugin.state.data;\r\n        var reprs = state.select(StateSelection.Generators.ofType(PluginStateObject.Molecule.Structure.Representation3DState)\r\n            .withTag('animate-assembly-unwind'));\r\n        if (reprs.length === 0)\r\n            return;\r\n        var update = state.build();\r\n        for (var _i = 0, reprs_2 = reprs; _i < reprs_2.length; _i++) {\r\n            var r = reprs_2[_i];\r\n            update.delete(r.transform.ref);\r\n        }\r\n        return update.commit();\r\n    },\r\n    apply: function (animState, t, ctx) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var state, root, anims, update, d, newTime, finished, _i, anims_1, m;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        state = ctx.plugin.state.data;\r\n                        root = !ctx.params.target || ctx.params.target === 'all' ? StateTransform.RootRef : ctx.params.target;\r\n                        anims = state.select(StateSelection.Generators.ofTransformer(StateTransforms.Representation.UnwindStructureAssemblyRepresentation3D, root));\r\n                        if (anims.length === 0) {\r\n                            return [2 /*return*/, { kind: 'finished' }];\r\n                        }\r\n                        update = state.build();\r\n                        d = (t.current - t.lastApplied) / ctx.params.durationInMs;\r\n                        newTime = (animState.t + d), finished = false;\r\n                        if (ctx.params.playOnce && newTime >= 1) {\r\n                            finished = true;\r\n                            newTime = 1;\r\n                        }\r\n                        else {\r\n                            newTime = newTime % 1;\r\n                        }\r\n                        for (_i = 0, anims_1 = anims; _i < anims_1.length; _i++) {\r\n                            m = anims_1[_i];\r\n                            update.to(m).update({ t: newTime });\r\n                        }\r\n                        return [4 /*yield*/, PluginCommands.State.Update(ctx.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        if (finished)\r\n                            return [2 /*return*/, { kind: 'finished' }];\r\n                        return [2 /*return*/, { kind: 'next', state: { t: newTime } }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n});\r\n//# sourceMappingURL=assembly-unwind.js.map"]},"metadata":{},"sourceType":"module"}