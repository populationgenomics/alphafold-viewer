{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { decodeMsgPack } from '../../mol-io/common/msgpack/decode';\nexport function DataFormatProvider(provider) {\n  return provider;\n}\nexport function guessCifVariant(info, data) {\n  if (info.ext === 'bcif') {\n    try {\n      // TODO: find a way to run msgpackDecode only once\n      //      now it is run twice, here and during file parsing\n      if (decodeMsgPack(data).encoder.startsWith('VolumeServer')) return 'dscif';\n    } catch (_a) {}\n  } else if (info.ext === 'cif') {\n    var str = data;\n    if (str.startsWith('data_SERVER\\n#\\n_density_server_result')) return 'dscif';\n    if (str.includes('atom_site_fract_x') || str.includes('atom_site.fract_x')) return 'coreCif';\n  }\n\n  return -1;\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/formats/provider.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,aAAT,QAA8B,oCAA9B;AAiBA,OAAM,SAAU,kBAAV,CAA2D,QAA3D,EAAsE;AAAO,SAAO,QAAP;AAAkB;AAGrG,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAA0C,IAA1C,EAAmE;AACrE,MAAI,IAAI,CAAC,GAAL,KAAa,MAAjB,EAAyB;AACrB,QAAI;AACA;AACA;AACA,UAAI,aAAa,CAAC,IAAD,CAAb,CAAkC,OAAlC,CAA0C,UAA1C,CAAqD,cAArD,CAAJ,EAA0E,OAAO,OAAP;AAC7E,KAJD,CAIE,OAAA,EAAA,EAAM,CAAG;AACd,GAND,MAMO,IAAI,IAAI,CAAC,GAAL,KAAa,KAAjB,EAAwB;AAC3B,QAAM,GAAG,GAAG,IAAZ;AACA,QAAI,GAAG,CAAC,UAAJ,CAAe,wCAAf,CAAJ,EAA8D,OAAO,OAAP;AAC9D,QAAI,GAAG,CAAC,QAAJ,CAAa,mBAAb,KAAqC,GAAG,CAAC,QAAJ,CAAa,mBAAb,CAAzC,EAA4E,OAAO,SAAP;AAC/E;;AACD,SAAO,CAAC,CAAR;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { decodeMsgPack } from '../../mol-io/common/msgpack/decode';\r\nexport function DataFormatProvider(provider) { return provider; }\r\nexport function guessCifVariant(info, data) {\r\n    if (info.ext === 'bcif') {\r\n        try {\r\n            // TODO: find a way to run msgpackDecode only once\r\n            //      now it is run twice, here and during file parsing\r\n            if (decodeMsgPack(data).encoder.startsWith('VolumeServer'))\r\n                return 'dscif';\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    else if (info.ext === 'cif') {\r\n        var str = data;\r\n        if (str.startsWith('data_SERVER\\n#\\n_density_server_result'))\r\n            return 'dscif';\r\n        if (str.includes('atom_site_fract_x') || str.includes('atom_site.fract_x'))\r\n            return 'coreCif';\r\n    }\r\n    return -1;\r\n}\r\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}