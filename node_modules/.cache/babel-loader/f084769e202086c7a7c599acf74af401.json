{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { lerp as scalar_lerp } from '../../mol-math/interpolate';\nimport { defaults } from '../../mol-util';\nimport { Mat3 } from '../linear-algebra/3d/mat3';\nimport { Mat4 } from '../linear-algebra/3d/mat4';\nimport { Quat } from '../linear-algebra/3d/quat';\nimport { Vec3 } from '../linear-algebra/3d/vec3';\nvar SymmetryOperator;\n\n(function (SymmetryOperator) {\n  SymmetryOperator.DefaultName = '1_555';\n  SymmetryOperator.Default = create(SymmetryOperator.DefaultName, Mat4.identity());\n  SymmetryOperator.RotationTranslationEpsilon = 0.005;\n\n  function create(name, matrix, info) {\n    var _a = info || {},\n        assembly = _a.assembly,\n        ncsId = _a.ncsId,\n        hkl = _a.hkl,\n        spgrOp = _a.spgrOp;\n\n    var _hkl = hkl ? Vec3.clone(hkl) : Vec3();\n\n    spgrOp = defaults(spgrOp, -1);\n    ncsId = ncsId || -1;\n    var suffix = getSuffix(info);\n    if (Mat4.isIdentity(matrix)) return {\n      name: name,\n      assembly: assembly,\n      matrix: matrix,\n      inverse: Mat4.identity(),\n      isIdentity: true,\n      hkl: _hkl,\n      spgrOp: spgrOp,\n      ncsId: ncsId,\n      suffix: suffix\n    };\n    if (!Mat4.isRotationAndTranslation(matrix, SymmetryOperator.RotationTranslationEpsilon)) throw new Error(\"Symmetry operator (\" + name + \") must be a composition of rotation and translation.\");\n    return {\n      name: name,\n      assembly: assembly,\n      matrix: matrix,\n      inverse: Mat4.invert(Mat4(), matrix),\n      isIdentity: false,\n      hkl: _hkl,\n      spgrOp: spgrOp,\n      ncsId: ncsId,\n      suffix: suffix\n    };\n  }\n\n  SymmetryOperator.create = create;\n\n  function getSuffix(info) {\n    if (!info) return '';\n\n    if (info.assembly) {\n      return \"_\" + info.assembly.operId;\n    }\n\n    if (typeof info.spgrOp !== 'undefined' && typeof info.hkl !== 'undefined' && info.spgrOp !== -1) {\n      var _a = info.hkl,\n          i = _a[0],\n          j = _a[1],\n          k = _a[2];\n      return \"-\" + (info.spgrOp + 1) + \"_\" + (5 + i) + (5 + j) + (5 + k);\n    }\n\n    if (info.ncsId !== -1) {\n      return \"_\" + info.ncsId;\n    }\n\n    return '';\n  }\n\n  function checkIfRotationAndTranslation(rot, offset) {\n    var matrix = Mat4.identity();\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        Mat4.setValue(matrix, i, j, Mat3.getValue(rot, i, j));\n      }\n    }\n\n    Mat4.setTranslation(matrix, offset);\n    return Mat4.isRotationAndTranslation(matrix, SymmetryOperator.RotationTranslationEpsilon);\n  }\n\n  SymmetryOperator.checkIfRotationAndTranslation = checkIfRotationAndTranslation;\n\n  function ofRotationAndOffset(name, rot, offset, ncsId) {\n    var t = Mat4.identity();\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        Mat4.setValue(t, i, j, Mat3.getValue(rot, i, j));\n      }\n    }\n\n    Mat4.setTranslation(t, offset);\n    return create(name, t, {\n      ncsId: ncsId\n    });\n  }\n\n  SymmetryOperator.ofRotationAndOffset = ofRotationAndOffset;\n\n  var _q1 = Quat.identity(),\n      _q2 = Quat(),\n      _q3 = Quat(),\n      _axis = Vec3();\n\n  function lerpFromIdentity(out, op, t) {\n    var m = op.inverse;\n    if (op.isIdentity) return Mat4.copy(out, m);\n\n    var _t = 1 - t; // interpolate rotation\n\n\n    Mat4.getRotation(_q2, m);\n    Quat.slerp(_q2, _q1, _q2, _t);\n    var angle = Quat.getAxisAngle(_axis, _q2);\n    Mat4.fromRotation(out, angle, _axis); // interpolate translation\n\n    Mat4.setValue(out, 0, 3, _t * Mat4.getValue(m, 0, 3));\n    Mat4.setValue(out, 1, 3, _t * Mat4.getValue(m, 1, 3));\n    Mat4.setValue(out, 2, 3, _t * Mat4.getValue(m, 2, 3));\n    return out;\n  }\n\n  SymmetryOperator.lerpFromIdentity = lerpFromIdentity;\n\n  function slerp(out, src, tar, t) {\n    if (Math.abs(t) <= 0.00001) return Mat4.copy(out, src);\n    if (Math.abs(t - 1) <= 0.00001) return Mat4.copy(out, tar); // interpolate rotation\n\n    Mat4.getRotation(_q2, src);\n    Mat4.getRotation(_q3, tar);\n    Quat.slerp(_q3, _q2, _q3, t);\n    var angle = Quat.getAxisAngle(_axis, _q3);\n    Mat4.fromRotation(out, angle, _axis); // interpolate translation\n\n    Mat4.setValue(out, 0, 3, scalar_lerp(Mat4.getValue(src, 0, 3), Mat4.getValue(tar, 0, 3), t));\n    Mat4.setValue(out, 1, 3, scalar_lerp(Mat4.getValue(src, 1, 3), Mat4.getValue(tar, 1, 3), t));\n    Mat4.setValue(out, 2, 3, scalar_lerp(Mat4.getValue(src, 2, 3), Mat4.getValue(tar, 2, 3), t));\n    return out;\n  }\n\n  SymmetryOperator.slerp = slerp;\n  /**\r\n   * Apply the 1st and then 2nd operator. ( = second.matrix * first.matrix).\r\n   * Keep `name`, `assembly`, `ncsId`, `hkl` and `spgrOpId` properties from second.\r\n   */\n\n  function compose(first, second) {\n    var matrix = Mat4.mul(Mat4(), second.matrix, first.matrix);\n    return create(second.name, matrix, second);\n  }\n\n  SymmetryOperator.compose = compose;\n\n  function createMapping(operator, coords, radius) {\n    var invariantPosition = SymmetryOperator.createCoordinateMapper(SymmetryOperator.Default, coords);\n    var position = operator.isIdentity ? invariantPosition : SymmetryOperator.createCoordinateMapper(operator, coords);\n\n    var _a = createProjections(operator, coords),\n        x = _a.x,\n        y = _a.y,\n        z = _a.z;\n\n    return {\n      operator: operator,\n      coordinates: coords,\n      invariantPosition: invariantPosition,\n      position: position,\n      x: x,\n      y: y,\n      z: z,\n      r: radius ? radius : _zeroRadius\n    };\n  }\n\n  SymmetryOperator.createMapping = createMapping;\n\n  function createCoordinateMapper(t, coords) {\n    if (t.isIdentity) return identityPosition(coords);\n    return generalPosition(t, coords);\n  }\n\n  SymmetryOperator.createCoordinateMapper = createCoordinateMapper;\n})(SymmetryOperator || (SymmetryOperator = {}));\n\nexport { SymmetryOperator };\n\nfunction _zeroRadius(i) {\n  return 0;\n}\n\nfunction createProjections(t, coords) {\n  if (t.isIdentity) return {\n    x: projectCoord(coords.x),\n    y: projectCoord(coords.y),\n    z: projectCoord(coords.z)\n  };\n  return {\n    x: projectX(t, coords),\n    y: projectY(t, coords),\n    z: projectZ(t, coords)\n  };\n}\n\nfunction projectCoord(xs) {\n  return function projectCoord(i) {\n    return xs[i];\n  };\n}\n\nfunction isW1(m) {\n  return m[3] === 0 && m[7] === 0 && m[11] === 0 && m[15] === 1;\n}\n\nfunction projectX(_a, _b) {\n  var m = _a.matrix;\n  var xs = _b.x,\n      ys = _b.y,\n      zs = _b.z;\n  var xx = m[0],\n      yy = m[4],\n      zz = m[8],\n      tx = m[12];\n\n  if (isW1(m)) {\n    // this should always be the case.\n    return function projectX_W1(i) {\n      return xx * xs[i] + yy * ys[i] + zz * zs[i] + tx;\n    };\n  }\n\n  return function projectX(i) {\n    var x = xs[i],\n        y = ys[i],\n        z = zs[i],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15] || 1.0;\n    return (xx * x + yy * y + zz * z + tx) / w;\n  };\n}\n\nfunction projectY(_a, _b) {\n  var m = _a.matrix;\n  var xs = _b.x,\n      ys = _b.y,\n      zs = _b.z;\n  var xx = m[1],\n      yy = m[5],\n      zz = m[9],\n      ty = m[13];\n\n  if (isW1(m)) {\n    // this should always be the case.\n    return function projectY_W1(i) {\n      return xx * xs[i] + yy * ys[i] + zz * zs[i] + ty;\n    };\n  }\n\n  return function projectY(i) {\n    var x = xs[i],\n        y = ys[i],\n        z = zs[i],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15] || 1.0;\n    return (xx * x + yy * y + zz * z + ty) / w;\n  };\n}\n\nfunction projectZ(_a, _b) {\n  var m = _a.matrix;\n  var xs = _b.x,\n      ys = _b.y,\n      zs = _b.z;\n  var xx = m[2],\n      yy = m[6],\n      zz = m[10],\n      tz = m[14];\n\n  if (isW1(m)) {\n    // this should always be the case.\n    return function projectZ_W1(i) {\n      return xx * xs[i] + yy * ys[i] + zz * zs[i] + tz;\n    };\n  }\n\n  return function projectZ(i) {\n    var x = xs[i],\n        y = ys[i],\n        z = zs[i],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15] || 1.0;\n    return (xx * x + yy * y + zz * z + tz) / w;\n  };\n}\n\nfunction identityPosition(_a) {\n  var x = _a.x,\n      y = _a.y,\n      z = _a.z;\n  return function identityPosition(i, s) {\n    s[0] = x[i];\n    s[1] = y[i];\n    s[2] = z[i];\n    return s;\n  };\n}\n\nfunction generalPosition(_a, _b) {\n  var m = _a.matrix;\n  var xs = _b.x,\n      ys = _b.y,\n      zs = _b.z;\n\n  if (isW1(m)) {\n    // this should always be the case.\n    return function generalPosition_W1(i, r) {\n      var x = xs[i],\n          y = ys[i],\n          z = zs[i];\n      r[0] = m[0] * x + m[4] * y + m[8] * z + m[12];\n      r[1] = m[1] * x + m[5] * y + m[9] * z + m[13];\n      r[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\n      return r;\n    };\n  }\n\n  return function generalPosition(i, r) {\n    r[0] = xs[i];\n    r[1] = ys[i];\n    r[2] = zs[i];\n    Vec3.transformMat4(r, r, m);\n    return r;\n  };\n}","map":{"version":3,"sources":["../../../src/mol-math/geometry/symmetry-operator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { lerp as scalar_lerp } from '../../mol-math/interpolate';\r\nimport { defaults } from '../../mol-util';\r\nimport { Mat3 } from '../linear-algebra/3d/mat3';\r\nimport { Mat4 } from '../linear-algebra/3d/mat4';\r\nimport { Quat } from '../linear-algebra/3d/quat';\r\nimport { Vec3 } from '../linear-algebra/3d/vec3';\r\nvar SymmetryOperator;\r\n(function (SymmetryOperator) {\r\n    SymmetryOperator.DefaultName = '1_555';\r\n    SymmetryOperator.Default = create(SymmetryOperator.DefaultName, Mat4.identity());\r\n    SymmetryOperator.RotationTranslationEpsilon = 0.005;\r\n    function create(name, matrix, info) {\r\n        var _a = info || {}, assembly = _a.assembly, ncsId = _a.ncsId, hkl = _a.hkl, spgrOp = _a.spgrOp;\r\n        var _hkl = hkl ? Vec3.clone(hkl) : Vec3();\r\n        spgrOp = defaults(spgrOp, -1);\r\n        ncsId = ncsId || -1;\r\n        var suffix = getSuffix(info);\r\n        if (Mat4.isIdentity(matrix))\r\n            return { name: name, assembly: assembly, matrix: matrix, inverse: Mat4.identity(), isIdentity: true, hkl: _hkl, spgrOp: spgrOp, ncsId: ncsId, suffix: suffix };\r\n        if (!Mat4.isRotationAndTranslation(matrix, SymmetryOperator.RotationTranslationEpsilon))\r\n            throw new Error(\"Symmetry operator (\" + name + \") must be a composition of rotation and translation.\");\r\n        return { name: name, assembly: assembly, matrix: matrix, inverse: Mat4.invert(Mat4(), matrix), isIdentity: false, hkl: _hkl, spgrOp: spgrOp, ncsId: ncsId, suffix: suffix };\r\n    }\r\n    SymmetryOperator.create = create;\r\n    function getSuffix(info) {\r\n        if (!info)\r\n            return '';\r\n        if (info.assembly) {\r\n            return \"_\" + info.assembly.operId;\r\n        }\r\n        if (typeof info.spgrOp !== 'undefined' && typeof info.hkl !== 'undefined' && info.spgrOp !== -1) {\r\n            var _a = info.hkl, i = _a[0], j = _a[1], k = _a[2];\r\n            return \"-\" + (info.spgrOp + 1) + \"_\" + (5 + i) + (5 + j) + (5 + k);\r\n        }\r\n        if (info.ncsId !== -1) {\r\n            return \"_\" + info.ncsId;\r\n        }\r\n        return '';\r\n    }\r\n    function checkIfRotationAndTranslation(rot, offset) {\r\n        var matrix = Mat4.identity();\r\n        for (var i = 0; i < 3; i++) {\r\n            for (var j = 0; j < 3; j++) {\r\n                Mat4.setValue(matrix, i, j, Mat3.getValue(rot, i, j));\r\n            }\r\n        }\r\n        Mat4.setTranslation(matrix, offset);\r\n        return Mat4.isRotationAndTranslation(matrix, SymmetryOperator.RotationTranslationEpsilon);\r\n    }\r\n    SymmetryOperator.checkIfRotationAndTranslation = checkIfRotationAndTranslation;\r\n    function ofRotationAndOffset(name, rot, offset, ncsId) {\r\n        var t = Mat4.identity();\r\n        for (var i = 0; i < 3; i++) {\r\n            for (var j = 0; j < 3; j++) {\r\n                Mat4.setValue(t, i, j, Mat3.getValue(rot, i, j));\r\n            }\r\n        }\r\n        Mat4.setTranslation(t, offset);\r\n        return create(name, t, { ncsId: ncsId });\r\n    }\r\n    SymmetryOperator.ofRotationAndOffset = ofRotationAndOffset;\r\n    var _q1 = Quat.identity(), _q2 = Quat(), _q3 = Quat(), _axis = Vec3();\r\n    function lerpFromIdentity(out, op, t) {\r\n        var m = op.inverse;\r\n        if (op.isIdentity)\r\n            return Mat4.copy(out, m);\r\n        var _t = 1 - t;\r\n        // interpolate rotation\r\n        Mat4.getRotation(_q2, m);\r\n        Quat.slerp(_q2, _q1, _q2, _t);\r\n        var angle = Quat.getAxisAngle(_axis, _q2);\r\n        Mat4.fromRotation(out, angle, _axis);\r\n        // interpolate translation\r\n        Mat4.setValue(out, 0, 3, _t * Mat4.getValue(m, 0, 3));\r\n        Mat4.setValue(out, 1, 3, _t * Mat4.getValue(m, 1, 3));\r\n        Mat4.setValue(out, 2, 3, _t * Mat4.getValue(m, 2, 3));\r\n        return out;\r\n    }\r\n    SymmetryOperator.lerpFromIdentity = lerpFromIdentity;\r\n    function slerp(out, src, tar, t) {\r\n        if (Math.abs(t) <= 0.00001)\r\n            return Mat4.copy(out, src);\r\n        if (Math.abs(t - 1) <= 0.00001)\r\n            return Mat4.copy(out, tar);\r\n        // interpolate rotation\r\n        Mat4.getRotation(_q2, src);\r\n        Mat4.getRotation(_q3, tar);\r\n        Quat.slerp(_q3, _q2, _q3, t);\r\n        var angle = Quat.getAxisAngle(_axis, _q3);\r\n        Mat4.fromRotation(out, angle, _axis);\r\n        // interpolate translation\r\n        Mat4.setValue(out, 0, 3, scalar_lerp(Mat4.getValue(src, 0, 3), Mat4.getValue(tar, 0, 3), t));\r\n        Mat4.setValue(out, 1, 3, scalar_lerp(Mat4.getValue(src, 1, 3), Mat4.getValue(tar, 1, 3), t));\r\n        Mat4.setValue(out, 2, 3, scalar_lerp(Mat4.getValue(src, 2, 3), Mat4.getValue(tar, 2, 3), t));\r\n        return out;\r\n    }\r\n    SymmetryOperator.slerp = slerp;\r\n    /**\r\n     * Apply the 1st and then 2nd operator. ( = second.matrix * first.matrix).\r\n     * Keep `name`, `assembly`, `ncsId`, `hkl` and `spgrOpId` properties from second.\r\n     */\r\n    function compose(first, second) {\r\n        var matrix = Mat4.mul(Mat4(), second.matrix, first.matrix);\r\n        return create(second.name, matrix, second);\r\n    }\r\n    SymmetryOperator.compose = compose;\r\n    function createMapping(operator, coords, radius) {\r\n        var invariantPosition = SymmetryOperator.createCoordinateMapper(SymmetryOperator.Default, coords);\r\n        var position = operator.isIdentity ? invariantPosition : SymmetryOperator.createCoordinateMapper(operator, coords);\r\n        var _a = createProjections(operator, coords), x = _a.x, y = _a.y, z = _a.z;\r\n        return { operator: operator, coordinates: coords, invariantPosition: invariantPosition, position: position, x: x, y: y, z: z, r: radius ? radius : _zeroRadius };\r\n    }\r\n    SymmetryOperator.createMapping = createMapping;\r\n    function createCoordinateMapper(t, coords) {\r\n        if (t.isIdentity)\r\n            return identityPosition(coords);\r\n        return generalPosition(t, coords);\r\n    }\r\n    SymmetryOperator.createCoordinateMapper = createCoordinateMapper;\r\n})(SymmetryOperator || (SymmetryOperator = {}));\r\nexport { SymmetryOperator };\r\nfunction _zeroRadius(i) { return 0; }\r\nfunction createProjections(t, coords) {\r\n    if (t.isIdentity)\r\n        return { x: projectCoord(coords.x), y: projectCoord(coords.y), z: projectCoord(coords.z) };\r\n    return { x: projectX(t, coords), y: projectY(t, coords), z: projectZ(t, coords) };\r\n}\r\nfunction projectCoord(xs) {\r\n    return function projectCoord(i) {\r\n        return xs[i];\r\n    };\r\n}\r\nfunction isW1(m) {\r\n    return m[3] === 0 && m[7] === 0 && m[11] === 0 && m[15] === 1;\r\n}\r\nfunction projectX(_a, _b) {\r\n    var m = _a.matrix;\r\n    var xs = _b.x, ys = _b.y, zs = _b.z;\r\n    var xx = m[0], yy = m[4], zz = m[8], tx = m[12];\r\n    if (isW1(m)) {\r\n        // this should always be the case.\r\n        return function projectX_W1(i) {\r\n            return xx * xs[i] + yy * ys[i] + zz * zs[i] + tx;\r\n        };\r\n    }\r\n    return function projectX(i) {\r\n        var x = xs[i], y = ys[i], z = zs[i], w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\r\n        return (xx * x + yy * y + zz * z + tx) / w;\r\n    };\r\n}\r\nfunction projectY(_a, _b) {\r\n    var m = _a.matrix;\r\n    var xs = _b.x, ys = _b.y, zs = _b.z;\r\n    var xx = m[1], yy = m[5], zz = m[9], ty = m[13];\r\n    if (isW1(m)) {\r\n        // this should always be the case.\r\n        return function projectY_W1(i) {\r\n            return xx * xs[i] + yy * ys[i] + zz * zs[i] + ty;\r\n        };\r\n    }\r\n    return function projectY(i) {\r\n        var x = xs[i], y = ys[i], z = zs[i], w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\r\n        return (xx * x + yy * y + zz * z + ty) / w;\r\n    };\r\n}\r\nfunction projectZ(_a, _b) {\r\n    var m = _a.matrix;\r\n    var xs = _b.x, ys = _b.y, zs = _b.z;\r\n    var xx = m[2], yy = m[6], zz = m[10], tz = m[14];\r\n    if (isW1(m)) {\r\n        // this should always be the case.\r\n        return function projectZ_W1(i) {\r\n            return xx * xs[i] + yy * ys[i] + zz * zs[i] + tz;\r\n        };\r\n    }\r\n    return function projectZ(i) {\r\n        var x = xs[i], y = ys[i], z = zs[i], w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\r\n        return (xx * x + yy * y + zz * z + tz) / w;\r\n    };\r\n}\r\nfunction identityPosition(_a) {\r\n    var x = _a.x, y = _a.y, z = _a.z;\r\n    return function identityPosition(i, s) {\r\n        s[0] = x[i];\r\n        s[1] = y[i];\r\n        s[2] = z[i];\r\n        return s;\r\n    };\r\n}\r\nfunction generalPosition(_a, _b) {\r\n    var m = _a.matrix;\r\n    var xs = _b.x, ys = _b.y, zs = _b.z;\r\n    if (isW1(m)) {\r\n        // this should always be the case.\r\n        return function generalPosition_W1(i, r) {\r\n            var x = xs[i], y = ys[i], z = zs[i];\r\n            r[0] = m[0] * x + m[4] * y + m[8] * z + m[12];\r\n            r[1] = m[1] * x + m[5] * y + m[9] * z + m[13];\r\n            r[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\r\n            return r;\r\n        };\r\n    }\r\n    return function generalPosition(i, r) {\r\n        r[0] = xs[i];\r\n        r[1] = ys[i];\r\n        r[2] = zs[i];\r\n        Vec3.transformMat4(r, r, m);\r\n        return r;\r\n    };\r\n}\r\n//# sourceMappingURL=symmetry-operator.js.map"]},"metadata":{},"sourceType":"module"}