{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Volume } from '../../mol-model/volume';\nimport { Interval, OrderedSet } from '../../mol-data/int';\nimport { equalEps } from '../../mol-math/linear-algebra/3d/common';\nimport { Vec3 } from '../../mol-math/linear-algebra/3d/vec3';\nimport { encodeFloatRGBtoArray } from '../../mol-util/float-packing'; // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar v3set = Vec3.set;\nvar v3normalize = Vec3.normalize;\nvar v3sub = Vec3.sub;\nvar v3addScalar = Vec3.addScalar;\nvar v3scale = Vec3.scale;\nvar v3toArray = Vec3.toArray;\nexport function eachVolumeLoci(loci, volume, isoValue, apply) {\n  var changed = false;\n\n  if (Volume.isLoci(loci)) {\n    if (!Volume.areEquivalent(loci.volume, volume)) return false;\n    if (apply(Interval.ofLength(volume.grid.cells.data.length))) changed = true;\n  } else if (Volume.Isosurface.isLoci(loci)) {\n    if (!Volume.areEquivalent(loci.volume, volume)) return false;\n\n    if (isoValue) {\n      if (!Volume.IsoValue.areSame(loci.isoValue, isoValue, volume.grid.stats)) return false;\n      if (apply(Interval.ofLength(volume.grid.cells.data.length))) changed = true;\n    } else {\n      // TODO find a cheaper way?\n      var _a = volume.grid,\n          stats = _a.stats,\n          data = _a.cells.data;\n      var eps = stats.sigma;\n      var v = Volume.IsoValue.toAbsolute(loci.isoValue, stats).absoluteValue;\n\n      for (var i = 0, il = data.length; i < il; ++i) {\n        if (equalEps(v, data[i], eps)) {\n          if (apply(Interval.ofSingleton(i))) changed = true;\n        }\n      }\n    }\n  } else if (Volume.Cell.isLoci(loci)) {\n    if (!Volume.areEquivalent(loci.volume, volume)) return false;\n\n    if (Interval.is(loci.indices)) {\n      if (apply(loci.indices)) changed = true;\n    } else {\n      OrderedSet.forEach(loci.indices, function (v) {\n        if (apply(Interval.ofSingleton(v))) changed = true;\n      });\n    }\n  }\n\n  return changed;\n} //\n\nexport function getVolumeTexture2dLayout(dim, padding) {\n  if (padding === void 0) {\n    padding = 0;\n  }\n\n  var area = dim[0] * dim[1] * dim[2];\n  var squareDim = Math.sqrt(area);\n  var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\n  var width = dim[0] + padding;\n  var height = dim[1] + padding;\n  var rows = 1;\n  var columns = width;\n\n  if (powerOfTwoSize < width * dim[2]) {\n    columns = Math.floor(powerOfTwoSize / width);\n    rows = Math.ceil(dim[2] / columns);\n    width *= columns;\n    height *= rows;\n  } else {\n    width *= dim[2];\n  }\n\n  return {\n    width: width,\n    height: height,\n    columns: columns,\n    rows: rows,\n    powerOfTwoSize: height < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2\n  };\n}\nexport function createVolumeTexture2d(volume, variant, padding) {\n  if (padding === void 0) {\n    padding = 0;\n  }\n\n  var _a = volume.grid,\n      _b = _a.cells,\n      space = _b.space,\n      data = _b.data,\n      _c = _a.stats,\n      max = _c.max,\n      min = _c.min;\n  var dim = space.dimensions;\n  var o = space.dataOffset;\n\n  var _d = getVolumeTexture2dLayout(dim, padding),\n      width = _d.width,\n      height = _d.height;\n\n  var itemSize = variant === 'data' ? 1 : 4;\n  var array = new Uint8Array(width * height * itemSize);\n  var textureImage = {\n    array: array,\n    width: width,\n    height: height\n  };\n  var diff = max - min;\n  var xn = dim[0],\n      yn = dim[1],\n      zn = dim[2];\n  var xnp = xn + padding;\n  var ynp = yn + padding;\n  var n0 = Vec3();\n  var n1 = Vec3();\n  var xn1 = xn - 1;\n  var yn1 = yn - 1;\n  var zn1 = zn - 1;\n\n  for (var z = 0; z < zn; ++z) {\n    for (var y = 0; y < yn; ++y) {\n      for (var x = 0; x < xn; ++x) {\n        var column = Math.floor(z * xnp % width / xnp);\n        var row = Math.floor(z * xnp / width);\n        var px = column * xnp + x;\n        var index = itemSize * (row * ynp * width + y * width + px);\n        var offset = o(x, y, z);\n\n        if (variant === 'data') {\n          array[index] = Math.round((data[offset] - min) / diff * 255);\n        } else {\n          if (variant === 'groups') {\n            encodeFloatRGBtoArray(offset, array, index);\n          } else {\n            v3set(n0, data[o(Math.max(0, x - 1), y, z)], data[o(x, Math.max(0, y - 1), z)], data[o(x, y, Math.max(0, z - 1))]);\n            v3set(n1, data[o(Math.min(xn1, x + 1), y, z)], data[o(x, Math.min(yn1, y + 1), z)], data[o(x, y, Math.min(zn1, z + 1))]);\n            v3normalize(n0, v3sub(n0, n0, n1));\n            v3addScalar(n0, v3scale(n0, n0, 0.5), 0.5);\n            v3toArray(v3scale(n0, n0, 255), array, index);\n          }\n\n          array[index + 3] = Math.round((data[offset] - min) / diff * 255);\n        }\n      }\n    }\n  }\n\n  return textureImage;\n}\nexport function createVolumeTexture3d(volume) {\n  var _a = volume.grid,\n      _b = _a.cells,\n      space = _b.space,\n      data = _b.data,\n      _c = _a.stats,\n      max = _c.max,\n      min = _c.min;\n  var _d = space.dimensions,\n      width = _d[0],\n      height = _d[1],\n      depth = _d[2];\n  var o = space.dataOffset;\n  var array = new Uint8Array(width * height * depth * 4);\n  var textureVolume = {\n    array: array,\n    width: width,\n    height: height,\n    depth: depth\n  };\n  var diff = max - min;\n  var n0 = Vec3();\n  var n1 = Vec3();\n  var width1 = width - 1;\n  var height1 = height - 1;\n  var depth1 = depth - 1;\n  var i = 0;\n\n  for (var z = 0; z < depth; ++z) {\n    for (var y = 0; y < height; ++y) {\n      for (var x = 0; x < width; ++x) {\n        var offset = o(x, y, z);\n        v3set(n0, data[o(Math.max(0, x - 1), y, z)], data[o(x, Math.max(0, y - 1), z)], data[o(x, y, Math.max(0, z - 1))]);\n        v3set(n1, data[o(Math.min(width1, x + 1), y, z)], data[o(x, Math.min(height1, y + 1), z)], data[o(x, y, Math.min(depth1, z + 1))]);\n        v3normalize(n0, v3sub(n0, n0, n1));\n        v3addScalar(n0, v3scale(n0, n0, 0.5), 0.5);\n        v3toArray(v3scale(n0, n0, 255), array, i);\n        array[i + 3] = Math.round((data[offset] - min) / diff * 255);\n        i += 4;\n      }\n    }\n  }\n\n  return textureVolume;\n}","map":{"version":3,"sources":["../../../src/mol-repr/volume/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Volume } from '../../mol-model/volume';\r\nimport { Interval, OrderedSet } from '../../mol-data/int';\r\nimport { equalEps } from '../../mol-math/linear-algebra/3d/common';\r\nimport { Vec3 } from '../../mol-math/linear-algebra/3d/vec3';\r\nimport { encodeFloatRGBtoArray } from '../../mol-util/float-packing';\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3set = Vec3.set;\r\nvar v3normalize = Vec3.normalize;\r\nvar v3sub = Vec3.sub;\r\nvar v3addScalar = Vec3.addScalar;\r\nvar v3scale = Vec3.scale;\r\nvar v3toArray = Vec3.toArray;\r\nexport function eachVolumeLoci(loci, volume, isoValue, apply) {\r\n    var changed = false;\r\n    if (Volume.isLoci(loci)) {\r\n        if (!Volume.areEquivalent(loci.volume, volume))\r\n            return false;\r\n        if (apply(Interval.ofLength(volume.grid.cells.data.length)))\r\n            changed = true;\r\n    }\r\n    else if (Volume.Isosurface.isLoci(loci)) {\r\n        if (!Volume.areEquivalent(loci.volume, volume))\r\n            return false;\r\n        if (isoValue) {\r\n            if (!Volume.IsoValue.areSame(loci.isoValue, isoValue, volume.grid.stats))\r\n                return false;\r\n            if (apply(Interval.ofLength(volume.grid.cells.data.length)))\r\n                changed = true;\r\n        }\r\n        else {\r\n            // TODO find a cheaper way?\r\n            var _a = volume.grid, stats = _a.stats, data = _a.cells.data;\r\n            var eps = stats.sigma;\r\n            var v = Volume.IsoValue.toAbsolute(loci.isoValue, stats).absoluteValue;\r\n            for (var i = 0, il = data.length; i < il; ++i) {\r\n                if (equalEps(v, data[i], eps)) {\r\n                    if (apply(Interval.ofSingleton(i)))\r\n                        changed = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (Volume.Cell.isLoci(loci)) {\r\n        if (!Volume.areEquivalent(loci.volume, volume))\r\n            return false;\r\n        if (Interval.is(loci.indices)) {\r\n            if (apply(loci.indices))\r\n                changed = true;\r\n        }\r\n        else {\r\n            OrderedSet.forEach(loci.indices, function (v) {\r\n                if (apply(Interval.ofSingleton(v)))\r\n                    changed = true;\r\n            });\r\n        }\r\n    }\r\n    return changed;\r\n}\r\n//\r\nexport function getVolumeTexture2dLayout(dim, padding) {\r\n    if (padding === void 0) { padding = 0; }\r\n    var area = dim[0] * dim[1] * dim[2];\r\n    var squareDim = Math.sqrt(area);\r\n    var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\r\n    var width = dim[0] + padding;\r\n    var height = dim[1] + padding;\r\n    var rows = 1;\r\n    var columns = width;\r\n    if (powerOfTwoSize < width * dim[2]) {\r\n        columns = Math.floor(powerOfTwoSize / width);\r\n        rows = Math.ceil(dim[2] / columns);\r\n        width *= columns;\r\n        height *= rows;\r\n    }\r\n    else {\r\n        width *= dim[2];\r\n    }\r\n    return { width: width, height: height, columns: columns, rows: rows, powerOfTwoSize: height < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2 };\r\n}\r\nexport function createVolumeTexture2d(volume, variant, padding) {\r\n    if (padding === void 0) { padding = 0; }\r\n    var _a = volume.grid, _b = _a.cells, space = _b.space, data = _b.data, _c = _a.stats, max = _c.max, min = _c.min;\r\n    var dim = space.dimensions;\r\n    var o = space.dataOffset;\r\n    var _d = getVolumeTexture2dLayout(dim, padding), width = _d.width, height = _d.height;\r\n    var itemSize = variant === 'data' ? 1 : 4;\r\n    var array = new Uint8Array(width * height * itemSize);\r\n    var textureImage = { array: array, width: width, height: height };\r\n    var diff = max - min;\r\n    var xn = dim[0], yn = dim[1], zn = dim[2];\r\n    var xnp = xn + padding;\r\n    var ynp = yn + padding;\r\n    var n0 = Vec3();\r\n    var n1 = Vec3();\r\n    var xn1 = xn - 1;\r\n    var yn1 = yn - 1;\r\n    var zn1 = zn - 1;\r\n    for (var z = 0; z < zn; ++z) {\r\n        for (var y = 0; y < yn; ++y) {\r\n            for (var x = 0; x < xn; ++x) {\r\n                var column = Math.floor(((z * xnp) % width) / xnp);\r\n                var row = Math.floor((z * xnp) / width);\r\n                var px = column * xnp + x;\r\n                var index = itemSize * ((row * ynp * width) + (y * width) + px);\r\n                var offset = o(x, y, z);\r\n                if (variant === 'data') {\r\n                    array[index] = Math.round(((data[offset] - min) / diff) * 255);\r\n                }\r\n                else {\r\n                    if (variant === 'groups') {\r\n                        encodeFloatRGBtoArray(offset, array, index);\r\n                    }\r\n                    else {\r\n                        v3set(n0, data[o(Math.max(0, x - 1), y, z)], data[o(x, Math.max(0, y - 1), z)], data[o(x, y, Math.max(0, z - 1))]);\r\n                        v3set(n1, data[o(Math.min(xn1, x + 1), y, z)], data[o(x, Math.min(yn1, y + 1), z)], data[o(x, y, Math.min(zn1, z + 1))]);\r\n                        v3normalize(n0, v3sub(n0, n0, n1));\r\n                        v3addScalar(n0, v3scale(n0, n0, 0.5), 0.5);\r\n                        v3toArray(v3scale(n0, n0, 255), array, index);\r\n                    }\r\n                    array[index + 3] = Math.round(((data[offset] - min) / diff) * 255);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return textureImage;\r\n}\r\nexport function createVolumeTexture3d(volume) {\r\n    var _a = volume.grid, _b = _a.cells, space = _b.space, data = _b.data, _c = _a.stats, max = _c.max, min = _c.min;\r\n    var _d = space.dimensions, width = _d[0], height = _d[1], depth = _d[2];\r\n    var o = space.dataOffset;\r\n    var array = new Uint8Array(width * height * depth * 4);\r\n    var textureVolume = { array: array, width: width, height: height, depth: depth };\r\n    var diff = max - min;\r\n    var n0 = Vec3();\r\n    var n1 = Vec3();\r\n    var width1 = width - 1;\r\n    var height1 = height - 1;\r\n    var depth1 = depth - 1;\r\n    var i = 0;\r\n    for (var z = 0; z < depth; ++z) {\r\n        for (var y = 0; y < height; ++y) {\r\n            for (var x = 0; x < width; ++x) {\r\n                var offset = o(x, y, z);\r\n                v3set(n0, data[o(Math.max(0, x - 1), y, z)], data[o(x, Math.max(0, y - 1), z)], data[o(x, y, Math.max(0, z - 1))]);\r\n                v3set(n1, data[o(Math.min(width1, x + 1), y, z)], data[o(x, Math.min(height1, y + 1), z)], data[o(x, y, Math.min(depth1, z + 1))]);\r\n                v3normalize(n0, v3sub(n0, n0, n1));\r\n                v3addScalar(n0, v3scale(n0, n0, 0.5), 0.5);\r\n                v3toArray(v3scale(n0, n0, 255), array, i);\r\n                array[i + 3] = Math.round(((data[offset] - min) / diff) * 255);\r\n                i += 4;\r\n            }\r\n        }\r\n    }\r\n    return textureVolume;\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}