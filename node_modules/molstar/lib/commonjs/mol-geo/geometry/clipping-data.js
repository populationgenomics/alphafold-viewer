"use strict";
/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEmptyClipping = exports.createClipping = exports.clearClipping = exports.applyClippingGroups = void 0;
var value_cell_1 = require("../../mol-util/value-cell");
var linear_algebra_1 = require("../../mol-math/linear-algebra");
var util_1 = require("../../mol-gl/renderable/util");
function applyClippingGroups(array, start, end, groups) {
    for (var i = start; i < end; ++i) {
        array[i] = groups;
    }
    return true;
}
exports.applyClippingGroups = applyClippingGroups;
function clearClipping(array, start, end) {
    array.fill(0, start, end);
}
exports.clearClipping = clearClipping;
function createClipping(count, clippingData) {
    var clipping = (0, util_1.createTextureImage)(Math.max(1, count), 1, Uint8Array, clippingData && clippingData.tClipping.ref.value.array);
    if (clippingData) {
        value_cell_1.ValueCell.update(clippingData.tClipping, clipping);
        value_cell_1.ValueCell.update(clippingData.uClippingTexDim, linear_algebra_1.Vec2.create(clipping.width, clipping.height));
        value_cell_1.ValueCell.updateIfChanged(clippingData.dClipping, count > 0);
        return clippingData;
    }
    else {
        return {
            dClipObjectCount: value_cell_1.ValueCell.create(0),
            dClipVariant: value_cell_1.ValueCell.create('instance'),
            tClipping: value_cell_1.ValueCell.create(clipping),
            uClippingTexDim: value_cell_1.ValueCell.create(linear_algebra_1.Vec2.create(clipping.width, clipping.height)),
            dClipping: value_cell_1.ValueCell.create(count > 0),
        };
    }
}
exports.createClipping = createClipping;
var emptyClippingTexture = { array: new Uint8Array(1), width: 1, height: 1 };
function createEmptyClipping(clippingData) {
    if (clippingData) {
        value_cell_1.ValueCell.update(clippingData.tClipping, emptyClippingTexture);
        value_cell_1.ValueCell.update(clippingData.uClippingTexDim, linear_algebra_1.Vec2.create(1, 1));
        return clippingData;
    }
    else {
        return {
            dClipObjectCount: value_cell_1.ValueCell.create(0),
            dClipVariant: value_cell_1.ValueCell.create('instance'),
            tClipping: value_cell_1.ValueCell.create(emptyClippingTexture),
            uClippingTexDim: value_cell_1.ValueCell.create(linear_algebra_1.Vec2.create(1, 1)),
            dClipping: value_cell_1.ValueCell.create(false),
        };
    }
}
exports.createEmptyClipping = createEmptyClipping;
//# sourceMappingURL=clipping-data.js.map