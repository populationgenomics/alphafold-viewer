{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\n/*\r\n * This code has been modified from https://github.com/toji/gl-matrix/,\r\n * copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n */\nimport { EPSILON, equalEps } from './common';\nimport { degToRad } from '../../misc';\n\nfunction Mat4() {\n  return Mat4.zero();\n}\n/**\r\n * Stores a 4x4 matrix in a column major (j * 4 + i indexing) format.\r\n */\n\n\n(function (Mat4) {\n  function zero() {\n    // force double backing array by 0.1.\n    var ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    ret[0] = 0.0;\n    return ret;\n  }\n\n  Mat4.zero = zero;\n\n  function identity() {\n    var out = zero();\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.identity = identity;\n\n  function setIdentity(mat) {\n    mat[0] = 1;\n    mat[1] = 0;\n    mat[2] = 0;\n    mat[3] = 0;\n    mat[4] = 0;\n    mat[5] = 1;\n    mat[6] = 0;\n    mat[7] = 0;\n    mat[8] = 0;\n    mat[9] = 0;\n    mat[10] = 1;\n    mat[11] = 0;\n    mat[12] = 0;\n    mat[13] = 0;\n    mat[14] = 0;\n    mat[15] = 1;\n    return mat;\n  }\n\n  Mat4.setIdentity = setIdentity;\n\n  function setZero(mat) {\n    for (var i = 0; i < 16; i++) mat[i] = 0;\n\n    return mat;\n  }\n\n  Mat4.setZero = setZero;\n\n  function ofRows(rows) {\n    var out = zero();\n\n    for (var i = 0; i < 4; i++) {\n      var r = rows[i];\n\n      for (var j = 0; j < 4; j++) {\n        out[4 * j + i] = r[j];\n      }\n    }\n\n    return out;\n  }\n\n  Mat4.ofRows = ofRows;\n\n  var _id = identity();\n\n  function isIdentity(m, eps) {\n    return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);\n  }\n\n  Mat4.isIdentity = isIdentity;\n\n  function hasNaN(m) {\n    for (var i = 0; i < 16; i++) if (isNaN(m[i])) return true;\n\n    return false;\n  }\n\n  Mat4.hasNaN = hasNaN;\n\n  function areEqual(a, b, eps) {\n    for (var i = 0; i < 16; i++) {\n      if (Math.abs(a[i] - b[i]) > eps) return false;\n    }\n\n    return true;\n  }\n\n  Mat4.areEqual = areEqual;\n\n  function setValue(a, i, j, value) {\n    a[4 * j + i] = value;\n  }\n\n  Mat4.setValue = setValue;\n\n  function getValue(a, i, j) {\n    return a[4 * j + i];\n  }\n\n  Mat4.getValue = getValue;\n\n  function toArray(a, out, offset) {\n    out[offset + 0] = a[0];\n    out[offset + 1] = a[1];\n    out[offset + 2] = a[2];\n    out[offset + 3] = a[3];\n    out[offset + 4] = a[4];\n    out[offset + 5] = a[5];\n    out[offset + 6] = a[6];\n    out[offset + 7] = a[7];\n    out[offset + 8] = a[8];\n    out[offset + 9] = a[9];\n    out[offset + 10] = a[10];\n    out[offset + 11] = a[11];\n    out[offset + 12] = a[12];\n    out[offset + 13] = a[13];\n    out[offset + 14] = a[14];\n    out[offset + 15] = a[15];\n    return out;\n  }\n\n  Mat4.toArray = toArray;\n\n  function fromArray(a, array, offset) {\n    a[0] = array[offset + 0];\n    a[1] = array[offset + 1];\n    a[2] = array[offset + 2];\n    a[3] = array[offset + 3];\n    a[4] = array[offset + 4];\n    a[5] = array[offset + 5];\n    a[6] = array[offset + 6];\n    a[7] = array[offset + 7];\n    a[8] = array[offset + 8];\n    a[9] = array[offset + 9];\n    a[10] = array[offset + 10];\n    a[11] = array[offset + 11];\n    a[12] = array[offset + 12];\n    a[13] = array[offset + 13];\n    a[14] = array[offset + 14];\n    a[15] = array[offset + 15];\n    return a;\n  }\n\n  Mat4.fromArray = fromArray;\n\n  function fromBasis(a, x, y, z) {\n    setZero(a);\n    setValue(a, 0, 0, x[0]);\n    setValue(a, 1, 0, x[1]);\n    setValue(a, 2, 0, x[2]);\n    setValue(a, 0, 1, y[0]);\n    setValue(a, 1, 1, y[1]);\n    setValue(a, 2, 1, y[2]);\n    setValue(a, 0, 2, z[0]);\n    setValue(a, 1, 2, z[1]);\n    setValue(a, 2, 2, z[2]);\n    setValue(a, 3, 3, 1);\n    return a;\n  }\n\n  Mat4.fromBasis = fromBasis;\n\n  function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  Mat4.copy = copy;\n\n  function clone(a) {\n    return copy(zero(), a);\n  }\n\n  Mat4.clone = clone;\n  /**\r\n   * Returns the translation vector component of a transformation matrix.\r\n   */\n\n  function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n  }\n\n  Mat4.getTranslation = getTranslation;\n  /**\r\n   * Returns the scaling factor component of a transformation matrix.\r\n   */\n\n  function getScaling(out, mat) {\n    var m11 = mat[0];\n    var m12 = mat[1];\n    var m13 = mat[2];\n    var m21 = mat[4];\n    var m22 = mat[5];\n    var m23 = mat[6];\n    var m31 = mat[8];\n    var m32 = mat[9];\n    var m33 = mat[10];\n    out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n    return out;\n  }\n\n  Mat4.getScaling = getScaling;\n  /**\r\n   * Returns a quaternion representing the rotational component of a transformation matrix.\r\n   */\n\n  function getRotation(out, mat) {\n    // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    var trace = mat[0] + mat[5] + mat[10];\n    var S = 0;\n\n    if (trace > 0) {\n      S = Math.sqrt(trace + 1.0) * 2;\n      out[3] = 0.25 * S;\n      out[0] = (mat[6] - mat[9]) / S;\n      out[1] = (mat[8] - mat[2]) / S;\n      out[2] = (mat[1] - mat[4]) / S;\n    } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n      S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n      out[3] = (mat[6] - mat[9]) / S;\n      out[0] = 0.25 * S;\n      out[1] = (mat[1] + mat[4]) / S;\n      out[2] = (mat[8] + mat[2]) / S;\n    } else if (mat[5] > mat[10]) {\n      S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n      out[3] = (mat[8] - mat[2]) / S;\n      out[0] = (mat[1] + mat[4]) / S;\n      out[1] = 0.25 * S;\n      out[2] = (mat[6] + mat[9]) / S;\n    } else {\n      S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n      out[3] = (mat[1] - mat[4]) / S;\n      out[0] = (mat[8] + mat[2]) / S;\n      out[1] = (mat[6] + mat[9]) / S;\n      out[2] = 0.25 * S;\n    }\n\n    return out;\n  }\n\n  Mat4.getRotation = getRotation;\n\n  function extractRotation(out, mat) {\n    var scaleX = 1 / Math.sqrt(mat[0] * mat[0] + mat[1] * mat[1] + mat[2] * mat[2]);\n    var scaleY = 1 / Math.sqrt(mat[4] * mat[4] + mat[5] * mat[5] + mat[6] * mat[6]);\n    var scaleZ = 1 / Math.sqrt(mat[8] * mat[8] + mat[9] * mat[9] + mat[10] * mat[10]);\n    out[0] = mat[0] * scaleX;\n    out[1] = mat[1] * scaleX;\n    out[2] = mat[2] * scaleX;\n    out[3] = 0;\n    out[4] = mat[4] * scaleY;\n    out[5] = mat[5] * scaleY;\n    out[6] = mat[6] * scaleY;\n    out[7] = 0;\n    out[8] = mat[8] * scaleZ;\n    out[9] = mat[9] * scaleZ;\n    out[10] = mat[10] * scaleZ;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.extractRotation = extractRotation;\n\n  function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      var a01 = a[1],\n          a02 = a[2],\n          a03 = a[3];\n      var a12 = a[6],\n          a13 = a[7];\n      var a23 = a[11];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a01;\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a02;\n      out[9] = a12;\n      out[11] = a[14];\n      out[12] = a03;\n      out[13] = a13;\n      out[14] = a23;\n    } else {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a[1];\n      out[5] = a[5];\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a[2];\n      out[9] = a[6];\n      out[10] = a[10];\n      out[11] = a[14];\n      out[12] = a[3];\n      out[13] = a[7];\n      out[14] = a[11];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n  Mat4.transpose = transpose;\n\n  function tryInvert(out, a) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11],\n        a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15],\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return false;\n    }\n\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return true;\n  }\n\n  Mat4.tryInvert = tryInvert;\n\n  function invert(out, a) {\n    if (!tryInvert(out, a)) {\n      console.warn('non-invertible matrix.', a);\n    }\n\n    return out;\n  }\n\n  Mat4.invert = invert;\n\n  function mul(out, a, b) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11],\n        a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15]; // Cache only the current line of the second matrix\n\n    var b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  }\n\n  Mat4.mul = mul;\n  /**\r\n   * Like `mul` but with offsets into arrays\r\n   */\n\n  function mulOffset(out, a, b, oOut, oA, oB) {\n    var a00 = a[0 + oA],\n        a01 = a[1 + oA],\n        a02 = a[2 + oA],\n        a03 = a[3 + oA],\n        a10 = a[4 + oA],\n        a11 = a[5 + oA],\n        a12 = a[6 + oA],\n        a13 = a[7 + oA],\n        a20 = a[8 + oA],\n        a21 = a[9 + oA],\n        a22 = a[10 + oA],\n        a23 = a[11 + oA],\n        a30 = a[12 + oA],\n        a31 = a[13 + oA],\n        a32 = a[14 + oA],\n        a33 = a[15 + oA]; // Cache only the current line of the second matrix\n\n    var b0 = b[0 + oB],\n        b1 = b[1 + oB],\n        b2 = b[2 + oB],\n        b3 = b[3 + oB];\n    out[0 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4 + oB];\n    b1 = b[5 + oB];\n    b2 = b[6 + oB];\n    b3 = b[7 + oB];\n    out[4 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8 + oB];\n    b1 = b[9 + oB];\n    b2 = b[10 + oB];\n    b3 = b[11 + oB];\n    out[8 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12 + oB];\n    b1 = b[13 + oB];\n    b2 = b[14 + oB];\n    b3 = b[15 + oB];\n    out[12 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  }\n\n  Mat4.mulOffset = mulOffset;\n\n  function mul3(out, a, b, c) {\n    return mul(out, mul(out, a, b), c);\n  }\n\n  Mat4.mul3 = mul3;\n  /** Translate a Mat4 by the given Vec3 */\n\n  function translate(out, a, v) {\n    var x = v[0],\n        y = v[1],\n        z = v[2];\n    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n\n    if (a === out) {\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n      a00 = a[0];\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a10 = a[4];\n      a11 = a[5];\n      a12 = a[6];\n      a13 = a[7];\n      a20 = a[8];\n      a21 = a[9];\n      a22 = a[10];\n      a23 = a[11];\n      out[0] = a00;\n      out[1] = a01;\n      out[2] = a02;\n      out[3] = a03;\n      out[4] = a10;\n      out[5] = a11;\n      out[6] = a12;\n      out[7] = a13;\n      out[8] = a20;\n      out[9] = a21;\n      out[10] = a22;\n      out[11] = a23;\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n  }\n\n  Mat4.translate = translate;\n\n  function fromTranslation(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.fromTranslation = fromTranslation;\n\n  function setTranslation(out, v) {\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    return out;\n  }\n\n  Mat4.setTranslation = setTranslation;\n  /**\r\n   * Sets the specified quaternion with values corresponding to the given\r\n   * axes. Each axis is a vec3 and is expected to be unit length and\r\n   * perpendicular to all other specified axes.\r\n   */\n\n  function setAxes(out, view, right, up) {\n    out[0] = right[0];\n    out[4] = right[1];\n    out[8] = right[2];\n    out[1] = up[0];\n    out[5] = up[1];\n    out[9] = up[2];\n    out[2] = view[0];\n    out[6] = view[1];\n    out[10] = view[2];\n    return out;\n  }\n\n  Mat4.setAxes = setAxes;\n\n  function rotate(out, a, rad, axis) {\n    var x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    var len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < EPSILON) {\n      return identity();\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var t = 1 - c;\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    var a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11]; // Construct the elements of the rotation matrix\n\n    var b00 = x * x * t + c,\n        b01 = y * x * t + z * s,\n        b02 = z * x * t - y * s;\n    var b10 = x * y * t - z * s,\n        b11 = y * y * t + c,\n        b12 = z * y * t + x * s;\n    var b20 = x * z * t + y * s,\n        b21 = y * z * t - x * s,\n        b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n  Mat4.rotate = rotate;\n\n  function fromRotation(out, rad, axis) {\n    var x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    var len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < EPSILON) {\n      return setIdentity(out);\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var t = 1 - c; // Perform rotation-specific matrix multiplication\n\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.fromRotation = fromRotation;\n\n  function scale(out, a, v) {\n    var x = v[0],\n        y = v[1],\n        z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  Mat4.scale = scale;\n\n  function scaleUniformly(out, a, scale) {\n    out[0] = a[0] * scale;\n    out[1] = a[1] * scale;\n    out[2] = a[2] * scale;\n    out[3] = a[3] * scale;\n    out[4] = a[4] * scale;\n    out[5] = a[5] * scale;\n    out[6] = a[6] * scale;\n    out[7] = a[7] * scale;\n    out[8] = a[8] * scale;\n    out[9] = a[9] * scale;\n    out[10] = a[10] * scale;\n    out[11] = a[11] * scale;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  }\n\n  Mat4.scaleUniformly = scaleUniformly;\n\n  function fromScaling(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.fromScaling = fromScaling;\n\n  function fromUniformScaling(out, scale) {\n    out[0] = scale;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = scale;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = scale;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.fromUniformScaling = fromUniformScaling;\n  /**\r\n   * Copies the mat3 into upper-left 3x3 values.\r\n   */\n\n  function fromMat3(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[4] = a[3];\n    out[5] = a[4];\n    out[6] = a[5];\n    out[8] = a[6];\n    out[9] = a[7];\n    out[10] = a[8];\n    return out;\n  }\n\n  Mat4.fromMat3 = fromMat3;\n\n  function makeTable(m) {\n    var ret = '';\n\n    for (var i = 0; i < 4; i++) {\n      for (var j = 0; j < 4; j++) {\n        ret += m[4 * j + i].toString();\n        if (j < 3) ret += ' ';\n      }\n\n      if (i < 3) ret += '\\n';\n    }\n\n    return ret;\n  }\n\n  Mat4.makeTable = makeTable;\n\n  function determinant(a) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11],\n        a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15],\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  Mat4.determinant = determinant;\n  /**\r\n   * Check if the matrix has the form\r\n   * [ Rotation    Translation ]\r\n   * [ 0           1           ]\r\n   *\r\n   * Allows for improper rotations\r\n   */\n\n  function isRotationAndTranslation(a, eps) {\n    return _isRotationAndTranslation(a, typeof eps !== 'undefined' ? eps : EPSILON);\n  }\n\n  Mat4.isRotationAndTranslation = isRotationAndTranslation;\n\n  function _isRotationAndTranslation(a, eps) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11],\n        a33 = a[15];\n\n    if (!equalEps(a33, 1, eps) || !equalEps(a03, 0, eps) || !equalEps(a13, 0, eps) || !equalEps(a23, 0, eps)) {\n      return false;\n    } // use `abs` to allow for improper rotations\n\n\n    var det3x3 = Math.abs(a00 * (a11 * a22 - a12 * a21) - a01 * (a10 * a22 - a12 * a20) + a02 * (a10 * a21 - a11 * a20));\n\n    if (!equalEps(det3x3, 1, eps)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if the matrix has only translation and uniform scaling\r\n   * [ S  0  0  X ]\r\n   * [ 0  S  0  Y ]\r\n   * [ 0  0  S  Z ]\r\n   * [ 0  0  0  1 ]\r\n   */\n\n\n  function isTranslationAndUniformScaling(a, eps) {\n    return _isTranslationAndUniformScaling(a, typeof eps !== 'undefined' ? eps : EPSILON);\n  }\n\n  Mat4.isTranslationAndUniformScaling = isTranslationAndUniformScaling;\n\n  function _isTranslationAndUniformScaling(a, eps) {\n    var a00 = a[0];\n    return (// 0 base scaling\n      equalEps(a[1], 0, eps) && equalEps(a[2], 0, eps) && equalEps(a[3], 0, eps) && equalEps(a[4], 0, eps) && equalEps(a[5], a00, eps) && equalEps(a[6], 0, eps) && equalEps(a[7], 0, eps) && equalEps(a[8], 0, eps) && equalEps(a[9], 0, eps) && equalEps(a[10], a00, eps) && equalEps(a[11], 0, eps) && // 12, 13, 14 translation can be anything\n      equalEps(a[15], 1, eps)\n    );\n  }\n\n  function fromQuat(out, q) {\n    var x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var yx = y * x2;\n    var yy = y * y2;\n    var zx = z * x2;\n    var zy = z * y2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.fromQuat = fromQuat;\n  /**\r\n   * Generates a perspective projection (frustum) matrix with the given bounds\r\n   */\n\n  function perspective(out, left, right, top, bottom, near, far) {\n    var x = 2 * near / (right - left);\n    var y = 2 * near / (top - bottom);\n    var a = (right + left) / (right - left);\n    var b = (top + bottom) / (top - bottom);\n    var c = -(far + near) / (far - near);\n    var d = -2 * far * near / (far - near);\n    out[0] = x;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = y;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = a;\n    out[9] = b;\n    out[10] = c;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = d;\n    out[15] = 0;\n    return out;\n  }\n\n  Mat4.perspective = perspective;\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds\r\n   */\n\n  function ortho(out, left, right, top, bottom, near, far) {\n    var w = 1.0 / (right - left);\n    var h = 1.0 / (top - bottom);\n    var p = 1.0 / (far - near);\n    var x = (right + left) * w;\n    var y = (top + bottom) * h;\n    var z = (far + near) * p;\n    out[0] = 2 * w;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 2 * h;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = -2 * p;\n    out[11] = 0;\n    out[12] = -x;\n    out[13] = -y;\n    out[14] = -z;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.ortho = ortho;\n  /**\r\n   * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n   */\n\n  function lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n    var eyex = eye[0];\n    var eyey = eye[1];\n    var eyez = eye[2];\n    var upx = up[0];\n    var upy = up[1];\n    var upz = up[2];\n    var centerx = center[0];\n    var centery = center[1];\n    var centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {\n      return setIdentity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.lookAt = lookAt;\n  /**\r\n   * Generates a matrix that makes something look at something else.\r\n   */\n\n  function targetTo(out, eye, target, up) {\n    var eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n    var z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n    var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      z0 *= len;\n      z1 *= len;\n      z2 *= len;\n    }\n\n    var x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n  }\n\n  Mat4.targetTo = targetTo;\n  /**\r\n   * Perm is 0-indexed permutation\r\n   */\n\n  function fromPermutation(out, perm) {\n    setZero(out);\n\n    for (var i = 0; i < 4; i++) {\n      var p = perm[i];\n      setValue(out, i, p, 1);\n    }\n\n    return out;\n  }\n\n  Mat4.fromPermutation = fromPermutation;\n\n  function getMaxScaleOnAxis(m) {\n    var scaleXSq = m[0] * m[0] + m[1] * m[1] + m[2] * m[2];\n    var scaleYSq = m[4] * m[4] + m[5] * m[5] + m[6] * m[6];\n    var scaleZSq = m[8] * m[8] + m[9] * m[9] + m[10] * m[10];\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n  }\n\n  Mat4.getMaxScaleOnAxis = getMaxScaleOnAxis;\n  var xAxis = [1, 0, 0];\n  var yAxis = [0, 1, 0];\n  var zAxis = [0, 0, 1];\n  /** Rotation matrix for 90deg around x-axis */\n\n  Mat4.rotX90 = fromRotation(zero(), degToRad(90), xAxis);\n  /** Rotation matrix for 180deg around x-axis */\n\n  Mat4.rotX180 = fromRotation(zero(), degToRad(180), xAxis);\n  /** Rotation matrix for 90deg around y-axis */\n\n  Mat4.rotY90 = fromRotation(zero(), degToRad(90), yAxis);\n  /** Rotation matrix for 180deg around y-axis */\n\n  Mat4.rotY180 = fromRotation(zero(), degToRad(180), yAxis);\n  /** Rotation matrix for 270deg around y-axis */\n\n  Mat4.rotY270 = fromRotation(zero(), degToRad(270), yAxis);\n  /** Rotation matrix for 90deg around z-axis */\n\n  Mat4.rotZ90 = fromRotation(zero(), degToRad(90), zAxis);\n  /** Rotation matrix for 180deg around z-axis */\n\n  Mat4.rotZ180 = fromRotation(zero(), degToRad(180), zAxis);\n  /** Rotation matrix for 90deg around first x-axis and then y-axis */\n\n  Mat4.rotXY90 = mul(zero(), Mat4.rotX90, Mat4.rotY90);\n  /** Rotation matrix for 90deg around first z-axis and then y-axis */\n\n  Mat4.rotZY90 = mul(zero(), Mat4.rotZ90, Mat4.rotY90);\n  /** Rotation matrix for 90deg around first z-axis and then y-axis and then z-axis */\n\n  Mat4.rotZYZ90 = mul(zero(), Mat4.rotZY90, Mat4.rotZ90);\n  /** Rotation matrix for 90deg around first z-axis and then 180deg around x-axis */\n\n  Mat4.rotZ90X180 = mul(zero(), Mat4.rotZ90, Mat4.rotX180);\n  /** Rotation matrix for 90deg around first y-axis and then 180deg around z-axis */\n\n  Mat4.rotY90Z180 = mul(zero(), Mat4.rotY90, Mat4.rotZ180);\n  /** Identity matrix */\n\n  Mat4.id = identity();\n})(Mat4 || (Mat4 = {}));\n\nexport { Mat4 };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/3d/mat4.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n/*\r\n * This code has been modified from https://github.com/toji/gl-matrix/,\r\n * copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n */\r\nimport { EPSILON, equalEps } from './common';\r\nimport { degToRad } from '../../misc';\r\nfunction Mat4() {\r\n    return Mat4.zero();\r\n}\r\n/**\r\n * Stores a 4x4 matrix in a column major (j * 4 + i indexing) format.\r\n */\r\n(function (Mat4) {\r\n    function zero() {\r\n        // force double backing array by 0.1.\r\n        var ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        ret[0] = 0.0;\r\n        return ret;\r\n    }\r\n    Mat4.zero = zero;\r\n    function identity() {\r\n        var out = zero();\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 1;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 1;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.identity = identity;\r\n    function setIdentity(mat) {\r\n        mat[0] = 1;\r\n        mat[1] = 0;\r\n        mat[2] = 0;\r\n        mat[3] = 0;\r\n        mat[4] = 0;\r\n        mat[5] = 1;\r\n        mat[6] = 0;\r\n        mat[7] = 0;\r\n        mat[8] = 0;\r\n        mat[9] = 0;\r\n        mat[10] = 1;\r\n        mat[11] = 0;\r\n        mat[12] = 0;\r\n        mat[13] = 0;\r\n        mat[14] = 0;\r\n        mat[15] = 1;\r\n        return mat;\r\n    }\r\n    Mat4.setIdentity = setIdentity;\r\n    function setZero(mat) {\r\n        for (var i = 0; i < 16; i++)\r\n            mat[i] = 0;\r\n        return mat;\r\n    }\r\n    Mat4.setZero = setZero;\r\n    function ofRows(rows) {\r\n        var out = zero();\r\n        for (var i = 0; i < 4; i++) {\r\n            var r = rows[i];\r\n            for (var j = 0; j < 4; j++) {\r\n                out[4 * j + i] = r[j];\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.ofRows = ofRows;\r\n    var _id = identity();\r\n    function isIdentity(m, eps) {\r\n        return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);\r\n    }\r\n    Mat4.isIdentity = isIdentity;\r\n    function hasNaN(m) {\r\n        for (var i = 0; i < 16; i++)\r\n            if (isNaN(m[i]))\r\n                return true;\r\n        return false;\r\n    }\r\n    Mat4.hasNaN = hasNaN;\r\n    function areEqual(a, b, eps) {\r\n        for (var i = 0; i < 16; i++) {\r\n            if (Math.abs(a[i] - b[i]) > eps)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Mat4.areEqual = areEqual;\r\n    function setValue(a, i, j, value) {\r\n        a[4 * j + i] = value;\r\n    }\r\n    Mat4.setValue = setValue;\r\n    function getValue(a, i, j) {\r\n        return a[4 * j + i];\r\n    }\r\n    Mat4.getValue = getValue;\r\n    function toArray(a, out, offset) {\r\n        out[offset + 0] = a[0];\r\n        out[offset + 1] = a[1];\r\n        out[offset + 2] = a[2];\r\n        out[offset + 3] = a[3];\r\n        out[offset + 4] = a[4];\r\n        out[offset + 5] = a[5];\r\n        out[offset + 6] = a[6];\r\n        out[offset + 7] = a[7];\r\n        out[offset + 8] = a[8];\r\n        out[offset + 9] = a[9];\r\n        out[offset + 10] = a[10];\r\n        out[offset + 11] = a[11];\r\n        out[offset + 12] = a[12];\r\n        out[offset + 13] = a[13];\r\n        out[offset + 14] = a[14];\r\n        out[offset + 15] = a[15];\r\n        return out;\r\n    }\r\n    Mat4.toArray = toArray;\r\n    function fromArray(a, array, offset) {\r\n        a[0] = array[offset + 0];\r\n        a[1] = array[offset + 1];\r\n        a[2] = array[offset + 2];\r\n        a[3] = array[offset + 3];\r\n        a[4] = array[offset + 4];\r\n        a[5] = array[offset + 5];\r\n        a[6] = array[offset + 6];\r\n        a[7] = array[offset + 7];\r\n        a[8] = array[offset + 8];\r\n        a[9] = array[offset + 9];\r\n        a[10] = array[offset + 10];\r\n        a[11] = array[offset + 11];\r\n        a[12] = array[offset + 12];\r\n        a[13] = array[offset + 13];\r\n        a[14] = array[offset + 14];\r\n        a[15] = array[offset + 15];\r\n        return a;\r\n    }\r\n    Mat4.fromArray = fromArray;\r\n    function fromBasis(a, x, y, z) {\r\n        setZero(a);\r\n        setValue(a, 0, 0, x[0]);\r\n        setValue(a, 1, 0, x[1]);\r\n        setValue(a, 2, 0, x[2]);\r\n        setValue(a, 0, 1, y[0]);\r\n        setValue(a, 1, 1, y[1]);\r\n        setValue(a, 2, 1, y[2]);\r\n        setValue(a, 0, 2, z[0]);\r\n        setValue(a, 1, 2, z[1]);\r\n        setValue(a, 2, 2, z[2]);\r\n        setValue(a, 3, 3, 1);\r\n        return a;\r\n    }\r\n    Mat4.fromBasis = fromBasis;\r\n    function copy(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n        out[9] = a[9];\r\n        out[10] = a[10];\r\n        out[11] = a[11];\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n        return out;\r\n    }\r\n    Mat4.copy = copy;\r\n    function clone(a) {\r\n        return copy(zero(), a);\r\n    }\r\n    Mat4.clone = clone;\r\n    /**\r\n     * Returns the translation vector component of a transformation matrix.\r\n     */\r\n    function getTranslation(out, mat) {\r\n        out[0] = mat[12];\r\n        out[1] = mat[13];\r\n        out[2] = mat[14];\r\n        return out;\r\n    }\r\n    Mat4.getTranslation = getTranslation;\r\n    /**\r\n     * Returns the scaling factor component of a transformation matrix.\r\n     */\r\n    function getScaling(out, mat) {\r\n        var m11 = mat[0];\r\n        var m12 = mat[1];\r\n        var m13 = mat[2];\r\n        var m21 = mat[4];\r\n        var m22 = mat[5];\r\n        var m23 = mat[6];\r\n        var m31 = mat[8];\r\n        var m32 = mat[9];\r\n        var m33 = mat[10];\r\n        out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n        out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n        out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n        return out;\r\n    }\r\n    Mat4.getScaling = getScaling;\r\n    /**\r\n     * Returns a quaternion representing the rotational component of a transformation matrix.\r\n     */\r\n    function getRotation(out, mat) {\r\n        // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n        var trace = mat[0] + mat[5] + mat[10];\r\n        var S = 0;\r\n        if (trace > 0) {\r\n            S = Math.sqrt(trace + 1.0) * 2;\r\n            out[3] = 0.25 * S;\r\n            out[0] = (mat[6] - mat[9]) / S;\r\n            out[1] = (mat[8] - mat[2]) / S;\r\n            out[2] = (mat[1] - mat[4]) / S;\r\n        }\r\n        else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\r\n            S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n            out[3] = (mat[6] - mat[9]) / S;\r\n            out[0] = 0.25 * S;\r\n            out[1] = (mat[1] + mat[4]) / S;\r\n            out[2] = (mat[8] + mat[2]) / S;\r\n        }\r\n        else if (mat[5] > mat[10]) {\r\n            S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n            out[3] = (mat[8] - mat[2]) / S;\r\n            out[0] = (mat[1] + mat[4]) / S;\r\n            out[1] = 0.25 * S;\r\n            out[2] = (mat[6] + mat[9]) / S;\r\n        }\r\n        else {\r\n            S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n            out[3] = (mat[1] - mat[4]) / S;\r\n            out[0] = (mat[8] + mat[2]) / S;\r\n            out[1] = (mat[6] + mat[9]) / S;\r\n            out[2] = 0.25 * S;\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.getRotation = getRotation;\r\n    function extractRotation(out, mat) {\r\n        var scaleX = 1 / Math.sqrt(mat[0] * mat[0] + mat[1] * mat[1] + mat[2] * mat[2]);\r\n        var scaleY = 1 / Math.sqrt(mat[4] * mat[4] + mat[5] * mat[5] + mat[6] * mat[6]);\r\n        var scaleZ = 1 / Math.sqrt(mat[8] * mat[8] + mat[9] * mat[9] + mat[10] * mat[10]);\r\n        out[0] = mat[0] * scaleX;\r\n        out[1] = mat[1] * scaleX;\r\n        out[2] = mat[2] * scaleX;\r\n        out[3] = 0;\r\n        out[4] = mat[4] * scaleY;\r\n        out[5] = mat[5] * scaleY;\r\n        out[6] = mat[6] * scaleY;\r\n        out[7] = 0;\r\n        out[8] = mat[8] * scaleZ;\r\n        out[9] = mat[9] * scaleZ;\r\n        out[10] = mat[10] * scaleZ;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.extractRotation = extractRotation;\r\n    function transpose(out, a) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            var a01 = a[1], a02 = a[2], a03 = a[3];\r\n            var a12 = a[6], a13 = a[7];\r\n            var a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        }\r\n        else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.transpose = transpose;\r\n    function tryInvert(out, a) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;\r\n        // Calculate the determinant\r\n        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            return false;\r\n        }\r\n        det = 1.0 / det;\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n        return true;\r\n    }\r\n    Mat4.tryInvert = tryInvert;\r\n    function invert(out, a) {\r\n        if (!tryInvert(out, a)) {\r\n            console.warn('non-invertible matrix.', a);\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.invert = invert;\r\n    function mul(out, a, b) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n        // Cache only the current line of the second matrix\r\n        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[4];\r\n        b1 = b[5];\r\n        b2 = b[6];\r\n        b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[8];\r\n        b1 = b[9];\r\n        b2 = b[10];\r\n        b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[12];\r\n        b1 = b[13];\r\n        b2 = b[14];\r\n        b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n    Mat4.mul = mul;\r\n    /**\r\n     * Like `mul` but with offsets into arrays\r\n     */\r\n    function mulOffset(out, a, b, oOut, oA, oB) {\r\n        var a00 = a[0 + oA], a01 = a[1 + oA], a02 = a[2 + oA], a03 = a[3 + oA], a10 = a[4 + oA], a11 = a[5 + oA], a12 = a[6 + oA], a13 = a[7 + oA], a20 = a[8 + oA], a21 = a[9 + oA], a22 = a[10 + oA], a23 = a[11 + oA], a30 = a[12 + oA], a31 = a[13 + oA], a32 = a[14 + oA], a33 = a[15 + oA];\r\n        // Cache only the current line of the second matrix\r\n        var b0 = b[0 + oB], b1 = b[1 + oB], b2 = b[2 + oB], b3 = b[3 + oB];\r\n        out[0 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[4 + oB];\r\n        b1 = b[5 + oB];\r\n        b2 = b[6 + oB];\r\n        b3 = b[7 + oB];\r\n        out[4 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[8 + oB];\r\n        b1 = b[9 + oB];\r\n        b2 = b[10 + oB];\r\n        b3 = b[11 + oB];\r\n        out[8 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b[12 + oB];\r\n        b1 = b[13 + oB];\r\n        b2 = b[14 + oB];\r\n        b3 = b[15 + oB];\r\n        out[12 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n    Mat4.mulOffset = mulOffset;\r\n    function mul3(out, a, b, c) {\r\n        return mul(out, mul(out, a, b), c);\r\n    }\r\n    Mat4.mul3 = mul3;\r\n    /** Translate a Mat4 by the given Vec3 */\r\n    function translate(out, a, v) {\r\n        var x = v[0], y = v[1], z = v[2];\r\n        var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\r\n        if (a === out) {\r\n            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n        }\r\n        else {\r\n            a00 = a[0];\r\n            a01 = a[1];\r\n            a02 = a[2];\r\n            a03 = a[3];\r\n            a10 = a[4];\r\n            a11 = a[5];\r\n            a12 = a[6];\r\n            a13 = a[7];\r\n            a20 = a[8];\r\n            a21 = a[9];\r\n            a22 = a[10];\r\n            a23 = a[11];\r\n            out[0] = a00;\r\n            out[1] = a01;\r\n            out[2] = a02;\r\n            out[3] = a03;\r\n            out[4] = a10;\r\n            out[5] = a11;\r\n            out[6] = a12;\r\n            out[7] = a13;\r\n            out[8] = a20;\r\n            out[9] = a21;\r\n            out[10] = a22;\r\n            out[11] = a23;\r\n            out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n            out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n            out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n            out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.translate = translate;\r\n    function fromTranslation(out, v) {\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 1;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 1;\r\n        out[11] = 0;\r\n        out[12] = v[0];\r\n        out[13] = v[1];\r\n        out[14] = v[2];\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.fromTranslation = fromTranslation;\r\n    function setTranslation(out, v) {\r\n        out[12] = v[0];\r\n        out[13] = v[1];\r\n        out[14] = v[2];\r\n        return out;\r\n    }\r\n    Mat4.setTranslation = setTranslation;\r\n    /**\r\n     * Sets the specified quaternion with values corresponding to the given\r\n     * axes. Each axis is a vec3 and is expected to be unit length and\r\n     * perpendicular to all other specified axes.\r\n     */\r\n    function setAxes(out, view, right, up) {\r\n        out[0] = right[0];\r\n        out[4] = right[1];\r\n        out[8] = right[2];\r\n        out[1] = up[0];\r\n        out[5] = up[1];\r\n        out[9] = up[2];\r\n        out[2] = view[0];\r\n        out[6] = view[1];\r\n        out[10] = view[2];\r\n        return out;\r\n    }\r\n    Mat4.setAxes = setAxes;\r\n    function rotate(out, a, rad, axis) {\r\n        var x = axis[0], y = axis[1], z = axis[2];\r\n        var len = Math.sqrt(x * x + y * y + z * z);\r\n        if (Math.abs(len) < EPSILON) {\r\n            return identity();\r\n        }\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n        var t = 1 - c;\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n        // Construct the elements of the rotation matrix\r\n        var b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s;\r\n        var b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s;\r\n        var b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        if (a !== out) { // If the source and destination differ, copy the unchanged last row\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.rotate = rotate;\r\n    function fromRotation(out, rad, axis) {\r\n        var x = axis[0], y = axis[1], z = axis[2];\r\n        var len = Math.sqrt(x * x + y * y + z * z);\r\n        if (Math.abs(len) < EPSILON) {\r\n            return setIdentity(out);\r\n        }\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n        var t = 1 - c;\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = x * x * t + c;\r\n        out[1] = y * x * t + z * s;\r\n        out[2] = z * x * t - y * s;\r\n        out[3] = 0;\r\n        out[4] = x * y * t - z * s;\r\n        out[5] = y * y * t + c;\r\n        out[6] = z * y * t + x * s;\r\n        out[7] = 0;\r\n        out[8] = x * z * t + y * s;\r\n        out[9] = y * z * t - x * s;\r\n        out[10] = z * z * t + c;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.fromRotation = fromRotation;\r\n    function scale(out, a, v) {\r\n        var x = v[0], y = v[1], z = v[2];\r\n        out[0] = a[0] * x;\r\n        out[1] = a[1] * x;\r\n        out[2] = a[2] * x;\r\n        out[3] = a[3] * x;\r\n        out[4] = a[4] * y;\r\n        out[5] = a[5] * y;\r\n        out[6] = a[6] * y;\r\n        out[7] = a[7] * y;\r\n        out[8] = a[8] * z;\r\n        out[9] = a[9] * z;\r\n        out[10] = a[10] * z;\r\n        out[11] = a[11] * z;\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n        return out;\r\n    }\r\n    Mat4.scale = scale;\r\n    function scaleUniformly(out, a, scale) {\r\n        out[0] = a[0] * scale;\r\n        out[1] = a[1] * scale;\r\n        out[2] = a[2] * scale;\r\n        out[3] = a[3] * scale;\r\n        out[4] = a[4] * scale;\r\n        out[5] = a[5] * scale;\r\n        out[6] = a[6] * scale;\r\n        out[7] = a[7] * scale;\r\n        out[8] = a[8] * scale;\r\n        out[9] = a[9] * scale;\r\n        out[10] = a[10] * scale;\r\n        out[11] = a[11] * scale;\r\n        out[12] = a[12];\r\n        out[13] = a[13];\r\n        out[14] = a[14];\r\n        out[15] = a[15];\r\n        return out;\r\n    }\r\n    Mat4.scaleUniformly = scaleUniformly;\r\n    function fromScaling(out, v) {\r\n        out[0] = v[0];\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = v[1];\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = v[2];\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.fromScaling = fromScaling;\r\n    function fromUniformScaling(out, scale) {\r\n        out[0] = scale;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = scale;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = scale;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.fromUniformScaling = fromUniformScaling;\r\n    /**\r\n     * Copies the mat3 into upper-left 3x3 values.\r\n     */\r\n    function fromMat3(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[4] = a[3];\r\n        out[5] = a[4];\r\n        out[6] = a[5];\r\n        out[8] = a[6];\r\n        out[9] = a[7];\r\n        out[10] = a[8];\r\n        return out;\r\n    }\r\n    Mat4.fromMat3 = fromMat3;\r\n    function makeTable(m) {\r\n        var ret = '';\r\n        for (var i = 0; i < 4; i++) {\r\n            for (var j = 0; j < 4; j++) {\r\n                ret += m[4 * j + i].toString();\r\n                if (j < 3)\r\n                    ret += ' ';\r\n            }\r\n            if (i < 3)\r\n                ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n    Mat4.makeTable = makeTable;\r\n    function determinant(a) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;\r\n        // Calculate the determinant\r\n        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n    }\r\n    Mat4.determinant = determinant;\r\n    /**\r\n     * Check if the matrix has the form\r\n     * [ Rotation    Translation ]\r\n     * [ 0           1           ]\r\n     *\r\n     * Allows for improper rotations\r\n     */\r\n    function isRotationAndTranslation(a, eps) {\r\n        return _isRotationAndTranslation(a, typeof eps !== 'undefined' ? eps : EPSILON);\r\n    }\r\n    Mat4.isRotationAndTranslation = isRotationAndTranslation;\r\n    function _isRotationAndTranslation(a, eps) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a33 = a[15];\r\n        if (!equalEps(a33, 1, eps) || !equalEps(a03, 0, eps) || !equalEps(a13, 0, eps) || !equalEps(a23, 0, eps)) {\r\n            return false;\r\n        }\r\n        // use `abs` to allow for improper rotations\r\n        var det3x3 = Math.abs(a00 * (a11 * a22 - a12 * a21) - a01 * (a10 * a22 - a12 * a20) + a02 * (a10 * a21 - a11 * a20));\r\n        if (!equalEps(det3x3, 1, eps)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Check if the matrix has only translation and uniform scaling\r\n     * [ S  0  0  X ]\r\n     * [ 0  S  0  Y ]\r\n     * [ 0  0  S  Z ]\r\n     * [ 0  0  0  1 ]\r\n     */\r\n    function isTranslationAndUniformScaling(a, eps) {\r\n        return _isTranslationAndUniformScaling(a, typeof eps !== 'undefined' ? eps : EPSILON);\r\n    }\r\n    Mat4.isTranslationAndUniformScaling = isTranslationAndUniformScaling;\r\n    function _isTranslationAndUniformScaling(a, eps) {\r\n        var a00 = a[0];\r\n        return (\r\n        // 0 base scaling\r\n        equalEps(a[1], 0, eps) &&\r\n            equalEps(a[2], 0, eps) &&\r\n            equalEps(a[3], 0, eps) &&\r\n            equalEps(a[4], 0, eps) &&\r\n            equalEps(a[5], a00, eps) &&\r\n            equalEps(a[6], 0, eps) &&\r\n            equalEps(a[7], 0, eps) &&\r\n            equalEps(a[8], 0, eps) &&\r\n            equalEps(a[9], 0, eps) &&\r\n            equalEps(a[10], a00, eps) &&\r\n            equalEps(a[11], 0, eps) &&\r\n            // 12, 13, 14 translation can be anything\r\n            equalEps(a[15], 1, eps));\r\n    }\r\n    function fromQuat(out, q) {\r\n        var x = q[0], y = q[1], z = q[2], w = q[3];\r\n        var x2 = x + x;\r\n        var y2 = y + y;\r\n        var z2 = z + z;\r\n        var xx = x * x2;\r\n        var yx = y * x2;\r\n        var yy = y * y2;\r\n        var zx = z * x2;\r\n        var zy = z * y2;\r\n        var zz = z * z2;\r\n        var wx = w * x2;\r\n        var wy = w * y2;\r\n        var wz = w * z2;\r\n        out[0] = 1 - yy - zz;\r\n        out[1] = yx + wz;\r\n        out[2] = zx - wy;\r\n        out[3] = 0;\r\n        out[4] = yx - wz;\r\n        out[5] = 1 - xx - zz;\r\n        out[6] = zy + wx;\r\n        out[7] = 0;\r\n        out[8] = zx + wy;\r\n        out[9] = zy - wx;\r\n        out[10] = 1 - xx - yy;\r\n        out[11] = 0;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.fromQuat = fromQuat;\r\n    /**\r\n     * Generates a perspective projection (frustum) matrix with the given bounds\r\n     */\r\n    function perspective(out, left, right, top, bottom, near, far) {\r\n        var x = 2 * near / (right - left);\r\n        var y = 2 * near / (top - bottom);\r\n        var a = (right + left) / (right - left);\r\n        var b = (top + bottom) / (top - bottom);\r\n        var c = -(far + near) / (far - near);\r\n        var d = -2 * far * near / (far - near);\r\n        out[0] = x;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = y;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = a;\r\n        out[9] = b;\r\n        out[10] = c;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = d;\r\n        out[15] = 0;\r\n        return out;\r\n    }\r\n    Mat4.perspective = perspective;\r\n    /**\r\n     * Generates a orthogonal projection matrix with the given bounds\r\n     */\r\n    function ortho(out, left, right, top, bottom, near, far) {\r\n        var w = 1.0 / (right - left);\r\n        var h = 1.0 / (top - bottom);\r\n        var p = 1.0 / (far - near);\r\n        var x = (right + left) * w;\r\n        var y = (top + bottom) * h;\r\n        var z = (far + near) * p;\r\n        out[0] = 2 * w;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = 2 * h;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = -2 * p;\r\n        out[11] = 0;\r\n        out[12] = -x;\r\n        out[13] = -y;\r\n        out[14] = -z;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.ortho = ortho;\r\n    /**\r\n     * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n     */\r\n    function lookAt(out, eye, center, up) {\r\n        var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n        var eyex = eye[0];\r\n        var eyey = eye[1];\r\n        var eyez = eye[2];\r\n        var upx = up[0];\r\n        var upy = up[1];\r\n        var upz = up[2];\r\n        var centerx = center[0];\r\n        var centery = center[1];\r\n        var centerz = center[2];\r\n        if (Math.abs(eyex - centerx) < EPSILON &&\r\n            Math.abs(eyey - centery) < EPSILON &&\r\n            Math.abs(eyez - centerz) < EPSILON) {\r\n            return setIdentity(out);\r\n        }\r\n        z0 = eyex - centerx;\r\n        z1 = eyey - centery;\r\n        z2 = eyez - centerz;\r\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n        x0 = upy * z2 - upz * z1;\r\n        x1 = upz * z0 - upx * z2;\r\n        x2 = upx * z1 - upy * z0;\r\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n        if (!len) {\r\n            x0 = 0;\r\n            x1 = 0;\r\n            x2 = 0;\r\n        }\r\n        else {\r\n            len = 1 / len;\r\n            x0 *= len;\r\n            x1 *= len;\r\n            x2 *= len;\r\n        }\r\n        y0 = z1 * x2 - z2 * x1;\r\n        y1 = z2 * x0 - z0 * x2;\r\n        y2 = z0 * x1 - z1 * x0;\r\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n        if (!len) {\r\n            y0 = 0;\r\n            y1 = 0;\r\n            y2 = 0;\r\n        }\r\n        else {\r\n            len = 1 / len;\r\n            y0 *= len;\r\n            y1 *= len;\r\n            y2 *= len;\r\n        }\r\n        out[0] = x0;\r\n        out[1] = y0;\r\n        out[2] = z0;\r\n        out[3] = 0;\r\n        out[4] = x1;\r\n        out[5] = y1;\r\n        out[6] = z1;\r\n        out[7] = 0;\r\n        out[8] = x2;\r\n        out[9] = y2;\r\n        out[10] = z2;\r\n        out[11] = 0;\r\n        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.lookAt = lookAt;\r\n    /**\r\n     * Generates a matrix that makes something look at something else.\r\n     */\r\n    function targetTo(out, eye, target, up) {\r\n        var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\r\n        var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\r\n        var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n            z0 *= len;\r\n            z1 *= len;\r\n            z2 *= len;\r\n        }\r\n        var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\r\n        len = x0 * x0 + x1 * x1 + x2 * x2;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n            x0 *= len;\r\n            x1 *= len;\r\n            x2 *= len;\r\n        }\r\n        out[0] = x0;\r\n        out[1] = x1;\r\n        out[2] = x2;\r\n        out[3] = 0;\r\n        out[4] = z1 * x2 - z2 * x1;\r\n        out[5] = z2 * x0 - z0 * x2;\r\n        out[6] = z0 * x1 - z1 * x0;\r\n        out[7] = 0;\r\n        out[8] = z0;\r\n        out[9] = z1;\r\n        out[10] = z2;\r\n        out[11] = 0;\r\n        out[12] = eyex;\r\n        out[13] = eyey;\r\n        out[14] = eyez;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n    Mat4.targetTo = targetTo;\r\n    /**\r\n     * Perm is 0-indexed permutation\r\n     */\r\n    function fromPermutation(out, perm) {\r\n        setZero(out);\r\n        for (var i = 0; i < 4; i++) {\r\n            var p = perm[i];\r\n            setValue(out, i, p, 1);\r\n        }\r\n        return out;\r\n    }\r\n    Mat4.fromPermutation = fromPermutation;\r\n    function getMaxScaleOnAxis(m) {\r\n        var scaleXSq = m[0] * m[0] + m[1] * m[1] + m[2] * m[2];\r\n        var scaleYSq = m[4] * m[4] + m[5] * m[5] + m[6] * m[6];\r\n        var scaleZSq = m[8] * m[8] + m[9] * m[9] + m[10] * m[10];\r\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\r\n    }\r\n    Mat4.getMaxScaleOnAxis = getMaxScaleOnAxis;\r\n    var xAxis = [1, 0, 0];\r\n    var yAxis = [0, 1, 0];\r\n    var zAxis = [0, 0, 1];\r\n    /** Rotation matrix for 90deg around x-axis */\r\n    Mat4.rotX90 = fromRotation(zero(), degToRad(90), xAxis);\r\n    /** Rotation matrix for 180deg around x-axis */\r\n    Mat4.rotX180 = fromRotation(zero(), degToRad(180), xAxis);\r\n    /** Rotation matrix for 90deg around y-axis */\r\n    Mat4.rotY90 = fromRotation(zero(), degToRad(90), yAxis);\r\n    /** Rotation matrix for 180deg around y-axis */\r\n    Mat4.rotY180 = fromRotation(zero(), degToRad(180), yAxis);\r\n    /** Rotation matrix for 270deg around y-axis */\r\n    Mat4.rotY270 = fromRotation(zero(), degToRad(270), yAxis);\r\n    /** Rotation matrix for 90deg around z-axis */\r\n    Mat4.rotZ90 = fromRotation(zero(), degToRad(90), zAxis);\r\n    /** Rotation matrix for 180deg around z-axis */\r\n    Mat4.rotZ180 = fromRotation(zero(), degToRad(180), zAxis);\r\n    /** Rotation matrix for 90deg around first x-axis and then y-axis */\r\n    Mat4.rotXY90 = mul(zero(), Mat4.rotX90, Mat4.rotY90);\r\n    /** Rotation matrix for 90deg around first z-axis and then y-axis */\r\n    Mat4.rotZY90 = mul(zero(), Mat4.rotZ90, Mat4.rotY90);\r\n    /** Rotation matrix for 90deg around first z-axis and then y-axis and then z-axis */\r\n    Mat4.rotZYZ90 = mul(zero(), Mat4.rotZY90, Mat4.rotZ90);\r\n    /** Rotation matrix for 90deg around first z-axis and then 180deg around x-axis */\r\n    Mat4.rotZ90X180 = mul(zero(), Mat4.rotZ90, Mat4.rotX180);\r\n    /** Rotation matrix for 90deg around first y-axis and then 180deg around z-axis */\r\n    Mat4.rotY90Z180 = mul(zero(), Mat4.rotY90, Mat4.rotZ180);\r\n    /** Identity matrix */\r\n    Mat4.id = identity();\r\n})(Mat4 || (Mat4 = {}));\r\nexport { Mat4 };\r\n//# sourceMappingURL=mat4.js.map"]},"metadata":{},"sourceType":"module"}