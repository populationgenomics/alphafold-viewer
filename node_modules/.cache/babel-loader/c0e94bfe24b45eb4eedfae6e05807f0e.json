{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { defaults } from '../mol-util';\nimport { Structure } from '../mol-model/structure';\nimport { Box3D, SpacegroupCell } from '../mol-math/geometry';\nimport { ModelSymmetry } from '../mol-model-formats/structure/property/symmetry';\nimport { Volume } from '../mol-model/volume';\nexport var VisualUpdateState;\n\n(function (VisualUpdateState) {\n  function create() {\n    return {\n      updateTransform: false,\n      updateMatrix: false,\n      updateColor: false,\n      updateSize: false,\n      createGeometry: false,\n      createNew: false,\n      info: {}\n    };\n  }\n\n  VisualUpdateState.create = create;\n\n  function reset(state) {\n    state.updateTransform = false;\n    state.updateMatrix = false;\n    state.updateColor = false;\n    state.updateSize = false;\n    state.createGeometry = false;\n    state.createNew = false;\n  }\n\n  VisualUpdateState.reset = reset;\n})(VisualUpdateState || (VisualUpdateState = {}));\n\nexport var DefaultQualityThresholds = {\n  lowestElementCount: 1000000,\n  lowerElementCount: 500000,\n  lowElementCount: 100000,\n  mediumElementCount: 20000,\n  highElementCount: 2000,\n  coarseGrainedFactor: 10,\n  elementCountFactor: 1\n};\nexport function getStructureQuality(structure, tresholds) {\n  if (tresholds === void 0) {\n    tresholds = {};\n  }\n\n  var t = __assign(__assign({}, DefaultQualityThresholds), tresholds);\n\n  var score = structure.elementCount * t.elementCountFactor;\n  if (structure.isCoarseGrained) score *= t.coarseGrainedFactor;\n\n  if (score > t.lowestElementCount) {\n    return 'lowest';\n  } else if (score > t.lowerElementCount) {\n    return 'lower';\n  } else if (score > t.lowElementCount) {\n    return 'low';\n  } else if (score > t.mediumElementCount) {\n    return 'medium';\n  } else if (score > t.highElementCount) {\n    return 'high';\n  } else {\n    return 'higher';\n  }\n}\n/**\r\n * Uses cell volume to avoid costly boundary calculation if\r\n * - single model\r\n * - non-empty 'P 1' spacegroup\r\n */\n\nfunction getRootVolume(structure) {\n  if (structure.root.models.length === 1) {\n    var sym = ModelSymmetry.Provider.get(structure.root.model);\n\n    if (sym && sym.spacegroup.name === 'P 1' && !SpacegroupCell.isZero(sym.spacegroup.cell)) {\n      return sym.spacegroup.cell.volume;\n    }\n  }\n\n  return Box3D.volume(structure.root.boundary.box);\n}\n\nexport function getQualityProps(props, data) {\n  var quality = defaults(props.quality, 'auto');\n  var detail = defaults(props.detail, 1);\n  var radialSegments = defaults(props.radialSegments, 12);\n  var linearSegments = defaults(props.linearSegments, 8);\n  var resolution = defaults(props.resolution, 2);\n  var probePositions = defaults(props.probePositions, 12);\n  var doubleSided = defaults(props.doubleSided, true);\n  var volume = 0;\n\n  if (quality === 'auto') {\n    if (data instanceof Structure) {\n      quality = getStructureQuality(data.root);\n      volume = getRootVolume(data);\n    } else if (Volume.is(data)) {\n      var _a = data.grid.cells.space.dimensions,\n          x = _a[0],\n          y = _a[1],\n          z = _a[2];\n      volume = x * y * z;\n      quality = volume < 10000000 ? 'medium' : 'low';\n    }\n  }\n\n  switch (quality) {\n    case 'highest':\n      detail = 3;\n      radialSegments = 36;\n      linearSegments = 18;\n      resolution = 0.1;\n      probePositions = 72;\n      doubleSided = true;\n      break;\n\n    case 'higher':\n      detail = 3;\n      radialSegments = 28;\n      linearSegments = 14;\n      resolution = 0.3;\n      probePositions = 48;\n      doubleSided = true;\n      break;\n\n    case 'high':\n      detail = 2;\n      radialSegments = 20;\n      linearSegments = 10;\n      resolution = 0.5;\n      probePositions = 36;\n      doubleSided = true;\n      break;\n\n    case 'medium':\n      detail = 1;\n      radialSegments = 12;\n      linearSegments = 8;\n      resolution = 0.8;\n      probePositions = 24;\n      doubleSided = true;\n      break;\n\n    case 'low':\n      detail = 0;\n      radialSegments = 8;\n      linearSegments = 3;\n      resolution = 1.3;\n      probePositions = 24;\n      doubleSided = false;\n      break;\n\n    case 'lower':\n      detail = 0;\n      radialSegments = 4;\n      linearSegments = 2;\n      resolution = 3;\n      probePositions = 12;\n      doubleSided = false;\n      break;\n\n    case 'lowest':\n      detail = 0;\n      radialSegments = 2;\n      linearSegments = 1;\n      resolution = 8;\n      probePositions = 12;\n      doubleSided = false;\n      break;\n\n    case 'custom':\n      // use defaults or given props as set above\n      break;\n  } // max resolution based on volume (for 'auto' quality)\n\n\n  resolution = Math.max(resolution, volume / 500000000);\n  resolution = Math.min(resolution, 20);\n\n  if (props.alpha !== undefined && props.alpha < 1 || !!props.xrayShaded) {\n    doubleSided = false;\n  }\n\n  return {\n    detail: detail,\n    radialSegments: radialSegments,\n    linearSegments: linearSegments,\n    resolution: resolution,\n    probePositions: probePositions,\n    doubleSided: doubleSided\n  };\n}","map":{"version":3,"sources":["../../src/mol-repr/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { defaults } from '../mol-util';\r\nimport { Structure } from '../mol-model/structure';\r\nimport { Box3D, SpacegroupCell } from '../mol-math/geometry';\r\nimport { ModelSymmetry } from '../mol-model-formats/structure/property/symmetry';\r\nimport { Volume } from '../mol-model/volume';\r\nexport var VisualUpdateState;\r\n(function (VisualUpdateState) {\r\n    function create() {\r\n        return {\r\n            updateTransform: false,\r\n            updateMatrix: false,\r\n            updateColor: false,\r\n            updateSize: false,\r\n            createGeometry: false,\r\n            createNew: false,\r\n            info: {}\r\n        };\r\n    }\r\n    VisualUpdateState.create = create;\r\n    function reset(state) {\r\n        state.updateTransform = false;\r\n        state.updateMatrix = false;\r\n        state.updateColor = false;\r\n        state.updateSize = false;\r\n        state.createGeometry = false;\r\n        state.createNew = false;\r\n    }\r\n    VisualUpdateState.reset = reset;\r\n})(VisualUpdateState || (VisualUpdateState = {}));\r\nexport var DefaultQualityThresholds = {\r\n    lowestElementCount: 1000000,\r\n    lowerElementCount: 500000,\r\n    lowElementCount: 100000,\r\n    mediumElementCount: 20000,\r\n    highElementCount: 2000,\r\n    coarseGrainedFactor: 10,\r\n    elementCountFactor: 1\r\n};\r\nexport function getStructureQuality(structure, tresholds) {\r\n    if (tresholds === void 0) { tresholds = {}; }\r\n    var t = __assign(__assign({}, DefaultQualityThresholds), tresholds);\r\n    var score = structure.elementCount * t.elementCountFactor;\r\n    if (structure.isCoarseGrained)\r\n        score *= t.coarseGrainedFactor;\r\n    if (score > t.lowestElementCount) {\r\n        return 'lowest';\r\n    }\r\n    else if (score > t.lowerElementCount) {\r\n        return 'lower';\r\n    }\r\n    else if (score > t.lowElementCount) {\r\n        return 'low';\r\n    }\r\n    else if (score > t.mediumElementCount) {\r\n        return 'medium';\r\n    }\r\n    else if (score > t.highElementCount) {\r\n        return 'high';\r\n    }\r\n    else {\r\n        return 'higher';\r\n    }\r\n}\r\n/**\r\n * Uses cell volume to avoid costly boundary calculation if\r\n * - single model\r\n * - non-empty 'P 1' spacegroup\r\n */\r\nfunction getRootVolume(structure) {\r\n    if (structure.root.models.length === 1) {\r\n        var sym = ModelSymmetry.Provider.get(structure.root.model);\r\n        if (sym && sym.spacegroup.name === 'P 1' && !SpacegroupCell.isZero(sym.spacegroup.cell)) {\r\n            return sym.spacegroup.cell.volume;\r\n        }\r\n    }\r\n    return Box3D.volume(structure.root.boundary.box);\r\n}\r\nexport function getQualityProps(props, data) {\r\n    var quality = defaults(props.quality, 'auto');\r\n    var detail = defaults(props.detail, 1);\r\n    var radialSegments = defaults(props.radialSegments, 12);\r\n    var linearSegments = defaults(props.linearSegments, 8);\r\n    var resolution = defaults(props.resolution, 2);\r\n    var probePositions = defaults(props.probePositions, 12);\r\n    var doubleSided = defaults(props.doubleSided, true);\r\n    var volume = 0;\r\n    if (quality === 'auto') {\r\n        if (data instanceof Structure) {\r\n            quality = getStructureQuality(data.root);\r\n            volume = getRootVolume(data);\r\n        }\r\n        else if (Volume.is(data)) {\r\n            var _a = data.grid.cells.space.dimensions, x = _a[0], y = _a[1], z = _a[2];\r\n            volume = x * y * z;\r\n            quality = volume < 10000000 ? 'medium' : 'low';\r\n        }\r\n    }\r\n    switch (quality) {\r\n        case 'highest':\r\n            detail = 3;\r\n            radialSegments = 36;\r\n            linearSegments = 18;\r\n            resolution = 0.1;\r\n            probePositions = 72;\r\n            doubleSided = true;\r\n            break;\r\n        case 'higher':\r\n            detail = 3;\r\n            radialSegments = 28;\r\n            linearSegments = 14;\r\n            resolution = 0.3;\r\n            probePositions = 48;\r\n            doubleSided = true;\r\n            break;\r\n        case 'high':\r\n            detail = 2;\r\n            radialSegments = 20;\r\n            linearSegments = 10;\r\n            resolution = 0.5;\r\n            probePositions = 36;\r\n            doubleSided = true;\r\n            break;\r\n        case 'medium':\r\n            detail = 1;\r\n            radialSegments = 12;\r\n            linearSegments = 8;\r\n            resolution = 0.8;\r\n            probePositions = 24;\r\n            doubleSided = true;\r\n            break;\r\n        case 'low':\r\n            detail = 0;\r\n            radialSegments = 8;\r\n            linearSegments = 3;\r\n            resolution = 1.3;\r\n            probePositions = 24;\r\n            doubleSided = false;\r\n            break;\r\n        case 'lower':\r\n            detail = 0;\r\n            radialSegments = 4;\r\n            linearSegments = 2;\r\n            resolution = 3;\r\n            probePositions = 12;\r\n            doubleSided = false;\r\n            break;\r\n        case 'lowest':\r\n            detail = 0;\r\n            radialSegments = 2;\r\n            linearSegments = 1;\r\n            resolution = 8;\r\n            probePositions = 12;\r\n            doubleSided = false;\r\n            break;\r\n        case 'custom':\r\n            // use defaults or given props as set above\r\n            break;\r\n    }\r\n    // max resolution based on volume (for 'auto' quality)\r\n    resolution = Math.max(resolution, volume / 500000000);\r\n    resolution = Math.min(resolution, 20);\r\n    if ((props.alpha !== undefined && props.alpha < 1) || !!props.xrayShaded) {\r\n        doubleSided = false;\r\n    }\r\n    return {\r\n        detail: detail,\r\n        radialSegments: radialSegments,\r\n        linearSegments: linearSegments,\r\n        resolution: resolution,\r\n        probePositions: probePositions,\r\n        doubleSided: doubleSided\r\n    };\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}