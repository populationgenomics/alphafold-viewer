{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Structure, StructureSymmetry } from '../../mol-model/structure';\nimport { stringToWords } from '../../mol-util/string';\nimport { SpacegroupCell, Spacegroup } from '../../mol-math/geometry';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Vec3 } from '../../mol-math/linear-algebra';\nimport { Symmetry } from '../../mol-model/structure/model/properties/symmetry';\nimport { PluginStateObject as SO } from '../objects';\nimport { ModelSymmetry } from '../../mol-model-formats/structure/property/symmetry';\nvar CommonStructureParams = {\n  dynamicBonds: PD.Optional(PD.Boolean(false, {\n    description: 'Ensure bonds are recalculated upon model changes. Also enables calculation of inter-unit bonds in water molecules.'\n  }))\n};\nexport var RootStructureDefinition;\n\n(function (RootStructureDefinition) {\n  function getParams(model, defaultValue) {\n    var symmetry = model && ModelSymmetry.Provider.get(model);\n    var assemblyIds = symmetry ? symmetry.assemblies.map(function (a) {\n      return [a.id, a.id + \": \" + stringToWords(a.details)];\n    }) : [];\n    var showSymm = !symmetry ? true : !SpacegroupCell.isZero(symmetry.spacegroup.cell);\n    var operatorOptions = [];\n\n    if (symmetry) {\n      var operators = symmetry.spacegroup.operators;\n\n      for (var i = 0, il = operators.length; i < il; i++) {\n        operatorOptions.push([i, i + 1 + \": \" + Spacegroup.getOperatorXyz(operators[i])]);\n      }\n    }\n\n    var asymIdsOptions = [];\n\n    if (model) {\n      model.properties.structAsymMap.forEach(function (v) {\n        var label = v.id === v.auth_id ? v.id : v.id + \" [auth \" + v.auth_id + \"]\";\n        asymIdsOptions.push([v.id, label]);\n      });\n    }\n\n    var modes = {\n      auto: PD.Group(CommonStructureParams),\n      model: PD.Group(CommonStructureParams),\n      assembly: PD.Group(__assign({\n        id: PD.Optional(model ? PD.Select(assemblyIds.length ? assemblyIds[0][0] : '', assemblyIds, {\n          label: 'Asm Id',\n          description: 'Assembly Id'\n        }) : PD.Text('', {\n          label: 'Asm Id',\n          description: 'Assembly Id (use empty for the 1st assembly)'\n        }))\n      }, CommonStructureParams), {\n        isFlat: true\n      }),\n      'symmetry-mates': PD.Group(__assign({\n        radius: PD.Numeric(5, {\n          min: 0,\n          max: 50,\n          step: 1\n        })\n      }, CommonStructureParams), {\n        isFlat: true\n      }),\n      'symmetry': PD.Group(__assign({\n        ijkMin: PD.Vec3(Vec3.create(-1, -1, -1), {\n          step: 1\n        }, {\n          label: 'Min IJK',\n          fieldLabels: {\n            x: 'I',\n            y: 'J',\n            z: 'K'\n          }\n        }),\n        ijkMax: PD.Vec3(Vec3.create(1, 1, 1), {\n          step: 1\n        }, {\n          label: 'Max IJK',\n          fieldLabels: {\n            x: 'I',\n            y: 'J',\n            z: 'K'\n          }\n        })\n      }, CommonStructureParams), {\n        isFlat: true\n      }),\n      'symmetry-assembly': PD.Group(__assign({\n        generators: PD.ObjectList({\n          operators: PD.ObjectList({\n            index: PD.Select(0, operatorOptions),\n            shift: PD.Vec3(Vec3(), {\n              step: 1\n            }, {\n              label: 'IJK',\n              fieldLabels: {\n                x: 'I',\n                y: 'J',\n                z: 'K'\n              }\n            })\n          }, function (e) {\n            return e.index + 1 + \"_\" + e.shift.map(function (a) {\n              return a + 5;\n            }).join('');\n          }, {\n            defaultValue: []\n          }),\n          asymIds: PD.MultiSelect([], asymIdsOptions)\n        }, function (e) {\n          return e.asymIds.length + \" asym ids, \" + e.operators.length + \" operators\";\n        }, {\n          defaultValue: []\n        })\n      }, CommonStructureParams), {\n        isFlat: true\n      })\n    };\n    var options = [];\n\n    if (defaultValue === 'auto') {\n      options.push(['auto', 'Auto']);\n    }\n\n    options.push(['model', 'Model']);\n\n    if (assemblyIds.length > 0) {\n      options.push(['assembly', 'Assembly']);\n    }\n\n    if (showSymm) {\n      options.push(['symmetry-mates', 'Symmetry Mates']);\n      options.push(['symmetry', 'Symmetry (indices)']);\n      options.push(['symmetry-assembly', 'Symmetry (assembly)']);\n    }\n\n    return {\n      type: PD.MappedStatic(defaultValue || 'model', modes, {\n        options: options\n      })\n    };\n  }\n\n  RootStructureDefinition.getParams = getParams;\n\n  function canAutoUpdate(oldParams, newParams) {\n    if (newParams.name === 'symmetry-assembly' || newParams.name === 'symmetry' && oldParams.name === 'symmetry') return false;\n    return true;\n  }\n\n  RootStructureDefinition.canAutoUpdate = canAutoUpdate;\n\n  function buildAssembly(plugin, ctx, model, id, props) {\n    return __awaiter(this, void 0, void 0, function () {\n      var asm, symmetry, base, label, s, objProps;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            asm = void 0;\n            symmetry = ModelSymmetry.Provider.get(model); // if no id is specified, use the 1st assembly.\n\n            if (!id && symmetry && symmetry.assemblies.length !== 0) {\n              id = symmetry.assemblies[0].id;\n            }\n\n            if (!symmetry || symmetry.assemblies.length === 0) {\n              plugin.log.warn(\"Model '\" + model.entryId + \"' has no assembly, returning model structure.\");\n            } else {\n              asm = Symmetry.findAssembly(model, id || '');\n\n              if (!asm) {\n                plugin.log.warn(\"Model '\" + model.entryId + \"' has no assembly called '\" + id + \"', returning model structure.\");\n              }\n            }\n\n            base = Structure.ofModel(model, props);\n\n            if (!asm) {\n              label = {\n                label: 'Model',\n                description: Structure.elementDescription(base)\n              };\n              return [2\n              /*return*/\n              , new SO.Molecule.Structure(base, label)];\n            }\n\n            id = asm.id;\n            return [4\n            /*yield*/\n            , StructureSymmetry.buildAssembly(base, id).runInContext(ctx)];\n\n          case 1:\n            s = _a.sent();\n            objProps = {\n              label: \"Assembly \" + id,\n              description: Structure.elementDescription(s)\n            };\n            return [2\n            /*return*/\n            , new SO.Molecule.Structure(s, objProps)];\n        }\n      });\n    });\n  }\n\n  function buildSymmetry(ctx, model, ijkMin, ijkMax, props) {\n    return __awaiter(this, void 0, void 0, function () {\n      var base, s, objProps;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            base = Structure.ofModel(model, props);\n            return [4\n            /*yield*/\n            , StructureSymmetry.buildSymmetryRange(base, ijkMin, ijkMax).runInContext(ctx)];\n\n          case 1:\n            s = _a.sent();\n            objProps = {\n              label: \"Symmetry [\" + ijkMin + \"] to [\" + ijkMax + \"]\",\n              description: Structure.elementDescription(s)\n            };\n            return [2\n            /*return*/\n            , new SO.Molecule.Structure(s, objProps)];\n        }\n      });\n    });\n  }\n\n  function buildSymmetryMates(ctx, model, radius, props) {\n    return __awaiter(this, void 0, void 0, function () {\n      var base, s, objProps;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            base = Structure.ofModel(model, props);\n            return [4\n            /*yield*/\n            , StructureSymmetry.builderSymmetryMates(base, radius).runInContext(ctx)];\n\n          case 1:\n            s = _a.sent();\n            objProps = {\n              label: \"Symmetry Mates\",\n              description: Structure.elementDescription(s)\n            };\n            return [2\n            /*return*/\n            , new SO.Molecule.Structure(s, objProps)];\n        }\n      });\n    });\n  }\n\n  function buildSymmetryAssembly(ctx, model, generators, symmetry, props) {\n    return __awaiter(this, void 0, void 0, function () {\n      var base, s, objProps;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            base = Structure.ofModel(model, props);\n            return [4\n            /*yield*/\n            , StructureSymmetry.buildSymmetryAssembly(base, generators, symmetry).runInContext(ctx)];\n\n          case 1:\n            s = _a.sent();\n            objProps = {\n              label: \"Symmetry Assembly\",\n              description: Structure.elementDescription(s)\n            };\n            return [2\n            /*return*/\n            , new SO.Molecule.Structure(s, objProps)];\n        }\n      });\n    });\n  }\n\n  function create(plugin, ctx, model, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var props, symmetry, s, s;\n      return __generator(this, function (_a) {\n        props = params === null || params === void 0 ? void 0 : params.params;\n        symmetry = ModelSymmetry.Provider.get(model);\n\n        if (!symmetry || !params || params.name === 'model') {\n          s = Structure.ofModel(model, props);\n          return [2\n          /*return*/\n          , new SO.Molecule.Structure(s, {\n            label: 'Model',\n            description: Structure.elementDescription(s)\n          })];\n        }\n\n        if (params.name === 'auto') {\n          if (symmetry.assemblies.length === 0) {\n            s = Structure.ofModel(model, props);\n            return [2\n            /*return*/\n            , new SO.Molecule.Structure(s, {\n              label: 'Model',\n              description: Structure.elementDescription(s)\n            })];\n          } else {\n            return [2\n            /*return*/\n            , buildAssembly(plugin, ctx, model, undefined, props)];\n          }\n        }\n\n        if (params.name === 'assembly') {\n          return [2\n          /*return*/\n          , buildAssembly(plugin, ctx, model, params.params.id, props)];\n        }\n\n        if (params.name === 'symmetry') {\n          return [2\n          /*return*/\n          , buildSymmetry(ctx, model, params.params.ijkMin, params.params.ijkMax, props)];\n        }\n\n        if (params.name === 'symmetry-mates') {\n          return [2\n          /*return*/\n          , buildSymmetryMates(ctx, model, params.params.radius, props)];\n        }\n\n        if (params.name === 'symmetry-assembly') {\n          return [2\n          /*return*/\n          , buildSymmetryAssembly(ctx, model, params.params.generators, symmetry, props)];\n        }\n\n        throw new Error(\"Unknown represetation type: \" + params.name);\n      });\n    });\n  }\n\n  RootStructureDefinition.create = create;\n})(RootStructureDefinition || (RootStructureDefinition = {}));","map":{"version":3,"sources":["../../../src/mol-plugin-state/helpers/root-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Structure, StructureSymmetry } from '../../mol-model/structure';\r\nimport { stringToWords } from '../../mol-util/string';\r\nimport { SpacegroupCell, Spacegroup } from '../../mol-math/geometry';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nimport { Symmetry } from '../../mol-model/structure/model/properties/symmetry';\r\nimport { PluginStateObject as SO } from '../objects';\r\nimport { ModelSymmetry } from '../../mol-model-formats/structure/property/symmetry';\r\nvar CommonStructureParams = {\r\n    dynamicBonds: PD.Optional(PD.Boolean(false, { description: 'Ensure bonds are recalculated upon model changes. Also enables calculation of inter-unit bonds in water molecules.' })),\r\n};\r\nexport var RootStructureDefinition;\r\n(function (RootStructureDefinition) {\r\n    function getParams(model, defaultValue) {\r\n        var symmetry = model && ModelSymmetry.Provider.get(model);\r\n        var assemblyIds = symmetry ? symmetry.assemblies.map(function (a) { return [a.id, a.id + \": \" + stringToWords(a.details)]; }) : [];\r\n        var showSymm = !symmetry ? true : !SpacegroupCell.isZero(symmetry.spacegroup.cell);\r\n        var operatorOptions = [];\r\n        if (symmetry) {\r\n            var operators = symmetry.spacegroup.operators;\r\n            for (var i = 0, il = operators.length; i < il; i++) {\r\n                operatorOptions.push([i, i + 1 + \": \" + Spacegroup.getOperatorXyz(operators[i])]);\r\n            }\r\n        }\r\n        var asymIdsOptions = [];\r\n        if (model) {\r\n            model.properties.structAsymMap.forEach(function (v) {\r\n                var label = v.id === v.auth_id ? v.id : v.id + \" [auth \" + v.auth_id + \"]\";\r\n                asymIdsOptions.push([v.id, label]);\r\n            });\r\n        }\r\n        var modes = {\r\n            auto: PD.Group(CommonStructureParams),\r\n            model: PD.Group(CommonStructureParams),\r\n            assembly: PD.Group(__assign({ id: PD.Optional(model\r\n                    ? PD.Select(assemblyIds.length ? assemblyIds[0][0] : '', assemblyIds, { label: 'Asm Id', description: 'Assembly Id' })\r\n                    : PD.Text('', { label: 'Asm Id', description: 'Assembly Id (use empty for the 1st assembly)' })) }, CommonStructureParams), { isFlat: true }),\r\n            'symmetry-mates': PD.Group(__assign({ radius: PD.Numeric(5, { min: 0, max: 50, step: 1 }) }, CommonStructureParams), { isFlat: true }),\r\n            'symmetry': PD.Group(__assign({ ijkMin: PD.Vec3(Vec3.create(-1, -1, -1), { step: 1 }, { label: 'Min IJK', fieldLabels: { x: 'I', y: 'J', z: 'K' } }), ijkMax: PD.Vec3(Vec3.create(1, 1, 1), { step: 1 }, { label: 'Max IJK', fieldLabels: { x: 'I', y: 'J', z: 'K' } }) }, CommonStructureParams), { isFlat: true }),\r\n            'symmetry-assembly': PD.Group(__assign({ generators: PD.ObjectList({\r\n                    operators: PD.ObjectList({\r\n                        index: PD.Select(0, operatorOptions),\r\n                        shift: PD.Vec3(Vec3(), { step: 1 }, { label: 'IJK', fieldLabels: { x: 'I', y: 'J', z: 'K' } })\r\n                    }, function (e) { return e.index + 1 + \"_\" + e.shift.map(function (a) { return a + 5; }).join(''); }, {\r\n                        defaultValue: []\r\n                    }),\r\n                    asymIds: PD.MultiSelect([], asymIdsOptions)\r\n                }, function (e) { return e.asymIds.length + \" asym ids, \" + e.operators.length + \" operators\"; }, {\r\n                    defaultValue: []\r\n                }) }, CommonStructureParams), { isFlat: true })\r\n        };\r\n        var options = [];\r\n        if (defaultValue === 'auto') {\r\n            options.push(['auto', 'Auto']);\r\n        }\r\n        options.push(['model', 'Model']);\r\n        if (assemblyIds.length > 0) {\r\n            options.push(['assembly', 'Assembly']);\r\n        }\r\n        if (showSymm) {\r\n            options.push(['symmetry-mates', 'Symmetry Mates']);\r\n            options.push(['symmetry', 'Symmetry (indices)']);\r\n            options.push(['symmetry-assembly', 'Symmetry (assembly)']);\r\n        }\r\n        return {\r\n            type: PD.MappedStatic(defaultValue || 'model', modes, { options: options })\r\n        };\r\n    }\r\n    RootStructureDefinition.getParams = getParams;\r\n    function canAutoUpdate(oldParams, newParams) {\r\n        if (newParams.name === 'symmetry-assembly' || (newParams.name === 'symmetry' && oldParams.name === 'symmetry'))\r\n            return false;\r\n        return true;\r\n    }\r\n    RootStructureDefinition.canAutoUpdate = canAutoUpdate;\r\n    function buildAssembly(plugin, ctx, model, id, props) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var asm, symmetry, base, label, s, objProps;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        asm = void 0;\r\n                        symmetry = ModelSymmetry.Provider.get(model);\r\n                        // if no id is specified, use the 1st assembly.\r\n                        if (!id && symmetry && symmetry.assemblies.length !== 0) {\r\n                            id = symmetry.assemblies[0].id;\r\n                        }\r\n                        if (!symmetry || symmetry.assemblies.length === 0) {\r\n                            plugin.log.warn(\"Model '\" + model.entryId + \"' has no assembly, returning model structure.\");\r\n                        }\r\n                        else {\r\n                            asm = Symmetry.findAssembly(model, id || '');\r\n                            if (!asm) {\r\n                                plugin.log.warn(\"Model '\" + model.entryId + \"' has no assembly called '\" + id + \"', returning model structure.\");\r\n                            }\r\n                        }\r\n                        base = Structure.ofModel(model, props);\r\n                        if (!asm) {\r\n                            label = { label: 'Model', description: Structure.elementDescription(base) };\r\n                            return [2 /*return*/, new SO.Molecule.Structure(base, label)];\r\n                        }\r\n                        id = asm.id;\r\n                        return [4 /*yield*/, StructureSymmetry.buildAssembly(base, id).runInContext(ctx)];\r\n                    case 1:\r\n                        s = _a.sent();\r\n                        objProps = { label: \"Assembly \" + id, description: Structure.elementDescription(s) };\r\n                        return [2 /*return*/, new SO.Molecule.Structure(s, objProps)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function buildSymmetry(ctx, model, ijkMin, ijkMax, props) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var base, s, objProps;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        base = Structure.ofModel(model, props);\r\n                        return [4 /*yield*/, StructureSymmetry.buildSymmetryRange(base, ijkMin, ijkMax).runInContext(ctx)];\r\n                    case 1:\r\n                        s = _a.sent();\r\n                        objProps = { label: \"Symmetry [\" + ijkMin + \"] to [\" + ijkMax + \"]\", description: Structure.elementDescription(s) };\r\n                        return [2 /*return*/, new SO.Molecule.Structure(s, objProps)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function buildSymmetryMates(ctx, model, radius, props) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var base, s, objProps;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        base = Structure.ofModel(model, props);\r\n                        return [4 /*yield*/, StructureSymmetry.builderSymmetryMates(base, radius).runInContext(ctx)];\r\n                    case 1:\r\n                        s = _a.sent();\r\n                        objProps = { label: \"Symmetry Mates\", description: Structure.elementDescription(s) };\r\n                        return [2 /*return*/, new SO.Molecule.Structure(s, objProps)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function buildSymmetryAssembly(ctx, model, generators, symmetry, props) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var base, s, objProps;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        base = Structure.ofModel(model, props);\r\n                        return [4 /*yield*/, StructureSymmetry.buildSymmetryAssembly(base, generators, symmetry).runInContext(ctx)];\r\n                    case 1:\r\n                        s = _a.sent();\r\n                        objProps = { label: \"Symmetry Assembly\", description: Structure.elementDescription(s) };\r\n                        return [2 /*return*/, new SO.Molecule.Structure(s, objProps)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function create(plugin, ctx, model, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var props, symmetry, s, s;\r\n            return __generator(this, function (_a) {\r\n                props = params === null || params === void 0 ? void 0 : params.params;\r\n                symmetry = ModelSymmetry.Provider.get(model);\r\n                if (!symmetry || !params || params.name === 'model') {\r\n                    s = Structure.ofModel(model, props);\r\n                    return [2 /*return*/, new SO.Molecule.Structure(s, { label: 'Model', description: Structure.elementDescription(s) })];\r\n                }\r\n                if (params.name === 'auto') {\r\n                    if (symmetry.assemblies.length === 0) {\r\n                        s = Structure.ofModel(model, props);\r\n                        return [2 /*return*/, new SO.Molecule.Structure(s, { label: 'Model', description: Structure.elementDescription(s) })];\r\n                    }\r\n                    else {\r\n                        return [2 /*return*/, buildAssembly(plugin, ctx, model, undefined, props)];\r\n                    }\r\n                }\r\n                if (params.name === 'assembly') {\r\n                    return [2 /*return*/, buildAssembly(plugin, ctx, model, params.params.id, props)];\r\n                }\r\n                if (params.name === 'symmetry') {\r\n                    return [2 /*return*/, buildSymmetry(ctx, model, params.params.ijkMin, params.params.ijkMax, props)];\r\n                }\r\n                if (params.name === 'symmetry-mates') {\r\n                    return [2 /*return*/, buildSymmetryMates(ctx, model, params.params.radius, props)];\r\n                }\r\n                if (params.name === 'symmetry-assembly') {\r\n                    return [2 /*return*/, buildSymmetryAssembly(ctx, model, params.params.generators, symmetry, props)];\r\n                }\r\n                throw new Error(\"Unknown represetation type: \" + params.name);\r\n            });\r\n        });\r\n    }\r\n    RootStructureDefinition.create = create;\r\n})(RootStructureDefinition || (RootStructureDefinition = {}));\r\n//# sourceMappingURL=root-structure.js.map"]},"metadata":{},"sourceType":"module"}