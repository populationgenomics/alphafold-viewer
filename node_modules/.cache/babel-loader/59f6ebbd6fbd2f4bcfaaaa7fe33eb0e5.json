{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3 } from '../../mol-math/linear-algebra';\nimport { PrimitiveBuilder, createPrimitive } from './primitive';\nimport { polygon } from './polygon';\nvar on = Vec3.create(0, 0, -0.5),\n    op = Vec3.create(0, 0, 0.5);\nvar a = Vec3(),\n    b = Vec3(),\n    c = Vec3(),\n    d = Vec3();\n/**\r\n * Create a pyramid with a polygonal base\r\n */\n\nexport function Pyramid(points) {\n  var sideCount = points.length / 3;\n  var baseCount = sideCount === 3 ? 1 : sideCount === 4 ? 2 : sideCount;\n  var triangleCount = baseCount + sideCount;\n  var vertexCount = sideCount === 4 ? sideCount * 3 + 4 : triangleCount * 3;\n  var builder = PrimitiveBuilder(triangleCount, vertexCount); // create sides\n\n  for (var i = 0; i < sideCount; ++i) {\n    var ni = (i + 1) % sideCount;\n    Vec3.set(a, points[i * 3], points[i * 3 + 1], -0.5);\n    Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -0.5);\n    builder.add(a, b, op);\n  } // create base\n\n\n  if (sideCount === 3) {\n    Vec3.set(a, points[0], points[1], -0.5);\n    Vec3.set(b, points[3], points[4], -0.5);\n    Vec3.set(c, points[6], points[7], -0.5);\n    builder.add(c, b, a);\n  } else if (sideCount === 4) {\n    Vec3.set(a, points[0], points[1], -0.5);\n    Vec3.set(b, points[3], points[4], -0.5);\n    Vec3.set(c, points[6], points[7], -0.5);\n    Vec3.set(d, points[9], points[10], -0.5);\n    builder.addQuad(d, c, b, a);\n  } else {\n    for (var i = 0; i < sideCount; ++i) {\n      var ni = (i + 1) % sideCount;\n      Vec3.set(a, points[i * 3], points[i * 3 + 1], -0.5);\n      Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -0.5);\n      builder.add(on, b, a);\n    }\n  }\n\n  return builder.getPrimitive();\n}\nvar triangularPyramid;\nexport function TriangularPyramid() {\n  if (!triangularPyramid) triangularPyramid = Pyramid(polygon(3, true));\n  return triangularPyramid;\n}\nvar octagonalPyramid;\nexport function OctagonalPyramid() {\n  if (!octagonalPyramid) octagonalPyramid = Pyramid(polygon(8, true));\n  return octagonalPyramid;\n}\nvar perforatedOctagonalPyramid;\nexport function PerforatedOctagonalPyramid() {\n  if (!perforatedOctagonalPyramid) {\n    var points = polygon(8, true);\n    var vertices = new Float32Array(8 * 3 + 6);\n\n    for (var i = 0; i < 8; ++i) {\n      vertices[i * 3] = points[i * 3];\n      vertices[i * 3 + 1] = points[i * 3 + 1];\n      vertices[i * 3 + 2] = -0.5;\n    }\n\n    vertices[8 * 3] = 0;\n    vertices[8 * 3 + 1] = 0;\n    vertices[8 * 3 + 2] = -0.5;\n    vertices[8 * 3 + 3] = 0;\n    vertices[8 * 3 + 4] = 0;\n    vertices[8 * 3 + 5] = 0.5;\n    var indices = [0, 1, 8, 1, 2, 8, 4, 5, 8, 5, 6, 8, 2, 3, 9, 3, 4, 9, 6, 7, 9, 7, 0, 9];\n    perforatedOctagonalPyramid = createPrimitive(vertices, indices);\n  }\n\n  return perforatedOctagonalPyramid;\n} //\n\n/**\r\n * Create a prism cage\r\n */\n\nexport function PyramidCage(points) {\n  var sideCount = points.length / 3; // const count = 4 * sideCount\n\n  var vertices = [];\n  var edges = [];\n  var offset = 1;\n  vertices.push(op[0], op[1], op[2]); // vertices and side edges\n\n  for (var i = 0; i < sideCount; ++i) {\n    vertices.push(points[i * 3], points[i * 3 + 1], -0.5);\n    edges.push(0, offset);\n    offset += 1;\n  } // bases edges\n\n\n  for (var i = 0; i < sideCount; ++i) {\n    var ni = (i + 1) % sideCount;\n    edges.push(i + 1, ni + 1);\n  }\n\n  return {\n    vertices: vertices,\n    edges: edges\n  };\n}\nvar octagonalPyramidCage;\nexport function OctagonalPyramidCage() {\n  if (!octagonalPyramidCage) octagonalPyramidCage = PyramidCage(polygon(8, true));\n  return octagonalPyramidCage;\n}","map":{"version":3,"sources":["../../../src/mol-geo/primitive/pyramid.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nimport { PrimitiveBuilder, createPrimitive } from './primitive';\r\nimport { polygon } from './polygon';\r\nvar on = Vec3.create(0, 0, -0.5), op = Vec3.create(0, 0, 0.5);\r\nvar a = Vec3(), b = Vec3(), c = Vec3(), d = Vec3();\r\n/**\r\n * Create a pyramid with a polygonal base\r\n */\r\nexport function Pyramid(points) {\r\n    var sideCount = points.length / 3;\r\n    var baseCount = sideCount === 3 ? 1 : sideCount === 4 ? 2 : sideCount;\r\n    var triangleCount = baseCount + sideCount;\r\n    var vertexCount = sideCount === 4 ? (sideCount * 3 + 4) : triangleCount * 3;\r\n    var builder = PrimitiveBuilder(triangleCount, vertexCount);\r\n    // create sides\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        var ni = (i + 1) % sideCount;\r\n        Vec3.set(a, points[i * 3], points[i * 3 + 1], -0.5);\r\n        Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -0.5);\r\n        builder.add(a, b, op);\r\n    }\r\n    // create base\r\n    if (sideCount === 3) {\r\n        Vec3.set(a, points[0], points[1], -0.5);\r\n        Vec3.set(b, points[3], points[4], -0.5);\r\n        Vec3.set(c, points[6], points[7], -0.5);\r\n        builder.add(c, b, a);\r\n    }\r\n    else if (sideCount === 4) {\r\n        Vec3.set(a, points[0], points[1], -0.5);\r\n        Vec3.set(b, points[3], points[4], -0.5);\r\n        Vec3.set(c, points[6], points[7], -0.5);\r\n        Vec3.set(d, points[9], points[10], -0.5);\r\n        builder.addQuad(d, c, b, a);\r\n    }\r\n    else {\r\n        for (var i = 0; i < sideCount; ++i) {\r\n            var ni = (i + 1) % sideCount;\r\n            Vec3.set(a, points[i * 3], points[i * 3 + 1], -0.5);\r\n            Vec3.set(b, points[ni * 3], points[ni * 3 + 1], -0.5);\r\n            builder.add(on, b, a);\r\n        }\r\n    }\r\n    return builder.getPrimitive();\r\n}\r\nvar triangularPyramid;\r\nexport function TriangularPyramid() {\r\n    if (!triangularPyramid)\r\n        triangularPyramid = Pyramid(polygon(3, true));\r\n    return triangularPyramid;\r\n}\r\nvar octagonalPyramid;\r\nexport function OctagonalPyramid() {\r\n    if (!octagonalPyramid)\r\n        octagonalPyramid = Pyramid(polygon(8, true));\r\n    return octagonalPyramid;\r\n}\r\nvar perforatedOctagonalPyramid;\r\nexport function PerforatedOctagonalPyramid() {\r\n    if (!perforatedOctagonalPyramid) {\r\n        var points = polygon(8, true);\r\n        var vertices = new Float32Array(8 * 3 + 6);\r\n        for (var i = 0; i < 8; ++i) {\r\n            vertices[i * 3] = points[i * 3];\r\n            vertices[i * 3 + 1] = points[i * 3 + 1];\r\n            vertices[i * 3 + 2] = -0.5;\r\n        }\r\n        vertices[8 * 3] = 0;\r\n        vertices[8 * 3 + 1] = 0;\r\n        vertices[8 * 3 + 2] = -0.5;\r\n        vertices[8 * 3 + 3] = 0;\r\n        vertices[8 * 3 + 4] = 0;\r\n        vertices[8 * 3 + 5] = 0.5;\r\n        var indices = [\r\n            0, 1, 8, 1, 2, 8, 4, 5, 8, 5, 6, 8,\r\n            2, 3, 9, 3, 4, 9, 6, 7, 9, 7, 0, 9\r\n        ];\r\n        perforatedOctagonalPyramid = createPrimitive(vertices, indices);\r\n    }\r\n    return perforatedOctagonalPyramid;\r\n}\r\n//\r\n/**\r\n * Create a prism cage\r\n */\r\nexport function PyramidCage(points) {\r\n    var sideCount = points.length / 3;\r\n    // const count = 4 * sideCount\r\n    var vertices = [];\r\n    var edges = [];\r\n    var offset = 1;\r\n    vertices.push(op[0], op[1], op[2]);\r\n    // vertices and side edges\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        vertices.push(points[i * 3], points[i * 3 + 1], -0.5);\r\n        edges.push(0, offset);\r\n        offset += 1;\r\n    }\r\n    // bases edges\r\n    for (var i = 0; i < sideCount; ++i) {\r\n        var ni = (i + 1) % sideCount;\r\n        edges.push(i + 1, ni + 1);\r\n    }\r\n    return { vertices: vertices, edges: edges };\r\n}\r\nvar octagonalPyramidCage;\r\nexport function OctagonalPyramidCage() {\r\n    if (!octagonalPyramidCage)\r\n        octagonalPyramidCage = PyramidCage(polygon(8, true));\r\n    return octagonalPyramidCage;\r\n}\r\n//# sourceMappingURL=pyramid.js.map"]},"metadata":{},"sourceType":"module"}