{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\n\nimport * as React from 'react';\nimport { PluginUIComponent } from './base';\nimport { PluginStateObject as PSO } from '../mol-plugin-state/objects';\nimport { Sequence } from './sequence/sequence';\nimport { Structure, StructureElement, StructureProperties as SP, Unit } from '../mol-model/structure';\nimport { PolymerSequenceWrapper } from './sequence/polymer';\nimport { MarkerAction } from '../mol-util/marker-action';\nimport { PureSelectControl } from './controls/parameters';\nimport { ParamDefinition as PD } from '../mol-util/param-definition';\nimport { HeteroSequenceWrapper } from './sequence/hetero';\nimport { StateSelection } from '../mol-state';\nimport { ChainSequenceWrapper } from './sequence/chain';\nimport { ElementSequenceWrapper } from './sequence/element';\nimport { elementLabel } from '../mol-theme/label';\nimport { Icon, HelpOutlineSvg } from './controls/icons';\nimport { arrayEqual } from '../mol-util/array';\nvar MaxDisplaySequenceLength = 5000;\n\nfunction opKey(l) {\n  var ids = SP.unit.pdbx_struct_oper_list_ids(l);\n  var ncs = SP.unit.struct_ncs_oper_id(l);\n  var hkl = SP.unit.hkl(l);\n  var spgrOp = SP.unit.spgrOp(l);\n  return ids.sort().join(',') + \"|\" + ncs + \"|\" + hkl + \"|\" + spgrOp;\n}\n\nfunction splitModelEntityId(modelEntityId) {\n  var _a = modelEntityId.split('|'),\n      modelIdx = _a[0],\n      entityId = _a[1];\n\n  return [parseInt(modelIdx), entityId];\n}\n\nfunction getSequenceWrapper(state, structureSelection) {\n  var structure = state.structure,\n      modelEntityId = state.modelEntityId,\n      chainGroupId = state.chainGroupId,\n      operatorKey = state.operatorKey;\n  var l = StructureElement.Location.create(structure);\n\n  var _a = splitModelEntityId(modelEntityId),\n      modelIdx = _a[0],\n      entityId = _a[1];\n\n  var units = [];\n\n  for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\n    var unit = _b[_i];\n    StructureElement.Location.set(l, structure, unit, unit.elements[0]);\n    if (structure.getModelIndex(unit.model) !== modelIdx) continue;\n    if (SP.entity.id(l) !== entityId) continue;\n    if (unit.chainGroupId !== chainGroupId) continue;\n    if (opKey(l) !== operatorKey) continue;\n    units.push(unit);\n  }\n\n  if (units.length > 0) {\n    var data = {\n      structure: structure,\n      units: units\n    };\n    var unit = units[0];\n    var sw = void 0;\n\n    if (unit.polymerElements.length) {\n      var l_1 = StructureElement.Location.create(structure, unit, unit.elements[0]);\n      var entitySeq = unit.model.sequence.byEntityKey[SP.entity.key(l_1)]; // check if entity sequence is available\n\n      if (entitySeq && entitySeq.sequence.length <= MaxDisplaySequenceLength) {\n        sw = new PolymerSequenceWrapper(data);\n      } else {\n        var polymerElementCount = units.reduce(function (a, v) {\n          return a + v.polymerElements.length;\n        }, 0);\n\n        if (Unit.isAtomic(unit) || polymerElementCount > MaxDisplaySequenceLength) {\n          sw = new ChainSequenceWrapper(data);\n        } else {\n          sw = new ElementSequenceWrapper(data);\n        }\n      }\n    } else if (Unit.isAtomic(unit)) {\n      var residueCount = units.reduce(function (a, v) {\n        return a + v.residueCount;\n      }, 0);\n\n      if (residueCount > MaxDisplaySequenceLength) {\n        sw = new ChainSequenceWrapper(data);\n      } else {\n        sw = new HeteroSequenceWrapper(data);\n      }\n    } else {\n      console.warn('should not happen, expecting coarse units to be polymeric');\n      sw = new ChainSequenceWrapper(data);\n    }\n\n    sw.markResidue(structureSelection.getLoci(structure), MarkerAction.Select);\n    return sw;\n  } else {\n    return 'No sequence available';\n  }\n}\n\nfunction getModelEntityOptions(structure, polymersOnly) {\n  if (polymersOnly === void 0) {\n    polymersOnly = false;\n  }\n\n  var options = [];\n  var l = StructureElement.Location.create(structure);\n  var seen = new Set();\n\n  for (var _i = 0, _a = structure.units; _i < _a.length; _i++) {\n    var unit = _a[_i];\n    StructureElement.Location.set(l, structure, unit, unit.elements[0]);\n    var id = SP.entity.id(l);\n    var modelIdx = structure.getModelIndex(unit.model);\n    var key = modelIdx + \"|\" + id;\n    if (seen.has(key)) continue;\n    if (polymersOnly && SP.entity.type(l) !== 'polymer') continue;\n    var description = SP.entity.pdbx_description(l).join(', ');\n\n    if (structure.models.length) {\n      if (structure.representativeModel) {\n        // indicates model trajectory\n        description += \" (Model \" + structure.models[modelIdx].modelNum + \")\";\n      } else if (description.startsWith('Polymer ')) {\n        // indicates generic entity name\n        description += \" (\" + structure.models[modelIdx].entry + \")\";\n      }\n    }\n\n    var label = id + \": \" + description;\n    options.push([key, label]);\n    seen.add(key);\n  }\n\n  if (options.length === 0) options.push(['', 'No entities']);\n  return options;\n}\n\nfunction getChainOptions(structure, modelEntityId) {\n  var options = [];\n  var l = StructureElement.Location.create(structure);\n  var seen = new Set();\n\n  var _a = splitModelEntityId(modelEntityId),\n      modelIdx = _a[0],\n      entityId = _a[1];\n\n  for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\n    var unit = _b[_i];\n    StructureElement.Location.set(l, structure, unit, unit.elements[0]);\n    if (structure.getModelIndex(unit.model) !== modelIdx) continue;\n    if (SP.entity.id(l) !== entityId) continue;\n    var id = unit.chainGroupId;\n    if (seen.has(id)) continue; // TODO handle special case\n    // - more than one chain in a unit\n\n    var label = elementLabel(l, {\n      granularity: 'chain',\n      hidePrefix: true,\n      htmlStyling: false\n    });\n    options.push([id, label]);\n    seen.add(id);\n  }\n\n  if (options.length === 0) options.push([-1, 'No units']);\n  return options;\n}\n\nfunction getOperatorOptions(structure, modelEntityId, chainGroupId) {\n  var options = [];\n  var l = StructureElement.Location.create(structure);\n  var seen = new Set();\n\n  var _a = splitModelEntityId(modelEntityId),\n      modelIdx = _a[0],\n      entityId = _a[1];\n\n  for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\n    var unit = _b[_i];\n    StructureElement.Location.set(l, structure, unit, unit.elements[0]);\n    if (structure.getModelIndex(unit.model) !== modelIdx) continue;\n    if (SP.entity.id(l) !== entityId) continue;\n    if (unit.chainGroupId !== chainGroupId) continue;\n    var id = opKey(l);\n    if (seen.has(id)) continue;\n    var label = unit.conformation.operator.name;\n    options.push([id, label]);\n    seen.add(id);\n  }\n\n  if (options.length === 0) options.push(['', 'No operators']);\n  return options;\n}\n\nfunction getStructureOptions(state) {\n  var _a;\n\n  var options = [];\n  var all = [];\n  var structures = state.select(StateSelection.Generators.rootsOfType(PSO.Molecule.Structure));\n\n  for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\n    var s = structures_1[_i];\n    if (!((_a = s.obj) === null || _a === void 0 ? void 0 : _a.data)) continue;\n    all.push(s.obj.data);\n    options.push([s.transform.ref, s.obj.data.label]);\n  }\n\n  if (options.length === 0) options.push(['', 'No structure']);\n  return {\n    options: options,\n    all: all\n  };\n}\n\nvar SequenceViewModeParam = PD.Select('single', [['single', 'Chain'], ['polymers', 'Polymers'], ['all', 'Everything']]);\n\nvar SequenceView =\n/** @class */\nfunction (_super) {\n  __extends(SequenceView, _super);\n\n  function SequenceView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      structureOptions: {\n        options: [],\n        all: []\n      },\n      structure: Structure.Empty,\n      structureRef: '',\n      modelEntityId: '',\n      chainGroupId: -1,\n      operatorKey: '',\n      mode: 'single'\n    };\n\n    _this.setParamProps = function (p) {\n      var state = __assign({}, _this.state);\n\n      switch (p.name) {\n        case 'mode':\n          state.mode = p.value;\n          if (_this.state.mode === state.mode) return;\n\n          if (state.mode === 'all' || state.mode === 'polymers') {\n            break;\n          }\n\n        case 'structure':\n          if (p.name === 'structure') state.structureRef = p.value;\n          state.structure = _this.getStructure(state.structureRef);\n          state.modelEntityId = getModelEntityOptions(state.structure)[0][0];\n          state.chainGroupId = getChainOptions(state.structure, state.modelEntityId)[0][0];\n          state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\n          break;\n\n        case 'entity':\n          state.modelEntityId = p.value;\n          state.chainGroupId = getChainOptions(state.structure, state.modelEntityId)[0][0];\n          state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\n          break;\n\n        case 'chain':\n          state.chainGroupId = p.value;\n          state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\n          break;\n\n        case 'operator':\n          state.operatorKey = p.value;\n          break;\n      }\n\n      _this.setState(state);\n    };\n\n    return _this;\n  }\n\n  SequenceView.prototype.componentDidMount = function () {\n    var _this = this;\n\n    if (this.plugin.state.data.select(StateSelection.Generators.rootsOfType(PSO.Molecule.Structure)).length > 0) this.setState(this.getInitialState());\n    this.subscribe(this.plugin.state.events.object.updated, function (_a) {\n      var ref = _a.ref,\n          obj = _a.obj;\n\n      if (ref === _this.state.structureRef && obj && obj.type === PSO.Molecule.Structure.type && obj.data !== _this.state.structure) {\n        _this.sync();\n      }\n    });\n    this.subscribe(this.plugin.state.events.object.created, function (_a) {\n      var obj = _a.obj;\n\n      if (obj && obj.type === PSO.Molecule.Structure.type) {\n        _this.sync();\n      }\n    });\n    this.subscribe(this.plugin.state.events.object.removed, function (_a) {\n      var obj = _a.obj;\n\n      if (obj && obj.type === PSO.Molecule.Structure.type && obj.data === _this.state.structure) {\n        _this.sync();\n      }\n    });\n  };\n\n  SequenceView.prototype.sync = function () {\n    var structureOptions = getStructureOptions(this.plugin.state.data);\n    if (arrayEqual(structureOptions.all, this.state.structureOptions.all)) return;\n    this.setState(this.getInitialState());\n  };\n\n  SequenceView.prototype.getStructure = function (ref) {\n    var state = this.plugin.state.data;\n    var cell = state.select(ref)[0];\n    if (!ref || !cell || !cell.obj) return Structure.Empty;\n    return cell.obj.data;\n  };\n\n  SequenceView.prototype.getSequenceWrapper = function (params) {\n    return {\n      wrapper: getSequenceWrapper(this.state, this.plugin.managers.structure.selection),\n      label: PD.optionLabel(params.chain, this.state.chainGroupId) + \" | \" + PD.optionLabel(params.entity, this.state.modelEntityId)\n    };\n  };\n\n  SequenceView.prototype.getSequenceWrappers = function (params) {\n    if (this.state.mode === 'single') return [this.getSequenceWrapper(params)];\n    var structure = this.getStructure(this.state.structureRef);\n    var wrappers = [];\n\n    for (var _i = 0, _a = getModelEntityOptions(structure, this.state.mode === 'polymers'); _i < _a.length; _i++) {\n      var _b = _a[_i],\n          modelEntityId = _b[0],\n          eLabel = _b[1];\n\n      for (var _c = 0, _d = getChainOptions(structure, modelEntityId); _c < _d.length; _c++) {\n        var _e = _d[_c],\n            chainGroupId = _e[0],\n            cLabel = _e[1];\n\n        for (var _f = 0, _g = getOperatorOptions(structure, modelEntityId, chainGroupId); _f < _g.length; _f++) {\n          var operatorKey = _g[_f][0];\n          wrappers.push({\n            wrapper: getSequenceWrapper({\n              structure: structure,\n              modelEntityId: modelEntityId,\n              chainGroupId: chainGroupId,\n              operatorKey: operatorKey\n            }, this.plugin.managers.structure.selection),\n            label: cLabel + \" | \" + eLabel\n          });\n        }\n      }\n    }\n\n    return wrappers;\n  };\n\n  SequenceView.prototype.getInitialState = function () {\n    var _a;\n\n    var structureOptions = getStructureOptions(this.plugin.state.data);\n    var structureRef = structureOptions.options[0][0];\n    var structure = this.getStructure(structureRef);\n    var modelEntityId = getModelEntityOptions(structure)[0][0];\n    var chainGroupId = getChainOptions(structure, modelEntityId)[0][0];\n    var operatorKey = getOperatorOptions(structure, modelEntityId, chainGroupId)[0][0];\n\n    if (this.state.structure && this.state.structure === structure) {\n      modelEntityId = this.state.modelEntityId;\n      chainGroupId = this.state.chainGroupId;\n      operatorKey = this.state.operatorKey;\n    }\n\n    return {\n      structureOptions: structureOptions,\n      structure: structure,\n      structureRef: structureRef,\n      modelEntityId: modelEntityId,\n      chainGroupId: chainGroupId,\n      operatorKey: operatorKey,\n      mode: (_a = this.props.defaultMode) !== null && _a !== void 0 ? _a : 'single'\n    };\n  };\n\n  Object.defineProperty(SequenceView.prototype, \"params\", {\n    get: function () {\n      var _a = this.state,\n          structureOptions = _a.structureOptions,\n          structure = _a.structure,\n          modelEntityId = _a.modelEntityId,\n          chainGroupId = _a.chainGroupId;\n      var entityOptions = getModelEntityOptions(structure);\n      var chainOptions = getChainOptions(structure, modelEntityId);\n      var operatorOptions = getOperatorOptions(structure, modelEntityId, chainGroupId);\n      return {\n        structure: PD.Select(structureOptions.options[0][0], structureOptions.options, {\n          shortLabel: true\n        }),\n        entity: PD.Select(entityOptions[0][0], entityOptions, {\n          shortLabel: true\n        }),\n        chain: PD.Select(chainOptions[0][0], chainOptions, {\n          shortLabel: true,\n          twoColumns: true,\n          label: 'Chain'\n        }),\n        operator: PD.Select(operatorOptions[0][0], operatorOptions, {\n          shortLabel: true,\n          twoColumns: true\n        }),\n        mode: SequenceViewModeParam\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SequenceView.prototype, \"values\", {\n    get: function () {\n      return {\n        structure: this.state.structureRef,\n        entity: this.state.modelEntityId,\n        chain: this.state.chainGroupId,\n        operator: this.state.operatorKey,\n        mode: this.state.mode\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SequenceView.prototype.render = function () {\n    if (this.getStructure(this.state.structureRef) === Structure.Empty) {\n      return _jsx(\"div\", __assign({\n        className: 'msp-sequence'\n      }, {\n        children: _jsxs(\"div\", __assign({\n          className: 'msp-sequence-select'\n        }, {\n          children: [_jsx(Icon, {\n            svg: HelpOutlineSvg,\n            style: {\n              cursor: 'help',\n              position: 'absolute',\n              right: 0,\n              top: 0\n            },\n            title: 'Shows a sequence of one or more chains. Use the controls to alter selection.'\n          }, void 0), _jsx(\"span\", {\n            children: \"Sequence\"\n          }, void 0), _jsx(\"span\", __assign({\n            style: {\n              fontWeight: 'normal'\n            }\n          }, {\n            children: \"No structure available\"\n          }), void 0)]\n        }), void 0)\n      }), void 0);\n    }\n\n    var params = this.params;\n    var values = this.values;\n    var sequenceWrappers = this.getSequenceWrappers(params);\n    return _jsxs(\"div\", __assign({\n      className: 'msp-sequence'\n    }, {\n      children: [_jsxs(\"div\", __assign({\n        className: 'msp-sequence-select'\n      }, {\n        children: [_jsx(Icon, {\n          svg: HelpOutlineSvg,\n          style: {\n            cursor: 'help',\n            position: 'absolute',\n            right: 0,\n            top: 0\n          },\n          title: 'This shows a single sequence. Use the controls to show a different sequence.'\n        }, void 0), _jsx(\"span\", {\n          children: \"Sequence of\"\n        }, void 0), _jsx(PureSelectControl, {\n          title: \"[Structure] \" + PD.optionLabel(params.structure, values.structure),\n          param: params.structure,\n          name: 'structure',\n          value: values.structure,\n          onChange: this.setParamProps\n        }, void 0), _jsx(PureSelectControl, {\n          title: \"[Mode]\",\n          param: SequenceViewModeParam,\n          name: 'mode',\n          value: values.mode,\n          onChange: this.setParamProps\n        }, void 0), values.mode === 'single' && _jsx(PureSelectControl, {\n          title: \"[Entity] \" + PD.optionLabel(params.entity, values.entity),\n          param: params.entity,\n          name: 'entity',\n          value: values.entity,\n          onChange: this.setParamProps\n        }, void 0), values.mode === 'single' && _jsx(PureSelectControl, {\n          title: \"[Chain] \" + PD.optionLabel(params.chain, values.chain),\n          param: params.chain,\n          name: 'chain',\n          value: values.chain,\n          onChange: this.setParamProps\n        }, void 0), params.operator.options.length > 1 && _jsx(_Fragment, {\n          children: _jsx(PureSelectControl, {\n            title: \"[Instance] \" + PD.optionLabel(params.operator, values.operator),\n            param: params.operator,\n            name: 'operator',\n            value: values.operator,\n            onChange: this.setParamProps\n          }, void 0)\n        }, void 0)]\n      }), void 0), _jsx(NonEmptySequenceWrapper, {\n        children: sequenceWrappers.map(function (s, i) {\n          var elem = typeof s.wrapper === 'string' ? _jsx(\"div\", __assign({\n            className: 'msp-sequence-wrapper'\n          }, {\n            children: s.wrapper\n          }), i) : _jsx(Sequence, {\n            sequenceWrapper: s.wrapper\n          }, i);\n          if (values.mode === 'single') return elem;\n          return _jsxs(React.Fragment, {\n            children: [_jsx(\"div\", __assign({\n              className: 'msp-sequence-chain-label'\n            }, {\n              children: s.label\n            }), void 0), elem]\n          }, i);\n        })\n      }, void 0)]\n    }), void 0);\n  };\n\n  return SequenceView;\n}(PluginUIComponent);\n\nexport { SequenceView };\n\nfunction NonEmptySequenceWrapper(_a) {\n  var children = _a.children;\n  return _jsx(\"div\", __assign({\n    className: 'msp-sequence-wrapper-non-empty'\n  }, {\n    children: children\n  }), void 0);\n}","map":{"version":3,"sources":["../../src/mol-plugin-ui/sequence.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\n/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport * as React from 'react';\r\nimport { PluginUIComponent } from './base';\r\nimport { PluginStateObject as PSO } from '../mol-plugin-state/objects';\r\nimport { Sequence } from './sequence/sequence';\r\nimport { Structure, StructureElement, StructureProperties as SP, Unit } from '../mol-model/structure';\r\nimport { PolymerSequenceWrapper } from './sequence/polymer';\r\nimport { MarkerAction } from '../mol-util/marker-action';\r\nimport { PureSelectControl } from './controls/parameters';\r\nimport { ParamDefinition as PD } from '../mol-util/param-definition';\r\nimport { HeteroSequenceWrapper } from './sequence/hetero';\r\nimport { StateSelection } from '../mol-state';\r\nimport { ChainSequenceWrapper } from './sequence/chain';\r\nimport { ElementSequenceWrapper } from './sequence/element';\r\nimport { elementLabel } from '../mol-theme/label';\r\nimport { Icon, HelpOutlineSvg } from './controls/icons';\r\nimport { arrayEqual } from '../mol-util/array';\r\nvar MaxDisplaySequenceLength = 5000;\r\nfunction opKey(l) {\r\n    var ids = SP.unit.pdbx_struct_oper_list_ids(l);\r\n    var ncs = SP.unit.struct_ncs_oper_id(l);\r\n    var hkl = SP.unit.hkl(l);\r\n    var spgrOp = SP.unit.spgrOp(l);\r\n    return ids.sort().join(',') + \"|\" + ncs + \"|\" + hkl + \"|\" + spgrOp;\r\n}\r\nfunction splitModelEntityId(modelEntityId) {\r\n    var _a = modelEntityId.split('|'), modelIdx = _a[0], entityId = _a[1];\r\n    return [parseInt(modelIdx), entityId];\r\n}\r\nfunction getSequenceWrapper(state, structureSelection) {\r\n    var structure = state.structure, modelEntityId = state.modelEntityId, chainGroupId = state.chainGroupId, operatorKey = state.operatorKey;\r\n    var l = StructureElement.Location.create(structure);\r\n    var _a = splitModelEntityId(modelEntityId), modelIdx = _a[0], entityId = _a[1];\r\n    var units = [];\r\n    for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\r\n        var unit = _b[_i];\r\n        StructureElement.Location.set(l, structure, unit, unit.elements[0]);\r\n        if (structure.getModelIndex(unit.model) !== modelIdx)\r\n            continue;\r\n        if (SP.entity.id(l) !== entityId)\r\n            continue;\r\n        if (unit.chainGroupId !== chainGroupId)\r\n            continue;\r\n        if (opKey(l) !== operatorKey)\r\n            continue;\r\n        units.push(unit);\r\n    }\r\n    if (units.length > 0) {\r\n        var data = { structure: structure, units: units };\r\n        var unit = units[0];\r\n        var sw = void 0;\r\n        if (unit.polymerElements.length) {\r\n            var l_1 = StructureElement.Location.create(structure, unit, unit.elements[0]);\r\n            var entitySeq = unit.model.sequence.byEntityKey[SP.entity.key(l_1)];\r\n            // check if entity sequence is available\r\n            if (entitySeq && entitySeq.sequence.length <= MaxDisplaySequenceLength) {\r\n                sw = new PolymerSequenceWrapper(data);\r\n            }\r\n            else {\r\n                var polymerElementCount = units.reduce(function (a, v) { return a + v.polymerElements.length; }, 0);\r\n                if (Unit.isAtomic(unit) || polymerElementCount > MaxDisplaySequenceLength) {\r\n                    sw = new ChainSequenceWrapper(data);\r\n                }\r\n                else {\r\n                    sw = new ElementSequenceWrapper(data);\r\n                }\r\n            }\r\n        }\r\n        else if (Unit.isAtomic(unit)) {\r\n            var residueCount = units.reduce(function (a, v) { return a + v.residueCount; }, 0);\r\n            if (residueCount > MaxDisplaySequenceLength) {\r\n                sw = new ChainSequenceWrapper(data);\r\n            }\r\n            else {\r\n                sw = new HeteroSequenceWrapper(data);\r\n            }\r\n        }\r\n        else {\r\n            console.warn('should not happen, expecting coarse units to be polymeric');\r\n            sw = new ChainSequenceWrapper(data);\r\n        }\r\n        sw.markResidue(structureSelection.getLoci(structure), MarkerAction.Select);\r\n        return sw;\r\n    }\r\n    else {\r\n        return 'No sequence available';\r\n    }\r\n}\r\nfunction getModelEntityOptions(structure, polymersOnly) {\r\n    if (polymersOnly === void 0) { polymersOnly = false; }\r\n    var options = [];\r\n    var l = StructureElement.Location.create(structure);\r\n    var seen = new Set();\r\n    for (var _i = 0, _a = structure.units; _i < _a.length; _i++) {\r\n        var unit = _a[_i];\r\n        StructureElement.Location.set(l, structure, unit, unit.elements[0]);\r\n        var id = SP.entity.id(l);\r\n        var modelIdx = structure.getModelIndex(unit.model);\r\n        var key = modelIdx + \"|\" + id;\r\n        if (seen.has(key))\r\n            continue;\r\n        if (polymersOnly && SP.entity.type(l) !== 'polymer')\r\n            continue;\r\n        var description = SP.entity.pdbx_description(l).join(', ');\r\n        if (structure.models.length) {\r\n            if (structure.representativeModel) { // indicates model trajectory\r\n                description += \" (Model \" + structure.models[modelIdx].modelNum + \")\";\r\n            }\r\n            else if (description.startsWith('Polymer ')) { // indicates generic entity name\r\n                description += \" (\" + structure.models[modelIdx].entry + \")\";\r\n            }\r\n        }\r\n        var label = id + \": \" + description;\r\n        options.push([key, label]);\r\n        seen.add(key);\r\n    }\r\n    if (options.length === 0)\r\n        options.push(['', 'No entities']);\r\n    return options;\r\n}\r\nfunction getChainOptions(structure, modelEntityId) {\r\n    var options = [];\r\n    var l = StructureElement.Location.create(structure);\r\n    var seen = new Set();\r\n    var _a = splitModelEntityId(modelEntityId), modelIdx = _a[0], entityId = _a[1];\r\n    for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\r\n        var unit = _b[_i];\r\n        StructureElement.Location.set(l, structure, unit, unit.elements[0]);\r\n        if (structure.getModelIndex(unit.model) !== modelIdx)\r\n            continue;\r\n        if (SP.entity.id(l) !== entityId)\r\n            continue;\r\n        var id = unit.chainGroupId;\r\n        if (seen.has(id))\r\n            continue;\r\n        // TODO handle special case\r\n        // - more than one chain in a unit\r\n        var label = elementLabel(l, { granularity: 'chain', hidePrefix: true, htmlStyling: false });\r\n        options.push([id, label]);\r\n        seen.add(id);\r\n    }\r\n    if (options.length === 0)\r\n        options.push([-1, 'No units']);\r\n    return options;\r\n}\r\nfunction getOperatorOptions(structure, modelEntityId, chainGroupId) {\r\n    var options = [];\r\n    var l = StructureElement.Location.create(structure);\r\n    var seen = new Set();\r\n    var _a = splitModelEntityId(modelEntityId), modelIdx = _a[0], entityId = _a[1];\r\n    for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\r\n        var unit = _b[_i];\r\n        StructureElement.Location.set(l, structure, unit, unit.elements[0]);\r\n        if (structure.getModelIndex(unit.model) !== modelIdx)\r\n            continue;\r\n        if (SP.entity.id(l) !== entityId)\r\n            continue;\r\n        if (unit.chainGroupId !== chainGroupId)\r\n            continue;\r\n        var id = opKey(l);\r\n        if (seen.has(id))\r\n            continue;\r\n        var label = unit.conformation.operator.name;\r\n        options.push([id, label]);\r\n        seen.add(id);\r\n    }\r\n    if (options.length === 0)\r\n        options.push(['', 'No operators']);\r\n    return options;\r\n}\r\nfunction getStructureOptions(state) {\r\n    var _a;\r\n    var options = [];\r\n    var all = [];\r\n    var structures = state.select(StateSelection.Generators.rootsOfType(PSO.Molecule.Structure));\r\n    for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\r\n        var s = structures_1[_i];\r\n        if (!((_a = s.obj) === null || _a === void 0 ? void 0 : _a.data))\r\n            continue;\r\n        all.push(s.obj.data);\r\n        options.push([s.transform.ref, s.obj.data.label]);\r\n    }\r\n    if (options.length === 0)\r\n        options.push(['', 'No structure']);\r\n    return { options: options, all: all };\r\n}\r\nvar SequenceViewModeParam = PD.Select('single', [['single', 'Chain'], ['polymers', 'Polymers'], ['all', 'Everything']]);\r\nvar SequenceView = /** @class */ (function (_super) {\r\n    __extends(SequenceView, _super);\r\n    function SequenceView() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = { structureOptions: { options: [], all: [] }, structure: Structure.Empty, structureRef: '', modelEntityId: '', chainGroupId: -1, operatorKey: '', mode: 'single' };\r\n        _this.setParamProps = function (p) {\r\n            var state = __assign({}, _this.state);\r\n            switch (p.name) {\r\n                case 'mode':\r\n                    state.mode = p.value;\r\n                    if (_this.state.mode === state.mode)\r\n                        return;\r\n                    if (state.mode === 'all' || state.mode === 'polymers') {\r\n                        break;\r\n                    }\r\n                case 'structure':\r\n                    if (p.name === 'structure')\r\n                        state.structureRef = p.value;\r\n                    state.structure = _this.getStructure(state.structureRef);\r\n                    state.modelEntityId = getModelEntityOptions(state.structure)[0][0];\r\n                    state.chainGroupId = getChainOptions(state.structure, state.modelEntityId)[0][0];\r\n                    state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\r\n                    break;\r\n                case 'entity':\r\n                    state.modelEntityId = p.value;\r\n                    state.chainGroupId = getChainOptions(state.structure, state.modelEntityId)[0][0];\r\n                    state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\r\n                    break;\r\n                case 'chain':\r\n                    state.chainGroupId = p.value;\r\n                    state.operatorKey = getOperatorOptions(state.structure, state.modelEntityId, state.chainGroupId)[0][0];\r\n                    break;\r\n                case 'operator':\r\n                    state.operatorKey = p.value;\r\n                    break;\r\n            }\r\n            _this.setState(state);\r\n        };\r\n        return _this;\r\n    }\r\n    SequenceView.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        if (this.plugin.state.data.select(StateSelection.Generators.rootsOfType(PSO.Molecule.Structure)).length > 0)\r\n            this.setState(this.getInitialState());\r\n        this.subscribe(this.plugin.state.events.object.updated, function (_a) {\r\n            var ref = _a.ref, obj = _a.obj;\r\n            if (ref === _this.state.structureRef && obj && obj.type === PSO.Molecule.Structure.type && obj.data !== _this.state.structure) {\r\n                _this.sync();\r\n            }\r\n        });\r\n        this.subscribe(this.plugin.state.events.object.created, function (_a) {\r\n            var obj = _a.obj;\r\n            if (obj && obj.type === PSO.Molecule.Structure.type) {\r\n                _this.sync();\r\n            }\r\n        });\r\n        this.subscribe(this.plugin.state.events.object.removed, function (_a) {\r\n            var obj = _a.obj;\r\n            if (obj && obj.type === PSO.Molecule.Structure.type && obj.data === _this.state.structure) {\r\n                _this.sync();\r\n            }\r\n        });\r\n    };\r\n    SequenceView.prototype.sync = function () {\r\n        var structureOptions = getStructureOptions(this.plugin.state.data);\r\n        if (arrayEqual(structureOptions.all, this.state.structureOptions.all))\r\n            return;\r\n        this.setState(this.getInitialState());\r\n    };\r\n    SequenceView.prototype.getStructure = function (ref) {\r\n        var state = this.plugin.state.data;\r\n        var cell = state.select(ref)[0];\r\n        if (!ref || !cell || !cell.obj)\r\n            return Structure.Empty;\r\n        return cell.obj.data;\r\n    };\r\n    SequenceView.prototype.getSequenceWrapper = function (params) {\r\n        return {\r\n            wrapper: getSequenceWrapper(this.state, this.plugin.managers.structure.selection),\r\n            label: PD.optionLabel(params.chain, this.state.chainGroupId) + \" | \" + PD.optionLabel(params.entity, this.state.modelEntityId)\r\n        };\r\n    };\r\n    SequenceView.prototype.getSequenceWrappers = function (params) {\r\n        if (this.state.mode === 'single')\r\n            return [this.getSequenceWrapper(params)];\r\n        var structure = this.getStructure(this.state.structureRef);\r\n        var wrappers = [];\r\n        for (var _i = 0, _a = getModelEntityOptions(structure, this.state.mode === 'polymers'); _i < _a.length; _i++) {\r\n            var _b = _a[_i], modelEntityId = _b[0], eLabel = _b[1];\r\n            for (var _c = 0, _d = getChainOptions(structure, modelEntityId); _c < _d.length; _c++) {\r\n                var _e = _d[_c], chainGroupId = _e[0], cLabel = _e[1];\r\n                for (var _f = 0, _g = getOperatorOptions(structure, modelEntityId, chainGroupId); _f < _g.length; _f++) {\r\n                    var operatorKey = _g[_f][0];\r\n                    wrappers.push({\r\n                        wrapper: getSequenceWrapper({\r\n                            structure: structure,\r\n                            modelEntityId: modelEntityId,\r\n                            chainGroupId: chainGroupId,\r\n                            operatorKey: operatorKey\r\n                        }, this.plugin.managers.structure.selection),\r\n                        label: cLabel + \" | \" + eLabel\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return wrappers;\r\n    };\r\n    SequenceView.prototype.getInitialState = function () {\r\n        var _a;\r\n        var structureOptions = getStructureOptions(this.plugin.state.data);\r\n        var structureRef = structureOptions.options[0][0];\r\n        var structure = this.getStructure(structureRef);\r\n        var modelEntityId = getModelEntityOptions(structure)[0][0];\r\n        var chainGroupId = getChainOptions(structure, modelEntityId)[0][0];\r\n        var operatorKey = getOperatorOptions(structure, modelEntityId, chainGroupId)[0][0];\r\n        if (this.state.structure && this.state.structure === structure) {\r\n            modelEntityId = this.state.modelEntityId;\r\n            chainGroupId = this.state.chainGroupId;\r\n            operatorKey = this.state.operatorKey;\r\n        }\r\n        return { structureOptions: structureOptions, structure: structure, structureRef: structureRef, modelEntityId: modelEntityId, chainGroupId: chainGroupId, operatorKey: operatorKey, mode: (_a = this.props.defaultMode) !== null && _a !== void 0 ? _a : 'single' };\r\n    };\r\n    Object.defineProperty(SequenceView.prototype, \"params\", {\r\n        get: function () {\r\n            var _a = this.state, structureOptions = _a.structureOptions, structure = _a.structure, modelEntityId = _a.modelEntityId, chainGroupId = _a.chainGroupId;\r\n            var entityOptions = getModelEntityOptions(structure);\r\n            var chainOptions = getChainOptions(structure, modelEntityId);\r\n            var operatorOptions = getOperatorOptions(structure, modelEntityId, chainGroupId);\r\n            return {\r\n                structure: PD.Select(structureOptions.options[0][0], structureOptions.options, { shortLabel: true }),\r\n                entity: PD.Select(entityOptions[0][0], entityOptions, { shortLabel: true }),\r\n                chain: PD.Select(chainOptions[0][0], chainOptions, { shortLabel: true, twoColumns: true, label: 'Chain' }),\r\n                operator: PD.Select(operatorOptions[0][0], operatorOptions, { shortLabel: true, twoColumns: true }),\r\n                mode: SequenceViewModeParam\r\n            };\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SequenceView.prototype, \"values\", {\r\n        get: function () {\r\n            return {\r\n                structure: this.state.structureRef,\r\n                entity: this.state.modelEntityId,\r\n                chain: this.state.chainGroupId,\r\n                operator: this.state.operatorKey,\r\n                mode: this.state.mode\r\n            };\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SequenceView.prototype.render = function () {\r\n        if (this.getStructure(this.state.structureRef) === Structure.Empty) {\r\n            return _jsx(\"div\", __assign({ className: 'msp-sequence' }, { children: _jsxs(\"div\", __assign({ className: 'msp-sequence-select' }, { children: [_jsx(Icon, { svg: HelpOutlineSvg, style: { cursor: 'help', position: 'absolute', right: 0, top: 0 }, title: 'Shows a sequence of one or more chains. Use the controls to alter selection.' }, void 0), _jsx(\"span\", { children: \"Sequence\" }, void 0), _jsx(\"span\", __assign({ style: { fontWeight: 'normal' } }, { children: \"No structure available\" }), void 0)] }), void 0) }), void 0);\r\n        }\r\n        var params = this.params;\r\n        var values = this.values;\r\n        var sequenceWrappers = this.getSequenceWrappers(params);\r\n        return _jsxs(\"div\", __assign({ className: 'msp-sequence' }, { children: [_jsxs(\"div\", __assign({ className: 'msp-sequence-select' }, { children: [_jsx(Icon, { svg: HelpOutlineSvg, style: { cursor: 'help', position: 'absolute', right: 0, top: 0 }, title: 'This shows a single sequence. Use the controls to show a different sequence.' }, void 0), _jsx(\"span\", { children: \"Sequence of\" }, void 0), _jsx(PureSelectControl, { title: \"[Structure] \" + PD.optionLabel(params.structure, values.structure), param: params.structure, name: 'structure', value: values.structure, onChange: this.setParamProps }, void 0), _jsx(PureSelectControl, { title: \"[Mode]\", param: SequenceViewModeParam, name: 'mode', value: values.mode, onChange: this.setParamProps }, void 0), values.mode === 'single' && _jsx(PureSelectControl, { title: \"[Entity] \" + PD.optionLabel(params.entity, values.entity), param: params.entity, name: 'entity', value: values.entity, onChange: this.setParamProps }, void 0), values.mode === 'single' && _jsx(PureSelectControl, { title: \"[Chain] \" + PD.optionLabel(params.chain, values.chain), param: params.chain, name: 'chain', value: values.chain, onChange: this.setParamProps }, void 0), params.operator.options.length > 1 && _jsx(_Fragment, { children: _jsx(PureSelectControl, { title: \"[Instance] \" + PD.optionLabel(params.operator, values.operator), param: params.operator, name: 'operator', value: values.operator, onChange: this.setParamProps }, void 0) }, void 0)] }), void 0), _jsx(NonEmptySequenceWrapper, { children: sequenceWrappers.map(function (s, i) {\r\n                        var elem = typeof s.wrapper === 'string'\r\n                            ? _jsx(\"div\", __assign({ className: 'msp-sequence-wrapper' }, { children: s.wrapper }), i)\r\n                            : _jsx(Sequence, { sequenceWrapper: s.wrapper }, i);\r\n                        if (values.mode === 'single')\r\n                            return elem;\r\n                        return _jsxs(React.Fragment, { children: [_jsx(\"div\", __assign({ className: 'msp-sequence-chain-label' }, { children: s.label }), void 0), elem] }, i);\r\n                    }) }, void 0)] }), void 0);\r\n    };\r\n    return SequenceView;\r\n}(PluginUIComponent));\r\nexport { SequenceView };\r\nfunction NonEmptySequenceWrapper(_a) {\r\n    var children = _a.children;\r\n    return _jsx(\"div\", __assign({ className: 'msp-sequence-wrapper-non-empty' }, { children: children }), void 0);\r\n}\r\n//# sourceMappingURL=sequence.js.map"]},"metadata":{},"sourceType":"module"}