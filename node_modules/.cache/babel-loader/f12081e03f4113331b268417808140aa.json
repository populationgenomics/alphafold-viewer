{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { Column, Table } from '../../mol-data/db';\nimport { guessElementSymbolString } from './util';\nimport { getMoleculeType } from '../../mol-model/structure/model/types';\nimport { ComponentBuilder } from './common/component';\nimport { getChainId } from './common/util';\nimport { EntityBuilder } from './common/entity';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { createModels } from './basic/parser';\nimport { ArrayTrajectory } from '../../mol-model/structure/trajectory';\n\nfunction getBasic(atoms, modelNum) {\n  var auth_atom_id = atoms.atomName;\n  var auth_comp_id = atoms.residueName;\n  var entityIds = new Array(atoms.count);\n  var asymIds = new Array(atoms.count);\n  var seqIds = new Uint32Array(atoms.count);\n  var ids = new Uint32Array(atoms.count);\n  var entityBuilder = new EntityBuilder();\n  var componentBuilder = new ComponentBuilder(atoms.residueNumber, atoms.atomName);\n  var currentEntityId = '';\n  var currentAsymIndex = 0;\n  var currentAsymId = '';\n  var currentSeqId = 0;\n  var prevMoleculeType = 0\n  /* Unknown */\n  ;\n  var prevResidueNumber = -1;\n\n  for (var i = 0, il = atoms.count; i < il; ++i) {\n    var residueNumber = atoms.residueNumber.value(i);\n\n    if (residueNumber !== prevResidueNumber) {\n      var compId = atoms.residueName.value(i);\n      var moleculeType = getMoleculeType(componentBuilder.add(compId, i).type, compId);\n\n      if (moleculeType !== prevMoleculeType || residueNumber !== prevResidueNumber + 1 && !( // gro format allows only for 5 character residueNumbers, handle overflow here\n      prevResidueNumber === 99999 && residueNumber === 0)) {\n        currentAsymId = getChainId(currentAsymIndex);\n        currentAsymIndex += 1;\n        currentSeqId = 0;\n      }\n\n      currentEntityId = entityBuilder.getEntityId(compId, moleculeType, currentAsymId);\n      currentSeqId += 1;\n      prevResidueNumber = residueNumber;\n      prevMoleculeType = moleculeType;\n    }\n\n    entityIds[i] = currentEntityId;\n    asymIds[i] = currentAsymId;\n    seqIds[i] = currentSeqId;\n    ids[i] = i;\n  }\n\n  var auth_asym_id = Column.ofStringArray(asymIds);\n  var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n    auth_asym_id: auth_asym_id,\n    auth_atom_id: auth_atom_id,\n    auth_comp_id: auth_comp_id,\n    auth_seq_id: atoms.residueNumber,\n    Cartn_x: Column.ofFloatArray(Column.mapToArray(atoms.x, function (x) {\n      return x * 10;\n    }, Float32Array)),\n    Cartn_y: Column.ofFloatArray(Column.mapToArray(atoms.y, function (y) {\n      return y * 10;\n    }, Float32Array)),\n    Cartn_z: Column.ofFloatArray(Column.mapToArray(atoms.z, function (z) {\n      return z * 10;\n    }, Float32Array)),\n    id: Column.ofIntArray(ids),\n    label_asym_id: auth_asym_id,\n    label_atom_id: auth_atom_id,\n    label_comp_id: auth_comp_id,\n    label_seq_id: Column.ofIntArray(seqIds),\n    label_entity_id: Column.ofStringArray(entityIds),\n    occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\n    type_symbol: Column.ofStringArray(Column.mapToArray(atoms.atomName, function (s) {\n      return guessElementSymbolString(s);\n    })),\n    pdbx_PDB_model_num: Column.ofConst(modelNum, atoms.count, Column.Schema.int)\n  }, atoms.count);\n  return createBasic({\n    entity: entityBuilder.getEntityTable(),\n    chem_comp: componentBuilder.getChemCompTable(),\n    atom_site: atom_site\n  });\n} //\n\n\nexport { GroFormat };\nvar GroFormat;\n\n(function (GroFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'gro';\n  }\n\n  GroFormat.is = is;\n\n  function fromGro(gro) {\n    return {\n      kind: 'gro',\n      name: gro.structures[0].header.title,\n      data: gro\n    };\n  }\n\n  GroFormat.fromGro = fromGro;\n})(GroFormat || (GroFormat = {})); // TODO reuse static model parts when hierarchy is identical\n//      need to pass all gro.structures as one table into createModels\n\n\nexport function trajectoryFromGRO(gro) {\n  var _this = this;\n\n  return Task.create('Parse GRO', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var format, models, i, il, basic, m;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = GroFormat.fromGro(gro);\n            models = [];\n            i = 0, il = gro.structures.length;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < il)) return [3\n            /*break*/\n            , 4];\n            basic = getBasic(gro.structures[i].atoms, i + 1);\n            return [4\n            /*yield*/\n            , createModels(basic, format, ctx)];\n\n          case 2:\n            m = _a.sent();\n\n            if (m.frameCount === 1) {\n              models.push(m.representative);\n            }\n\n            _a.label = 3;\n\n          case 3:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , new ArrayTrajectory(models)];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/gro.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { guessElementSymbolString } from './util';\r\nimport { getMoleculeType } from '../../mol-model/structure/model/types';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { getChainId } from './common/util';\r\nimport { EntityBuilder } from './common/entity';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { createModels } from './basic/parser';\r\nimport { ArrayTrajectory } from '../../mol-model/structure/trajectory';\r\nfunction getBasic(atoms, modelNum) {\r\n    var auth_atom_id = atoms.atomName;\r\n    var auth_comp_id = atoms.residueName;\r\n    var entityIds = new Array(atoms.count);\r\n    var asymIds = new Array(atoms.count);\r\n    var seqIds = new Uint32Array(atoms.count);\r\n    var ids = new Uint32Array(atoms.count);\r\n    var entityBuilder = new EntityBuilder();\r\n    var componentBuilder = new ComponentBuilder(atoms.residueNumber, atoms.atomName);\r\n    var currentEntityId = '';\r\n    var currentAsymIndex = 0;\r\n    var currentAsymId = '';\r\n    var currentSeqId = 0;\r\n    var prevMoleculeType = 0 /* Unknown */;\r\n    var prevResidueNumber = -1;\r\n    for (var i = 0, il = atoms.count; i < il; ++i) {\r\n        var residueNumber = atoms.residueNumber.value(i);\r\n        if (residueNumber !== prevResidueNumber) {\r\n            var compId = atoms.residueName.value(i);\r\n            var moleculeType = getMoleculeType(componentBuilder.add(compId, i).type, compId);\r\n            if (moleculeType !== prevMoleculeType || (residueNumber !== prevResidueNumber + 1 && !(\r\n            // gro format allows only for 5 character residueNumbers, handle overflow here\r\n            prevResidueNumber === 99999 && residueNumber === 0))) {\r\n                currentAsymId = getChainId(currentAsymIndex);\r\n                currentAsymIndex += 1;\r\n                currentSeqId = 0;\r\n            }\r\n            currentEntityId = entityBuilder.getEntityId(compId, moleculeType, currentAsymId);\r\n            currentSeqId += 1;\r\n            prevResidueNumber = residueNumber;\r\n            prevMoleculeType = moleculeType;\r\n        }\r\n        entityIds[i] = currentEntityId;\r\n        asymIds[i] = currentAsymId;\r\n        seqIds[i] = currentSeqId;\r\n        ids[i] = i;\r\n    }\r\n    var auth_asym_id = Column.ofStringArray(asymIds);\r\n    var atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n        auth_asym_id: auth_asym_id,\r\n        auth_atom_id: auth_atom_id,\r\n        auth_comp_id: auth_comp_id,\r\n        auth_seq_id: atoms.residueNumber,\r\n        Cartn_x: Column.ofFloatArray(Column.mapToArray(atoms.x, function (x) { return x * 10; }, Float32Array)),\r\n        Cartn_y: Column.ofFloatArray(Column.mapToArray(atoms.y, function (y) { return y * 10; }, Float32Array)),\r\n        Cartn_z: Column.ofFloatArray(Column.mapToArray(atoms.z, function (z) { return z * 10; }, Float32Array)),\r\n        id: Column.ofIntArray(ids),\r\n        label_asym_id: auth_asym_id,\r\n        label_atom_id: auth_atom_id,\r\n        label_comp_id: auth_comp_id,\r\n        label_seq_id: Column.ofIntArray(seqIds),\r\n        label_entity_id: Column.ofStringArray(entityIds),\r\n        occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\r\n        type_symbol: Column.ofStringArray(Column.mapToArray(atoms.atomName, function (s) { return guessElementSymbolString(s); })),\r\n        pdbx_PDB_model_num: Column.ofConst(modelNum, atoms.count, Column.Schema.int),\r\n    }, atoms.count);\r\n    return createBasic({\r\n        entity: entityBuilder.getEntityTable(),\r\n        chem_comp: componentBuilder.getChemCompTable(),\r\n        atom_site: atom_site\r\n    });\r\n}\r\n//\r\nexport { GroFormat };\r\nvar GroFormat;\r\n(function (GroFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'gro';\r\n    }\r\n    GroFormat.is = is;\r\n    function fromGro(gro) {\r\n        return { kind: 'gro', name: gro.structures[0].header.title, data: gro };\r\n    }\r\n    GroFormat.fromGro = fromGro;\r\n})(GroFormat || (GroFormat = {}));\r\n// TODO reuse static model parts when hierarchy is identical\r\n//      need to pass all gro.structures as one table into createModels\r\nexport function trajectoryFromGRO(gro) {\r\n    var _this = this;\r\n    return Task.create('Parse GRO', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var format, models, i, il, basic, m;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = GroFormat.fromGro(gro);\r\n                    models = [];\r\n                    i = 0, il = gro.structures.length;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < il)) return [3 /*break*/, 4];\r\n                    basic = getBasic(gro.structures[i].atoms, i + 1);\r\n                    return [4 /*yield*/, createModels(basic, format, ctx)];\r\n                case 2:\r\n                    m = _a.sent();\r\n                    if (m.frameCount === 1) {\r\n                        models.push(m.representative);\r\n                    }\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/, new ArrayTrajectory(models)];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=gro.js.map"]},"metadata":{},"sourceType":"module"}