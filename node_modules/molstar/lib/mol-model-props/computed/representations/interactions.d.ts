/**
 * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { RepresentationParamsGetter, RepresentationContext } from '../../../mol-repr/representation';
import { ThemeRegistryContext } from '../../../mol-theme/theme';
import { Structure } from '../../../mol-model/structure';
import { StructureRepresentation, StructureRepresentationProvider } from '../../../mol-repr/structure/representation';
export declare const InteractionsParams: {
    unitKinds: PD.MultiSelect<"spheres" | "atomic" | "gaussians">;
    sizeFactor: PD.Numeric;
    visuals: PD.MultiSelect<"intra-unit" | "inter-unit">;
    dashCount: PD.Numeric;
    dashScale: PD.Numeric;
    includeParent: PD.BooleanParam;
    linkScale: PD.Numeric;
    linkSpacing: PD.Numeric;
    linkCap: PD.BooleanParam;
    dashCap: PD.BooleanParam;
    stubCap: PD.BooleanParam;
    radialSegments: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type InteractionsParams = typeof InteractionsParams;
export declare function getInteractionParams(ctx: ThemeRegistryContext, structure: Structure): {
    unitKinds: PD.MultiSelect<"spheres" | "atomic" | "gaussians">;
    sizeFactor: PD.Numeric;
    visuals: PD.MultiSelect<"intra-unit" | "inter-unit">;
    dashCount: PD.Numeric;
    dashScale: PD.Numeric;
    includeParent: PD.BooleanParam;
    linkScale: PD.Numeric;
    linkSpacing: PD.Numeric;
    linkCap: PD.BooleanParam;
    dashCap: PD.BooleanParam;
    stubCap: PD.BooleanParam;
    radialSegments: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type InteractionRepresentation = StructureRepresentation<InteractionsParams>;
export declare function InteractionRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<Structure, InteractionsParams>): InteractionRepresentation;
export declare const InteractionsRepresentationProvider: StructureRepresentationProvider<{
    unitKinds: PD.MultiSelect<"spheres" | "atomic" | "gaussians">;
    sizeFactor: PD.Numeric;
    visuals: PD.MultiSelect<"intra-unit" | "inter-unit">;
    dashCount: PD.Numeric;
    dashScale: PD.Numeric;
    includeParent: PD.BooleanParam;
    linkScale: PD.Numeric;
    linkSpacing: PD.Numeric;
    linkCap: PD.BooleanParam;
    dashCap: PD.BooleanParam;
    stubCap: PD.BooleanParam;
    radialSegments: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
}, "interactions">;
