/**
 * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Model, Symmetry } from '../../../mol-model/structure';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { Vec3 } from '../../../mol-math/linear-algebra';
import { RepresentationParamsGetter, Representation, RepresentationContext } from '../../representation';
interface UnitcellData {
    symmetry: Symmetry;
    ref: Vec3;
}
export declare const UnitcellParams: {
    cellColor: PD.Color;
    cellScale: PD.Numeric;
    ref: PD.Select<"model" | "origin">;
    attachment: PD.Select<"center" | "corner">;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type UnitcellParams = typeof UnitcellParams;
export declare type UnitcellProps = PD.Values<UnitcellParams>;
export declare function getUnitcellData(model: Model, symmetry: Symmetry, props: UnitcellProps): {
    symmetry: Symmetry;
    ref: Vec3;
};
export declare type UnitcellRepresentation = Representation<UnitcellData, UnitcellParams>;
export declare function UnitcellRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<UnitcellData, UnitcellParams>): UnitcellRepresentation;
export {};
