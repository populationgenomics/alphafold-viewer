{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { SpacegroupCell, Box3D } from '../../mol-math/geometry';\nimport { Tensor, Vec3 } from '../../mol-math/linear-algebra';\nimport { degToRad } from '../../mol-math/misc';\nimport { arrayMin, arrayMax, arrayMean, arrayRms } from '../../mol-util/array';\nimport { CustomProperties } from '../../mol-model/custom-property';\nexport function volumeFromDsn6(source, params) {\n  var _this = this;\n\n  return Task.create('Create Volume', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var header, values, size, angles, cell, grid, extent, gridOrigin, origin_frac, dimensions_frac, space, data;\n      return __generator(this, function (_a) {\n        header = source.header, values = source.values;\n        size = Vec3.create(header.xlen, header.ylen, header.zlen);\n        if (params && params.voxelSize) Vec3.mul(size, size, params.voxelSize);\n        angles = Vec3.create(degToRad(header.alpha), degToRad(header.beta), degToRad(header.gamma));\n        cell = SpacegroupCell.create('P 1', size, angles);\n        grid = [header.xRate, header.yRate, header.zRate];\n        extent = [header.xExtent, header.yExtent, header.zExtent];\n        gridOrigin = [header.xStart, header.yStart, header.zStart];\n        origin_frac = Vec3.create(gridOrigin[0] / grid[0], gridOrigin[1] / grid[1], gridOrigin[2] / grid[2]);\n        dimensions_frac = Vec3.create(extent[0] / grid[0], extent[1] / grid[1], extent[2] / grid[2]);\n        space = Tensor.Space(extent, [0, 1, 2], Float32Array);\n        data = Tensor.create(space, Tensor.Data1(values));\n        return [2\n        /*return*/\n        , {\n          label: params === null || params === void 0 ? void 0 : params.label,\n          entryId: params === null || params === void 0 ? void 0 : params.entryId,\n          grid: {\n            transform: {\n              kind: 'spacegroup',\n              cell: cell,\n              fractionalBox: Box3D.create(origin_frac, Vec3.add(Vec3.zero(), origin_frac, dimensions_frac))\n            },\n            cells: data,\n            stats: {\n              min: arrayMin(values),\n              max: arrayMax(values),\n              mean: arrayMean(values),\n              sigma: header.sigma !== undefined ? header.sigma : arrayRms(values)\n            }\n          },\n          sourceData: Dsn6Format.create(source),\n          customProperties: new CustomProperties(),\n          _propertyData: Object.create(null)\n        }];\n      });\n    });\n  });\n} //\n\nexport { Dsn6Format };\nvar Dsn6Format;\n\n(function (Dsn6Format) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'dsn6';\n  }\n\n  Dsn6Format.is = is;\n\n  function create(dsn6) {\n    return {\n      kind: 'dsn6',\n      name: dsn6.name,\n      data: dsn6\n    };\n  }\n\n  Dsn6Format.create = create;\n})(Dsn6Format || (Dsn6Format = {}));","map":{"version":3,"sources":["../../../src/mol-model-formats/volume/dsn6.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { SpacegroupCell, Box3D } from '../../mol-math/geometry';\r\nimport { Tensor, Vec3 } from '../../mol-math/linear-algebra';\r\nimport { degToRad } from '../../mol-math/misc';\r\nimport { arrayMin, arrayMax, arrayMean, arrayRms } from '../../mol-util/array';\r\nimport { CustomProperties } from '../../mol-model/custom-property';\r\nexport function volumeFromDsn6(source, params) {\r\n    var _this = this;\r\n    return Task.create('Create Volume', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var header, values, size, angles, cell, grid, extent, gridOrigin, origin_frac, dimensions_frac, space, data;\r\n        return __generator(this, function (_a) {\r\n            header = source.header, values = source.values;\r\n            size = Vec3.create(header.xlen, header.ylen, header.zlen);\r\n            if (params && params.voxelSize)\r\n                Vec3.mul(size, size, params.voxelSize);\r\n            angles = Vec3.create(degToRad(header.alpha), degToRad(header.beta), degToRad(header.gamma));\r\n            cell = SpacegroupCell.create('P 1', size, angles);\r\n            grid = [header.xRate, header.yRate, header.zRate];\r\n            extent = [header.xExtent, header.yExtent, header.zExtent];\r\n            gridOrigin = [header.xStart, header.yStart, header.zStart];\r\n            origin_frac = Vec3.create(gridOrigin[0] / grid[0], gridOrigin[1] / grid[1], gridOrigin[2] / grid[2]);\r\n            dimensions_frac = Vec3.create(extent[0] / grid[0], extent[1] / grid[1], extent[2] / grid[2]);\r\n            space = Tensor.Space(extent, [0, 1, 2], Float32Array);\r\n            data = Tensor.create(space, Tensor.Data1(values));\r\n            return [2 /*return*/, {\r\n                    label: params === null || params === void 0 ? void 0 : params.label,\r\n                    entryId: params === null || params === void 0 ? void 0 : params.entryId,\r\n                    grid: {\r\n                        transform: { kind: 'spacegroup', cell: cell, fractionalBox: Box3D.create(origin_frac, Vec3.add(Vec3.zero(), origin_frac, dimensions_frac)) },\r\n                        cells: data,\r\n                        stats: {\r\n                            min: arrayMin(values),\r\n                            max: arrayMax(values),\r\n                            mean: arrayMean(values),\r\n                            sigma: header.sigma !== undefined ? header.sigma : arrayRms(values)\r\n                        },\r\n                    },\r\n                    sourceData: Dsn6Format.create(source),\r\n                    customProperties: new CustomProperties(),\r\n                    _propertyData: Object.create(null),\r\n                }];\r\n        });\r\n    }); });\r\n}\r\n//\r\nexport { Dsn6Format };\r\nvar Dsn6Format;\r\n(function (Dsn6Format) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'dsn6';\r\n    }\r\n    Dsn6Format.is = is;\r\n    function create(dsn6) {\r\n        return { kind: 'dsn6', name: dsn6.name, data: dsn6 };\r\n    }\r\n    Dsn6Format.create = create;\r\n})(Dsn6Format || (Dsn6Format = {}));\r\n//# sourceMappingURL=dsn6.js.map"]},"metadata":{},"sourceType":"module"}