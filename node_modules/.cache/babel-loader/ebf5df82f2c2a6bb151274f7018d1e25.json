{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorScale } from '../../mol-util/color';\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nvar DefaultOccupancyColor = Color(0xCCCCCC);\nvar Description = \"Assigns a color based on the occupancy of an atom.\";\nexport var OccupancyColorThemeParams = {\n  domain: PD.Interval([0, 1]),\n  list: PD.ColorList('purples', {\n    presetKind: 'scale'\n  })\n};\nexport function getOccupancyColorThemeParams(ctx) {\n  return OccupancyColorThemeParams; // TODO return copy\n}\nexport function getOccupancy(unit, element) {\n  if (Unit.isAtomic(unit)) {\n    return unit.model.atomicConformation.occupancy.value(element);\n  } else {\n    return 0;\n  }\n}\nexport function OccupancyColorTheme(ctx, props) {\n  var scale = ColorScale.create({\n    reverse: false,\n    domain: props.domain,\n    listOrName: props.list.colors\n  });\n\n  function color(location) {\n    if (StructureElement.Location.is(location)) {\n      return scale.color(getOccupancy(location.unit, location.element));\n    } else if (Bond.isLocation(location)) {\n      return scale.color(getOccupancy(location.aUnit, location.aUnit.elements[location.aIndex]));\n    }\n\n    return DefaultOccupancyColor;\n  }\n\n  return {\n    factory: OccupancyColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: scale ? scale.legend : undefined\n  };\n}\nexport var OccupancyColorThemeProvider = {\n  name: 'occupancy',\n  label: 'Occupancy',\n  category: \"Atom Property\"\n  /* Atom */\n  ,\n  factory: OccupancyColorTheme,\n  getParams: getOccupancyColorThemeParams,\n  defaultValues: PD.getDefaultValues(OccupancyColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.models.some(function (m) {\n      return m.atomicConformation.occupancy.isDefined;\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/occupancy.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,KAAT,EAAgB,UAAhB,QAAkC,sBAAlC;AACA,SAAS,gBAAT,EAA2B,IAA3B,EAAiC,IAAjC,QAA2D,2BAA3D;AAGA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AAGA,IAAM,qBAAqB,GAAG,KAAK,CAAC,QAAD,CAAnC;AACA,IAAM,WAAW,GAAG,oDAApB;AAEA,OAAO,IAAM,yBAAyB,GAAG;AACrC,EAAA,MAAM,EAAE,EAAE,CAAC,QAAH,CAAY,CAAC,CAAD,EAAI,CAAJ,CAAZ,CAD6B;AAErC,EAAA,IAAI,EAAE,EAAE,CAAC,SAAH,CAAa,SAAb,EAAwB;AAAE,IAAA,UAAU,EAAE;AAAd,GAAxB;AAF+B,CAAlC;AAKP,OAAM,SAAU,4BAAV,CAAuC,GAAvC,EAA4D;AAC9D,SAAO,yBAAP,CAD8D,CAC5B;AACrC;AAED,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAmC,OAAnC,EAAwD;AAC1D,MAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,EAAyB;AACrB,WAAO,IAAI,CAAC,KAAL,CAAW,kBAAX,CAA8B,SAA9B,CAAwC,KAAxC,CAA8C,OAA9C,CAAP;AACH,GAFD,MAEO;AACH,WAAO,CAAP;AACH;AACJ;AAED,OAAM,SAAU,mBAAV,CAA8B,GAA9B,EAAqD,KAArD,EAAgG;AAClG,MAAM,KAAK,GAAG,UAAU,CAAC,MAAX,CAAkB;AAC5B,IAAA,OAAO,EAAE,KADmB;AAE5B,IAAA,MAAM,EAAE,KAAK,CAAC,MAFc;AAG5B,IAAA,UAAU,EAAE,KAAK,CAAC,IAAN,CAAW;AAHK,GAAlB,CAAd;;AAMA,WAAS,KAAT,CAAe,QAAf,EAAiC;AAC7B,QAAI,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,CAA6B,QAA7B,CAAJ,EAA4C;AACxC,aAAO,KAAK,CAAC,KAAN,CAAY,YAAY,CAAC,QAAQ,CAAC,IAAV,EAAgB,QAAQ,CAAC,OAAzB,CAAxB,CAAP;AACH,KAFD,MAEO,IAAI,IAAI,CAAC,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAClC,aAAO,KAAK,CAAC,KAAN,CAAY,YAAY,CAAC,QAAQ,CAAC,KAAV,EAAiB,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,QAAQ,CAAC,MAAjC,CAAjB,CAAxB,CAAP;AACH;;AACD,WAAO,qBAAP;AACH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,mBADN;AAEH,IAAA,WAAW,EAAE,OAFV;AAGH,IAAA,eAAe,EAAE,IAHd;AAIH,IAAA,KAAK,EAAA,KAJF;AAKH,IAAA,KAAK,EAAA,KALF;AAMH,IAAA,WAAW,EAAE,WANV;AAOH,IAAA,MAAM,EAAE,KAAK,GAAG,KAAK,CAAC,MAAT,GAAkB;AAP5B,GAAP;AASH;AAED,OAAO,IAAM,2BAA2B,GAAgE;AACpG,EAAA,IAAI,EAAE,WAD8F;AAEpG,EAAA,KAAK,EAAE,WAF6F;AAGpG,EAAA,QAAQ,EAAA;AAAA;AAH4F;AAIpG,EAAA,OAAO,EAAE,mBAJ2F;AAKpG,EAAA,SAAS,EAAE,4BALyF;AAMpG,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,yBAApB,CANqF;AAOpG,EAAA,YAAY,EAAE,UAAC,GAAD,EAAsB;AAAK,WAAA,CAAC,CAAC,GAAG,CAAC,SAAN,IAAmB,GAAG,CAAC,SAAJ,CAAc,MAAd,CAAqB,IAArB,CAA0B,UAAA,CAAA,EAAC;AAAI,aAAA,CAAC,CAAC,kBAAF,CAAqB,SAArB,CAAA,SAAA;AAAlD,KAAmB,CAAnB;AAA2F;AAPhC,CAAjG","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorScale } from '../../mol-util/color';\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nvar DefaultOccupancyColor = Color(0xCCCCCC);\r\nvar Description = \"Assigns a color based on the occupancy of an atom.\";\r\nexport var OccupancyColorThemeParams = {\r\n    domain: PD.Interval([0, 1]),\r\n    list: PD.ColorList('purples', { presetKind: 'scale' }),\r\n};\r\nexport function getOccupancyColorThemeParams(ctx) {\r\n    return OccupancyColorThemeParams; // TODO return copy\r\n}\r\nexport function getOccupancy(unit, element) {\r\n    if (Unit.isAtomic(unit)) {\r\n        return unit.model.atomicConformation.occupancy.value(element);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nexport function OccupancyColorTheme(ctx, props) {\r\n    var scale = ColorScale.create({\r\n        reverse: false,\r\n        domain: props.domain,\r\n        listOrName: props.list.colors,\r\n    });\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location)) {\r\n            return scale.color(getOccupancy(location.unit, location.element));\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            return scale.color(getOccupancy(location.aUnit, location.aUnit.elements[location.aIndex]));\r\n        }\r\n        return DefaultOccupancyColor;\r\n    }\r\n    return {\r\n        factory: OccupancyColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: scale ? scale.legend : undefined\r\n    };\r\n}\r\nexport var OccupancyColorThemeProvider = {\r\n    name: 'occupancy',\r\n    label: 'Occupancy',\r\n    category: \"Atom Property\" /* Atom */,\r\n    factory: OccupancyColorTheme,\r\n    getParams: getOccupancyColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(OccupancyColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return m.atomicConformation.occupancy.isDefined; }); }\r\n};\r\n//# sourceMappingURL=occupancy.js.map"]},"metadata":{},"sourceType":"module"}