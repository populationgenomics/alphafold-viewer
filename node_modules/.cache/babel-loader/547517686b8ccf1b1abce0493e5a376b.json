{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../mol-geo/geometry/mesh/mesh-builder';\nimport { BoxCage } from '../../mol-geo/primitive/box';\nimport { Box3D, Sphere3D } from '../../mol-math/geometry';\nimport { Mat4, Vec3 } from '../../mol-math/linear-algebra';\nimport { Shape } from '../../mol-model/shape';\nimport { Task } from '../../mol-task';\nimport { ColorNames } from '../../mol-util/color/names';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\nexport { BoxShape3D };\nvar BoxShape3D = PluginStateTransform.BuiltIn({\n  name: 'box-shape-3d',\n  display: 'Box Shape',\n  from: SO.Root,\n  to: SO.Shape.Provider,\n  params: {\n    bottomLeft: PD.Vec3(Vec3()),\n    topRight: PD.Vec3(Vec3.create(1, 1, 1)),\n    radius: PD.Numeric(0.15, {\n      min: 0.01,\n      max: 4,\n      step: 0.01\n    }),\n    color: PD.Color(ColorNames.red)\n  }\n})({\n  canAutoUpdate: function () {\n    return true;\n  },\n  apply: function (_a) {\n    var _this = this;\n\n    var params = _a.params;\n    return Task.create('Shape Representation', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , new SO.Shape.Provider({\n            label: 'Box',\n            data: params,\n            params: Mesh.Params,\n            getShape: function (_, data) {\n              var mesh = getBoxMesh(Box3D.create(params.bottomLeft, params.topRight), params.radius);\n              return Shape.create('Box', data, mesh, function () {\n                return data.color;\n              }, function () {\n                return 1;\n              }, function () {\n                return 'Box';\n              });\n            },\n            geometryUtils: Mesh.Utils\n          }, {\n            label: 'Box'\n          })];\n        });\n      });\n    });\n  }\n});\nexport function getBoxMesh(box, radius, oldMesh) {\n  var diag = Vec3.sub(Vec3(), box.max, box.min);\n  var translateUnit = Mat4.fromTranslation(Mat4(), Vec3.create(0.5, 0.5, 0.5));\n  var scale = Mat4.fromScaling(Mat4(), diag);\n  var translate = Mat4.fromTranslation(Mat4(), box.min);\n  var transform = Mat4.mul3(Mat4(), translate, scale, translateUnit); // TODO: optimize?\n\n  var state = MeshBuilder.createState(256, 128, oldMesh);\n  state.currentGroup = 1;\n  MeshBuilder.addCage(state, transform, BoxCage(), radius, 2, 20);\n  var mesh = MeshBuilder.getMesh(state);\n  var center = Vec3.scaleAndAdd(Vec3(), box.min, diag, 0.5);\n  var sphereRadius = Vec3.distance(box.min, center);\n  mesh.setBoundingSphere(Sphere3D.create(center, sphereRadius));\n  return mesh;\n}","map":{"version":3,"sources":["../../../src/mol-plugin-state/transforms/shape.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { BoxCage } from '../../mol-geo/primitive/box';\r\nimport { Box3D, Sphere3D } from '../../mol-math/geometry';\r\nimport { Mat4, Vec3 } from '../../mol-math/linear-algebra';\r\nimport { Shape } from '../../mol-model/shape';\r\nimport { Task } from '../../mol-task';\r\nimport { ColorNames } from '../../mol-util/color/names';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\r\nexport { BoxShape3D };\r\nvar BoxShape3D = PluginStateTransform.BuiltIn({\r\n    name: 'box-shape-3d',\r\n    display: 'Box Shape',\r\n    from: SO.Root,\r\n    to: SO.Shape.Provider,\r\n    params: {\r\n        bottomLeft: PD.Vec3(Vec3()),\r\n        topRight: PD.Vec3(Vec3.create(1, 1, 1)),\r\n        radius: PD.Numeric(0.15, { min: 0.01, max: 4, step: 0.01 }),\r\n        color: PD.Color(ColorNames.red)\r\n    }\r\n})({\r\n    canAutoUpdate: function () {\r\n        return true;\r\n    },\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var params = _a.params;\r\n        return Task.create('Shape Representation', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new SO.Shape.Provider({\r\n                        label: 'Box',\r\n                        data: params,\r\n                        params: Mesh.Params,\r\n                        getShape: function (_, data) {\r\n                            var mesh = getBoxMesh(Box3D.create(params.bottomLeft, params.topRight), params.radius);\r\n                            return Shape.create('Box', data, mesh, function () { return data.color; }, function () { return 1; }, function () { return 'Box'; });\r\n                        },\r\n                        geometryUtils: Mesh.Utils\r\n                    }, { label: 'Box' })];\r\n            });\r\n        }); });\r\n    }\r\n});\r\nexport function getBoxMesh(box, radius, oldMesh) {\r\n    var diag = Vec3.sub(Vec3(), box.max, box.min);\r\n    var translateUnit = Mat4.fromTranslation(Mat4(), Vec3.create(0.5, 0.5, 0.5));\r\n    var scale = Mat4.fromScaling(Mat4(), diag);\r\n    var translate = Mat4.fromTranslation(Mat4(), box.min);\r\n    var transform = Mat4.mul3(Mat4(), translate, scale, translateUnit);\r\n    // TODO: optimize?\r\n    var state = MeshBuilder.createState(256, 128, oldMesh);\r\n    state.currentGroup = 1;\r\n    MeshBuilder.addCage(state, transform, BoxCage(), radius, 2, 20);\r\n    var mesh = MeshBuilder.getMesh(state);\r\n    var center = Vec3.scaleAndAdd(Vec3(), box.min, diag, 0.5);\r\n    var sphereRadius = Vec3.distance(box.min, center);\r\n    mesh.setBoundingSphere(Sphere3D.create(center, sphereRadius));\r\n    return mesh;\r\n}\r\n//# sourceMappingURL=shape.js.map"]},"metadata":{},"sourceType":"module"}