{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nexport function checkStructureMinMaxDistance(ctx, a, b, minDist, maxDist, elementRadius) {\n  if (a.elementCount === 0 || b.elementCount === 0) return true;\n  if (a.elementCount <= b.elementCount) return MinMaxDist.check(ctx, a, b, minDist, maxDist, elementRadius);\n  return MinMaxDist.check(ctx, b, a, minDist, maxDist, elementRadius);\n}\nexport function checkStructureMaxRadiusDistance(ctx, a, b, maxDist, elementRadius) {\n  if (a.elementCount === 0 || b.elementCount === 0) return true;\n  if (a.elementCount <= b.elementCount) return MaxRadiusDist.check(ctx, a, b, maxDist, elementRadius);\n  return MaxRadiusDist.check(ctx, b, a, maxDist, elementRadius);\n}\nvar MinMaxDist;\n\n(function (MinMaxDist) {\n  var distVec = Vec3.zero();\n\n  function inUnit(ctx, unit, p, eRadius, minDist, maxDist, elementRadius) {\n    var elements = unit.elements,\n        position = unit.conformation.position,\n        dV = distVec;\n    ctx.element.unit = unit;\n    var withinRange = false;\n\n    for (var i = 0, _i = elements.length; i < _i; i++) {\n      var e = elements[i];\n      ctx.element.element = e;\n      var d = Math.max(0, Vec3.distance(p, position(e, dV)) - eRadius - elementRadius(ctx));\n      if (d < minDist) return 0\n      /* BelowMin */\n      ;\n      if (d < maxDist) withinRange = true;\n    }\n\n    return withinRange ? 1\n    /* WithinMax */\n    : 2\n    /* Miss */\n    ;\n  }\n\n  function toPoint(ctx, s, point, radius, minDist, maxDist, elementRadius) {\n    var units = s.units;\n    var withinRange = false;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      var iu = inUnit(ctx, units[i], point, radius, minDist, maxDist, elementRadius);\n      if (iu === 0\n      /* BelowMin */\n      ) return 0\n      /* BelowMin */\n      ;\n      if (iu === 1\n      /* WithinMax */\n      ) withinRange = true;\n    }\n\n    return withinRange ? 1\n    /* WithinMax */\n    : 2\n    /* Miss */\n    ;\n  }\n\n  MinMaxDist.toPoint = toPoint;\n  var distPivot = Vec3.zero();\n\n  function check(ctx, a, b, minDist, maxDist, elementRadius) {\n    if (a.elementCount === 0 || b.elementCount === 0) return 0;\n    var units = a.units;\n    var withinRange = false;\n    ctx.element.structure = a;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      var unit = units[i];\n      var elements = unit.elements,\n          position = unit.conformation.position;\n      ctx.element.unit = unit;\n\n      for (var i_1 = 0, _i_1 = elements.length; i_1 < _i_1; i_1++) {\n        var e = elements[i_1];\n        ctx.element.element = e;\n        var tp = toPoint(ctx, b, position(e, distPivot), elementRadius(ctx), minDist, maxDist, elementRadius);\n        if (tp === 0\n        /* BelowMin */\n        ) return 0\n        /* BelowMin */\n        ;\n        if (tp === 1\n        /* WithinMax */\n        ) withinRange = true;\n      }\n    }\n\n    return withinRange;\n  }\n\n  MinMaxDist.check = check;\n})(MinMaxDist || (MinMaxDist = {}));\n\nvar MaxRadiusDist;\n\n(function (MaxRadiusDist) {\n  var distVec = Vec3.zero();\n\n  function inUnit(ctx, unit, p, eRadius, maxDist, elementRadius) {\n    var elements = unit.elements,\n        position = unit.conformation.position,\n        dV = distVec;\n    ctx.element.unit = unit;\n\n    for (var i = 0, _i = elements.length; i < _i; i++) {\n      var e = elements[i];\n      ctx.element.element = e;\n      if (Math.max(0, Vec3.distance(p, position(e, dV)) - eRadius - elementRadius(ctx)) <= maxDist) return true;\n    }\n\n    return false;\n  }\n\n  function toPoint(ctx, s, point, radius, maxDist, elementRadius) {\n    var units = s.units;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      if (inUnit(ctx, units[i], point, radius, maxDist, elementRadius)) return true;\n    }\n\n    return false;\n  }\n\n  MaxRadiusDist.toPoint = toPoint;\n  var distPivot = Vec3.zero();\n\n  function check(ctx, a, b, maxDist, elementRadius) {\n    if (a.elementCount === 0 || b.elementCount === 0) return 0;\n    var units = a.units;\n    ctx.element.structure = a;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      var unit = units[i];\n      ctx.element.unit = unit;\n      var elements = unit.elements,\n          position = unit.conformation.position;\n\n      for (var i_2 = 0, _i_2 = elements.length; i_2 < _i_2; i_2++) {\n        var e = elements[i_2];\n        ctx.element.element = e;\n        if (toPoint(ctx, b, position(e, distPivot), elementRadius(ctx), maxDist, elementRadius)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  MaxRadiusDist.check = check;\n})(MaxRadiusDist || (MaxRadiusDist = {}));","map":{"version":3,"sources":["../../../../../src/mol-model/structure/query/utils/structure-distance.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nexport function checkStructureMinMaxDistance(ctx, a, b, minDist, maxDist, elementRadius) {\r\n    if (a.elementCount === 0 || b.elementCount === 0)\r\n        return true;\r\n    if (a.elementCount <= b.elementCount)\r\n        return MinMaxDist.check(ctx, a, b, minDist, maxDist, elementRadius);\r\n    return MinMaxDist.check(ctx, b, a, minDist, maxDist, elementRadius);\r\n}\r\nexport function checkStructureMaxRadiusDistance(ctx, a, b, maxDist, elementRadius) {\r\n    if (a.elementCount === 0 || b.elementCount === 0)\r\n        return true;\r\n    if (a.elementCount <= b.elementCount)\r\n        return MaxRadiusDist.check(ctx, a, b, maxDist, elementRadius);\r\n    return MaxRadiusDist.check(ctx, b, a, maxDist, elementRadius);\r\n}\r\nvar MinMaxDist;\r\n(function (MinMaxDist) {\r\n    var distVec = Vec3.zero();\r\n    function inUnit(ctx, unit, p, eRadius, minDist, maxDist, elementRadius) {\r\n        var elements = unit.elements, position = unit.conformation.position, dV = distVec;\r\n        ctx.element.unit = unit;\r\n        var withinRange = false;\r\n        for (var i = 0, _i = elements.length; i < _i; i++) {\r\n            var e = elements[i];\r\n            ctx.element.element = e;\r\n            var d = Math.max(0, Vec3.distance(p, position(e, dV)) - eRadius - elementRadius(ctx));\r\n            if (d < minDist)\r\n                return 0 /* BelowMin */;\r\n            if (d < maxDist)\r\n                withinRange = true;\r\n        }\r\n        return withinRange ? 1 /* WithinMax */ : 2 /* Miss */;\r\n    }\r\n    function toPoint(ctx, s, point, radius, minDist, maxDist, elementRadius) {\r\n        var units = s.units;\r\n        var withinRange = false;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            var iu = inUnit(ctx, units[i], point, radius, minDist, maxDist, elementRadius);\r\n            if (iu === 0 /* BelowMin */)\r\n                return 0 /* BelowMin */;\r\n            if (iu === 1 /* WithinMax */)\r\n                withinRange = true;\r\n        }\r\n        return withinRange ? 1 /* WithinMax */ : 2 /* Miss */;\r\n    }\r\n    MinMaxDist.toPoint = toPoint;\r\n    var distPivot = Vec3.zero();\r\n    function check(ctx, a, b, minDist, maxDist, elementRadius) {\r\n        if (a.elementCount === 0 || b.elementCount === 0)\r\n            return 0;\r\n        var units = a.units;\r\n        var withinRange = false;\r\n        ctx.element.structure = a;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            var unit = units[i];\r\n            var elements = unit.elements, position = unit.conformation.position;\r\n            ctx.element.unit = unit;\r\n            for (var i_1 = 0, _i_1 = elements.length; i_1 < _i_1; i_1++) {\r\n                var e = elements[i_1];\r\n                ctx.element.element = e;\r\n                var tp = toPoint(ctx, b, position(e, distPivot), elementRadius(ctx), minDist, maxDist, elementRadius);\r\n                if (tp === 0 /* BelowMin */)\r\n                    return 0 /* BelowMin */;\r\n                if (tp === 1 /* WithinMax */)\r\n                    withinRange = true;\r\n            }\r\n        }\r\n        return withinRange;\r\n    }\r\n    MinMaxDist.check = check;\r\n})(MinMaxDist || (MinMaxDist = {}));\r\nvar MaxRadiusDist;\r\n(function (MaxRadiusDist) {\r\n    var distVec = Vec3.zero();\r\n    function inUnit(ctx, unit, p, eRadius, maxDist, elementRadius) {\r\n        var elements = unit.elements, position = unit.conformation.position, dV = distVec;\r\n        ctx.element.unit = unit;\r\n        for (var i = 0, _i = elements.length; i < _i; i++) {\r\n            var e = elements[i];\r\n            ctx.element.element = e;\r\n            if (Math.max(0, Vec3.distance(p, position(e, dV)) - eRadius - elementRadius(ctx)) <= maxDist)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function toPoint(ctx, s, point, radius, maxDist, elementRadius) {\r\n        var units = s.units;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            if (inUnit(ctx, units[i], point, radius, maxDist, elementRadius))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    MaxRadiusDist.toPoint = toPoint;\r\n    var distPivot = Vec3.zero();\r\n    function check(ctx, a, b, maxDist, elementRadius) {\r\n        if (a.elementCount === 0 || b.elementCount === 0)\r\n            return 0;\r\n        var units = a.units;\r\n        ctx.element.structure = a;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            var unit = units[i];\r\n            ctx.element.unit = unit;\r\n            var elements = unit.elements, position = unit.conformation.position;\r\n            for (var i_2 = 0, _i_2 = elements.length; i_2 < _i_2; i_2++) {\r\n                var e = elements[i_2];\r\n                ctx.element.element = e;\r\n                if (toPoint(ctx, b, position(e, distPivot), elementRadius(ctx), maxDist, elementRadius))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    MaxRadiusDist.check = check;\r\n})(MaxRadiusDist || (MaxRadiusDist = {}));\r\n//# sourceMappingURL=structure-distance.js.map"]},"metadata":{},"sourceType":"module"}