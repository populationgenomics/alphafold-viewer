{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { edt } from '../../../mol-math/geometry/distance-transform';\nimport { createTextureImage } from '../../../mol-gl/renderable/util';\nvar TextAtlasCache = {};\nexport function getFontAtlas(props) {\n  var hash = JSON.stringify(props);\n\n  if (TextAtlasCache[hash] === undefined) {\n    TextAtlasCache[hash] = new FontAtlas(props);\n  }\n\n  return TextAtlasCache[hash];\n}\nexport var FontAtlasParams = {\n  fontFamily: PD.Select('sans-serif', [['sans-serif', 'Sans Serif'], ['monospace', 'Monospace'], ['serif', 'Serif'], ['cursive', 'Cursive']]),\n  fontQuality: PD.Select(3, [[0, 'lower'], [1, 'low'], [2, 'medium'], [3, 'high'], [4, 'higher']]),\n  fontStyle: PD.Select('normal', [['normal', 'Normal'], ['italic', 'Italic'], ['oblique', 'Oblique']]),\n  fontVariant: PD.Select('normal', [['normal', 'Normal'], ['small-caps', 'Small Caps']]),\n  fontWeight: PD.Select('normal', [['normal', 'Normal'], ['bold', 'Bold']])\n};\n\nvar FontAtlas =\n/** @class */\nfunction () {\n  function FontAtlas(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.mapped = {};\n    this.scratchW = 0;\n    this.scratchH = 0;\n    this.currentX = 0;\n    this.currentY = 0;\n    this.cutoff = 0.5;\n\n    var p = __assign(__assign({}, PD.getDefaultValues(FontAtlasParams)), props);\n\n    this.props = p; // create measurements\n\n    var fontSize = 32 * (p.fontQuality + 1);\n    this.buffer = fontSize / 8;\n    this.radius = fontSize / 3;\n    this.lineHeight = Math.round(fontSize + 2 * this.buffer + this.radius);\n    this.maxWidth = Math.round(this.lineHeight * 0.75); // create texture (for ~350 characters)\n\n    this.texture = createTextureImage(350 * this.lineHeight * this.maxWidth, 1, Uint8Array); // prepare scratch canvas\n\n    this.scratchCanvas = document.createElement('canvas');\n    this.scratchCanvas.width = this.maxWidth;\n    this.scratchCanvas.height = this.lineHeight;\n    this.scratchContext = this.scratchCanvas.getContext('2d');\n    this.scratchContext.font = p.fontStyle + \" \" + p.fontVariant + \" \" + p.fontWeight + \" \" + fontSize + \"px \" + p.fontFamily;\n    this.scratchContext.fillStyle = 'black';\n    this.scratchContext.textBaseline = 'middle'; // SDF scratch values\n\n    this.scratchData = new Uint8Array(this.lineHeight * this.maxWidth); // temporary arrays for the distance transform\n\n    this.gridOuter = new Float64Array(this.lineHeight * this.maxWidth);\n    this.gridInner = new Float64Array(this.lineHeight * this.maxWidth);\n    this.f = new Float64Array(Math.max(this.lineHeight, this.maxWidth));\n    this.d = new Float64Array(Math.max(this.lineHeight, this.maxWidth));\n    this.z = new Float64Array(Math.max(this.lineHeight, this.maxWidth) + 1);\n    this.v = new Int16Array(Math.max(this.lineHeight, this.maxWidth));\n    this.middle = Math.ceil(this.lineHeight / 2); // replacement Character\n\n    this.placeholder = this.get(String.fromCharCode(0xFFFD));\n  }\n\n  FontAtlas.prototype.get = function (char) {\n    if (this.mapped[char] === undefined) {\n      this.draw(char);\n      var _a = this.texture,\n          array = _a.array,\n          width = _a.width,\n          height = _a.height;\n      var data = this.scratchData;\n\n      if (this.currentX + this.scratchW > width) {\n        this.currentX = 0;\n        this.currentY += this.scratchH;\n      }\n\n      if (this.currentY + this.scratchH > height) {\n        console.warn('canvas to small');\n        return this.placeholder;\n      }\n\n      this.mapped[char] = {\n        x: this.currentX,\n        y: this.currentY,\n        w: this.scratchW,\n        h: this.scratchH,\n        nw: this.scratchW / this.lineHeight,\n        nh: this.scratchH / this.lineHeight\n      };\n\n      for (var y = 0; y < this.scratchH; ++y) {\n        for (var x = 0; x < this.scratchW; ++x) {\n          array[width * (this.currentY + y) + this.currentX + x] = data[y * this.scratchW + x];\n        }\n      }\n\n      this.currentX += this.scratchW;\n    }\n\n    return this.mapped[char];\n  };\n\n  FontAtlas.prototype.draw = function (char) {\n    var h = this.lineHeight;\n    var ctx = this.scratchContext;\n    var data = this.scratchData; // measure text\n\n    var m = ctx.measureText(char);\n    var w = Math.min(this.maxWidth, Math.ceil(m.width + 2 * this.buffer));\n    var n = w * h;\n    ctx.clearRect(0, 0, w, h); // clear scratch area\n\n    ctx.fillText(char, this.buffer, this.middle); // draw text\n\n    var imageData = ctx.getImageData(0, 0, w, h);\n\n    for (var i = 0; i < n; i++) {\n      var a = imageData.data[i * 4 + 3] / 255; // alpha value\n\n      this.gridOuter[i] = a === 1 ? 0 : a === 0 ? Number.MAX_SAFE_INTEGER : Math.pow(Math.max(0, 0.5 - a), 2);\n      this.gridInner[i] = a === 1 ? Number.MAX_SAFE_INTEGER : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);\n    }\n\n    edt(this.gridOuter, w, h, this.f, this.d, this.v, this.z);\n    edt(this.gridInner, w, h, this.f, this.d, this.v, this.z);\n\n    for (var i = 0; i < n; i++) {\n      var d = this.gridOuter[i] - this.gridInner[i];\n      data[i] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));\n    }\n\n    this.scratchW = w;\n    this.scratchH = h;\n  };\n\n  return FontAtlas;\n}();\n\nexport { FontAtlas };","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/text/font-atlas.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { edt } from '../../../mol-math/geometry/distance-transform';\r\nimport { createTextureImage } from '../../../mol-gl/renderable/util';\r\nvar TextAtlasCache = {};\r\nexport function getFontAtlas(props) {\r\n    var hash = JSON.stringify(props);\r\n    if (TextAtlasCache[hash] === undefined) {\r\n        TextAtlasCache[hash] = new FontAtlas(props);\r\n    }\r\n    return TextAtlasCache[hash];\r\n}\r\nexport var FontAtlasParams = {\r\n    fontFamily: PD.Select('sans-serif', [['sans-serif', 'Sans Serif'], ['monospace', 'Monospace'], ['serif', 'Serif'], ['cursive', 'Cursive']]),\r\n    fontQuality: PD.Select(3, [[0, 'lower'], [1, 'low'], [2, 'medium'], [3, 'high'], [4, 'higher']]),\r\n    fontStyle: PD.Select('normal', [['normal', 'Normal'], ['italic', 'Italic'], ['oblique', 'Oblique']]),\r\n    fontVariant: PD.Select('normal', [['normal', 'Normal'], ['small-caps', 'Small Caps']]),\r\n    fontWeight: PD.Select('normal', [['normal', 'Normal'], ['bold', 'Bold']]),\r\n};\r\nvar FontAtlas = /** @class */ (function () {\r\n    function FontAtlas(props) {\r\n        if (props === void 0) { props = {}; }\r\n        this.mapped = {};\r\n        this.scratchW = 0;\r\n        this.scratchH = 0;\r\n        this.currentX = 0;\r\n        this.currentY = 0;\r\n        this.cutoff = 0.5;\r\n        var p = __assign(__assign({}, PD.getDefaultValues(FontAtlasParams)), props);\r\n        this.props = p;\r\n        // create measurements\r\n        var fontSize = 32 * (p.fontQuality + 1);\r\n        this.buffer = fontSize / 8;\r\n        this.radius = fontSize / 3;\r\n        this.lineHeight = Math.round(fontSize + 2 * this.buffer + this.radius);\r\n        this.maxWidth = Math.round(this.lineHeight * 0.75);\r\n        // create texture (for ~350 characters)\r\n        this.texture = createTextureImage(350 * this.lineHeight * this.maxWidth, 1, Uint8Array);\r\n        // prepare scratch canvas\r\n        this.scratchCanvas = document.createElement('canvas');\r\n        this.scratchCanvas.width = this.maxWidth;\r\n        this.scratchCanvas.height = this.lineHeight;\r\n        this.scratchContext = this.scratchCanvas.getContext('2d');\r\n        this.scratchContext.font = p.fontStyle + \" \" + p.fontVariant + \" \" + p.fontWeight + \" \" + fontSize + \"px \" + p.fontFamily;\r\n        this.scratchContext.fillStyle = 'black';\r\n        this.scratchContext.textBaseline = 'middle';\r\n        // SDF scratch values\r\n        this.scratchData = new Uint8Array(this.lineHeight * this.maxWidth);\r\n        // temporary arrays for the distance transform\r\n        this.gridOuter = new Float64Array(this.lineHeight * this.maxWidth);\r\n        this.gridInner = new Float64Array(this.lineHeight * this.maxWidth);\r\n        this.f = new Float64Array(Math.max(this.lineHeight, this.maxWidth));\r\n        this.d = new Float64Array(Math.max(this.lineHeight, this.maxWidth));\r\n        this.z = new Float64Array(Math.max(this.lineHeight, this.maxWidth) + 1);\r\n        this.v = new Int16Array(Math.max(this.lineHeight, this.maxWidth));\r\n        this.middle = Math.ceil(this.lineHeight / 2);\r\n        // replacement Character\r\n        this.placeholder = this.get(String.fromCharCode(0xFFFD));\r\n    }\r\n    FontAtlas.prototype.get = function (char) {\r\n        if (this.mapped[char] === undefined) {\r\n            this.draw(char);\r\n            var _a = this.texture, array = _a.array, width = _a.width, height = _a.height;\r\n            var data = this.scratchData;\r\n            if (this.currentX + this.scratchW > width) {\r\n                this.currentX = 0;\r\n                this.currentY += this.scratchH;\r\n            }\r\n            if (this.currentY + this.scratchH > height) {\r\n                console.warn('canvas to small');\r\n                return this.placeholder;\r\n            }\r\n            this.mapped[char] = {\r\n                x: this.currentX, y: this.currentY,\r\n                w: this.scratchW, h: this.scratchH,\r\n                nw: this.scratchW / this.lineHeight, nh: this.scratchH / this.lineHeight\r\n            };\r\n            for (var y = 0; y < this.scratchH; ++y) {\r\n                for (var x = 0; x < this.scratchW; ++x) {\r\n                    array[width * (this.currentY + y) + this.currentX + x] = data[y * this.scratchW + x];\r\n                }\r\n            }\r\n            this.currentX += this.scratchW;\r\n        }\r\n        return this.mapped[char];\r\n    };\r\n    FontAtlas.prototype.draw = function (char) {\r\n        var h = this.lineHeight;\r\n        var ctx = this.scratchContext;\r\n        var data = this.scratchData;\r\n        // measure text\r\n        var m = ctx.measureText(char);\r\n        var w = Math.min(this.maxWidth, Math.ceil(m.width + 2 * this.buffer));\r\n        var n = w * h;\r\n        ctx.clearRect(0, 0, w, h); // clear scratch area\r\n        ctx.fillText(char, this.buffer, this.middle); // draw text\r\n        var imageData = ctx.getImageData(0, 0, w, h);\r\n        for (var i = 0; i < n; i++) {\r\n            var a = imageData.data[i * 4 + 3] / 255; // alpha value\r\n            this.gridOuter[i] = a === 1 ? 0 : a === 0 ? Number.MAX_SAFE_INTEGER : Math.pow(Math.max(0, 0.5 - a), 2);\r\n            this.gridInner[i] = a === 1 ? Number.MAX_SAFE_INTEGER : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);\r\n        }\r\n        edt(this.gridOuter, w, h, this.f, this.d, this.v, this.z);\r\n        edt(this.gridInner, w, h, this.f, this.d, this.v, this.z);\r\n        for (var i = 0; i < n; i++) {\r\n            var d = this.gridOuter[i] - this.gridInner[i];\r\n            data[i] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));\r\n        }\r\n        this.scratchW = w;\r\n        this.scratchH = h;\r\n    };\r\n    return FontAtlas;\r\n}());\r\nexport { FontAtlas };\r\n//# sourceMappingURL=font-atlas.js.map"]},"metadata":{},"sourceType":"module"}