{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __extends } from \"tslib\";\nimport { setSubtreeVisibility } from '../../../mol-plugin/behavior/static/state';\nimport { PluginComponent } from '../../component';\nimport { buildVolumeHierarchy, VolumeHierarchy } from './hierarchy-state';\nimport { createVolumeRepresentationParams } from '../../helpers/volume-representation-params';\nimport { StateTransforms } from '../../transforms';\n\nvar VolumeHierarchyManager =\n/** @class */\nfunction (_super) {\n  __extends(VolumeHierarchyManager, _super);\n\n  function VolumeHierarchyManager(plugin) {\n    var _this = _super.call(this) || this;\n\n    _this.plugin = plugin;\n    _this.state = {\n      syncedTree: _this.dataState.tree,\n      notified: false,\n      hierarchy: VolumeHierarchy(),\n      selection: void 0\n    };\n    _this.behaviors = {\n      selection: _this.ev.behavior({\n        hierarchy: _this.current,\n        volume: _this.selection\n      })\n    };\n\n    _this.subscribe(plugin.state.data.events.changed, function (e) {\n      if (e.inTransaction || plugin.behaviors.state.isAnimating.value) return;\n\n      _this.sync(true);\n    });\n\n    _this.subscribe(plugin.behaviors.state.isAnimating, function (isAnimating) {\n      if (!isAnimating && !plugin.behaviors.state.isUpdating.value) _this.sync(true);\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(VolumeHierarchyManager.prototype, \"dataState\", {\n    get: function () {\n      return this.plugin.state.data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VolumeHierarchyManager.prototype, \"current\", {\n    get: function () {\n      this.sync(false);\n      return this.state.hierarchy;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VolumeHierarchyManager.prototype, \"selection\", {\n    get: function () {\n      this.sync(false);\n      return this.state.selection;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VolumeHierarchyManager.prototype.sync = function (notify) {\n    if (!notify && this.dataState.inUpdate) return;\n\n    if (this.state.syncedTree === this.dataState.tree) {\n      if (notify && !this.state.notified) {\n        this.state.notified = true;\n        this.behaviors.selection.next({\n          hierarchy: this.state.hierarchy,\n          volume: this.state.selection\n        });\n      }\n\n      return;\n    }\n\n    this.state.syncedTree = this.dataState.tree;\n    var update = buildVolumeHierarchy(this.plugin.state.data, this.current);\n\n    if (!update.changed) {\n      return;\n    }\n\n    var hierarchy = update.hierarchy;\n    this.state.hierarchy = hierarchy;\n\n    if (!this.state.selection) {\n      this.state.selection = hierarchy.volumes[0];\n    } else {\n      this.state.selection = hierarchy.refs.has(this.state.selection.cell.transform.ref) ? hierarchy.refs.get(this.state.selection.cell.transform.ref) : hierarchy.volumes[0];\n    }\n\n    if (notify) {\n      this.state.notified = true;\n      this.behaviors.selection.next({\n        hierarchy: hierarchy,\n        volume: this.state.selection\n      });\n    } else {\n      this.state.notified = false;\n    }\n  };\n\n  VolumeHierarchyManager.prototype.setCurrent = function (volume) {\n    this.state.selection = volume || this.state.hierarchy.volumes[0];\n    this.behaviors.selection.next({\n      hierarchy: this.state.hierarchy,\n      volume: volume || this.state.hierarchy.volumes[0]\n    });\n  }; // TODO: have common util\n\n\n  VolumeHierarchyManager.prototype.remove = function (refs, canUndo) {\n    if (refs.length === 0) return;\n    var deletes = this.plugin.state.data.build();\n\n    for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n      var r = refs_1[_i];\n      deletes.delete(typeof r === 'string' ? r : r.cell.transform.ref);\n    }\n\n    return deletes.commit({\n      canUndo: canUndo ? 'Remove' : false\n    });\n  }; // TODO: have common util\n\n\n  VolumeHierarchyManager.prototype.toggleVisibility = function (refs, action) {\n    if (refs.length === 0) return;\n    var isHidden = action !== void 0 ? action === 'show' ? false : true : !refs[0].cell.state.isHidden;\n\n    for (var _i = 0, refs_2 = refs; _i < refs_2.length; _i++) {\n      var c = refs_2[_i];\n      setSubtreeVisibility(this.dataState, c.cell.transform.ref, isHidden);\n    }\n  };\n\n  VolumeHierarchyManager.prototype.addRepresentation = function (ref, type) {\n    var _a;\n\n    var update = this.dataState.build().to(ref.cell).apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, (_a = ref.cell.obj) === null || _a === void 0 ? void 0 : _a.data, {\n      type: type\n    }));\n    return update.commit({\n      canUndo: 'Add Representation'\n    });\n  };\n\n  return VolumeHierarchyManager;\n}(PluginComponent);\n\nexport { VolumeHierarchyManager };\n\n(function (VolumeHierarchyManager) {\n  function getRepresentationTypes(plugin, pivot) {\n    var _a, _b;\n\n    return ((_a = pivot === null || pivot === void 0 ? void 0 : pivot.cell.obj) === null || _a === void 0 ? void 0 : _a.data) ? plugin.representation.volume.registry.getApplicableTypes((_b = pivot.cell.obj) === null || _b === void 0 ? void 0 : _b.data) : plugin.representation.volume.registry.types;\n  }\n\n  VolumeHierarchyManager.getRepresentationTypes = getRepresentationTypes;\n})(VolumeHierarchyManager || (VolumeHierarchyManager = {}));","map":{"version":3,"sources":["../../../../src/mol-plugin-state/manager/volume/hierarchy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { setSubtreeVisibility } from '../../../mol-plugin/behavior/static/state';\r\nimport { PluginComponent } from '../../component';\r\nimport { buildVolumeHierarchy, VolumeHierarchy } from './hierarchy-state';\r\nimport { createVolumeRepresentationParams } from '../../helpers/volume-representation-params';\r\nimport { StateTransforms } from '../../transforms';\r\nvar VolumeHierarchyManager = /** @class */ (function (_super) {\r\n    __extends(VolumeHierarchyManager, _super);\r\n    function VolumeHierarchyManager(plugin) {\r\n        var _this = _super.call(this) || this;\r\n        _this.plugin = plugin;\r\n        _this.state = {\r\n            syncedTree: _this.dataState.tree,\r\n            notified: false,\r\n            hierarchy: VolumeHierarchy(),\r\n            selection: void 0\r\n        };\r\n        _this.behaviors = {\r\n            selection: _this.ev.behavior({\r\n                hierarchy: _this.current,\r\n                volume: _this.selection\r\n            })\r\n        };\r\n        _this.subscribe(plugin.state.data.events.changed, function (e) {\r\n            if (e.inTransaction || plugin.behaviors.state.isAnimating.value)\r\n                return;\r\n            _this.sync(true);\r\n        });\r\n        _this.subscribe(plugin.behaviors.state.isAnimating, function (isAnimating) {\r\n            if (!isAnimating && !plugin.behaviors.state.isUpdating.value)\r\n                _this.sync(true);\r\n        });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(VolumeHierarchyManager.prototype, \"dataState\", {\r\n        get: function () {\r\n            return this.plugin.state.data;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(VolumeHierarchyManager.prototype, \"current\", {\r\n        get: function () {\r\n            this.sync(false);\r\n            return this.state.hierarchy;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(VolumeHierarchyManager.prototype, \"selection\", {\r\n        get: function () {\r\n            this.sync(false);\r\n            return this.state.selection;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    VolumeHierarchyManager.prototype.sync = function (notify) {\r\n        if (!notify && this.dataState.inUpdate)\r\n            return;\r\n        if (this.state.syncedTree === this.dataState.tree) {\r\n            if (notify && !this.state.notified) {\r\n                this.state.notified = true;\r\n                this.behaviors.selection.next({ hierarchy: this.state.hierarchy, volume: this.state.selection });\r\n            }\r\n            return;\r\n        }\r\n        this.state.syncedTree = this.dataState.tree;\r\n        var update = buildVolumeHierarchy(this.plugin.state.data, this.current);\r\n        if (!update.changed) {\r\n            return;\r\n        }\r\n        var hierarchy = update.hierarchy;\r\n        this.state.hierarchy = hierarchy;\r\n        if (!this.state.selection) {\r\n            this.state.selection = hierarchy.volumes[0];\r\n        }\r\n        else {\r\n            this.state.selection = hierarchy.refs.has(this.state.selection.cell.transform.ref) ? hierarchy.refs.get(this.state.selection.cell.transform.ref) : hierarchy.volumes[0];\r\n        }\r\n        if (notify) {\r\n            this.state.notified = true;\r\n            this.behaviors.selection.next({ hierarchy: hierarchy, volume: this.state.selection });\r\n        }\r\n        else {\r\n            this.state.notified = false;\r\n        }\r\n    };\r\n    VolumeHierarchyManager.prototype.setCurrent = function (volume) {\r\n        this.state.selection = volume || this.state.hierarchy.volumes[0];\r\n        this.behaviors.selection.next({ hierarchy: this.state.hierarchy, volume: volume || this.state.hierarchy.volumes[0] });\r\n    };\r\n    // TODO: have common util\r\n    VolumeHierarchyManager.prototype.remove = function (refs, canUndo) {\r\n        if (refs.length === 0)\r\n            return;\r\n        var deletes = this.plugin.state.data.build();\r\n        for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\r\n            var r = refs_1[_i];\r\n            deletes.delete(typeof r === 'string' ? r : r.cell.transform.ref);\r\n        }\r\n        return deletes.commit({ canUndo: canUndo ? 'Remove' : false });\r\n    };\r\n    // TODO: have common util\r\n    VolumeHierarchyManager.prototype.toggleVisibility = function (refs, action) {\r\n        if (refs.length === 0)\r\n            return;\r\n        var isHidden = action !== void 0\r\n            ? (action === 'show' ? false : true)\r\n            : !refs[0].cell.state.isHidden;\r\n        for (var _i = 0, refs_2 = refs; _i < refs_2.length; _i++) {\r\n            var c = refs_2[_i];\r\n            setSubtreeVisibility(this.dataState, c.cell.transform.ref, isHidden);\r\n        }\r\n    };\r\n    VolumeHierarchyManager.prototype.addRepresentation = function (ref, type) {\r\n        var _a;\r\n        var update = this.dataState.build()\r\n            .to(ref.cell)\r\n            .apply(StateTransforms.Representation.VolumeRepresentation3D, createVolumeRepresentationParams(this.plugin, (_a = ref.cell.obj) === null || _a === void 0 ? void 0 : _a.data, {\r\n            type: type,\r\n        }));\r\n        return update.commit({ canUndo: 'Add Representation' });\r\n    };\r\n    return VolumeHierarchyManager;\r\n}(PluginComponent));\r\nexport { VolumeHierarchyManager };\r\n(function (VolumeHierarchyManager) {\r\n    function getRepresentationTypes(plugin, pivot) {\r\n        var _a, _b;\r\n        return ((_a = pivot === null || pivot === void 0 ? void 0 : pivot.cell.obj) === null || _a === void 0 ? void 0 : _a.data)\r\n            ? plugin.representation.volume.registry.getApplicableTypes((_b = pivot.cell.obj) === null || _b === void 0 ? void 0 : _b.data)\r\n            : plugin.representation.volume.registry.types;\r\n    }\r\n    VolumeHierarchyManager.getRepresentationTypes = getRepresentationTypes;\r\n})(VolumeHierarchyManager || (VolumeHierarchyManager = {}));\r\n//# sourceMappingURL=hierarchy.js.map"]},"metadata":{},"sourceType":"module"}