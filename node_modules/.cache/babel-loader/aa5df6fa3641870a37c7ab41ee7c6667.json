{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Unit } from '../../../mol-model/structure';\nimport { Representation } from '../../../mol-repr/representation';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { UnitsRepresentation } from '../units-representation';\nimport { NucleotideBlockParams, NucleotideBlockVisual } from '../visual/nucleotide-block-mesh';\nimport { NucleotideRingParams, NucleotideRingVisual } from '../visual/nucleotide-ring-mesh';\nimport { PolymerDirectionParams, PolymerDirectionVisual } from '../visual/polymer-direction-wedge';\nimport { PolymerGapParams, PolymerGapVisual } from '../visual/polymer-gap-cylinder';\nimport { PolymerTraceParams, PolymerTraceVisual } from '../visual/polymer-trace-mesh';\nimport { SecondaryStructureProvider } from '../../../mol-model-props/computed/secondary-structure';\nimport { HelixOrientationProvider } from '../../../mol-model-props/computed/helix-orientation';\nvar CartoonVisuals = {\n  'polymer-trace': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer trace mesh', ctx, getParams, PolymerTraceVisual);\n  },\n  'polymer-gap': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer gap cylinder', ctx, getParams, PolymerGapVisual);\n  },\n  'nucleotide-block': function (ctx, getParams) {\n    return UnitsRepresentation('Nucleotide block mesh', ctx, getParams, NucleotideBlockVisual);\n  },\n  'nucleotide-ring': function (ctx, getParams) {\n    return UnitsRepresentation('Nucleotide ring mesh', ctx, getParams, NucleotideRingVisual);\n  },\n  'direction-wedge': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer direction wedge', ctx, getParams, PolymerDirectionVisual);\n  }\n};\nexport var CartoonParams = __assign(__assign(__assign(__assign(__assign(__assign({}, PolymerTraceParams), PolymerGapParams), NucleotideBlockParams), NucleotideRingParams), PolymerDirectionParams), {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  visuals: PD.MultiSelect(['polymer-trace', 'polymer-gap', 'nucleotide-block'], PD.objectToOptions(CartoonVisuals))\n});\nexport function getCartoonParams(ctx, structure) {\n  var params = PD.clone(CartoonParams);\n  var hasNucleotides = false;\n  var hasGaps = false;\n  structure.units.forEach(function (u) {\n    if (!hasNucleotides && Unit.isAtomic(u) && u.nucleotideElements.length) hasNucleotides = true;\n    if (!hasGaps && u.gapElements.length) hasGaps = true;\n  });\n  params.visuals.defaultValue = ['polymer-trace'];\n  if (hasNucleotides) params.visuals.defaultValue.push('nucleotide-block');\n  if (hasGaps) params.visuals.defaultValue.push('polymer-gap');\n  return params;\n}\nexport function CartoonRepresentation(ctx, getParams) {\n  return Representation.createMulti('Cartoon', ctx, getParams, StructureRepresentationStateBuilder, CartoonVisuals);\n}\nexport var CartoonRepresentationProvider = StructureRepresentationProvider({\n  name: 'cartoon',\n  label: 'Cartoon',\n  description: 'Displays ribbons, planks, tubes smoothly following the trace atoms of polymers.',\n  factory: CartoonRepresentation,\n  getParams: getCartoonParams,\n  defaultValues: PD.getDefaultValues(CartoonParams),\n  defaultColorTheme: {\n    name: 'chain-id'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.polymerResidueCount > 0;\n  },\n  ensureCustomProperties: {\n    attach: function (ctx, structure) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var _i, _a, m;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , SecondaryStructureProvider.attach(ctx, structure, void 0, true)];\n\n            case 1:\n              _b.sent();\n\n              _i = 0, _a = structure.models;\n              _b.label = 2;\n\n            case 2:\n              if (!(_i < _a.length)) return [3\n              /*break*/\n              , 5];\n              m = _a[_i];\n              return [4\n              /*yield*/\n              , HelixOrientationProvider.attach(ctx, m, void 0, true)];\n\n            case 3:\n              _b.sent();\n\n              _b.label = 4;\n\n            case 4:\n              _i++;\n              return [3\n              /*break*/\n              , 2];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    },\n    detach: function (data) {\n      SecondaryStructureProvider.ref(data, false);\n\n      for (var _i = 0, _a = data.models; _i < _a.length; _i++) {\n        var m = _a[_i];\n        HelixOrientationProvider.ref(m, false);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/cartoon.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { Unit } from '../../../mol-model/structure';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { NucleotideBlockParams, NucleotideBlockVisual } from '../visual/nucleotide-block-mesh';\r\nimport { NucleotideRingParams, NucleotideRingVisual } from '../visual/nucleotide-ring-mesh';\r\nimport { PolymerDirectionParams, PolymerDirectionVisual } from '../visual/polymer-direction-wedge';\r\nimport { PolymerGapParams, PolymerGapVisual } from '../visual/polymer-gap-cylinder';\r\nimport { PolymerTraceParams, PolymerTraceVisual } from '../visual/polymer-trace-mesh';\r\nimport { SecondaryStructureProvider } from '../../../mol-model-props/computed/secondary-structure';\r\nimport { HelixOrientationProvider } from '../../../mol-model-props/computed/helix-orientation';\r\nvar CartoonVisuals = {\r\n    'polymer-trace': function (ctx, getParams) { return UnitsRepresentation('Polymer trace mesh', ctx, getParams, PolymerTraceVisual); },\r\n    'polymer-gap': function (ctx, getParams) { return UnitsRepresentation('Polymer gap cylinder', ctx, getParams, PolymerGapVisual); },\r\n    'nucleotide-block': function (ctx, getParams) { return UnitsRepresentation('Nucleotide block mesh', ctx, getParams, NucleotideBlockVisual); },\r\n    'nucleotide-ring': function (ctx, getParams) { return UnitsRepresentation('Nucleotide ring mesh', ctx, getParams, NucleotideRingVisual); },\r\n    'direction-wedge': function (ctx, getParams) { return UnitsRepresentation('Polymer direction wedge', ctx, getParams, PolymerDirectionVisual); }\r\n};\r\nexport var CartoonParams = __assign(__assign(__assign(__assign(__assign(__assign({}, PolymerTraceParams), PolymerGapParams), NucleotideBlockParams), NucleotideRingParams), PolymerDirectionParams), { sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }), visuals: PD.MultiSelect(['polymer-trace', 'polymer-gap', 'nucleotide-block'], PD.objectToOptions(CartoonVisuals)) });\r\nexport function getCartoonParams(ctx, structure) {\r\n    var params = PD.clone(CartoonParams);\r\n    var hasNucleotides = false;\r\n    var hasGaps = false;\r\n    structure.units.forEach(function (u) {\r\n        if (!hasNucleotides && Unit.isAtomic(u) && u.nucleotideElements.length)\r\n            hasNucleotides = true;\r\n        if (!hasGaps && u.gapElements.length)\r\n            hasGaps = true;\r\n    });\r\n    params.visuals.defaultValue = ['polymer-trace'];\r\n    if (hasNucleotides)\r\n        params.visuals.defaultValue.push('nucleotide-block');\r\n    if (hasGaps)\r\n        params.visuals.defaultValue.push('polymer-gap');\r\n    return params;\r\n}\r\nexport function CartoonRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Cartoon', ctx, getParams, StructureRepresentationStateBuilder, CartoonVisuals);\r\n}\r\nexport var CartoonRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'cartoon',\r\n    label: 'Cartoon',\r\n    description: 'Displays ribbons, planks, tubes smoothly following the trace atoms of polymers.',\r\n    factory: CartoonRepresentation,\r\n    getParams: getCartoonParams,\r\n    defaultValues: PD.getDefaultValues(CartoonParams),\r\n    defaultColorTheme: { name: 'chain-id' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.polymerResidueCount > 0; },\r\n    ensureCustomProperties: {\r\n        attach: function (ctx, structure) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var _i, _a, m;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, SecondaryStructureProvider.attach(ctx, structure, void 0, true)];\r\n                    case 1:\r\n                        _b.sent();\r\n                        _i = 0, _a = structure.models;\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        if (!(_i < _a.length)) return [3 /*break*/, 5];\r\n                        m = _a[_i];\r\n                        return [4 /*yield*/, HelixOrientationProvider.attach(ctx, m, void 0, true)];\r\n                    case 3:\r\n                        _b.sent();\r\n                        _b.label = 4;\r\n                    case 4:\r\n                        _i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); },\r\n        detach: function (data) {\r\n            SecondaryStructureProvider.ref(data, false);\r\n            for (var _i = 0, _a = data.models; _i < _a.length; _i++) {\r\n                var m = _a[_i];\r\n                HelixOrientationProvider.ref(m, false);\r\n            }\r\n        }\r\n    }\r\n});\r\n//# sourceMappingURL=cartoon.js.map"]},"metadata":{},"sourceType":"module"}