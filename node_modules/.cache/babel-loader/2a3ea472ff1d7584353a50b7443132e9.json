{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3 } from '../../mol-math/linear-algebra';\nexport function createCage(vertices, edges) {\n  return {\n    vertices: vertices,\n    edges: edges\n  };\n}\nexport function cloneCage(cage) {\n  return {\n    vertices: new Float32Array(cage.vertices),\n    edges: new Uint32Array(cage.edges)\n  };\n}\nvar tmpV = Vec3.zero();\n/** Transform primitive in-place */\n\nexport function transformCage(cage, t) {\n  var vertices = cage.vertices;\n\n  for (var i = 0, il = vertices.length; i < il; i += 3) {\n    // position\n    Vec3.transformMat4(tmpV, Vec3.fromArray(tmpV, vertices, i), t);\n    Vec3.toArray(tmpV, vertices, i);\n  }\n\n  return cage;\n}","map":{"version":3,"sources":["../../../src/mol-geo/primitive/cage.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAe,IAAf,QAA2B,+BAA3B;AAQA,OAAM,SAAU,UAAV,CAAqB,QAArB,EAAkD,KAAlD,EAA0E;AAC5E,SAAO;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,KAAK,EAAA;AAAjB,GAAP;AACH;AAED,OAAM,SAAU,SAAV,CAAoB,IAApB,EAA8B;AAChC,SAAO;AACH,IAAA,QAAQ,EAAE,IAAI,YAAJ,CAAiB,IAAI,CAAC,QAAtB,CADP;AAEH,IAAA,KAAK,EAAE,IAAI,WAAJ,CAAgB,IAAI,CAAC,KAArB;AAFJ,GAAP;AAIH;AAED,IAAM,IAAI,GAAG,IAAI,CAAC,IAAL,EAAb;AAEA;;AACA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAoC,CAApC,EAA2C;AACrC,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;;AACR,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAA9B,EAAsC,CAAC,GAAG,EAA1C,EAA8C,CAAC,IAAI,CAAnD,EAAsD;AAClD;AACA,IAAA,IAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,IAAI,CAAC,SAAL,CAAe,IAAf,EAAqB,QAArB,EAA+B,CAA/B,CAAzB,EAA4D,CAA5D;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,IAAb,EAAmB,QAAnB,EAA4C,CAA5C;AACH;;AACD,SAAO,IAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nexport function createCage(vertices, edges) {\r\n    return { vertices: vertices, edges: edges };\r\n}\r\nexport function cloneCage(cage) {\r\n    return {\r\n        vertices: new Float32Array(cage.vertices),\r\n        edges: new Uint32Array(cage.edges)\r\n    };\r\n}\r\nvar tmpV = Vec3.zero();\r\n/** Transform primitive in-place */\r\nexport function transformCage(cage, t) {\r\n    var vertices = cage.vertices;\r\n    for (var i = 0, il = vertices.length; i < il; i += 3) {\r\n        // position\r\n        Vec3.transformMat4(tmpV, Vec3.fromArray(tmpV, vertices, i), t);\r\n        Vec3.toArray(tmpV, vertices, i);\r\n    }\r\n    return cage;\r\n}\r\n//# sourceMappingURL=cage.js.map"]},"metadata":{},"sourceType":"module"}