/**
 * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Michal Malý <michal.maly@ibt.cas.cz>
 * @author Jiří Černý <jiri.cerny@ibt.cas.cz>
 */
import { __assign, __awaiter, __generator } from "tslib";
import { ConfalPyramidsTypes as CPT } from './types';
import { Column } from '../../../mol-data/db';
import { toTable } from '../../../mol-io/reader/cif/schema';
import { CustomPropertyDescriptor } from '../../../mol-model/custom-property';
import { CustomModelProperty } from '../../../mol-model-props/common/custom-model-property';
import { PropertyWrapper } from '../../../mol-model-props/common/wrapper';
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { MmcifFormat } from '../../../mol-model-formats/structure/mmcif';
export var ConfalPyramids;
(function (ConfalPyramids) {
    ConfalPyramids.Schema = {
        ndb_struct_ntc_step: {
            id: Column.Schema.int,
            name: Column.Schema.str,
            PDB_model_number: Column.Schema.int,
            label_entity_id_1: Column.Schema.int,
            label_asym_id_1: Column.Schema.str,
            label_seq_id_1: Column.Schema.int,
            label_comp_id_1: Column.Schema.str,
            label_alt_id_1: Column.Schema.str,
            label_entity_id_2: Column.Schema.int,
            label_asym_id_2: Column.Schema.str,
            label_seq_id_2: Column.Schema.int,
            label_comp_id_2: Column.Schema.str,
            label_alt_id_2: Column.Schema.str,
            auth_asym_id_1: Column.Schema.str,
            auth_seq_id_1: Column.Schema.int,
            auth_asym_id_2: Column.Schema.str,
            auth_seq_id_2: Column.Schema.int,
            PDB_ins_code_1: Column.Schema.str,
            PDB_ins_code_2: Column.Schema.str,
        },
        ndb_struct_ntc_step_summary: {
            step_id: Column.Schema.int,
            assigned_CANA: Column.Schema.str,
            assigned_NtC: Column.Schema.str,
            confal_score: Column.Schema.int,
            euclidean_distance_NtC_ideal: Column.Schema.float,
            cartesian_rmsd_closest_NtC_representative: Column.Schema.float,
            closest_CANA: Column.Schema.str,
            closest_NtC: Column.Schema.str,
            closest_step_golden: Column.Schema.str
        }
    };
    function fromCif(ctx, model, props) {
        return __awaiter(this, void 0, void 0, function () {
            var info, data, fromCif;
            return __generator(this, function (_a) {
                info = PropertyWrapper.createInfo();
                data = getCifData(model);
                if (data === undefined)
                    return [2 /*return*/, { value: { info: info, data: undefined } }];
                fromCif = createPyramidsFromCif(model, data.steps, data.stepsSummary);
                return [2 /*return*/, { value: { info: info, data: fromCif } }];
            });
        });
    }
    ConfalPyramids.fromCif = fromCif;
    function getCifData(model) {
        if (!MmcifFormat.is(model.sourceData))
            throw new Error('Data format must be mmCIF');
        if (!hasNdbStructNtcCategories(model))
            return undefined;
        return {
            steps: toTable(ConfalPyramids.Schema.ndb_struct_ntc_step, model.sourceData.data.frame.categories.ndb_struct_ntc_step),
            stepsSummary: toTable(ConfalPyramids.Schema.ndb_struct_ntc_step_summary, model.sourceData.data.frame.categories.ndb_struct_ntc_step_summary)
        };
    }
    function hasNdbStructNtcCategories(model) {
        if (!MmcifFormat.is(model.sourceData))
            return false;
        var names = (model.sourceData).data.frame.categoryNames;
        return names.includes('ndb_struct_ntc_step') && names.includes('ndb_struct_ntc_step_summary');
    }
    function isApplicable(model) {
        return !!model && hasNdbStructNtcCategories(model);
    }
    ConfalPyramids.isApplicable = isApplicable;
})(ConfalPyramids || (ConfalPyramids = {}));
export var ConfalPyramidsParams = {};
export var ConfalPyramidsProvider = CustomModelProperty.createProvider({
    label: 'Confal Pyramids',
    descriptor: CustomPropertyDescriptor({
        name: 'confal_pyramids',
    }),
    type: 'static',
    defaultParams: ConfalPyramidsParams,
    getParams: function (data) { return ConfalPyramidsParams; },
    isApplicable: function (data) { return ConfalPyramids.isApplicable(data); },
    obtain: function (ctx, data, props) { return __awaiter(void 0, void 0, void 0, function () {
        var p;
        return __generator(this, function (_a) {
            p = __assign(__assign({}, PD.getDefaultValues(ConfalPyramidsParams)), props);
            return [2 /*return*/, ConfalPyramids.fromCif(ctx, data, p)];
        });
    }); }
});
function createPyramidsFromCif(model, steps, stepsSummary) {
    var pyramids = new Array();
    var names = new Map();
    var locations = new Array();
    var hasMultipleModels = false;
    var id = steps.id, PDB_model_number = steps.PDB_model_number, name = steps.name, auth_asym_id_1 = steps.auth_asym_id_1, auth_seq_id_1 = steps.auth_seq_id_1, label_comp_id_1 = steps.label_comp_id_1, label_alt_id_1 = steps.label_alt_id_1, PDB_ins_code_1 = steps.PDB_ins_code_1, auth_asym_id_2 = steps.auth_asym_id_2, auth_seq_id_2 = steps.auth_seq_id_2, label_comp_id_2 = steps.label_comp_id_2, label_alt_id_2 = steps.label_alt_id_2, PDB_ins_code_2 = steps.PDB_ins_code_2, _rowCount = steps._rowCount;
    if (_rowCount !== stepsSummary._rowCount)
        throw new Error('Inconsistent mmCIF data');
    for (var i = 0; i < _rowCount; i++) {
        var model_num = PDB_model_number.value(i);
        if (model_num !== model.modelNum) {
            hasMultipleModels = true;
            continue; // We are only interested in data for the current model
        }
        var _a = getNtCAndConfalScore(id.value(i), i, stepsSummary), _NtC = _a._NtC, _confal_score = _a._confal_score;
        var pyramid = {
            PDB_model_number: model_num,
            name: name.value(i),
            auth_asym_id_1: auth_asym_id_1.value(i),
            auth_seq_id_1: auth_seq_id_1.value(i),
            label_comp_id_1: label_comp_id_1.value(i),
            label_alt_id_1: label_alt_id_1.value(i),
            PDB_ins_code_1: PDB_ins_code_1.value(i),
            auth_asym_id_2: auth_asym_id_2.value(i),
            auth_seq_id_2: auth_seq_id_2.value(i),
            label_comp_id_2: label_comp_id_2.value(i),
            label_alt_id_2: label_alt_id_2.value(i),
            PDB_ins_code_2: PDB_ins_code_2.value(i),
            confal_score: _confal_score,
            NtC: _NtC
        };
        pyramids.push(pyramid);
        names.set(pyramid.name, pyramids.length - 1);
        locations.push(CPT.Location(pyramid, false));
        locations.push(CPT.Location(pyramid, true));
    }
    return { pyramids: pyramids, names: names, locations: locations, hasMultipleModels: hasMultipleModels };
}
function getNtCAndConfalScore(id, i, stepsSummary) {
    var step_id = stepsSummary.step_id, confal_score = stepsSummary.confal_score, assigned_NtC = stepsSummary.assigned_NtC;
    // Assume that step_ids in ntc_step_summary are in the same order as steps in ntc_step
    for (var j = i; j < stepsSummary._rowCount; j++) {
        if (id === step_id.value(j))
            return { _NtC: assigned_NtC.value(j), _confal_score: confal_score.value(j) };
    }
    // Safety net for cases where the previous assumption is not met
    for (var j = 0; j < i; j++) {
        if (id === step_id.value(j))
            return { _NtC: assigned_NtC.value(j), _confal_score: confal_score.value(j) };
    }
    throw new Error('Inconsistent mmCIF data');
}
//# sourceMappingURL=property.js.map