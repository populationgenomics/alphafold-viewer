{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\n/**\r\n * Determine the number of digits in a floating point number\r\n * Find a number M such that round(M * v) - M * v <= delta.\r\n * If no such M exists, return -1.\r\n */\nexport function getMantissaMultiplier(v, maxDigits, delta) {\n  var m = 1,\n      i;\n\n  for (i = 0; i < maxDigits; i++) {\n    var mv = m * v;\n    if (Math.abs(Math.round(mv) - mv) <= delta) return i;\n    m *= 10;\n  }\n\n  return -1;\n}\nexport function integerDigitCount(v, delta) {\n  var f = Math.abs(v);\n  if (f < delta) return 0;\n  return Math.floor(Math.log10(Math.abs(v))) + 1;\n}\n/**\r\n * Determine the maximum number of digits in a floating point array.\r\n * Find a number M such that round(M * v) - M * v <= delta.\r\n * If no such M exists, return -1.\r\n */\n\nexport function getArrayDigitCount(xs, maxDigits, delta) {\n  var mantissaDigits = 1;\n  var integerDigits = 0;\n\n  for (var i = 0, _i = xs.length; i < _i; i++) {\n    if (mantissaDigits >= 0) {\n      var t = getMantissaMultiplier(xs[i], maxDigits, delta);\n      if (t < 0) mantissaDigits = -1;else if (t > mantissaDigits) mantissaDigits = t;\n    }\n\n    var abs = Math.abs(xs[i]);\n\n    if (abs > delta) {\n      var d = Math.floor(Math.log10(Math.abs(abs))) + 1;\n      if (d > integerDigits) integerDigits = d;\n    }\n  }\n\n  return {\n    mantissaDigits: mantissaDigits,\n    integerDigits: integerDigits\n  };\n}\nexport function isInteger(s) {\n  s = s.trim();\n  var n = parseInt(s, 10);\n  return isNaN(n) ? false : n.toString() === s;\n}\nexport function getPrecision(v) {\n  if (!isFinite(v)) return 0;\n  var e = 1;\n  var p = 0;\n\n  while (Math.round(v * e) / e !== v) {\n    e *= 10;\n    ++p;\n  }\n\n  return p;\n}\nexport function toPrecision(v, precision) {\n  return parseFloat(v.toPrecision(precision));\n}","map":{"version":3,"sources":["../../src/mol-util/number.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;;;AAIG;AACH,OAAM,SAAU,qBAAV,CAAgC,CAAhC,EAA2C,SAA3C,EAA8D,KAA9D,EAA2E;AAC7E,MAAI,CAAC,GAAG,CAAR;AAAA,MAAW,CAAX;;AACA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,SAAhB,EAA2B,CAAC,EAA5B,EAAgC;AAC5B,QAAM,EAAE,GAAG,CAAC,GAAG,CAAf;AACA,QAAI,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,KAAL,CAAW,EAAX,IAAiB,EAA1B,KAAiC,KAArC,EAA4C,OAAO,CAAP;AAC5C,IAAA,CAAC,IAAI,EAAL;AACH;;AACD,SAAO,CAAC,CAAR;AACH;AAED,OAAM,SAAU,iBAAV,CAA4B,CAA5B,EAAuC,KAAvC,EAAoD;AACtD,MAAM,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAV;AACA,MAAI,CAAC,GAAG,KAAR,EAAe,OAAO,CAAP;AACf,SAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,CAAT,CAAX,CAAX,IAAsC,CAA7C;AACH;AAED;;;;AAIG;;AACH,OAAM,SAAU,kBAAV,CAA6B,EAA7B,EAAoD,SAApD,EAAuE,KAAvE,EAAoF;AACtF,MAAI,cAAc,GAAG,CAArB;AACA,MAAI,aAAa,GAAG,CAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,EAAE,CAAC,MAAxB,EAAgC,CAAC,GAAG,EAApC,EAAwC,CAAC,EAAzC,EAA6C;AACzC,QAAI,cAAc,IAAI,CAAtB,EAAyB;AACrB,UAAM,CAAC,GAAG,qBAAqB,CAAC,EAAE,CAAC,CAAD,CAAH,EAAQ,SAAR,EAAmB,KAAnB,CAA/B;AACA,UAAI,CAAC,GAAG,CAAR,EAAW,cAAc,GAAG,CAAC,CAAlB,CAAX,KACK,IAAI,CAAC,GAAG,cAAR,EAAwB,cAAc,GAAG,CAAjB;AAChC;;AACD,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,CAAD,CAAX,CAAZ;;AACA,QAAI,GAAG,GAAG,KAAV,EAAiB;AACb,UAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,GAAT,CAAX,CAAX,IAAwC,CAAlD;AACA,UAAI,CAAC,GAAG,aAAR,EAAuB,aAAa,GAAG,CAAhB;AAC1B;AACJ;;AACD,SAAO;AAAE,IAAA,cAAc,EAAA,cAAhB;AAAkB,IAAA,aAAa,EAAA;AAA/B,GAAP;AACH;AAED,OAAM,SAAU,SAAV,CAAoB,CAApB,EAA6B;AAC/B,EAAA,CAAC,GAAG,CAAC,CAAC,IAAF,EAAJ;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAD,EAAI,EAAJ,CAAlB;AACA,SAAO,KAAK,CAAC,CAAD,CAAL,GAAW,KAAX,GAAmB,CAAC,CAAC,QAAF,OAAiB,CAA3C;AACH;AAED,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAgC;AAClC,MAAI,CAAC,QAAQ,CAAC,CAAD,CAAb,EAAkB,OAAO,CAAP;AAClB,MAAI,CAAC,GAAG,CAAR;AACA,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAf,IAAoB,CAApB,KAA0B,CAAjC,EAAoC;AAChC,IAAA,CAAC,IAAI,EAAL;AACA,MAAE,CAAF;AACH;;AACD,SAAO,CAAP;AACH;AAED,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAiC,SAAjC,EAAkD;AACpD,SAAO,UAAU,CAAC,CAAC,CAAC,WAAF,CAAc,SAAd,CAAD,CAAjB;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\n/**\r\n * Determine the number of digits in a floating point number\r\n * Find a number M such that round(M * v) - M * v <= delta.\r\n * If no such M exists, return -1.\r\n */\r\nexport function getMantissaMultiplier(v, maxDigits, delta) {\r\n    var m = 1, i;\r\n    for (i = 0; i < maxDigits; i++) {\r\n        var mv = m * v;\r\n        if (Math.abs(Math.round(mv) - mv) <= delta)\r\n            return i;\r\n        m *= 10;\r\n    }\r\n    return -1;\r\n}\r\nexport function integerDigitCount(v, delta) {\r\n    var f = Math.abs(v);\r\n    if (f < delta)\r\n        return 0;\r\n    return Math.floor(Math.log10(Math.abs(v))) + 1;\r\n}\r\n/**\r\n * Determine the maximum number of digits in a floating point array.\r\n * Find a number M such that round(M * v) - M * v <= delta.\r\n * If no such M exists, return -1.\r\n */\r\nexport function getArrayDigitCount(xs, maxDigits, delta) {\r\n    var mantissaDigits = 1;\r\n    var integerDigits = 0;\r\n    for (var i = 0, _i = xs.length; i < _i; i++) {\r\n        if (mantissaDigits >= 0) {\r\n            var t = getMantissaMultiplier(xs[i], maxDigits, delta);\r\n            if (t < 0)\r\n                mantissaDigits = -1;\r\n            else if (t > mantissaDigits)\r\n                mantissaDigits = t;\r\n        }\r\n        var abs = Math.abs(xs[i]);\r\n        if (abs > delta) {\r\n            var d = Math.floor(Math.log10(Math.abs(abs))) + 1;\r\n            if (d > integerDigits)\r\n                integerDigits = d;\r\n        }\r\n    }\r\n    return { mantissaDigits: mantissaDigits, integerDigits: integerDigits };\r\n}\r\nexport function isInteger(s) {\r\n    s = s.trim();\r\n    var n = parseInt(s, 10);\r\n    return isNaN(n) ? false : n.toString() === s;\r\n}\r\nexport function getPrecision(v) {\r\n    if (!isFinite(v))\r\n        return 0;\r\n    var e = 1;\r\n    var p = 0;\r\n    while (Math.round(v * e) / e !== v) {\r\n        e *= 10;\r\n        ++p;\r\n    }\r\n    return p;\r\n}\r\nexport function toPrecision(v, precision) {\r\n    return parseFloat(v.toPrecision(precision));\r\n}\r\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}