{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../mol-data/db';\nimport { Task } from '../../mol-task';\nimport { createModels } from './basic/parser';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\nimport { IndexPairBonds } from './property/bonds/index-pair';\nimport { AtomPartialCharge } from './property/partial-charge';\nimport { ArrayTrajectory } from '../../mol-model/structure';\nimport { guessElementSymbolString } from './util';\n\nfunction getModels(mol2, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var models, i, il, _a, atoms, bonds, molecule, A, type_symbol, i_1, atom_site, entityBuilder, componentBuilder, i_2, il_1, basics, _models, indexA, indexB, order, flag, pairBonds, first;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          models = [];\n          i = 0, il = mol2.structures.length;\n          _b.label = 1;\n\n        case 1:\n          if (!(i < il)) return [3\n          /*break*/\n          , 4];\n          _a = mol2.structures[i], atoms = _a.atoms, bonds = _a.bonds, molecule = _a.molecule;\n          A = Column.ofConst('A', atoms.count, Column.Schema.str);\n          type_symbol = new Array(atoms.count);\n\n          for (i_1 = 0; i_1 < atoms.count; ++i_1) {\n            type_symbol[i_1] = guessElementSymbolString(atoms.atom_name.value(i_1));\n          }\n\n          atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n            auth_asym_id: A,\n            auth_atom_id: Column.asArrayColumn(atoms.atom_name),\n            auth_comp_id: atoms.subst_name,\n            auth_seq_id: atoms.subst_id,\n            Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\n            Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\n            Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\n            id: Column.asArrayColumn(atoms.atom_id),\n            label_asym_id: A,\n            label_atom_id: Column.asArrayColumn(atoms.atom_name),\n            label_comp_id: atoms.subst_name,\n            label_seq_id: atoms.subst_id,\n            label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\n            occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\n            type_symbol: Column.ofStringArray(type_symbol),\n            pdbx_PDB_model_num: Column.ofConst(i, atoms.count, Column.Schema.int)\n          }, atoms.count);\n          entityBuilder = new EntityBuilder();\n          entityBuilder.setNames([['MOL', molecule.mol_name || 'Unknown Entity']]);\n          entityBuilder.getEntityId('MOL', 0\n          /* Unknown */\n          , 'A');\n          componentBuilder = new ComponentBuilder(atoms.subst_id, atoms.atom_name);\n\n          for (i_2 = 0, il_1 = atoms.subst_name.rowCount; i_2 < il_1; ++i_2) {\n            componentBuilder.add(atoms.subst_name.value(i_2), i_2);\n          }\n\n          basics = createBasic({\n            entity: entityBuilder.getEntityTable(),\n            chem_comp: componentBuilder.getChemCompTable(),\n            atom_site: atom_site\n          });\n          return [4\n          /*yield*/\n          , createModels(basics, Mol2Format.create(mol2), ctx)];\n\n        case 2:\n          _models = _b.sent();\n\n          if (_models.frameCount > 0) {\n            indexA = Column.ofIntArray(Column.mapToArray(bonds.origin_atom_id, function (x) {\n              return x - 1;\n            }, Int32Array));\n            indexB = Column.ofIntArray(Column.mapToArray(bonds.target_atom_id, function (x) {\n              return x - 1;\n            }, Int32Array));\n            order = Column.ofIntArray(Column.mapToArray(bonds.bond_type, function (x) {\n              switch (x) {\n                case 'ar': // aromatic\n\n                case 'am': // amide\n\n                case 'un':\n                  // unknown\n                  return 1;\n\n                case 'du': // dummy\n\n                case 'nc':\n                  // not connected\n                  return 0;\n\n                default:\n                  return parseInt(x);\n              }\n            }, Int8Array));\n            flag = Column.ofIntArray(Column.mapToArray(bonds.bond_type, function (x) {\n              switch (x) {\n                case 'ar':\n                  // aromatic\n                  return 16\n                  /* Aromatic */\n                  | 1\n                  /* Covalent */\n                  ;\n\n                case 'du': // dummy\n\n                case 'nc':\n                  // not connected\n                  return 0\n                  /* None */\n                  ;\n\n                case 'am': // amide\n\n                case 'un': // unknown\n\n                default:\n                  return 1\n                  /* Covalent */\n                  ;\n              }\n            }, Int8Array));\n            pairBonds = IndexPairBonds.fromData({\n              pairs: {\n                indexA: indexA,\n                indexB: indexB,\n                order: order,\n                flag: flag\n              },\n              count: atoms.count\n            });\n            first = _models.representative;\n            IndexPairBonds.Provider.set(first, pairBonds);\n            AtomPartialCharge.Provider.set(first, {\n              data: atoms.charge,\n              type: molecule.charge_type\n            });\n            models.push(first);\n          }\n\n          _b.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , new ArrayTrajectory(models)];\n      }\n    });\n  });\n} //\n\n\nexport { Mol2Format };\nvar Mol2Format;\n\n(function (Mol2Format) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'mol2';\n  }\n\n  Mol2Format.is = is;\n\n  function create(mol2) {\n    return {\n      kind: 'mol2',\n      name: mol2.name,\n      data: mol2\n    };\n  }\n\n  Mol2Format.create = create;\n})(Mol2Format || (Mol2Format = {}));\n\nexport function trajectoryFromMol2(mol2) {\n  return Task.create('Parse MOL2', function (ctx) {\n    return getModels(mol2, ctx);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/mol2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { Task } from '../../mol-task';\r\nimport { createModels } from './basic/parser';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nimport { IndexPairBonds } from './property/bonds/index-pair';\r\nimport { AtomPartialCharge } from './property/partial-charge';\r\nimport { ArrayTrajectory } from '../../mol-model/structure';\r\nimport { guessElementSymbolString } from './util';\r\nfunction getModels(mol2, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var models, i, il, _a, atoms, bonds, molecule, A, type_symbol, i_1, atom_site, entityBuilder, componentBuilder, i_2, il_1, basics, _models, indexA, indexB, order, flag, pairBonds, first;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    models = [];\r\n                    i = 0, il = mol2.structures.length;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    if (!(i < il)) return [3 /*break*/, 4];\r\n                    _a = mol2.structures[i], atoms = _a.atoms, bonds = _a.bonds, molecule = _a.molecule;\r\n                    A = Column.ofConst('A', atoms.count, Column.Schema.str);\r\n                    type_symbol = new Array(atoms.count);\r\n                    for (i_1 = 0; i_1 < atoms.count; ++i_1) {\r\n                        type_symbol[i_1] = guessElementSymbolString(atoms.atom_name.value(i_1));\r\n                    }\r\n                    atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n                        auth_asym_id: A,\r\n                        auth_atom_id: Column.asArrayColumn(atoms.atom_name),\r\n                        auth_comp_id: atoms.subst_name,\r\n                        auth_seq_id: atoms.subst_id,\r\n                        Cartn_x: Column.asArrayColumn(atoms.x, Float32Array),\r\n                        Cartn_y: Column.asArrayColumn(atoms.y, Float32Array),\r\n                        Cartn_z: Column.asArrayColumn(atoms.z, Float32Array),\r\n                        id: Column.asArrayColumn(atoms.atom_id),\r\n                        label_asym_id: A,\r\n                        label_atom_id: Column.asArrayColumn(atoms.atom_name),\r\n                        label_comp_id: atoms.subst_name,\r\n                        label_seq_id: atoms.subst_id,\r\n                        label_entity_id: Column.ofConst('1', atoms.count, Column.Schema.str),\r\n                        occupancy: Column.ofConst(1, atoms.count, Column.Schema.float),\r\n                        type_symbol: Column.ofStringArray(type_symbol),\r\n                        pdbx_PDB_model_num: Column.ofConst(i, atoms.count, Column.Schema.int),\r\n                    }, atoms.count);\r\n                    entityBuilder = new EntityBuilder();\r\n                    entityBuilder.setNames([['MOL', molecule.mol_name || 'Unknown Entity']]);\r\n                    entityBuilder.getEntityId('MOL', 0 /* Unknown */, 'A');\r\n                    componentBuilder = new ComponentBuilder(atoms.subst_id, atoms.atom_name);\r\n                    for (i_2 = 0, il_1 = atoms.subst_name.rowCount; i_2 < il_1; ++i_2) {\r\n                        componentBuilder.add(atoms.subst_name.value(i_2), i_2);\r\n                    }\r\n                    basics = createBasic({\r\n                        entity: entityBuilder.getEntityTable(),\r\n                        chem_comp: componentBuilder.getChemCompTable(),\r\n                        atom_site: atom_site\r\n                    });\r\n                    return [4 /*yield*/, createModels(basics, Mol2Format.create(mol2), ctx)];\r\n                case 2:\r\n                    _models = _b.sent();\r\n                    if (_models.frameCount > 0) {\r\n                        indexA = Column.ofIntArray(Column.mapToArray(bonds.origin_atom_id, function (x) { return x - 1; }, Int32Array));\r\n                        indexB = Column.ofIntArray(Column.mapToArray(bonds.target_atom_id, function (x) { return x - 1; }, Int32Array));\r\n                        order = Column.ofIntArray(Column.mapToArray(bonds.bond_type, function (x) {\r\n                            switch (x) {\r\n                                case 'ar': // aromatic\r\n                                case 'am': // amide\r\n                                case 'un': // unknown\r\n                                    return 1;\r\n                                case 'du': // dummy\r\n                                case 'nc': // not connected\r\n                                    return 0;\r\n                                default:\r\n                                    return parseInt(x);\r\n                            }\r\n                        }, Int8Array));\r\n                        flag = Column.ofIntArray(Column.mapToArray(bonds.bond_type, function (x) {\r\n                            switch (x) {\r\n                                case 'ar': // aromatic\r\n                                    return 16 /* Aromatic */ | 1 /* Covalent */;\r\n                                case 'du': // dummy\r\n                                case 'nc': // not connected\r\n                                    return 0 /* None */;\r\n                                case 'am': // amide\r\n                                case 'un': // unknown\r\n                                default:\r\n                                    return 1 /* Covalent */;\r\n                            }\r\n                        }, Int8Array));\r\n                        pairBonds = IndexPairBonds.fromData({ pairs: { indexA: indexA, indexB: indexB, order: order, flag: flag }, count: atoms.count });\r\n                        first = _models.representative;\r\n                        IndexPairBonds.Provider.set(first, pairBonds);\r\n                        AtomPartialCharge.Provider.set(first, {\r\n                            data: atoms.charge,\r\n                            type: molecule.charge_type\r\n                        });\r\n                        models.push(first);\r\n                    }\r\n                    _b.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/, new ArrayTrajectory(models)];\r\n            }\r\n        });\r\n    });\r\n}\r\n//\r\nexport { Mol2Format };\r\nvar Mol2Format;\r\n(function (Mol2Format) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'mol2';\r\n    }\r\n    Mol2Format.is = is;\r\n    function create(mol2) {\r\n        return { kind: 'mol2', name: mol2.name, data: mol2 };\r\n    }\r\n    Mol2Format.create = create;\r\n})(Mol2Format || (Mol2Format = {}));\r\nexport function trajectoryFromMol2(mol2) {\r\n    return Task.create('Parse MOL2', function (ctx) { return getModels(mol2, ctx); });\r\n}\r\n//# sourceMappingURL=mol2.js.map"]},"metadata":{},"sourceType":"module"}