{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { CIF } from '../../mol-io/reader/cif';\nimport { Vec3 } from '../../mol-math/linear-algebra';\nimport { volumeFromCcp4 } from '../../mol-model-formats/volume/ccp4';\nimport { volumeFromDensityServerData } from '../../mol-model-formats/volume/density-server';\nimport { volumeFromDsn6 } from '../../mol-model-formats/volume/dsn6';\nimport { Task } from '../../mol-task';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\nimport { volumeFromCube } from '../../mol-model-formats/volume/cube';\nimport { volumeFromDx } from '../../mol-model-formats/volume/dx';\nimport { StateSelection } from '../../mol-state';\nexport { VolumeFromCcp4 };\nexport { VolumeFromDsn6 };\nexport { VolumeFromCube };\nexport { VolumeFromDx };\nexport { AssignColorVolume };\nexport { VolumeFromDensityServerCif };\nvar VolumeFromCcp4 = PluginStateTransform.BuiltIn({\n  name: 'volume-from-ccp4',\n  display: {\n    name: 'Volume from CCP4/MRC/MAP',\n    description: 'Create Volume from CCP4/MRC/MAP data'\n  },\n  from: SO.Format.Ccp4,\n  to: SO.Volume.Data,\n  params: function (a) {\n    return {\n      voxelSize: PD.Vec3(Vec3.create(1, 1, 1)),\n      offset: PD.Vec3(Vec3.create(0, 0, 0)),\n      entryId: PD.Text('')\n    };\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Create volume from CCP4/MRC/MAP', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var volume, props;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , volumeFromCcp4(a.data, __assign(__assign({}, params), {\n                label: a.data.name || a.label\n              })).runInContext(ctx)];\n\n            case 1:\n              volume = _a.sent();\n              props = {\n                label: volume.label || 'Volume',\n                description: \"Volume \" + a.data.header.NX + \"\\u00D7\" + a.data.header.NX + \"\\u00D7\" + a.data.header.NX\n              };\n              return [2\n              /*return*/\n              , new SO.Volume.Data(volume, props)];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var b = _a.b;\n    b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\n  }\n});\nvar VolumeFromDsn6 = PluginStateTransform.BuiltIn({\n  name: 'volume-from-dsn6',\n  display: {\n    name: 'Volume from DSN6/BRIX',\n    description: 'Create Volume from DSN6/BRIX data'\n  },\n  from: SO.Format.Dsn6,\n  to: SO.Volume.Data,\n  params: function (a) {\n    return {\n      voxelSize: PD.Vec3(Vec3.create(1, 1, 1)),\n      entryId: PD.Text('')\n    };\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Create volume from DSN6/BRIX', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var volume, props;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , volumeFromDsn6(a.data, __assign(__assign({}, params), {\n                label: a.data.name || a.label\n              })).runInContext(ctx)];\n\n            case 1:\n              volume = _a.sent();\n              props = {\n                label: volume.label || 'Volume',\n                description: \"Volume \" + a.data.header.xExtent + \"\\u00D7\" + a.data.header.yExtent + \"\\u00D7\" + a.data.header.zExtent\n              };\n              return [2\n              /*return*/\n              , new SO.Volume.Data(volume, props)];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var b = _a.b;\n    b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\n  }\n});\nvar VolumeFromCube = PluginStateTransform.BuiltIn({\n  name: 'volume-from-cube',\n  display: {\n    name: 'Volume from Cube',\n    description: 'Create Volume from Cube data'\n  },\n  from: SO.Format.Cube,\n  to: SO.Volume.Data,\n  params: function (a) {\n    var dataIndex = a ? PD.Select(0, a.data.header.dataSetIds.map(function (id, i) {\n      return [i, \"\" + id];\n    })) : PD.Numeric(0);\n    return {\n      dataIndex: dataIndex,\n      entryId: PD.Text('')\n    };\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Create volume from Cube', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var volume, props;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , volumeFromCube(a.data, __assign(__assign({}, params), {\n                label: a.data.name || a.label\n              })).runInContext(ctx)];\n\n            case 1:\n              volume = _a.sent();\n              props = {\n                label: volume.label || 'Volume',\n                description: \"Volume \" + a.data.header.dim[0] + \"\\u00D7\" + a.data.header.dim[1] + \"\\u00D7\" + a.data.header.dim[2]\n              };\n              return [2\n              /*return*/\n              , new SO.Volume.Data(volume, props)];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var b = _a.b;\n    b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\n  }\n});\nvar VolumeFromDx = PluginStateTransform.BuiltIn({\n  name: 'volume-from-dx',\n  display: {\n    name: 'Parse DX',\n    description: 'Create volume from DX data.'\n  },\n  from: SO.Format.Dx,\n  to: SO.Volume.Data\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a;\n    return Task.create('Parse DX', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var volume, props;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , volumeFromDx(a.data, {\n                label: a.data.name || a.label\n              }).runInContext(ctx)];\n\n            case 1:\n              volume = _a.sent();\n              props = {\n                label: volume.label || 'Volume',\n                description: \"Volume \" + a.data.header.dim[0] + \"\\u00D7\" + a.data.header.dim[1] + \"\\u00D7\" + a.data.header.dim[2]\n              };\n              return [2\n              /*return*/\n              , new SO.Volume.Data(volume, props)];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var b = _a.b;\n    b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\n  }\n});\nvar VolumeFromDensityServerCif = PluginStateTransform.BuiltIn({\n  name: 'volume-from-density-server-cif',\n  display: {\n    name: 'Volume from density-server CIF',\n    description: 'Identify and create all separate models in the specified CIF data block'\n  },\n  from: SO.Format.Cif,\n  to: SO.Volume.Data,\n  params: function (a) {\n    if (!a) {\n      return {\n        blockHeader: PD.Optional(PD.Text(void 0, {\n          description: 'Header of the block to parse. If none is specifed, the 1st data block in the file is used.'\n        })),\n        entryId: PD.Text('')\n      };\n    }\n\n    var blocks = a.data.blocks.slice(1); // zero block contains query meta-data\n\n    return {\n      blockHeader: PD.Optional(PD.Select(blocks[0] && blocks[0].header, blocks.map(function (b) {\n        return [b.header, b.header];\n      }), {\n        description: 'Header of the block to parse'\n      })),\n      entryId: PD.Text('')\n    };\n  }\n})({\n  isApplicable: function (a) {\n    return a.data.blocks.length > 0;\n  },\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Parse density-server CIF', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var header, block, densityServerCif, volume, _a, x, y, z, props;\n\n        var _b;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              header = params.blockHeader || a.data.blocks[1].header;\n              block = a.data.blocks.find(function (b) {\n                return b.header === header;\n              });\n              if (!block) throw new Error(\"Data block '\" + [header] + \"' not found.\");\n              densityServerCif = CIF.schema.densityServer(block);\n              return [4\n              /*yield*/\n              , volumeFromDensityServerData(densityServerCif, {\n                entryId: params.entryId\n              }).runInContext(ctx)];\n\n            case 1:\n              volume = _c.sent();\n              _a = volume.grid.cells.space.dimensions, x = _a[0], y = _a[1], z = _a[2];\n              props = {\n                label: (_b = params.entryId) !== null && _b !== void 0 ? _b : densityServerCif.volume_data_3d_info.name.value(0),\n                description: \"Volume \" + x + \"\\u00D7\" + y + \"\\u00D7\" + z\n              };\n              return [2\n              /*return*/\n              , new SO.Volume.Data(volume, props)];\n          }\n        });\n      });\n    });\n  },\n  dispose: function (_a) {\n    var b = _a.b;\n    b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\n  }\n});\nvar AssignColorVolume = PluginStateTransform.BuiltIn({\n  name: 'assign-color-volume',\n  display: {\n    name: 'Assign Color Volume',\n    description: 'Assigns another volume to be available for coloring.'\n  },\n  from: SO.Volume.Data,\n  to: SO.Volume.Data,\n  isDecorator: true,\n  params: function (a, plugin) {\n    if (!a) return {\n      ref: PD.Text()\n    };\n    var cells = plugin.state.data.select(StateSelection.Generators.root.subtree().ofType(SO.Volume.Data).filter(function (cell) {\n      var _a;\n\n      return !!cell.obj && !((_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data.colorVolume) && cell.obj !== a;\n    }));\n    if (cells.length === 0) return {\n      ref: PD.Text('', {\n        isHidden: true\n      })\n    };\n    return {\n      ref: PD.Select(cells[0].transform.ref, cells.map(function (c) {\n        return [c.transform.ref, c.obj.label];\n      }))\n    };\n  }\n})({\n  apply: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        params = _a.params,\n        dependencies = _a.dependencies;\n    return Task.create('Assign Color Volume', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var colorVolume, volume, props;\n        return __generator(this, function (_a) {\n          if (!dependencies || !dependencies[params.ref]) {\n            throw new Error('Dependency not available.');\n          }\n\n          colorVolume = dependencies[params.ref].data;\n          volume = __assign(__assign({}, a.data), {\n            colorVolume: colorVolume\n          });\n          props = {\n            label: a.label,\n            description: 'Volume + Colors'\n          };\n          return [2\n          /*return*/\n          , new SO.Volume.Data(volume, props)];\n        });\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../src/mol-plugin-state/transforms/volume.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,GAAT,QAAoB,yBAApB;AACA,SAAS,IAAT,QAAqB,+BAArB;AACA,SAAS,cAAT,QAA+B,qCAA/B;AACA,SAAS,2BAAT,QAA4C,+CAA5C;AACA,SAAS,cAAT,QAA+B,qCAA/B;AACA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AACA,SAAS,iBAAiB,IAAI,EAA9B,EAAkC,oBAAlC,QAA8D,YAA9D;AACA,SAAS,cAAT,QAA+B,qCAA/B;AACA,SAAS,YAAT,QAA6B,mCAA7B;AAGA,SAAS,cAAT,QAA+B,iBAA/B;AAEA,SAAS,cAAT;AACA,SAAS,cAAT;AACA,SAAS,cAAT;AACA,SAAS,YAAT;AACA,SAAS,iBAAT;AACA,SAAS,0BAAT;AAGA,IAAM,cAAc,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAChD,EAAA,IAAI,EAAE,kBAD0C;AAEhD,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,0BAAR;AAAoC,IAAA,WAAW,EAAE;AAAjD,GAFuC;AAGhD,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,IAHgC;AAIhD,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJkC;AAKhD,EAAA,MAAM,EAAA,UAAC,CAAD,EAAE;AACJ,WAAO;AACH,MAAA,SAAS,EAAE,EAAE,CAAC,IAAH,CAAQ,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAR,CADR;AAEH,MAAA,MAAM,EAAE,EAAE,CAAC,IAAH,CAAQ,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAR,CAFL;AAGH,MAAA,OAAO,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR;AAHN,KAAP;AAKH;AAX+C,CAA7B,EAYpB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAc;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,iCAAZ,EAA+C,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC5C,qBAAA,CAAA;AAAA;AAAA,gBAAM,cAAc,CAAC,CAAC,CAAC,IAAH,EAAO,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,MAAP,CAAA,EAAa;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,IAAF,CAAO,IAAP,IAAe,CAAC,CAAC;AAA1B,eAAb,CAAP,CAAd,CAAqE,YAArE,CAAkF,GAAlF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,cAAA,KAAK,GAAG;AAAE,gBAAA,KAAK,EAAE,MAAM,CAAC,KAAP,IAAgB,QAAzB;AAAmC,gBAAA,WAAW,EAAE,YAAU,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,EAAxB,GAA0B,QAA1B,GAAmC,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,EAAjD,GAAmD,QAAnD,GAA4D,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc;AAA1H,eAAR;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;;OAH2D,CAAA;AAI9D,KAJM,CAAP;AAKH,GAPF;AAQC,EAAA,OAAO,EAAA,UAAC,EAAD,EAAM;QAAH,CAAC,GAAA,EAAA,CAAA,C;AACP,IAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,CAAQ,gBAAR,CAAyB,OAAzB,EAAA;AACH;AAVF,CAZoB,CAAvB;AA0BA,IAAM,cAAc,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAChD,EAAA,IAAI,EAAE,kBAD0C;AAEhD,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,uBAAR;AAAiC,IAAA,WAAW,EAAE;AAA9C,GAFuC;AAGhD,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,IAHgC;AAIhD,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJkC;AAKhD,EAAA,MAAM,EAAA,UAAC,CAAD,EAAE;AACJ,WAAO;AACH,MAAA,SAAS,EAAE,EAAE,CAAC,IAAH,CAAQ,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAR,CADR;AAEH,MAAA,OAAO,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR;AAFN,KAAP;AAIH;AAV+C,CAA7B,EAWpB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAc;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,8BAAZ,EAA4C,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACzC,qBAAA,CAAA;AAAA;AAAA,gBAAM,cAAc,CAAC,CAAC,CAAC,IAAH,EAAO,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,MAAP,CAAA,EAAa;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,IAAF,CAAO,IAAP,IAAe,CAAC,CAAC;AAA1B,eAAb,CAAP,CAAd,CAAqE,YAArE,CAAkF,GAAlF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,cAAA,KAAK,GAAG;AAAE,gBAAA,KAAK,EAAE,MAAM,CAAC,KAAP,IAAgB,QAAzB;AAAmC,gBAAA,WAAW,EAAE,YAAU,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,OAAxB,GAA+B,QAA/B,GAAwC,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,OAAtD,GAA6D,QAA7D,GAAsE,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc;AAApI,eAAR;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;;OAHwD,CAAA;AAI3D,KAJM,CAAP;AAKH,GAPF;AAQC,EAAA,OAAO,EAAA,UAAC,EAAD,EAAM;QAAH,CAAC,GAAA,EAAA,CAAA,C;AACP,IAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,CAAQ,gBAAR,CAAyB,OAAzB,EAAA;AACH;AAVF,CAXoB,CAAvB;AAyBA,IAAM,cAAc,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAChD,EAAA,IAAI,EAAE,kBAD0C;AAEhD,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,kBAAR;AAA4B,IAAA,WAAW,EAAE;AAAzC,GAFuC;AAGhD,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,IAHgC;AAIhD,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJkC;AAKhD,EAAA,MAAM,EAAN,UAAO,CAAP,EAAQ;AACJ,QAAM,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,UAAd,CAAyB,GAAzB,CAA6B,UAAC,EAAD,EAAK,CAAL,EAAM;AAAK,aAAA,CAAC,CAAD,EAAI,KAAJ,EAAA,CAAA;AAAqB,KAA7D,CAAb,CAAH,GAAkF,EAAE,CAAC,OAAH,CAAW,CAAX,CAArG;AACA,WAAO;AACH,MAAA,SAAS,EAAA,SADN;AAEH,MAAA,OAAO,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR;AAFN,KAAP;AAIH;AAX+C,CAA7B,EAYpB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAc;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,yBAAZ,EAAuC,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACpC,qBAAA,CAAA;AAAA;AAAA,gBAAM,cAAc,CAAC,CAAC,CAAC,IAAH,EAAO,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,MAAP,CAAA,EAAa;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,IAAF,CAAO,IAAP,IAAe,CAAC,CAAC;AAA1B,eAAb,CAAP,CAAd,CAAqE,YAArE,CAAkF,GAAlF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,cAAA,KAAK,GAAG;AAAE,gBAAA,KAAK,EAAE,MAAM,CAAC,KAAP,IAAgB,QAAzB;AAAmC,gBAAA,WAAW,EAAE,YAAU,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB,CAAV,GAA8B,QAA9B,GAAuC,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB,CAAvC,GAA2D,QAA3D,GAAoE,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB;AAApH,eAAR;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;;OAHmD,CAAA;AAItD,KAJM,CAAP;AAKH,GAPF;AAQC,EAAA,OAAO,EAAA,UAAC,EAAD,EAAM;QAAH,CAAC,GAAA,EAAA,CAAA,C;AACP,IAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,CAAQ,gBAAR,CAAyB,OAAzB,EAAA;AACH;AAVF,CAZoB,CAAvB;AA0BA,IAAM,YAAY,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC9C,EAAA,IAAI,EAAE,gBADwC;AAE9C,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,UAAR;AAAoB,IAAA,WAAW,EAAE;AAAjC,GAFqC;AAG9C,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,EAH8B;AAI9C,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU;AAJgC,CAA7B,EAKlB;AACC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAM;AAAX,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;AACL,WAAO,IAAI,CAAC,MAAL,CAAY,UAAZ,EAAwB,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrB,qBAAA,CAAA;AAAA;AAAA,gBAAM,YAAY,CAAC,CAAC,CAAC,IAAH,EAAS;AAAE,gBAAA,KAAK,EAAE,CAAC,CAAC,IAAF,CAAO,IAAP,IAAe,CAAC,CAAC;AAA1B,eAAT,CAAZ,CAAwD,YAAxD,CAAqE,GAArE,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,cAAA,KAAK,GAAG;AAAE,gBAAA,KAAK,EAAE,MAAM,CAAC,KAAP,IAAgB,QAAzB;AAAmC,gBAAA,WAAW,EAAE,YAAU,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB,CAAV,GAA8B,QAA9B,GAAuC,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB,CAAvC,GAA2D,QAA3D,GAAoE,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,GAAd,CAAkB,CAAlB;AAApH,eAAR;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;;OAHoC,CAAA;AAIvC,KAJM,CAAP;AAKH,GAPF;AAQC,EAAA,OAAO,EAAA,UAAC,EAAD,EAAM;QAAH,CAAC,GAAA,EAAA,CAAA,C;AACP,IAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,CAAQ,gBAAR,CAAyB,OAAzB,EAAA;AACH;AAVF,CALkB,CAArB;AAmBA,IAAM,0BAA0B,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AAC5D,EAAA,IAAI,EAAE,gCADsD;AAE5D,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,gCAAR;AAA0C,IAAA,WAAW,EAAE;AAAvD,GAFmD;AAG5D,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,GAH4C;AAI5D,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJ8C;AAK5D,EAAA,MAAM,EAAN,UAAO,CAAP,EAAQ;AACJ,QAAI,CAAC,CAAL,EAAQ;AACJ,aAAO;AACH,QAAA,WAAW,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,IAAH,CAAQ,KAAK,CAAb,EAAgB;AAAE,UAAA,WAAW,EAAE;AAAf,SAAhB,CAAZ,CADV;AAEH,QAAA,OAAO,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR;AAFN,OAAP;AAIH;;AACD,QAAM,MAAM,GAAG,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,KAAd,CAAoB,CAApB,CAAf,CAPI,CAOmC;;AACvC,WAAO;AACH,MAAA,WAAW,EAAE,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,MAAH,CAAU,MAAM,CAAC,CAAD,CAAN,IAAa,MAAM,CAAC,CAAD,CAAN,CAAU,MAAjC,EAAyC,MAAM,CAAC,GAAP,CAAW,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,CAAC,MAAH,EAAW,CAAC,CAAZ,MAAA,CAAA;AAAwC,OAAxD,CAAzC,EAAoG;AAAE,QAAA,WAAW,EAAE;AAAf,OAApG,CAAZ,CADV;AAEH,MAAA,OAAO,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR;AAFN,KAAP;AAIH;AAjB2D,CAA7B,EAkBhC;AACC,EAAA,YAAY,EAAE,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,MAAd,GAAA,CAAA;AAAwB,GAD5C;AAEC,EAAA,KAAK,EAAA,UAAC,EAAD,EAAc;AAAnB,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;AACb,WAAO,IAAI,CAAC,MAAL,CAAY,0BAAZ,EAAwC,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAC9C,cAAA,MAAM,GAAG,MAAM,CAAC,WAAP,IAAsB,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,CAAd,EAAiB,MAAhD;AACA,cAAA,KAAK,GAAG,CAAC,CAAC,IAAF,CAAO,MAAP,CAAc,IAAd,CAAmB,UAAA,CAAA,EAAC;AAAI,uBAAA,CAAC,CAAC,MAAF,KAAA,MAAA;AAAmB,eAA3C,CAAR;AACN,kBAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,CAAU,iBAAe,CAAC,MAAD,CAAf,GAAuB,cAAjC,CAAN;AACN,cAAA,gBAAgB,GAAG,GAAG,CAAC,MAAJ,CAAW,aAAX,CAAyB,KAAzB,CAAnB;AACS,qBAAA,CAAA;AAAA;AAAA,gBAAM,2BAA2B,CAAC,gBAAD,EAAmB;AAAE,gBAAA,OAAO,EAAE,MAAM,CAAC;AAAlB,eAAnB,CAA3B,CAA2E,YAA3E,CAAwF,GAAxF,CAAN,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACA,cAAA,EAAA,GAAY,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,KAAlB,CAAwB,UAApC,EAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF,EAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL,EAAO,CAAC,GAAA,EAAA,CAAA,CAAA,CAAR;AACA,cAAA,KAAK,GAAG;AAAE,gBAAA,KAAK,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,OAAP,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,gBAAgB,CAAC,mBAAjB,CAAqC,IAArC,CAA0C,KAA1C,CAAgD,CAAhD,CAA3B;AAA+E,gBAAA,WAAW,EAAE,YAAU,CAAV,GAAW,QAAX,GAAoB,CAApB,GAAqB,QAArB,GAA8B;AAA1H,eAAR;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;;OARoD,CAAA;AASvD,KATM,CAAP;AAUH,GAbF;AAcC,EAAA,OAAO,EAAA,UAAC,EAAD,EAAM;QAAH,CAAC,GAAA,EAAA,CAAA,C;AACP,IAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,CAAQ,gBAAR,CAAyB,OAAzB,EAAA;AACH;AAhBF,CAlBgC,CAAnC;AAsCA,IAAM,iBAAiB,GAAG,oBAAoB,CAAC,OAArB,CAA6B;AACnD,EAAA,IAAI,EAAE,qBAD6C;AAEnD,EAAA,OAAO,EAAE;AAAE,IAAA,IAAI,EAAE,qBAAR;AAA+B,IAAA,WAAW,EAAE;AAA5C,GAF0C;AAGnD,EAAA,IAAI,EAAE,EAAE,CAAC,MAAH,CAAU,IAHmC;AAInD,EAAA,EAAE,EAAE,EAAE,CAAC,MAAH,CAAU,IAJqC;AAKnD,EAAA,WAAW,EAAE,IALsC;AAMnD,EAAA,MAAM,EAAN,UAAO,CAAP,EAAU,MAAV,EAA+B;AAC3B,QAAI,CAAC,CAAL,EAAQ,OAAO;AAAE,MAAA,GAAG,EAAE,EAAE,CAAC,IAAH;AAAP,KAAP;AACR,QAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,MAAlB,CAAyB,cAAc,CAAC,UAAf,CAA0B,IAA1B,CAA+B,OAA/B,GAAyC,MAAzC,CAAgD,EAAE,CAAC,MAAH,CAAU,IAA1D,EAAgE,MAAhE,CAAuE,UAAA,IAAA,EAAI;AAAA,UAAA,EAAA;;AAAI,aAAA,CAAC,CAAC,IAAI,CAAC,GAAP,IAAc,EAAC,CAAA,EAAA,GAAA,IAAI,CAAC,GAAL,MAAQ,IAAR,IAAQ,EAAA,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAQ,EAAA,CAAE,IAAF,CAAO,WAAhB,CAAd,IAA6C,IAAI,CAAC,GAAL,KAAa,CAA1D;AAA2D,KAA1I,CAAzB,CAAd;AACA,QAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB,OAAO;AAAE,MAAA,GAAG,EAAE,EAAE,CAAC,IAAH,CAAQ,EAAR,EAAY;AAAE,QAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAP,KAAP;AACxB,WAAO;AAAE,MAAA,GAAG,EAAE,EAAE,CAAC,MAAH,CAAU,KAAK,CAAC,CAAD,CAAL,CAAS,SAAT,CAAmB,GAA7B,EAAkC,KAAK,CAAC,GAAN,CAAU,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,CAAC,SAAF,CAAY,GAAb,EAAkB,CAAC,CAAC,GAAF,CAAlB,KAAA,CAAA;AAA+B,OAA9C,CAAlC;AAAP,KAAP;AACH;AAXkD,CAA7B,EAYvB;AACC,EAAA,KAAK,EAAL,UAAM,EAAN,EAAiC;AAAjC,QAAA,KAAA,GAAA,IAAA;;QAAQ,CAAC,GAAA,EAAA,CAAA,C;QAAE,MAAM,GAAA,EAAA,CAAA,M;QAAE,YAAY,GAAA,EAAA,CAAA,Y;AAC3B,WAAO,IAAI,CAAC,MAAL,CAAY,qBAAZ,EAAmC,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAC/C,cAAI,CAAC,YAAD,IAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,GAAR,CAAlC,EAAgD;AAC5C,kBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACK,UAAA,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,GAAR,CAAZ,CAAyB,IAAvC;AACA,UAAA,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACL,CAAC,CAAC,IADG,CAAA,EACC;AACT,YAAA,WAAW,EAAA;AADF,WADD,CAAN;AAIA,UAAA,KAAK,GAAG;AAAE,YAAA,KAAK,EAAE,CAAC,CAAC,KAAX;AAAkB,YAAA,WAAW,EAAE;AAA/B,WAAR;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,EAAE,CAAC,MAAH,CAAU,IAAd,CAAmB,MAAnB,EAA2B,KAA3B,CAAP,CAAA;;OAV+C,CAAA;AAWlD,KAXM,CAAP;AAYH;AAdF,CAZuB,CAA1B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { CIF } from '../../mol-io/reader/cif';\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nimport { volumeFromCcp4 } from '../../mol-model-formats/volume/ccp4';\r\nimport { volumeFromDensityServerData } from '../../mol-model-formats/volume/density-server';\r\nimport { volumeFromDsn6 } from '../../mol-model-formats/volume/dsn6';\r\nimport { Task } from '../../mol-task';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject as SO, PluginStateTransform } from '../objects';\r\nimport { volumeFromCube } from '../../mol-model-formats/volume/cube';\r\nimport { volumeFromDx } from '../../mol-model-formats/volume/dx';\r\nimport { StateSelection } from '../../mol-state';\r\nexport { VolumeFromCcp4 };\r\nexport { VolumeFromDsn6 };\r\nexport { VolumeFromCube };\r\nexport { VolumeFromDx };\r\nexport { AssignColorVolume };\r\nexport { VolumeFromDensityServerCif };\r\nvar VolumeFromCcp4 = PluginStateTransform.BuiltIn({\r\n    name: 'volume-from-ccp4',\r\n    display: { name: 'Volume from CCP4/MRC/MAP', description: 'Create Volume from CCP4/MRC/MAP data' },\r\n    from: SO.Format.Ccp4,\r\n    to: SO.Volume.Data,\r\n    params: function (a) {\r\n        return {\r\n            voxelSize: PD.Vec3(Vec3.create(1, 1, 1)),\r\n            offset: PD.Vec3(Vec3.create(0, 0, 0)),\r\n            entryId: PD.Text(''),\r\n        };\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Create volume from CCP4/MRC/MAP', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var volume, props;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, volumeFromCcp4(a.data, __assign(__assign({}, params), { label: a.data.name || a.label })).runInContext(ctx)];\r\n                    case 1:\r\n                        volume = _a.sent();\r\n                        props = { label: volume.label || 'Volume', description: \"Volume \" + a.data.header.NX + \"\\u00D7\" + a.data.header.NX + \"\\u00D7\" + a.data.header.NX };\r\n                        return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var b = _a.b;\r\n        b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\r\n    }\r\n});\r\nvar VolumeFromDsn6 = PluginStateTransform.BuiltIn({\r\n    name: 'volume-from-dsn6',\r\n    display: { name: 'Volume from DSN6/BRIX', description: 'Create Volume from DSN6/BRIX data' },\r\n    from: SO.Format.Dsn6,\r\n    to: SO.Volume.Data,\r\n    params: function (a) {\r\n        return {\r\n            voxelSize: PD.Vec3(Vec3.create(1, 1, 1)),\r\n            entryId: PD.Text(''),\r\n        };\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Create volume from DSN6/BRIX', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var volume, props;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, volumeFromDsn6(a.data, __assign(__assign({}, params), { label: a.data.name || a.label })).runInContext(ctx)];\r\n                    case 1:\r\n                        volume = _a.sent();\r\n                        props = { label: volume.label || 'Volume', description: \"Volume \" + a.data.header.xExtent + \"\\u00D7\" + a.data.header.yExtent + \"\\u00D7\" + a.data.header.zExtent };\r\n                        return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var b = _a.b;\r\n        b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\r\n    }\r\n});\r\nvar VolumeFromCube = PluginStateTransform.BuiltIn({\r\n    name: 'volume-from-cube',\r\n    display: { name: 'Volume from Cube', description: 'Create Volume from Cube data' },\r\n    from: SO.Format.Cube,\r\n    to: SO.Volume.Data,\r\n    params: function (a) {\r\n        var dataIndex = a ? PD.Select(0, a.data.header.dataSetIds.map(function (id, i) { return [i, \"\" + id]; })) : PD.Numeric(0);\r\n        return {\r\n            dataIndex: dataIndex,\r\n            entryId: PD.Text(''),\r\n        };\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Create volume from Cube', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var volume, props;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, volumeFromCube(a.data, __assign(__assign({}, params), { label: a.data.name || a.label })).runInContext(ctx)];\r\n                    case 1:\r\n                        volume = _a.sent();\r\n                        props = { label: volume.label || 'Volume', description: \"Volume \" + a.data.header.dim[0] + \"\\u00D7\" + a.data.header.dim[1] + \"\\u00D7\" + a.data.header.dim[2] };\r\n                        return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var b = _a.b;\r\n        b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\r\n    }\r\n});\r\nvar VolumeFromDx = PluginStateTransform.BuiltIn({\r\n    name: 'volume-from-dx',\r\n    display: { name: 'Parse DX', description: 'Create volume from DX data.' },\r\n    from: SO.Format.Dx,\r\n    to: SO.Volume.Data\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a;\r\n        return Task.create('Parse DX', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var volume, props;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, volumeFromDx(a.data, { label: a.data.name || a.label }).runInContext(ctx)];\r\n                    case 1:\r\n                        volume = _a.sent();\r\n                        props = { label: volume.label || 'Volume', description: \"Volume \" + a.data.header.dim[0] + \"\\u00D7\" + a.data.header.dim[1] + \"\\u00D7\" + a.data.header.dim[2] };\r\n                        return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var b = _a.b;\r\n        b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\r\n    }\r\n});\r\nvar VolumeFromDensityServerCif = PluginStateTransform.BuiltIn({\r\n    name: 'volume-from-density-server-cif',\r\n    display: { name: 'Volume from density-server CIF', description: 'Identify and create all separate models in the specified CIF data block' },\r\n    from: SO.Format.Cif,\r\n    to: SO.Volume.Data,\r\n    params: function (a) {\r\n        if (!a) {\r\n            return {\r\n                blockHeader: PD.Optional(PD.Text(void 0, { description: 'Header of the block to parse. If none is specifed, the 1st data block in the file is used.' })),\r\n                entryId: PD.Text(''),\r\n            };\r\n        }\r\n        var blocks = a.data.blocks.slice(1); // zero block contains query meta-data\r\n        return {\r\n            blockHeader: PD.Optional(PD.Select(blocks[0] && blocks[0].header, blocks.map(function (b) { return [b.header, b.header]; }), { description: 'Header of the block to parse' })),\r\n            entryId: PD.Text(''),\r\n        };\r\n    }\r\n})({\r\n    isApplicable: function (a) { return a.data.blocks.length > 0; },\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Parse density-server CIF', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var header, block, densityServerCif, volume, _a, x, y, z, props;\r\n            var _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        header = params.blockHeader || a.data.blocks[1].header;\r\n                        block = a.data.blocks.find(function (b) { return b.header === header; });\r\n                        if (!block)\r\n                            throw new Error(\"Data block '\" + [header] + \"' not found.\");\r\n                        densityServerCif = CIF.schema.densityServer(block);\r\n                        return [4 /*yield*/, volumeFromDensityServerData(densityServerCif, { entryId: params.entryId }).runInContext(ctx)];\r\n                    case 1:\r\n                        volume = _c.sent();\r\n                        _a = volume.grid.cells.space.dimensions, x = _a[0], y = _a[1], z = _a[2];\r\n                        props = { label: (_b = params.entryId) !== null && _b !== void 0 ? _b : densityServerCif.volume_data_3d_info.name.value(0), description: \"Volume \" + x + \"\\u00D7\" + y + \"\\u00D7\" + z };\r\n                        return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    dispose: function (_a) {\r\n        var b = _a.b;\r\n        b === null || b === void 0 ? void 0 : b.data.customProperties.dispose();\r\n    }\r\n});\r\nvar AssignColorVolume = PluginStateTransform.BuiltIn({\r\n    name: 'assign-color-volume',\r\n    display: { name: 'Assign Color Volume', description: 'Assigns another volume to be available for coloring.' },\r\n    from: SO.Volume.Data,\r\n    to: SO.Volume.Data,\r\n    isDecorator: true,\r\n    params: function (a, plugin) {\r\n        if (!a)\r\n            return { ref: PD.Text() };\r\n        var cells = plugin.state.data.select(StateSelection.Generators.root.subtree().ofType(SO.Volume.Data).filter(function (cell) { var _a; return !!cell.obj && !((_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data.colorVolume) && cell.obj !== a; }));\r\n        if (cells.length === 0)\r\n            return { ref: PD.Text('', { isHidden: true }) };\r\n        return { ref: PD.Select(cells[0].transform.ref, cells.map(function (c) { return [c.transform.ref, c.obj.label]; })) };\r\n    }\r\n})({\r\n    apply: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, params = _a.params, dependencies = _a.dependencies;\r\n        return Task.create('Assign Color Volume', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var colorVolume, volume, props;\r\n            return __generator(this, function (_a) {\r\n                if (!dependencies || !dependencies[params.ref]) {\r\n                    throw new Error('Dependency not available.');\r\n                }\r\n                colorVolume = dependencies[params.ref].data;\r\n                volume = __assign(__assign({}, a.data), { colorVolume: colorVolume });\r\n                props = { label: a.label, description: 'Volume + Colors' };\r\n                return [2 /*return*/, new SO.Volume.Data(volume, props)];\r\n            });\r\n        }); });\r\n    }\r\n});\r\n//# sourceMappingURL=volume.js.map"]},"metadata":{},"sourceType":"module"}