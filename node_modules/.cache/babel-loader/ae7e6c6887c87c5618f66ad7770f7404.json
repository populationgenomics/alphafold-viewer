{"ast":null,"code":"/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureElement, Bond } from '../../../mol-model/structure';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { BitFlags, arrayEqual } from '../../../mol-util';\nimport { createLinkLines } from './util/link';\nimport { ComplexLinesVisual, ComplexLinesParams } from '../complex-visual';\nimport { BondType } from '../../../mol-model/structure/model/types';\nimport { BondIterator, getInterBondLoci, eachInterBond, BondLineParams, makeInterBondIgnoreTest } from './util/bond';\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\nimport { Sphere3D } from '../../../mol-math/geometry';\nvar tmpRefPosBondIt = new Bond.ElementBondIterator();\n\nfunction setRefPosition(pos, structure, unit, index) {\n  tmpRefPosBondIt.setElement(structure, unit, index);\n\n  while (tmpRefPosBondIt.hasNext) {\n    var bA = tmpRefPosBondIt.move();\n    bA.otherUnit.conformation.position(bA.otherUnit.elements[bA.otherIndex], pos);\n    return pos;\n  }\n\n  return null;\n}\n\nfunction createInterUnitBondLines(ctx, structure, theme, props, lines) {\n  var bonds = structure.interUnitBonds;\n  var edgeCount = bonds.edgeCount,\n      edges = bonds.edges;\n  if (!edgeCount) return Lines.createEmpty(lines);\n  var sizeFactor = props.sizeFactor,\n      aromaticBonds = props.aromaticBonds,\n      multipleBonds = props.multipleBonds;\n  var mbOff = multipleBonds === 'off';\n  var mbSymmetric = multipleBonds === 'symmetric';\n  var ref = Vec3();\n  var loc = StructureElement.Location.create();\n  var builderProps = {\n    linkCount: edgeCount,\n    referencePosition: function (edgeIndex) {\n      var b = edges[edgeIndex];\n      var unitA, unitB;\n      var indexA, indexB;\n\n      if (b.unitA < b.unitB) {\n        unitA = structure.unitMap.get(b.unitA);\n        unitB = structure.unitMap.get(b.unitB);\n        indexA = b.indexA;\n        indexB = b.indexB;\n      } else if (b.unitA > b.unitB) {\n        unitA = structure.unitMap.get(b.unitB);\n        unitB = structure.unitMap.get(b.unitA);\n        indexA = b.indexB;\n        indexB = b.indexA;\n      } else {\n        throw new Error('same units in createInterUnitBondLines');\n      }\n\n      return setRefPosition(ref, structure, unitA, indexA) || setRefPosition(ref, structure, unitB, indexB);\n    },\n    position: function (posA, posB, edgeIndex) {\n      var b = edges[edgeIndex];\n      var uA = structure.unitMap.get(b.unitA);\n      var uB = structure.unitMap.get(b.unitB);\n      uA.conformation.position(uA.elements[b.indexA], posA);\n      uB.conformation.position(uB.elements[b.indexB], posB);\n    },\n    style: function (edgeIndex) {\n      var o = edges[edgeIndex].props.order;\n      var f = BitFlags.create(edges[edgeIndex].props.flag);\n\n      if (BondType.is(f, 2\n      /* MetallicCoordination */\n      ) || BondType.is(f, 4\n      /* HydrogenBond */\n      )) {\n        // show metallic coordinations and hydrogen bonds with dashed cylinders\n        return 1\n        /* Dashed */\n        ;\n      } else if (o === 3) {\n        return mbOff ? 0\n        /* Solid */\n        : mbSymmetric ? 4\n        /* Triple */\n        : 5\n        /* OffsetTriple */\n        ;\n      } else if (aromaticBonds && BondType.is(f, 16\n      /* Aromatic */\n      )) {\n        return 7\n        /* Aromatic */\n        ;\n      }\n\n      return o !== 2 || mbOff ? 0\n      /* Solid */\n      : mbSymmetric ? 2\n      /* Double */\n      : 3\n      /* OffsetDouble */\n      ;\n    },\n    radius: function (edgeIndex) {\n      var b = edges[edgeIndex];\n      loc.structure = structure;\n      loc.unit = structure.unitMap.get(b.unitA);\n      loc.element = loc.unit.elements[b.indexA];\n      var sizeA = theme.size.size(loc);\n      loc.unit = structure.unitMap.get(b.unitB);\n      loc.element = loc.unit.elements[b.indexB];\n      var sizeB = theme.size.size(loc);\n      return Math.min(sizeA, sizeB) * sizeFactor;\n    },\n    ignore: makeInterBondIgnoreTest(structure, props)\n  };\n  var l = createLinkLines(ctx, builderProps, props, lines);\n  var child = structure.child;\n  var sphere = Sphere3D.expand(Sphere3D(), (child !== null && child !== void 0 ? child : structure).boundary.sphere, 1 * props.sizeFactor);\n  l.setBoundingSphere(sphere);\n  return l;\n}\n\nexport var InterUnitBondLineParams = __assign(__assign(__assign({}, ComplexLinesParams), BondLineParams), {\n  includeParent: PD.Boolean(false)\n});\nexport function InterUnitBondLineVisual(materialId) {\n  return ComplexLinesVisual({\n    defaultProps: PD.getDefaultValues(InterUnitBondLineParams),\n    createGeometry: createInterUnitBondLines,\n    createLocationIterator: BondIterator.fromStructure,\n    getLoci: getInterBondLoci,\n    eachLocation: eachInterBond,\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructure, currentStructure) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.linkScale !== currentProps.linkScale || newProps.linkSpacing !== currentProps.linkSpacing || newProps.dashCount !== currentProps.dashCount || newProps.ignoreHydrogens !== currentProps.ignoreHydrogens || !arrayEqual(newProps.includeTypes, currentProps.includeTypes) || !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) || newProps.multipleBonds !== currentProps.multipleBonds;\n\n      if (newStructure.interUnitBonds !== currentStructure.interUnitBonds) {\n        state.createGeometry = true;\n        state.updateTransform = true;\n        state.updateColor = true;\n        state.updateSize = true;\n      }\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/bond-inter-unit-line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureElement, Bond } from '../../../mol-model/structure';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { BitFlags, arrayEqual } from '../../../mol-util';\r\nimport { createLinkLines } from './util/link';\r\nimport { ComplexLinesVisual, ComplexLinesParams } from '../complex-visual';\r\nimport { BondType } from '../../../mol-model/structure/model/types';\r\nimport { BondIterator, getInterBondLoci, eachInterBond, BondLineParams, makeInterBondIgnoreTest } from './util/bond';\r\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nvar tmpRefPosBondIt = new Bond.ElementBondIterator();\r\nfunction setRefPosition(pos, structure, unit, index) {\r\n    tmpRefPosBondIt.setElement(structure, unit, index);\r\n    while (tmpRefPosBondIt.hasNext) {\r\n        var bA = tmpRefPosBondIt.move();\r\n        bA.otherUnit.conformation.position(bA.otherUnit.elements[bA.otherIndex], pos);\r\n        return pos;\r\n    }\r\n    return null;\r\n}\r\nfunction createInterUnitBondLines(ctx, structure, theme, props, lines) {\r\n    var bonds = structure.interUnitBonds;\r\n    var edgeCount = bonds.edgeCount, edges = bonds.edges;\r\n    if (!edgeCount)\r\n        return Lines.createEmpty(lines);\r\n    var sizeFactor = props.sizeFactor, aromaticBonds = props.aromaticBonds, multipleBonds = props.multipleBonds;\r\n    var mbOff = multipleBonds === 'off';\r\n    var mbSymmetric = multipleBonds === 'symmetric';\r\n    var ref = Vec3();\r\n    var loc = StructureElement.Location.create();\r\n    var builderProps = {\r\n        linkCount: edgeCount,\r\n        referencePosition: function (edgeIndex) {\r\n            var b = edges[edgeIndex];\r\n            var unitA, unitB;\r\n            var indexA, indexB;\r\n            if (b.unitA < b.unitB) {\r\n                unitA = structure.unitMap.get(b.unitA);\r\n                unitB = structure.unitMap.get(b.unitB);\r\n                indexA = b.indexA;\r\n                indexB = b.indexB;\r\n            }\r\n            else if (b.unitA > b.unitB) {\r\n                unitA = structure.unitMap.get(b.unitB);\r\n                unitB = structure.unitMap.get(b.unitA);\r\n                indexA = b.indexB;\r\n                indexB = b.indexA;\r\n            }\r\n            else {\r\n                throw new Error('same units in createInterUnitBondLines');\r\n            }\r\n            return setRefPosition(ref, structure, unitA, indexA) || setRefPosition(ref, structure, unitB, indexB);\r\n        },\r\n        position: function (posA, posB, edgeIndex) {\r\n            var b = edges[edgeIndex];\r\n            var uA = structure.unitMap.get(b.unitA);\r\n            var uB = structure.unitMap.get(b.unitB);\r\n            uA.conformation.position(uA.elements[b.indexA], posA);\r\n            uB.conformation.position(uB.elements[b.indexB], posB);\r\n        },\r\n        style: function (edgeIndex) {\r\n            var o = edges[edgeIndex].props.order;\r\n            var f = BitFlags.create(edges[edgeIndex].props.flag);\r\n            if (BondType.is(f, 2 /* MetallicCoordination */) || BondType.is(f, 4 /* HydrogenBond */)) {\r\n                // show metallic coordinations and hydrogen bonds with dashed cylinders\r\n                return 1 /* Dashed */;\r\n            }\r\n            else if (o === 3) {\r\n                return mbOff ? 0 /* Solid */ :\r\n                    mbSymmetric ? 4 /* Triple */ :\r\n                        5 /* OffsetTriple */;\r\n            }\r\n            else if (aromaticBonds && BondType.is(f, 16 /* Aromatic */)) {\r\n                return 7 /* Aromatic */;\r\n            }\r\n            return (o !== 2 || mbOff) ? 0 /* Solid */ :\r\n                mbSymmetric ? 2 /* Double */ :\r\n                    3 /* OffsetDouble */;\r\n        },\r\n        radius: function (edgeIndex) {\r\n            var b = edges[edgeIndex];\r\n            loc.structure = structure;\r\n            loc.unit = structure.unitMap.get(b.unitA);\r\n            loc.element = loc.unit.elements[b.indexA];\r\n            var sizeA = theme.size.size(loc);\r\n            loc.unit = structure.unitMap.get(b.unitB);\r\n            loc.element = loc.unit.elements[b.indexB];\r\n            var sizeB = theme.size.size(loc);\r\n            return Math.min(sizeA, sizeB) * sizeFactor;\r\n        },\r\n        ignore: makeInterBondIgnoreTest(structure, props)\r\n    };\r\n    var l = createLinkLines(ctx, builderProps, props, lines);\r\n    var child = structure.child;\r\n    var sphere = Sphere3D.expand(Sphere3D(), (child !== null && child !== void 0 ? child : structure).boundary.sphere, 1 * props.sizeFactor);\r\n    l.setBoundingSphere(sphere);\r\n    return l;\r\n}\r\nexport var InterUnitBondLineParams = __assign(__assign(__assign({}, ComplexLinesParams), BondLineParams), { includeParent: PD.Boolean(false) });\r\nexport function InterUnitBondLineVisual(materialId) {\r\n    return ComplexLinesVisual({\r\n        defaultProps: PD.getDefaultValues(InterUnitBondLineParams),\r\n        createGeometry: createInterUnitBondLines,\r\n        createLocationIterator: BondIterator.fromStructure,\r\n        getLoci: getInterBondLoci,\r\n        eachLocation: eachInterBond,\r\n        setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructure, currentStructure) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.linkScale !== currentProps.linkScale ||\r\n                newProps.linkSpacing !== currentProps.linkSpacing ||\r\n                newProps.dashCount !== currentProps.dashCount ||\r\n                newProps.ignoreHydrogens !== currentProps.ignoreHydrogens ||\r\n                !arrayEqual(newProps.includeTypes, currentProps.includeTypes) ||\r\n                !arrayEqual(newProps.excludeTypes, currentProps.excludeTypes) ||\r\n                newProps.multipleBonds !== currentProps.multipleBonds);\r\n            if (newStructure.interUnitBonds !== currentStructure.interUnitBonds) {\r\n                state.createGeometry = true;\r\n                state.updateTransform = true;\r\n                state.updateColor = true;\r\n                state.updateSize = true;\r\n            }\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=bond-inter-unit-line.js.map"]},"metadata":{},"sourceType":"module"}