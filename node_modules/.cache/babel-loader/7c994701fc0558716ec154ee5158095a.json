{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { MmcifFormat } from '../../mol-model-formats/structure/mmcif';\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\nimport { CustomModelProperty } from '../common/custom-model-property';\nexport { BestDatabaseSequenceMapping };\nvar BestDatabaseSequenceMapping;\n\n(function (BestDatabaseSequenceMapping) {\n  var _this = this;\n\n  BestDatabaseSequenceMapping.Provider = CustomModelProperty.createProvider({\n    label: 'Best Database Sequence Mapping',\n    descriptor: CustomPropertyDescriptor({\n      name: 'molstar_best_database_sequence_mapping'\n    }),\n    type: 'static',\n    defaultParams: {},\n    getParams: function () {\n      return {};\n    },\n    isApplicable: function (data) {\n      var _a, _b;\n\n      return MmcifFormat.is(data.sourceData) && ((_b = (_a = data.sourceData.data.frame.categories) === null || _a === void 0 ? void 0 : _a.atom_site) === null || _b === void 0 ? void 0 : _b.fieldNames.indexOf('db_name')) >= 0;\n    },\n    obtain: function (ctx, data) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , {\n            value: fromCif(data)\n          }];\n        });\n      });\n    }\n  });\n\n  function getKey(loc) {\n    var model = loc.unit.model;\n    var data = BestDatabaseSequenceMapping.Provider.get(model).value;\n    if (!data) return '';\n    var eI = loc.unit.elements[loc.element];\n    var rI = model.atomicHierarchy.residueAtomSegments.offsets[eI];\n    return data.accession[rI];\n  }\n\n  BestDatabaseSequenceMapping.getKey = getKey;\n\n  function getLabel(loc) {\n    var model = loc.unit.model;\n    var data = BestDatabaseSequenceMapping.Provider.get(model).value;\n    if (!data) return;\n    var eI = loc.unit.elements[loc.element];\n    var rI = model.atomicHierarchy.residueAtomSegments.offsets[eI];\n    var dbName = data.dbName[rI];\n    if (!dbName) return;\n    return dbName + \" \" + data.accession[rI] + \" \" + data.num[rI] + \" \" + data.residue[rI];\n  }\n\n  BestDatabaseSequenceMapping.getLabel = getLabel;\n\n  function fromCif(model) {\n    if (!MmcifFormat.is(model.sourceData)) return;\n    var atom_site = model.sourceData.data.frame.categories.atom_site;\n    var db_name = atom_site.getField('db_name');\n    var db_acc = atom_site.getField('db_acc');\n    var db_num = atom_site.getField('db_num');\n    var db_res = atom_site.getField('db_res');\n    if (!db_name || !db_acc || !db_num || !db_res) return;\n    var atomSourceIndex = model.atomicHierarchy.atomSourceIndex;\n    var _a = model.atomicHierarchy.residueAtomSegments,\n        count = _a.count,\n        residueOffsets = _a.offsets;\n    var dbName = new Array(count);\n    var accession = new Array(count);\n    var num = new Array(count);\n    var residue = new Array(count);\n\n    for (var i = 0; i < count; i++) {\n      var row = atomSourceIndex.value(residueOffsets[i]);\n\n      if (db_name.valueKind(row) !== 0\n      /* Present */\n      ) {\n        dbName[row] = '';\n        accession[row] = '';\n        num[row] = 0;\n        residue[row] = '';\n        continue;\n      }\n\n      dbName[row] = db_name.str(row);\n      accession[row] = db_acc.str(row);\n      num[row] = db_num.int(row);\n      residue[row] = db_res.str(row);\n    }\n\n    return {\n      dbName: dbName,\n      accession: accession,\n      num: num,\n      residue: residue\n    };\n  }\n})(BestDatabaseSequenceMapping || (BestDatabaseSequenceMapping = {}));","map":{"version":3,"sources":["../../../src/mol-model-props/sequence/best-database-mapping.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { MmcifFormat } from '../../mol-model-formats/structure/mmcif';\r\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\r\nimport { CustomModelProperty } from '../common/custom-model-property';\r\nexport { BestDatabaseSequenceMapping };\r\nvar BestDatabaseSequenceMapping;\r\n(function (BestDatabaseSequenceMapping) {\r\n    var _this = this;\r\n    BestDatabaseSequenceMapping.Provider = CustomModelProperty.createProvider({\r\n        label: 'Best Database Sequence Mapping',\r\n        descriptor: CustomPropertyDescriptor({\r\n            name: 'molstar_best_database_sequence_mapping'\r\n        }),\r\n        type: 'static',\r\n        defaultParams: {},\r\n        getParams: function () { return ({}); },\r\n        isApplicable: function (data) { var _a, _b; return MmcifFormat.is(data.sourceData) && ((_b = (_a = data.sourceData.data.frame.categories) === null || _a === void 0 ? void 0 : _a.atom_site) === null || _b === void 0 ? void 0 : _b.fieldNames.indexOf('db_name')) >= 0; },\r\n        obtain: function (ctx, data) { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, { value: fromCif(data) }];\r\n            });\r\n        }); }\r\n    });\r\n    function getKey(loc) {\r\n        var model = loc.unit.model;\r\n        var data = BestDatabaseSequenceMapping.Provider.get(model).value;\r\n        if (!data)\r\n            return '';\r\n        var eI = loc.unit.elements[loc.element];\r\n        var rI = model.atomicHierarchy.residueAtomSegments.offsets[eI];\r\n        return data.accession[rI];\r\n    }\r\n    BestDatabaseSequenceMapping.getKey = getKey;\r\n    function getLabel(loc) {\r\n        var model = loc.unit.model;\r\n        var data = BestDatabaseSequenceMapping.Provider.get(model).value;\r\n        if (!data)\r\n            return;\r\n        var eI = loc.unit.elements[loc.element];\r\n        var rI = model.atomicHierarchy.residueAtomSegments.offsets[eI];\r\n        var dbName = data.dbName[rI];\r\n        if (!dbName)\r\n            return;\r\n        return dbName + \" \" + data.accession[rI] + \" \" + data.num[rI] + \" \" + data.residue[rI];\r\n    }\r\n    BestDatabaseSequenceMapping.getLabel = getLabel;\r\n    function fromCif(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return;\r\n        var atom_site = model.sourceData.data.frame.categories.atom_site;\r\n        var db_name = atom_site.getField('db_name');\r\n        var db_acc = atom_site.getField('db_acc');\r\n        var db_num = atom_site.getField('db_num');\r\n        var db_res = atom_site.getField('db_res');\r\n        if (!db_name || !db_acc || !db_num || !db_res)\r\n            return;\r\n        var atomSourceIndex = model.atomicHierarchy.atomSourceIndex;\r\n        var _a = model.atomicHierarchy.residueAtomSegments, count = _a.count, residueOffsets = _a.offsets;\r\n        var dbName = new Array(count);\r\n        var accession = new Array(count);\r\n        var num = new Array(count);\r\n        var residue = new Array(count);\r\n        for (var i = 0; i < count; i++) {\r\n            var row = atomSourceIndex.value(residueOffsets[i]);\r\n            if (db_name.valueKind(row) !== 0 /* Present */) {\r\n                dbName[row] = '';\r\n                accession[row] = '';\r\n                num[row] = 0;\r\n                residue[row] = '';\r\n                continue;\r\n            }\r\n            dbName[row] = db_name.str(row);\r\n            accession[row] = db_acc.str(row);\r\n            num[row] = db_num.int(row);\r\n            residue[row] = db_res.str(row);\r\n        }\r\n        return { dbName: dbName, accession: accession, num: num, residue: residue };\r\n    }\r\n})(BestDatabaseSequenceMapping || (BestDatabaseSequenceMapping = {}));\r\n//# sourceMappingURL=best-database-mapping.js.map"]},"metadata":{},"sourceType":"module"}