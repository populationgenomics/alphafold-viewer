{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { VdwRadius } from '../../mol-model/structure/model/properties/atomic';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nvar DefaultSize = 1;\nvar Description = 'Assigns a physical size, i.e. vdW radius for atoms or given radius for coarse spheres.';\nexport var PhysicalSizeThemeParams = {\n  scale: PD.Numeric(1, {\n    min: 0.1,\n    max: 5,\n    step: 0.1\n  })\n};\nexport function getPhysicalSizeThemeParams(ctx) {\n  return PhysicalSizeThemeParams; // TODO return copy\n}\nexport function getPhysicalRadius(unit, element) {\n  if (Unit.isAtomic(unit)) {\n    return VdwRadius(unit.model.atomicHierarchy.atoms.type_symbol.value(element));\n  } else if (Unit.isSpheres(unit)) {\n    return unit.model.coarseConformation.spheres.radius[element];\n  } else {\n    return 0;\n  }\n}\n/**\r\n * Create attribute data with the physical size of an element,\r\n * i.e. vdw for atoms and radius for coarse spheres\r\n */\n\nexport function PhysicalSizeTheme(ctx, props) {\n  var scale = props.scale === void 0 ? 1 : props.scale;\n\n  function size(location) {\n    var size;\n\n    if (StructureElement.Location.is(location)) {\n      size = scale * getPhysicalRadius(location.unit, location.element);\n    } else if (Bond.isLocation(location)) {\n      size = scale * Math.min(getPhysicalRadius(location.aUnit, location.aUnit.elements[location.aIndex]), getPhysicalRadius(location.bUnit, location.bUnit.elements[location.bIndex]));\n    } else {\n      size = scale * DefaultSize;\n    }\n\n    return size;\n  }\n\n  return {\n    factory: PhysicalSizeTheme,\n    granularity: 'group',\n    size: size,\n    props: props,\n    description: Description\n  };\n}\nexport var PhysicalSizeThemeProvider = {\n  name: 'physical',\n  label: 'Physical',\n  category: '',\n  factory: PhysicalSizeTheme,\n  getParams: getPhysicalSizeThemeParams,\n  defaultValues: PD.getDefaultValues(PhysicalSizeThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/size/physical.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,gBAAT,EAA2B,IAA3B,EAAiC,IAAjC,QAA2D,2BAA3D;AAGA,SAAS,SAAT,QAA0B,mDAA1B;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,iCAAtC;AAGA,IAAM,WAAW,GAAG,CAApB;AACA,IAAM,WAAW,GAAG,wFAApB;AAEA,OAAO,IAAM,uBAAuB,GAAG;AACnC,EAAA,KAAK,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,IAAA,GAAG,EAAE,GAAP;AAAY,IAAA,GAAG,EAAE,CAAjB;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAd;AAD4B,CAAhC;AAIP,OAAM,SAAU,0BAAV,CAAqC,GAArC,EAA0D;AAC5D,SAAO,uBAAP,CAD4D,CAC5B;AACnC;AAED,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC,OAAxC,EAA6D;AAC/D,MAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,EAAyB;AACrB,WAAO,SAAS,CAAC,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,KAA3B,CAAiC,WAAjC,CAA6C,KAA7C,CAAmD,OAAnD,CAAD,CAAhB;AACH,GAFD,MAEO,IAAI,IAAI,CAAC,SAAL,CAAe,IAAf,CAAJ,EAA0B;AAC7B,WAAO,IAAI,CAAC,KAAL,CAAW,kBAAX,CAA8B,OAA9B,CAAsC,MAAtC,CAA6C,OAA7C,CAAP;AACH,GAFM,MAEA;AACH,WAAO,CAAP;AACH;AACJ;AAED;;;AAGG;;AACH,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAmD,KAAnD,EAA4F;AAC9F,MAAM,KAAK,GAAG,KAAK,CAAC,KAAN,KAAgB,KAAK,CAArB,GAAyB,CAAzB,GAA6B,KAAK,CAAC,KAAjD;;AAEA,WAAS,IAAT,CAAc,QAAd,EAAgC;AAC5B,QAAI,IAAJ;;AACA,QAAI,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,CAA6B,QAA7B,CAAJ,EAA4C;AACxC,MAAA,IAAI,GAAG,KAAK,GAAG,iBAAiB,CAAC,QAAQ,CAAC,IAAV,EAAgB,QAAQ,CAAC,OAAzB,CAAhC;AACH,KAFD,MAEO,IAAI,IAAI,CAAC,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAClC,MAAA,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,GAAL,CACX,iBAAiB,CAAC,QAAQ,CAAC,KAAV,EAAiB,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,QAAQ,CAAC,MAAjC,CAAjB,CADN,EAEX,iBAAiB,CAAC,QAAQ,CAAC,KAAV,EAAiB,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAwB,QAAQ,CAAC,MAAjC,CAAjB,CAFN,CAAf;AAIH,KALM,MAKA;AACH,MAAA,IAAI,GAAG,KAAK,GAAG,WAAf;AACH;;AACD,WAAO,IAAP;AACH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,iBADN;AAEH,IAAA,WAAW,EAAE,OAFV;AAGH,IAAA,IAAI,EAAA,IAHD;AAIH,IAAA,KAAK,EAAA,KAJF;AAKH,IAAA,WAAW,EAAE;AALV,GAAP;AAOH;AAED,OAAO,IAAM,yBAAyB,GAA4D;AAC9F,EAAA,IAAI,EAAE,UADwF;AAE9F,EAAA,KAAK,EAAE,UAFuF;AAG9F,EAAA,QAAQ,EAAE,EAHoF;AAI9F,EAAA,OAAO,EAAE,iBAJqF;AAK9F,EAAA,SAAS,EAAE,0BALmF;AAM9F,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,uBAApB,CAN+E;AAO9F,EAAA,YAAY,EAAE,UAAC,GAAD,EAAsB;AAAK,WAAA,CAAC,CAAC,GAAG,CAAL,SAAA;AAAe;AAPsC,CAA3F","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { VdwRadius } from '../../mol-model/structure/model/properties/atomic';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nvar DefaultSize = 1;\r\nvar Description = 'Assigns a physical size, i.e. vdW radius for atoms or given radius for coarse spheres.';\r\nexport var PhysicalSizeThemeParams = {\r\n    scale: PD.Numeric(1, { min: 0.1, max: 5, step: 0.1 })\r\n};\r\nexport function getPhysicalSizeThemeParams(ctx) {\r\n    return PhysicalSizeThemeParams; // TODO return copy\r\n}\r\nexport function getPhysicalRadius(unit, element) {\r\n    if (Unit.isAtomic(unit)) {\r\n        return VdwRadius(unit.model.atomicHierarchy.atoms.type_symbol.value(element));\r\n    }\r\n    else if (Unit.isSpheres(unit)) {\r\n        return unit.model.coarseConformation.spheres.radius[element];\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n/**\r\n * Create attribute data with the physical size of an element,\r\n * i.e. vdw for atoms and radius for coarse spheres\r\n */\r\nexport function PhysicalSizeTheme(ctx, props) {\r\n    var scale = props.scale === void 0 ? 1 : props.scale;\r\n    function size(location) {\r\n        var size;\r\n        if (StructureElement.Location.is(location)) {\r\n            size = scale * getPhysicalRadius(location.unit, location.element);\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            size = scale * Math.min(getPhysicalRadius(location.aUnit, location.aUnit.elements[location.aIndex]), getPhysicalRadius(location.bUnit, location.bUnit.elements[location.bIndex]));\r\n        }\r\n        else {\r\n            size = scale * DefaultSize;\r\n        }\r\n        return size;\r\n    }\r\n    return {\r\n        factory: PhysicalSizeTheme,\r\n        granularity: 'group',\r\n        size: size,\r\n        props: props,\r\n        description: Description\r\n    };\r\n}\r\nexport var PhysicalSizeThemeProvider = {\r\n    name: 'physical',\r\n    label: 'Physical',\r\n    category: '',\r\n    factory: PhysicalSizeTheme,\r\n    getParams: getPhysicalSizeThemeParams,\r\n    defaultValues: PD.getDefaultValues(PhysicalSizeThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=physical.js.map"]},"metadata":{},"sourceType":"module"}