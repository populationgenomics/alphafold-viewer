{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { ShrakeRupleyComputationParams, AccessibleSurfaceArea } from './accessible-surface-area/shrake-rupley';\nimport { Unit } from '../../mol-model/structure';\nimport { CustomStructureProperty } from '../common/custom-structure-property';\nimport { QuerySymbolRuntime } from '../../mol-script/runtime/query/compiler';\nimport { CustomPropSymbol } from '../../mol-script/language/symbol';\nimport { Type } from '../../mol-script/language/type';\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\nexport var AccessibleSurfaceAreaParams = __assign({}, ShrakeRupleyComputationParams);\nexport var AccessibleSurfaceAreaSymbols = {\n  isBuried: QuerySymbolRuntime.Dynamic(CustomPropSymbol('computed', 'accessible-surface-area.is-buried', Type.Bool), function (ctx) {\n    if (!Unit.isAtomic(ctx.element.unit)) return false;\n    var accessibleSurfaceArea = AccessibleSurfaceAreaProvider.get(ctx.element.structure).value;\n    if (!accessibleSurfaceArea) return false;\n    return AccessibleSurfaceArea.getFlag(ctx.element, accessibleSurfaceArea) === 1\n    /* Buried */\n    ;\n  }),\n  isAccessible: QuerySymbolRuntime.Dynamic(CustomPropSymbol('computed', 'accessible-surface-area.is-accessible', Type.Bool), function (ctx) {\n    if (!Unit.isAtomic(ctx.element.unit)) return false;\n    var accessibleSurfaceArea = AccessibleSurfaceAreaProvider.get(ctx.element.structure).value;\n    if (!accessibleSurfaceArea) return false;\n    return AccessibleSurfaceArea.getFlag(ctx.element, accessibleSurfaceArea) === 2\n    /* Accessible */\n    ;\n  })\n};\nexport var AccessibleSurfaceAreaProvider = CustomStructureProperty.createProvider({\n  label: 'Accessible Surface Area',\n  descriptor: CustomPropertyDescriptor({\n    name: 'molstar_accessible_surface_area',\n    symbols: AccessibleSurfaceAreaSymbols // TODO `cifExport`\n\n  }),\n  type: 'root',\n  defaultParams: AccessibleSurfaceAreaParams,\n  getParams: function (data) {\n    return AccessibleSurfaceAreaParams;\n  },\n  isApplicable: function (data) {\n    return true;\n  },\n  obtain: function (ctx, data, props) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var p;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            p = __assign(__assign({}, PD.getDefaultValues(AccessibleSurfaceAreaParams)), props);\n            _a = {};\n            return [4\n            /*yield*/\n            , AccessibleSurfaceArea.compute(data, p).runInContext(ctx.runtime)];\n\n          case 1:\n            return [2\n            /*return*/\n            , (_a.value = _b.sent(), _a)];\n        }\n      });\n    });\n  }\n});","map":{"version":3,"sources":["../../../src/mol-model-props/computed/accessible-surface-area.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { ShrakeRupleyComputationParams, AccessibleSurfaceArea } from './accessible-surface-area/shrake-rupley';\r\nimport { Unit } from '../../mol-model/structure';\r\nimport { CustomStructureProperty } from '../common/custom-structure-property';\r\nimport { QuerySymbolRuntime } from '../../mol-script/runtime/query/compiler';\r\nimport { CustomPropSymbol } from '../../mol-script/language/symbol';\r\nimport { Type } from '../../mol-script/language/type';\r\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\r\nexport var AccessibleSurfaceAreaParams = __assign({}, ShrakeRupleyComputationParams);\r\nexport var AccessibleSurfaceAreaSymbols = {\r\n    isBuried: QuerySymbolRuntime.Dynamic(CustomPropSymbol('computed', 'accessible-surface-area.is-buried', Type.Bool), function (ctx) {\r\n        if (!Unit.isAtomic(ctx.element.unit))\r\n            return false;\r\n        var accessibleSurfaceArea = AccessibleSurfaceAreaProvider.get(ctx.element.structure).value;\r\n        if (!accessibleSurfaceArea)\r\n            return false;\r\n        return AccessibleSurfaceArea.getFlag(ctx.element, accessibleSurfaceArea) === 1 /* Buried */;\r\n    }),\r\n    isAccessible: QuerySymbolRuntime.Dynamic(CustomPropSymbol('computed', 'accessible-surface-area.is-accessible', Type.Bool), function (ctx) {\r\n        if (!Unit.isAtomic(ctx.element.unit))\r\n            return false;\r\n        var accessibleSurfaceArea = AccessibleSurfaceAreaProvider.get(ctx.element.structure).value;\r\n        if (!accessibleSurfaceArea)\r\n            return false;\r\n        return AccessibleSurfaceArea.getFlag(ctx.element, accessibleSurfaceArea) === 2 /* Accessible */;\r\n    }),\r\n};\r\nexport var AccessibleSurfaceAreaProvider = CustomStructureProperty.createProvider({\r\n    label: 'Accessible Surface Area',\r\n    descriptor: CustomPropertyDescriptor({\r\n        name: 'molstar_accessible_surface_area',\r\n        symbols: AccessibleSurfaceAreaSymbols,\r\n        // TODO `cifExport`\r\n    }),\r\n    type: 'root',\r\n    defaultParams: AccessibleSurfaceAreaParams,\r\n    getParams: function (data) { return AccessibleSurfaceAreaParams; },\r\n    isApplicable: function (data) { return true; },\r\n    obtain: function (ctx, data, props) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var p;\r\n        var _a;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    p = __assign(__assign({}, PD.getDefaultValues(AccessibleSurfaceAreaParams)), props);\r\n                    _a = {};\r\n                    return [4 /*yield*/, AccessibleSurfaceArea.compute(data, p).runInContext(ctx.runtime)];\r\n                case 1: return [2 /*return*/, (_a.value = _b.sent(), _a)];\r\n            }\r\n        });\r\n    }); }\r\n});\r\n//# sourceMappingURL=accessible-surface-area.js.map"]},"metadata":{},"sourceType":"module"}