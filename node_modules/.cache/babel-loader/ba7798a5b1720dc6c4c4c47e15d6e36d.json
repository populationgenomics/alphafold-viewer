{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { ArrayEncoding as E } from './array-encoder';\nimport { getArrayDigitCount } from '../../../mol-util/number';\nexport function classifyIntArray(xs) {\n  return IntClassifier.classify(xs);\n}\nexport function classifyFloatArray(xs) {\n  return FloatClassifier.classify(xs);\n}\nvar IntClassifier;\n\n(function (IntClassifier) {\n  function packSize(value, upperLimit) {\n    return value >= 0 ? Math.ceil((value + 1) / upperLimit) : Math.ceil((value + 1) / (-upperLimit - 1));\n  }\n\n  function getInfo(data) {\n    var signed = false;\n\n    for (var i = 0, n = data.length; i < n; i++) {\n      if (data[i] < 0) {\n        signed = true;\n        break;\n      }\n    }\n\n    return signed ? {\n      signed: signed,\n      limit8: 0x7F,\n      limit16: 0x7FFF\n    } : {\n      signed: signed,\n      limit8: 0xFF,\n      limit16: 0xFFFF\n    };\n  }\n\n  function SizeInfo() {\n    return {\n      pack8: 0,\n      pack16: 0,\n      count: 0\n    };\n  }\n\n  ;\n\n  function incSize(_a, info, value) {\n    var limit8 = _a.limit8,\n        limit16 = _a.limit16;\n    info.pack8 += packSize(value, limit8);\n    info.pack16 += packSize(value, limit16);\n    info.count += 1;\n  }\n\n  function incSizeSigned(info, value) {\n    info.pack8 += packSize(value, 0x7F);\n    info.pack16 += packSize(value, 0x7FFF);\n    info.count += 1;\n  }\n\n  function byteSize(info) {\n    if (info.count * 4 < info.pack16 * 2) return {\n      length: info.count * 4,\n      elem: 4\n    };\n    if (info.pack16 * 2 < info.pack8) return {\n      length: info.pack16 * 2,\n      elem: 2\n    };\n    return {\n      length: info.pack8,\n      elem: 1\n    };\n  }\n\n  function packingSize(data, info) {\n    var size = SizeInfo();\n\n    for (var i = 0, n = data.length; i < n; i++) {\n      incSize(info, size, data[i]);\n    }\n\n    return __assign(__assign({}, byteSize(size)), {\n      kind: 'pack'\n    });\n  }\n\n  function deltaSize(data, info) {\n    var size = SizeInfo();\n    var prev = data[0];\n\n    for (var i = 1, n = data.length; i < n; i++) {\n      incSizeSigned(size, data[i] - prev);\n      prev = data[i];\n    }\n\n    return __assign(__assign({}, byteSize(size)), {\n      kind: 'delta'\n    });\n  }\n\n  function rleSize(data, info) {\n    var size = SizeInfo();\n    var run = 1;\n\n    for (var i = 1, n = data.length; i < n; i++) {\n      if (data[i - 1] !== data[i]) {\n        incSize(info, size, data[i - 1]);\n        incSize(info, size, run);\n        run = 1;\n      } else {\n        run++;\n      }\n    }\n\n    incSize(info, size, data[data.length - 1]);\n    incSize(info, size, run);\n    return __assign(__assign({}, byteSize(size)), {\n      kind: 'rle'\n    });\n  }\n\n  function deltaRleSize(data, info) {\n    var size = SizeInfo();\n    var run = 1,\n        prev = 0,\n        prevValue = 0;\n\n    for (var i = 1, n = data.length; i < n; i++) {\n      var v = data[i] - prev;\n\n      if (prevValue !== v) {\n        incSizeSigned(size, prevValue);\n        incSizeSigned(size, run);\n        run = 1;\n      } else {\n        run++;\n      }\n\n      prevValue = v;\n      prev = data[i];\n    }\n\n    incSizeSigned(size, prevValue);\n    incSizeSigned(size, run);\n    return __assign(__assign({}, byteSize(size)), {\n      kind: 'delta-rle'\n    });\n  }\n\n  function getSize(data) {\n    var info = getInfo(data);\n    var sizes = [packingSize(data, info), rleSize(data, info), deltaSize(data, info), deltaRleSize(data, info)];\n    sizes.sort(function (a, b) {\n      return a.length - b.length;\n    });\n    return sizes;\n  }\n\n  IntClassifier.getSize = getSize;\n\n  function classify(data) {\n    if (data.length < 2) return E.by(E.byteArray);\n    var sizes = getSize(data);\n    var size = sizes[0];\n\n    switch (size.kind) {\n      case 'pack':\n        return E.by(E.integerPacking);\n\n      case 'rle':\n        return E.by(E.runLength).and(E.integerPacking);\n\n      case 'delta':\n        return E.by(E.delta).and(E.integerPacking);\n\n      case 'delta-rle':\n        return E.by(E.delta).and(E.runLength).and(E.integerPacking);\n    }\n\n    throw new Error('should not happen :)');\n  }\n\n  IntClassifier.classify = classify;\n})(IntClassifier || (IntClassifier = {}));\n\nvar FloatClassifier;\n\n(function (FloatClassifier) {\n  var delta = 1e-6;\n\n  function classify(data) {\n    var maxDigits = 4;\n\n    var _a = getArrayDigitCount(data, maxDigits, delta),\n        mantissaDigits = _a.mantissaDigits,\n        integerDigits = _a.integerDigits; // TODO: better check for overflows here?\n\n\n    if (mantissaDigits < 0 || mantissaDigits + integerDigits > 10) return E.by(E.byteArray); // TODO: this needs a conversion to Int?Array?\n\n    if (mantissaDigits === 0) return IntClassifier.classify(data);\n    var multiplier = getMultiplier(mantissaDigits);\n    var intArray = new Int32Array(data.length);\n\n    for (var i = 0, n = data.length; i < n; i++) {\n      intArray[i] = Math.round(multiplier * data[i]); // TODO: enable this again?\n      // const v = Math.round(multiplier * data[i]);\n      // if (Math.abs(Math.round(v) / multiplier - intArray[i] / multiplier) > delta) {\n      //     return E.by(E.byteArray);\n      // }\n    }\n\n    var sizes = IntClassifier.getSize(intArray);\n    var size = sizes[0];\n    var fp = E.by(E.fixedPoint(multiplier));\n\n    switch (size.kind) {\n      case 'pack':\n        return fp.and(E.integerPacking);\n\n      case 'rle':\n        return fp.and(E.runLength).and(E.integerPacking);\n\n      case 'delta':\n        return fp.and(E.delta).and(E.integerPacking);\n\n      case 'delta-rle':\n        return fp.and(E.delta).and(E.runLength).and(E.integerPacking);\n    }\n\n    throw new Error('should not happen :)');\n  }\n\n  FloatClassifier.classify = classify;\n\n  function getMultiplier(mantissaDigits) {\n    var m = 1;\n\n    for (var i = 0; i < mantissaDigits; i++) m *= 10;\n\n    return m;\n  }\n})(FloatClassifier || (FloatClassifier = {}));","map":{"version":3,"sources":["../../../../src/mol-io/common/binary-cif/classifier.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ArrayEncoding as E } from './array-encoder';\r\nimport { getArrayDigitCount } from '../../../mol-util/number';\r\nexport function classifyIntArray(xs) {\r\n    return IntClassifier.classify(xs);\r\n}\r\nexport function classifyFloatArray(xs) {\r\n    return FloatClassifier.classify(xs);\r\n}\r\nvar IntClassifier;\r\n(function (IntClassifier) {\r\n    function packSize(value, upperLimit) {\r\n        return value >= 0\r\n            ? Math.ceil((value + 1) / upperLimit)\r\n            : Math.ceil((value + 1) / (-upperLimit - 1));\r\n    }\r\n    function getInfo(data) {\r\n        var signed = false;\r\n        for (var i = 0, n = data.length; i < n; i++) {\r\n            if (data[i] < 0) {\r\n                signed = true;\r\n                break;\r\n            }\r\n        }\r\n        return signed ? { signed: signed, limit8: 0x7F, limit16: 0x7FFF } : { signed: signed, limit8: 0xFF, limit16: 0xFFFF };\r\n    }\r\n    function SizeInfo() { return { pack8: 0, pack16: 0, count: 0 }; }\r\n    ;\r\n    function incSize(_a, info, value) {\r\n        var limit8 = _a.limit8, limit16 = _a.limit16;\r\n        info.pack8 += packSize(value, limit8);\r\n        info.pack16 += packSize(value, limit16);\r\n        info.count += 1;\r\n    }\r\n    function incSizeSigned(info, value) {\r\n        info.pack8 += packSize(value, 0x7F);\r\n        info.pack16 += packSize(value, 0x7FFF);\r\n        info.count += 1;\r\n    }\r\n    function byteSize(info) {\r\n        if (info.count * 4 < info.pack16 * 2)\r\n            return { length: info.count * 4, elem: 4 };\r\n        if (info.pack16 * 2 < info.pack8)\r\n            return { length: info.pack16 * 2, elem: 2 };\r\n        return { length: info.pack8, elem: 1 };\r\n    }\r\n    function packingSize(data, info) {\r\n        var size = SizeInfo();\r\n        for (var i = 0, n = data.length; i < n; i++) {\r\n            incSize(info, size, data[i]);\r\n        }\r\n        return __assign(__assign({}, byteSize(size)), { kind: 'pack' });\r\n    }\r\n    function deltaSize(data, info) {\r\n        var size = SizeInfo();\r\n        var prev = data[0];\r\n        for (var i = 1, n = data.length; i < n; i++) {\r\n            incSizeSigned(size, data[i] - prev);\r\n            prev = data[i];\r\n        }\r\n        return __assign(__assign({}, byteSize(size)), { kind: 'delta' });\r\n    }\r\n    function rleSize(data, info) {\r\n        var size = SizeInfo();\r\n        var run = 1;\r\n        for (var i = 1, n = data.length; i < n; i++) {\r\n            if (data[i - 1] !== data[i]) {\r\n                incSize(info, size, data[i - 1]);\r\n                incSize(info, size, run);\r\n                run = 1;\r\n            }\r\n            else {\r\n                run++;\r\n            }\r\n        }\r\n        incSize(info, size, data[data.length - 1]);\r\n        incSize(info, size, run);\r\n        return __assign(__assign({}, byteSize(size)), { kind: 'rle' });\r\n    }\r\n    function deltaRleSize(data, info) {\r\n        var size = SizeInfo();\r\n        var run = 1, prev = 0, prevValue = 0;\r\n        for (var i = 1, n = data.length; i < n; i++) {\r\n            var v = data[i] - prev;\r\n            if (prevValue !== v) {\r\n                incSizeSigned(size, prevValue);\r\n                incSizeSigned(size, run);\r\n                run = 1;\r\n            }\r\n            else {\r\n                run++;\r\n            }\r\n            prevValue = v;\r\n            prev = data[i];\r\n        }\r\n        incSizeSigned(size, prevValue);\r\n        incSizeSigned(size, run);\r\n        return __assign(__assign({}, byteSize(size)), { kind: 'delta-rle' });\r\n    }\r\n    function getSize(data) {\r\n        var info = getInfo(data);\r\n        var sizes = [packingSize(data, info), rleSize(data, info), deltaSize(data, info), deltaRleSize(data, info)];\r\n        sizes.sort(function (a, b) { return a.length - b.length; });\r\n        return sizes;\r\n    }\r\n    IntClassifier.getSize = getSize;\r\n    function classify(data) {\r\n        if (data.length < 2)\r\n            return E.by(E.byteArray);\r\n        var sizes = getSize(data);\r\n        var size = sizes[0];\r\n        switch (size.kind) {\r\n            case 'pack': return E.by(E.integerPacking);\r\n            case 'rle': return E.by(E.runLength).and(E.integerPacking);\r\n            case 'delta': return E.by(E.delta).and(E.integerPacking);\r\n            case 'delta-rle': return E.by(E.delta).and(E.runLength).and(E.integerPacking);\r\n        }\r\n        throw new Error('should not happen :)');\r\n    }\r\n    IntClassifier.classify = classify;\r\n})(IntClassifier || (IntClassifier = {}));\r\nvar FloatClassifier;\r\n(function (FloatClassifier) {\r\n    var delta = 1e-6;\r\n    function classify(data) {\r\n        var maxDigits = 4;\r\n        var _a = getArrayDigitCount(data, maxDigits, delta), mantissaDigits = _a.mantissaDigits, integerDigits = _a.integerDigits;\r\n        // TODO: better check for overflows here?\r\n        if (mantissaDigits < 0 || mantissaDigits + integerDigits > 10)\r\n            return E.by(E.byteArray);\r\n        // TODO: this needs a conversion to Int?Array?\r\n        if (mantissaDigits === 0)\r\n            return IntClassifier.classify(data);\r\n        var multiplier = getMultiplier(mantissaDigits);\r\n        var intArray = new Int32Array(data.length);\r\n        for (var i = 0, n = data.length; i < n; i++) {\r\n            intArray[i] = Math.round(multiplier * data[i]);\r\n            // TODO: enable this again?\r\n            // const v = Math.round(multiplier * data[i]);\r\n            // if (Math.abs(Math.round(v) / multiplier - intArray[i] / multiplier) > delta) {\r\n            //     return E.by(E.byteArray);\r\n            // }\r\n        }\r\n        var sizes = IntClassifier.getSize(intArray);\r\n        var size = sizes[0];\r\n        var fp = E.by(E.fixedPoint(multiplier));\r\n        switch (size.kind) {\r\n            case 'pack': return fp.and(E.integerPacking);\r\n            case 'rle': return fp.and(E.runLength).and(E.integerPacking);\r\n            case 'delta': return fp.and(E.delta).and(E.integerPacking);\r\n            case 'delta-rle': return fp.and(E.delta).and(E.runLength).and(E.integerPacking);\r\n        }\r\n        throw new Error('should not happen :)');\r\n    }\r\n    FloatClassifier.classify = classify;\r\n    function getMultiplier(mantissaDigits) {\r\n        var m = 1;\r\n        for (var i = 0; i < mantissaDigits; i++)\r\n            m *= 10;\r\n        return m;\r\n    }\r\n})(FloatClassifier || (FloatClassifier = {}));\r\n//# sourceMappingURL=classifier.js.map"]},"metadata":{},"sourceType":"module"}