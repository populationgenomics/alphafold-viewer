{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3, Mat4 } from '../../linear-algebra';\nimport { SpacegroupName, TransformData, GroupData, getSpacegroupIndex, OperatorData, SpacegroupNumber } from './tables';\nimport { SymmetryOperator } from '../../geometry';\nvar SpacegroupCell;\n\n(function (SpacegroupCell) {\n  /** Create a 'P 1' with cellsize [1, 1, 1] */\n  SpacegroupCell.Zero = create('P 1', Vec3.create(1, 1, 1), Vec3.create(Math.PI / 2, Math.PI / 2, Math.PI / 2));\n  /** True if 'P 1' with cellsize [1, 1, 1] */\n\n  function isZero(cell) {\n    if (!cell) return true;\n    return cell.index === 0 && cell.size[0] === 1 && cell.size[1] === 1 && cell.size[1] === 1;\n  }\n\n  SpacegroupCell.isZero = isZero;\n  /** Returns Zero cell if the spacegroup does not exist */\n\n  function create(nameOrNumber, size, anglesInRadians) {\n    var index = getSpacegroupIndex(nameOrNumber);\n\n    if (index < 0) {\n      console.warn(\"Unknown spacegroup '\" + nameOrNumber + \"', returning a 'P 1' with cellsize [1, 1, 1]\");\n      return SpacegroupCell.Zero;\n    }\n\n    var volume = size[0] * size[1] * size[2];\n    var alpha = anglesInRadians[0];\n    var beta = anglesInRadians[1];\n    var gamma = anglesInRadians[2];\n    var xScale = size[0],\n        yScale = size[1],\n        zScale = size[2];\n    var z1 = Math.cos(beta);\n    var z2 = (Math.cos(alpha) - Math.cos(beta) * Math.cos(gamma)) / Math.sin(gamma);\n    var z3 = Math.sqrt(1.0 - z1 * z1 - z2 * z2);\n    var x = [xScale, 0.0, 0.0];\n    var y = [Math.cos(gamma) * yScale, Math.sin(gamma) * yScale, 0.0];\n    var z = [z1 * zScale, z2 * zScale, z3 * zScale];\n    var fromFractional = Mat4.ofRows([[x[0], y[0], z[0], 0], [0, y[1], z[1], 0], [0, 0, z[2], 0], [0, 0, 0, 1.0]]);\n    var toFractional = Mat4.invert(Mat4.zero(), fromFractional);\n    return {\n      index: index,\n      size: size,\n      volume: volume,\n      anglesInRadians: anglesInRadians,\n      toFractional: toFractional,\n      fromFractional: fromFractional\n    };\n  }\n\n  SpacegroupCell.create = create;\n})(SpacegroupCell || (SpacegroupCell = {}));\n\nvar Spacegroup;\n\n(function (Spacegroup) {\n  /** P1 with [1, 1, 1] cell */\n  Spacegroup.ZeroP1 = create(SpacegroupCell.Zero);\n\n  function create(cell) {\n    var operators = GroupData[cell.index].map(function (i) {\n      return getOperatorMatrix(OperatorData[i]);\n    });\n    var name = SpacegroupName[cell.index];\n    var num = SpacegroupNumber[cell.index];\n    return {\n      name: name,\n      num: num,\n      cell: cell,\n      operators: operators\n    };\n  }\n\n  Spacegroup.create = create;\n\n  var _ijkVec = Vec3();\n\n  var _tempMat = Mat4();\n\n  function setOperatorMatrix(spacegroup, index, i, j, k, target) {\n    Vec3.set(_ijkVec, i, j, k);\n    Mat4.fromTranslation(_tempMat, _ijkVec);\n    return Mat4.mul(target, Mat4.mul(target, Mat4.mul(target, spacegroup.cell.fromFractional, _tempMat), spacegroup.operators[index]), spacegroup.cell.toFractional);\n  }\n\n  Spacegroup.setOperatorMatrix = setOperatorMatrix;\n\n  function getSymmetryOperator(spacegroup, spgrOp, i, j, k) {\n    var operator = setOperatorMatrix(spacegroup, spgrOp, i, j, k, Mat4.zero());\n    return SymmetryOperator.create(spgrOp + 1 + \"_\" + (5 + i) + (5 + j) + (5 + k), operator, {\n      hkl: Vec3.create(i, j, k),\n      spgrOp: spgrOp\n    });\n  }\n\n  Spacegroup.getSymmetryOperator = getSymmetryOperator;\n\n  var _translationRef = Vec3();\n\n  var _translationRefSymop = Vec3();\n\n  var _translationRefOffset = Vec3();\n\n  var _translationSymop = Vec3();\n  /**\r\n   * Get Symmetry operator for transformation around the given\r\n   * reference point `ref` in fractional coordinates\r\n   */\n\n\n  function getSymmetryOperatorRef(spacegroup, spgrOp, i, j, k, ref) {\n    var operator = Mat4.zero();\n    Vec3.set(_ijkVec, i, j, k);\n    Vec3.floor(_translationRef, ref);\n    Mat4.copy(operator, spacegroup.operators[spgrOp]);\n    Vec3.floor(_translationRefSymop, Vec3.transformMat4(_translationRefSymop, ref, operator));\n    Mat4.getTranslation(_translationSymop, operator);\n    Vec3.sub(_translationSymop, _translationSymop, _translationRefSymop);\n    Vec3.add(_translationSymop, _translationSymop, _translationRef);\n    Vec3.add(_translationSymop, _translationSymop, _ijkVec);\n    Mat4.setTranslation(operator, _translationSymop);\n    Mat4.mul(operator, spacegroup.cell.fromFractional, operator);\n    Mat4.mul(operator, operator, spacegroup.cell.toFractional);\n    Vec3.sub(_translationRefOffset, _translationRefSymop, _translationRef);\n\n    var _i = i - _translationRefOffset[0];\n\n    var _j = j - _translationRefOffset[1];\n\n    var _k = k - _translationRefOffset[2]; // const operator = setOperatorMatrixRef(spacegroup, spgrOp, i, j, k, ref, Mat4.zero());\n\n\n    return SymmetryOperator.create(spgrOp + 1 + \"_\" + (5 + _i) + (5 + _j) + (5 + _k), operator, {\n      hkl: Vec3.create(_i, _j, _k),\n      spgrOp: spgrOp\n    });\n  }\n\n  Spacegroup.getSymmetryOperatorRef = getSymmetryOperatorRef;\n\n  function getOperatorMatrix(ids) {\n    var r1 = TransformData[ids[0]];\n    var r2 = TransformData[ids[1]];\n    var r3 = TransformData[ids[2]];\n    return Mat4.ofRows([r1, r2, r3, [0, 0, 0, 1]]);\n  }\n\n  function getOperatorXyz(op) {\n    return [formatElement(getRotation(op[0], op[4], op[8]), getShift(op[12])), formatElement(getRotation(op[1], op[5], op[9]), getShift(op[13])), formatElement(getRotation(op[2], op[6], op[10]), getShift(op[14]))].join(',');\n  }\n\n  Spacegroup.getOperatorXyz = getOperatorXyz;\n\n  function getRotation(x, y, z) {\n    var r = [];\n    if (x > 0) r.push('+X');else if (x < 0) r.push('-X');\n    if (y > 0) r.push('+Y');else if (y < 0) r.push('-Y');\n    if (z > 0) r.push('+Z');else if (z < 0) r.push('-Z');\n\n    if (r.length === 1) {\n      return r[0].charAt(0) === '+' ? r[0].substr(1) : r[0];\n    }\n\n    if (r.length === 2) {\n      var s0 = r[0].charAt(0);\n      var s1 = r[1].charAt(0);\n      if (s0 === '+') return \"\" + r[0].substr(1) + r[1];\n      if (s1 === '+') return \"\" + r[1].substr(1) + r[0];\n    }\n\n    throw new Error(\"unknown rotation '\" + r + \"', \" + x + \" \" + y + \" \" + z);\n  }\n\n  function getShift(s) {\n    switch (s) {\n      case 1 / 2:\n        return '1/2';\n\n      case 1 / 4:\n        return '1/4';\n\n      case 3 / 4:\n        return '3/4';\n\n      case 1 / 3:\n        return '1/3';\n\n      case 2 / 3:\n        return '2/3';\n\n      case 1 / 6:\n        return '1/6';\n\n      case 5 / 6:\n        return '5/6';\n    }\n\n    return '';\n  }\n\n  function formatElement(rotation, shift) {\n    if (shift === '') return rotation;\n    if (rotation.length > 2) return rotation + \"+\" + shift;\n    return rotation.charAt(0) === '-' ? \"\" + shift + rotation : shift + \"+\" + rotation;\n  }\n})(Spacegroup || (Spacegroup = {}));\n\nexport { Spacegroup, SpacegroupCell };","map":{"version":3,"sources":["../../../../src/mol-math/geometry/spacegroup/construction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3, Mat4 } from '../../linear-algebra';\r\nimport { SpacegroupName, TransformData, GroupData, getSpacegroupIndex, OperatorData, SpacegroupNumber } from './tables';\r\nimport { SymmetryOperator } from '../../geometry';\r\nvar SpacegroupCell;\r\n(function (SpacegroupCell) {\r\n    /** Create a 'P 1' with cellsize [1, 1, 1] */\r\n    SpacegroupCell.Zero = create('P 1', Vec3.create(1, 1, 1), Vec3.create(Math.PI / 2, Math.PI / 2, Math.PI / 2));\r\n    /** True if 'P 1' with cellsize [1, 1, 1] */\r\n    function isZero(cell) {\r\n        if (!cell)\r\n            return true;\r\n        return cell.index === 0 && cell.size[0] === 1 && cell.size[1] === 1 && cell.size[1] === 1;\r\n    }\r\n    SpacegroupCell.isZero = isZero;\r\n    /** Returns Zero cell if the spacegroup does not exist */\r\n    function create(nameOrNumber, size, anglesInRadians) {\r\n        var index = getSpacegroupIndex(nameOrNumber);\r\n        if (index < 0) {\r\n            console.warn(\"Unknown spacegroup '\" + nameOrNumber + \"', returning a 'P 1' with cellsize [1, 1, 1]\");\r\n            return SpacegroupCell.Zero;\r\n        }\r\n        var volume = size[0] * size[1] * size[2];\r\n        var alpha = anglesInRadians[0];\r\n        var beta = anglesInRadians[1];\r\n        var gamma = anglesInRadians[2];\r\n        var xScale = size[0], yScale = size[1], zScale = size[2];\r\n        var z1 = Math.cos(beta);\r\n        var z2 = (Math.cos(alpha) - Math.cos(beta) * Math.cos(gamma)) / Math.sin(gamma);\r\n        var z3 = Math.sqrt(1.0 - z1 * z1 - z2 * z2);\r\n        var x = [xScale, 0.0, 0.0];\r\n        var y = [Math.cos(gamma) * yScale, Math.sin(gamma) * yScale, 0.0];\r\n        var z = [z1 * zScale, z2 * zScale, z3 * zScale];\r\n        var fromFractional = Mat4.ofRows([\r\n            [x[0], y[0], z[0], 0],\r\n            [0, y[1], z[1], 0],\r\n            [0, 0, z[2], 0],\r\n            [0, 0, 0, 1.0]\r\n        ]);\r\n        var toFractional = Mat4.invert(Mat4.zero(), fromFractional);\r\n        return { index: index, size: size, volume: volume, anglesInRadians: anglesInRadians, toFractional: toFractional, fromFractional: fromFractional };\r\n    }\r\n    SpacegroupCell.create = create;\r\n})(SpacegroupCell || (SpacegroupCell = {}));\r\nvar Spacegroup;\r\n(function (Spacegroup) {\r\n    /** P1 with [1, 1, 1] cell */\r\n    Spacegroup.ZeroP1 = create(SpacegroupCell.Zero);\r\n    function create(cell) {\r\n        var operators = GroupData[cell.index].map(function (i) { return getOperatorMatrix(OperatorData[i]); });\r\n        var name = SpacegroupName[cell.index];\r\n        var num = SpacegroupNumber[cell.index];\r\n        return { name: name, num: num, cell: cell, operators: operators };\r\n    }\r\n    Spacegroup.create = create;\r\n    var _ijkVec = Vec3();\r\n    var _tempMat = Mat4();\r\n    function setOperatorMatrix(spacegroup, index, i, j, k, target) {\r\n        Vec3.set(_ijkVec, i, j, k);\r\n        Mat4.fromTranslation(_tempMat, _ijkVec);\r\n        return Mat4.mul(target, Mat4.mul(target, Mat4.mul(target, spacegroup.cell.fromFractional, _tempMat), spacegroup.operators[index]), spacegroup.cell.toFractional);\r\n    }\r\n    Spacegroup.setOperatorMatrix = setOperatorMatrix;\r\n    function getSymmetryOperator(spacegroup, spgrOp, i, j, k) {\r\n        var operator = setOperatorMatrix(spacegroup, spgrOp, i, j, k, Mat4.zero());\r\n        return SymmetryOperator.create(spgrOp + 1 + \"_\" + (5 + i) + (5 + j) + (5 + k), operator, { hkl: Vec3.create(i, j, k), spgrOp: spgrOp });\r\n    }\r\n    Spacegroup.getSymmetryOperator = getSymmetryOperator;\r\n    var _translationRef = Vec3();\r\n    var _translationRefSymop = Vec3();\r\n    var _translationRefOffset = Vec3();\r\n    var _translationSymop = Vec3();\r\n    /**\r\n     * Get Symmetry operator for transformation around the given\r\n     * reference point `ref` in fractional coordinates\r\n     */\r\n    function getSymmetryOperatorRef(spacegroup, spgrOp, i, j, k, ref) {\r\n        var operator = Mat4.zero();\r\n        Vec3.set(_ijkVec, i, j, k);\r\n        Vec3.floor(_translationRef, ref);\r\n        Mat4.copy(operator, spacegroup.operators[spgrOp]);\r\n        Vec3.floor(_translationRefSymop, Vec3.transformMat4(_translationRefSymop, ref, operator));\r\n        Mat4.getTranslation(_translationSymop, operator);\r\n        Vec3.sub(_translationSymop, _translationSymop, _translationRefSymop);\r\n        Vec3.add(_translationSymop, _translationSymop, _translationRef);\r\n        Vec3.add(_translationSymop, _translationSymop, _ijkVec);\r\n        Mat4.setTranslation(operator, _translationSymop);\r\n        Mat4.mul(operator, spacegroup.cell.fromFractional, operator);\r\n        Mat4.mul(operator, operator, spacegroup.cell.toFractional);\r\n        Vec3.sub(_translationRefOffset, _translationRefSymop, _translationRef);\r\n        var _i = i - _translationRefOffset[0];\r\n        var _j = j - _translationRefOffset[1];\r\n        var _k = k - _translationRefOffset[2];\r\n        // const operator = setOperatorMatrixRef(spacegroup, spgrOp, i, j, k, ref, Mat4.zero());\r\n        return SymmetryOperator.create(spgrOp + 1 + \"_\" + (5 + _i) + (5 + _j) + (5 + _k), operator, { hkl: Vec3.create(_i, _j, _k), spgrOp: spgrOp });\r\n    }\r\n    Spacegroup.getSymmetryOperatorRef = getSymmetryOperatorRef;\r\n    function getOperatorMatrix(ids) {\r\n        var r1 = TransformData[ids[0]];\r\n        var r2 = TransformData[ids[1]];\r\n        var r3 = TransformData[ids[2]];\r\n        return Mat4.ofRows([r1, r2, r3, [0, 0, 0, 1]]);\r\n    }\r\n    function getOperatorXyz(op) {\r\n        return [\r\n            formatElement(getRotation(op[0], op[4], op[8]), getShift(op[12])),\r\n            formatElement(getRotation(op[1], op[5], op[9]), getShift(op[13])),\r\n            formatElement(getRotation(op[2], op[6], op[10]), getShift(op[14]))\r\n        ].join(',');\r\n    }\r\n    Spacegroup.getOperatorXyz = getOperatorXyz;\r\n    function getRotation(x, y, z) {\r\n        var r = [];\r\n        if (x > 0)\r\n            r.push('+X');\r\n        else if (x < 0)\r\n            r.push('-X');\r\n        if (y > 0)\r\n            r.push('+Y');\r\n        else if (y < 0)\r\n            r.push('-Y');\r\n        if (z > 0)\r\n            r.push('+Z');\r\n        else if (z < 0)\r\n            r.push('-Z');\r\n        if (r.length === 1) {\r\n            return r[0].charAt(0) === '+' ? r[0].substr(1) : r[0];\r\n        }\r\n        if (r.length === 2) {\r\n            var s0 = r[0].charAt(0);\r\n            var s1 = r[1].charAt(0);\r\n            if (s0 === '+')\r\n                return \"\" + r[0].substr(1) + r[1];\r\n            if (s1 === '+')\r\n                return \"\" + r[1].substr(1) + r[0];\r\n        }\r\n        throw new Error(\"unknown rotation '\" + r + \"', \" + x + \" \" + y + \" \" + z);\r\n    }\r\n    function getShift(s) {\r\n        switch (s) {\r\n            case 1 / 2: return '1/2';\r\n            case 1 / 4: return '1/4';\r\n            case 3 / 4: return '3/4';\r\n            case 1 / 3: return '1/3';\r\n            case 2 / 3: return '2/3';\r\n            case 1 / 6: return '1/6';\r\n            case 5 / 6: return '5/6';\r\n        }\r\n        return '';\r\n    }\r\n    function formatElement(rotation, shift) {\r\n        if (shift === '')\r\n            return rotation;\r\n        if (rotation.length > 2)\r\n            return rotation + \"+\" + shift;\r\n        return rotation.charAt(0) === '-' ? \"\" + shift + rotation : shift + \"+\" + rotation;\r\n    }\r\n})(Spacegroup || (Spacegroup = {}));\r\nexport { Spacegroup, SpacegroupCell };\r\n//# sourceMappingURL=construction.js.map"]},"metadata":{},"sourceType":"module"}