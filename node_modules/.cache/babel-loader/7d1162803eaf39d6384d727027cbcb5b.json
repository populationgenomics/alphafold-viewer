{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Vec3, Vec4 } from '../../mol-math/linear-algebra';\nexport { Viewport };\n\nfunction Viewport() {\n  return Viewport.zero();\n}\n\n(function (Viewport) {\n  function zero() {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  Viewport.zero = zero;\n\n  function create(x, y, width, height) {\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }\n\n  Viewport.create = create;\n\n  function clone(viewport) {\n    return __assign({}, viewport);\n  }\n\n  Viewport.clone = clone;\n\n  function copy(target, source) {\n    return Object.assign(target, source);\n  }\n\n  Viewport.copy = copy;\n\n  function set(viewport, x, y, width, height) {\n    viewport.x = x;\n    viewport.y = y;\n    viewport.width = width;\n    viewport.height = height;\n    return viewport;\n  }\n\n  Viewport.set = set;\n\n  function toVec4(v4, viewport) {\n    v4[0] = viewport.x;\n    v4[1] = viewport.y;\n    v4[2] = viewport.width;\n    v4[3] = viewport.height;\n    return v4;\n  }\n\n  Viewport.toVec4 = toVec4;\n\n  function equals(a, b) {\n    return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n  }\n\n  Viewport.equals = equals;\n})(Viewport || (Viewport = {})); //\n\n\nvar tmpVec4 = Vec4();\n/** Transform point into 2D window coordinates. */\n\nexport function cameraProject(out, point, viewport, projectionView) {\n  var x = viewport.x,\n      y = viewport.y,\n      width = viewport.width,\n      height = viewport.height; // clip space -> NDC -> window coordinates, implicit 1.0 for w component\n\n  Vec4.set(tmpVec4, point[0], point[1], point[2], 1.0); // transform into clip space\n\n  Vec4.transformMat4(tmpVec4, tmpVec4, projectionView); // transform into NDC\n\n  var w = tmpVec4[3];\n\n  if (w !== 0) {\n    tmpVec4[0] /= w;\n    tmpVec4[1] /= w;\n    tmpVec4[2] /= w;\n  } // transform into window coordinates, set fourth component to 1 / clip.w as in gl_FragCoord.w\n\n\n  out[0] = (tmpVec4[0] + 1) * width * 0.5 + x;\n  out[1] = (1 - tmpVec4[1]) * height * 0.5 + y; // flip Y\n\n  out[2] = (tmpVec4[2] + 1) * 0.5;\n  out[3] = w === 0 ? 0 : 1 / w;\n  return out;\n}\n/**\r\n * Transform point from screen space to 3D coordinates.\r\n * The point must have `x` and `y` set to 2D window coordinates\r\n * and `z` between 0 (near) and 1 (far); the optional `w` is not used.\r\n */\n\nexport function cameraUnproject(out, point, viewport, inverseProjectionView) {\n  var x = viewport.x,\n      y = viewport.y,\n      width = viewport.width,\n      height = viewport.height;\n  var px = point[0] - x;\n  var py = height - point[1] - 1 - y;\n  var pz = point[2];\n  out[0] = 2 * px / width - 1;\n  out[1] = 2 * py / height - 1;\n  out[2] = 2 * pz - 1;\n  return Vec3.transformMat4(out, out, inverseProjectionView);\n}","map":{"version":3,"sources":["../../../src/mol-canvas3d/camera/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Vec3, Vec4 } from '../../mol-math/linear-algebra';\r\nexport { Viewport };\r\nfunction Viewport() {\r\n    return Viewport.zero();\r\n}\r\n(function (Viewport) {\r\n    function zero() {\r\n        return { x: 0, y: 0, width: 0, height: 0 };\r\n    }\r\n    Viewport.zero = zero;\r\n    function create(x, y, width, height) {\r\n        return { x: x, y: y, width: width, height: height };\r\n    }\r\n    Viewport.create = create;\r\n    function clone(viewport) {\r\n        return __assign({}, viewport);\r\n    }\r\n    Viewport.clone = clone;\r\n    function copy(target, source) {\r\n        return Object.assign(target, source);\r\n    }\r\n    Viewport.copy = copy;\r\n    function set(viewport, x, y, width, height) {\r\n        viewport.x = x;\r\n        viewport.y = y;\r\n        viewport.width = width;\r\n        viewport.height = height;\r\n        return viewport;\r\n    }\r\n    Viewport.set = set;\r\n    function toVec4(v4, viewport) {\r\n        v4[0] = viewport.x;\r\n        v4[1] = viewport.y;\r\n        v4[2] = viewport.width;\r\n        v4[3] = viewport.height;\r\n        return v4;\r\n    }\r\n    Viewport.toVec4 = toVec4;\r\n    function equals(a, b) {\r\n        return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\r\n    }\r\n    Viewport.equals = equals;\r\n})(Viewport || (Viewport = {}));\r\n//\r\nvar tmpVec4 = Vec4();\r\n/** Transform point into 2D window coordinates. */\r\nexport function cameraProject(out, point, viewport, projectionView) {\r\n    var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;\r\n    // clip space -> NDC -> window coordinates, implicit 1.0 for w component\r\n    Vec4.set(tmpVec4, point[0], point[1], point[2], 1.0);\r\n    // transform into clip space\r\n    Vec4.transformMat4(tmpVec4, tmpVec4, projectionView);\r\n    // transform into NDC\r\n    var w = tmpVec4[3];\r\n    if (w !== 0) {\r\n        tmpVec4[0] /= w;\r\n        tmpVec4[1] /= w;\r\n        tmpVec4[2] /= w;\r\n    }\r\n    // transform into window coordinates, set fourth component to 1 / clip.w as in gl_FragCoord.w\r\n    out[0] = (tmpVec4[0] + 1) * width * 0.5 + x;\r\n    out[1] = (1 - tmpVec4[1]) * height * 0.5 + y; // flip Y\r\n    out[2] = (tmpVec4[2] + 1) * 0.5;\r\n    out[3] = w === 0 ? 0 : 1 / w;\r\n    return out;\r\n}\r\n/**\r\n * Transform point from screen space to 3D coordinates.\r\n * The point must have `x` and `y` set to 2D window coordinates\r\n * and `z` between 0 (near) and 1 (far); the optional `w` is not used.\r\n */\r\nexport function cameraUnproject(out, point, viewport, inverseProjectionView) {\r\n    var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;\r\n    var px = point[0] - x;\r\n    var py = (height - point[1] - 1) - y;\r\n    var pz = point[2];\r\n    out[0] = (2 * px) / width - 1;\r\n    out[1] = (2 * py) / height - 1;\r\n    out[2] = 2 * pz - 1;\r\n    return Vec3.transformMat4(out, out, inverseProjectionView);\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}