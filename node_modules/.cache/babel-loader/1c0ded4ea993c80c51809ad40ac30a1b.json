{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { QueryContext, StructureSelection, StructureProperties, StructureElement } from '../../mol-model/structure';\nimport { NucleicBackboneAtoms, ProteinBackboneAtoms, AminoAcidNamesL, RnaBaseNames, DnaBaseNames, WaterNames } from '../../mol-model/structure/model/types';\nimport { MolScriptBuilder as MS } from '../../mol-script/language/builder';\nimport { compile } from '../../mol-script/runtime/query/compiler';\nimport { SetUtils } from '../../mol-util/set';\nimport { StateTransforms } from '../transforms';\nimport { ElementNames } from '../../mol-model/structure/model/properties/atomic/types';\nexport var StructureSelectionCategory;\n\n(function (StructureSelectionCategory) {\n  StructureSelectionCategory[\"Type\"] = \"Type\";\n  StructureSelectionCategory[\"Structure\"] = \"Structure Property\";\n  StructureSelectionCategory[\"Atom\"] = \"Atom Property\";\n  StructureSelectionCategory[\"Bond\"] = \"Bond Property\";\n  StructureSelectionCategory[\"Residue\"] = \"Residue Property\";\n  StructureSelectionCategory[\"AminoAcid\"] = \"Amino Acid\";\n  StructureSelectionCategory[\"NucleicBase\"] = \"Nucleic Base\";\n  StructureSelectionCategory[\"Manipulate\"] = \"Manipulate Selection\";\n  StructureSelectionCategory[\"Validation\"] = \"Validation\";\n  StructureSelectionCategory[\"Misc\"] = \"Miscellaneous\";\n  StructureSelectionCategory[\"Internal\"] = \"Internal\";\n})(StructureSelectionCategory || (StructureSelectionCategory = {}));\n\nexport { StructureSelectionQuery };\n\nfunction StructureSelectionQuery(label, expression, props) {\n  var _a;\n\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _query;\n\n  return {\n    label: label,\n    expression: expression,\n    description: props.description || '',\n    category: (_a = props.category) !== null && _a !== void 0 ? _a : StructureSelectionCategory.Misc,\n    isHidden: !!props.isHidden,\n    priority: props.priority || 0,\n    referencesCurrent: !!props.referencesCurrent,\n\n    get query() {\n      if (!_query) _query = compile(expression);\n      return _query;\n    },\n\n    ensureCustomProperties: props.ensureCustomProperties,\n    getSelection: function (plugin, runtime, structure) {\n      return __awaiter(this, void 0, void 0, function () {\n        var current, currentSelection;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              current = plugin.managers.structure.selection.getStructure(structure);\n              currentSelection = current ? StructureSelection.Sequence(structure, [current]) : StructureSelection.Empty(structure);\n              if (!props.ensureCustomProperties) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , props.ensureCustomProperties({\n                runtime: runtime,\n                assetManager: plugin.managers.asset\n              }, structure)];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              if (!_query) _query = compile(expression);\n              return [2\n              /*return*/\n              , _query(new QueryContext(structure, {\n                currentSelection: currentSelection\n              }))];\n          }\n        });\n      });\n    }\n  };\n}\n\nvar all = StructureSelectionQuery('All', MS.struct.generator.all(), {\n  category: '',\n  priority: 1000\n});\nvar current = StructureSelectionQuery('Current Selection', MS.internal.generator.current(), {\n  category: '',\n  referencesCurrent: true\n});\nvar polymer = StructureSelectionQuery('Polymer', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.logic.and([MS.core.rel.eq([MS.ammp('entityType'), 'polymer']), MS.core.str.match([MS.re('(polypeptide|cyclic-pseudo-peptide|peptide-like|nucleotide|peptide nucleic acid)', 'i'), MS.ammp('entitySubtype')])])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar trace = StructureSelectionQuery('Trace', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\n  'chain-test': MS.core.set.has([MS.set('sphere', 'gaussian'), MS.ammp('objectPrimitive')])\n})]), MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'atom-test': MS.core.set.has([MS.set('CA', 'P'), MS.ammp('label_atom_id')])\n})])])]), {\n  category: StructureSelectionCategory.Structure\n});\n\nvar _proteinEntityTest = MS.core.logic.and([MS.core.rel.eq([MS.ammp('entityType'), 'polymer']), MS.core.str.match([MS.re('(polypeptide|cyclic-pseudo-peptide|peptide-like)', 'i'), MS.ammp('entitySubtype')])]);\n\nvar _nucleiEntityTest = MS.core.logic.and([MS.core.rel.eq([MS.ammp('entityType'), 'polymer']), MS.core.str.match([MS.re('(nucleotide|peptide nucleic acid)', 'i'), MS.ammp('entitySubtype')])]);\n/**\r\n * this is to get non-polymer and peptide terminus components in polymer entities,\r\n * - non-polymer, e.g. PXZ in 4HIV or generally ACE\r\n * - carboxy terminus, e.g. FC0 in 4BP9, or ETA in 6DDE\r\n * - amino terminus, e.g. ARF in 3K4V, or 4MM in 3EGV\r\n */\n\n\nvar _nonPolymerResidueTest = MS.core.str.match([MS.re('non-polymer|(amino|carboxy) terminus|peptide-like', 'i'), MS.ammp('chemCompType')]); // TODO maybe pre-calculate backbone atom properties\n\n\nvar backbone = StructureSelectionQuery('Backbone', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])\n})]), MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _nucleiEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])\n})])])]), {\n  category: StructureSelectionCategory.Structure\n}); // TODO maybe pre-calculate sidechain atom property\n\nvar sidechain = StructureSelectionQuery('Sidechain', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.logic.or([MS.core.logic.not([MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])])])\n})]), MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _nucleiEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.logic.or([MS.core.logic.not([MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])])])\n})])])]), {\n  category: StructureSelectionCategory.Structure\n}); // TODO maybe pre-calculate sidechain atom property\n\nvar sidechainWithTrace = StructureSelectionQuery('Sidechain with Trace', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.logic.or([MS.core.logic.not([MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])]), MS.core.rel.eq([MS.ammp('label_atom_id'), 'CA']), MS.core.logic.and([MS.core.rel.eq([MS.ammp('auth_comp_id'), 'PRO']), MS.core.rel.eq([MS.ammp('label_atom_id'), 'N'])])])\n})]), MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _nucleiEntityTest,\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\n  'atom-test': MS.core.logic.or([MS.core.logic.not([MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])]), MS.core.rel.eq([MS.ammp('label_atom_id'), 'P'])])\n})])])]), {\n  category: StructureSelectionCategory.Structure\n});\nvar protein = StructureSelectionQuery('Protein', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar nucleic = StructureSelectionQuery('Nucleic', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _nucleiEntityTest\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar helix = StructureSelectionQuery('Helix', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest,\n  'residue-test': MS.core.flags.hasAny([MS.ammp('secondaryStructureFlags'), MS.core.type.bitflags([2\n  /* Helix */\n  ])])\n})]), {\n  category: StructureSelectionCategory.Structure\n});\nvar beta = StructureSelectionQuery('Beta Strand/Sheet', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': _proteinEntityTest,\n  'residue-test': MS.core.flags.hasAny([MS.ammp('secondaryStructureFlags'), MS.core.type.bitflags([4\n  /* Beta */\n  ])])\n})]), {\n  category: StructureSelectionCategory.Structure\n});\nvar water = StructureSelectionQuery('Water', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'water'])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar ion = StructureSelectionQuery('Ion', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entitySubtype'), 'ion'])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar lipid = StructureSelectionQuery('Lipid', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entitySubtype'), 'lipid'])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar branched = StructureSelectionQuery('Carbohydrate', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.logic.or([MS.core.rel.eq([MS.ammp('entityType'), 'branched']), MS.core.logic.and([MS.core.rel.eq([MS.ammp('entityType'), 'non-polymer']), MS.core.str.match([MS.re('oligosaccharide', 'i'), MS.ammp('entitySubtype')])])])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar branchedPlusConnected = StructureSelectionQuery('Carbohydrate with Connected', MS.struct.modifier.union([MS.struct.modifier.includeConnected({\n  0: branched.expression,\n  'layer-count': 1,\n  'as-whole-residues': true\n})]), {\n  category: StructureSelectionCategory.Internal,\n  isHidden: true\n});\nvar branchedConnectedOnly = StructureSelectionQuery('Connected to Carbohydrate', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: branchedPlusConnected.expression,\n  by: branched.expression\n})]), {\n  category: StructureSelectionCategory.Internal,\n  isHidden: true\n});\nvar ligand = StructureSelectionQuery('Ligand', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.logic.and([MS.core.logic.or([MS.core.rel.eq([MS.ammp('entityType'), 'non-polymer']), MS.core.rel.neq([MS.ammp('entityPrdId'), ''])]), MS.core.logic.not([MS.core.str.match([MS.re('(oligosaccharide|lipid|ion)', 'i'), MS.ammp('entitySubtype')])])]),\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.core.logic.not([MS.core.str.match([MS.re('saccharide', 'i'), MS.ammp('chemCompType')])])\n})]), MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': _nonPolymerResidueTest\n})])])]), {\n  category: StructureSelectionCategory.Type\n}); // don't include branched entities as they have their own link representation\n\nvar ligandPlusConnected = StructureSelectionQuery('Ligand with Connected', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: MS.struct.modifier.union([MS.struct.modifier.includeConnected({\n    0: ligand.expression,\n    'layer-count': 1,\n    'as-whole-residues': true,\n    'bond-test': MS.core.flags.hasAny([MS.struct.bondProperty.flags(), MS.core.type.bitflags([1\n    /* Covalent */\n    | 2\n    /* MetallicCoordination */\n    ])])\n  })]),\n  by: branched.expression\n})]), {\n  category: StructureSelectionCategory.Internal,\n  isHidden: true\n});\nvar ligandConnectedOnly = StructureSelectionQuery('Connected to Ligand', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: ligandPlusConnected.expression,\n  by: ligand.expression\n})]), {\n  category: StructureSelectionCategory.Internal,\n  isHidden: true\n}); // residues connected to ligands or branched entities\n\nvar connectedOnly = StructureSelectionQuery('Connected to Ligand or Carbohydrate', MS.struct.modifier.union([MS.struct.combinator.merge([branchedConnectedOnly.expression, ligandConnectedOnly.expression])]), {\n  category: StructureSelectionCategory.Internal,\n  isHidden: true\n});\nvar disulfideBridges = StructureSelectionQuery('Disulfide Bridges', MS.struct.modifier.union([MS.struct.combinator.merge([MS.struct.modifier.union([MS.struct.modifier.wholeResidues([MS.struct.filter.isConnectedTo({\n  0: MS.struct.generator.atomGroups({\n    'residue-test': MS.core.set.has([MS.set('CYS'), MS.ammp('auth_comp_id')]),\n    'atom-test': MS.core.set.has([MS.set('SG'), MS.ammp('label_atom_id')])\n  }),\n  target: MS.struct.generator.atomGroups({\n    'residue-test': MS.core.set.has([MS.set('CYS'), MS.ammp('auth_comp_id')]),\n    'atom-test': MS.core.set.has([MS.set('SG'), MS.ammp('label_atom_id')])\n  }),\n  'bond-test': true\n})])]), MS.struct.modifier.union([MS.struct.modifier.wholeResidues([MS.struct.modifier.union([MS.struct.generator.bondedAtomicPairs({\n  0: MS.core.flags.hasAny([MS.struct.bondProperty.flags(), MS.core.type.bitflags([8\n  /* Disulfide */\n  ])])\n})])])])])]), {\n  category: StructureSelectionCategory.Bond\n});\nvar nosBridges = StructureSelectionQuery('NOS Bridges', MS.struct.modifier.union([MS.struct.modifier.wholeResidues([MS.struct.filter.isConnectedTo({\n  0: MS.struct.generator.atomGroups({\n    'residue-test': MS.core.set.has([MS.set('CSO', 'LYS'), MS.ammp('auth_comp_id')]),\n    'atom-test': MS.core.set.has([MS.set('OD', 'NZ'), MS.ammp('label_atom_id')])\n  }),\n  target: MS.struct.generator.atomGroups({\n    'residue-test': MS.core.set.has([MS.set('CSO', 'LYS'), MS.ammp('auth_comp_id')]),\n    'atom-test': MS.core.set.has([MS.set('OD', 'NZ'), MS.ammp('label_atom_id')])\n  }),\n  'bond-test': true\n})])]), {\n  category: StructureSelectionCategory.Bond\n});\nvar nonStandardPolymer = StructureSelectionQuery('Non-standard Residues in Polymers', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\n  'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\n  'residue-test': MS.ammp('isNonStandard')\n})]), {\n  category: StructureSelectionCategory.Residue\n});\nvar coarse = StructureSelectionQuery('Coarse Elements', MS.struct.modifier.union([MS.struct.generator.atomGroups({\n  'chain-test': MS.core.set.has([MS.set('sphere', 'gaussian'), MS.ammp('objectPrimitive')])\n})]), {\n  category: StructureSelectionCategory.Type\n});\nvar ring = StructureSelectionQuery('Rings in Residues', MS.struct.modifier.union([MS.struct.generator.rings()]), {\n  category: StructureSelectionCategory.Residue\n});\nvar aromaticRing = StructureSelectionQuery('Aromatic Rings in Residues', MS.struct.modifier.union([MS.struct.generator.rings({\n  'only-aromatic': true\n})]), {\n  category: StructureSelectionCategory.Residue\n});\nvar surroundings = StructureSelectionQuery('Surrounding Residues (5 \\u212B) of Selection', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: MS.struct.modifier.includeSurroundings({\n    0: MS.internal.generator.current(),\n    radius: 5,\n    'as-whole-residues': true\n  }),\n  by: MS.internal.generator.current()\n})]), {\n  description: 'Select residues within 5 \\u212B of the current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar surroundingLigands = StructureSelectionQuery('Surrounding Ligands (5 \\u212B) of Selection', MS.struct.modifier.union([MS.struct.modifier.surroundingLigands({\n  0: MS.internal.generator.current(),\n  radius: 5,\n  'include-water': true\n})]), {\n  description: 'Select ligand components within 5 \\u212B of the current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar surroundingAtoms = StructureSelectionQuery('Surrounding Atoms (5 \\u212B) of Selection', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: MS.struct.modifier.includeSurroundings({\n    0: MS.internal.generator.current(),\n    radius: 5,\n    'as-whole-residues': false\n  }),\n  by: MS.internal.generator.current()\n})]), {\n  description: 'Select atoms within 5 \\u212B of the current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar complement = StructureSelectionQuery('Inverse / Complement of Selection', MS.struct.modifier.union([MS.struct.modifier.exceptBy({\n  0: MS.struct.generator.all(),\n  by: MS.internal.generator.current()\n})]), {\n  description: 'Select everything not in the current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar covalentlyBonded = StructureSelectionQuery('Residues Covalently Bonded to Selection', MS.struct.modifier.union([MS.struct.modifier.includeConnected({\n  0: MS.internal.generator.current(),\n  'layer-count': 1,\n  'as-whole-residues': true\n})]), {\n  description: 'Select residues covalently bonded to current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar covalentlyBondedComponent = StructureSelectionQuery('Covalently Bonded Component', MS.struct.modifier.union([MS.struct.modifier.includeConnected({\n  0: MS.internal.generator.current(),\n  'fixed-point': true\n})]), {\n  description: 'Select covalently bonded component based on current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar covalentlyOrMetallicBonded = StructureSelectionQuery('Residues with Cov. or Metallic Bond to Selection', MS.struct.modifier.union([MS.struct.modifier.includeConnected({\n  0: MS.internal.generator.current(),\n  'layer-count': 1,\n  'as-whole-residues': true,\n  'bond-test': MS.core.flags.hasAny([MS.struct.bondProperty.flags(), MS.core.type.bitflags([1\n  /* Covalent */\n  | 2\n  /* MetallicCoordination */\n  ])])\n})]), {\n  description: 'Select residues with covalent or metallic bond to current selection.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar wholeResidues = StructureSelectionQuery('Whole Residues of Selection', MS.struct.modifier.union([MS.struct.modifier.wholeResidues({\n  0: MS.internal.generator.current()\n})]), {\n  description: 'Expand current selection to whole residues.',\n  category: StructureSelectionCategory.Manipulate,\n  referencesCurrent: true\n});\nvar StandardAminoAcids = [[['HIS'], 'Histidine'], [['ARG'], 'Arginine'], [['LYS'], 'Lysine'], [['ILE'], 'Isoleucine'], [['PHE'], 'Phenylalanine'], [['LEU'], 'Leucine'], [['TRP'], 'Tryptophan'], [['ALA'], 'Alanine'], [['MET'], 'Methionine'], [['PRO'], 'Proline'], [['CYS'], 'Cysteine'], [['ASN'], 'Asparagine'], [['VAL'], 'Valine'], [['GLY'], 'Glycine'], [['SER'], 'Serine'], [['GLN'], 'Glutamine'], [['TYR'], 'Tyrosine'], [['ASP'], 'Aspartic Acid'], [['GLU'], 'Glutamic Acid'], [['THR'], 'Threonine'], [['SEC'], 'Selenocysteine'], [['PYL'], 'Pyrrolysine'], [['UNK'], 'Unknown']].sort(function (a, b) {\n  return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\n});\nvar StandardNucleicBases = [[['A', 'DA'], 'Adenosine'], [['C', 'DC'], 'Cytidine'], [['T', 'DT'], 'Thymidine'], [['G', 'DG'], 'Guanosine'], [['I', 'DI'], 'Inosine'], [['U', 'DU'], 'Uridine'], [['N', 'DN'], 'Unknown']].sort(function (a, b) {\n  return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\n});\nexport function ResidueQuery(_a, category, priority) {\n  var names = _a[0],\n      label = _a[1];\n\n  if (priority === void 0) {\n    priority = 0;\n  }\n\n  var description = names.length === 1 && !StandardResidues.has(names[0]) ? \"[\" + names[0] + \"] \" + label : label + \" (\" + names.join(', ') + \")\";\n  return StructureSelectionQuery(description, MS.struct.modifier.union([MS.struct.generator.atomGroups({\n    'residue-test': MS.core.set.has([MS.set.apply(MS, names), MS.ammp('auth_comp_id')])\n  })]), {\n    category: category,\n    priority: priority,\n    description: description\n  });\n}\nexport function ElementSymbolQuery(_a, category, priority) {\n  var names = _a[0],\n      label = _a[1];\n  var description = label + \" (\" + names.join(', ') + \")\";\n  return StructureSelectionQuery(description, MS.struct.modifier.union([MS.struct.generator.atomGroups({\n    'atom-test': MS.core.set.has([MS.set.apply(MS, names), MS.acp('elementSymbol')])\n  })]), {\n    category: category,\n    priority: priority,\n    description: description\n  });\n}\nexport function EntityDescriptionQuery(_a, category, priority) {\n  var names = _a[0],\n      label = _a[1];\n  var description = \"\" + label;\n  return StructureSelectionQuery(\"\" + label, MS.struct.modifier.union([MS.struct.generator.atomGroups({\n    'entity-test': MS.core.list.equal([MS.list.apply(MS, names), MS.ammp('entityDescription')])\n  })]), {\n    category: category,\n    priority: priority,\n    description: description\n  });\n}\nvar StandardResidues = SetUtils.unionMany(AminoAcidNamesL, RnaBaseNames, DnaBaseNames, WaterNames);\nexport function getElementQueries(structures) {\n  var uniqueElements = new Set();\n\n  for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\n    var structure = structures_1[_i];\n    structure.uniqueElementSymbols.forEach(function (e) {\n      return uniqueElements.add(e);\n    });\n  }\n\n  var queries = [];\n  uniqueElements.forEach(function (e) {\n    var label = ElementNames[e] || e;\n    queries.push(ElementSymbolQuery([[e], label], 'Element Symbol', 0));\n  });\n  return queries;\n}\nexport function getNonStandardResidueQueries(structures) {\n  var residueLabels = new Map();\n  var uniqueResidues = new Set();\n\n  for (var _i = 0, structures_2 = structures; _i < structures_2.length; _i++) {\n    var structure = structures_2[_i];\n    structure.uniqueResidueNames.forEach(function (r) {\n      return uniqueResidues.add(r);\n    });\n\n    var _loop_1 = function (m) {\n      structure.uniqueResidueNames.forEach(function (r) {\n        var comp = m.properties.chemicalComponentMap.get(r);\n        if (comp) residueLabels.set(r, comp.name);\n      });\n    };\n\n    for (var _a = 0, _b = structure.models; _a < _b.length; _a++) {\n      var m = _b[_a];\n\n      _loop_1(m);\n    }\n  }\n\n  var queries = [];\n  SetUtils.difference(uniqueResidues, StandardResidues).forEach(function (r) {\n    var label = residueLabels.get(r) || r;\n    queries.push(ResidueQuery([[r], label], 'Ligand/Non-standard Residue', 200));\n  });\n  return queries;\n}\nexport function getPolymerAndBranchedEntityQueries(structures) {\n  var uniqueEntities = new Map();\n  var l = StructureElement.Location.create();\n\n  for (var _i = 0, structures_3 = structures; _i < structures_3.length; _i++) {\n    var structure = structures_3[_i];\n    l.structure = structure;\n\n    for (var _a = 0, _b = structure.unitSymmetryGroups; _a < _b.length; _a++) {\n      var ug = _b[_a];\n      l.unit = ug.units[0];\n      l.element = ug.elements[0];\n      var entityType = StructureProperties.entity.type(l);\n\n      if (entityType === 'polymer' || entityType === 'branched') {\n        var description = StructureProperties.entity.pdbx_description(l);\n        uniqueEntities.set(description.join(', '), description);\n      }\n    }\n  }\n\n  var queries = [];\n  uniqueEntities.forEach(function (v, k) {\n    queries.push(EntityDescriptionQuery([v, k], 'Polymer/Carbohydrate Entities', 300));\n  });\n  return queries;\n}\nexport function applyBuiltInSelection(to, query, customTag) {\n  return to.apply(StateTransforms.Model.StructureSelectionFromExpression, {\n    expression: StructureSelectionQueries[query].expression,\n    label: StructureSelectionQueries[query].label\n  }, {\n    tags: customTag ? [query, customTag] : [query]\n  });\n}\nexport var StructureSelectionQueries = {\n  all: all,\n  current: current,\n  polymer: polymer,\n  trace: trace,\n  backbone: backbone,\n  sidechain: sidechain,\n  sidechainWithTrace: sidechainWithTrace,\n  protein: protein,\n  nucleic: nucleic,\n  helix: helix,\n  beta: beta,\n  water: water,\n  ion: ion,\n  lipid: lipid,\n  branched: branched,\n  branchedPlusConnected: branchedPlusConnected,\n  branchedConnectedOnly: branchedConnectedOnly,\n  ligand: ligand,\n  ligandPlusConnected: ligandPlusConnected,\n  ligandConnectedOnly: ligandConnectedOnly,\n  connectedOnly: connectedOnly,\n  disulfideBridges: disulfideBridges,\n  nosBridges: nosBridges,\n  nonStandardPolymer: nonStandardPolymer,\n  coarse: coarse,\n  ring: ring,\n  aromaticRing: aromaticRing,\n  surroundings: surroundings,\n  surroundingLigands: surroundingLigands,\n  surroundingAtoms: surroundingAtoms,\n  complement: complement,\n  covalentlyBonded: covalentlyBonded,\n  covalentlyOrMetallicBonded: covalentlyOrMetallicBonded,\n  covalentlyBondedComponent: covalentlyBondedComponent,\n  wholeResidues: wholeResidues\n};\n\nvar StructureSelectionQueryRegistry =\n/** @class */\nfunction () {\n  function StructureSelectionQueryRegistry() {\n    var _a, _b;\n\n    this.list = [];\n    this.options = [];\n    this.version = 1; // add built-in\n\n    (_a = this.list).push.apply(_a, __spreadArray(__spreadArray(__spreadArray([], Object.values(StructureSelectionQueries), false), StandardAminoAcids.map(function (v) {\n      return ResidueQuery(v, StructureSelectionCategory.AminoAcid);\n    }), false), StandardNucleicBases.map(function (v) {\n      return ResidueQuery(v, StructureSelectionCategory.NucleicBase);\n    }), false));\n\n    (_b = this.options).push.apply(_b, this.list.map(function (q) {\n      return [q, q.label, q.category];\n    }));\n  }\n\n  StructureSelectionQueryRegistry.prototype.add = function (q) {\n    this.list.push(q);\n    this.options.push([q, q.label, q.category]);\n    this.version += 1;\n  };\n\n  StructureSelectionQueryRegistry.prototype.remove = function (q) {\n    var idx = this.list.indexOf(q);\n\n    if (idx !== -1) {\n      this.list.splice(idx, 1);\n      this.options.splice(idx, 1);\n      this.version += 1;\n    }\n  };\n\n  return StructureSelectionQueryRegistry;\n}();\n\nexport { StructureSelectionQueryRegistry };","map":{"version":3,"sources":["../../../src/mol-plugin-state/helpers/structure-selection-query.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator, __spreadArray } from \"tslib\";\r\nimport { QueryContext, StructureSelection, StructureProperties, StructureElement } from '../../mol-model/structure';\r\nimport { NucleicBackboneAtoms, ProteinBackboneAtoms, AminoAcidNamesL, RnaBaseNames, DnaBaseNames, WaterNames } from '../../mol-model/structure/model/types';\r\nimport { MolScriptBuilder as MS } from '../../mol-script/language/builder';\r\nimport { compile } from '../../mol-script/runtime/query/compiler';\r\nimport { SetUtils } from '../../mol-util/set';\r\nimport { StateTransforms } from '../transforms';\r\nimport { ElementNames } from '../../mol-model/structure/model/properties/atomic/types';\r\nexport var StructureSelectionCategory;\r\n(function (StructureSelectionCategory) {\r\n    StructureSelectionCategory[\"Type\"] = \"Type\";\r\n    StructureSelectionCategory[\"Structure\"] = \"Structure Property\";\r\n    StructureSelectionCategory[\"Atom\"] = \"Atom Property\";\r\n    StructureSelectionCategory[\"Bond\"] = \"Bond Property\";\r\n    StructureSelectionCategory[\"Residue\"] = \"Residue Property\";\r\n    StructureSelectionCategory[\"AminoAcid\"] = \"Amino Acid\";\r\n    StructureSelectionCategory[\"NucleicBase\"] = \"Nucleic Base\";\r\n    StructureSelectionCategory[\"Manipulate\"] = \"Manipulate Selection\";\r\n    StructureSelectionCategory[\"Validation\"] = \"Validation\";\r\n    StructureSelectionCategory[\"Misc\"] = \"Miscellaneous\";\r\n    StructureSelectionCategory[\"Internal\"] = \"Internal\";\r\n})(StructureSelectionCategory || (StructureSelectionCategory = {}));\r\nexport { StructureSelectionQuery };\r\nfunction StructureSelectionQuery(label, expression, props) {\r\n    var _a;\r\n    if (props === void 0) { props = {}; }\r\n    var _query;\r\n    return {\r\n        label: label,\r\n        expression: expression,\r\n        description: props.description || '',\r\n        category: (_a = props.category) !== null && _a !== void 0 ? _a : StructureSelectionCategory.Misc,\r\n        isHidden: !!props.isHidden,\r\n        priority: props.priority || 0,\r\n        referencesCurrent: !!props.referencesCurrent,\r\n        get query() {\r\n            if (!_query)\r\n                _query = compile(expression);\r\n            return _query;\r\n        },\r\n        ensureCustomProperties: props.ensureCustomProperties,\r\n        getSelection: function (plugin, runtime, structure) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var current, currentSelection;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            current = plugin.managers.structure.selection.getStructure(structure);\r\n                            currentSelection = current ? StructureSelection.Sequence(structure, [current]) : StructureSelection.Empty(structure);\r\n                            if (!props.ensureCustomProperties) return [3 /*break*/, 2];\r\n                            return [4 /*yield*/, props.ensureCustomProperties({ runtime: runtime, assetManager: plugin.managers.asset }, structure)];\r\n                        case 1:\r\n                            _a.sent();\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            if (!_query)\r\n                                _query = compile(expression);\r\n                            return [2 /*return*/, _query(new QueryContext(structure, { currentSelection: currentSelection }))];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\r\nvar all = StructureSelectionQuery('All', MS.struct.generator.all(), { category: '', priority: 1000 });\r\nvar current = StructureSelectionQuery('Current Selection', MS.internal.generator.current(), { category: '', referencesCurrent: true });\r\nvar polymer = StructureSelectionQuery('Polymer', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.logic.and([\r\n            MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n            MS.core.str.match([\r\n                MS.re('(polypeptide|cyclic-pseudo-peptide|peptide-like|nucleotide|peptide nucleic acid)', 'i'),\r\n                MS.ammp('entitySubtype')\r\n            ])\r\n        ])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar trace = StructureSelectionQuery('Trace', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n                'chain-test': MS.core.set.has([\r\n                    MS.set('sphere', 'gaussian'), MS.ammp('objectPrimitive')\r\n                ])\r\n            })\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'atom-test': MS.core.set.has([MS.set('CA', 'P'), MS.ammp('label_atom_id')])\r\n            })\r\n        ])\r\n    ])\r\n]), { category: StructureSelectionCategory.Structure });\r\nvar _proteinEntityTest = MS.core.logic.and([\r\n    MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n    MS.core.str.match([\r\n        MS.re('(polypeptide|cyclic-pseudo-peptide|peptide-like)', 'i'),\r\n        MS.ammp('entitySubtype')\r\n    ])\r\n]);\r\nvar _nucleiEntityTest = MS.core.logic.and([\r\n    MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n    MS.core.str.match([\r\n        MS.re('(nucleotide|peptide nucleic acid)', 'i'),\r\n        MS.ammp('entitySubtype')\r\n    ])\r\n]);\r\n/**\r\n * this is to get non-polymer and peptide terminus components in polymer entities,\r\n * - non-polymer, e.g. PXZ in 4HIV or generally ACE\r\n * - carboxy terminus, e.g. FC0 in 4BP9, or ETA in 6DDE\r\n * - amino terminus, e.g. ARF in 3K4V, or 4MM in 3EGV\r\n */\r\nvar _nonPolymerResidueTest = MS.core.str.match([\r\n    MS.re('non-polymer|(amino|carboxy) terminus|peptide-like', 'i'),\r\n    MS.ammp('chemCompType')\r\n]);\r\n// TODO maybe pre-calculate backbone atom properties\r\nvar backbone = StructureSelectionQuery('Backbone', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _proteinEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])\r\n            })\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _nucleiEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])\r\n            })\r\n        ])\r\n    ])\r\n]), { category: StructureSelectionCategory.Structure });\r\n// TODO maybe pre-calculate sidechain atom property\r\nvar sidechain = StructureSelectionQuery('Sidechain', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _proteinEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.logic.or([\r\n                    MS.core.logic.not([\r\n                        MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])\r\n                    ])\r\n                ])\r\n            })\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _nucleiEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.logic.or([\r\n                    MS.core.logic.not([\r\n                        MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])\r\n                    ])\r\n                ])\r\n            })\r\n        ])\r\n    ])\r\n]), { category: StructureSelectionCategory.Structure });\r\n// TODO maybe pre-calculate sidechain atom property\r\nvar sidechainWithTrace = StructureSelectionQuery('Sidechain with Trace', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _proteinEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.logic.or([\r\n                    MS.core.logic.not([\r\n                        MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(ProteinBackboneAtoms)), MS.ammp('label_atom_id')])\r\n                    ]),\r\n                    MS.core.rel.eq([MS.ammp('label_atom_id'), 'CA']),\r\n                    MS.core.logic.and([\r\n                        MS.core.rel.eq([MS.ammp('auth_comp_id'), 'PRO']),\r\n                        MS.core.rel.eq([MS.ammp('label_atom_id'), 'N'])\r\n                    ])\r\n                ])\r\n            })\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': _nucleiEntityTest,\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([_nonPolymerResidueTest]),\r\n                'atom-test': MS.core.logic.or([\r\n                    MS.core.logic.not([\r\n                        MS.core.set.has([MS.set.apply(MS, SetUtils.toArray(NucleicBackboneAtoms)), MS.ammp('label_atom_id')])\r\n                    ]),\r\n                    MS.core.rel.eq([MS.ammp('label_atom_id'), 'P'])\r\n                ])\r\n            })\r\n        ])\r\n    ])\r\n]), { category: StructureSelectionCategory.Structure });\r\nvar protein = StructureSelectionQuery('Protein', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({ 'entity-test': _proteinEntityTest })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar nucleic = StructureSelectionQuery('Nucleic', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({ 'entity-test': _nucleiEntityTest })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar helix = StructureSelectionQuery('Helix', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': _proteinEntityTest,\r\n        'residue-test': MS.core.flags.hasAny([\r\n            MS.ammp('secondaryStructureFlags'),\r\n            MS.core.type.bitflags([2 /* Helix */])\r\n        ])\r\n    })\r\n]), { category: StructureSelectionCategory.Structure });\r\nvar beta = StructureSelectionQuery('Beta Strand/Sheet', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': _proteinEntityTest,\r\n        'residue-test': MS.core.flags.hasAny([\r\n            MS.ammp('secondaryStructureFlags'),\r\n            MS.core.type.bitflags([4 /* Beta */])\r\n        ])\r\n    })\r\n]), { category: StructureSelectionCategory.Structure });\r\nvar water = StructureSelectionQuery('Water', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'water'])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar ion = StructureSelectionQuery('Ion', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.rel.eq([MS.ammp('entitySubtype'), 'ion'])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar lipid = StructureSelectionQuery('Lipid', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.rel.eq([MS.ammp('entitySubtype'), 'lipid'])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar branched = StructureSelectionQuery('Carbohydrate', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.logic.or([\r\n            MS.core.rel.eq([MS.ammp('entityType'), 'branched']),\r\n            MS.core.logic.and([\r\n                MS.core.rel.eq([MS.ammp('entityType'), 'non-polymer']),\r\n                MS.core.str.match([\r\n                    MS.re('oligosaccharide', 'i'),\r\n                    MS.ammp('entitySubtype')\r\n                ])\r\n            ])\r\n        ])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar branchedPlusConnected = StructureSelectionQuery('Carbohydrate with Connected', MS.struct.modifier.union([\r\n    MS.struct.modifier.includeConnected({\r\n        0: branched.expression, 'layer-count': 1, 'as-whole-residues': true\r\n    })\r\n]), { category: StructureSelectionCategory.Internal, isHidden: true });\r\nvar branchedConnectedOnly = StructureSelectionQuery('Connected to Carbohydrate', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: branchedPlusConnected.expression,\r\n        by: branched.expression\r\n    })\r\n]), { category: StructureSelectionCategory.Internal, isHidden: true });\r\nvar ligand = StructureSelectionQuery('Ligand', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': MS.core.logic.and([\r\n                    MS.core.logic.or([\r\n                        MS.core.rel.eq([MS.ammp('entityType'), 'non-polymer']),\r\n                        MS.core.rel.neq([MS.ammp('entityPrdId'), ''])\r\n                    ]),\r\n                    MS.core.logic.not([MS.core.str.match([\r\n                            MS.re('(oligosaccharide|lipid|ion)', 'i'),\r\n                            MS.ammp('entitySubtype')\r\n                        ])])\r\n                ]),\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': MS.core.logic.not([\r\n                    MS.core.str.match([MS.re('saccharide', 'i'), MS.ammp('chemCompType')])\r\n                ])\r\n            })\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.generator.atomGroups({\r\n                'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n                'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n                'residue-test': _nonPolymerResidueTest\r\n            })\r\n        ])\r\n    ]),\r\n]), { category: StructureSelectionCategory.Type });\r\n// don't include branched entities as they have their own link representation\r\nvar ligandPlusConnected = StructureSelectionQuery('Ligand with Connected', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: MS.struct.modifier.union([\r\n            MS.struct.modifier.includeConnected({\r\n                0: ligand.expression,\r\n                'layer-count': 1,\r\n                'as-whole-residues': true,\r\n                'bond-test': MS.core.flags.hasAny([\r\n                    MS.struct.bondProperty.flags(),\r\n                    MS.core.type.bitflags([\r\n                        1 /* Covalent */ | 2 /* MetallicCoordination */\r\n                    ])\r\n                ])\r\n            })\r\n        ]),\r\n        by: branched.expression\r\n    })\r\n]), { category: StructureSelectionCategory.Internal, isHidden: true });\r\nvar ligandConnectedOnly = StructureSelectionQuery('Connected to Ligand', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: ligandPlusConnected.expression,\r\n        by: ligand.expression\r\n    })\r\n]), { category: StructureSelectionCategory.Internal, isHidden: true });\r\n// residues connected to ligands or branched entities\r\nvar connectedOnly = StructureSelectionQuery('Connected to Ligand or Carbohydrate', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        branchedConnectedOnly.expression,\r\n        ligandConnectedOnly.expression\r\n    ]),\r\n]), { category: StructureSelectionCategory.Internal, isHidden: true });\r\nvar disulfideBridges = StructureSelectionQuery('Disulfide Bridges', MS.struct.modifier.union([\r\n    MS.struct.combinator.merge([\r\n        MS.struct.modifier.union([\r\n            MS.struct.modifier.wholeResidues([\r\n                MS.struct.filter.isConnectedTo({\r\n                    0: MS.struct.generator.atomGroups({\r\n                        'residue-test': MS.core.set.has([MS.set('CYS'), MS.ammp('auth_comp_id')]),\r\n                        'atom-test': MS.core.set.has([MS.set('SG'), MS.ammp('label_atom_id')])\r\n                    }),\r\n                    target: MS.struct.generator.atomGroups({\r\n                        'residue-test': MS.core.set.has([MS.set('CYS'), MS.ammp('auth_comp_id')]),\r\n                        'atom-test': MS.core.set.has([MS.set('SG'), MS.ammp('label_atom_id')])\r\n                    }),\r\n                    'bond-test': true\r\n                })\r\n            ])\r\n        ]),\r\n        MS.struct.modifier.union([\r\n            MS.struct.modifier.wholeResidues([\r\n                MS.struct.modifier.union([\r\n                    MS.struct.generator.bondedAtomicPairs({\r\n                        0: MS.core.flags.hasAny([\r\n                            MS.struct.bondProperty.flags(),\r\n                            MS.core.type.bitflags([8 /* Disulfide */])\r\n                        ])\r\n                    })\r\n                ])\r\n            ])\r\n        ])\r\n    ])\r\n]), { category: StructureSelectionCategory.Bond });\r\nvar nosBridges = StructureSelectionQuery('NOS Bridges', MS.struct.modifier.union([\r\n    MS.struct.modifier.wholeResidues([\r\n        MS.struct.filter.isConnectedTo({\r\n            0: MS.struct.generator.atomGroups({\r\n                'residue-test': MS.core.set.has([MS.set('CSO', 'LYS'), MS.ammp('auth_comp_id')]),\r\n                'atom-test': MS.core.set.has([MS.set('OD', 'NZ'), MS.ammp('label_atom_id')])\r\n            }),\r\n            target: MS.struct.generator.atomGroups({\r\n                'residue-test': MS.core.set.has([MS.set('CSO', 'LYS'), MS.ammp('auth_comp_id')]),\r\n                'atom-test': MS.core.set.has([MS.set('OD', 'NZ'), MS.ammp('label_atom_id')])\r\n            }),\r\n            'bond-test': true\r\n        })\r\n    ])\r\n]), { category: StructureSelectionCategory.Bond });\r\nvar nonStandardPolymer = StructureSelectionQuery('Non-standard Residues in Polymers', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'entity-test': MS.core.rel.eq([MS.ammp('entityType'), 'polymer']),\r\n        'chain-test': MS.core.rel.eq([MS.ammp('objectPrimitive'), 'atomistic']),\r\n        'residue-test': MS.ammp('isNonStandard')\r\n    })\r\n]), { category: StructureSelectionCategory.Residue });\r\nvar coarse = StructureSelectionQuery('Coarse Elements', MS.struct.modifier.union([\r\n    MS.struct.generator.atomGroups({\r\n        'chain-test': MS.core.set.has([\r\n            MS.set('sphere', 'gaussian'), MS.ammp('objectPrimitive')\r\n        ])\r\n    })\r\n]), { category: StructureSelectionCategory.Type });\r\nvar ring = StructureSelectionQuery('Rings in Residues', MS.struct.modifier.union([\r\n    MS.struct.generator.rings()\r\n]), { category: StructureSelectionCategory.Residue });\r\nvar aromaticRing = StructureSelectionQuery('Aromatic Rings in Residues', MS.struct.modifier.union([\r\n    MS.struct.generator.rings({ 'only-aromatic': true })\r\n]), { category: StructureSelectionCategory.Residue });\r\nvar surroundings = StructureSelectionQuery('Surrounding Residues (5 \\u212B) of Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: MS.struct.modifier.includeSurroundings({\r\n            0: MS.internal.generator.current(),\r\n            radius: 5,\r\n            'as-whole-residues': true\r\n        }),\r\n        by: MS.internal.generator.current()\r\n    })\r\n]), {\r\n    description: 'Select residues within 5 \\u212B of the current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar surroundingLigands = StructureSelectionQuery('Surrounding Ligands (5 \\u212B) of Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.surroundingLigands({\r\n        0: MS.internal.generator.current(),\r\n        radius: 5,\r\n        'include-water': true\r\n    })\r\n]), {\r\n    description: 'Select ligand components within 5 \\u212B of the current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar surroundingAtoms = StructureSelectionQuery('Surrounding Atoms (5 \\u212B) of Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: MS.struct.modifier.includeSurroundings({\r\n            0: MS.internal.generator.current(),\r\n            radius: 5,\r\n            'as-whole-residues': false\r\n        }),\r\n        by: MS.internal.generator.current()\r\n    })\r\n]), {\r\n    description: 'Select atoms within 5 \\u212B of the current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar complement = StructureSelectionQuery('Inverse / Complement of Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.exceptBy({\r\n        0: MS.struct.generator.all(),\r\n        by: MS.internal.generator.current()\r\n    })\r\n]), {\r\n    description: 'Select everything not in the current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar covalentlyBonded = StructureSelectionQuery('Residues Covalently Bonded to Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.includeConnected({\r\n        0: MS.internal.generator.current(), 'layer-count': 1, 'as-whole-residues': true\r\n    })\r\n]), {\r\n    description: 'Select residues covalently bonded to current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar covalentlyBondedComponent = StructureSelectionQuery('Covalently Bonded Component', MS.struct.modifier.union([\r\n    MS.struct.modifier.includeConnected({\r\n        0: MS.internal.generator.current(), 'fixed-point': true\r\n    })\r\n]), {\r\n    description: 'Select covalently bonded component based on current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar covalentlyOrMetallicBonded = StructureSelectionQuery('Residues with Cov. or Metallic Bond to Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.includeConnected({\r\n        0: MS.internal.generator.current(),\r\n        'layer-count': 1,\r\n        'as-whole-residues': true,\r\n        'bond-test': MS.core.flags.hasAny([\r\n            MS.struct.bondProperty.flags(),\r\n            MS.core.type.bitflags([\r\n                1 /* Covalent */ | 2 /* MetallicCoordination */\r\n            ])\r\n        ])\r\n    })\r\n]), {\r\n    description: 'Select residues with covalent or metallic bond to current selection.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar wholeResidues = StructureSelectionQuery('Whole Residues of Selection', MS.struct.modifier.union([\r\n    MS.struct.modifier.wholeResidues({\r\n        0: MS.internal.generator.current()\r\n    })\r\n]), {\r\n    description: 'Expand current selection to whole residues.',\r\n    category: StructureSelectionCategory.Manipulate,\r\n    referencesCurrent: true\r\n});\r\nvar StandardAminoAcids = [\r\n    [['HIS'], 'Histidine'],\r\n    [['ARG'], 'Arginine'],\r\n    [['LYS'], 'Lysine'],\r\n    [['ILE'], 'Isoleucine'],\r\n    [['PHE'], 'Phenylalanine'],\r\n    [['LEU'], 'Leucine'],\r\n    [['TRP'], 'Tryptophan'],\r\n    [['ALA'], 'Alanine'],\r\n    [['MET'], 'Methionine'],\r\n    [['PRO'], 'Proline'],\r\n    [['CYS'], 'Cysteine'],\r\n    [['ASN'], 'Asparagine'],\r\n    [['VAL'], 'Valine'],\r\n    [['GLY'], 'Glycine'],\r\n    [['SER'], 'Serine'],\r\n    [['GLN'], 'Glutamine'],\r\n    [['TYR'], 'Tyrosine'],\r\n    [['ASP'], 'Aspartic Acid'],\r\n    [['GLU'], 'Glutamic Acid'],\r\n    [['THR'], 'Threonine'],\r\n    [['SEC'], 'Selenocysteine'],\r\n    [['PYL'], 'Pyrrolysine'],\r\n    [['UNK'], 'Unknown'],\r\n].sort(function (a, b) { return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0; });\r\nvar StandardNucleicBases = [\r\n    [['A', 'DA'], 'Adenosine'],\r\n    [['C', 'DC'], 'Cytidine'],\r\n    [['T', 'DT'], 'Thymidine'],\r\n    [['G', 'DG'], 'Guanosine'],\r\n    [['I', 'DI'], 'Inosine'],\r\n    [['U', 'DU'], 'Uridine'],\r\n    [['N', 'DN'], 'Unknown'],\r\n].sort(function (a, b) { return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0; });\r\nexport function ResidueQuery(_a, category, priority) {\r\n    var names = _a[0], label = _a[1];\r\n    if (priority === void 0) { priority = 0; }\r\n    var description = names.length === 1 && !StandardResidues.has(names[0])\r\n        ? \"[\" + names[0] + \"] \" + label\r\n        : label + \" (\" + names.join(', ') + \")\";\r\n    return StructureSelectionQuery(description, MS.struct.modifier.union([\r\n        MS.struct.generator.atomGroups({\r\n            'residue-test': MS.core.set.has([MS.set.apply(MS, names), MS.ammp('auth_comp_id')])\r\n        })\r\n    ]), { category: category, priority: priority, description: description });\r\n}\r\nexport function ElementSymbolQuery(_a, category, priority) {\r\n    var names = _a[0], label = _a[1];\r\n    var description = label + \" (\" + names.join(', ') + \")\";\r\n    return StructureSelectionQuery(description, MS.struct.modifier.union([\r\n        MS.struct.generator.atomGroups({\r\n            'atom-test': MS.core.set.has([MS.set.apply(MS, names), MS.acp('elementSymbol')])\r\n        })\r\n    ]), { category: category, priority: priority, description: description });\r\n}\r\nexport function EntityDescriptionQuery(_a, category, priority) {\r\n    var names = _a[0], label = _a[1];\r\n    var description = \"\" + label;\r\n    return StructureSelectionQuery(\"\" + label, MS.struct.modifier.union([\r\n        MS.struct.generator.atomGroups({\r\n            'entity-test': MS.core.list.equal([MS.list.apply(MS, names), MS.ammp('entityDescription')])\r\n        })\r\n    ]), { category: category, priority: priority, description: description });\r\n}\r\nvar StandardResidues = SetUtils.unionMany(AminoAcidNamesL, RnaBaseNames, DnaBaseNames, WaterNames);\r\nexport function getElementQueries(structures) {\r\n    var uniqueElements = new Set();\r\n    for (var _i = 0, structures_1 = structures; _i < structures_1.length; _i++) {\r\n        var structure = structures_1[_i];\r\n        structure.uniqueElementSymbols.forEach(function (e) { return uniqueElements.add(e); });\r\n    }\r\n    var queries = [];\r\n    uniqueElements.forEach(function (e) {\r\n        var label = ElementNames[e] || e;\r\n        queries.push(ElementSymbolQuery([[e], label], 'Element Symbol', 0));\r\n    });\r\n    return queries;\r\n}\r\nexport function getNonStandardResidueQueries(structures) {\r\n    var residueLabels = new Map();\r\n    var uniqueResidues = new Set();\r\n    for (var _i = 0, structures_2 = structures; _i < structures_2.length; _i++) {\r\n        var structure = structures_2[_i];\r\n        structure.uniqueResidueNames.forEach(function (r) { return uniqueResidues.add(r); });\r\n        var _loop_1 = function (m) {\r\n            structure.uniqueResidueNames.forEach(function (r) {\r\n                var comp = m.properties.chemicalComponentMap.get(r);\r\n                if (comp)\r\n                    residueLabels.set(r, comp.name);\r\n            });\r\n        };\r\n        for (var _a = 0, _b = structure.models; _a < _b.length; _a++) {\r\n            var m = _b[_a];\r\n            _loop_1(m);\r\n        }\r\n    }\r\n    var queries = [];\r\n    SetUtils.difference(uniqueResidues, StandardResidues).forEach(function (r) {\r\n        var label = residueLabels.get(r) || r;\r\n        queries.push(ResidueQuery([[r], label], 'Ligand/Non-standard Residue', 200));\r\n    });\r\n    return queries;\r\n}\r\nexport function getPolymerAndBranchedEntityQueries(structures) {\r\n    var uniqueEntities = new Map();\r\n    var l = StructureElement.Location.create();\r\n    for (var _i = 0, structures_3 = structures; _i < structures_3.length; _i++) {\r\n        var structure = structures_3[_i];\r\n        l.structure = structure;\r\n        for (var _a = 0, _b = structure.unitSymmetryGroups; _a < _b.length; _a++) {\r\n            var ug = _b[_a];\r\n            l.unit = ug.units[0];\r\n            l.element = ug.elements[0];\r\n            var entityType = StructureProperties.entity.type(l);\r\n            if (entityType === 'polymer' || entityType === 'branched') {\r\n                var description = StructureProperties.entity.pdbx_description(l);\r\n                uniqueEntities.set(description.join(', '), description);\r\n            }\r\n        }\r\n    }\r\n    var queries = [];\r\n    uniqueEntities.forEach(function (v, k) {\r\n        queries.push(EntityDescriptionQuery([v, k], 'Polymer/Carbohydrate Entities', 300));\r\n    });\r\n    return queries;\r\n}\r\nexport function applyBuiltInSelection(to, query, customTag) {\r\n    return to.apply(StateTransforms.Model.StructureSelectionFromExpression, { expression: StructureSelectionQueries[query].expression, label: StructureSelectionQueries[query].label }, { tags: customTag ? [query, customTag] : [query] });\r\n}\r\nexport var StructureSelectionQueries = {\r\n    all: all,\r\n    current: current,\r\n    polymer: polymer,\r\n    trace: trace,\r\n    backbone: backbone,\r\n    sidechain: sidechain,\r\n    sidechainWithTrace: sidechainWithTrace,\r\n    protein: protein,\r\n    nucleic: nucleic,\r\n    helix: helix,\r\n    beta: beta,\r\n    water: water,\r\n    ion: ion,\r\n    lipid: lipid,\r\n    branched: branched,\r\n    branchedPlusConnected: branchedPlusConnected,\r\n    branchedConnectedOnly: branchedConnectedOnly,\r\n    ligand: ligand,\r\n    ligandPlusConnected: ligandPlusConnected,\r\n    ligandConnectedOnly: ligandConnectedOnly,\r\n    connectedOnly: connectedOnly,\r\n    disulfideBridges: disulfideBridges,\r\n    nosBridges: nosBridges,\r\n    nonStandardPolymer: nonStandardPolymer,\r\n    coarse: coarse,\r\n    ring: ring,\r\n    aromaticRing: aromaticRing,\r\n    surroundings: surroundings,\r\n    surroundingLigands: surroundingLigands,\r\n    surroundingAtoms: surroundingAtoms,\r\n    complement: complement,\r\n    covalentlyBonded: covalentlyBonded,\r\n    covalentlyOrMetallicBonded: covalentlyOrMetallicBonded,\r\n    covalentlyBondedComponent: covalentlyBondedComponent,\r\n    wholeResidues: wholeResidues,\r\n};\r\nvar StructureSelectionQueryRegistry = /** @class */ (function () {\r\n    function StructureSelectionQueryRegistry() {\r\n        var _a, _b;\r\n        this.list = [];\r\n        this.options = [];\r\n        this.version = 1;\r\n        // add built-in\r\n        (_a = this.list).push.apply(_a, __spreadArray(__spreadArray(__spreadArray([], Object.values(StructureSelectionQueries), false), StandardAminoAcids.map(function (v) { return ResidueQuery(v, StructureSelectionCategory.AminoAcid); }), false), StandardNucleicBases.map(function (v) { return ResidueQuery(v, StructureSelectionCategory.NucleicBase); }), false));\r\n        (_b = this.options).push.apply(_b, this.list.map(function (q) { return [q, q.label, q.category]; }));\r\n    }\r\n    StructureSelectionQueryRegistry.prototype.add = function (q) {\r\n        this.list.push(q);\r\n        this.options.push([q, q.label, q.category]);\r\n        this.version += 1;\r\n    };\r\n    StructureSelectionQueryRegistry.prototype.remove = function (q) {\r\n        var idx = this.list.indexOf(q);\r\n        if (idx !== -1) {\r\n            this.list.splice(idx, 1);\r\n            this.options.splice(idx, 1);\r\n            this.version += 1;\r\n        }\r\n    };\r\n    return StructureSelectionQueryRegistry;\r\n}());\r\nexport { StructureSelectionQueryRegistry };\r\n//# sourceMappingURL=structure-selection-query.js.map"]},"metadata":{},"sourceType":"module"}