{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createComputeRenderable } from '../../renderable';\nimport { createComputeRenderItem } from '../../webgl/render-item';\nimport { TextureSpec, UniformSpec } from '../../renderable/schema';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { ValueCell } from '../../../mol-util';\nimport { QuadSchema, QuadValues } from '../util';\nimport { getTriCount } from './tables';\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\nimport { activeVoxels_frag } from '../../../mol-gl/shader/marching-cubes/active-voxels.frag';\n\nvar ActiveVoxelsSchema = __assign(__assign({}, QuadSchema), {\n  tTriCount: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'),\n  tVolumeData: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),\n  uIsoValue: UniformSpec('f'),\n  uGridDim: UniformSpec('v3'),\n  uGridTexDim: UniformSpec('v3'),\n  uScale: UniformSpec('v2')\n});\n\nvar ActiveVoxelsName = 'active-voxels';\n\nfunction getActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale) {\n  if (ctx.namedComputeRenderables[ActiveVoxelsName]) {\n    var v = ctx.namedComputeRenderables[ActiveVoxelsName].values;\n    ValueCell.update(v.uQuadScale, scale);\n    ValueCell.update(v.tVolumeData, volumeData);\n    ValueCell.updateIfChanged(v.uIsoValue, isoValue);\n    ValueCell.update(v.uGridDim, gridDim);\n    ValueCell.update(v.uGridTexDim, gridTexDim);\n    ValueCell.update(v.uScale, scale);\n    ctx.namedComputeRenderables[ActiveVoxelsName].update();\n  } else {\n    ctx.namedComputeRenderables[ActiveVoxelsName] = createActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale);\n  }\n\n  return ctx.namedComputeRenderables[ActiveVoxelsName];\n}\n\nfunction createActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale) {\n  var values = __assign(__assign({}, QuadValues), {\n    tTriCount: ValueCell.create(getTriCount()),\n    uQuadScale: ValueCell.create(scale),\n    tVolumeData: ValueCell.create(volumeData),\n    uIsoValue: ValueCell.create(isoValue),\n    uGridDim: ValueCell.create(gridDim),\n    uGridTexDim: ValueCell.create(gridTexDim),\n    uScale: ValueCell.create(scale)\n  });\n\n  var schema = __assign({}, ActiveVoxelsSchema);\n\n  var shaderCode = ShaderCode('active-voxels', quad_vert, activeVoxels_frag);\n  var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setRenderingDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.disable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.enable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.colorMask(true, true, true, true);\n  state.clearColor(0, 0, 0, 0);\n}\n\nexport function calcActiveVoxels(ctx, volumeData, gridDim, gridTexDim, isoValue, gridScale) {\n  var gl = ctx.gl,\n      resources = ctx.resources;\n  var width = volumeData.getWidth();\n  var height = volumeData.getHeight();\n\n  if (!ctx.namedFramebuffers[ActiveVoxelsName]) {\n    ctx.namedFramebuffers[ActiveVoxelsName] = resources.framebuffer();\n  }\n\n  var framebuffer = ctx.namedFramebuffers[ActiveVoxelsName];\n  framebuffer.bind();\n\n  if (!ctx.namedTextures[ActiveVoxelsName]) {\n    ctx.namedTextures[ActiveVoxelsName] = resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\n  }\n\n  var activeVoxelsTex = ctx.namedTextures[ActiveVoxelsName];\n  activeVoxelsTex.define(width, height);\n  var renderable = getActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, gridScale);\n  ctx.state.currentRenderItemId = -1;\n  activeVoxelsTex.attachFramebuffer(framebuffer, 0);\n  setRenderingDefaults(ctx);\n  gl.viewport(0, 0, width, height);\n  gl.scissor(0, 0, width, height);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.scissor(0, 0, gridTexDim[0], gridTexDim[1]);\n  renderable.render(); // console.log('gridScale', gridScale, 'gridTexDim', gridTexDim, 'gridDim', gridDim);\n  // console.log('volumeData', volumeData);\n  // console.log('at', readTexture(ctx, activeVoxelsTex));\n\n  gl.finish();\n  return activeVoxelsTex;\n}","map":{"version":3,"sources":["../../../../src/mol-gl/compute/marching-cubes/active-voxels.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createComputeRenderable } from '../../renderable';\r\nimport { createComputeRenderItem } from '../../webgl/render-item';\r\nimport { TextureSpec, UniformSpec } from '../../renderable/schema';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { QuadSchema, QuadValues } from '../util';\r\nimport { getTriCount } from './tables';\r\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\r\nimport { activeVoxels_frag } from '../../../mol-gl/shader/marching-cubes/active-voxels.frag';\r\nvar ActiveVoxelsSchema = __assign(__assign({}, QuadSchema), { tTriCount: TextureSpec('image-uint8', 'alpha', 'ubyte', 'nearest'), tVolumeData: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'), uIsoValue: UniformSpec('f'), uGridDim: UniformSpec('v3'), uGridTexDim: UniformSpec('v3'), uScale: UniformSpec('v2') });\r\nvar ActiveVoxelsName = 'active-voxels';\r\nfunction getActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale) {\r\n    if (ctx.namedComputeRenderables[ActiveVoxelsName]) {\r\n        var v = ctx.namedComputeRenderables[ActiveVoxelsName].values;\r\n        ValueCell.update(v.uQuadScale, scale);\r\n        ValueCell.update(v.tVolumeData, volumeData);\r\n        ValueCell.updateIfChanged(v.uIsoValue, isoValue);\r\n        ValueCell.update(v.uGridDim, gridDim);\r\n        ValueCell.update(v.uGridTexDim, gridTexDim);\r\n        ValueCell.update(v.uScale, scale);\r\n        ctx.namedComputeRenderables[ActiveVoxelsName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[ActiveVoxelsName] = createActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale);\r\n    }\r\n    return ctx.namedComputeRenderables[ActiveVoxelsName];\r\n}\r\nfunction createActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, scale) {\r\n    var values = __assign(__assign({}, QuadValues), { tTriCount: ValueCell.create(getTriCount()), uQuadScale: ValueCell.create(scale), tVolumeData: ValueCell.create(volumeData), uIsoValue: ValueCell.create(isoValue), uGridDim: ValueCell.create(gridDim), uGridTexDim: ValueCell.create(gridTexDim), uScale: ValueCell.create(scale) });\r\n    var schema = __assign({}, ActiveVoxelsSchema);\r\n    var shaderCode = ShaderCode('active-voxels', quad_vert, activeVoxels_frag);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setRenderingDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.disable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.enable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.colorMask(true, true, true, true);\r\n    state.clearColor(0, 0, 0, 0);\r\n}\r\nexport function calcActiveVoxels(ctx, volumeData, gridDim, gridTexDim, isoValue, gridScale) {\r\n    var gl = ctx.gl, resources = ctx.resources;\r\n    var width = volumeData.getWidth();\r\n    var height = volumeData.getHeight();\r\n    if (!ctx.namedFramebuffers[ActiveVoxelsName]) {\r\n        ctx.namedFramebuffers[ActiveVoxelsName] = resources.framebuffer();\r\n    }\r\n    var framebuffer = ctx.namedFramebuffers[ActiveVoxelsName];\r\n    framebuffer.bind();\r\n    if (!ctx.namedTextures[ActiveVoxelsName]) {\r\n        ctx.namedTextures[ActiveVoxelsName] = resources.texture('image-uint8', 'rgba', 'ubyte', 'nearest');\r\n    }\r\n    var activeVoxelsTex = ctx.namedTextures[ActiveVoxelsName];\r\n    activeVoxelsTex.define(width, height);\r\n    var renderable = getActiveVoxelsRenderable(ctx, volumeData, gridDim, gridTexDim, isoValue, gridScale);\r\n    ctx.state.currentRenderItemId = -1;\r\n    activeVoxelsTex.attachFramebuffer(framebuffer, 0);\r\n    setRenderingDefaults(ctx);\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    gl.scissor(0, 0, gridTexDim[0], gridTexDim[1]);\r\n    renderable.render();\r\n    // console.log('gridScale', gridScale, 'gridTexDim', gridTexDim, 'gridDim', gridDim);\r\n    // console.log('volumeData', volumeData);\r\n    // console.log('at', readTexture(ctx, activeVoxelsTex));\r\n    gl.finish();\r\n    return activeVoxelsTex;\r\n}\r\n//# sourceMappingURL=active-voxels.js.map"]},"metadata":{},"sourceType":"module"}