{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { FormatPropertyProvider } from '../../../../mol-model-formats/structure/common/property';\nimport { CustomPropertyDescriptor } from '../../../custom-property';\nimport { Column, Table } from '../../../../mol-data/db';\nimport { CifWriter } from '../../../../mol-io/writer/cif';\nimport { MmcifFormat } from '../../../../mol-model-formats/structure/mmcif';\nimport { toTable } from '../../../../mol-io/reader/cif/schema';\nexport var GlobalModelTransformInfo;\n\n(function (GlobalModelTransformInfo) {\n  var _a;\n\n  var CategoryName = 'molstar_global_model_transform_info';\n  GlobalModelTransformInfo.Schema = (_a = {}, _a[CategoryName] = {\n    matrix: Column.Schema.Matrix(4, 4, Column.Schema.float)\n  }, _a);\n  GlobalModelTransformInfo.Descriptor = CustomPropertyDescriptor({\n    name: CategoryName,\n    cifExport: {\n      categories: [{\n        name: CategoryName,\n        instance: function (ctx) {\n          var mat = get(ctx.firstModel);\n          if (!mat) return CifWriter.Category.Empty;\n          var table = Table.ofRows(GlobalModelTransformInfo.Schema.molstar_global_model_transform_info, [{\n            matrix: mat\n          }]);\n          return CifWriter.Category.ofTable(table);\n        }\n      }],\n      prefix: 'molstar'\n    }\n  });\n  GlobalModelTransformInfo.Provider = FormatPropertyProvider.create(GlobalModelTransformInfo.Descriptor);\n\n  function attach(model, matrix) {\n    if (!model.customProperties.has(GlobalModelTransformInfo.Descriptor)) {\n      model.customProperties.add(GlobalModelTransformInfo.Descriptor);\n    }\n\n    GlobalModelTransformInfo.Provider.set(model, matrix);\n  }\n\n  GlobalModelTransformInfo.attach = attach;\n\n  function get(model) {\n    return GlobalModelTransformInfo.Provider.get(model);\n  }\n\n  GlobalModelTransformInfo.get = get;\n\n  function fromMmCif(model) {\n    if (!MmcifFormat.is(model.sourceData)) return;\n    var cat = model.sourceData.data.frame.categories[CategoryName];\n    if (!cat) return;\n    var table = toTable(GlobalModelTransformInfo.Schema[CategoryName], cat);\n    if (table._rowCount === 0) return;\n    return table.matrix.value(0);\n  }\n\n  GlobalModelTransformInfo.fromMmCif = fromMmCif;\n\n  function hasData(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var cat = model.sourceData.data.frame.categories[CategoryName];\n    return !!cat && cat.rowCount > 0;\n  }\n\n  GlobalModelTransformInfo.hasData = hasData;\n\n  function writeMmCif(encoder, matrix) {\n    encoder.writeCategory({\n      name: CategoryName,\n      instance: function () {\n        var table = Table.ofRows(GlobalModelTransformInfo.Schema.molstar_global_model_transform_info, [{\n          matrix: matrix\n        }]);\n        return CifWriter.Category.ofTable(table);\n      }\n    });\n  }\n\n  GlobalModelTransformInfo.writeMmCif = writeMmCif;\n})(GlobalModelTransformInfo || (GlobalModelTransformInfo = {}));","map":{"version":3,"sources":["../../../../../src/mol-model/structure/model/properties/global-transform.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { FormatPropertyProvider } from '../../../../mol-model-formats/structure/common/property';\r\nimport { CustomPropertyDescriptor } from '../../../custom-property';\r\nimport { Column, Table } from '../../../../mol-data/db';\r\nimport { CifWriter } from '../../../../mol-io/writer/cif';\r\nimport { MmcifFormat } from '../../../../mol-model-formats/structure/mmcif';\r\nimport { toTable } from '../../../../mol-io/reader/cif/schema';\r\nexport var GlobalModelTransformInfo;\r\n(function (GlobalModelTransformInfo) {\r\n    var _a;\r\n    var CategoryName = 'molstar_global_model_transform_info';\r\n    GlobalModelTransformInfo.Schema = (_a = {},\r\n        _a[CategoryName] = {\r\n            matrix: Column.Schema.Matrix(4, 4, Column.Schema.float)\r\n        },\r\n        _a);\r\n    GlobalModelTransformInfo.Descriptor = CustomPropertyDescriptor({\r\n        name: CategoryName,\r\n        cifExport: {\r\n            categories: [{\r\n                    name: CategoryName,\r\n                    instance: function (ctx) {\r\n                        var mat = get(ctx.firstModel);\r\n                        if (!mat)\r\n                            return CifWriter.Category.Empty;\r\n                        var table = Table.ofRows(GlobalModelTransformInfo.Schema.molstar_global_model_transform_info, [{ matrix: mat }]);\r\n                        return CifWriter.Category.ofTable(table);\r\n                    }\r\n                }],\r\n            prefix: 'molstar'\r\n        }\r\n    });\r\n    GlobalModelTransformInfo.Provider = FormatPropertyProvider.create(GlobalModelTransformInfo.Descriptor);\r\n    function attach(model, matrix) {\r\n        if (!model.customProperties.has(GlobalModelTransformInfo.Descriptor)) {\r\n            model.customProperties.add(GlobalModelTransformInfo.Descriptor);\r\n        }\r\n        GlobalModelTransformInfo.Provider.set(model, matrix);\r\n    }\r\n    GlobalModelTransformInfo.attach = attach;\r\n    function get(model) {\r\n        return GlobalModelTransformInfo.Provider.get(model);\r\n    }\r\n    GlobalModelTransformInfo.get = get;\r\n    function fromMmCif(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return;\r\n        var cat = model.sourceData.data.frame.categories[CategoryName];\r\n        if (!cat)\r\n            return;\r\n        var table = toTable(GlobalModelTransformInfo.Schema[CategoryName], cat);\r\n        if (table._rowCount === 0)\r\n            return;\r\n        return table.matrix.value(0);\r\n    }\r\n    GlobalModelTransformInfo.fromMmCif = fromMmCif;\r\n    function hasData(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var cat = model.sourceData.data.frame.categories[CategoryName];\r\n        return !!cat && cat.rowCount > 0;\r\n    }\r\n    GlobalModelTransformInfo.hasData = hasData;\r\n    function writeMmCif(encoder, matrix) {\r\n        encoder.writeCategory({\r\n            name: CategoryName,\r\n            instance: function () {\r\n                var table = Table.ofRows(GlobalModelTransformInfo.Schema.molstar_global_model_transform_info, [{ matrix: matrix }]);\r\n                return CifWriter.Category.ofTable(table);\r\n            }\r\n        });\r\n    }\r\n    GlobalModelTransformInfo.writeMmCif = writeMmCif;\r\n})(GlobalModelTransformInfo || (GlobalModelTransformInfo = {}));\r\n//# sourceMappingURL=global-transform.js.map"]},"metadata":{},"sourceType":"module"}