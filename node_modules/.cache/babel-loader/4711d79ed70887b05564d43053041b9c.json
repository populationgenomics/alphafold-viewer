{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nexport function createState(gl) {\n  var enabledCapabilities = {};\n  var currentFrontFace = gl.getParameter(gl.FRONT_FACE);\n  var currentCullFace = gl.getParameter(gl.CULL_FACE_MODE);\n  var currentDepthMask = gl.getParameter(gl.DEPTH_WRITEMASK);\n  var currentColorMask = gl.getParameter(gl.COLOR_WRITEMASK);\n  var currentClearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);\n  var currentBlendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\n  var currentBlendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\n  var currentBlendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n  var currentBlendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n  var currentBlendEqRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\n  var currentBlendEqAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\n  return {\n    currentProgramId: -1,\n    currentMaterialId: -1,\n    currentRenderItemId: -1,\n    enable: function (cap) {\n      if (enabledCapabilities[cap] !== true) {\n        gl.enable(cap);\n        enabledCapabilities[cap] = true;\n      }\n    },\n    disable: function (cap) {\n      if (enabledCapabilities[cap] !== false) {\n        gl.disable(cap);\n        enabledCapabilities[cap] = false;\n      }\n    },\n    frontFace: function (mode) {\n      if (mode !== currentFrontFace) {\n        gl.frontFace(mode);\n        currentFrontFace = mode;\n      }\n    },\n    cullFace: function (mode) {\n      if (mode !== currentCullFace) {\n        gl.cullFace(mode);\n        currentCullFace = mode;\n      }\n    },\n    depthMask: function (flag) {\n      if (flag !== currentDepthMask) {\n        gl.depthMask(flag);\n        currentDepthMask = flag;\n      }\n    },\n    colorMask: function (red, green, blue, alpha) {\n      if (red !== currentColorMask[0] || green !== currentColorMask[1] || blue !== currentColorMask[2] || alpha !== currentColorMask[3]) {\n        gl.colorMask(red, green, blue, alpha);\n        currentColorMask[0] = red;\n        currentColorMask[1] = green;\n        currentColorMask[2] = blue;\n        currentColorMask[3] = alpha;\n      }\n    },\n    clearColor: function (red, green, blue, alpha) {\n      if (red !== currentClearColor[0] || green !== currentClearColor[1] || blue !== currentClearColor[2] || alpha !== currentClearColor[3]) {\n        gl.clearColor(red, green, blue, alpha);\n        currentClearColor[0] = red;\n        currentClearColor[1] = green;\n        currentClearColor[2] = blue;\n        currentClearColor[3] = alpha;\n      }\n    },\n    blendFunc: function (src, dst) {\n      if (src !== currentBlendSrcRGB || dst !== currentBlendDstRGB || src !== currentBlendSrcAlpha || dst !== currentBlendDstAlpha) {\n        gl.blendFunc(src, dst);\n        currentBlendSrcRGB = src;\n        currentBlendDstRGB = dst;\n        currentBlendSrcAlpha = src;\n        currentBlendDstAlpha = dst;\n      }\n    },\n    blendFuncSeparate: function (srcRGB, dstRGB, srcAlpha, dstAlpha) {\n      if (srcRGB !== currentBlendSrcRGB || dstRGB !== currentBlendDstRGB || srcAlpha !== currentBlendSrcAlpha || dstAlpha !== currentBlendDstAlpha) {\n        gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n        currentBlendSrcRGB = srcRGB;\n        currentBlendDstRGB = dstRGB;\n        currentBlendSrcAlpha = srcAlpha;\n        currentBlendDstAlpha = dstAlpha;\n      }\n    },\n    blendEquation: function (mode) {\n      if (mode !== currentBlendEqRGB || mode !== currentBlendEqAlpha) {\n        gl.blendEquation(mode);\n        currentBlendEqRGB = mode;\n        currentBlendEqAlpha = mode;\n      }\n    },\n    blendEquationSeparate: function (modeRGB, modeAlpha) {\n      if (modeRGB !== currentBlendEqRGB || modeAlpha !== currentBlendEqAlpha) {\n        gl.blendEquationSeparate(modeRGB, modeAlpha);\n        currentBlendEqRGB = modeRGB;\n        currentBlendEqAlpha = modeAlpha;\n      }\n    },\n    reset: function () {\n      enabledCapabilities = {};\n      currentFrontFace = gl.getParameter(gl.FRONT_FACE);\n      currentCullFace = gl.getParameter(gl.CULL_FACE_MODE);\n      currentDepthMask = gl.getParameter(gl.DEPTH_WRITEMASK);\n      currentColorMask = gl.getParameter(gl.COLOR_WRITEMASK);\n      currentClearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);\n      currentBlendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\n      currentBlendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\n      currentBlendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n      currentBlendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n      currentBlendEqRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\n      currentBlendEqAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/state.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nexport function createState(gl) {\r\n    var enabledCapabilities = {};\r\n    var currentFrontFace = gl.getParameter(gl.FRONT_FACE);\r\n    var currentCullFace = gl.getParameter(gl.CULL_FACE_MODE);\r\n    var currentDepthMask = gl.getParameter(gl.DEPTH_WRITEMASK);\r\n    var currentColorMask = gl.getParameter(gl.COLOR_WRITEMASK);\r\n    var currentClearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);\r\n    var currentBlendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\r\n    var currentBlendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\r\n    var currentBlendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\r\n    var currentBlendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\r\n    var currentBlendEqRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\r\n    var currentBlendEqAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\r\n    return {\r\n        currentProgramId: -1,\r\n        currentMaterialId: -1,\r\n        currentRenderItemId: -1,\r\n        enable: function (cap) {\r\n            if (enabledCapabilities[cap] !== true) {\r\n                gl.enable(cap);\r\n                enabledCapabilities[cap] = true;\r\n            }\r\n        },\r\n        disable: function (cap) {\r\n            if (enabledCapabilities[cap] !== false) {\r\n                gl.disable(cap);\r\n                enabledCapabilities[cap] = false;\r\n            }\r\n        },\r\n        frontFace: function (mode) {\r\n            if (mode !== currentFrontFace) {\r\n                gl.frontFace(mode);\r\n                currentFrontFace = mode;\r\n            }\r\n        },\r\n        cullFace: function (mode) {\r\n            if (mode !== currentCullFace) {\r\n                gl.cullFace(mode);\r\n                currentCullFace = mode;\r\n            }\r\n        },\r\n        depthMask: function (flag) {\r\n            if (flag !== currentDepthMask) {\r\n                gl.depthMask(flag);\r\n                currentDepthMask = flag;\r\n            }\r\n        },\r\n        colorMask: function (red, green, blue, alpha) {\r\n            if (red !== currentColorMask[0] || green !== currentColorMask[1] || blue !== currentColorMask[2] || alpha !== currentColorMask[3]) {\r\n                gl.colorMask(red, green, blue, alpha);\r\n                currentColorMask[0] = red;\r\n                currentColorMask[1] = green;\r\n                currentColorMask[2] = blue;\r\n                currentColorMask[3] = alpha;\r\n            }\r\n        },\r\n        clearColor: function (red, green, blue, alpha) {\r\n            if (red !== currentClearColor[0] || green !== currentClearColor[1] || blue !== currentClearColor[2] || alpha !== currentClearColor[3]) {\r\n                gl.clearColor(red, green, blue, alpha);\r\n                currentClearColor[0] = red;\r\n                currentClearColor[1] = green;\r\n                currentClearColor[2] = blue;\r\n                currentClearColor[3] = alpha;\r\n            }\r\n        },\r\n        blendFunc: function (src, dst) {\r\n            if (src !== currentBlendSrcRGB || dst !== currentBlendDstRGB || src !== currentBlendSrcAlpha || dst !== currentBlendDstAlpha) {\r\n                gl.blendFunc(src, dst);\r\n                currentBlendSrcRGB = src;\r\n                currentBlendDstRGB = dst;\r\n                currentBlendSrcAlpha = src;\r\n                currentBlendDstAlpha = dst;\r\n            }\r\n        },\r\n        blendFuncSeparate: function (srcRGB, dstRGB, srcAlpha, dstAlpha) {\r\n            if (srcRGB !== currentBlendSrcRGB || dstRGB !== currentBlendDstRGB || srcAlpha !== currentBlendSrcAlpha || dstAlpha !== currentBlendDstAlpha) {\r\n                gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n                currentBlendSrcRGB = srcRGB;\r\n                currentBlendDstRGB = dstRGB;\r\n                currentBlendSrcAlpha = srcAlpha;\r\n                currentBlendDstAlpha = dstAlpha;\r\n            }\r\n        },\r\n        blendEquation: function (mode) {\r\n            if (mode !== currentBlendEqRGB || mode !== currentBlendEqAlpha) {\r\n                gl.blendEquation(mode);\r\n                currentBlendEqRGB = mode;\r\n                currentBlendEqAlpha = mode;\r\n            }\r\n        },\r\n        blendEquationSeparate: function (modeRGB, modeAlpha) {\r\n            if (modeRGB !== currentBlendEqRGB || modeAlpha !== currentBlendEqAlpha) {\r\n                gl.blendEquationSeparate(modeRGB, modeAlpha);\r\n                currentBlendEqRGB = modeRGB;\r\n                currentBlendEqAlpha = modeAlpha;\r\n            }\r\n        },\r\n        reset: function () {\r\n            enabledCapabilities = {};\r\n            currentFrontFace = gl.getParameter(gl.FRONT_FACE);\r\n            currentCullFace = gl.getParameter(gl.CULL_FACE_MODE);\r\n            currentDepthMask = gl.getParameter(gl.DEPTH_WRITEMASK);\r\n            currentColorMask = gl.getParameter(gl.COLOR_WRITEMASK);\r\n            currentClearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);\r\n            currentBlendSrcRGB = gl.getParameter(gl.BLEND_SRC_RGB);\r\n            currentBlendDstRGB = gl.getParameter(gl.BLEND_DST_RGB);\r\n            currentBlendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\r\n            currentBlendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\r\n            currentBlendEqRGB = gl.getParameter(gl.BLEND_EQUATION_RGB);\r\n            currentBlendEqAlpha = gl.getParameter(gl.BLEND_EQUATION_ALPHA);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"module"}