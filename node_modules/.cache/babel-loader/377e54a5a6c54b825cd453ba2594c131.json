{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column } from '../../../mol-data/db';\nimport { Tokenizer } from '../common/text/tokenizer';\nimport { FixedColumnProvider as FixedColumn } from '../common/text/column/fixed';\nimport { ReaderResult as Result } from '../result';\nimport { Task } from '../../../mol-task';\n\nfunction createEmptyHeader() {\n  return {\n    title: '',\n    timeInPs: 0,\n    hasVelocities: false,\n    precision: {\n      position: 0,\n      velocity: 0\n    },\n    box: [0, 0, 0]\n  };\n}\n\nfunction State(tokenizer, runtimeCtx) {\n  return {\n    tokenizer: tokenizer,\n    header: createEmptyHeader(),\n    numberOfAtoms: 0,\n    runtimeCtx: runtimeCtx\n  };\n}\n/**\r\n * title string (free format string, optional time in ps after 't=')\r\n */\n\n\nfunction handleTitleString(state) {\n  var tokenizer = state.tokenizer,\n      header = state.header;\n  var line = Tokenizer.readLine(tokenizer); // skip potential empty lines...\n\n  if (line.trim().length === 0) {\n    line = Tokenizer.readLine(tokenizer);\n  }\n\n  var timeOffset = line.lastIndexOf('t=');\n\n  if (timeOffset >= 0) {\n    header.timeInPs = parseFloat(line.substring(timeOffset + 2));\n    header.title = line.substring(0, timeOffset).trim();\n\n    if (header.title && header.title[header.title.length - 1] === ',') {\n      header.title = header.title.substring(0, header.title.length - 1);\n    }\n  } else {\n    header.title = line;\n  }\n}\n/**\r\n * number of atoms (free format integer)\r\n */\n\n\nfunction handleNumberOfAtoms(state) {\n  var tokenizer = state.tokenizer;\n  Tokenizer.markLine(tokenizer);\n  var line = Tokenizer.getTokenString(tokenizer);\n  state.numberOfAtoms = parseInt(line);\n}\n/**\r\n * This format is fixed, ie. all columns are in a fixed position.\r\n * Optionally (for now only yet with trjconv) you can write gro files\r\n * with any number of decimal places, the format will then be n+5\r\n * positions with n decimal places (n+1 for velocities) in stead\r\n * of 8 with 3 (with 4 for velocities). Upon reading, the precision\r\n * will be inferred from the distance between the decimal points\r\n * (which will be n+5). Columns contain the following information\r\n * (from left to right):\r\n *     residue number (5 positions, integer)\r\n *     residue name (5 characters)\r\n *     atom name (5 characters)\r\n *     atom number (5 positions, integer)\r\n *     position (in nm, x y z in 3 columns, each 8 positions with 3 decimal places)\r\n *     velocity (in nm/ps (or km/s), x y z in 3 columns, each 8 positions with 4 decimal places)\r\n */\n\n\nfunction handleAtoms(state) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenizer, numberOfAtoms, lines, positionSample, precisions, hasVelocities, pO, pW, vO, vW, col, undef, ret;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          tokenizer = state.tokenizer, numberOfAtoms = state.numberOfAtoms;\n          return [4\n          /*yield*/\n          , Tokenizer.readLinesAsync(tokenizer, numberOfAtoms, state.runtimeCtx, 100000)];\n\n        case 1:\n          lines = _a.sent();\n          positionSample = tokenizer.data.substring(lines.indices[0], lines.indices[1]).substring(20);\n          precisions = positionSample.match(/\\.\\d+/g);\n          hasVelocities = precisions.length === 6;\n          state.header.hasVelocities = hasVelocities;\n          state.header.precision.position = precisions[0].length - 1;\n          state.header.precision.velocity = hasVelocities ? precisions[3].length - 1 : 0;\n          pO = 20;\n          pW = state.header.precision.position + 5;\n          vO = pO + 3 * pW;\n          vW = state.header.precision.velocity + 4;\n          col = FixedColumn(lines);\n          undef = Column.Undefined(state.numberOfAtoms, Column.Schema.float);\n          ret = {\n            count: state.numberOfAtoms,\n            residueNumber: col(0, 5, Column.Schema.int),\n            residueName: col(5, 5, Column.Schema.str),\n            atomName: col(10, 5, Column.Schema.str),\n            atomNumber: col(15, 5, Column.Schema.int),\n            x: col(pO, pW, Column.Schema.float),\n            y: col(pO + pW, pW, Column.Schema.float),\n            z: col(pO + 2 * pW, pW, Column.Schema.float),\n            vx: hasVelocities ? col(vO, vW, Column.Schema.float) : undef,\n            vy: hasVelocities ? col(vO + vW, vW, Column.Schema.float) : undef,\n            vz: hasVelocities ? col(vO + 2 * vW, vW, Column.Schema.float) : undef\n          };\n          return [2\n          /*return*/\n          , ret];\n      }\n    });\n  });\n}\n/**\r\n * box vectors (free format, space separated reals), values:\r\n * v1(x) v2(y) v3(z) v1(y) v1(z) v2(x) v2(z) v3(x) v3(y),\r\n * the last 6 values may be omitted (they will be set to zero).\r\n * Gromacs only supports boxes with v1(y)=v1(z)=v2(z)=0.\r\n */\n\n\nfunction handleBoxVectors(state) {\n  var tokenizer = state.tokenizer;\n  var values = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\n  state.header.box = [+values[0], +values[1], +values[2]];\n}\n\nfunction parseInternal(data, ctx) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenizer, structures, state, atoms, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          tokenizer = Tokenizer(data);\n          return [4\n          /*yield*/\n          , ctx.update({\n            message: 'Parsing...',\n            current: 0,\n            max: data.length\n          })];\n\n        case 1:\n          _a.sent();\n\n          structures = [];\n          _a.label = 2;\n\n        case 2:\n          if (!(tokenizer.position < data.length)) return [3\n          /*break*/\n          , 4];\n          state = State(tokenizer, ctx);\n          handleTitleString(state);\n          handleNumberOfAtoms(state);\n          return [4\n          /*yield*/\n          , handleAtoms(state)];\n\n        case 3:\n          atoms = _a.sent();\n          handleBoxVectors(state);\n          structures.push({\n            header: state.header,\n            atoms: atoms\n          });\n          return [3\n          /*break*/\n          , 2];\n\n        case 4:\n          result = {\n            structures: structures\n          };\n          return [2\n          /*return*/\n          , Result.success(result)];\n      }\n    });\n  });\n}\n\nexport function parseGRO(data) {\n  var _this = this;\n\n  return Task.create('Parse GRO', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , parseInternal(data, ctx)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/gro/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column } from '../../../mol-data/db';\r\nimport { Tokenizer } from '../common/text/tokenizer';\r\nimport { FixedColumnProvider as FixedColumn } from '../common/text/column/fixed';\r\nimport { ReaderResult as Result } from '../result';\r\nimport { Task } from '../../../mol-task';\r\nfunction createEmptyHeader() {\r\n    return {\r\n        title: '',\r\n        timeInPs: 0,\r\n        hasVelocities: false,\r\n        precision: { position: 0, velocity: 0 },\r\n        box: [0, 0, 0]\r\n    };\r\n}\r\nfunction State(tokenizer, runtimeCtx) {\r\n    return {\r\n        tokenizer: tokenizer,\r\n        header: createEmptyHeader(),\r\n        numberOfAtoms: 0,\r\n        runtimeCtx: runtimeCtx\r\n    };\r\n}\r\n/**\r\n * title string (free format string, optional time in ps after 't=')\r\n */\r\nfunction handleTitleString(state) {\r\n    var tokenizer = state.tokenizer, header = state.header;\r\n    var line = Tokenizer.readLine(tokenizer);\r\n    // skip potential empty lines...\r\n    if (line.trim().length === 0) {\r\n        line = Tokenizer.readLine(tokenizer);\r\n    }\r\n    var timeOffset = line.lastIndexOf('t=');\r\n    if (timeOffset >= 0) {\r\n        header.timeInPs = parseFloat(line.substring(timeOffset + 2));\r\n        header.title = line.substring(0, timeOffset).trim();\r\n        if (header.title && header.title[header.title.length - 1] === ',') {\r\n            header.title = header.title.substring(0, header.title.length - 1);\r\n        }\r\n    }\r\n    else {\r\n        header.title = line;\r\n    }\r\n}\r\n/**\r\n * number of atoms (free format integer)\r\n */\r\nfunction handleNumberOfAtoms(state) {\r\n    var tokenizer = state.tokenizer;\r\n    Tokenizer.markLine(tokenizer);\r\n    var line = Tokenizer.getTokenString(tokenizer);\r\n    state.numberOfAtoms = parseInt(line);\r\n}\r\n/**\r\n * This format is fixed, ie. all columns are in a fixed position.\r\n * Optionally (for now only yet with trjconv) you can write gro files\r\n * with any number of decimal places, the format will then be n+5\r\n * positions with n decimal places (n+1 for velocities) in stead\r\n * of 8 with 3 (with 4 for velocities). Upon reading, the precision\r\n * will be inferred from the distance between the decimal points\r\n * (which will be n+5). Columns contain the following information\r\n * (from left to right):\r\n *     residue number (5 positions, integer)\r\n *     residue name (5 characters)\r\n *     atom name (5 characters)\r\n *     atom number (5 positions, integer)\r\n *     position (in nm, x y z in 3 columns, each 8 positions with 3 decimal places)\r\n *     velocity (in nm/ps (or km/s), x y z in 3 columns, each 8 positions with 4 decimal places)\r\n */\r\nfunction handleAtoms(state) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var tokenizer, numberOfAtoms, lines, positionSample, precisions, hasVelocities, pO, pW, vO, vW, col, undef, ret;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    tokenizer = state.tokenizer, numberOfAtoms = state.numberOfAtoms;\r\n                    return [4 /*yield*/, Tokenizer.readLinesAsync(tokenizer, numberOfAtoms, state.runtimeCtx, 100000)];\r\n                case 1:\r\n                    lines = _a.sent();\r\n                    positionSample = tokenizer.data.substring(lines.indices[0], lines.indices[1]).substring(20);\r\n                    precisions = positionSample.match(/\\.\\d+/g);\r\n                    hasVelocities = precisions.length === 6;\r\n                    state.header.hasVelocities = hasVelocities;\r\n                    state.header.precision.position = precisions[0].length - 1;\r\n                    state.header.precision.velocity = hasVelocities ? precisions[3].length - 1 : 0;\r\n                    pO = 20;\r\n                    pW = state.header.precision.position + 5;\r\n                    vO = pO + 3 * pW;\r\n                    vW = state.header.precision.velocity + 4;\r\n                    col = FixedColumn(lines);\r\n                    undef = Column.Undefined(state.numberOfAtoms, Column.Schema.float);\r\n                    ret = {\r\n                        count: state.numberOfAtoms,\r\n                        residueNumber: col(0, 5, Column.Schema.int),\r\n                        residueName: col(5, 5, Column.Schema.str),\r\n                        atomName: col(10, 5, Column.Schema.str),\r\n                        atomNumber: col(15, 5, Column.Schema.int),\r\n                        x: col(pO, pW, Column.Schema.float),\r\n                        y: col(pO + pW, pW, Column.Schema.float),\r\n                        z: col(pO + 2 * pW, pW, Column.Schema.float),\r\n                        vx: hasVelocities ? col(vO, vW, Column.Schema.float) : undef,\r\n                        vy: hasVelocities ? col(vO + vW, vW, Column.Schema.float) : undef,\r\n                        vz: hasVelocities ? col(vO + 2 * vW, vW, Column.Schema.float) : undef,\r\n                    };\r\n                    return [2 /*return*/, ret];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * box vectors (free format, space separated reals), values:\r\n * v1(x) v2(y) v3(z) v1(y) v1(z) v2(x) v2(z) v3(x) v3(y),\r\n * the last 6 values may be omitted (they will be set to zero).\r\n * Gromacs only supports boxes with v1(y)=v1(z)=v2(z)=0.\r\n */\r\nfunction handleBoxVectors(state) {\r\n    var tokenizer = state.tokenizer;\r\n    var values = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\r\n    state.header.box = [+values[0], +values[1], +values[2]];\r\n}\r\nfunction parseInternal(data, ctx) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var tokenizer, structures, state, atoms, result;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    tokenizer = Tokenizer(data);\r\n                    return [4 /*yield*/, ctx.update({ message: 'Parsing...', current: 0, max: data.length })];\r\n                case 1:\r\n                    _a.sent();\r\n                    structures = [];\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!(tokenizer.position < data.length)) return [3 /*break*/, 4];\r\n                    state = State(tokenizer, ctx);\r\n                    handleTitleString(state);\r\n                    handleNumberOfAtoms(state);\r\n                    return [4 /*yield*/, handleAtoms(state)];\r\n                case 3:\r\n                    atoms = _a.sent();\r\n                    handleBoxVectors(state);\r\n                    structures.push({ header: state.header, atoms: atoms });\r\n                    return [3 /*break*/, 2];\r\n                case 4:\r\n                    result = { structures: structures };\r\n                    return [2 /*return*/, Result.success(result)];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function parseGRO(data) {\r\n    var _this = this;\r\n    return Task.create('Parse GRO', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, parseInternal(data, ctx)];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}