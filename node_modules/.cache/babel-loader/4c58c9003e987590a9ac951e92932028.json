{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { utf8Read } from '../utf8';\nexport function decodeMsgPack(buffer) {\n  return parse({\n    buffer: buffer,\n    offset: 0,\n    dataView: new DataView(buffer.buffer)\n  });\n}\n/**\r\n * decode all key-value pairs of a map into an object\r\n */\n\nfunction map(state, length) {\n  var value = {};\n\n  for (var i = 0; i < length; i++) {\n    var key = parse(state);\n    value[key] = parse(state);\n  }\n\n  return value;\n}\n/**\r\n * decode binary array\r\n */\n\n\nfunction bin(state, length) {\n  // This approach to binary parsing wastes a bit of memory to trade for speed compared to:\n  //\n  //   let value = buffer.subarray(offset, offset + length); //new Uint8Array(buffer.buffer, offset, length);\n  //\n  // It turns out that using the view created by subarray probably uses DataView\n  // in the background, which causes the element access to be several times slower\n  // than creating the new byte array.\n  var value = new Uint8Array(length);\n  var o = state.offset;\n\n  for (var i = 0; i < length; i++) value[i] = state.buffer[i + o];\n\n  state.offset += length;\n  return value;\n}\n/**\r\n * decode string\r\n */\n\n\nfunction str(state, length) {\n  var value = utf8Read(state.buffer, state.offset, length);\n  state.offset += length;\n  return value;\n}\n/**\r\n * decode array\r\n */\n\n\nfunction array(state, length) {\n  var value = new Array(length);\n\n  for (var i = 0; i < length; i++) {\n    value[i] = parse(state);\n  }\n\n  return value;\n}\n/**\r\n * recursively parse the MessagePack data and return decoded MessagePack data\r\n */\n\n\nfunction parse(state) {\n  var type = state.buffer[state.offset];\n  var value, length; // Positive FixInt\n\n  if ((type & 0x80) === 0x00) {\n    state.offset++;\n    return type;\n  } // FixMap\n\n\n  if ((type & 0xf0) === 0x80) {\n    length = type & 0x0f;\n    state.offset++;\n    return map(state, length);\n  } // FixArray\n\n\n  if ((type & 0xf0) === 0x90) {\n    length = type & 0x0f;\n    state.offset++;\n    return array(state, length);\n  } // FixStr\n\n\n  if ((type & 0xe0) === 0xa0) {\n    length = type & 0x1f;\n    state.offset++;\n    return str(state, length);\n  } // Negative FixInt\n\n\n  if ((type & 0xe0) === 0xe0) {\n    value = state.dataView.getInt8(state.offset);\n    state.offset++;\n    return value;\n  }\n\n  switch (type) {\n    // nil\n    case 0xc0:\n      state.offset++;\n      return null;\n    // false\n\n    case 0xc2:\n      state.offset++;\n      return false;\n    // true\n\n    case 0xc3:\n      state.offset++;\n      return true;\n    // bin 8\n\n    case 0xc4:\n      length = state.dataView.getUint8(state.offset + 1);\n      state.offset += 2;\n      return bin(state, length);\n    // bin 16\n\n    case 0xc5:\n      length = state.dataView.getUint16(state.offset + 1);\n      state.offset += 3;\n      return bin(state, length);\n    // bin 32\n\n    case 0xc6:\n      length = state.dataView.getUint32(state.offset + 1);\n      state.offset += 5;\n      return bin(state, length);\n    // float 32\n\n    case 0xca:\n      value = state.dataView.getFloat32(state.offset + 1);\n      state.offset += 5;\n      return value;\n    // float 64\n\n    case 0xcb:\n      value = state.dataView.getFloat64(state.offset + 1);\n      state.offset += 9;\n      return value;\n    // uint8\n\n    case 0xcc:\n      value = state.buffer[state.offset + 1];\n      state.offset += 2;\n      return value;\n    // uint 16\n\n    case 0xcd:\n      value = state.dataView.getUint16(state.offset + 1);\n      state.offset += 3;\n      return value;\n    // uint 32\n\n    case 0xce:\n      value = state.dataView.getUint32(state.offset + 1);\n      state.offset += 5;\n      return value;\n    // int 8\n\n    case 0xd0:\n      value = state.dataView.getInt8(state.offset + 1);\n      state.offset += 2;\n      return value;\n    // int 16\n\n    case 0xd1:\n      value = state.dataView.getInt16(state.offset + 1);\n      state.offset += 3;\n      return value;\n    // int 32\n\n    case 0xd2:\n      value = state.dataView.getInt32(state.offset + 1);\n      state.offset += 5;\n      return value;\n    // str 8\n\n    case 0xd9:\n      length = state.dataView.getUint8(state.offset + 1);\n      state.offset += 2;\n      return str(state, length);\n    // str 16\n\n    case 0xda:\n      length = state.dataView.getUint16(state.offset + 1);\n      state.offset += 3;\n      return str(state, length);\n    // str 32\n\n    case 0xdb:\n      length = state.dataView.getUint32(state.offset + 1);\n      state.offset += 5;\n      return str(state, length);\n    // array 16\n\n    case 0xdc:\n      length = state.dataView.getUint16(state.offset + 1);\n      state.offset += 3;\n      return array(state, length);\n    // array 32\n\n    case 0xdd:\n      length = state.dataView.getUint32(state.offset + 1);\n      state.offset += 5;\n      return array(state, length);\n    // map 16:\n\n    case 0xde:\n      length = state.dataView.getUint16(state.offset + 1);\n      state.offset += 3;\n      return map(state, length);\n    // map 32\n\n    case 0xdf:\n      length = state.dataView.getUint32(state.offset + 1);\n      state.offset += 5;\n      return map(state, length);\n  }\n\n  throw new Error('Unknown type 0x' + type.toString(16));\n}","map":{"version":3,"sources":["../../../../src/mol-io/common/msgpack/decode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { utf8Read } from '../utf8';\r\nexport function decodeMsgPack(buffer) {\r\n    return parse({ buffer: buffer, offset: 0, dataView: new DataView(buffer.buffer) });\r\n}\r\n/**\r\n * decode all key-value pairs of a map into an object\r\n */\r\nfunction map(state, length) {\r\n    var value = {};\r\n    for (var i = 0; i < length; i++) {\r\n        var key = parse(state);\r\n        value[key] = parse(state);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * decode binary array\r\n */\r\nfunction bin(state, length) {\r\n    // This approach to binary parsing wastes a bit of memory to trade for speed compared to:\r\n    //\r\n    //   let value = buffer.subarray(offset, offset + length); //new Uint8Array(buffer.buffer, offset, length);\r\n    //\r\n    // It turns out that using the view created by subarray probably uses DataView\r\n    // in the background, which causes the element access to be several times slower\r\n    // than creating the new byte array.\r\n    var value = new Uint8Array(length);\r\n    var o = state.offset;\r\n    for (var i = 0; i < length; i++)\r\n        value[i] = state.buffer[i + o];\r\n    state.offset += length;\r\n    return value;\r\n}\r\n/**\r\n * decode string\r\n */\r\nfunction str(state, length) {\r\n    var value = utf8Read(state.buffer, state.offset, length);\r\n    state.offset += length;\r\n    return value;\r\n}\r\n/**\r\n * decode array\r\n */\r\nfunction array(state, length) {\r\n    var value = new Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n        value[i] = parse(state);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * recursively parse the MessagePack data and return decoded MessagePack data\r\n */\r\nfunction parse(state) {\r\n    var type = state.buffer[state.offset];\r\n    var value, length;\r\n    // Positive FixInt\r\n    if ((type & 0x80) === 0x00) {\r\n        state.offset++;\r\n        return type;\r\n    }\r\n    // FixMap\r\n    if ((type & 0xf0) === 0x80) {\r\n        length = type & 0x0f;\r\n        state.offset++;\r\n        return map(state, length);\r\n    }\r\n    // FixArray\r\n    if ((type & 0xf0) === 0x90) {\r\n        length = type & 0x0f;\r\n        state.offset++;\r\n        return array(state, length);\r\n    }\r\n    // FixStr\r\n    if ((type & 0xe0) === 0xa0) {\r\n        length = type & 0x1f;\r\n        state.offset++;\r\n        return str(state, length);\r\n    }\r\n    // Negative FixInt\r\n    if ((type & 0xe0) === 0xe0) {\r\n        value = state.dataView.getInt8(state.offset);\r\n        state.offset++;\r\n        return value;\r\n    }\r\n    switch (type) {\r\n        // nil\r\n        case 0xc0:\r\n            state.offset++;\r\n            return null;\r\n        // false\r\n        case 0xc2:\r\n            state.offset++;\r\n            return false;\r\n        // true\r\n        case 0xc3:\r\n            state.offset++;\r\n            return true;\r\n        // bin 8\r\n        case 0xc4:\r\n            length = state.dataView.getUint8(state.offset + 1);\r\n            state.offset += 2;\r\n            return bin(state, length);\r\n        // bin 16\r\n        case 0xc5:\r\n            length = state.dataView.getUint16(state.offset + 1);\r\n            state.offset += 3;\r\n            return bin(state, length);\r\n        // bin 32\r\n        case 0xc6:\r\n            length = state.dataView.getUint32(state.offset + 1);\r\n            state.offset += 5;\r\n            return bin(state, length);\r\n        // float 32\r\n        case 0xca:\r\n            value = state.dataView.getFloat32(state.offset + 1);\r\n            state.offset += 5;\r\n            return value;\r\n        // float 64\r\n        case 0xcb:\r\n            value = state.dataView.getFloat64(state.offset + 1);\r\n            state.offset += 9;\r\n            return value;\r\n        // uint8\r\n        case 0xcc:\r\n            value = state.buffer[state.offset + 1];\r\n            state.offset += 2;\r\n            return value;\r\n        // uint 16\r\n        case 0xcd:\r\n            value = state.dataView.getUint16(state.offset + 1);\r\n            state.offset += 3;\r\n            return value;\r\n        // uint 32\r\n        case 0xce:\r\n            value = state.dataView.getUint32(state.offset + 1);\r\n            state.offset += 5;\r\n            return value;\r\n        // int 8\r\n        case 0xd0:\r\n            value = state.dataView.getInt8(state.offset + 1);\r\n            state.offset += 2;\r\n            return value;\r\n        // int 16\r\n        case 0xd1:\r\n            value = state.dataView.getInt16(state.offset + 1);\r\n            state.offset += 3;\r\n            return value;\r\n        // int 32\r\n        case 0xd2:\r\n            value = state.dataView.getInt32(state.offset + 1);\r\n            state.offset += 5;\r\n            return value;\r\n        // str 8\r\n        case 0xd9:\r\n            length = state.dataView.getUint8(state.offset + 1);\r\n            state.offset += 2;\r\n            return str(state, length);\r\n        // str 16\r\n        case 0xda:\r\n            length = state.dataView.getUint16(state.offset + 1);\r\n            state.offset += 3;\r\n            return str(state, length);\r\n        // str 32\r\n        case 0xdb:\r\n            length = state.dataView.getUint32(state.offset + 1);\r\n            state.offset += 5;\r\n            return str(state, length);\r\n        // array 16\r\n        case 0xdc:\r\n            length = state.dataView.getUint16(state.offset + 1);\r\n            state.offset += 3;\r\n            return array(state, length);\r\n        // array 32\r\n        case 0xdd:\r\n            length = state.dataView.getUint32(state.offset + 1);\r\n            state.offset += 5;\r\n            return array(state, length);\r\n        // map 16:\r\n        case 0xde:\r\n            length = state.dataView.getUint16(state.offset + 1);\r\n            state.offset += 3;\r\n            return map(state, length);\r\n        // map 32\r\n        case 0xdf:\r\n            length = state.dataView.getUint32(state.offset + 1);\r\n            state.offset += 5;\r\n            return map(state, length);\r\n    }\r\n    throw new Error('Unknown type 0x' + type.toString(16));\r\n}\r\n//# sourceMappingURL=decode.js.map"]},"metadata":{},"sourceType":"module"}