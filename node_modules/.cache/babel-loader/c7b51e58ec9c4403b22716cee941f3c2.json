{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\nimport { createComputeRenderable } from '../../mol-gl/renderable';\nimport { DefineSpec, TextureSpec, UniformSpec } from '../../mol-gl/renderable/schema';\nimport { ShaderCode } from '../../mol-gl/shader-code';\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\nimport { Vec2, Vec3 } from '../../mol-math/linear-algebra';\nimport { ValueCell } from '../../mol-util';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\nimport { overlay_frag } from '../../mol-gl/shader/marking/overlay.frag';\nimport { Color } from '../../mol-util/color';\nimport { edge_frag } from '../../mol-gl/shader/marking/edge.frag';\nexport var MarkingParams = {\n  enabled: PD.Boolean(false),\n  highlightEdgeColor: PD.Color(Color.darken(Color.fromNormalizedRgb(1.0, 0.4, 0.6), 1.0)),\n  selectEdgeColor: PD.Color(Color.darken(Color.fromNormalizedRgb(0.2, 1.0, 0.1), 1.0)),\n  edgeScale: PD.Numeric(1, {\n    min: 1,\n    max: 3,\n    step: 1\n  }, {\n    description: 'Thickness of the edge.'\n  }),\n  ghostEdgeStrength: PD.Numeric(0.3, {\n    min: 0,\n    max: 1,\n    step: 0.1\n  }, {\n    description: 'Opacity of the hidden edges that are covered by other geometry. When set to 1, one less geometry render pass is done.'\n  }),\n  innerEdgeFactor: PD.Numeric(1.5, {\n    min: 0,\n    max: 3,\n    step: 0.1\n  }, {\n    description: 'Factor to multiply the inner edge color with - for added contrast.'\n  })\n};\n\nvar MarkingPass =\n/** @class */\nfunction () {\n  function MarkingPass(webgl, width, height) {\n    this.webgl = webgl;\n    this.depthTarget = webgl.createRenderTarget(width, height);\n    this.maskTarget = webgl.createRenderTarget(width, height);\n    this.edgesTarget = webgl.createRenderTarget(width, height);\n    this.edge = getEdgeRenderable(webgl, this.maskTarget.texture);\n    this.overlay = getOverlayRenderable(webgl, this.edgesTarget.texture);\n  }\n\n  MarkingPass.isEnabled = function (props) {\n    return props.enabled;\n  };\n\n  MarkingPass.prototype.setEdgeState = function (viewport) {\n    var _a = this.webgl,\n        gl = _a.gl,\n        state = _a.state;\n    state.enable(gl.SCISSOR_TEST);\n    state.enable(gl.BLEND);\n    state.blendFunc(gl.ONE, gl.ONE);\n    state.blendEquation(gl.FUNC_ADD);\n    state.disable(gl.DEPTH_TEST);\n    state.depthMask(false);\n    var x = viewport.x,\n        y = viewport.y,\n        width = viewport.width,\n        height = viewport.height;\n    gl.viewport(x, y, width, height);\n    gl.scissor(x, y, width, height);\n    state.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  };\n\n  MarkingPass.prototype.setOverlayState = function (viewport) {\n    var _a = this.webgl,\n        gl = _a.gl,\n        state = _a.state;\n    state.enable(gl.SCISSOR_TEST);\n    state.enable(gl.BLEND);\n    state.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    state.blendEquation(gl.FUNC_ADD);\n    state.disable(gl.DEPTH_TEST);\n    state.depthMask(false);\n    var x = viewport.x,\n        y = viewport.y,\n        width = viewport.width,\n        height = viewport.height;\n    gl.viewport(x, y, width, height);\n    gl.scissor(x, y, width, height);\n  };\n\n  MarkingPass.prototype.setSize = function (width, height) {\n    var w = this.depthTarget.getWidth();\n    var h = this.depthTarget.getHeight();\n\n    if (width !== w || height !== h) {\n      this.depthTarget.setSize(width, height);\n      this.maskTarget.setSize(width, height);\n      this.edgesTarget.setSize(width, height);\n      ValueCell.update(this.edge.values.uTexSizeInv, Vec2.set(this.edge.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\n      ValueCell.update(this.overlay.values.uTexSizeInv, Vec2.set(this.overlay.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\n    }\n  };\n\n  MarkingPass.prototype.update = function (props) {\n    var highlightEdgeColor = props.highlightEdgeColor,\n        selectEdgeColor = props.selectEdgeColor,\n        edgeScale = props.edgeScale,\n        innerEdgeFactor = props.innerEdgeFactor,\n        ghostEdgeStrength = props.ghostEdgeStrength;\n    var edgeValues = this.edge.values;\n\n    var _edgeScale = Math.round(edgeScale * this.webgl.pixelRatio);\n\n    if (edgeValues.dEdgeScale.ref.value !== _edgeScale) {\n      ValueCell.update(edgeValues.dEdgeScale, _edgeScale);\n      this.edge.update();\n    }\n\n    var overlayValues = this.overlay.values;\n    ValueCell.update(overlayValues.uHighlightEdgeColor, Color.toVec3Normalized(overlayValues.uHighlightEdgeColor.ref.value, highlightEdgeColor));\n    ValueCell.update(overlayValues.uSelectEdgeColor, Color.toVec3Normalized(overlayValues.uSelectEdgeColor.ref.value, selectEdgeColor));\n    ValueCell.update(overlayValues.uInnerEdgeFactor, innerEdgeFactor);\n    ValueCell.update(overlayValues.uGhostEdgeStrength, ghostEdgeStrength);\n  };\n\n  MarkingPass.prototype.render = function (viewport, target) {\n    this.edgesTarget.bind();\n    this.setEdgeState(viewport);\n    this.edge.render();\n\n    if (target) {\n      target.bind();\n    } else {\n      this.webgl.unbindFramebuffer();\n    }\n\n    this.setOverlayState(viewport);\n    this.overlay.render();\n  };\n\n  return MarkingPass;\n}();\n\nexport { MarkingPass }; //\n\nvar EdgeSchema = __assign(__assign({}, QuadSchema), {\n  tMaskTexture: TextureSpec('texture', 'rgba', 'ubyte', 'linear'),\n  uTexSizeInv: UniformSpec('v2'),\n  dEdgeScale: DefineSpec('number')\n});\n\nvar EdgeShaderCode = ShaderCode('edge', quad_vert, edge_frag);\n\nfunction getEdgeRenderable(ctx, maskTexture) {\n  var width = maskTexture.getWidth();\n  var height = maskTexture.getHeight();\n\n  var values = __assign(__assign({}, QuadValues), {\n    tMaskTexture: ValueCell.create(maskTexture),\n    uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)),\n    dEdgeScale: ValueCell.create(1)\n  });\n\n  var schema = __assign({}, EdgeSchema);\n\n  var renderItem = createComputeRenderItem(ctx, 'triangles', EdgeShaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n} //\n\n\nvar OverlaySchema = __assign(__assign({}, QuadSchema), {\n  tEdgeTexture: TextureSpec('texture', 'rgba', 'ubyte', 'linear'),\n  uTexSizeInv: UniformSpec('v2'),\n  uHighlightEdgeColor: UniformSpec('v3'),\n  uSelectEdgeColor: UniformSpec('v3'),\n  uGhostEdgeStrength: UniformSpec('f'),\n  uInnerEdgeFactor: UniformSpec('f')\n});\n\nvar OverlayShaderCode = ShaderCode('overlay', quad_vert, overlay_frag);\n\nfunction getOverlayRenderable(ctx, edgeTexture) {\n  var width = edgeTexture.getWidth();\n  var height = edgeTexture.getHeight();\n\n  var values = __assign(__assign({}, QuadValues), {\n    tEdgeTexture: ValueCell.create(edgeTexture),\n    uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)),\n    uHighlightEdgeColor: ValueCell.create(Vec3()),\n    uSelectEdgeColor: ValueCell.create(Vec3()),\n    uGhostEdgeStrength: ValueCell.create(0),\n    uInnerEdgeFactor: ValueCell.create(0)\n  });\n\n  var schema = __assign({}, OverlaySchema);\n\n  var renderItem = createComputeRenderItem(ctx, 'triangles', OverlayShaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}","map":{"version":3,"sources":["../../../src/mol-canvas3d/passes/marking.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\r\nimport { createComputeRenderable } from '../../mol-gl/renderable';\r\nimport { DefineSpec, TextureSpec, UniformSpec } from '../../mol-gl/renderable/schema';\r\nimport { ShaderCode } from '../../mol-gl/shader-code';\r\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\r\nimport { Vec2, Vec3 } from '../../mol-math/linear-algebra';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\r\nimport { overlay_frag } from '../../mol-gl/shader/marking/overlay.frag';\r\nimport { Color } from '../../mol-util/color';\r\nimport { edge_frag } from '../../mol-gl/shader/marking/edge.frag';\r\nexport var MarkingParams = {\r\n    enabled: PD.Boolean(false),\r\n    highlightEdgeColor: PD.Color(Color.darken(Color.fromNormalizedRgb(1.0, 0.4, 0.6), 1.0)),\r\n    selectEdgeColor: PD.Color(Color.darken(Color.fromNormalizedRgb(0.2, 1.0, 0.1), 1.0)),\r\n    edgeScale: PD.Numeric(1, { min: 1, max: 3, step: 1 }, { description: 'Thickness of the edge.' }),\r\n    ghostEdgeStrength: PD.Numeric(0.3, { min: 0, max: 1, step: 0.1 }, { description: 'Opacity of the hidden edges that are covered by other geometry. When set to 1, one less geometry render pass is done.' }),\r\n    innerEdgeFactor: PD.Numeric(1.5, { min: 0, max: 3, step: 0.1 }, { description: 'Factor to multiply the inner edge color with - for added contrast.' }),\r\n};\r\nvar MarkingPass = /** @class */ (function () {\r\n    function MarkingPass(webgl, width, height) {\r\n        this.webgl = webgl;\r\n        this.depthTarget = webgl.createRenderTarget(width, height);\r\n        this.maskTarget = webgl.createRenderTarget(width, height);\r\n        this.edgesTarget = webgl.createRenderTarget(width, height);\r\n        this.edge = getEdgeRenderable(webgl, this.maskTarget.texture);\r\n        this.overlay = getOverlayRenderable(webgl, this.edgesTarget.texture);\r\n    }\r\n    MarkingPass.isEnabled = function (props) {\r\n        return props.enabled;\r\n    };\r\n    MarkingPass.prototype.setEdgeState = function (viewport) {\r\n        var _a = this.webgl, gl = _a.gl, state = _a.state;\r\n        state.enable(gl.SCISSOR_TEST);\r\n        state.enable(gl.BLEND);\r\n        state.blendFunc(gl.ONE, gl.ONE);\r\n        state.blendEquation(gl.FUNC_ADD);\r\n        state.disable(gl.DEPTH_TEST);\r\n        state.depthMask(false);\r\n        var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;\r\n        gl.viewport(x, y, width, height);\r\n        gl.scissor(x, y, width, height);\r\n        state.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    };\r\n    MarkingPass.prototype.setOverlayState = function (viewport) {\r\n        var _a = this.webgl, gl = _a.gl, state = _a.state;\r\n        state.enable(gl.SCISSOR_TEST);\r\n        state.enable(gl.BLEND);\r\n        state.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        state.blendEquation(gl.FUNC_ADD);\r\n        state.disable(gl.DEPTH_TEST);\r\n        state.depthMask(false);\r\n        var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;\r\n        gl.viewport(x, y, width, height);\r\n        gl.scissor(x, y, width, height);\r\n    };\r\n    MarkingPass.prototype.setSize = function (width, height) {\r\n        var w = this.depthTarget.getWidth();\r\n        var h = this.depthTarget.getHeight();\r\n        if (width !== w || height !== h) {\r\n            this.depthTarget.setSize(width, height);\r\n            this.maskTarget.setSize(width, height);\r\n            this.edgesTarget.setSize(width, height);\r\n            ValueCell.update(this.edge.values.uTexSizeInv, Vec2.set(this.edge.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\r\n            ValueCell.update(this.overlay.values.uTexSizeInv, Vec2.set(this.overlay.values.uTexSizeInv.ref.value, 1 / width, 1 / height));\r\n        }\r\n    };\r\n    MarkingPass.prototype.update = function (props) {\r\n        var highlightEdgeColor = props.highlightEdgeColor, selectEdgeColor = props.selectEdgeColor, edgeScale = props.edgeScale, innerEdgeFactor = props.innerEdgeFactor, ghostEdgeStrength = props.ghostEdgeStrength;\r\n        var edgeValues = this.edge.values;\r\n        var _edgeScale = Math.round(edgeScale * this.webgl.pixelRatio);\r\n        if (edgeValues.dEdgeScale.ref.value !== _edgeScale) {\r\n            ValueCell.update(edgeValues.dEdgeScale, _edgeScale);\r\n            this.edge.update();\r\n        }\r\n        var overlayValues = this.overlay.values;\r\n        ValueCell.update(overlayValues.uHighlightEdgeColor, Color.toVec3Normalized(overlayValues.uHighlightEdgeColor.ref.value, highlightEdgeColor));\r\n        ValueCell.update(overlayValues.uSelectEdgeColor, Color.toVec3Normalized(overlayValues.uSelectEdgeColor.ref.value, selectEdgeColor));\r\n        ValueCell.update(overlayValues.uInnerEdgeFactor, innerEdgeFactor);\r\n        ValueCell.update(overlayValues.uGhostEdgeStrength, ghostEdgeStrength);\r\n    };\r\n    MarkingPass.prototype.render = function (viewport, target) {\r\n        this.edgesTarget.bind();\r\n        this.setEdgeState(viewport);\r\n        this.edge.render();\r\n        if (target) {\r\n            target.bind();\r\n        }\r\n        else {\r\n            this.webgl.unbindFramebuffer();\r\n        }\r\n        this.setOverlayState(viewport);\r\n        this.overlay.render();\r\n    };\r\n    return MarkingPass;\r\n}());\r\nexport { MarkingPass };\r\n//\r\nvar EdgeSchema = __assign(__assign({}, QuadSchema), { tMaskTexture: TextureSpec('texture', 'rgba', 'ubyte', 'linear'), uTexSizeInv: UniformSpec('v2'), dEdgeScale: DefineSpec('number') });\r\nvar EdgeShaderCode = ShaderCode('edge', quad_vert, edge_frag);\r\nfunction getEdgeRenderable(ctx, maskTexture) {\r\n    var width = maskTexture.getWidth();\r\n    var height = maskTexture.getHeight();\r\n    var values = __assign(__assign({}, QuadValues), { tMaskTexture: ValueCell.create(maskTexture), uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)), dEdgeScale: ValueCell.create(1) });\r\n    var schema = __assign({}, EdgeSchema);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', EdgeShaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\n//\r\nvar OverlaySchema = __assign(__assign({}, QuadSchema), { tEdgeTexture: TextureSpec('texture', 'rgba', 'ubyte', 'linear'), uTexSizeInv: UniformSpec('v2'), uHighlightEdgeColor: UniformSpec('v3'), uSelectEdgeColor: UniformSpec('v3'), uGhostEdgeStrength: UniformSpec('f'), uInnerEdgeFactor: UniformSpec('f') });\r\nvar OverlayShaderCode = ShaderCode('overlay', quad_vert, overlay_frag);\r\nfunction getOverlayRenderable(ctx, edgeTexture) {\r\n    var width = edgeTexture.getWidth();\r\n    var height = edgeTexture.getHeight();\r\n    var values = __assign(__assign({}, QuadValues), { tEdgeTexture: ValueCell.create(edgeTexture), uTexSizeInv: ValueCell.create(Vec2.create(1 / width, 1 / height)), uHighlightEdgeColor: ValueCell.create(Vec3()), uSelectEdgeColor: ValueCell.create(Vec3()), uGhostEdgeStrength: ValueCell.create(0), uInnerEdgeFactor: ValueCell.create(0) });\r\n    var schema = __assign({}, OverlaySchema);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', OverlayShaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\n//# sourceMappingURL=marking.js.map"]},"metadata":{},"sourceType":"module"}