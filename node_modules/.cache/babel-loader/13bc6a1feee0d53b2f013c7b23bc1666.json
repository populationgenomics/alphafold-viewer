{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { isPolymer } from '../../../mol-model/structure/model/types';\nimport { Column, Table } from '../../../mol-data/db';\nimport { BasicSchema } from '../basic/schema';\n\nvar EntityBuilder =\n/** @class */\nfunction () {\n  function EntityBuilder() {\n    this.count = 0;\n    this.ids = [];\n    this.types = [];\n    this.descriptions = [];\n    this.compoundsMap = new Map();\n    this.namesMap = new Map();\n    this.heteroMap = new Map();\n    this.chainMap = new Map();\n  }\n\n  EntityBuilder.prototype.set = function (type, description) {\n    this.count += 1;\n    this.ids.push(\"\" + this.count);\n    this.types.push(type);\n    this.descriptions.push([description]);\n  };\n\n  EntityBuilder.prototype.getEntityId = function (compId, moleculeType, chainId, options) {\n    if (moleculeType === 2\n    /* Water */\n    ) {\n      if (this.waterId === undefined) {\n        this.set('water', (options === null || options === void 0 ? void 0 : options.customName) || 'Water');\n        this.waterId = \"\" + this.count;\n      }\n\n      return this.waterId;\n    } else if (isPolymer(moleculeType)) {\n      if (this.compoundsMap.has(chainId)) {\n        return this.compoundsMap.get(chainId);\n      } else {\n        if (!this.chainMap.has(chainId)) {\n          this.set('polymer', (options === null || options === void 0 ? void 0 : options.customName) || \"Polymer \" + (this.chainMap.size + 1));\n          this.chainMap.set(chainId, \"\" + this.count);\n        }\n\n        return this.chainMap.get(chainId);\n      }\n    } else {\n      if (!this.heteroMap.has(compId)) {\n        this.set('non-polymer', (options === null || options === void 0 ? void 0 : options.customName) || this.namesMap.get(compId) || compId);\n        this.heteroMap.set(compId, \"\" + this.count);\n      }\n\n      return this.heteroMap.get(compId);\n    }\n  };\n\n  EntityBuilder.prototype.getEntityTable = function () {\n    return Table.ofPartialColumns(BasicSchema.entity, {\n      id: Column.ofStringArray(this.ids),\n      type: Column.ofStringAliasArray(this.types),\n      pdbx_description: Column.ofStringListArray(this.descriptions)\n    }, this.count);\n  };\n\n  EntityBuilder.prototype.setCompounds = function (compounds) {\n    for (var i = 0, il = compounds.length; i < il; ++i) {\n      var _a = compounds[i],\n          chains = _a.chains,\n          description = _a.description;\n      this.set('polymer', description);\n\n      for (var j = 0, jl = chains.length; j < jl; ++j) {\n        this.compoundsMap.set(chains[j], \"\" + this.count);\n      }\n    }\n  };\n\n  EntityBuilder.prototype.setNames = function (names) {\n    var _this = this;\n\n    names.forEach(function (n) {\n      return _this.namesMap.set(n[0], n[1]);\n    });\n  };\n\n  return EntityBuilder;\n}();\n\nexport { EntityBuilder };","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/common/entity.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { isPolymer } from '../../../mol-model/structure/model/types';\r\nimport { Column, Table } from '../../../mol-data/db';\r\nimport { BasicSchema } from '../basic/schema';\r\nvar EntityBuilder = /** @class */ (function () {\r\n    function EntityBuilder() {\r\n        this.count = 0;\r\n        this.ids = [];\r\n        this.types = [];\r\n        this.descriptions = [];\r\n        this.compoundsMap = new Map();\r\n        this.namesMap = new Map();\r\n        this.heteroMap = new Map();\r\n        this.chainMap = new Map();\r\n    }\r\n    EntityBuilder.prototype.set = function (type, description) {\r\n        this.count += 1;\r\n        this.ids.push(\"\" + this.count);\r\n        this.types.push(type);\r\n        this.descriptions.push([description]);\r\n    };\r\n    EntityBuilder.prototype.getEntityId = function (compId, moleculeType, chainId, options) {\r\n        if (moleculeType === 2 /* Water */) {\r\n            if (this.waterId === undefined) {\r\n                this.set('water', (options === null || options === void 0 ? void 0 : options.customName) || 'Water');\r\n                this.waterId = \"\" + this.count;\r\n            }\r\n            return this.waterId;\r\n        }\r\n        else if (isPolymer(moleculeType)) {\r\n            if (this.compoundsMap.has(chainId)) {\r\n                return this.compoundsMap.get(chainId);\r\n            }\r\n            else {\r\n                if (!this.chainMap.has(chainId)) {\r\n                    this.set('polymer', (options === null || options === void 0 ? void 0 : options.customName) || \"Polymer \" + (this.chainMap.size + 1));\r\n                    this.chainMap.set(chainId, \"\" + this.count);\r\n                }\r\n                return this.chainMap.get(chainId);\r\n            }\r\n        }\r\n        else {\r\n            if (!this.heteroMap.has(compId)) {\r\n                this.set('non-polymer', (options === null || options === void 0 ? void 0 : options.customName) || this.namesMap.get(compId) || compId);\r\n                this.heteroMap.set(compId, \"\" + this.count);\r\n            }\r\n            return this.heteroMap.get(compId);\r\n        }\r\n    };\r\n    EntityBuilder.prototype.getEntityTable = function () {\r\n        return Table.ofPartialColumns(BasicSchema.entity, {\r\n            id: Column.ofStringArray(this.ids),\r\n            type: Column.ofStringAliasArray(this.types),\r\n            pdbx_description: Column.ofStringListArray(this.descriptions),\r\n        }, this.count);\r\n    };\r\n    EntityBuilder.prototype.setCompounds = function (compounds) {\r\n        for (var i = 0, il = compounds.length; i < il; ++i) {\r\n            var _a = compounds[i], chains = _a.chains, description = _a.description;\r\n            this.set('polymer', description);\r\n            for (var j = 0, jl = chains.length; j < jl; ++j) {\r\n                this.compoundsMap.set(chains[j], \"\" + this.count);\r\n            }\r\n        }\r\n    };\r\n    EntityBuilder.prototype.setNames = function (names) {\r\n        var _this = this;\r\n        names.forEach(function (n) { return _this.namesMap.set(n[0], n[1]); });\r\n    };\r\n    return EntityBuilder;\r\n}());\r\nexport { EntityBuilder };\r\n//# sourceMappingURL=entity.js.map"]},"metadata":{},"sourceType":"module"}