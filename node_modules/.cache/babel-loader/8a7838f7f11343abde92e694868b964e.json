{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column } from '../../../mol-data/db';\nimport { Task } from '../../../mol-task';\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\nimport { TokenBuilder, Tokenizer } from '../common/text/tokenizer';\nimport { ReaderResult as Result } from '../result';\nexport function handleAtoms(tokenizer, count) {\n  var x = TokenBuilder.create(tokenizer.data, count * 2);\n  var y = TokenBuilder.create(tokenizer.data, count * 2);\n  var z = TokenBuilder.create(tokenizer.data, count * 2);\n  var type_symbol = TokenBuilder.create(tokenizer.data, count * 2);\n\n  for (var i = 0; i < count; ++i) {\n    Tokenizer.markLine(tokenizer);\n    var s = tokenizer.tokenStart,\n        position = tokenizer.position;\n    Tokenizer.trim(tokenizer, s, s + 10);\n    TokenBuilder.addUnchecked(x, tokenizer.tokenStart, tokenizer.tokenEnd);\n    Tokenizer.trim(tokenizer, s + 10, s + 20);\n    TokenBuilder.addUnchecked(y, tokenizer.tokenStart, tokenizer.tokenEnd);\n    Tokenizer.trim(tokenizer, s + 20, s + 30);\n    TokenBuilder.addUnchecked(z, tokenizer.tokenStart, tokenizer.tokenEnd);\n    Tokenizer.trim(tokenizer, s + 31, s + 34);\n    TokenBuilder.addUnchecked(type_symbol, tokenizer.tokenStart, tokenizer.tokenEnd);\n    tokenizer.position = position;\n  }\n\n  return {\n    count: count,\n    x: TokenColumn(x)(Column.Schema.float),\n    y: TokenColumn(y)(Column.Schema.float),\n    z: TokenColumn(z)(Column.Schema.float),\n    type_symbol: TokenColumn(type_symbol)(Column.Schema.str)\n  };\n}\nexport function handleBonds(tokenizer, count) {\n  var atomIdxA = TokenBuilder.create(tokenizer.data, count * 2);\n  var atomIdxB = TokenBuilder.create(tokenizer.data, count * 2);\n  var order = TokenBuilder.create(tokenizer.data, count * 2);\n\n  for (var i = 0; i < count; ++i) {\n    Tokenizer.markLine(tokenizer);\n    var s = tokenizer.tokenStart,\n        position = tokenizer.position;\n    Tokenizer.trim(tokenizer, s, s + 3);\n    TokenBuilder.addUnchecked(atomIdxA, tokenizer.tokenStart, tokenizer.tokenEnd);\n    Tokenizer.trim(tokenizer, s + 3, s + 6);\n    TokenBuilder.addUnchecked(atomIdxB, tokenizer.tokenStart, tokenizer.tokenEnd);\n    Tokenizer.trim(tokenizer, s + 6, s + 9);\n    TokenBuilder.addUnchecked(order, tokenizer.tokenStart, tokenizer.tokenEnd);\n    tokenizer.position = position;\n  }\n\n  return {\n    count: count,\n    atomIdxA: TokenColumn(atomIdxA)(Column.Schema.int),\n    atomIdxB: TokenColumn(atomIdxB)(Column.Schema.int),\n    order: TokenColumn(order)(Column.Schema.int)\n  };\n}\n\nfunction parseInternal(data) {\n  var tokenizer = Tokenizer(data);\n  var title = Tokenizer.readLine(tokenizer).trim();\n  var program = Tokenizer.readLine(tokenizer).trim();\n  var comment = Tokenizer.readLine(tokenizer).trim();\n  var counts = Tokenizer.readLine(tokenizer);\n  var atomCount = +counts.substr(0, 3),\n      bondCount = +counts.substr(3, 3);\n  var atoms = handleAtoms(tokenizer, atomCount);\n  var bonds = handleBonds(tokenizer, bondCount);\n  var result = {\n    title: title,\n    program: program,\n    comment: comment,\n    atoms: atoms,\n    bonds: bonds\n  };\n  return Result.success(result);\n}\n\nexport function parseMol(data) {\n  var _this = this;\n\n  return Task.create('Parse Mol', function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , parseInternal(data)];\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/mol/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column } from '../../../mol-data/db';\r\nimport { Task } from '../../../mol-task';\r\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\r\nimport { TokenBuilder, Tokenizer } from '../common/text/tokenizer';\r\nimport { ReaderResult as Result } from '../result';\r\nexport function handleAtoms(tokenizer, count) {\r\n    var x = TokenBuilder.create(tokenizer.data, count * 2);\r\n    var y = TokenBuilder.create(tokenizer.data, count * 2);\r\n    var z = TokenBuilder.create(tokenizer.data, count * 2);\r\n    var type_symbol = TokenBuilder.create(tokenizer.data, count * 2);\r\n    for (var i = 0; i < count; ++i) {\r\n        Tokenizer.markLine(tokenizer);\r\n        var s = tokenizer.tokenStart, position = tokenizer.position;\r\n        Tokenizer.trim(tokenizer, s, s + 10);\r\n        TokenBuilder.addUnchecked(x, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        Tokenizer.trim(tokenizer, s + 10, s + 20);\r\n        TokenBuilder.addUnchecked(y, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        Tokenizer.trim(tokenizer, s + 20, s + 30);\r\n        TokenBuilder.addUnchecked(z, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        Tokenizer.trim(tokenizer, s + 31, s + 34);\r\n        TokenBuilder.addUnchecked(type_symbol, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        tokenizer.position = position;\r\n    }\r\n    return {\r\n        count: count,\r\n        x: TokenColumn(x)(Column.Schema.float),\r\n        y: TokenColumn(y)(Column.Schema.float),\r\n        z: TokenColumn(z)(Column.Schema.float),\r\n        type_symbol: TokenColumn(type_symbol)(Column.Schema.str)\r\n    };\r\n}\r\nexport function handleBonds(tokenizer, count) {\r\n    var atomIdxA = TokenBuilder.create(tokenizer.data, count * 2);\r\n    var atomIdxB = TokenBuilder.create(tokenizer.data, count * 2);\r\n    var order = TokenBuilder.create(tokenizer.data, count * 2);\r\n    for (var i = 0; i < count; ++i) {\r\n        Tokenizer.markLine(tokenizer);\r\n        var s = tokenizer.tokenStart, position = tokenizer.position;\r\n        Tokenizer.trim(tokenizer, s, s + 3);\r\n        TokenBuilder.addUnchecked(atomIdxA, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        Tokenizer.trim(tokenizer, s + 3, s + 6);\r\n        TokenBuilder.addUnchecked(atomIdxB, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        Tokenizer.trim(tokenizer, s + 6, s + 9);\r\n        TokenBuilder.addUnchecked(order, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        tokenizer.position = position;\r\n    }\r\n    return {\r\n        count: count,\r\n        atomIdxA: TokenColumn(atomIdxA)(Column.Schema.int),\r\n        atomIdxB: TokenColumn(atomIdxB)(Column.Schema.int),\r\n        order: TokenColumn(order)(Column.Schema.int)\r\n    };\r\n}\r\nfunction parseInternal(data) {\r\n    var tokenizer = Tokenizer(data);\r\n    var title = Tokenizer.readLine(tokenizer).trim();\r\n    var program = Tokenizer.readLine(tokenizer).trim();\r\n    var comment = Tokenizer.readLine(tokenizer).trim();\r\n    var counts = Tokenizer.readLine(tokenizer);\r\n    var atomCount = +counts.substr(0, 3), bondCount = +counts.substr(3, 3);\r\n    var atoms = handleAtoms(tokenizer, atomCount);\r\n    var bonds = handleBonds(tokenizer, bondCount);\r\n    var result = {\r\n        title: title,\r\n        program: program,\r\n        comment: comment,\r\n        atoms: atoms,\r\n        bonds: bonds\r\n    };\r\n    return Result.success(result);\r\n}\r\nexport function parseMol(data) {\r\n    var _this = this;\r\n    return Task.create('Parse Mol', function () { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, parseInternal(data)];\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}