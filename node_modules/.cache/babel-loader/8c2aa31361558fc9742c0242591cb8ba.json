{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { MolScriptBuilder as MS } from '../language/builder';\nimport { compile } from '../runtime/query/base';\nimport { UniqueArray } from '../../mol-data/generic';\n\nfunction residueEntriesToQuery(xs, kind) {\n  var _a;\n\n  var groups = [];\n  var asym_id_key = kind === 'auth' ? 'auth_asym_id' : 'label_asym_id';\n  var seq_id_key = kind === 'auth' ? 'auth_seq_id' : 'label_seq_id';\n\n  for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {\n    var x = xs_1[_i];\n\n    if (x.kind === 'range') {\n      groups.push(MS.struct.generator.atomGroups({\n        'chain-test': MS.core.rel.eq([MS.ammp(asym_id_key), x.asym_id]),\n        'residue-test': MS.core.rel.inRange([MS.ammp(seq_id_key), x.seq_id_beg, x.seq_id_end])\n      }));\n    } else {\n      var ins_code = ((_a = x.ins_code) !== null && _a !== void 0 ? _a : '').trim();\n      groups.push(MS.struct.generator.atomGroups({\n        'chain-test': MS.core.rel.eq([MS.ammp(asym_id_key), x.asym_id]),\n        'residue-test': MS.core.logic.and([MS.core.rel.eq([MS.ammp(seq_id_key), x.seq_id]), MS.core.rel.eq([MS.ammp('pdbx_PDB_ins_code'), ins_code])])\n      }));\n    }\n  }\n\n  var query = MS.struct.combinator.merge(groups);\n  return compile(query);\n}\n\nfunction atomEntriesToQuery(xs) {\n  var set = UniqueArray.create();\n\n  for (var _i = 0, xs_2 = xs; _i < xs_2.length; _i++) {\n    var _a = xs_2[_i],\n        a = _a[0],\n        b = _a[1];\n\n    for (var i = a; i <= b; i++) {\n      UniqueArray.add(set, i, i);\n    }\n  }\n\n  var query = MS.struct.generator.atomGroups({\n    'atom-test': MS.core.set.has([MS.set.apply(MS, set.array), MS.ammp('id')])\n  });\n  return compile(query);\n}\n\nfunction parseRange(c, s, e) {\n  if (!c || s.length === 0 || Number.isNaN(+s[0])) return;\n\n  if (Number.isNaN(e)) {\n    return {\n      kind: 'single',\n      asym_id: c,\n      seq_id: +s[0],\n      ins_code: s[1]\n    };\n  }\n\n  return {\n    kind: 'range',\n    asym_id: c,\n    seq_id_beg: +s[0],\n    seq_id_end: e\n  };\n}\n\nfunction parseInsCode(e) {\n  if (!e) return [];\n  return e.split(':');\n}\n\nfunction parseResidueListSelection(input) {\n  return input.split(',') // A 1-3, B 3 => [A 1-3, B 3]\n  .map(function (e) {\n    return e.trim().split(/\\s+|[-]/g).filter(function (e) {\n      return !!e;\n    });\n  }) // [A 1-3, B 3] => [[A, 1, 3], [B, 3]]\n  .map(function (e) {\n    return parseRange(e[0], parseInsCode(e[1]), +e[2]);\n  }).filter(function (e) {\n    return !!e;\n  });\n}\n\nfunction parseAtomListSelection(input) {\n  return input.split(',') // 1-3, 3 => [1-3, 3]\n  .map(function (e) {\n    return e.trim().split(/\\s+|[-]/g).filter(function (e) {\n      return !!e;\n    });\n  }) // [1-3, 3] => [[1, 3], [3]]\n  .filter(function (e) {\n    return e.length === 1 || e.length === 2;\n  }).map(function (e) {\n    return e.length === 1 ? [+e[0], +e[0]] : [+e[0], +e[1]];\n  });\n} // parses a list of residue ranges, e.g. A 10-100, B 30, C 12:i\n\n\nexport function compileIdListSelection(input, idType) {\n  if (idType === 'atom-id') {\n    var entries = parseAtomListSelection(input);\n    return atomEntriesToQuery(entries);\n  } else {\n    var entries = parseResidueListSelection(input);\n    return residueEntriesToQuery(entries, idType);\n  }\n}","map":{"version":3,"sources":["../../../src/mol-script/util/id-list.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { MolScriptBuilder as MS } from '../language/builder';\r\nimport { compile } from '../runtime/query/base';\r\nimport { UniqueArray } from '../../mol-data/generic';\r\nfunction residueEntriesToQuery(xs, kind) {\r\n    var _a;\r\n    var groups = [];\r\n    var asym_id_key = kind === 'auth' ? 'auth_asym_id' : 'label_asym_id';\r\n    var seq_id_key = kind === 'auth' ? 'auth_seq_id' : 'label_seq_id';\r\n    for (var _i = 0, xs_1 = xs; _i < xs_1.length; _i++) {\r\n        var x = xs_1[_i];\r\n        if (x.kind === 'range') {\r\n            groups.push(MS.struct.generator.atomGroups({\r\n                'chain-test': MS.core.rel.eq([MS.ammp(asym_id_key), x.asym_id]),\r\n                'residue-test': MS.core.rel.inRange([MS.ammp(seq_id_key), x.seq_id_beg, x.seq_id_end])\r\n            }));\r\n        }\r\n        else {\r\n            var ins_code = ((_a = x.ins_code) !== null && _a !== void 0 ? _a : '').trim();\r\n            groups.push(MS.struct.generator.atomGroups({\r\n                'chain-test': MS.core.rel.eq([MS.ammp(asym_id_key), x.asym_id]),\r\n                'residue-test': MS.core.logic.and([\r\n                    MS.core.rel.eq([MS.ammp(seq_id_key), x.seq_id]),\r\n                    MS.core.rel.eq([MS.ammp('pdbx_PDB_ins_code'), ins_code])\r\n                ])\r\n            }));\r\n        }\r\n    }\r\n    var query = MS.struct.combinator.merge(groups);\r\n    return compile(query);\r\n}\r\nfunction atomEntriesToQuery(xs) {\r\n    var set = UniqueArray.create();\r\n    for (var _i = 0, xs_2 = xs; _i < xs_2.length; _i++) {\r\n        var _a = xs_2[_i], a = _a[0], b = _a[1];\r\n        for (var i = a; i <= b; i++) {\r\n            UniqueArray.add(set, i, i);\r\n        }\r\n    }\r\n    var query = MS.struct.generator.atomGroups({\r\n        'atom-test': MS.core.set.has([MS.set.apply(MS, set.array), MS.ammp('id')])\r\n    });\r\n    return compile(query);\r\n}\r\nfunction parseRange(c, s, e) {\r\n    if (!c || s.length === 0 || Number.isNaN(+s[0]))\r\n        return;\r\n    if (Number.isNaN(e)) {\r\n        return { kind: 'single', asym_id: c, seq_id: +s[0], ins_code: s[1] };\r\n    }\r\n    return { kind: 'range', asym_id: c, seq_id_beg: +s[0], seq_id_end: e };\r\n}\r\nfunction parseInsCode(e) {\r\n    if (!e)\r\n        return [];\r\n    return e.split(':');\r\n}\r\nfunction parseResidueListSelection(input) {\r\n    return input.split(',') // A 1-3, B 3 => [A 1-3, B 3]\r\n        .map(function (e) { return e.trim().split(/\\s+|[-]/g).filter(function (e) { return !!e; }); }) // [A 1-3, B 3] => [[A, 1, 3], [B, 3]]\r\n        .map(function (e) { return parseRange(e[0], parseInsCode(e[1]), +e[2]); })\r\n        .filter(function (e) { return !!e; });\r\n}\r\nfunction parseAtomListSelection(input) {\r\n    return input.split(',') // 1-3, 3 => [1-3, 3]\r\n        .map(function (e) { return e.trim().split(/\\s+|[-]/g).filter(function (e) { return !!e; }); }) // [1-3, 3] => [[1, 3], [3]]\r\n        .filter(function (e) { return e.length === 1 || e.length === 2; })\r\n        .map(function (e) { return e.length === 1 ? [+e[0], +e[0]] : [+e[0], +e[1]]; });\r\n}\r\n// parses a list of residue ranges, e.g. A 10-100, B 30, C 12:i\r\nexport function compileIdListSelection(input, idType) {\r\n    if (idType === 'atom-id') {\r\n        var entries = parseAtomListSelection(input);\r\n        return atomEntriesToQuery(entries);\r\n    }\r\n    else {\r\n        var entries = parseResidueListSelection(input);\r\n        return residueEntriesToQuery(entries, idType);\r\n    }\r\n}\r\n//# sourceMappingURL=id-list.js.map"]},"metadata":{},"sourceType":"module"}