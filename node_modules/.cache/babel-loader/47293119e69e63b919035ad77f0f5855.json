{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { StateTree } from '../tree';\nimport { StateTransform } from '../transform';\nvar StateSelection;\n\n(function (StateSelection) {\n  function select(s, state) {\n    return compile(s)(state);\n  }\n\n  StateSelection.select = select;\n\n  function compile(s) {\n    var selector = s ? s : Generators.root;\n    var query;\n    if (isBuilder(selector)) query = selector.compile();else if (isObj(selector)) query = Generators.byValue(selector).compile();else if (isQuery(selector)) query = selector;else query = Generators.byRef(selector).compile();\n    return query;\n  }\n\n  StateSelection.compile = compile;\n\n  function isObj(arg) {\n    return arg.transform !== void 0 && arg.status !== void 0;\n  }\n\n  function isBuilder(arg) {\n    return arg.compile !== void 0;\n  }\n\n  function isQuery(arg) {\n    return typeof arg === 'function';\n  }\n\n  var BuilderPrototype = {\n    select: function (state) {\n      return select(this, state || this.state);\n    }\n  };\n\n  function registerModifier(name, f) {\n    BuilderPrototype[name] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return f.call.apply(f, __spreadArray([void 0, this], args, false));\n    };\n  }\n\n  function build(compile) {\n    return Object.create(BuilderPrototype, {\n      compile: {\n        writable: false,\n        configurable: false,\n        value: compile\n      }\n    });\n  }\n\n  var Generators;\n\n  (function (Generators) {\n    Generators.root = build(function () {\n      return function (state) {\n        return [state.cells.get(state.tree.root.ref)];\n      };\n    });\n\n    function byRef() {\n      var refs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        refs[_i] = arguments[_i];\n      }\n\n      return build(function () {\n        return function (state) {\n          var ret = [];\n\n          for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n            var ref = refs_1[_i];\n            var n = state.cells.get(ref);\n            if (!n) continue;\n            ret.push(n);\n          }\n\n          return ret;\n        };\n      });\n    }\n\n    Generators.byRef = byRef;\n\n    function byValue() {\n      var objects = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        objects[_i] = arguments[_i];\n      }\n\n      return build(function () {\n        return function (state) {\n          return objects;\n        };\n      });\n    }\n\n    Generators.byValue = byValue;\n\n    function rootsOfType(type, root) {\n      if (root === void 0) {\n        root = StateTransform.RootRef;\n      }\n\n      return build(function () {\n        return function (state) {\n          var ctx = {\n            roots: [],\n            cells: state.cells,\n            type: type.type\n          };\n          StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findRootsOfType);\n          return ctx.roots;\n        };\n      });\n    }\n\n    Generators.rootsOfType = rootsOfType;\n\n    function ofType(type, root) {\n      if (root === void 0) {\n        root = StateTransform.RootRef;\n      }\n\n      return build(function () {\n        return function (state) {\n          var ctx = {\n            ret: [],\n            cells: state.cells,\n            type: type.type\n          };\n          StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfType);\n          return ctx.ret;\n        };\n      });\n    }\n\n    Generators.ofType = ofType;\n\n    function ofTransformer(t, root) {\n      if (root === void 0) {\n        root = StateTransform.RootRef;\n      }\n\n      return build(function () {\n        return function (state) {\n          var ctx = {\n            ret: [],\n            cells: state.cells,\n            t: t\n          };\n          StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfTransformer);\n          return ctx.ret;\n        };\n      });\n    }\n\n    Generators.ofTransformer = ofTransformer;\n\n    function ofTransformerWithError(t, root) {\n      if (root === void 0) {\n        root = StateTransform.RootRef;\n      }\n\n      return build(function () {\n        return function (state) {\n          var ctx = {\n            ret: [],\n            cells: state.cells,\n            t: t\n          };\n          StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfTransformerWithError);\n          return ctx.ret;\n        };\n      });\n    }\n\n    Generators.ofTransformerWithError = ofTransformerWithError;\n\n    function _findRootsOfType(n, _, s) {\n      var cell = s.cells.get(n.ref);\n\n      if (cell && cell.obj && cell.obj.type === s.type) {\n        s.roots.push(cell);\n        return false;\n      }\n\n      return true;\n    }\n\n    function _findOfType(n, _, s) {\n      var cell = s.cells.get(n.ref);\n\n      if (cell && cell.obj && cell.obj.type === s.type) {\n        s.ret.push(cell);\n      }\n\n      return true;\n    }\n\n    function _findOfTransformer(n, _, s) {\n      var cell = s.cells.get(n.ref);\n\n      if (cell && cell.obj && cell.transform.transformer === s.t) {\n        s.ret.push(cell);\n      }\n\n      return true;\n    }\n\n    function _findOfTransformerWithError(n, _, s) {\n      var cell = s.cells.get(n.ref);\n\n      if (cell && cell.status === 'error' && cell.transform.transformer === s.t) {\n        s.ret.push(cell);\n      }\n\n      return true;\n    }\n  })(Generators = StateSelection.Generators || (StateSelection.Generators = {}));\n\n  registerModifier('flatMap', flatMap);\n\n  function flatMap(b, f) {\n    var q = compile(b);\n    return build(function () {\n      return function (state) {\n        var ret = [];\n\n        for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\n          var n = _a[_i];\n\n          for (var _b = 0, _c = f(n, state); _b < _c.length; _b++) {\n            var m = _c[_b];\n            ret.push(m);\n          }\n        }\n\n        return ret;\n      };\n    });\n  }\n\n  StateSelection.flatMap = flatMap;\n  registerModifier('mapObject', mapObject);\n\n  function mapObject(b, f) {\n    var q = compile(b);\n    return build(function () {\n      return function (state) {\n        var ret = [];\n\n        for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\n          var n = _a[_i];\n          var x = f(n, state);\n          if (x) ret.push(x);\n        }\n\n        return ret;\n      };\n    });\n  }\n\n  StateSelection.mapObject = mapObject;\n  registerModifier('unique', unique);\n\n  function unique(b) {\n    var q = compile(b);\n    return build(function () {\n      return function (state) {\n        var set = new Set();\n        var ret = [];\n\n        for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\n          var n = _a[_i];\n          if (!n) continue;\n\n          if (!set.has(n.transform.ref)) {\n            set.add(n.transform.ref);\n            ret.push(n);\n          }\n        }\n\n        return ret;\n      };\n    });\n  }\n\n  StateSelection.unique = unique;\n  registerModifier('first', first);\n\n  function first(b) {\n    var q = compile(b);\n    return build(function () {\n      return function (state) {\n        var r = q(state);\n        return r.length ? [r[0]] : [];\n      };\n    });\n  }\n\n  StateSelection.first = first;\n  registerModifier('filter', filter);\n\n  function filter(b, p) {\n    return flatMap(b, function (n) {\n      return p(n) ? [n] : [];\n    });\n  }\n\n  StateSelection.filter = filter;\n  registerModifier('withStatus', withStatus);\n\n  function withStatus(b, s) {\n    return filter(b, function (n) {\n      return n.status === s;\n    });\n  }\n\n  StateSelection.withStatus = withStatus;\n  registerModifier('withTag', withTag);\n\n  function withTag(b, tag) {\n    return filter(b, function (n) {\n      return !!n.transform.tags && n.transform.tags.indexOf(tag) >= 0;\n    });\n  }\n\n  StateSelection.withTag = withTag;\n  registerModifier('subtree', subtree);\n\n  function subtree(b) {\n    return flatMap(b, function (n, s) {\n      var nodes = [];\n      StateTree.doPreOrder(s.tree, s.tree.transforms.get(n.transform.ref), nodes, function (x, _, ctx) {\n        ctx.push(x.ref);\n      });\n      return nodes.map(function (x) {\n        return s.cells.get(x);\n      });\n    });\n  }\n\n  StateSelection.subtree = subtree;\n  registerModifier('children', children);\n\n  function children(b) {\n    return flatMap(b, function (n, s) {\n      var nodes = [];\n      s.tree.children.get(n.transform.ref).forEach(function (c) {\n        return nodes.push(s.cells.get(c));\n      });\n      return nodes;\n    });\n  }\n\n  StateSelection.children = children;\n  registerModifier('ofType', ofType);\n\n  function ofType(b, t) {\n    return filter(b, function (n) {\n      return n.obj ? n.obj.type === t.type : false;\n    });\n  }\n\n  StateSelection.ofType = ofType;\n  registerModifier('ancestor', ancestor);\n\n  function ancestor(b, test) {\n    return unique(mapObject(b, function (n, s) {\n      return findAncestor(s.tree, s.cells, n.transform.ref, test);\n    }));\n  }\n\n  StateSelection.ancestor = ancestor;\n  registerModifier('ancestorOfType', ancestorOfType);\n\n  function ancestorOfType(b, types) {\n    return unique(mapObject(b, function (n, s) {\n      return findAncestorOfType(s.tree, s.cells, n.transform.ref, types);\n    }));\n  }\n\n  StateSelection.ancestorOfType = ancestorOfType;\n  registerModifier('ancestorWithTransformer', ancestorWithTransformer);\n\n  function ancestorWithTransformer(b, transfomers) {\n    return unique(mapObject(b, function (n, s) {\n      return findAncestorWithTransformer(s.tree, s.cells, n.transform.ref, transfomers);\n    }));\n  }\n\n  StateSelection.ancestorWithTransformer = ancestorWithTransformer;\n  registerModifier('withTransformer', withTransformer);\n\n  function withTransformer(b, t) {\n    return filter(b, function (o) {\n      return o.transform.transformer === t;\n    });\n  }\n\n  StateSelection.withTransformer = withTransformer;\n  registerModifier('root', root);\n\n  function root(b, test) {\n    return unique(mapObject(b, function (n, s) {\n      return findRoot(s.tree, s.cells, n.transform.ref, test);\n    }));\n  }\n\n  StateSelection.root = root;\n  registerModifier('rootOfType', rootOfType);\n\n  function rootOfType(b, types) {\n    return unique(mapObject(b, function (n, s) {\n      return findRootOfType(s.tree, s.cells, n.transform.ref, types);\n    }));\n  }\n\n  StateSelection.rootOfType = rootOfType;\n  registerModifier('parent', parent);\n\n  function parent(b) {\n    return unique(mapObject(b, function (n, s) {\n      return s.cells.get(s.tree.transforms.get(n.transform.ref).parent);\n    }));\n  }\n\n  StateSelection.parent = parent;\n\n  function _findAncestor(tree, cells, root, test, findClosest) {\n    var current = tree.transforms.get(root);\n    var ret = void 0;\n\n    while (true) {\n      current = tree.transforms.get(current.parent);\n      var cell = cells.get(current.ref);\n\n      if (cell.obj && test(cell)) {\n        ret = cell;\n        if (findClosest) return ret;\n      }\n\n      if (current.ref === StateTransform.RootRef) {\n        return ret;\n      }\n    }\n  } // Return first ancestor that satisfies the given test\n\n\n  function findAncestor(tree, cells, root, test) {\n    return _findAncestor(tree, cells, root, test, true);\n  }\n\n  StateSelection.findAncestor = findAncestor; // Return last (with lowest depth) ancestor that satisfies the given test\n\n  function findRoot(tree, cells, root, test) {\n    return _findAncestor(tree, cells, root, test, false);\n  }\n\n  StateSelection.findRoot = findRoot;\n\n  function findAncestorWithTransformer(tree, cells, root, transfomers) {\n    return findAncestor(tree, cells, root, Array.isArray(transfomers) ? function (cell) {\n      return transfomers.indexOf(cell.transform.transformer) >= 0;\n    } : function (cell) {\n      return cell.transform.transformer === transfomers;\n    });\n  }\n\n  StateSelection.findAncestorWithTransformer = findAncestorWithTransformer;\n\n  function findAncestorOfType(tree, cells, root, types) {\n    return findAncestor(tree, cells, root, _testTypes(types));\n  }\n\n  StateSelection.findAncestorOfType = findAncestorOfType;\n\n  function findRootOfType(tree, cells, root, types) {\n    return findRoot(tree, cells, root, _testTypes(types));\n  }\n\n  StateSelection.findRootOfType = findRootOfType;\n\n  function _testTypes(types) {\n    return Array.isArray(types) ? function (cell) {\n      for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\n        var t = types_1[_i];\n        if (t.type === cell.obj.type) return true;\n      }\n    } : function (cell) {\n      return cell.obj.type === types.type;\n    };\n  }\n\n  function findUniqueTagsInSubtree(tree, root, tags) {\n    return StateTree.doPreOrder(tree, tree.transforms.get(root), {\n      refs: {},\n      tags: tags\n    }, _findUniqueTagsInSubtree).refs;\n  }\n\n  StateSelection.findUniqueTagsInSubtree = findUniqueTagsInSubtree;\n\n  function _findUniqueTagsInSubtree(n, _, s) {\n    if (n.tags) {\n      for (var _i = 0, _a = n.tags; _i < _a.length; _i++) {\n        var t = _a[_i];\n        if (!s.tags.has(t)) continue;\n        s.refs[t] = n.ref;\n        break;\n      }\n    }\n\n    return true;\n  }\n\n  function findTagInSubtree(tree, root, tag) {\n    return StateTree.doPreOrder(tree, tree.transforms.get(root), {\n      ref: void 0,\n      tag: tag\n    }, _findTagInSubtree).ref;\n  }\n\n  StateSelection.findTagInSubtree = findTagInSubtree;\n\n  function _findTagInSubtree(n, _, s) {\n    if (n.tags && n.tags.indexOf(s.tag) >= 0) {\n      s.ref = n.ref;\n      return false;\n    }\n\n    return true;\n  }\n\n  function findWithAllTags(tree, root, tags) {\n    return StateTree.doPreOrder(tree, tree.transforms.get(root), {\n      refs: [],\n      tags: tags\n    }, _findWithAllTags).refs;\n  }\n\n  StateSelection.findWithAllTags = findWithAllTags;\n\n  function _findWithAllTags(n, _, s) {\n    if (n.tags) {\n      var len = s.tags.size;\n      var found = 0;\n\n      for (var _i = 0, _a = n.tags; _i < _a.length; _i++) {\n        var t = _a[_i];\n        if (!s.tags.has(t)) continue;\n        found++;\n\n        if (found === len) {\n          s.refs.push(n);\n          break;\n        }\n      }\n    } else if (s.tags.size === 0) {\n      s.refs.push(n);\n    }\n  }\n\n  function tryFindDecorator(state, root, transformer) {\n    var t = state.transforms.get(root);\n    if (t.transformer === transformer) return state.cells.get(root);\n    var children = state.tree.children.get(root);\n    if (children.size !== 1) return;\n    var first = children.first();\n    if (state.transforms.get(first).transformer.definition.isDecorator) return tryFindDecorator(state, first, transformer);\n  }\n\n  StateSelection.tryFindDecorator = tryFindDecorator;\n})(StateSelection || (StateSelection = {}));\n\nexport { StateSelection };","map":{"version":3,"sources":["../../../src/mol-state/state/selection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { StateTree } from '../tree';\r\nimport { StateTransform } from '../transform';\r\nvar StateSelection;\r\n(function (StateSelection) {\r\n    function select(s, state) {\r\n        return compile(s)(state);\r\n    }\r\n    StateSelection.select = select;\r\n    function compile(s) {\r\n        var selector = s ? s : Generators.root;\r\n        var query;\r\n        if (isBuilder(selector))\r\n            query = selector.compile();\r\n        else if (isObj(selector))\r\n            query = Generators.byValue(selector).compile();\r\n        else if (isQuery(selector))\r\n            query = selector;\r\n        else\r\n            query = Generators.byRef(selector).compile();\r\n        return query;\r\n    }\r\n    StateSelection.compile = compile;\r\n    function isObj(arg) {\r\n        return arg.transform !== void 0 && arg.status !== void 0;\r\n    }\r\n    function isBuilder(arg) {\r\n        return arg.compile !== void 0;\r\n    }\r\n    function isQuery(arg) {\r\n        return typeof arg === 'function';\r\n    }\r\n    var BuilderPrototype = {\r\n        select: function (state) {\r\n            return select(this, state || this.state);\r\n        }\r\n    };\r\n    function registerModifier(name, f) {\r\n        BuilderPrototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            return f.call.apply(f, __spreadArray([void 0, this], args, false));\r\n        };\r\n    }\r\n    function build(compile) {\r\n        return Object.create(BuilderPrototype, { compile: { writable: false, configurable: false, value: compile } });\r\n    }\r\n    var Generators;\r\n    (function (Generators) {\r\n        Generators.root = build(function () { return function (state) { return [state.cells.get(state.tree.root.ref)]; }; });\r\n        function byRef() {\r\n            var refs = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                refs[_i] = arguments[_i];\r\n            }\r\n            return build(function () { return function (state) {\r\n                var ret = [];\r\n                for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\r\n                    var ref = refs_1[_i];\r\n                    var n = state.cells.get(ref);\r\n                    if (!n)\r\n                        continue;\r\n                    ret.push(n);\r\n                }\r\n                return ret;\r\n            }; });\r\n        }\r\n        Generators.byRef = byRef;\r\n        function byValue() {\r\n            var objects = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                objects[_i] = arguments[_i];\r\n            }\r\n            return build(function () { return function (state) { return objects; }; });\r\n        }\r\n        Generators.byValue = byValue;\r\n        function rootsOfType(type, root) {\r\n            if (root === void 0) { root = StateTransform.RootRef; }\r\n            return build(function () { return function (state) {\r\n                var ctx = { roots: [], cells: state.cells, type: type.type };\r\n                StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findRootsOfType);\r\n                return ctx.roots;\r\n            }; });\r\n        }\r\n        Generators.rootsOfType = rootsOfType;\r\n        function ofType(type, root) {\r\n            if (root === void 0) { root = StateTransform.RootRef; }\r\n            return build(function () { return function (state) {\r\n                var ctx = { ret: [], cells: state.cells, type: type.type };\r\n                StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfType);\r\n                return ctx.ret;\r\n            }; });\r\n        }\r\n        Generators.ofType = ofType;\r\n        function ofTransformer(t, root) {\r\n            if (root === void 0) { root = StateTransform.RootRef; }\r\n            return build(function () { return function (state) {\r\n                var ctx = { ret: [], cells: state.cells, t: t };\r\n                StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfTransformer);\r\n                return ctx.ret;\r\n            }; });\r\n        }\r\n        Generators.ofTransformer = ofTransformer;\r\n        function ofTransformerWithError(t, root) {\r\n            if (root === void 0) { root = StateTransform.RootRef; }\r\n            return build(function () { return function (state) {\r\n                var ctx = { ret: [], cells: state.cells, t: t };\r\n                StateTree.doPreOrder(state.tree, state.tree.transforms.get(root), ctx, _findOfTransformerWithError);\r\n                return ctx.ret;\r\n            }; });\r\n        }\r\n        Generators.ofTransformerWithError = ofTransformerWithError;\r\n        function _findRootsOfType(n, _, s) {\r\n            var cell = s.cells.get(n.ref);\r\n            if (cell && cell.obj && cell.obj.type === s.type) {\r\n                s.roots.push(cell);\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        function _findOfType(n, _, s) {\r\n            var cell = s.cells.get(n.ref);\r\n            if (cell && cell.obj && cell.obj.type === s.type) {\r\n                s.ret.push(cell);\r\n            }\r\n            return true;\r\n        }\r\n        function _findOfTransformer(n, _, s) {\r\n            var cell = s.cells.get(n.ref);\r\n            if (cell && cell.obj && cell.transform.transformer === s.t) {\r\n                s.ret.push(cell);\r\n            }\r\n            return true;\r\n        }\r\n        function _findOfTransformerWithError(n, _, s) {\r\n            var cell = s.cells.get(n.ref);\r\n            if (cell && cell.status === 'error' && cell.transform.transformer === s.t) {\r\n                s.ret.push(cell);\r\n            }\r\n            return true;\r\n        }\r\n    })(Generators = StateSelection.Generators || (StateSelection.Generators = {}));\r\n    registerModifier('flatMap', flatMap);\r\n    function flatMap(b, f) {\r\n        var q = compile(b);\r\n        return build(function () { return function (state) {\r\n            var ret = [];\r\n            for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\r\n                var n = _a[_i];\r\n                for (var _b = 0, _c = f(n, state); _b < _c.length; _b++) {\r\n                    var m = _c[_b];\r\n                    ret.push(m);\r\n                }\r\n            }\r\n            return ret;\r\n        }; });\r\n    }\r\n    StateSelection.flatMap = flatMap;\r\n    registerModifier('mapObject', mapObject);\r\n    function mapObject(b, f) {\r\n        var q = compile(b);\r\n        return build(function () { return function (state) {\r\n            var ret = [];\r\n            for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\r\n                var n = _a[_i];\r\n                var x = f(n, state);\r\n                if (x)\r\n                    ret.push(x);\r\n            }\r\n            return ret;\r\n        }; });\r\n    }\r\n    StateSelection.mapObject = mapObject;\r\n    registerModifier('unique', unique);\r\n    function unique(b) {\r\n        var q = compile(b);\r\n        return build(function () { return function (state) {\r\n            var set = new Set();\r\n            var ret = [];\r\n            for (var _i = 0, _a = q(state); _i < _a.length; _i++) {\r\n                var n = _a[_i];\r\n                if (!n)\r\n                    continue;\r\n                if (!set.has(n.transform.ref)) {\r\n                    set.add(n.transform.ref);\r\n                    ret.push(n);\r\n                }\r\n            }\r\n            return ret;\r\n        }; });\r\n    }\r\n    StateSelection.unique = unique;\r\n    registerModifier('first', first);\r\n    function first(b) {\r\n        var q = compile(b);\r\n        return build(function () { return function (state) {\r\n            var r = q(state);\r\n            return r.length ? [r[0]] : [];\r\n        }; });\r\n    }\r\n    StateSelection.first = first;\r\n    registerModifier('filter', filter);\r\n    function filter(b, p) { return flatMap(b, function (n) { return p(n) ? [n] : []; }); }\r\n    StateSelection.filter = filter;\r\n    registerModifier('withStatus', withStatus);\r\n    function withStatus(b, s) { return filter(b, function (n) { return n.status === s; }); }\r\n    StateSelection.withStatus = withStatus;\r\n    registerModifier('withTag', withTag);\r\n    function withTag(b, tag) { return filter(b, function (n) { return !!n.transform.tags && n.transform.tags.indexOf(tag) >= 0; }); }\r\n    StateSelection.withTag = withTag;\r\n    registerModifier('subtree', subtree);\r\n    function subtree(b) {\r\n        return flatMap(b, function (n, s) {\r\n            var nodes = [];\r\n            StateTree.doPreOrder(s.tree, s.tree.transforms.get(n.transform.ref), nodes, function (x, _, ctx) { ctx.push(x.ref); });\r\n            return nodes.map(function (x) { return s.cells.get(x); });\r\n        });\r\n    }\r\n    StateSelection.subtree = subtree;\r\n    registerModifier('children', children);\r\n    function children(b) {\r\n        return flatMap(b, function (n, s) {\r\n            var nodes = [];\r\n            s.tree.children.get(n.transform.ref).forEach(function (c) { return nodes.push(s.cells.get(c)); });\r\n            return nodes;\r\n        });\r\n    }\r\n    StateSelection.children = children;\r\n    registerModifier('ofType', ofType);\r\n    function ofType(b, t) { return filter(b, function (n) { return n.obj ? n.obj.type === t.type : false; }); }\r\n    StateSelection.ofType = ofType;\r\n    registerModifier('ancestor', ancestor);\r\n    function ancestor(b, test) { return unique(mapObject(b, function (n, s) { return findAncestor(s.tree, s.cells, n.transform.ref, test); })); }\r\n    StateSelection.ancestor = ancestor;\r\n    registerModifier('ancestorOfType', ancestorOfType);\r\n    function ancestorOfType(b, types) { return unique(mapObject(b, function (n, s) { return findAncestorOfType(s.tree, s.cells, n.transform.ref, types); })); }\r\n    StateSelection.ancestorOfType = ancestorOfType;\r\n    registerModifier('ancestorWithTransformer', ancestorWithTransformer);\r\n    function ancestorWithTransformer(b, transfomers) { return unique(mapObject(b, function (n, s) { return findAncestorWithTransformer(s.tree, s.cells, n.transform.ref, transfomers); })); }\r\n    StateSelection.ancestorWithTransformer = ancestorWithTransformer;\r\n    registerModifier('withTransformer', withTransformer);\r\n    function withTransformer(b, t) { return filter(b, function (o) { return o.transform.transformer === t; }); }\r\n    StateSelection.withTransformer = withTransformer;\r\n    registerModifier('root', root);\r\n    function root(b, test) { return unique(mapObject(b, function (n, s) { return findRoot(s.tree, s.cells, n.transform.ref, test); })); }\r\n    StateSelection.root = root;\r\n    registerModifier('rootOfType', rootOfType);\r\n    function rootOfType(b, types) { return unique(mapObject(b, function (n, s) { return findRootOfType(s.tree, s.cells, n.transform.ref, types); })); }\r\n    StateSelection.rootOfType = rootOfType;\r\n    registerModifier('parent', parent);\r\n    function parent(b) { return unique(mapObject(b, function (n, s) { return s.cells.get(s.tree.transforms.get(n.transform.ref).parent); })); }\r\n    StateSelection.parent = parent;\r\n    function _findAncestor(tree, cells, root, test, findClosest) {\r\n        var current = tree.transforms.get(root);\r\n        var ret = void 0;\r\n        while (true) {\r\n            current = tree.transforms.get(current.parent);\r\n            var cell = cells.get(current.ref);\r\n            if (cell.obj && test(cell)) {\r\n                ret = cell;\r\n                if (findClosest)\r\n                    return ret;\r\n            }\r\n            if (current.ref === StateTransform.RootRef) {\r\n                return ret;\r\n            }\r\n        }\r\n    }\r\n    // Return first ancestor that satisfies the given test\r\n    function findAncestor(tree, cells, root, test) {\r\n        return _findAncestor(tree, cells, root, test, true);\r\n    }\r\n    StateSelection.findAncestor = findAncestor;\r\n    // Return last (with lowest depth) ancestor that satisfies the given test\r\n    function findRoot(tree, cells, root, test) {\r\n        return _findAncestor(tree, cells, root, test, false);\r\n    }\r\n    StateSelection.findRoot = findRoot;\r\n    function findAncestorWithTransformer(tree, cells, root, transfomers) {\r\n        return findAncestor(tree, cells, root, Array.isArray(transfomers)\r\n            ? function (cell) { return transfomers.indexOf(cell.transform.transformer) >= 0; }\r\n            : function (cell) { return cell.transform.transformer === transfomers; });\r\n    }\r\n    StateSelection.findAncestorWithTransformer = findAncestorWithTransformer;\r\n    function findAncestorOfType(tree, cells, root, types) {\r\n        return findAncestor(tree, cells, root, _testTypes(types));\r\n    }\r\n    StateSelection.findAncestorOfType = findAncestorOfType;\r\n    function findRootOfType(tree, cells, root, types) {\r\n        return findRoot(tree, cells, root, _testTypes(types));\r\n    }\r\n    StateSelection.findRootOfType = findRootOfType;\r\n    function _testTypes(types) {\r\n        return Array.isArray(types)\r\n            ? function (cell) {\r\n                for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\r\n                    var t = types_1[_i];\r\n                    if (t.type === cell.obj.type)\r\n                        return true;\r\n                }\r\n            } : function (cell) { return cell.obj.type === types.type; };\r\n    }\r\n    function findUniqueTagsInSubtree(tree, root, tags) {\r\n        return StateTree.doPreOrder(tree, tree.transforms.get(root), { refs: {}, tags: tags }, _findUniqueTagsInSubtree).refs;\r\n    }\r\n    StateSelection.findUniqueTagsInSubtree = findUniqueTagsInSubtree;\r\n    function _findUniqueTagsInSubtree(n, _, s) {\r\n        if (n.tags) {\r\n            for (var _i = 0, _a = n.tags; _i < _a.length; _i++) {\r\n                var t = _a[_i];\r\n                if (!s.tags.has(t))\r\n                    continue;\r\n                s.refs[t] = n.ref;\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function findTagInSubtree(tree, root, tag) {\r\n        return StateTree.doPreOrder(tree, tree.transforms.get(root), { ref: void 0, tag: tag }, _findTagInSubtree).ref;\r\n    }\r\n    StateSelection.findTagInSubtree = findTagInSubtree;\r\n    function _findTagInSubtree(n, _, s) {\r\n        if (n.tags && n.tags.indexOf(s.tag) >= 0) {\r\n            s.ref = n.ref;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function findWithAllTags(tree, root, tags) {\r\n        return StateTree.doPreOrder(tree, tree.transforms.get(root), { refs: [], tags: tags }, _findWithAllTags).refs;\r\n    }\r\n    StateSelection.findWithAllTags = findWithAllTags;\r\n    function _findWithAllTags(n, _, s) {\r\n        if (n.tags) {\r\n            var len = s.tags.size;\r\n            var found = 0;\r\n            for (var _i = 0, _a = n.tags; _i < _a.length; _i++) {\r\n                var t = _a[_i];\r\n                if (!s.tags.has(t))\r\n                    continue;\r\n                found++;\r\n                if (found === len) {\r\n                    s.refs.push(n);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (s.tags.size === 0) {\r\n            s.refs.push(n);\r\n        }\r\n    }\r\n    function tryFindDecorator(state, root, transformer) {\r\n        var t = state.transforms.get(root);\r\n        if (t.transformer === transformer)\r\n            return state.cells.get(root);\r\n        var children = state.tree.children.get(root);\r\n        if (children.size !== 1)\r\n            return;\r\n        var first = children.first();\r\n        if (state.transforms.get(first).transformer.definition.isDecorator)\r\n            return tryFindDecorator(state, first, transformer);\r\n    }\r\n    StateSelection.tryFindDecorator = tryFindDecorator;\r\n})(StateSelection || (StateSelection = {}));\r\nexport { StateSelection };\r\n//# sourceMappingURL=selection.js.map"]},"metadata":{},"sourceType":"module"}