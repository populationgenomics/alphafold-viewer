{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { UUID } from '../../../mol-util/uuid';\nimport { CustomProperties } from '../../custom-property';\nimport { calcModelCenter, getAsymIdCount } from './util';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { Coordinates } from '../coordinates';\nimport { Task } from '../../../mol-task';\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\nimport { createModels } from '../../../mol-model-formats/structure/basic/parser';\nimport { MmcifFormat } from '../../../mol-model-formats/structure/mmcif';\nimport { ModelSymmetry } from '../../../mol-model-formats/structure/property/symmetry';\nimport { Column } from '../../../mol-data/db';\nimport { CustomModelProperty } from '../../../mol-model-props/common/custom-model-property';\nimport { ArrayTrajectory } from '../trajectory';\n{}\nexport var Model;\n\n(function (Model) {\n  function _trajectoryFromModelAndCoordinates(model, coordinates) {\n    var trajectory = [];\n    var frames = coordinates.frames;\n    var srcIndex = model.atomicHierarchy.atomSourceIndex;\n    var isIdentity = Column.isIdentity(srcIndex);\n    var srcIndexArray = isIdentity ? void 0 : srcIndex.toArray({\n      array: Int32Array\n    });\n\n    for (var i = 0, il = frames.length; i < il; ++i) {\n      var f = frames[i];\n\n      var m = __assign(__assign({}, model), {\n        id: UUID.create22(),\n        modelNum: i,\n        atomicConformation: Coordinates.getAtomicConformation(f, model.atomicConformation.atomId, srcIndexArray),\n        // TODO: add support for supplying sphere and gaussian coordinates in addition to atomic coordinates?\n        // coarseConformation: coarse.conformation,\n        customProperties: new CustomProperties(),\n        _staticPropertyData: Object.create(null),\n        _dynamicPropertyData: Object.create(null)\n      });\n\n      if (f.cell) {\n        var symmetry = ModelSymmetry.fromCell(f.cell.size, f.cell.anglesInRadians);\n        ModelSymmetry.Provider.set(m, symmetry);\n      }\n\n      Model.TrajectoryInfo.set(m, {\n        index: i,\n        size: frames.length\n      });\n      trajectory.push(m);\n    }\n\n    return {\n      trajectory: trajectory,\n      srcIndexArray: srcIndexArray\n    };\n  }\n\n  function trajectoryFromModelAndCoordinates(model, coordinates) {\n    return new ArrayTrajectory(_trajectoryFromModelAndCoordinates(model, coordinates).trajectory);\n  }\n\n  Model.trajectoryFromModelAndCoordinates = trajectoryFromModelAndCoordinates;\n\n  function trajectoryFromTopologyAndCoordinates(topology, coordinates) {\n    var _this = this;\n\n    return Task.create('Create Trajectory', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var models, model, trajectory, bondData, indexPairBonds, index, _a, trajectory_1, m;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , createModels(topology.basic, topology.sourceData, ctx)];\n\n            case 1:\n              models = _b.sent();\n              if (models.frameCount === 0) throw new Error('found no model');\n              model = models.representative;\n              trajectory = _trajectoryFromModelAndCoordinates(model, coordinates).trajectory;\n              bondData = {\n                pairs: topology.bonds,\n                count: model.atomicHierarchy.atoms._rowCount\n              };\n              indexPairBonds = IndexPairBonds.fromData(bondData);\n              index = 0;\n\n              for (_a = 0, trajectory_1 = trajectory; _a < trajectory_1.length; _a++) {\n                m = trajectory_1[_a];\n                IndexPairBonds.Provider.set(m, indexPairBonds);\n                Model.TrajectoryInfo.set(m, {\n                  index: index++,\n                  size: trajectory.length\n                });\n              }\n\n              return [2\n              /*return*/\n              , new ArrayTrajectory(trajectory)];\n          }\n        });\n      });\n    });\n  }\n\n  Model.trajectoryFromTopologyAndCoordinates = trajectoryFromTopologyAndCoordinates;\n  var CenterProp = '__Center__';\n\n  function getCenter(model) {\n    if (model._dynamicPropertyData[CenterProp]) return model._dynamicPropertyData[CenterProp];\n    var center = calcModelCenter(model.atomicConformation, model.coarseConformation);\n    model._dynamicPropertyData[CenterProp] = center;\n    return center;\n  }\n\n  Model.getCenter = getCenter;\n\n  function invertIndex(xs) {\n    var invertedIndex = new Int32Array(xs.rowCount);\n    var isIdentity = false;\n\n    for (var i = 0, _i = xs.rowCount; i < _i; i++) {\n      var x = xs.value(i);\n      if (x !== i) isIdentity = false;\n      invertedIndex[x] = i;\n    }\n\n    return {\n      isIdentity: isIdentity,\n      invertedIndex: invertedIndex\n    };\n  }\n\n  var InvertedAtomSrcIndexProp = '__InvertedAtomSrcIndex__';\n\n  function getInvertedAtomSourceIndex(model) {\n    if (model._staticPropertyData[InvertedAtomSrcIndexProp]) return model._staticPropertyData[InvertedAtomSrcIndexProp];\n    var index = invertIndex(model.atomicHierarchy.atomSourceIndex);\n    model._staticPropertyData[InvertedAtomSrcIndexProp] = index;\n    return index;\n  }\n\n  Model.getInvertedAtomSourceIndex = getInvertedAtomSourceIndex;\n  var TrajectoryInfoProp = '__TrajectoryInfo__';\n  Model.TrajectoryInfo = {\n    get: function (model) {\n      return model._dynamicPropertyData[TrajectoryInfoProp] || {\n        index: 0,\n        size: 1\n      };\n    },\n    set: function (model, trajectoryInfo) {\n      return model._dynamicPropertyData[TrajectoryInfoProp] = trajectoryInfo;\n    }\n  };\n  var AsymIdCountProp = '__AsymIdCount__';\n  Model.AsymIdCount = {\n    get: function (model) {\n      if (model._dynamicPropertyData[AsymIdCountProp]) return model._dynamicPropertyData[AsymIdCountProp];\n      var asymIdCount = getAsymIdCount(model);\n      model._dynamicPropertyData[AsymIdCountProp] = asymIdCount;\n      return asymIdCount;\n    }\n  };\n  Model.AsymIdOffset = CustomModelProperty.createSimple('asym_id_offset', 'static');\n  Model.Index = CustomModelProperty.createSimple('index', 'static');\n\n  function getRoot(model) {\n    return model.parent || model;\n  }\n\n  Model.getRoot = getRoot;\n\n  function areHierarchiesEqual(a, b) {\n    return a.atomicHierarchy === b.atomicHierarchy && a.coarseHierarchy === b.coarseHierarchy;\n  }\n\n  Model.areHierarchiesEqual = areHierarchiesEqual;\n  var CoordinatesHistoryProp = '__CoordinatesHistory__';\n  Model.CoordinatesHistory = {\n    get: function (model) {\n      return model._staticPropertyData[CoordinatesHistoryProp];\n    },\n    set: function (model, coordinatesHistory) {\n      return model._staticPropertyData[CoordinatesHistoryProp] = coordinatesHistory;\n    }\n  };\n  var CoarseGrainedProp = '__CoarseGrained__';\n  /**\r\n   * Has typical coarse grained atom names (BB, SC1) or less than three times as many\r\n   * atoms as polymer residues (C-alpha only models).\r\n   */\n\n  function isCoarseGrained(model) {\n    if (model._staticPropertyData[CoarseGrainedProp] !== undefined) return model._staticPropertyData[CoarseGrainedProp];\n    var polymerResidueCount = 0;\n    var polymerType = model.atomicHierarchy.derived.residue.polymerType;\n\n    for (var i = 0; i < polymerType.length; ++i) {\n      if (polymerType[i] !== 0\n      /* NA */\n      ) polymerResidueCount += 1;\n    } // check for coarse grained atom names\n\n\n    var hasBB = false,\n        hasSC1 = false;\n    var _a = model.atomicHierarchy.atoms,\n        label_atom_id = _a.label_atom_id,\n        atomCount = _a._rowCount;\n\n    for (var i = 0; i < atomCount; ++i) {\n      var atomName = label_atom_id.value(i);\n      if (!hasBB && atomName === 'BB') hasBB = true;\n      if (!hasSC1 && atomName === 'SC1') hasSC1 = true;\n      if (hasBB && hasSC1) break;\n    }\n\n    var coarseGrained = hasBB && hasSC1 || (polymerResidueCount && atomCount ? atomCount / polymerResidueCount < 3 : false);\n    model._staticPropertyData[CoarseGrainedProp] = coarseGrained;\n    return coarseGrained;\n  }\n\n  Model.isCoarseGrained = isCoarseGrained; //\n\n  function hasCarbohydrate(model) {\n    return model.properties.saccharideComponentMap.size > 0;\n  }\n\n  Model.hasCarbohydrate = hasCarbohydrate;\n\n  function hasProtein(model) {\n    var subtype = model.entities.subtype;\n\n    for (var i = 0, il = subtype.rowCount; i < il; ++i) {\n      if (subtype.value(i).startsWith('polypeptide')) return true;\n    }\n\n    return false;\n  }\n\n  Model.hasProtein = hasProtein;\n\n  function hasNucleic(model) {\n    var subtype = model.entities.subtype;\n\n    for (var i = 0, il = subtype.rowCount; i < il; ++i) {\n      var s = subtype.value(i);\n      if (s.endsWith('ribonucleotide hybrid') || s.endsWith('ribonucleotide')) return true;\n    }\n\n    return false;\n  }\n\n  Model.hasNucleic = hasNucleic;\n\n  function isFromPdbArchive(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n    return db.database_2.database_id.isDefined || // 4 character PDB id\n    model.entryId.match(/^[1-9][a-z0-9]{3,3}$/i) !== null || // long PDB id\n    model.entryId.match(/^pdb_[0-9]{4,4}[1-9][a-z0-9]{3,3}$/i) !== null;\n  }\n\n  Model.isFromPdbArchive = isFromPdbArchive;\n\n  function hasSecondaryStructure(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n    return db.struct_conf.id.isDefined || db.struct_sheet_range.id.isDefined;\n  }\n\n  Model.hasSecondaryStructure = hasSecondaryStructure;\n  var tmpAngles90 = Vec3.create(1.5707963, 1.5707963, 1.5707963); // in radians\n\n  var tmpLengths1 = Vec3.create(1, 1, 1);\n\n  function hasCrystalSymmetry(model) {\n    var _a;\n\n    var spacegroup = (_a = ModelSymmetry.Provider.get(model)) === null || _a === void 0 ? void 0 : _a.spacegroup;\n    return !!spacegroup && !(spacegroup.num === 1 && Vec3.equals(spacegroup.cell.anglesInRadians, tmpAngles90) && Vec3.equals(spacegroup.cell.size, tmpLengths1));\n  }\n\n  Model.hasCrystalSymmetry = hasCrystalSymmetry;\n\n  function isFromXray(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n\n    for (var i = 0; i < db.exptl.method.rowCount; i++) {\n      var v = db.exptl.method.value(i).toUpperCase();\n      if (v.indexOf('DIFFRACTION') >= 0) return true;\n    }\n\n    return false;\n  }\n\n  Model.isFromXray = isFromXray;\n\n  function isFromEm(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n\n    for (var i = 0; i < db.exptl.method.rowCount; i++) {\n      var v = db.exptl.method.value(i).toUpperCase();\n      if (v.indexOf('MICROSCOPY') >= 0) return true;\n    }\n\n    return false;\n  }\n\n  Model.isFromEm = isFromEm;\n\n  function isFromNmr(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n\n    for (var i = 0; i < db.exptl.method.rowCount; i++) {\n      var v = db.exptl.method.value(i).toUpperCase();\n      if (v.indexOf('NMR') >= 0) return true;\n    }\n\n    return false;\n  }\n\n  Model.isFromNmr = isFromNmr;\n\n  function hasXrayMap(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false; // Check exprimental method to exclude models solved with\n    // 'ELECTRON CRYSTALLOGRAPHY' which also have structure factors\n\n    if (!isFromXray(model)) return false;\n    var db = model.sourceData.data.db;\n    var status_code_sf = db.pdbx_database_status.status_code_sf;\n    return status_code_sf.isDefined && status_code_sf.value(0) === 'REL';\n  }\n\n  Model.hasXrayMap = hasXrayMap;\n  /**\r\n   * Also checks for `content_type` of 'associated EM volume' to exclude cases\r\n   * like 6TEK which are solved with 'X-RAY DIFFRACTION' but have an related\r\n   * EMDB entry of type 'other EM volume'.\r\n   */\n\n  function hasEmMap(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n    var _a = db.pdbx_database_related,\n        db_name = _a.db_name,\n        content_type = _a.content_type;\n\n    for (var i = 0, il = db.pdbx_database_related._rowCount; i < il; ++i) {\n      if (db_name.value(i).toUpperCase() === 'EMDB' && content_type.value(i) === 'associated EM volume') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Model.hasEmMap = hasEmMap;\n\n  function hasDensityMap(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    return hasXrayMap(model) || hasEmMap(model);\n  }\n\n  Model.hasDensityMap = hasDensityMap;\n\n  function probablyHasDensityMap(model) {\n    if (!MmcifFormat.is(model.sourceData)) return false;\n    var db = model.sourceData.data.db;\n    return hasDensityMap(model) || // check if from pdb archive but missing relevant meta data\n    isFromPdbArchive(model) && (!db.exptl.method.isDefined || isFromXray(model) && (!db.pdbx_database_status.status_code_sf.isDefined || db.pdbx_database_status.status_code_sf.valueKind(0) === 2\n    /* Unknown */\n    ) || isFromEm(model) && !db.pdbx_database_related.db_name.isDefined);\n  }\n\n  Model.probablyHasDensityMap = probablyHasDensityMap;\n})(Model || (Model = {}));","map":{"version":3,"sources":["../../../../src/mol-model/structure/model/model.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,IAAT,QAAqB,wBAArB;AAKA,SAAS,gBAAT,QAAiC,uBAAjC;AAGA,SAAS,eAAT,EAA0B,cAA1B,QAAgD,QAAhD;AACA,SAAS,IAAT,QAAqB,kCAArB;AACA,SAAS,WAAT,QAA4B,gBAA5B;AAEA,SAAS,IAAT,QAAqB,mBAArB;AACA,SAAS,cAAT,QAA+B,gEAA/B;AACA,SAAS,YAAT,QAA6B,mDAA7B;AACA,SAAS,WAAT,QAA4B,4CAA5B;AAGA,SAAS,aAAT,QAA8B,wDAA9B;AACA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,mBAAT,QAAoC,uDAApC;AACA,SAAqB,eAArB,QAA4C,eAA5C;AA8DE,CAAG;AAEL,OAAM,IAAW,KAAX;;AAAN,CAAA,UAAiB,KAAjB,EAAsB;AAClB,WAAS,kCAAT,CAA4C,KAA5C,EAA0D,WAA1D,EAAkF;AAC9E,QAAM,UAAU,GAAY,EAA5B;AACQ,QAAA,MAAM,GAAK,WAAW,CAAhB,MAAN;AAER,QAAM,QAAQ,GAAG,KAAK,CAAC,eAAN,CAAsB,eAAvC;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAAnB;AACA,QAAM,aAAa,GAAG,UAAU,GAAG,KAAK,CAAR,GAAY,QAAQ,CAAC,OAAT,CAAiB;AAAE,MAAA,KAAK,EAAE;AAAT,KAAjB,CAA5C;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,MAAM,CAAC,MAA5B,EAAoC,CAAC,GAAG,EAAxC,EAA4C,EAAE,CAA9C,EAAiD;AAC7C,UAAM,CAAC,GAAG,MAAM,CAAC,CAAD,CAAhB;;AACA,UAAM,CAAC,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,KADA,CAAA,EACK;AACR,QAAA,EAAE,EAAE,IAAI,CAAC,QAAL,EADI;AAER,QAAA,QAAQ,EAAE,CAFF;AAGR,QAAA,kBAAkB,EAAE,WAAW,CAAC,qBAAZ,CAAkC,CAAlC,EAAqC,KAAK,CAAC,kBAAN,CAAyB,MAA9D,EAAsE,aAAtE,CAHZ;AAIR;AACA;AACA,QAAA,gBAAgB,EAAE,IAAI,gBAAJ,EANV;AAOR,QAAA,mBAAmB,EAAE,MAAM,CAAC,MAAP,CAAc,IAAd,CAPb;AAQR,QAAA,oBAAoB,EAAE,MAAM,CAAC,MAAP,CAAc,IAAd;AARd,OADL,CAAP;;AAYA,UAAI,CAAC,CAAC,IAAN,EAAY;AACR,YAAM,QAAQ,GAAG,aAAa,CAAC,QAAd,CAAuB,CAAC,CAAC,IAAF,CAAO,IAA9B,EAAoC,CAAC,CAAC,IAAF,CAAO,eAA3C,CAAjB;AACA,QAAA,aAAa,CAAC,QAAd,CAAuB,GAAvB,CAA2B,CAA3B,EAA8B,QAA9B;AACH;;AAED,MAAA,KAAA,CAAA,cAAA,CAAe,GAAf,CAAmB,CAAnB,EAAsB;AAAE,QAAA,KAAK,EAAE,CAAT;AAAY,QAAA,IAAI,EAAE,MAAM,CAAC;AAAzB,OAAtB;AAEA,MAAA,UAAU,CAAC,IAAX,CAAgB,CAAhB;AACH;;AACD,WAAO;AAAE,MAAA,UAAU,EAAA,UAAZ;AAAc,MAAA,aAAa,EAAA;AAA3B,KAAP;AACH;;AAED,WAAgB,iCAAhB,CAAkD,KAAlD,EAAgE,WAAhE,EAAwF;AACpF,WAAO,IAAI,eAAJ,CAAoB,kCAAkC,CAAC,KAAD,EAAQ,WAAR,CAAlC,CAAuD,UAA3E,CAAP;AACH;;AAFe,EAAA,KAAA,CAAA,iCAAA,GAAiC,iCAAjC;;AAIhB,WAAgB,oCAAhB,CAAqD,QAArD,EAAyE,WAAzE,EAAiG;AAAjG,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,CAAC,MAAL,CAAY,mBAAZ,EAAiC,UAAM,GAAN,EAAS;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAC9B,qBAAA,CAAA;AAAA;AAAA,gBAAM,YAAY,CAAC,QAAQ,CAAC,KAAV,EAAiB,QAAQ,CAAC,UAA1B,EAAsC,GAAtC,CAAlB,CAAA;;;AAAT,cAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AACN,kBAAI,MAAM,CAAC,UAAP,KAAsB,CAA1B,EAA6B,MAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACvB,cAAA,KAAK,GAAG,MAAM,CAAC,cAAf;AACE,cAAA,UAAU,GAAK,kCAAkC,CAAC,KAAD,EAAQ,WAAR,CAAlC,CAAL,UAAV;AAEF,cAAA,QAAQ,GAAG;AAAE,gBAAA,KAAK,EAAE,QAAQ,CAAC,KAAlB;AAAyB,gBAAA,KAAK,EAAE,KAAK,CAAC,eAAN,CAAsB,KAAtB,CAA4B;AAA5D,eAAX;AACA,cAAA,cAAc,GAAG,cAAc,CAAC,QAAf,CAAwB,QAAxB,CAAjB;AAEF,cAAA,KAAK,GAAG,CAAR;;AACJ,mBAAA,EAAA,GAAA,CAAA,EAAgB,YAAA,GAAA,UAAhB,EAAgB,EAAA,GAAA,YAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA4B;AAAjB,gBAAA,CAAC,GAAA,YAAA,CAAA,EAAA,CAAD;AACP,gBAAA,cAAc,CAAC,QAAf,CAAwB,GAAxB,CAA4B,CAA5B,EAA+B,cAA/B;AACA,gBAAA,KAAA,CAAA,cAAA,CAAe,GAAf,CAAmB,CAAnB,EAAsB;AAAE,kBAAA,KAAK,EAAE,KAAK,EAAd;AAAkB,kBAAA,IAAI,EAAE,UAAU,CAAC;AAAnC,iBAAtB;AACH;;AACD,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,eAAJ,CAAoB,UAApB,CAAP,CAAA;;;OAd6C,CAAA;AAehD,KAfM,CAAP;AAgBH;;AAjBe,EAAA,KAAA,CAAA,oCAAA,GAAoC,oCAApC;AAmBhB,MAAM,UAAU,GAAG,YAAnB;;AACA,WAAgB,SAAhB,CAA0B,KAA1B,EAAsC;AAClC,QAAI,KAAK,CAAC,oBAAN,CAA2B,UAA3B,CAAJ,EAA4C,OAAO,KAAK,CAAC,oBAAN,CAA2B,UAA3B,CAAP;AAC5C,QAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,kBAAP,EAA2B,KAAK,CAAC,kBAAjC,CAA9B;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,UAA3B,IAAyC,MAAzC;AACA,WAAO,MAAP;AACH;;AALe,EAAA,KAAA,CAAA,SAAA,GAAS,SAAT;;AAOhB,WAAS,WAAT,CAAqB,EAArB,EAAuC;AACnC,QAAM,aAAa,GAAG,IAAI,UAAJ,CAAe,EAAE,CAAC,QAAlB,CAAtB;AACA,QAAI,UAAU,GAAG,KAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,EAAE,CAAC,QAAxB,EAAkC,CAAC,GAAG,EAAtC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,UAAM,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,CAAV;AACA,UAAI,CAAC,KAAK,CAAV,EAAa,UAAU,GAAG,KAAb;AACb,MAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACH;;AACD,WAAO;AAAE,MAAA,UAAU,EAAA,UAAZ;AAAc,MAAA,aAAa,EAAE;AAA7B,KAAP;AACH;;AAED,MAAM,wBAAwB,GAAG,0BAAjC;;AACA,WAAgB,0BAAhB,CAA2C,KAA3C,EAAuD;AACnD,QAAI,KAAK,CAAC,mBAAN,CAA0B,wBAA1B,CAAJ,EAAyD,OAAO,KAAK,CAAC,mBAAN,CAA0B,wBAA1B,CAAP;AACzD,QAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,eAAN,CAAsB,eAAvB,CAAzB;AACA,IAAA,KAAK,CAAC,mBAAN,CAA0B,wBAA1B,IAAsD,KAAtD;AACA,WAAO,KAAP;AACH;;AALe,EAAA,KAAA,CAAA,0BAAA,GAA0B,0BAA1B;AAOhB,MAAM,kBAAkB,GAAG,oBAA3B;AAEa,EAAA,KAAA,CAAA,cAAA,GAAiB;AAC1B,IAAA,GAAG,EAAH,UAAI,KAAJ,EAAgB;AACZ,aAAO,KAAK,CAAC,oBAAN,CAA2B,kBAA3B,KAAkD;AAAE,QAAA,KAAK,EAAE,CAAT;AAAY,QAAA,IAAI,EAAE;AAAlB,OAAzD;AACH,KAHyB;AAI1B,IAAA,GAAG,EAAH,UAAI,KAAJ,EAAkB,cAAlB,EAAgD;AAC5C,aAAO,KAAK,CAAC,oBAAN,CAA2B,kBAA3B,IAAiD,cAAxD;AACH;AANyB,GAAjB;AASb,MAAM,eAAe,GAAG,iBAAxB;AAEa,EAAA,KAAA,CAAA,WAAA,GAAc;AACvB,IAAA,GAAG,EAAH,UAAI,KAAJ,EAAgB;AACZ,UAAI,KAAK,CAAC,oBAAN,CAA2B,eAA3B,CAAJ,EAAiD,OAAO,KAAK,CAAC,oBAAN,CAA2B,eAA3B,CAAP;AACjD,UAAM,WAAW,GAAG,cAAc,CAAC,KAAD,CAAlC;AACA,MAAA,KAAK,CAAC,oBAAN,CAA2B,eAA3B,IAA8C,WAA9C;AACA,aAAO,WAAP;AACH;AANsB,GAAd;AAUA,EAAA,KAAA,CAAA,YAAA,GAAe,mBAAmB,CAAC,YAApB,CAA+C,gBAA/C,EAAiE,QAAjE,CAAf;AAGA,EAAA,KAAA,CAAA,KAAA,GAAQ,mBAAmB,CAAC,YAApB,CAAwC,OAAxC,EAAiD,QAAjD,CAAR;;AAEb,WAAgB,OAAhB,CAAwB,KAAxB,EAAoC;AAChC,WAAO,KAAK,CAAC,MAAN,IAAgB,KAAvB;AACH;;AAFe,EAAA,KAAA,CAAA,OAAA,GAAO,OAAP;;AAIhB,WAAgB,mBAAhB,CAAoC,CAApC,EAA8C,CAA9C,EAAsD;AAClD,WAAO,CAAC,CAAC,eAAF,KAAsB,CAAC,CAAC,eAAxB,IAA2C,CAAC,CAAC,eAAF,KAAsB,CAAC,CAAC,eAA1E;AACH;;AAFe,EAAA,KAAA,CAAA,mBAAA,GAAmB,mBAAnB;AAIhB,MAAM,sBAAsB,GAAG,wBAA/B;AAIa,EAAA,KAAA,CAAA,kBAAA,GAAqB;AAC9B,IAAA,GAAG,EAAH,UAAI,KAAJ,EAAgB;AACZ,aAAO,KAAK,CAAC,mBAAN,CAA0B,sBAA1B,CAAP;AACH,KAH6B;AAI9B,IAAA,GAAG,EAAH,UAAI,KAAJ,EAAkB,kBAAlB,EAAwD;AACpD,aAAO,KAAK,CAAC,mBAAN,CAA0B,sBAA1B,IAAoD,kBAA3D;AACH;AAN6B,GAArB;AASb,MAAM,iBAAiB,GAAG,mBAA1B;AACA;;;AAGG;;AACH,WAAgB,eAAhB,CAAgC,KAAhC,EAA4C;AACxC,QAAI,KAAK,CAAC,mBAAN,CAA0B,iBAA1B,MAAiD,SAArD,EAAgE,OAAO,KAAK,CAAC,mBAAN,CAA0B,iBAA1B,CAAP;AAEhE,QAAI,mBAAmB,GAAG,CAA1B;AACQ,QAAA,WAAW,GAAK,KAAK,CAAC,eAAN,CAAsB,OAAtB,CAA8B,OAA9B,CAAL,WAAX;;AACR,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,EAAE,CAA1C,EAA6C;AACzC,UAAI,WAAW,CAAC,CAAD,CAAX,KAAc;AAAA;AAAlB,QAAuC,mBAAmB,IAAI,CAAvB;AAC1C,KAPuC,CASxC;;;AACA,QAAI,KAAK,GAAG,KAAZ;AAAA,QAAmB,MAAM,GAAG,KAA5B;AACM,QAAA,EAAA,GAA0C,KAAK,CAAC,eAAN,CAAsB,KAAhE;AAAA,QAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,QAA4B,SAAS,GAAA,EAAA,CAAA,SAArC;;AACN,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAChC,UAAM,QAAQ,GAAG,aAAa,CAAC,KAAd,CAAoB,CAApB,CAAjB;AACA,UAAI,CAAC,KAAD,IAAU,QAAQ,KAAK,IAA3B,EAAiC,KAAK,GAAG,IAAR;AACjC,UAAI,CAAC,MAAD,IAAW,QAAQ,KAAK,KAA5B,EAAmC,MAAM,GAAG,IAAT;AACnC,UAAI,KAAK,IAAI,MAAb,EAAqB;AACxB;;AAED,QAAM,aAAa,GAAI,KAAK,IAAI,MAAV,KAClB,mBAAmB,IAAI,SAAvB,GACM,SAAS,GAAG,mBAAZ,GAAkC,CADxC,GAEM,KAHY,CAAtB;AAKA,IAAA,KAAK,CAAC,mBAAN,CAA0B,iBAA1B,IAA+C,aAA/C;AACA,WAAO,aAAP;AACH;;AA1Be,EAAA,KAAA,CAAA,eAAA,GAAe,eAAf,CA3IE,CAuKlB;;AAEA,WAAgB,eAAhB,CAAgC,KAAhC,EAA4C;AACxC,WAAO,KAAK,CAAC,UAAN,CAAiB,sBAAjB,CAAwC,IAAxC,GAA+C,CAAtD;AACH;;AAFe,EAAA,KAAA,CAAA,eAAA,GAAe,eAAf;;AAIhB,WAAgB,UAAhB,CAA2B,KAA3B,EAAuC;AAC3B,QAAA,OAAO,GAAK,KAAK,CAAC,QAAN,CAAL,OAAP;;AACR,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,OAAO,CAAC,QAA7B,EAAuC,CAAC,GAAG,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAChD,UAAI,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,UAAjB,CAA4B,aAA5B,CAAJ,EAAgD,OAAO,IAAP;AACnD;;AACD,WAAO,KAAP;AACH;;AANe,EAAA,KAAA,CAAA,UAAA,GAAU,UAAV;;AAQhB,WAAgB,UAAhB,CAA2B,KAA3B,EAAuC;AAC3B,QAAA,OAAO,GAAK,KAAK,CAAC,QAAN,CAAL,OAAP;;AACR,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,OAAO,CAAC,QAA7B,EAAuC,CAAC,GAAG,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAChD,UAAM,CAAC,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,CAAV;AACA,UAAI,CAAC,CAAC,QAAF,CAAW,uBAAX,KAAuC,CAAC,CAAC,QAAF,CAAW,gBAAX,CAA3C,EAAyE,OAAO,IAAP;AAC5E;;AACD,WAAO,KAAP;AACH;;AAPe,EAAA,KAAA,CAAA,UAAA,GAAU,UAAV;;AAShB,WAAgB,gBAAhB,CAAiC,KAAjC,EAA6C;AACzC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;AACR,WACI,EAAE,CAAC,UAAH,CAAc,WAAd,CAA0B,SAA1B,IACA;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,uBAApB,MAAiD,IAFjD,IAGA;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,qCAApB,MAA+D,IALnE;AAOH;;AAVe,EAAA,KAAA,CAAA,gBAAA,GAAgB,gBAAhB;;AAYhB,WAAgB,qBAAhB,CAAsC,KAAtC,EAAkD;AAC9C,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;AACR,WACI,EAAE,CAAC,WAAH,CAAe,EAAf,CAAkB,SAAlB,IACA,EAAE,CAAC,kBAAH,CAAsB,EAAtB,CAAyB,SAF7B;AAIH;;AAPe,EAAA,KAAA,CAAA,qBAAA,GAAqB,qBAArB;AAShB,MAAM,WAAW,GAAG,IAAI,CAAC,MAAL,CAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAApB,CAnNkB,CAmNgD;;AAClE,MAAM,WAAW,GAAG,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAApB;;AACA,WAAgB,kBAAhB,CAAmC,KAAnC,EAA+C;;;AAC3C,QAAM,UAAU,GAAG,CAAA,EAAA,GAAA,aAAa,CAAC,QAAd,CAAuB,GAAvB,CAA2B,KAA3B,CAAA,MAAiC,IAAjC,IAAiC,EAAA,KAAA,KAAA,CAAjC,GAAiC,KAAA,CAAjC,GAAiC,EAAA,CAAE,UAAtD;AACA,WAAO,CAAC,CAAC,UAAF,IAAgB,EACnB,UAAU,CAAC,GAAX,KAAmB,CAAnB,IACA,IAAI,CAAC,MAAL,CAAY,UAAU,CAAC,IAAX,CAAgB,eAA5B,EAA6C,WAA7C,CADA,IAEA,IAAI,CAAC,MAAL,CAAY,UAAU,CAAC,IAAX,CAAgB,IAA5B,EAAkC,WAAlC,CAHmB,CAAvB;AAKH;;AAPe,EAAA,KAAA,CAAA,kBAAA,GAAkB,kBAAlB;;AAShB,WAAgB,UAAhB,CAA2B,KAA3B,EAAuC;AACnC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;;AACR,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,QAApC,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,UAAM,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,WAAzB,EAAV;AACA,UAAI,CAAC,CAAC,OAAF,CAAU,aAAV,KAA4B,CAAhC,EAAmC,OAAO,IAAP;AACtC;;AACD,WAAO,KAAP;AACH;;AARe,EAAA,KAAA,CAAA,UAAA,GAAU,UAAV;;AAUhB,WAAgB,QAAhB,CAAyB,KAAzB,EAAqC;AACjC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;;AACR,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,QAApC,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,UAAM,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,WAAzB,EAAV;AACA,UAAI,CAAC,CAAC,OAAF,CAAU,YAAV,KAA2B,CAA/B,EAAkC,OAAO,IAAP;AACrC;;AACD,WAAO,KAAP;AACH;;AARe,EAAA,KAAA,CAAA,QAAA,GAAQ,QAAR;;AAUhB,WAAgB,SAAhB,CAA0B,KAA1B,EAAsC;AAClC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;;AACR,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,QAApC,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,UAAM,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,KAAhB,CAAsB,CAAtB,EAAyB,WAAzB,EAAV;AACA,UAAI,CAAC,CAAC,OAAF,CAAU,KAAV,KAAoB,CAAxB,EAA2B,OAAO,IAAP;AAC9B;;AACD,WAAO,KAAP;AACH;;AARe,EAAA,KAAA,CAAA,SAAA,GAAS,SAAT;;AAUhB,WAAgB,UAAhB,CAA2B,KAA3B,EAAuC;AACnC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP,CADJ,CAEnC;AACA;;AACA,QAAI,CAAC,UAAU,CAAC,KAAD,CAAf,EAAwB,OAAO,KAAP;AAChB,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;AACA,QAAA,cAAc,GAAK,EAAE,CAAC,oBAAH,CAAL,cAAd;AACR,WAAO,cAAc,CAAC,SAAf,IAA4B,cAAc,CAAC,KAAf,CAAqB,CAArB,MAA4B,KAA/D;AACH;;AARe,EAAA,KAAA,CAAA,UAAA,GAAU,UAAV;AAUhB;;;;AAIG;;AACH,WAAgB,QAAhB,CAAyB,KAAzB,EAAqC;AACjC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;AACF,QAAA,EAAA,GAA4B,EAAE,CAAC,qBAA/B;AAAA,QAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,QAAW,YAAY,GAAA,EAAA,CAAA,YAAvB;;AACN,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,EAAE,CAAC,qBAAH,CAAyB,SAA9C,EAAyD,CAAC,GAAG,EAA7D,EAAiE,EAAE,CAAnE,EAAsE;AAClE,UAAI,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,WAAjB,OAAmC,MAAnC,IAA6C,YAAY,CAAC,KAAb,CAAmB,CAAnB,MAA0B,sBAA3E,EAAmG;AAC/F,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;;AAVe,EAAA,KAAA,CAAA,QAAA,GAAQ,QAAR;;AAYhB,WAAgB,aAAhB,CAA8B,KAA9B,EAA0C;AACtC,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AACvC,WAAO,UAAU,CAAC,KAAD,CAAV,IAAqB,QAAQ,CAAC,KAAD,CAApC;AACH;;AAHe,EAAA,KAAA,CAAA,aAAA,GAAa,aAAb;;AAKhB,WAAgB,qBAAhB,CAAsC,KAAtC,EAAkD;AAC9C,QAAI,CAAC,WAAW,CAAC,EAAZ,CAAe,KAAK,CAAC,UAArB,CAAL,EAAuC,OAAO,KAAP;AAC/B,QAAA,EAAE,GAAK,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAL,EAAF;AACR,WAAO,aAAa,CAAC,KAAD,CAAb,IACH;AACA,IAAA,gBAAgB,CAAC,KAAD,CAAhB,KACI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,SAAjB,IACC,UAAU,CAAC,KAAD,CAAV,KACG,CAAC,EAAE,CAAC,oBAAH,CAAwB,cAAxB,CAAuC,SAAxC,IACA,EAAE,CAAC,oBAAH,CAAwB,cAAxB,CAAuC,SAAvC,CAAiD,CAAjD,MAAmD;AAAA;AAFtD,KADD,IAKC,QAAQ,CAAC,KAAD,CAAR,IACG,CAAC,EAAE,CAAC,qBAAH,CAAyB,OAAzB,CAAiC,SAP1C,CAFJ;AAaH;;AAhBe,EAAA,KAAA,CAAA,qBAAA,GAAqB,qBAArB;AAiBnB,CA7SD,EAAiB,KAAK,KAAL,KAAK,GAAA,EAAA,CAAtB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { UUID } from '../../../mol-util/uuid';\r\nimport { CustomProperties } from '../../custom-property';\r\nimport { calcModelCenter, getAsymIdCount } from './util';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { Coordinates } from '../coordinates';\r\nimport { Task } from '../../../mol-task';\r\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\r\nimport { createModels } from '../../../mol-model-formats/structure/basic/parser';\r\nimport { MmcifFormat } from '../../../mol-model-formats/structure/mmcif';\r\nimport { ModelSymmetry } from '../../../mol-model-formats/structure/property/symmetry';\r\nimport { Column } from '../../../mol-data/db';\r\nimport { CustomModelProperty } from '../../../mol-model-props/common/custom-model-property';\r\nimport { ArrayTrajectory } from '../trajectory';\r\n{ }\r\nexport var Model;\r\n(function (Model) {\r\n    function _trajectoryFromModelAndCoordinates(model, coordinates) {\r\n        var trajectory = [];\r\n        var frames = coordinates.frames;\r\n        var srcIndex = model.atomicHierarchy.atomSourceIndex;\r\n        var isIdentity = Column.isIdentity(srcIndex);\r\n        var srcIndexArray = isIdentity ? void 0 : srcIndex.toArray({ array: Int32Array });\r\n        for (var i = 0, il = frames.length; i < il; ++i) {\r\n            var f = frames[i];\r\n            var m = __assign(__assign({}, model), { id: UUID.create22(), modelNum: i, atomicConformation: Coordinates.getAtomicConformation(f, model.atomicConformation.atomId, srcIndexArray), \r\n                // TODO: add support for supplying sphere and gaussian coordinates in addition to atomic coordinates?\r\n                // coarseConformation: coarse.conformation,\r\n                customProperties: new CustomProperties(), _staticPropertyData: Object.create(null), _dynamicPropertyData: Object.create(null) });\r\n            if (f.cell) {\r\n                var symmetry = ModelSymmetry.fromCell(f.cell.size, f.cell.anglesInRadians);\r\n                ModelSymmetry.Provider.set(m, symmetry);\r\n            }\r\n            Model.TrajectoryInfo.set(m, { index: i, size: frames.length });\r\n            trajectory.push(m);\r\n        }\r\n        return { trajectory: trajectory, srcIndexArray: srcIndexArray };\r\n    }\r\n    function trajectoryFromModelAndCoordinates(model, coordinates) {\r\n        return new ArrayTrajectory(_trajectoryFromModelAndCoordinates(model, coordinates).trajectory);\r\n    }\r\n    Model.trajectoryFromModelAndCoordinates = trajectoryFromModelAndCoordinates;\r\n    function trajectoryFromTopologyAndCoordinates(topology, coordinates) {\r\n        var _this = this;\r\n        return Task.create('Create Trajectory', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var models, model, trajectory, bondData, indexPairBonds, index, _a, trajectory_1, m;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, createModels(topology.basic, topology.sourceData, ctx)];\r\n                    case 1:\r\n                        models = _b.sent();\r\n                        if (models.frameCount === 0)\r\n                            throw new Error('found no model');\r\n                        model = models.representative;\r\n                        trajectory = _trajectoryFromModelAndCoordinates(model, coordinates).trajectory;\r\n                        bondData = { pairs: topology.bonds, count: model.atomicHierarchy.atoms._rowCount };\r\n                        indexPairBonds = IndexPairBonds.fromData(bondData);\r\n                        index = 0;\r\n                        for (_a = 0, trajectory_1 = trajectory; _a < trajectory_1.length; _a++) {\r\n                            m = trajectory_1[_a];\r\n                            IndexPairBonds.Provider.set(m, indexPairBonds);\r\n                            Model.TrajectoryInfo.set(m, { index: index++, size: trajectory.length });\r\n                        }\r\n                        return [2 /*return*/, new ArrayTrajectory(trajectory)];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    Model.trajectoryFromTopologyAndCoordinates = trajectoryFromTopologyAndCoordinates;\r\n    var CenterProp = '__Center__';\r\n    function getCenter(model) {\r\n        if (model._dynamicPropertyData[CenterProp])\r\n            return model._dynamicPropertyData[CenterProp];\r\n        var center = calcModelCenter(model.atomicConformation, model.coarseConformation);\r\n        model._dynamicPropertyData[CenterProp] = center;\r\n        return center;\r\n    }\r\n    Model.getCenter = getCenter;\r\n    function invertIndex(xs) {\r\n        var invertedIndex = new Int32Array(xs.rowCount);\r\n        var isIdentity = false;\r\n        for (var i = 0, _i = xs.rowCount; i < _i; i++) {\r\n            var x = xs.value(i);\r\n            if (x !== i)\r\n                isIdentity = false;\r\n            invertedIndex[x] = i;\r\n        }\r\n        return { isIdentity: isIdentity, invertedIndex: invertedIndex };\r\n    }\r\n    var InvertedAtomSrcIndexProp = '__InvertedAtomSrcIndex__';\r\n    function getInvertedAtomSourceIndex(model) {\r\n        if (model._staticPropertyData[InvertedAtomSrcIndexProp])\r\n            return model._staticPropertyData[InvertedAtomSrcIndexProp];\r\n        var index = invertIndex(model.atomicHierarchy.atomSourceIndex);\r\n        model._staticPropertyData[InvertedAtomSrcIndexProp] = index;\r\n        return index;\r\n    }\r\n    Model.getInvertedAtomSourceIndex = getInvertedAtomSourceIndex;\r\n    var TrajectoryInfoProp = '__TrajectoryInfo__';\r\n    Model.TrajectoryInfo = {\r\n        get: function (model) {\r\n            return model._dynamicPropertyData[TrajectoryInfoProp] || { index: 0, size: 1 };\r\n        },\r\n        set: function (model, trajectoryInfo) {\r\n            return model._dynamicPropertyData[TrajectoryInfoProp] = trajectoryInfo;\r\n        }\r\n    };\r\n    var AsymIdCountProp = '__AsymIdCount__';\r\n    Model.AsymIdCount = {\r\n        get: function (model) {\r\n            if (model._dynamicPropertyData[AsymIdCountProp])\r\n                return model._dynamicPropertyData[AsymIdCountProp];\r\n            var asymIdCount = getAsymIdCount(model);\r\n            model._dynamicPropertyData[AsymIdCountProp] = asymIdCount;\r\n            return asymIdCount;\r\n        },\r\n    };\r\n    Model.AsymIdOffset = CustomModelProperty.createSimple('asym_id_offset', 'static');\r\n    Model.Index = CustomModelProperty.createSimple('index', 'static');\r\n    function getRoot(model) {\r\n        return model.parent || model;\r\n    }\r\n    Model.getRoot = getRoot;\r\n    function areHierarchiesEqual(a, b) {\r\n        return a.atomicHierarchy === b.atomicHierarchy && a.coarseHierarchy === b.coarseHierarchy;\r\n    }\r\n    Model.areHierarchiesEqual = areHierarchiesEqual;\r\n    var CoordinatesHistoryProp = '__CoordinatesHistory__';\r\n    Model.CoordinatesHistory = {\r\n        get: function (model) {\r\n            return model._staticPropertyData[CoordinatesHistoryProp];\r\n        },\r\n        set: function (model, coordinatesHistory) {\r\n            return model._staticPropertyData[CoordinatesHistoryProp] = coordinatesHistory;\r\n        }\r\n    };\r\n    var CoarseGrainedProp = '__CoarseGrained__';\r\n    /**\r\n     * Has typical coarse grained atom names (BB, SC1) or less than three times as many\r\n     * atoms as polymer residues (C-alpha only models).\r\n     */\r\n    function isCoarseGrained(model) {\r\n        if (model._staticPropertyData[CoarseGrainedProp] !== undefined)\r\n            return model._staticPropertyData[CoarseGrainedProp];\r\n        var polymerResidueCount = 0;\r\n        var polymerType = model.atomicHierarchy.derived.residue.polymerType;\r\n        for (var i = 0; i < polymerType.length; ++i) {\r\n            if (polymerType[i] !== 0 /* NA */)\r\n                polymerResidueCount += 1;\r\n        }\r\n        // check for coarse grained atom names\r\n        var hasBB = false, hasSC1 = false;\r\n        var _a = model.atomicHierarchy.atoms, label_atom_id = _a.label_atom_id, atomCount = _a._rowCount;\r\n        for (var i = 0; i < atomCount; ++i) {\r\n            var atomName = label_atom_id.value(i);\r\n            if (!hasBB && atomName === 'BB')\r\n                hasBB = true;\r\n            if (!hasSC1 && atomName === 'SC1')\r\n                hasSC1 = true;\r\n            if (hasBB && hasSC1)\r\n                break;\r\n        }\r\n        var coarseGrained = (hasBB && hasSC1) || (polymerResidueCount && atomCount\r\n            ? atomCount / polymerResidueCount < 3\r\n            : false);\r\n        model._staticPropertyData[CoarseGrainedProp] = coarseGrained;\r\n        return coarseGrained;\r\n    }\r\n    Model.isCoarseGrained = isCoarseGrained;\r\n    //\r\n    function hasCarbohydrate(model) {\r\n        return model.properties.saccharideComponentMap.size > 0;\r\n    }\r\n    Model.hasCarbohydrate = hasCarbohydrate;\r\n    function hasProtein(model) {\r\n        var subtype = model.entities.subtype;\r\n        for (var i = 0, il = subtype.rowCount; i < il; ++i) {\r\n            if (subtype.value(i).startsWith('polypeptide'))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Model.hasProtein = hasProtein;\r\n    function hasNucleic(model) {\r\n        var subtype = model.entities.subtype;\r\n        for (var i = 0, il = subtype.rowCount; i < il; ++i) {\r\n            var s = subtype.value(i);\r\n            if (s.endsWith('ribonucleotide hybrid') || s.endsWith('ribonucleotide'))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Model.hasNucleic = hasNucleic;\r\n    function isFromPdbArchive(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        return (db.database_2.database_id.isDefined ||\r\n            // 4 character PDB id\r\n            model.entryId.match(/^[1-9][a-z0-9]{3,3}$/i) !== null ||\r\n            // long PDB id\r\n            model.entryId.match(/^pdb_[0-9]{4,4}[1-9][a-z0-9]{3,3}$/i) !== null);\r\n    }\r\n    Model.isFromPdbArchive = isFromPdbArchive;\r\n    function hasSecondaryStructure(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        return (db.struct_conf.id.isDefined ||\r\n            db.struct_sheet_range.id.isDefined);\r\n    }\r\n    Model.hasSecondaryStructure = hasSecondaryStructure;\r\n    var tmpAngles90 = Vec3.create(1.5707963, 1.5707963, 1.5707963); // in radians\r\n    var tmpLengths1 = Vec3.create(1, 1, 1);\r\n    function hasCrystalSymmetry(model) {\r\n        var _a;\r\n        var spacegroup = (_a = ModelSymmetry.Provider.get(model)) === null || _a === void 0 ? void 0 : _a.spacegroup;\r\n        return !!spacegroup && !(spacegroup.num === 1 &&\r\n            Vec3.equals(spacegroup.cell.anglesInRadians, tmpAngles90) &&\r\n            Vec3.equals(spacegroup.cell.size, tmpLengths1));\r\n    }\r\n    Model.hasCrystalSymmetry = hasCrystalSymmetry;\r\n    function isFromXray(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        for (var i = 0; i < db.exptl.method.rowCount; i++) {\r\n            var v = db.exptl.method.value(i).toUpperCase();\r\n            if (v.indexOf('DIFFRACTION') >= 0)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Model.isFromXray = isFromXray;\r\n    function isFromEm(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        for (var i = 0; i < db.exptl.method.rowCount; i++) {\r\n            var v = db.exptl.method.value(i).toUpperCase();\r\n            if (v.indexOf('MICROSCOPY') >= 0)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Model.isFromEm = isFromEm;\r\n    function isFromNmr(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        for (var i = 0; i < db.exptl.method.rowCount; i++) {\r\n            var v = db.exptl.method.value(i).toUpperCase();\r\n            if (v.indexOf('NMR') >= 0)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    Model.isFromNmr = isFromNmr;\r\n    function hasXrayMap(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        // Check exprimental method to exclude models solved with\r\n        // 'ELECTRON CRYSTALLOGRAPHY' which also have structure factors\r\n        if (!isFromXray(model))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        var status_code_sf = db.pdbx_database_status.status_code_sf;\r\n        return status_code_sf.isDefined && status_code_sf.value(0) === 'REL';\r\n    }\r\n    Model.hasXrayMap = hasXrayMap;\r\n    /**\r\n     * Also checks for `content_type` of 'associated EM volume' to exclude cases\r\n     * like 6TEK which are solved with 'X-RAY DIFFRACTION' but have an related\r\n     * EMDB entry of type 'other EM volume'.\r\n     */\r\n    function hasEmMap(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        var _a = db.pdbx_database_related, db_name = _a.db_name, content_type = _a.content_type;\r\n        for (var i = 0, il = db.pdbx_database_related._rowCount; i < il; ++i) {\r\n            if (db_name.value(i).toUpperCase() === 'EMDB' && content_type.value(i) === 'associated EM volume') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    Model.hasEmMap = hasEmMap;\r\n    function hasDensityMap(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        return hasXrayMap(model) || hasEmMap(model);\r\n    }\r\n    Model.hasDensityMap = hasDensityMap;\r\n    function probablyHasDensityMap(model) {\r\n        if (!MmcifFormat.is(model.sourceData))\r\n            return false;\r\n        var db = model.sourceData.data.db;\r\n        return hasDensityMap(model) || (\r\n        // check if from pdb archive but missing relevant meta data\r\n        isFromPdbArchive(model) && (!db.exptl.method.isDefined ||\r\n            (isFromXray(model) && (!db.pdbx_database_status.status_code_sf.isDefined ||\r\n                db.pdbx_database_status.status_code_sf.valueKind(0) === 2 /* Unknown */)) ||\r\n            (isFromEm(model) && (!db.pdbx_database_related.db_name.isDefined))));\r\n    }\r\n    Model.probablyHasDensityMap = probablyHasDensityMap;\r\n})(Model || (Model = {}));\r\n//# sourceMappingURL=model.js.map"]},"metadata":{},"sourceType":"module"}