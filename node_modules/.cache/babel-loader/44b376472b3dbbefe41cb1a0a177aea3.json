{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { computeStructureGaussianDensityTexture, computeUnitGaussianDensityTexture, GaussianDensityParams } from './util/gaussian';\nimport { DirectVolume } from '../../../mol-geo/geometry/direct-volume/direct-volume';\nimport { ComplexDirectVolumeParams, ComplexDirectVolumeVisual } from '../complex-visual';\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\nimport { eachElement, eachSerialElement, ElementIterator, getElementLoci, getSerialElementLoci } from './util/element';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { UnitsDirectVolumeParams, UnitsDirectVolumeVisual } from '../units-visual';\nimport { getStructureExtraRadius, getUnitExtraRadius } from './util/common';\n\nfunction createGaussianDensityVolume(ctx, structure, theme, props, directVolume) {\n  return __awaiter(this, void 0, void 0, function () {\n    var runtime, webgl, oldTexture, densityTextureData, transform, texture, bbox, gridDim, stats, unitToCartn, cellDim, vol, sphere;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          runtime = ctx.runtime, webgl = ctx.webgl;\n\n          if (!webgl || !webgl.extensions.blendMinMax) {\n            throw new Error('GaussianDensityVolume requires `webgl` and `blendMinMax` extension');\n          }\n\n          oldTexture = directVolume ? directVolume.gridTexture.ref.value : undefined;\n          return [4\n          /*yield*/\n          , computeStructureGaussianDensityTexture(structure, props, webgl, oldTexture).runInContext(runtime)];\n\n        case 1:\n          densityTextureData = _a.sent();\n          transform = densityTextureData.transform, texture = densityTextureData.texture, bbox = densityTextureData.bbox, gridDim = densityTextureData.gridDim;\n          stats = {\n            min: 0,\n            max: 1,\n            mean: 0.04,\n            sigma: 0.01\n          };\n          unitToCartn = Mat4.mul(Mat4(), transform, Mat4.fromScaling(Mat4(), gridDim));\n          cellDim = Mat4.getScaling(Vec3(), transform);\n          vol = DirectVolume.create(bbox, gridDim, transform, unitToCartn, cellDim, texture, stats, true, directVolume);\n          sphere = Sphere3D.expand(Sphere3D(), structure.boundary.sphere, props.radiusOffset + getStructureExtraRadius(structure));\n          vol.setBoundingSphere(sphere);\n          return [2\n          /*return*/\n          , vol];\n      }\n    });\n  });\n}\n\nexport var GaussianDensityVolumeParams = __assign(__assign(__assign({}, ComplexDirectVolumeParams), GaussianDensityParams), {\n  ignoreHydrogens: PD.Boolean(false),\n  includeParent: PD.Boolean(false, {\n    isHidden: true\n  })\n});\nexport function GaussianDensityVolumeVisual(materialId) {\n  return ComplexDirectVolumeVisual({\n    defaultProps: PD.getDefaultValues(GaussianDensityVolumeParams),\n    createGeometry: createGaussianDensityVolume,\n    createLocationIterator: ElementIterator.fromStructure,\n    getLoci: getSerialElementLoci,\n    eachLocation: eachSerialElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      if (newProps.resolution !== currentProps.resolution) state.createGeometry = true;\n      if (newProps.radiusOffset !== currentProps.radiusOffset) state.createGeometry = true;\n      if (newProps.smoothness !== currentProps.smoothness) state.createGeometry = true;\n      if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens) state.createGeometry = true;\n      if (newProps.traceOnly !== currentProps.traceOnly) state.createGeometry = true;\n      if (newProps.includeParent !== currentProps.includeParent) state.createGeometry = true;\n    },\n    dispose: function (geometry) {\n      geometry.gridTexture.ref.value.destroy();\n    }\n  }, materialId);\n} //\n\nfunction createUnitsGaussianDensityVolume(ctx, unit, structure, theme, props, directVolume) {\n  return __awaiter(this, void 0, void 0, function () {\n    var runtime, webgl, oldTexture, densityTextureData, transform, texture, bbox, gridDim, stats, unitToCartn, cellDim, vol, sphere;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          runtime = ctx.runtime, webgl = ctx.webgl;\n\n          if (!webgl) {\n            // gpu gaussian density also needs blendMinMax but there is no fallback here so\n            // we allow it here with the results that there is no group id assignment and\n            // hence no group-based coloring or picking\n            throw new Error('GaussianDensityVolume requires `webgl`');\n          }\n\n          oldTexture = directVolume ? directVolume.gridTexture.ref.value : undefined;\n          return [4\n          /*yield*/\n          , computeUnitGaussianDensityTexture(structure, unit, props, webgl, oldTexture).runInContext(runtime)];\n\n        case 1:\n          densityTextureData = _a.sent();\n          transform = densityTextureData.transform, texture = densityTextureData.texture, bbox = densityTextureData.bbox, gridDim = densityTextureData.gridDim;\n          stats = {\n            min: 0,\n            max: 1,\n            mean: 0.04,\n            sigma: 0.01\n          };\n          unitToCartn = Mat4.mul(Mat4(), transform, Mat4.fromScaling(Mat4(), gridDim));\n          cellDim = Mat4.getScaling(Vec3(), transform);\n          vol = DirectVolume.create(bbox, gridDim, transform, unitToCartn, cellDim, texture, stats, true, directVolume);\n          sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.radiusOffset + getUnitExtraRadius(unit));\n          vol.setBoundingSphere(sphere);\n          return [2\n          /*return*/\n          , vol];\n      }\n    });\n  });\n}\n\nexport var UnitsGaussianDensityVolumeParams = __assign(__assign(__assign({}, UnitsDirectVolumeParams), GaussianDensityParams), {\n  ignoreHydrogens: PD.Boolean(false),\n  includeParent: PD.Boolean(false, {\n    isHidden: true\n  })\n});\nexport function UnitsGaussianDensityVolumeVisual(materialId) {\n  return UnitsDirectVolumeVisual({\n    defaultProps: PD.getDefaultValues(UnitsGaussianDensityVolumeParams),\n    createGeometry: createUnitsGaussianDensityVolume,\n    createLocationIterator: ElementIterator.fromGroup,\n    getLoci: getElementLoci,\n    eachLocation: eachElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      if (newProps.resolution !== currentProps.resolution) state.createGeometry = true;\n      if (newProps.radiusOffset !== currentProps.radiusOffset) state.createGeometry = true;\n      if (newProps.smoothness !== currentProps.smoothness) state.createGeometry = true;\n      if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens) state.createGeometry = true;\n      if (newProps.traceOnly !== currentProps.traceOnly) state.createGeometry = true;\n      if (newProps.includeParent !== currentProps.includeParent) state.createGeometry = true;\n    },\n    dispose: function (geometry) {\n      geometry.gridTexture.ref.value.destroy();\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/gaussian-density-volume.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { computeStructureGaussianDensityTexture, computeUnitGaussianDensityTexture, GaussianDensityParams } from './util/gaussian';\r\nimport { DirectVolume } from '../../../mol-geo/geometry/direct-volume/direct-volume';\r\nimport { ComplexDirectVolumeParams, ComplexDirectVolumeVisual } from '../complex-visual';\r\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { eachElement, eachSerialElement, ElementIterator, getElementLoci, getSerialElementLoci } from './util/element';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { UnitsDirectVolumeParams, UnitsDirectVolumeVisual } from '../units-visual';\r\nimport { getStructureExtraRadius, getUnitExtraRadius } from './util/common';\r\nfunction createGaussianDensityVolume(ctx, structure, theme, props, directVolume) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var runtime, webgl, oldTexture, densityTextureData, transform, texture, bbox, gridDim, stats, unitToCartn, cellDim, vol, sphere;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    runtime = ctx.runtime, webgl = ctx.webgl;\r\n                    if (!webgl || !webgl.extensions.blendMinMax) {\r\n                        throw new Error('GaussianDensityVolume requires `webgl` and `blendMinMax` extension');\r\n                    }\r\n                    oldTexture = directVolume ? directVolume.gridTexture.ref.value : undefined;\r\n                    return [4 /*yield*/, computeStructureGaussianDensityTexture(structure, props, webgl, oldTexture).runInContext(runtime)];\r\n                case 1:\r\n                    densityTextureData = _a.sent();\r\n                    transform = densityTextureData.transform, texture = densityTextureData.texture, bbox = densityTextureData.bbox, gridDim = densityTextureData.gridDim;\r\n                    stats = { min: 0, max: 1, mean: 0.04, sigma: 0.01 };\r\n                    unitToCartn = Mat4.mul(Mat4(), transform, Mat4.fromScaling(Mat4(), gridDim));\r\n                    cellDim = Mat4.getScaling(Vec3(), transform);\r\n                    vol = DirectVolume.create(bbox, gridDim, transform, unitToCartn, cellDim, texture, stats, true, directVolume);\r\n                    sphere = Sphere3D.expand(Sphere3D(), structure.boundary.sphere, props.radiusOffset + getStructureExtraRadius(structure));\r\n                    vol.setBoundingSphere(sphere);\r\n                    return [2 /*return*/, vol];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport var GaussianDensityVolumeParams = __assign(__assign(__assign({}, ComplexDirectVolumeParams), GaussianDensityParams), { ignoreHydrogens: PD.Boolean(false), includeParent: PD.Boolean(false, { isHidden: true }) });\r\nexport function GaussianDensityVolumeVisual(materialId) {\r\n    return ComplexDirectVolumeVisual({\r\n        defaultProps: PD.getDefaultValues(GaussianDensityVolumeParams),\r\n        createGeometry: createGaussianDensityVolume,\r\n        createLocationIterator: ElementIterator.fromStructure,\r\n        getLoci: getSerialElementLoci,\r\n        eachLocation: eachSerialElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            if (newProps.resolution !== currentProps.resolution)\r\n                state.createGeometry = true;\r\n            if (newProps.radiusOffset !== currentProps.radiusOffset)\r\n                state.createGeometry = true;\r\n            if (newProps.smoothness !== currentProps.smoothness)\r\n                state.createGeometry = true;\r\n            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)\r\n                state.createGeometry = true;\r\n            if (newProps.traceOnly !== currentProps.traceOnly)\r\n                state.createGeometry = true;\r\n            if (newProps.includeParent !== currentProps.includeParent)\r\n                state.createGeometry = true;\r\n        },\r\n        dispose: function (geometry) {\r\n            geometry.gridTexture.ref.value.destroy();\r\n        }\r\n    }, materialId);\r\n}\r\n//\r\nfunction createUnitsGaussianDensityVolume(ctx, unit, structure, theme, props, directVolume) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var runtime, webgl, oldTexture, densityTextureData, transform, texture, bbox, gridDim, stats, unitToCartn, cellDim, vol, sphere;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    runtime = ctx.runtime, webgl = ctx.webgl;\r\n                    if (!webgl) {\r\n                        // gpu gaussian density also needs blendMinMax but there is no fallback here so\r\n                        // we allow it here with the results that there is no group id assignment and\r\n                        // hence no group-based coloring or picking\r\n                        throw new Error('GaussianDensityVolume requires `webgl`');\r\n                    }\r\n                    oldTexture = directVolume ? directVolume.gridTexture.ref.value : undefined;\r\n                    return [4 /*yield*/, computeUnitGaussianDensityTexture(structure, unit, props, webgl, oldTexture).runInContext(runtime)];\r\n                case 1:\r\n                    densityTextureData = _a.sent();\r\n                    transform = densityTextureData.transform, texture = densityTextureData.texture, bbox = densityTextureData.bbox, gridDim = densityTextureData.gridDim;\r\n                    stats = { min: 0, max: 1, mean: 0.04, sigma: 0.01 };\r\n                    unitToCartn = Mat4.mul(Mat4(), transform, Mat4.fromScaling(Mat4(), gridDim));\r\n                    cellDim = Mat4.getScaling(Vec3(), transform);\r\n                    vol = DirectVolume.create(bbox, gridDim, transform, unitToCartn, cellDim, texture, stats, true, directVolume);\r\n                    sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, props.radiusOffset + getUnitExtraRadius(unit));\r\n                    vol.setBoundingSphere(sphere);\r\n                    return [2 /*return*/, vol];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport var UnitsGaussianDensityVolumeParams = __assign(__assign(__assign({}, UnitsDirectVolumeParams), GaussianDensityParams), { ignoreHydrogens: PD.Boolean(false), includeParent: PD.Boolean(false, { isHidden: true }) });\r\nexport function UnitsGaussianDensityVolumeVisual(materialId) {\r\n    return UnitsDirectVolumeVisual({\r\n        defaultProps: PD.getDefaultValues(UnitsGaussianDensityVolumeParams),\r\n        createGeometry: createUnitsGaussianDensityVolume,\r\n        createLocationIterator: ElementIterator.fromGroup,\r\n        getLoci: getElementLoci,\r\n        eachLocation: eachElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            if (newProps.resolution !== currentProps.resolution)\r\n                state.createGeometry = true;\r\n            if (newProps.radiusOffset !== currentProps.radiusOffset)\r\n                state.createGeometry = true;\r\n            if (newProps.smoothness !== currentProps.smoothness)\r\n                state.createGeometry = true;\r\n            if (newProps.ignoreHydrogens !== currentProps.ignoreHydrogens)\r\n                state.createGeometry = true;\r\n            if (newProps.traceOnly !== currentProps.traceOnly)\r\n                state.createGeometry = true;\r\n            if (newProps.includeParent !== currentProps.includeParent)\r\n                state.createGeometry = true;\r\n        },\r\n        dispose: function (geometry) {\r\n            geometry.gridTexture.ref.value.destroy();\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=gaussian-density-volume.js.map"]},"metadata":{},"sourceType":"module"}