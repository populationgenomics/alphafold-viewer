{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureElement } from '../../../mol-model/structure';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { eachPolymerElement, getPolymerElementLoci, PolymerLocationIterator } from './util/polymer';\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsSpheresVisual, UnitsSpheresParams } from '../units-visual';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\nimport { sphereVertexCount } from '../../../mol-geo/primitive/sphere';\nimport { Spheres } from '../../../mol-geo/geometry/spheres/spheres';\nimport { SpheresBuilder } from '../../../mol-geo/geometry/spheres/spheres-builder';\nimport { eachPolymerBackboneElement } from './util/polymer/backbone';\nexport var PolymerBackboneSphereParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsSpheresParams), {\n  sizeFactor: PD.Numeric(0.3, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  detail: PD.Numeric(0, {\n    min: 0,\n    max: 3,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo),\n  tryUseImpostor: PD.Boolean(true)\n});\nexport function PolymerBackboneSphereVisual(materialId, structure, props, webgl) {\n  return props.tryUseImpostor && webgl && webgl.extensions.fragDepth ? PolymerBackboneSphereImpostorVisual(materialId) : PolymerBackboneSphereMeshVisual(materialId);\n}\n\nfunction createPolymerBackboneSphereImpostor(ctx, unit, structure, theme, props, spheres) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Spheres.createEmpty(spheres);\n  var builder = SpheresBuilder.create(polymerElementCount, polymerElementCount / 2, spheres);\n  var pos = unit.conformation.invariantPosition;\n  var p = Vec3();\n\n  var add = function (index, group) {\n    pos(index, p);\n    builder.add(p[0], p[1], p[2], group);\n  };\n\n  eachPolymerBackboneElement(unit, add);\n  var s = builder.getSpheres();\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  s.setBoundingSphere(sphere);\n  return s;\n}\n\nexport function PolymerBackboneSphereImpostorVisual(materialId) {\n  return UnitsSpheresVisual({\n    defaultProps: PD.getDefaultValues(PolymerBackboneSphereParams),\n    createGeometry: createPolymerBackboneSphereImpostor,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {},\n    mustRecreate: function (structureGroup, props, webgl) {\n      return !props.tryUseImpostor || !webgl;\n    }\n  }, materialId);\n}\n\nfunction createPolymerBackboneSphereMesh(ctx, unit, structure, theme, props, mesh) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Mesh.createEmpty(mesh);\n  var detail = props.detail,\n      sizeFactor = props.sizeFactor;\n  var vertexCount = polymerElementCount * sphereVertexCount(detail);\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 2, mesh);\n  var pos = unit.conformation.invariantPosition;\n  var p = Vec3();\n  var center = StructureElement.Location.create(structure, unit);\n\n  var add = function (index, group) {\n    center.element = index;\n    pos(center.element, p);\n    builderState.currentGroup = group;\n    addSphere(builderState, p, theme.size.size(center) * sizeFactor, detail);\n  };\n\n  eachPolymerBackboneElement(unit, add);\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport function PolymerBackboneSphereMeshVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(PolymerBackboneSphereParams),\n    createGeometry: createPolymerBackboneSphereMesh,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.detail !== currentProps.detail;\n    },\n    mustRecreate: function (structureGroup, props, webgl) {\n      return props.tryUseImpostor && !!webgl;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/polymer-backbone-sphere.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureElement } from '../../../mol-model/structure';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { eachPolymerElement, getPolymerElementLoci, PolymerLocationIterator } from './util/polymer';\r\nimport { UnitsMeshParams, UnitsMeshVisual, UnitsSpheresVisual, UnitsSpheresParams } from '../units-visual';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\r\nimport { sphereVertexCount } from '../../../mol-geo/primitive/sphere';\r\nimport { Spheres } from '../../../mol-geo/geometry/spheres/spheres';\r\nimport { SpheresBuilder } from '../../../mol-geo/geometry/spheres/spheres-builder';\r\nimport { eachPolymerBackboneElement } from './util/polymer/backbone';\r\nexport var PolymerBackboneSphereParams = __assign(__assign(__assign({}, UnitsMeshParams), UnitsSpheresParams), { sizeFactor: PD.Numeric(0.3, { min: 0, max: 10, step: 0.01 }), detail: PD.Numeric(0, { min: 0, max: 3, step: 1 }, BaseGeometry.CustomQualityParamInfo), tryUseImpostor: PD.Boolean(true) });\r\nexport function PolymerBackboneSphereVisual(materialId, structure, props, webgl) {\r\n    return props.tryUseImpostor && webgl && webgl.extensions.fragDepth\r\n        ? PolymerBackboneSphereImpostorVisual(materialId)\r\n        : PolymerBackboneSphereMeshVisual(materialId);\r\n}\r\nfunction createPolymerBackboneSphereImpostor(ctx, unit, structure, theme, props, spheres) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Spheres.createEmpty(spheres);\r\n    var builder = SpheresBuilder.create(polymerElementCount, polymerElementCount / 2, spheres);\r\n    var pos = unit.conformation.invariantPosition;\r\n    var p = Vec3();\r\n    var add = function (index, group) {\r\n        pos(index, p);\r\n        builder.add(p[0], p[1], p[2], group);\r\n    };\r\n    eachPolymerBackboneElement(unit, add);\r\n    var s = builder.getSpheres();\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    s.setBoundingSphere(sphere);\r\n    return s;\r\n}\r\nexport function PolymerBackboneSphereImpostorVisual(materialId) {\r\n    return UnitsSpheresVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerBackboneSphereParams),\r\n        createGeometry: createPolymerBackboneSphereImpostor,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) { },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return !props.tryUseImpostor || !webgl;\r\n        }\r\n    }, materialId);\r\n}\r\nfunction createPolymerBackboneSphereMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var detail = props.detail, sizeFactor = props.sizeFactor;\r\n    var vertexCount = polymerElementCount * sphereVertexCount(detail);\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 2, mesh);\r\n    var pos = unit.conformation.invariantPosition;\r\n    var p = Vec3();\r\n    var center = StructureElement.Location.create(structure, unit);\r\n    var add = function (index, group) {\r\n        center.element = index;\r\n        pos(center.element, p);\r\n        builderState.currentGroup = group;\r\n        addSphere(builderState, p, theme.size.size(center) * sizeFactor, detail);\r\n    };\r\n    eachPolymerBackboneElement(unit, add);\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport function PolymerBackboneSphereMeshVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerBackboneSphereParams),\r\n        createGeometry: createPolymerBackboneSphereMesh,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.detail !== currentProps.detail);\r\n        },\r\n        mustRecreate: function (structureGroup, props, webgl) {\r\n            return props.tryUseImpostor && !!webgl;\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=polymer-backbone-sphere.js.map"]},"metadata":{},"sourceType":"module"}