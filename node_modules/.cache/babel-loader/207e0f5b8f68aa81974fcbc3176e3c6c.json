{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3, Mat4 } from '../../../../mol-math/linear-algebra';\nimport { MeshBuilder } from '../mesh-builder';\nimport { getSphere } from './sphere';\nvar tmpEllipsoidMat = Mat4.identity();\nvar tmpVec = Vec3();\n\nfunction setEllipsoidMat(m, center, dirMajor, dirMinor, radiusScale) {\n  Vec3.add(tmpVec, center, dirMajor);\n  Mat4.targetTo(m, center, tmpVec, dirMinor);\n  Mat4.setTranslation(m, center);\n  return Mat4.scale(m, m, radiusScale);\n}\n\nexport function addEllipsoid(state, center, dirMajor, dirMinor, radiusScale, detail) {\n  MeshBuilder.addPrimitive(state, setEllipsoidMat(tmpEllipsoidMat, center, dirMajor, dirMinor, radiusScale), getSphere(detail));\n}","map":{"version":3,"sources":["../../../../../src/mol-geo/geometry/mesh/builder/ellipsoid.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,IAAT,EAAe,IAAf,QAA2B,qCAA3B;AACA,SAAS,WAAT,QAA4B,iBAA5B;AACA,SAAS,SAAT,QAA0B,UAA1B;AAEA,IAAM,eAAe,GAAG,IAAI,CAAC,QAAL,EAAxB;AACA,IAAM,MAAM,GAAG,IAAI,EAAnB;;AAEA,SAAS,eAAT,CAAyB,CAAzB,EAAkC,MAAlC,EAAgD,QAAhD,EAAgE,QAAhE,EAAgF,WAAhF,EAAiG;AAC7F,EAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,MAAjB,EAAyB,QAAzB;AACA,EAAA,IAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,QAAjC;AACA,EAAA,IAAI,CAAC,cAAL,CAAoB,CAApB,EAAuB,MAAvB;AACA,SAAO,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiB,WAAjB,CAAP;AACH;;AAED,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAiD,MAAjD,EAA+D,QAA/D,EAA+E,QAA/E,EAA+F,WAA/F,EAAkH,MAAlH,EAAgI;AAClI,EAAA,WAAW,CAAC,YAAZ,CAAyB,KAAzB,EAAgC,eAAe,CAAC,eAAD,EAAkB,MAAlB,EAA0B,QAA1B,EAAoC,QAApC,EAA8C,WAA9C,CAA/C,EAA2G,SAAS,CAAC,MAAD,CAApH;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3, Mat4 } from '../../../../mol-math/linear-algebra';\r\nimport { MeshBuilder } from '../mesh-builder';\r\nimport { getSphere } from './sphere';\r\nvar tmpEllipsoidMat = Mat4.identity();\r\nvar tmpVec = Vec3();\r\nfunction setEllipsoidMat(m, center, dirMajor, dirMinor, radiusScale) {\r\n    Vec3.add(tmpVec, center, dirMajor);\r\n    Mat4.targetTo(m, center, tmpVec, dirMinor);\r\n    Mat4.setTranslation(m, center);\r\n    return Mat4.scale(m, m, radiusScale);\r\n}\r\nexport function addEllipsoid(state, center, dirMajor, dirMinor, radiusScale, detail) {\r\n    MeshBuilder.addPrimitive(state, setEllipsoidMat(tmpEllipsoidMat, center, dirMajor, dirMinor, radiusScale), getSphere(detail));\r\n}\r\n//# sourceMappingURL=ellipsoid.js.map"]},"metadata":{},"sourceType":"module"}