{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Segmentation } from '../../../../mol-data/int';\nimport { StructureElement } from '../../../../mol-model/structure/structure/element';\nimport { StructureProperties as P } from '../../structure';\nimport { Structure } from '../../structure/structure';\nimport { StructureSelection } from '../selection';\nimport { BondType } from '../../model/types';\nimport { Bundle } from '../../structure/element/bundle';\nexport function defaultBondTest(ctx) {\n  return BondType.isCovalent(ctx.atomicBond.type);\n}\nexport function atomicSequence() {\n  return function query_atomicSequence(ctx) {\n    var inputStructure = ctx.inputStructure;\n    var l = StructureElement.Location.create(inputStructure);\n    var units = [];\n\n    for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\n      var unit = _a[_i];\n      if (unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      l.element = elements[0];\n      if (P.entity.type(l) !== 'polymer') continue;\n      var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\n      var residueCount = 0;\n\n      while (residuesIt.hasNext) {\n        residueCount++;\n        residuesIt.move();\n      }\n\n      if (residueCount < 8) continue;\n      units.push(unit);\n    }\n\n    return StructureSelection.Singletons(inputStructure, Structure.create(units, {\n      parent: inputStructure\n    }));\n  };\n}\nexport function water() {\n  return function query_water(ctx) {\n    var inputStructure = ctx.inputStructure;\n    var l = StructureElement.Location.create(inputStructure);\n    var units = [];\n\n    for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\n      var unit = _a[_i];\n      if (unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      l.element = elements[0];\n      if (P.entity.type(l) !== 'water') continue;\n      units.push(unit);\n    }\n\n    return StructureSelection.Singletons(inputStructure, Structure.create(units, {\n      parent: inputStructure\n    }));\n  };\n}\nexport function atomicHet() {\n  return function query_atomicHet(ctx) {\n    var inputStructure = ctx.inputStructure;\n    var l = StructureElement.Location.create(inputStructure);\n    var units = [];\n\n    for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\n      var unit = _a[_i];\n      if (unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      l.element = elements[0];\n      if (P.entity.type(l) === 'water') continue;\n\n      if (P.entity.type(l) === 'polymer') {\n        var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\n        var residueCount = 0;\n\n        while (residuesIt.hasNext) {\n          residueCount++;\n          residuesIt.move();\n        }\n\n        if (residueCount >= 8) continue;\n      }\n\n      units.push(unit);\n    }\n\n    return StructureSelection.Singletons(inputStructure, Structure.create(units, {\n      parent: inputStructure\n    }));\n  };\n}\nexport function spheres() {\n  return function query_spheres(ctx) {\n    var inputStructure = ctx.inputStructure;\n    var units = [];\n\n    for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\n      var unit = _a[_i];\n      if (unit.kind !== 1\n      /* Spheres */\n      ) continue;\n      units.push(unit);\n    }\n\n    return StructureSelection.Singletons(inputStructure, Structure.create(units, {\n      parent: inputStructure\n    }));\n  };\n}\nexport function bundleElementImpl(groupedUnits, ranges, set) {\n  return {\n    groupedUnits: groupedUnits,\n    ranges: ranges,\n    set: set\n  };\n}\nexport function bundleGenerator(elements) {\n  return function query_bundleGenerator(ctx) {\n    var bundle = {\n      hash: ctx.inputStructure.hashCode,\n      elements: elements\n    };\n    return StructureSelection.Sequence(ctx.inputStructure, [Bundle.toStructure(bundle, ctx.inputStructure)]);\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/query/queries/internal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Segmentation } from '../../../../mol-data/int';\r\nimport { StructureElement } from '../../../../mol-model/structure/structure/element';\r\nimport { StructureProperties as P } from '../../structure';\r\nimport { Structure } from '../../structure/structure';\r\nimport { StructureSelection } from '../selection';\r\nimport { BondType } from '../../model/types';\r\nimport { Bundle } from '../../structure/element/bundle';\r\nexport function defaultBondTest(ctx) {\r\n    return BondType.isCovalent(ctx.atomicBond.type);\r\n}\r\nexport function atomicSequence() {\r\n    return function query_atomicSequence(ctx) {\r\n        var inputStructure = ctx.inputStructure;\r\n        var l = StructureElement.Location.create(inputStructure);\r\n        var units = [];\r\n        for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\r\n            var unit = _a[_i];\r\n            if (unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            l.element = elements[0];\r\n            if (P.entity.type(l) !== 'polymer')\r\n                continue;\r\n            var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\r\n            var residueCount = 0;\r\n            while (residuesIt.hasNext) {\r\n                residueCount++;\r\n                residuesIt.move();\r\n            }\r\n            if (residueCount < 8)\r\n                continue;\r\n            units.push(unit);\r\n        }\r\n        return StructureSelection.Singletons(inputStructure, Structure.create(units, { parent: inputStructure }));\r\n    };\r\n}\r\nexport function water() {\r\n    return function query_water(ctx) {\r\n        var inputStructure = ctx.inputStructure;\r\n        var l = StructureElement.Location.create(inputStructure);\r\n        var units = [];\r\n        for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\r\n            var unit = _a[_i];\r\n            if (unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            l.element = elements[0];\r\n            if (P.entity.type(l) !== 'water')\r\n                continue;\r\n            units.push(unit);\r\n        }\r\n        return StructureSelection.Singletons(inputStructure, Structure.create(units, { parent: inputStructure }));\r\n    };\r\n}\r\nexport function atomicHet() {\r\n    return function query_atomicHet(ctx) {\r\n        var inputStructure = ctx.inputStructure;\r\n        var l = StructureElement.Location.create(inputStructure);\r\n        var units = [];\r\n        for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\r\n            var unit = _a[_i];\r\n            if (unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            l.element = elements[0];\r\n            if (P.entity.type(l) === 'water')\r\n                continue;\r\n            if (P.entity.type(l) === 'polymer') {\r\n                var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\r\n                var residueCount = 0;\r\n                while (residuesIt.hasNext) {\r\n                    residueCount++;\r\n                    residuesIt.move();\r\n                }\r\n                if (residueCount >= 8)\r\n                    continue;\r\n            }\r\n            units.push(unit);\r\n        }\r\n        return StructureSelection.Singletons(inputStructure, Structure.create(units, { parent: inputStructure }));\r\n    };\r\n}\r\nexport function spheres() {\r\n    return function query_spheres(ctx) {\r\n        var inputStructure = ctx.inputStructure;\r\n        var units = [];\r\n        for (var _i = 0, _a = inputStructure.units; _i < _a.length; _i++) {\r\n            var unit = _a[_i];\r\n            if (unit.kind !== 1 /* Spheres */)\r\n                continue;\r\n            units.push(unit);\r\n        }\r\n        return StructureSelection.Singletons(inputStructure, Structure.create(units, { parent: inputStructure }));\r\n    };\r\n}\r\nexport function bundleElementImpl(groupedUnits, ranges, set) {\r\n    return {\r\n        groupedUnits: groupedUnits,\r\n        ranges: ranges,\r\n        set: set\r\n    };\r\n}\r\nexport function bundleGenerator(elements) {\r\n    return function query_bundleGenerator(ctx) {\r\n        var bundle = {\r\n            hash: ctx.inputStructure.hashCode,\r\n            elements: elements\r\n        };\r\n        return StructureSelection.Sequence(ctx.inputStructure, [Bundle.toStructure(bundle, ctx.inputStructure)]);\r\n    };\r\n}\r\n//# sourceMappingURL=internal.js.map"]},"metadata":{},"sourceType":"module"}