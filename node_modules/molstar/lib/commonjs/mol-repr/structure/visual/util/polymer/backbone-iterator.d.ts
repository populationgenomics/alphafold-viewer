/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Unit, Structure, StructureElement } from '../../../../../mol-model/structure';
import { Iterator } from '../../../../../mol-data/iterator';
/** Iterates over consecutive pairs of residues/coarse elements in polymers */
export declare function PolymerBackboneIterator(structure: Structure, unit: Unit): Iterator<PolymerBackbonePair>;
interface PolymerBackbonePair {
    centerA: StructureElement.Location;
    centerB: StructureElement.Location;
}
export declare class AtomicPolymerBackboneIterator implements Iterator<PolymerBackbonePair> {
    private unit;
    private traceElementIndex;
    private value;
    private polymerIt;
    private residueIt;
    private state;
    private residueSegment;
    hasNext: boolean;
    move(): PolymerBackbonePair;
    constructor(structure: Structure, unit: Unit.Atomic);
}
export declare class CoarsePolymerBackboneIterator implements Iterator<PolymerBackbonePair> {
    private unit;
    private value;
    private polymerIt;
    private polymerSegment;
    private state;
    private elementIndex;
    hasNext: boolean;
    move(): PolymerBackbonePair;
    constructor(structure: Structure, unit: Unit.Spheres | Unit.Gaussians);
}
export {};
