{"ast":null,"code":"/*\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { utf8ByteCount, utf8Write } from '../utf8';\nexport function encodeMsgPack(value) {\n  var buffer = new ArrayBuffer(encodedSize(value));\n  var view = new DataView(buffer);\n  var bytes = new Uint8Array(buffer);\n  encodeInternal(value, view, bytes, 0);\n  return bytes;\n}\n\nfunction encodedSize(value) {\n  var type = typeof value; // Raw Bytes\n\n  if (type === 'string') {\n    var length_1 = utf8ByteCount(value);\n\n    if (length_1 < 0x20) {\n      return 1 + length_1;\n    }\n\n    if (length_1 < 0x100) {\n      return 2 + length_1;\n    }\n\n    if (length_1 < 0x10000) {\n      return 3 + length_1;\n    }\n\n    if (length_1 < 0x100000000) {\n      return 5 + length_1;\n    }\n  }\n\n  if (value instanceof Uint8Array) {\n    var length_2 = value.byteLength;\n\n    if (length_2 < 0x100) {\n      return 2 + length_2;\n    }\n\n    if (length_2 < 0x10000) {\n      return 3 + length_2;\n    }\n\n    if (length_2 < 0x100000000) {\n      return 5 + length_2;\n    }\n  }\n\n  if (type === 'number') {\n    // Floating Point\n    // double\n    if (Math.floor(value) !== value) return 9; // Integers\n\n    if (value >= 0) {\n      // positive fixnum\n      if (value < 0x80) return 1; // uint 8\n\n      if (value < 0x100) return 2; // uint 16\n\n      if (value < 0x10000) return 3; // uint 32\n\n      if (value < 0x100000000) return 5;\n      throw new Error('Number too big 0x' + value.toString(16));\n    } // negative fixnum\n\n\n    if (value >= -0x20) return 1; // int 8\n\n    if (value >= -0x80) return 2; // int 16\n\n    if (value >= -0x8000) return 3; // int 32\n\n    if (value >= -0x80000000) return 5;\n    throw new Error('Number too small -0x' + value.toString(16).substr(1));\n  } // Boolean, null\n\n\n  if (type === 'boolean' || value === null || value === void 0) return 1; // Container Types\n\n  if (type === 'object') {\n    var length_3,\n        size = 0;\n\n    if (Array.isArray(value)) {\n      length_3 = value.length;\n\n      for (var i = 0; i < length_3; i++) {\n        size += encodedSize(value[i]);\n      }\n    } else {\n      var keys = Object.keys(value);\n      length_3 = keys.length;\n\n      for (var i = 0; i < length_3; i++) {\n        var key = keys[i];\n        size += encodedSize(key) + encodedSize(value[key]);\n      }\n    }\n\n    if (length_3 < 0x10) {\n      return 1 + size;\n    }\n\n    if (length_3 < 0x10000) {\n      return 3 + size;\n    }\n\n    if (length_3 < 0x100000000) {\n      return 5 + size;\n    }\n\n    throw new Error('Array or object too long 0x' + length_3.toString(16));\n  }\n\n  throw new Error('Unknown type ' + type);\n}\n\nfunction encodeInternal(value, view, bytes, offset) {\n  var type = typeof value; // Strings Bytes\n\n  if (type === 'string') {\n    var length_4 = utf8ByteCount(value); // fix str\n\n    if (length_4 < 0x20) {\n      view.setUint8(offset, length_4 | 0xa0);\n      utf8Write(bytes, offset + 1, value);\n      return 1 + length_4;\n    } // str 8\n\n\n    if (length_4 < 0x100) {\n      view.setUint8(offset, 0xd9);\n      view.setUint8(offset + 1, length_4);\n      utf8Write(bytes, offset + 2, value);\n      return 2 + length_4;\n    } // str 16\n\n\n    if (length_4 < 0x10000) {\n      view.setUint8(offset, 0xda);\n      view.setUint16(offset + 1, length_4);\n      utf8Write(bytes, offset + 3, value);\n      return 3 + length_4;\n    } // str 32\n\n\n    if (length_4 < 0x100000000) {\n      view.setUint8(offset, 0xdb);\n      view.setUint32(offset + 1, length_4);\n      utf8Write(bytes, offset + 5, value);\n      return 5 + length_4;\n    }\n  }\n\n  if (value instanceof Uint8Array) {\n    var length_5 = value.byteLength;\n    var bytes_1 = new Uint8Array(view.buffer); // bin 8\n\n    if (length_5 < 0x100) {\n      view.setUint8(offset, 0xc4);\n      view.setUint8(offset + 1, length_5);\n      bytes_1.set(value, offset + 2);\n      return 2 + length_5;\n    } // bin 16\n\n\n    if (length_5 < 0x10000) {\n      view.setUint8(offset, 0xc5);\n      view.setUint16(offset + 1, length_5);\n      bytes_1.set(value, offset + 3);\n      return 3 + length_5;\n    } // bin 32\n\n\n    if (length_5 < 0x100000000) {\n      view.setUint8(offset, 0xc6);\n      view.setUint32(offset + 1, length_5);\n      bytes_1.set(value, offset + 5);\n      return 5 + length_5;\n    }\n  }\n\n  if (type === 'number') {\n    if (!isFinite(value)) {\n      throw new Error('Number not finite: ' + value);\n    } // Floating point\n\n\n    if (Math.floor(value) !== value) {\n      view.setUint8(offset, 0xcb);\n      view.setFloat64(offset + 1, value);\n      return 9;\n    } // Integers\n\n\n    if (value >= 0) {\n      // positive fixnum\n      if (value < 0x80) {\n        view.setUint8(offset, value);\n        return 1;\n      } // uint 8\n\n\n      if (value < 0x100) {\n        view.setUint8(offset, 0xcc);\n        view.setUint8(offset + 1, value);\n        return 2;\n      } // uint 16\n\n\n      if (value < 0x10000) {\n        view.setUint8(offset, 0xcd);\n        view.setUint16(offset + 1, value);\n        return 3;\n      } // uint 32\n\n\n      if (value < 0x100000000) {\n        view.setUint8(offset, 0xce);\n        view.setUint32(offset + 1, value);\n        return 5;\n      }\n\n      throw new Error('Number too big 0x' + value.toString(16));\n    } // negative fixnum\n\n\n    if (value >= -0x20) {\n      view.setInt8(offset, value);\n      return 1;\n    } // int 8\n\n\n    if (value >= -0x80) {\n      view.setUint8(offset, 0xd0);\n      view.setInt8(offset + 1, value);\n      return 2;\n    } // int 16\n\n\n    if (value >= -0x8000) {\n      view.setUint8(offset, 0xd1);\n      view.setInt16(offset + 1, value);\n      return 3;\n    } // int 32\n\n\n    if (value >= -0x80000000) {\n      view.setUint8(offset, 0xd2);\n      view.setInt32(offset + 1, value);\n      return 5;\n    }\n\n    throw new Error('Number too small -0x' + (-value).toString(16).substr(1));\n  } // null\n\n\n  if (value === null || value === undefined) {\n    view.setUint8(offset, 0xc0);\n    return 1;\n  } // Boolean\n\n\n  if (type === 'boolean') {\n    view.setUint8(offset, value ? 0xc3 : 0xc2);\n    return 1;\n  } // Container Types\n\n\n  if (type === 'object') {\n    var length_6,\n        size = 0;\n    var isArray = Array.isArray(value);\n    var keys = void 0;\n\n    if (isArray) {\n      length_6 = value.length;\n    } else {\n      keys = Object.keys(value);\n      length_6 = keys.length;\n    }\n\n    if (length_6 < 0x10) {\n      view.setUint8(offset, length_6 | (isArray ? 0x90 : 0x80));\n      size = 1;\n    } else if (length_6 < 0x10000) {\n      view.setUint8(offset, isArray ? 0xdc : 0xde);\n      view.setUint16(offset + 1, length_6);\n      size = 3;\n    } else if (length_6 < 0x100000000) {\n      view.setUint8(offset, isArray ? 0xdd : 0xdf);\n      view.setUint32(offset + 1, length_6);\n      size = 5;\n    }\n\n    if (isArray) {\n      for (var i = 0; i < length_6; i++) {\n        size += encodeInternal(value[i], view, bytes, offset + size);\n      }\n    } else {\n      for (var i = 0, _i = keys.length; i < _i; i++) {\n        var key = keys[i];\n        size += encodeInternal(key, view, bytes, offset + size);\n        size += encodeInternal(value[key], view, bytes, offset + size);\n      }\n    }\n\n    return size;\n  }\n\n  throw new Error('Unknown type ' + type);\n}","map":{"version":3,"sources":["../../../../src/mol-io/common/msgpack/encode.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;AAEH,SAAS,aAAT,EAAwB,SAAxB,QAAyC,SAAzC;AAEA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAkC;AACpC,MAAM,MAAM,GAAG,IAAI,WAAJ,CAAgB,WAAW,CAAC,KAAD,CAA3B,CAAf;AACA,MAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,CAAb;AACA,MAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAd;AACA,EAAA,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,CAArB,CAAd;AACA,SAAO,KAAP;AACH;;AAED,SAAS,WAAT,CAAqB,KAArB,EAA+B;AAC3B,MAAM,IAAI,GAAG,OAAO,KAApB,CAD2B,CAG3B;;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAM,QAAM,GAAG,aAAa,CAAC,KAAD,CAA5B;;AACA,QAAI,QAAM,GAAG,IAAb,EAAmB;AACf,aAAO,IAAI,QAAX;AACH;;AACD,QAAI,QAAM,GAAG,KAAb,EAAoB;AAChB,aAAO,IAAI,QAAX;AACH;;AACD,QAAI,QAAM,GAAG,OAAb,EAAsB;AAClB,aAAO,IAAI,QAAX;AACH;;AACD,QAAI,QAAM,GAAG,WAAb,EAA0B;AACtB,aAAO,IAAI,QAAX;AACH;AACJ;;AAED,MAAI,KAAK,YAAY,UAArB,EAAiC;AAC7B,QAAM,QAAM,GAAG,KAAK,CAAC,UAArB;;AACA,QAAI,QAAM,GAAG,KAAb,EAAoB;AAChB,aAAO,IAAI,QAAX;AACH;;AACD,QAAI,QAAM,GAAG,OAAb,EAAsB;AAClB,aAAO,IAAI,QAAX;AACH;;AACD,QAAI,QAAM,GAAG,WAAb,EAA0B;AACtB,aAAO,IAAI,QAAX;AACH;AACJ;;AAED,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB;AACA;AACA,QAAI,IAAI,CAAC,KAAL,CAAW,KAAX,MAAsB,KAA1B,EAAiC,OAAO,CAAP,CAHd,CAKnB;;AACA,QAAI,KAAK,IAAI,CAAb,EAAgB;AACZ;AACA,UAAI,KAAK,GAAG,IAAZ,EAAkB,OAAO,CAAP,CAFN,CAGZ;;AACA,UAAI,KAAK,GAAG,KAAZ,EAAmB,OAAO,CAAP,CAJP,CAKZ;;AACA,UAAI,KAAK,GAAG,OAAZ,EAAqB,OAAO,CAAP,CANT,CAOZ;;AACA,UAAI,KAAK,GAAG,WAAZ,EAAyB,OAAO,CAAP;AACzB,YAAM,IAAI,KAAJ,CAAU,sBAAsB,KAAK,CAAC,QAAN,CAAe,EAAf,CAAhC,CAAN;AACH,KAhBkB,CAiBnB;;;AACA,QAAI,KAAK,IAAI,CAAC,IAAd,EAAoB,OAAO,CAAP,CAlBD,CAmBnB;;AACA,QAAI,KAAK,IAAI,CAAC,IAAd,EAAoB,OAAO,CAAP,CApBD,CAqBnB;;AACA,QAAI,KAAK,IAAI,CAAC,MAAd,EAAsB,OAAO,CAAP,CAtBH,CAuBnB;;AACA,QAAI,KAAK,IAAI,CAAC,UAAd,EAA0B,OAAO,CAAP;AAC1B,UAAM,IAAI,KAAJ,CAAU,yBAAyB,KAAK,CAAC,QAAN,CAAe,EAAf,EAAmB,MAAnB,CAA0B,CAA1B,CAAnC,CAAN;AACH,GA3D0B,CA6D3B;;;AACA,MAAI,IAAI,KAAK,SAAT,IAAsB,KAAK,KAAK,IAAhC,IAAwC,KAAK,KAAK,KAAK,CAA3D,EAA8D,OAAO,CAAP,CA9DnC,CAgE3B;;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAI,QAAJ;AAAA,QAAoB,IAAI,GAAG,CAA3B;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACtB,MAAA,QAAM,GAAG,KAAK,CAAC,MAAf;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,QAAA,IAAI,IAAI,WAAW,CAAC,KAAK,CAAC,CAAD,CAAN,CAAnB;AACH;AACJ,KALD,MAKO;AACH,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAb;AACA,MAAA,QAAM,GAAG,IAAI,CAAC,MAAd;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,YAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;AACA,QAAA,IAAI,IAAI,WAAW,CAAC,GAAD,CAAX,GAAmB,WAAW,CAAC,KAAK,CAAC,GAAD,CAAN,CAAtC;AACH;AACJ;;AACD,QAAI,QAAM,GAAG,IAAb,EAAmB;AACf,aAAO,IAAI,IAAX;AACH;;AACD,QAAI,QAAM,GAAG,OAAb,EAAsB;AAClB,aAAO,IAAI,IAAX;AACH;;AACD,QAAI,QAAM,GAAG,WAAb,EAA0B;AACtB,aAAO,IAAI,IAAX;AACH;;AACD,UAAM,IAAI,KAAJ,CAAU,gCAAgC,QAAM,CAAC,QAAP,CAAgB,EAAhB,CAA1C,CAAN;AACH;;AACD,QAAM,IAAI,KAAJ,CAAU,kBAAkB,IAA5B,CAAN;AACH;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAoC,IAApC,EAAoD,KAApD,EAAuE,MAAvE,EAAqF;AACjF,MAAM,IAAI,GAAG,OAAO,KAApB,CADiF,CAGjF;;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAM,QAAM,GAAG,aAAa,CAAC,KAAD,CAA5B,CADmB,CAEnB;;AACA,QAAI,QAAM,GAAG,IAAb,EAAmB;AACf,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,QAAM,GAAG,IAA/B;AACA,MAAA,SAAS,CAAC,KAAD,EAAQ,MAAM,GAAG,CAAjB,EAAoB,KAApB,CAAT;AACA,aAAO,IAAI,QAAX;AACH,KAPkB,CAQnB;;;AACA,QAAI,QAAM,GAAG,KAAb,EAAoB;AAChB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,MAAM,GAAG,CAAvB,EAA0B,QAA1B;AACA,MAAA,SAAS,CAAC,KAAD,EAAQ,MAAM,GAAG,CAAjB,EAAoB,KAApB,CAAT;AACA,aAAO,IAAI,QAAX;AACH,KAdkB,CAenB;;;AACA,QAAI,QAAM,GAAG,OAAb,EAAsB;AAClB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,SAAS,CAAC,KAAD,EAAQ,MAAM,GAAG,CAAjB,EAAoB,KAApB,CAAT;AACA,aAAO,IAAI,QAAX;AACH,KArBkB,CAsBnB;;;AACA,QAAI,QAAM,GAAG,WAAb,EAA0B;AACtB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,SAAS,CAAC,KAAD,EAAQ,MAAM,GAAG,CAAjB,EAAoB,KAApB,CAAT;AACA,aAAO,IAAI,QAAX;AACH;AACJ;;AAED,MAAI,KAAK,YAAY,UAArB,EAAiC;AAC7B,QAAM,QAAM,GAAG,KAAK,CAAC,UAArB;AACA,QAAM,OAAK,GAAG,IAAI,UAAJ,CAAe,IAAI,CAAC,MAApB,CAAd,CAF6B,CAG7B;;AACA,QAAI,QAAM,GAAG,KAAb,EAAoB;AAChB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,MAAM,GAAG,CAAvB,EAA0B,QAA1B;AACA,MAAA,OAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,MAAM,GAAG,CAA1B;AACA,aAAO,IAAI,QAAX;AACH,KAT4B,CAU7B;;;AACA,QAAI,QAAM,GAAG,OAAb,EAAsB;AAClB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,OAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,MAAM,GAAG,CAA1B;AACA,aAAO,IAAI,QAAX;AACH,KAhB4B,CAiB7B;;;AACA,QAAI,QAAM,GAAG,WAAb,EAA0B;AACtB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,OAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,MAAM,GAAG,CAA1B;AACA,aAAO,IAAI,QAAX;AACH;AACJ;;AAED,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAI,CAAC,QAAQ,CAAC,KAAD,CAAb,EAAsB;AAClB,YAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAlC,CAAN;AACH,KAHkB,CAKnB;;;AACA,QAAI,IAAI,CAAC,KAAL,CAAW,KAAX,MAAsB,KAA1B,EAAiC;AAC7B,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,UAAL,CAAgB,MAAM,GAAG,CAAzB,EAA4B,KAA5B;AACA,aAAO,CAAP;AACH,KAVkB,CAYnB;;;AACA,QAAI,KAAK,IAAI,CAAb,EAAgB;AACZ;AACA,UAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,QAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,KAAtB;AACA,eAAO,CAAP;AACH,OALW,CAMZ;;;AACA,UAAI,KAAK,GAAG,KAAZ,EAAmB;AACf,QAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,MAAM,GAAG,CAAvB,EAA0B,KAA1B;AACA,eAAO,CAAP;AACH,OAXW,CAYZ;;;AACA,UAAI,KAAK,GAAG,OAAZ,EAAqB;AACjB,QAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,QAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,KAA3B;AACA,eAAO,CAAP;AACH,OAjBW,CAkBZ;;;AACA,UAAI,KAAK,GAAG,WAAZ,EAAyB;AACrB,QAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,QAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,KAA3B;AACA,eAAO,CAAP;AACH;;AACD,YAAM,IAAI,KAAJ,CAAU,sBAAsB,KAAK,CAAC,QAAN,CAAe,EAAf,CAAhC,CAAN;AACH,KAtCkB,CAuCnB;;;AACA,QAAI,KAAK,IAAI,CAAC,IAAd,EAAoB;AAChB,MAAA,IAAI,CAAC,OAAL,CAAa,MAAb,EAAqB,KAArB;AACA,aAAO,CAAP;AACH,KA3CkB,CA4CnB;;;AACA,QAAI,KAAK,IAAI,CAAC,IAAd,EAAoB;AAChB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,OAAL,CAAa,MAAM,GAAG,CAAtB,EAAyB,KAAzB;AACA,aAAO,CAAP;AACH,KAjDkB,CAkDnB;;;AACA,QAAI,KAAK,IAAI,CAAC,MAAd,EAAsB;AAClB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,MAAM,GAAG,CAAvB,EAA0B,KAA1B;AACA,aAAO,CAAP;AACH,KAvDkB,CAwDnB;;;AACA,QAAI,KAAK,IAAI,CAAC,UAAd,EAA0B;AACtB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,MAAM,GAAG,CAAvB,EAA0B,KAA1B;AACA,aAAO,CAAP;AACH;;AACD,UAAM,IAAI,KAAJ,CAAU,yBAAyB,CAAC,CAAC,KAAF,EAAS,QAAT,CAAkB,EAAlB,EAAsB,MAAtB,CAA6B,CAA7B,CAAnC,CAAN;AACH,GA5HgF,CA8HjF;;;AACA,MAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAhC,EAA2C;AACvC,IAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,IAAtB;AACA,WAAO,CAAP;AACH,GAlIgF,CAoIjF;;;AACA,MAAI,IAAI,KAAK,SAAb,EAAwB;AACpB,IAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,KAAK,GAAG,IAAH,GAAU,IAArC;AACA,WAAO,CAAP;AACH,GAxIgF,CA0IjF;;;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAI,QAAJ;AAAA,QAAoB,IAAI,GAAG,CAA3B;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,CAAhB;AACA,QAAI,IAAI,GAAA,KAAA,CAAR;;AAEA,QAAI,OAAJ,EAAa;AACT,MAAA,QAAM,GAAG,KAAK,CAAC,MAAf;AACH,KAFD,MAEO;AACH,MAAA,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAP;AACA,MAAA,QAAM,GAAG,IAAI,CAAC,MAAd;AACH;;AAED,QAAI,QAAM,GAAG,IAAb,EAAmB;AACf,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,QAAM,IAAI,OAAO,GAAG,IAAH,GAAU,IAArB,CAA5B;AACA,MAAA,IAAI,GAAG,CAAP;AACH,KAHD,MAGO,IAAI,QAAM,GAAG,OAAb,EAAsB;AACzB,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,OAAO,GAAG,IAAH,GAAU,IAAvC;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,IAAI,GAAG,CAAP;AACH,KAJM,MAIA,IAAI,QAAM,GAAG,WAAb,EAA0B;AAC7B,MAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,OAAO,GAAG,IAAH,GAAU,IAAvC;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAA3B;AACA,MAAA,IAAI,GAAG,CAAP;AACH;;AAED,QAAI,OAAJ,EAAa;AACT,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,QAAA,IAAI,IAAI,cAAc,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,IAAX,EAAiB,KAAjB,EAAwB,MAAM,GAAG,IAAjC,CAAtB;AACH;AACJ,KAJD,MAIO;AACH,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,CAAC,EAA5C,EAAgD;AAC5C,YAAM,GAAG,GAAG,IAAK,CAAC,CAAD,CAAjB;AACA,QAAA,IAAI,IAAI,cAAc,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,MAAM,GAAG,IAA5B,CAAtB;AACA,QAAA,IAAI,IAAI,cAAc,CAAC,KAAK,CAAC,GAAD,CAAN,EAAa,IAAb,EAAmB,KAAnB,EAA0B,MAAM,GAAG,IAAnC,CAAtB;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AACD,QAAM,IAAI,KAAJ,CAAU,kBAAkB,IAA5B,CAAN;AACH","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { utf8ByteCount, utf8Write } from '../utf8';\r\nexport function encodeMsgPack(value) {\r\n    var buffer = new ArrayBuffer(encodedSize(value));\r\n    var view = new DataView(buffer);\r\n    var bytes = new Uint8Array(buffer);\r\n    encodeInternal(value, view, bytes, 0);\r\n    return bytes;\r\n}\r\nfunction encodedSize(value) {\r\n    var type = typeof value;\r\n    // Raw Bytes\r\n    if (type === 'string') {\r\n        var length_1 = utf8ByteCount(value);\r\n        if (length_1 < 0x20) {\r\n            return 1 + length_1;\r\n        }\r\n        if (length_1 < 0x100) {\r\n            return 2 + length_1;\r\n        }\r\n        if (length_1 < 0x10000) {\r\n            return 3 + length_1;\r\n        }\r\n        if (length_1 < 0x100000000) {\r\n            return 5 + length_1;\r\n        }\r\n    }\r\n    if (value instanceof Uint8Array) {\r\n        var length_2 = value.byteLength;\r\n        if (length_2 < 0x100) {\r\n            return 2 + length_2;\r\n        }\r\n        if (length_2 < 0x10000) {\r\n            return 3 + length_2;\r\n        }\r\n        if (length_2 < 0x100000000) {\r\n            return 5 + length_2;\r\n        }\r\n    }\r\n    if (type === 'number') {\r\n        // Floating Point\r\n        // double\r\n        if (Math.floor(value) !== value)\r\n            return 9;\r\n        // Integers\r\n        if (value >= 0) {\r\n            // positive fixnum\r\n            if (value < 0x80)\r\n                return 1;\r\n            // uint 8\r\n            if (value < 0x100)\r\n                return 2;\r\n            // uint 16\r\n            if (value < 0x10000)\r\n                return 3;\r\n            // uint 32\r\n            if (value < 0x100000000)\r\n                return 5;\r\n            throw new Error('Number too big 0x' + value.toString(16));\r\n        }\r\n        // negative fixnum\r\n        if (value >= -0x20)\r\n            return 1;\r\n        // int 8\r\n        if (value >= -0x80)\r\n            return 2;\r\n        // int 16\r\n        if (value >= -0x8000)\r\n            return 3;\r\n        // int 32\r\n        if (value >= -0x80000000)\r\n            return 5;\r\n        throw new Error('Number too small -0x' + value.toString(16).substr(1));\r\n    }\r\n    // Boolean, null\r\n    if (type === 'boolean' || value === null || value === void 0)\r\n        return 1;\r\n    // Container Types\r\n    if (type === 'object') {\r\n        var length_3, size = 0;\r\n        if (Array.isArray(value)) {\r\n            length_3 = value.length;\r\n            for (var i = 0; i < length_3; i++) {\r\n                size += encodedSize(value[i]);\r\n            }\r\n        }\r\n        else {\r\n            var keys = Object.keys(value);\r\n            length_3 = keys.length;\r\n            for (var i = 0; i < length_3; i++) {\r\n                var key = keys[i];\r\n                size += encodedSize(key) + encodedSize(value[key]);\r\n            }\r\n        }\r\n        if (length_3 < 0x10) {\r\n            return 1 + size;\r\n        }\r\n        if (length_3 < 0x10000) {\r\n            return 3 + size;\r\n        }\r\n        if (length_3 < 0x100000000) {\r\n            return 5 + size;\r\n        }\r\n        throw new Error('Array or object too long 0x' + length_3.toString(16));\r\n    }\r\n    throw new Error('Unknown type ' + type);\r\n}\r\nfunction encodeInternal(value, view, bytes, offset) {\r\n    var type = typeof value;\r\n    // Strings Bytes\r\n    if (type === 'string') {\r\n        var length_4 = utf8ByteCount(value);\r\n        // fix str\r\n        if (length_4 < 0x20) {\r\n            view.setUint8(offset, length_4 | 0xa0);\r\n            utf8Write(bytes, offset + 1, value);\r\n            return 1 + length_4;\r\n        }\r\n        // str 8\r\n        if (length_4 < 0x100) {\r\n            view.setUint8(offset, 0xd9);\r\n            view.setUint8(offset + 1, length_4);\r\n            utf8Write(bytes, offset + 2, value);\r\n            return 2 + length_4;\r\n        }\r\n        // str 16\r\n        if (length_4 < 0x10000) {\r\n            view.setUint8(offset, 0xda);\r\n            view.setUint16(offset + 1, length_4);\r\n            utf8Write(bytes, offset + 3, value);\r\n            return 3 + length_4;\r\n        }\r\n        // str 32\r\n        if (length_4 < 0x100000000) {\r\n            view.setUint8(offset, 0xdb);\r\n            view.setUint32(offset + 1, length_4);\r\n            utf8Write(bytes, offset + 5, value);\r\n            return 5 + length_4;\r\n        }\r\n    }\r\n    if (value instanceof Uint8Array) {\r\n        var length_5 = value.byteLength;\r\n        var bytes_1 = new Uint8Array(view.buffer);\r\n        // bin 8\r\n        if (length_5 < 0x100) {\r\n            view.setUint8(offset, 0xc4);\r\n            view.setUint8(offset + 1, length_5);\r\n            bytes_1.set(value, offset + 2);\r\n            return 2 + length_5;\r\n        }\r\n        // bin 16\r\n        if (length_5 < 0x10000) {\r\n            view.setUint8(offset, 0xc5);\r\n            view.setUint16(offset + 1, length_5);\r\n            bytes_1.set(value, offset + 3);\r\n            return 3 + length_5;\r\n        }\r\n        // bin 32\r\n        if (length_5 < 0x100000000) {\r\n            view.setUint8(offset, 0xc6);\r\n            view.setUint32(offset + 1, length_5);\r\n            bytes_1.set(value, offset + 5);\r\n            return 5 + length_5;\r\n        }\r\n    }\r\n    if (type === 'number') {\r\n        if (!isFinite(value)) {\r\n            throw new Error('Number not finite: ' + value);\r\n        }\r\n        // Floating point\r\n        if (Math.floor(value) !== value) {\r\n            view.setUint8(offset, 0xcb);\r\n            view.setFloat64(offset + 1, value);\r\n            return 9;\r\n        }\r\n        // Integers\r\n        if (value >= 0) {\r\n            // positive fixnum\r\n            if (value < 0x80) {\r\n                view.setUint8(offset, value);\r\n                return 1;\r\n            }\r\n            // uint 8\r\n            if (value < 0x100) {\r\n                view.setUint8(offset, 0xcc);\r\n                view.setUint8(offset + 1, value);\r\n                return 2;\r\n            }\r\n            // uint 16\r\n            if (value < 0x10000) {\r\n                view.setUint8(offset, 0xcd);\r\n                view.setUint16(offset + 1, value);\r\n                return 3;\r\n            }\r\n            // uint 32\r\n            if (value < 0x100000000) {\r\n                view.setUint8(offset, 0xce);\r\n                view.setUint32(offset + 1, value);\r\n                return 5;\r\n            }\r\n            throw new Error('Number too big 0x' + value.toString(16));\r\n        }\r\n        // negative fixnum\r\n        if (value >= -0x20) {\r\n            view.setInt8(offset, value);\r\n            return 1;\r\n        }\r\n        // int 8\r\n        if (value >= -0x80) {\r\n            view.setUint8(offset, 0xd0);\r\n            view.setInt8(offset + 1, value);\r\n            return 2;\r\n        }\r\n        // int 16\r\n        if (value >= -0x8000) {\r\n            view.setUint8(offset, 0xd1);\r\n            view.setInt16(offset + 1, value);\r\n            return 3;\r\n        }\r\n        // int 32\r\n        if (value >= -0x80000000) {\r\n            view.setUint8(offset, 0xd2);\r\n            view.setInt32(offset + 1, value);\r\n            return 5;\r\n        }\r\n        throw new Error('Number too small -0x' + (-value).toString(16).substr(1));\r\n    }\r\n    // null\r\n    if (value === null || value === undefined) {\r\n        view.setUint8(offset, 0xc0);\r\n        return 1;\r\n    }\r\n    // Boolean\r\n    if (type === 'boolean') {\r\n        view.setUint8(offset, value ? 0xc3 : 0xc2);\r\n        return 1;\r\n    }\r\n    // Container Types\r\n    if (type === 'object') {\r\n        var length_6, size = 0;\r\n        var isArray = Array.isArray(value);\r\n        var keys = void 0;\r\n        if (isArray) {\r\n            length_6 = value.length;\r\n        }\r\n        else {\r\n            keys = Object.keys(value);\r\n            length_6 = keys.length;\r\n        }\r\n        if (length_6 < 0x10) {\r\n            view.setUint8(offset, length_6 | (isArray ? 0x90 : 0x80));\r\n            size = 1;\r\n        }\r\n        else if (length_6 < 0x10000) {\r\n            view.setUint8(offset, isArray ? 0xdc : 0xde);\r\n            view.setUint16(offset + 1, length_6);\r\n            size = 3;\r\n        }\r\n        else if (length_6 < 0x100000000) {\r\n            view.setUint8(offset, isArray ? 0xdd : 0xdf);\r\n            view.setUint32(offset + 1, length_6);\r\n            size = 5;\r\n        }\r\n        if (isArray) {\r\n            for (var i = 0; i < length_6; i++) {\r\n                size += encodeInternal(value[i], view, bytes, offset + size);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0, _i = keys.length; i < _i; i++) {\r\n                var key = keys[i];\r\n                size += encodeInternal(key, view, bytes, offset + size);\r\n                size += encodeInternal(value[key], view, bytes, offset + size);\r\n            }\r\n        }\r\n        return size;\r\n    }\r\n    throw new Error('Unknown type ' + type);\r\n}\r\n//# sourceMappingURL=encode.js.map"]},"metadata":{},"sourceType":"module"}