{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Column } from '../../../../../mol-data/db';\nimport { mmCIF_Schema as mmCIF } from '../../../../../mol-io/reader/cif/schema/mmcif';\nexport var AtomsSchema = {\n  /**\r\n   * The chemical element of this atom site.\r\n   * For mmCIF files, this points to atom_type.symbol in the ATOM_TYPE category.\r\n   */\n  type_symbol: Column.Schema.Aliased(mmCIF.atom_site.type_symbol),\n\n  /**\r\n   * A component of the identifier for this atom site.\r\n   * This is a standardized name for the atom within its residue.\r\n   * For mmCIF files, this points to chem_comp_atom.atom_id in the CHEM_COMP_ATOM category.\r\n   */\n  label_atom_id: mmCIF.atom_site.label_atom_id,\n\n  /**\r\n   * An alternative identifier for label_atom_id that may be provided by an author\r\n   * in order to match the identification used in the publication that describes the structure.\r\n   */\n  auth_atom_id: mmCIF.atom_site.auth_atom_id,\n\n  /**\r\n   * A component of the identifier for this atom site.\r\n   * Identifies an alternative conformation for this atom site.\r\n   */\n  label_alt_id: mmCIF.atom_site.label_alt_id,\n\n  /**\r\n   * A component of the identifier for this atom site.\r\n   * For mmCIF files, this points to chem_comp.id in the CHEM_COMP category.\r\n   */\n  label_comp_id: mmCIF.atom_site.label_comp_id,\n\n  /**\r\n   * An alternative identifier for atom_site.label_comp_id that may be provided by an author\r\n   * in order to match the identification used in the publication that describes the structure.\r\n   */\n  auth_comp_id: mmCIF.atom_site.auth_comp_id,\n\n  /**\r\n   * The net integer charge assigned to this atom.\r\n   * This is the formal charge assignment normally found in chemical diagrams.\r\n   */\n  pdbx_formal_charge: mmCIF.atom_site.pdbx_formal_charge // id, occupancy and B_iso_or_equiv are part of conformation\n\n};\nexport var ResiduesSchema = {\n  /**\r\n   * The group of atoms to which the atom site belongs. This data item is provided for\r\n   * compatibility with the original Protein Data Bank format, and only for that purpose.\r\n   */\n  group_PDB: mmCIF.atom_site.group_PDB,\n\n  /**\r\n   * For mmCIF files, this points to entity_poly_seq.num in the ENTITY_POLY_SEQ category.\r\n   */\n  label_seq_id: mmCIF.atom_site.label_seq_id,\n\n  /**\r\n   * An alternative identifier for atom_site.label_seq_id that may be provided by an author\r\n   * in order to match the identification used in the publication that describes the structure.\r\n   */\n  auth_seq_id: mmCIF.atom_site.auth_seq_id,\n\n  /**\r\n   * PDB insertion code.\r\n   */\n  pdbx_PDB_ins_code: mmCIF.atom_site.pdbx_PDB_ins_code // comp_id is part of atoms because of microheterogeneity\n\n};\nexport var ChainsSchema = {\n  /**\r\n   * A component of the identifier for this atom site.\r\n   * For mmCIF files, this points to struct_asym.id in the STRUCT_ASYM category.\r\n   */\n  label_asym_id: mmCIF.atom_site.label_asym_id,\n\n  /**\r\n   * An alternative identifier for atomsite.label_asym_id that may be provided by an author\r\n   * in order to match the identification used in the publication that describes the structure.\r\n   */\n  auth_asym_id: mmCIF.atom_site.auth_asym_id,\n\n  /**\r\n   * For mmCIF files, this points to _entity.id in the ENTITY category.\r\n   */\n  label_entity_id: mmCIF.atom_site.label_entity_id\n};\nexport var AtomicIndex;\n\n(function (AtomicIndex) {\n  function EmptyResidueKey() {\n    return {\n      label_entity_id: '',\n      label_asym_id: '',\n      auth_seq_id: 0,\n      pdbx_PDB_ins_code: void 0\n    };\n  }\n\n  AtomicIndex.EmptyResidueKey = EmptyResidueKey;\n})(AtomicIndex || (AtomicIndex = {}));\n\nexport var AtomicHierarchy;\n\n(function (AtomicHierarchy) {\n  /** Start residue inclusive */\n  function chainStartResidueIndex(segs, cI) {\n    return segs.residueAtomSegments.index[segs.chainAtomSegments.offsets[cI]];\n  }\n\n  AtomicHierarchy.chainStartResidueIndex = chainStartResidueIndex;\n  /** End residue exclusive */\n\n  function chainEndResidueIndexExcl(segs, cI) {\n    return segs.residueAtomSegments.index[segs.chainAtomSegments.offsets[cI + 1] - 1] + 1;\n  }\n\n  AtomicHierarchy.chainEndResidueIndexExcl = chainEndResidueIndexExcl;\n\n  function chainResidueCount(segs, cI) {\n    return chainEndResidueIndexExcl(segs, cI) - chainStartResidueIndex(segs, cI);\n  }\n\n  AtomicHierarchy.chainResidueCount = chainResidueCount;\n})(AtomicHierarchy || (AtomicHierarchy = {}));","map":{"version":3,"sources":["../../../../../../src/mol-model/structure/model/properties/atomic/hierarchy.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,MAAT,QAA8B,4BAA9B;AAEA,SAAS,YAAY,IAAI,KAAzB,QAAsC,+CAAtC;AAKA,OAAO,IAAM,WAAW,GAAG;AACvB;;;AAGG;AACH,EAAA,WAAW,EAAE,MAAM,CAAC,MAAP,CAAc,OAAd,CAAqC,KAAK,CAAC,SAAN,CAAgB,WAArD,CALU;;AAMvB;;;;AAIG;AACH,EAAA,aAAa,EAAE,KAAK,CAAC,SAAN,CAAgB,aAXR;;AAYvB;;;AAGG;AACH,EAAA,YAAY,EAAE,KAAK,CAAC,SAAN,CAAgB,YAhBP;;AAiBvB;;;AAGG;AACH,EAAA,YAAY,EAAE,KAAK,CAAC,SAAN,CAAgB,YArBP;;AAsBvB;;;AAGG;AACH,EAAA,aAAa,EAAE,KAAK,CAAC,SAAN,CAAgB,aA1BR;;AA2BvB;;;AAGG;AACH,EAAA,YAAY,EAAE,KAAK,CAAC,SAAN,CAAgB,YA/BP;;AAgCvB;;;AAGG;AACH,EAAA,kBAAkB,EAAE,KAAK,CAAC,SAAN,CAAgB,kBApCb,CAsCvB;;AAtCuB,CAApB;AA4CP,OAAO,IAAM,cAAc,GAAG;AAC1B;;;AAGG;AACH,EAAA,SAAS,EAAE,KAAK,CAAC,SAAN,CAAgB,SALD;;AAM1B;;AAEG;AACH,EAAA,YAAY,EAAE,KAAK,CAAC,SAAN,CAAgB,YATJ;;AAU1B;;;AAGG;AACH,EAAA,WAAW,EAAE,KAAK,CAAC,SAAN,CAAgB,WAdH;;AAe1B;;AAEG;AACH,EAAA,iBAAiB,EAAE,KAAK,CAAC,SAAN,CAAgB,iBAlBT,CAoB1B;;AApB0B,CAAvB;AAyBP,OAAO,IAAM,YAAY,GAAG;AACxB;;;AAGG;AACH,EAAA,aAAa,EAAE,KAAK,CAAC,SAAN,CAAgB,aALP;;AAMxB;;;AAGG;AACH,EAAA,YAAY,EAAE,KAAK,CAAC,SAAN,CAAgB,YAVN;;AAWxB;;AAEG;AACH,EAAA,eAAe,EAAE,KAAK,CAAC,SAAN,CAAgB;AAdT,CAArB;AAgIP,OAAM,IAAW,WAAX;;AAAN,CAAA,UAAiB,WAAjB,EAA4B;AAKxB,WAAgB,eAAhB,GAA+B;AAAiB,WAAO;AAAE,MAAA,eAAe,EAAE,EAAnB;AAAuB,MAAA,aAAa,EAAE,EAAtC;AAA0C,MAAA,WAAW,EAAE,CAAvD;AAA0D,MAAA,iBAAiB,EAAE,KAAK;AAAlF,KAAP;AAA+F;;AAA/H,EAAA,WAAA,CAAA,eAAA,GAAe,eAAf;AAOnB,CAZD,EAAiB,WAAW,KAAX,WAAW,GAAA,EAAA,CAA5B;;AA0BA,OAAM,IAAW,eAAX;;AAAN,CAAA,UAAiB,eAAjB,EAAgC;AAC5B;AACA,WAAgB,sBAAhB,CAAuC,IAAvC,EAA6D,EAA7D,EAA2E;AACvE,WAAO,IAAI,CAAC,mBAAL,CAAyB,KAAzB,CAA+B,IAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,EAA/B,CAA/B,CAAP;AACH;;AAFe,EAAA,eAAA,CAAA,sBAAA,GAAsB,sBAAtB;AAIhB;;AACA,WAAgB,wBAAhB,CAAyC,IAAzC,EAA+D,EAA/D,EAA6E;AACzE,WAAO,IAAI,CAAC,mBAAL,CAAyB,KAAzB,CAA+B,IAAI,CAAC,iBAAL,CAAuB,OAAvB,CAA+B,EAAE,GAAG,CAApC,IAAyC,CAAxE,IAA6E,CAApF;AACH;;AAFe,EAAA,eAAA,CAAA,wBAAA,GAAwB,wBAAxB;;AAIhB,WAAgB,iBAAhB,CAAkC,IAAlC,EAAwD,EAAxD,EAAsE;AAClE,WAAO,wBAAwB,CAAC,IAAD,EAAO,EAAP,CAAxB,GAAqC,sBAAsB,CAAC,IAAD,EAAO,EAAP,CAAlE;AACH;;AAFe,EAAA,eAAA,CAAA,iBAAA,GAAiB,iBAAjB;AAGnB,CAdD,EAAiB,eAAe,KAAf,eAAe,GAAA,EAAA,CAAhC","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Column } from '../../../../../mol-data/db';\r\nimport { mmCIF_Schema as mmCIF } from '../../../../../mol-io/reader/cif/schema/mmcif';\r\nexport var AtomsSchema = {\r\n    /**\r\n     * The chemical element of this atom site.\r\n     * For mmCIF files, this points to atom_type.symbol in the ATOM_TYPE category.\r\n     */\r\n    type_symbol: Column.Schema.Aliased(mmCIF.atom_site.type_symbol),\r\n    /**\r\n     * A component of the identifier for this atom site.\r\n     * This is a standardized name for the atom within its residue.\r\n     * For mmCIF files, this points to chem_comp_atom.atom_id in the CHEM_COMP_ATOM category.\r\n     */\r\n    label_atom_id: mmCIF.atom_site.label_atom_id,\r\n    /**\r\n     * An alternative identifier for label_atom_id that may be provided by an author\r\n     * in order to match the identification used in the publication that describes the structure.\r\n     */\r\n    auth_atom_id: mmCIF.atom_site.auth_atom_id,\r\n    /**\r\n     * A component of the identifier for this atom site.\r\n     * Identifies an alternative conformation for this atom site.\r\n     */\r\n    label_alt_id: mmCIF.atom_site.label_alt_id,\r\n    /**\r\n     * A component of the identifier for this atom site.\r\n     * For mmCIF files, this points to chem_comp.id in the CHEM_COMP category.\r\n     */\r\n    label_comp_id: mmCIF.atom_site.label_comp_id,\r\n    /**\r\n     * An alternative identifier for atom_site.label_comp_id that may be provided by an author\r\n     * in order to match the identification used in the publication that describes the structure.\r\n     */\r\n    auth_comp_id: mmCIF.atom_site.auth_comp_id,\r\n    /**\r\n     * The net integer charge assigned to this atom.\r\n     * This is the formal charge assignment normally found in chemical diagrams.\r\n     */\r\n    pdbx_formal_charge: mmCIF.atom_site.pdbx_formal_charge,\r\n    // id, occupancy and B_iso_or_equiv are part of conformation\r\n};\r\nexport var ResiduesSchema = {\r\n    /**\r\n     * The group of atoms to which the atom site belongs. This data item is provided for\r\n     * compatibility with the original Protein Data Bank format, and only for that purpose.\r\n     */\r\n    group_PDB: mmCIF.atom_site.group_PDB,\r\n    /**\r\n     * For mmCIF files, this points to entity_poly_seq.num in the ENTITY_POLY_SEQ category.\r\n     */\r\n    label_seq_id: mmCIF.atom_site.label_seq_id,\r\n    /**\r\n     * An alternative identifier for atom_site.label_seq_id that may be provided by an author\r\n     * in order to match the identification used in the publication that describes the structure.\r\n     */\r\n    auth_seq_id: mmCIF.atom_site.auth_seq_id,\r\n    /**\r\n     * PDB insertion code.\r\n     */\r\n    pdbx_PDB_ins_code: mmCIF.atom_site.pdbx_PDB_ins_code,\r\n    // comp_id is part of atoms because of microheterogeneity\r\n};\r\nexport var ChainsSchema = {\r\n    /**\r\n     * A component of the identifier for this atom site.\r\n     * For mmCIF files, this points to struct_asym.id in the STRUCT_ASYM category.\r\n     */\r\n    label_asym_id: mmCIF.atom_site.label_asym_id,\r\n    /**\r\n     * An alternative identifier for atomsite.label_asym_id that may be provided by an author\r\n     * in order to match the identification used in the publication that describes the structure.\r\n     */\r\n    auth_asym_id: mmCIF.atom_site.auth_asym_id,\r\n    /**\r\n     * For mmCIF files, this points to _entity.id in the ENTITY category.\r\n     */\r\n    label_entity_id: mmCIF.atom_site.label_entity_id\r\n};\r\nexport var AtomicIndex;\r\n(function (AtomicIndex) {\r\n    function EmptyResidueKey() { return { label_entity_id: '', label_asym_id: '', auth_seq_id: 0, pdbx_PDB_ins_code: void 0 }; }\r\n    AtomicIndex.EmptyResidueKey = EmptyResidueKey;\r\n})(AtomicIndex || (AtomicIndex = {}));\r\nexport var AtomicHierarchy;\r\n(function (AtomicHierarchy) {\r\n    /** Start residue inclusive */\r\n    function chainStartResidueIndex(segs, cI) {\r\n        return segs.residueAtomSegments.index[segs.chainAtomSegments.offsets[cI]];\r\n    }\r\n    AtomicHierarchy.chainStartResidueIndex = chainStartResidueIndex;\r\n    /** End residue exclusive */\r\n    function chainEndResidueIndexExcl(segs, cI) {\r\n        return segs.residueAtomSegments.index[segs.chainAtomSegments.offsets[cI + 1] - 1] + 1;\r\n    }\r\n    AtomicHierarchy.chainEndResidueIndexExcl = chainEndResidueIndexExcl;\r\n    function chainResidueCount(segs, cI) {\r\n        return chainEndResidueIndexExcl(segs, cI) - chainStartResidueIndex(segs, cI);\r\n    }\r\n    AtomicHierarchy.chainResidueCount = chainResidueCount;\r\n})(AtomicHierarchy || (AtomicHierarchy = {}));\r\n//# sourceMappingURL=hierarchy.js.map"]},"metadata":{},"sourceType":"module"}