{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorScale } from '../../mol-util/color';\nimport { StructureElement, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { AtomPartialCharge } from '../../mol-model-formats/structure/property/partial-charge';\nvar DefaultPartialChargeColor = Color(0xffff99);\nvar Description = \"Assigns a color based on the partial charge of an atom.\";\nexport var PartialChargeColorThemeParams = {\n  domain: PD.Interval([-1, 1]),\n  list: PD.ColorList('red-white-blue', {\n    presetKind: 'scale'\n  })\n};\nexport function getPartialChargeColorThemeParams(ctx) {\n  return PartialChargeColorThemeParams; // TODO return copy\n}\n\nfunction getPartialCharge(unit, element) {\n  var _a;\n\n  return (_a = AtomPartialCharge.Provider.get(unit.model)) === null || _a === void 0 ? void 0 : _a.data.value(element);\n}\n\nexport function PartialChargeColorTheme(ctx, props) {\n  var scale = ColorScale.create({\n    domain: props.domain,\n    listOrName: props.list.colors\n  });\n\n  function color(location) {\n    if (StructureElement.Location.is(location)) {\n      var q = getPartialCharge(location.unit, location.element);\n      return q !== undefined ? scale.color(q) : DefaultPartialChargeColor;\n    } else if (Bond.isLocation(location)) {\n      var q = getPartialCharge(location.aUnit, location.aUnit.elements[location.aIndex]);\n      return q !== undefined ? scale.color(q) : DefaultPartialChargeColor;\n    }\n\n    return DefaultPartialChargeColor;\n  }\n\n  return {\n    factory: PartialChargeColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: scale ? scale.legend : undefined\n  };\n}\nexport var PartialChargeColorThemeProvider = {\n  name: 'partial-charge',\n  label: 'Partial Charge',\n  category: \"Atom Property\"\n  /* Atom */\n  ,\n  factory: PartialChargeColorTheme,\n  getParams: getPartialChargeColorThemeParams,\n  defaultValues: PD.getDefaultValues(PartialChargeColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.models.some(function (m) {\n      return AtomPartialCharge.Provider.get(m) !== undefined;\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/partial-charge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorScale } from '../../mol-util/color';\r\nimport { StructureElement, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { AtomPartialCharge } from '../../mol-model-formats/structure/property/partial-charge';\r\nvar DefaultPartialChargeColor = Color(0xffff99);\r\nvar Description = \"Assigns a color based on the partial charge of an atom.\";\r\nexport var PartialChargeColorThemeParams = {\r\n    domain: PD.Interval([-1, 1]),\r\n    list: PD.ColorList('red-white-blue', { presetKind: 'scale' }),\r\n};\r\nexport function getPartialChargeColorThemeParams(ctx) {\r\n    return PartialChargeColorThemeParams; // TODO return copy\r\n}\r\nfunction getPartialCharge(unit, element) {\r\n    var _a;\r\n    return (_a = AtomPartialCharge.Provider.get(unit.model)) === null || _a === void 0 ? void 0 : _a.data.value(element);\r\n}\r\nexport function PartialChargeColorTheme(ctx, props) {\r\n    var scale = ColorScale.create({\r\n        domain: props.domain,\r\n        listOrName: props.list.colors,\r\n    });\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location)) {\r\n            var q = getPartialCharge(location.unit, location.element);\r\n            return q !== undefined ? scale.color(q) : DefaultPartialChargeColor;\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            var q = getPartialCharge(location.aUnit, location.aUnit.elements[location.aIndex]);\r\n            return q !== undefined ? scale.color(q) : DefaultPartialChargeColor;\r\n        }\r\n        return DefaultPartialChargeColor;\r\n    }\r\n    return {\r\n        factory: PartialChargeColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: scale ? scale.legend : undefined\r\n    };\r\n}\r\nexport var PartialChargeColorThemeProvider = {\r\n    name: 'partial-charge',\r\n    label: 'Partial Charge',\r\n    category: \"Atom Property\" /* Atom */,\r\n    factory: PartialChargeColorTheme,\r\n    getParams: getPartialChargeColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(PartialChargeColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return AtomPartialCharge.Provider.get(m) !== undefined; }); }\r\n};\r\n//# sourceMappingURL=partial-charge.js.map"]},"metadata":{},"sourceType":"module"}