{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { StateTransforms } from '../transforms';\nimport { DataFormatProvider } from './provider';\nexport var StructureFormatCategory = 'Structure';\nexport var PsfProvider = DataFormatProvider({\n  label: 'PSF',\n  description: 'PSF',\n  category: StructureFormatCategory,\n  stringExtensions: ['psf'],\n  parse: function (plugin, data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var format, topology;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            format = plugin.state.data.build().to(data).apply(StateTransforms.Data.ParsePsf, {}, {\n              state: {\n                isGhost: true\n              }\n            });\n            topology = format.apply(StateTransforms.Model.TopologyFromPsf);\n            return [4\n            /*yield*/\n            , format.commit()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              format: format.selector,\n              topology: topology.selector\n            }];\n        }\n      });\n    });\n  }\n});\nexport var DcdProvider = DataFormatProvider({\n  label: 'DCD',\n  description: 'DCD',\n  category: StructureFormatCategory,\n  binaryExtensions: ['dcd'],\n  parse: function (plugin, data) {\n    var coordinates = plugin.state.data.build().to(data).apply(StateTransforms.Model.CoordinatesFromDcd);\n    return coordinates.commit();\n  }\n});\nexport var XtcProvider = DataFormatProvider({\n  label: 'XTC',\n  description: 'XTC',\n  category: StructureFormatCategory,\n  binaryExtensions: ['xtc'],\n  parse: function (plugin, data) {\n    var coordinates = plugin.state.data.build().to(data).apply(StateTransforms.Model.CoordinatesFromXtc);\n    return coordinates.commit();\n  }\n});\nexport var BuiltInStructureFormats = [['psf', PsfProvider], ['dcd', DcdProvider], ['xtc', XtcProvider]];","map":{"version":3,"sources":["../../../src/mol-plugin-state/formats/structure.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,eAAT,QAAgC,eAAhC;AACA,SAAS,kBAAT,QAAmC,YAAnC;AAEA,OAAO,IAAM,uBAAuB,GAAG,WAAhC;AAEP,OAAO,IAAM,WAAW,GAAG,kBAAkB,CAAC;AAC1C,EAAA,KAAK,EAAE,KADmC;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,QAAQ,EAAE,uBAHgC;AAI1C,EAAA,gBAAgB,EAAE,CAAC,KAAD,CAJwB;AAK1C,EAAA,KAAK,EAAE,UAAO,MAAP,EAAe,IAAf,EAAmB;AAAA,WAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAChB,YAAA,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,KAAlB,GACV,EADU,CACP,IADO,EAEV,KAFU,CAEJ,eAAe,CAAC,IAAhB,CAAqB,QAFjB,EAE2B,EAF3B,EAE+B;AAAE,cAAA,KAAK,EAAE;AAAE,gBAAA,OAAO,EAAE;AAAX;AAAT,aAF/B,CAAT;AAGA,YAAA,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,eAAe,CAAC,KAAhB,CAAsB,eAAnC,CAAX;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,MAAP,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO;AAAE,cAAA,MAAM,EAAE,MAAM,CAAC,QAAjB;AAA2B,cAAA,QAAQ,EAAE,QAAQ,CAAC;AAA9C,aAAP,CAAA;;;KARsB,CAAA;AASzB;AAdyC,CAAD,CAAtC;AAiBP,OAAO,IAAM,WAAW,GAAG,kBAAkB,CAAC;AAC1C,EAAA,KAAK,EAAE,KADmC;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,QAAQ,EAAE,uBAHgC;AAI1C,EAAA,gBAAgB,EAAE,CAAC,KAAD,CAJwB;AAK1C,EAAA,KAAK,EAAE,UAAC,MAAD,EAAS,IAAT,EAAa;AAChB,QAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,KAAlB,GACf,EADe,CACZ,IADY,EAEf,KAFe,CAET,eAAe,CAAC,KAAhB,CAAsB,kBAFb,CAApB;AAIA,WAAO,WAAW,CAAC,MAAZ,EAAP;AACH;AAXyC,CAAD,CAAtC;AAcP,OAAO,IAAM,WAAW,GAAG,kBAAkB,CAAC;AAC1C,EAAA,KAAK,EAAE,KADmC;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,QAAQ,EAAE,uBAHgC;AAI1C,EAAA,gBAAgB,EAAE,CAAC,KAAD,CAJwB;AAK1C,EAAA,KAAK,EAAE,UAAC,MAAD,EAAS,IAAT,EAAa;AAChB,QAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAkB,KAAlB,GACf,EADe,CACZ,IADY,EAEf,KAFe,CAET,eAAe,CAAC,KAAhB,CAAsB,kBAFb,CAApB;AAIA,WAAO,WAAW,CAAC,MAAZ,EAAP;AACH;AAXyC,CAAD,CAAtC;AAcP,OAAO,IAAM,uBAAuB,GAAG,CACnC,CAAC,KAAD,EAAQ,WAAR,CADmC,EAEnC,CAAC,KAAD,EAAQ,WAAR,CAFmC,EAGnC,CAAC,KAAD,EAAQ,WAAR,CAHmC,CAAhC","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { StateTransforms } from '../transforms';\r\nimport { DataFormatProvider } from './provider';\r\nexport var StructureFormatCategory = 'Structure';\r\nexport var PsfProvider = DataFormatProvider({\r\n    label: 'PSF',\r\n    description: 'PSF',\r\n    category: StructureFormatCategory,\r\n    stringExtensions: ['psf'],\r\n    parse: function (plugin, data) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var format, topology;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    format = plugin.state.data.build()\r\n                        .to(data)\r\n                        .apply(StateTransforms.Data.ParsePsf, {}, { state: { isGhost: true } });\r\n                    topology = format.apply(StateTransforms.Model.TopologyFromPsf);\r\n                    return [4 /*yield*/, format.commit()];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/, { format: format.selector, topology: topology.selector }];\r\n            }\r\n        });\r\n    }); }\r\n});\r\nexport var DcdProvider = DataFormatProvider({\r\n    label: 'DCD',\r\n    description: 'DCD',\r\n    category: StructureFormatCategory,\r\n    binaryExtensions: ['dcd'],\r\n    parse: function (plugin, data) {\r\n        var coordinates = plugin.state.data.build()\r\n            .to(data)\r\n            .apply(StateTransforms.Model.CoordinatesFromDcd);\r\n        return coordinates.commit();\r\n    }\r\n});\r\nexport var XtcProvider = DataFormatProvider({\r\n    label: 'XTC',\r\n    description: 'XTC',\r\n    category: StructureFormatCategory,\r\n    binaryExtensions: ['xtc'],\r\n    parse: function (plugin, data) {\r\n        var coordinates = plugin.state.data.build()\r\n            .to(data)\r\n            .apply(StateTransforms.Model.CoordinatesFromXtc);\r\n        return coordinates.commit();\r\n    }\r\n});\r\nexport var BuiltInStructureFormats = [\r\n    ['psf', PsfProvider],\r\n    ['dcd', DcdProvider],\r\n    ['xtc', XtcProvider],\r\n];\r\n//# sourceMappingURL=structure.js.map"]},"metadata":{},"sourceType":"module"}