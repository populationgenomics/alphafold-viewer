{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { printTextureImage } from '../../mol-gl/renderable/util';\nimport { defaults, ValueCell } from '../../mol-util';\nimport { ValueSpec, AttributeSpec, UniformSpec } from '../../mol-gl/renderable/schema';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { PixelData } from '../../mol-util/image';\nexport var QuadPositions = new Float32Array([1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0 // Second triangle\n]);\nexport var QuadSchema = {\n  drawCount: ValueSpec('number'),\n  instanceCount: ValueSpec('number'),\n  aPosition: AttributeSpec('float32', 2, 0),\n  uQuadScale: UniformSpec('v2')\n};\nexport var QuadValues = {\n  drawCount: ValueCell.create(6),\n  instanceCount: ValueCell.create(1),\n  aPosition: ValueCell.create(QuadPositions),\n  uQuadScale: ValueCell.create(Vec2.create(1, 1))\n}; //\n\nfunction getArrayForTexture(gl, texture, size) {\n  switch (texture.type) {\n    case gl.UNSIGNED_BYTE:\n      return new Uint8Array(size);\n\n    case gl.FLOAT:\n      return new Float32Array(size);\n  }\n\n  throw new Error('unknown/unsupported texture type');\n}\n\nexport function readTexture(ctx, texture, width, height) {\n  var gl = ctx.gl,\n      resources = ctx.resources;\n  width = defaults(width, texture.getWidth());\n  height = defaults(height, texture.getHeight());\n  var size = width * height * 4;\n  var framebuffer = resources.framebuffer();\n  var array = getArrayForTexture(gl, texture, size);\n  framebuffer.bind();\n  texture.attachFramebuffer(framebuffer, 0);\n  ctx.readPixels(0, 0, width, height, array);\n  return {\n    array: array,\n    width: width,\n    height: height\n  };\n}\nexport function printTexture(ctx, texture, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var pixelData = readTexture(ctx, texture);\n  PixelData.flipY(pixelData);\n  printTextureImage(pixelData, options);\n}","map":{"version":3,"sources":["../../../src/mol-gl/compute/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { printTextureImage } from '../../mol-gl/renderable/util';\r\nimport { defaults, ValueCell } from '../../mol-util';\r\nimport { ValueSpec, AttributeSpec, UniformSpec } from '../../mol-gl/renderable/schema';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { PixelData } from '../../mol-util/image';\r\nexport var QuadPositions = new Float32Array([\r\n    1.0, 1.0, -1.0, 1.0, -1.0, -1.0,\r\n    -1.0, -1.0, 1.0, -1.0, 1.0, 1.0 // Second triangle\r\n]);\r\nexport var QuadSchema = {\r\n    drawCount: ValueSpec('number'),\r\n    instanceCount: ValueSpec('number'),\r\n    aPosition: AttributeSpec('float32', 2, 0),\r\n    uQuadScale: UniformSpec('v2'),\r\n};\r\nexport var QuadValues = {\r\n    drawCount: ValueCell.create(6),\r\n    instanceCount: ValueCell.create(1),\r\n    aPosition: ValueCell.create(QuadPositions),\r\n    uQuadScale: ValueCell.create(Vec2.create(1, 1)),\r\n};\r\n//\r\nfunction getArrayForTexture(gl, texture, size) {\r\n    switch (texture.type) {\r\n        case gl.UNSIGNED_BYTE: return new Uint8Array(size);\r\n        case gl.FLOAT: return new Float32Array(size);\r\n    }\r\n    throw new Error('unknown/unsupported texture type');\r\n}\r\nexport function readTexture(ctx, texture, width, height) {\r\n    var gl = ctx.gl, resources = ctx.resources;\r\n    width = defaults(width, texture.getWidth());\r\n    height = defaults(height, texture.getHeight());\r\n    var size = width * height * 4;\r\n    var framebuffer = resources.framebuffer();\r\n    var array = getArrayForTexture(gl, texture, size);\r\n    framebuffer.bind();\r\n    texture.attachFramebuffer(framebuffer, 0);\r\n    ctx.readPixels(0, 0, width, height, array);\r\n    return { array: array, width: width, height: height };\r\n}\r\nexport function printTexture(ctx, texture, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var pixelData = readTexture(ctx, texture);\r\n    PixelData.flipY(pixelData);\r\n    printTextureImage(pixelData, options);\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}