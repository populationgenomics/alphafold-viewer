{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { ValueCell } from '../../../mol-util';\nimport { LocationIterator, PositionLocation } from '../../../mol-geo/util/location-iterator';\nimport { createColors } from '../color-data';\nimport { createSizes, getMaxSize } from '../size-data';\nimport { createMarkers } from '../marker-data';\nimport { ColorNames } from '../../../mol-util/color/names';\nimport { Sphere3D } from '../../../mol-math/geometry';\nimport { createTextureImage, calculateInvariantBoundingSphere, calculateTransformBoundingSphere } from '../../../mol-gl/renderable/util';\nimport { Color } from '../../../mol-util/color';\nimport { Vec3, Vec4 } from '../../../mol-math/linear-algebra';\nimport { FontAtlasParams } from './font-atlas';\nimport { clamp } from '../../../mol-math/interpolate';\nimport { BaseGeometry } from '../base';\nimport { createEmptyOverpaint } from '../overpaint-data';\nimport { createEmptyTransparency } from '../transparency-data';\nimport { hashFnv32a } from '../../../mol-data/util';\nimport { createGroupMapping } from '../../util';\nimport { createEmptyClipping } from '../clipping-data';\nexport var Text;\n\n(function (Text) {\n  function create(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) {\n    return text ? update(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) : fromData(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount);\n  }\n\n  Text.create = create;\n\n  function createEmpty(text) {\n    var ft = text ? text.fontTexture.ref.value : createTextureImage(0, 1, Uint8Array);\n    var cb = text ? text.centerBuffer.ref.value : new Float32Array(0);\n    var mb = text ? text.mappingBuffer.ref.value : new Float32Array(0);\n    var db = text ? text.depthBuffer.ref.value : new Float32Array(0);\n    var ib = text ? text.indexBuffer.ref.value : new Uint32Array(0);\n    var gb = text ? text.groupBuffer.ref.value : new Float32Array(0);\n    var tb = text ? text.tcoordBuffer.ref.value : new Float32Array(0);\n    return create(ft, cb, mb, db, ib, gb, tb, 0, text);\n  }\n\n  Text.createEmpty = createEmpty;\n\n  function hashCode(text) {\n    return hashFnv32a([text.charCount, text.fontTexture.ref.version, text.centerBuffer.ref.version, text.mappingBuffer.ref.version, text.depthBuffer.ref.version, text.indexBuffer.ref.version, text.groupBuffer.ref.version, text.tcoordBuffer.ref.version]);\n  }\n\n  function fromData(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount) {\n    var boundingSphere = Sphere3D();\n    var groupMapping;\n    var currentHash = -1;\n    var currentGroup = -1;\n    var text = {\n      kind: 'text',\n      charCount: charCount,\n      fontTexture: ValueCell.create(fontTexture),\n      centerBuffer: ValueCell.create(centers),\n      mappingBuffer: ValueCell.create(mappings),\n      depthBuffer: ValueCell.create(depths),\n      indexBuffer: ValueCell.create(indices),\n      groupBuffer: ValueCell.create(groups),\n      tcoordBuffer: ValueCell.create(tcoords),\n\n      get boundingSphere() {\n        var newHash = hashCode(text);\n\n        if (newHash !== currentHash) {\n          var b = calculateInvariantBoundingSphere(text.centerBuffer.ref.value, text.charCount * 4, 4);\n          Sphere3D.copy(boundingSphere, b);\n          currentHash = newHash;\n        }\n\n        return boundingSphere;\n      },\n\n      get groupMapping() {\n        if (text.groupBuffer.ref.version !== currentGroup) {\n          groupMapping = createGroupMapping(text.groupBuffer.ref.value, text.charCount, 4);\n          currentGroup = text.groupBuffer.ref.version;\n        }\n\n        return groupMapping;\n      },\n\n      setBoundingSphere: function (sphere) {\n        Sphere3D.copy(boundingSphere, sphere);\n        currentHash = hashCode(text);\n      }\n    };\n    return text;\n  }\n\n  function update(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) {\n    text.charCount = charCount;\n    ValueCell.update(text.fontTexture, fontTexture);\n    ValueCell.update(text.centerBuffer, centers);\n    ValueCell.update(text.mappingBuffer, mappings);\n    ValueCell.update(text.depthBuffer, depths);\n    ValueCell.update(text.indexBuffer, indices);\n    ValueCell.update(text.groupBuffer, groups);\n    ValueCell.update(text.tcoordBuffer, tcoords);\n    return text;\n  }\n\n  Text.Params = __assign(__assign(__assign({}, BaseGeometry.Params), FontAtlasParams), {\n    sizeFactor: PD.Numeric(1, {\n      min: 0,\n      max: 10,\n      step: 0.1\n    }),\n    borderWidth: PD.Numeric(0, {\n      min: 0,\n      max: 0.5,\n      step: 0.01\n    }),\n    borderColor: PD.Color(ColorNames.grey),\n    offsetX: PD.Numeric(0, {\n      min: 0,\n      max: 10,\n      step: 0.1\n    }),\n    offsetY: PD.Numeric(0, {\n      min: 0,\n      max: 10,\n      step: 0.1\n    }),\n    offsetZ: PD.Numeric(0, {\n      min: 0,\n      max: 10,\n      step: 0.1\n    }),\n    background: PD.Boolean(false),\n    backgroundMargin: PD.Numeric(0.2, {\n      min: 0,\n      max: 1,\n      step: 0.01\n    }),\n    backgroundColor: PD.Color(ColorNames.grey),\n    backgroundOpacity: PD.Numeric(1, {\n      min: 0,\n      max: 1,\n      step: 0.01\n    }),\n    tether: PD.Boolean(false),\n    tetherLength: PD.Numeric(1, {\n      min: 0,\n      max: 5,\n      step: 0.1\n    }),\n    tetherBaseWidth: PD.Numeric(0.3, {\n      min: 0,\n      max: 1,\n      step: 0.01\n    }),\n    attachment: PD.Select('middle-center', [['bottom-left', 'bottom-left'], ['bottom-center', 'bottom-center'], ['bottom-right', 'bottom-right'], ['middle-left', 'middle-left'], ['middle-center', 'middle-center'], ['middle-right', 'middle-right'], ['top-left', 'top-left'], ['top-center', 'top-center'], ['top-right', 'top-right']])\n  });\n  Text.Utils = {\n    Params: Text.Params,\n    createEmpty: createEmpty,\n    createValues: createValues,\n    createValuesSimple: createValuesSimple,\n    updateValues: updateValues,\n    updateBoundingSphere: updateBoundingSphere,\n    createRenderableState: createRenderableState,\n    updateRenderableState: updateRenderableState,\n    createPositionIterator: createPositionIterator\n  };\n\n  function createPositionIterator(text, transform) {\n    var groupCount = text.charCount * 4;\n    var instanceCount = transform.instanceCount.ref.value;\n    var location = PositionLocation();\n    var p = location.position;\n    var v = text.centerBuffer.ref.value;\n    var m = transform.aTransform.ref.value;\n\n    var getLocation = function (groupIndex, instanceIndex) {\n      if (instanceIndex < 0) {\n        Vec3.fromArray(p, v, groupIndex * 3);\n      } else {\n        Vec3.transformMat4Offset(p, v, m, 0, groupIndex * 3, instanceIndex * 16);\n      }\n\n      return location;\n    };\n\n    return LocationIterator(groupCount, instanceCount, 4, getLocation);\n  }\n\n  function createValues(text, transform, locationIt, theme, props) {\n    var instanceCount = locationIt.instanceCount,\n        groupCount = locationIt.groupCount;\n    var positionIt = createPositionIterator(text, transform);\n    var color = createColors(locationIt, positionIt, theme.color);\n    var size = createSizes(locationIt, theme.size);\n    var marker = createMarkers(instanceCount * groupCount);\n    var overpaint = createEmptyOverpaint();\n    var transparency = createEmptyTransparency();\n    var clipping = createEmptyClipping();\n    var counts = {\n      drawCount: text.charCount * 2 * 3,\n      vertexCount: text.charCount * 4,\n      groupCount: groupCount,\n      instanceCount: instanceCount\n    };\n    var padding = getPadding(text.mappingBuffer.ref.value, text.depthBuffer.ref.value, text.charCount, getMaxSize(size));\n    var invariantBoundingSphere = Sphere3D.expand(Sphere3D(), text.boundingSphere, padding);\n    var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, transform.aTransform.ref.value, instanceCount);\n    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n      aPosition: text.centerBuffer,\n      aMapping: text.mappingBuffer,\n      aDepth: text.depthBuffer,\n      aGroup: text.groupBuffer,\n      elements: text.indexBuffer,\n      boundingSphere: ValueCell.create(boundingSphere),\n      invariantBoundingSphere: ValueCell.create(invariantBoundingSphere),\n      uInvariantBoundingSphere: ValueCell.create(Vec4.ofSphere(invariantBoundingSphere))\n    }, color), size), marker), overpaint), transparency), clipping), transform), {\n      aTexCoord: text.tcoordBuffer,\n      tFont: text.fontTexture,\n      padding: ValueCell.create(padding)\n    }), BaseGeometry.createValues(props, counts)), {\n      uSizeFactor: ValueCell.create(props.sizeFactor),\n      uBorderWidth: ValueCell.create(clamp(props.borderWidth / 2, 0, 0.5)),\n      uBorderColor: ValueCell.create(Color.toArrayNormalized(props.borderColor, Vec3.zero(), 0)),\n      uOffsetX: ValueCell.create(props.offsetX),\n      uOffsetY: ValueCell.create(props.offsetY),\n      uOffsetZ: ValueCell.create(props.offsetZ),\n      uBackgroundColor: ValueCell.create(Color.toArrayNormalized(props.backgroundColor, Vec3.zero(), 0)),\n      uBackgroundOpacity: ValueCell.create(props.backgroundOpacity)\n    });\n  }\n\n  function createValuesSimple(text, props, colorValue, sizeValue, transform) {\n    var s = BaseGeometry.createSimple(colorValue, sizeValue, transform);\n\n    var p = __assign(__assign({}, PD.getDefaultValues(Text.Params)), props);\n\n    return createValues(text, s.transform, s.locationIterator, s.theme, p);\n  }\n\n  function updateValues(values, props) {\n    BaseGeometry.updateValues(values, props);\n    ValueCell.updateIfChanged(values.uSizeFactor, props.sizeFactor);\n    ValueCell.updateIfChanged(values.uBorderWidth, props.borderWidth);\n\n    if (Color.fromNormalizedArray(values.uBorderColor.ref.value, 0) !== props.borderColor) {\n      Color.toArrayNormalized(props.borderColor, values.uBorderColor.ref.value, 0);\n      ValueCell.update(values.uBorderColor, values.uBorderColor.ref.value);\n    }\n\n    ValueCell.updateIfChanged(values.uOffsetX, props.offsetX);\n    ValueCell.updateIfChanged(values.uOffsetY, props.offsetY);\n    ValueCell.updateIfChanged(values.uOffsetZ, props.offsetZ);\n\n    if (Color.fromNormalizedArray(values.uBackgroundColor.ref.value, 0) !== props.backgroundColor) {\n      Color.toArrayNormalized(props.backgroundColor, values.uBackgroundColor.ref.value, 0);\n      ValueCell.update(values.uBackgroundColor, values.uBackgroundColor.ref.value);\n    }\n\n    ValueCell.updateIfChanged(values.uBackgroundOpacity, props.backgroundOpacity);\n  }\n\n  function updateBoundingSphere(values, text) {\n    var padding = getPadding(values.aMapping.ref.value, values.aDepth.ref.value, text.charCount, getMaxSize(values));\n    var invariantBoundingSphere = Sphere3D.expand(Sphere3D(), text.boundingSphere, padding);\n    var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, values.aTransform.ref.value, values.instanceCount.ref.value);\n\n    if (!Sphere3D.equals(boundingSphere, values.boundingSphere.ref.value)) {\n      ValueCell.update(values.boundingSphere, boundingSphere);\n    }\n\n    if (!Sphere3D.equals(invariantBoundingSphere, values.invariantBoundingSphere.ref.value)) {\n      ValueCell.update(values.invariantBoundingSphere, invariantBoundingSphere);\n      ValueCell.update(values.uInvariantBoundingSphere, Vec4.fromSphere(values.uInvariantBoundingSphere.ref.value, invariantBoundingSphere));\n    }\n\n    ValueCell.update(values.padding, padding);\n  }\n\n  function createRenderableState(props) {\n    var state = BaseGeometry.createRenderableState(props);\n    updateRenderableState(state, props);\n    return state;\n  }\n\n  function updateRenderableState(state, props) {\n    BaseGeometry.updateRenderableState(state, props);\n    state.pickable = false;\n    state.opaque = false;\n    state.writeDepth = true;\n  }\n})(Text || (Text = {}));\n\nfunction getPadding(mappings, depths, charCount, maxSize) {\n  var maxOffset = 0;\n  var maxDepth = 0;\n\n  for (var i = 0, il = charCount * 4; i < il; ++i) {\n    var i2 = 2 * i;\n    var ox = Math.abs(mappings[i2]);\n    if (ox > maxOffset) maxOffset = ox;\n    var oy = Math.abs(mappings[i2 + 1]);\n    if (oy > maxOffset) maxOffset = oy;\n    var d = Math.abs(depths[i]);\n    if (d > maxDepth) maxDepth = d;\n  } // console.log(maxDepth + maxSize, maxDepth, maxSize, maxSize + maxSize * maxOffset, depths)\n\n\n  return Math.max(maxDepth, maxSize + maxSize * maxOffset); // return maxSize + maxSize * maxOffset + maxDepth\n}","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/text/text.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAS,SAAT,QAA0B,mBAA1B;AAEA,SAAS,gBAAT,EAA2B,gBAA3B,QAAmD,yCAAnD;AAGA,SAAS,YAAT,QAA6B,eAA7B;AACA,SAAS,WAAT,EAAsB,UAAtB,QAAwC,cAAxC;AACA,SAAS,aAAT,QAA8B,gBAA9B;AACA,SAAS,UAAT,QAA2B,+BAA3B;AACA,SAAS,QAAT,QAAyB,4BAAzB;AACA,SAAuB,kBAAvB,EAA2C,gCAA3C,EAA6E,gCAA7E,QAAqH,iCAArH;AAEA,SAAS,KAAT,QAAsB,yBAAtB;AACA,SAAS,IAAT,EAAe,IAAf,QAA2B,kCAA3B;AACA,SAAS,eAAT,QAAgC,cAAhC;AAEA,SAAS,KAAT,QAAsB,+BAAtB;AAEA,SAAS,YAAT,QAA6B,SAA7B;AACA,SAAS,oBAAT,QAAqC,mBAArC;AACA,SAAS,uBAAT,QAAwC,sBAAxC;AACA,SAAS,UAAT,QAA2B,wBAA3B;AACA,SAAuB,kBAAvB,QAAiD,YAAjD;AACA,SAAS,mBAAT,QAAoC,kBAApC;AAuCA,OAAM,IAAW,IAAX;;AAAN,CAAA,UAAiB,IAAjB,EAAqB;AACjB,WAAgB,MAAhB,CAAuB,WAAvB,EAA8D,OAA9D,EAAqF,QAArF,EAA6G,MAA7G,EAAmI,OAAnI,EAAyJ,MAAzJ,EAA+K,OAA/K,EAAsM,SAAtM,EAAyN,IAAzN,EAAoO;AAChO,WAAO,IAAI,GACP,MAAM,CAAC,WAAD,EAAc,OAAd,EAAuB,QAAvB,EAAiC,MAAjC,EAAyC,OAAzC,EAAkD,MAAlD,EAA0D,OAA1D,EAAmE,SAAnE,EAA8E,IAA9E,CADC,GAEP,QAAQ,CAAC,WAAD,EAAc,OAAd,EAAuB,QAAvB,EAAiC,MAAjC,EAAyC,OAAzC,EAAkD,MAAlD,EAA0D,OAA1D,EAAmE,SAAnE,CAFZ;AAGH;;AAJe,EAAA,IAAA,CAAA,MAAA,GAAM,MAAN;;AAMhB,WAAgB,WAAhB,CAA4B,IAA5B,EAAuC;AACnC,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAAxB,GAAgC,kBAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,UAAP,CAAjE;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAzB,GAAiC,IAAI,YAAJ,CAAiB,CAAjB,CAAhD;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,KAA1B,GAAkC,IAAI,YAAJ,CAAiB,CAAjB,CAAjD;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAAxB,GAAgC,IAAI,YAAJ,CAAiB,CAAjB,CAA/C;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAAxB,GAAgC,IAAI,WAAJ,CAAgB,CAAhB,CAA/C;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAAxB,GAAgC,IAAI,YAAJ,CAAiB,CAAjB,CAA/C;AACA,QAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAzB,GAAiC,IAAI,YAAJ,CAAiB,CAAjB,CAAhD;AACA,WAAO,MAAM,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,EAAgC,IAAhC,CAAb;AACH;;AATe,EAAA,IAAA,CAAA,WAAA,GAAW,WAAX;;AAWhB,WAAS,QAAT,CAAkB,IAAlB,EAA4B;AACxB,WAAO,UAAU,CAAC,CACd,IAAI,CAAC,SADS,EACE,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OADvB,EAEd,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,OAFR,EAEiB,IAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,OAFxC,EAGd,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OAHP,EAGgB,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OAHrC,EAId,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OAJP,EAIgB,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,OAJtC,CAAD,CAAjB;AAMH;;AAED,WAAS,QAAT,CAAkB,WAAlB,EAAyD,OAAzD,EAAgF,QAAhF,EAAwG,MAAxG,EAA8H,OAA9H,EAAoJ,MAApJ,EAA0K,OAA1K,EAAiM,SAAjM,EAAkN;AAE9M,QAAM,cAAc,GAAG,QAAQ,EAA/B;AACA,QAAI,YAAJ;AAEA,QAAI,WAAW,GAAG,CAAC,CAAnB;AACA,QAAI,YAAY,GAAG,CAAC,CAApB;AAEA,QAAM,IAAI,GAAG;AACT,MAAA,IAAI,EAAE,MADG;AAET,MAAA,SAAS,EAAA,SAFA;AAGT,MAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,WAAjB,CAHJ;AAIT,MAAA,YAAY,EAAE,SAAS,CAAC,MAAV,CAAiB,OAAjB,CAJL;AAKT,MAAA,aAAa,EAAE,SAAS,CAAC,MAAV,CAAiB,QAAjB,CALN;AAMT,MAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,MAAjB,CANJ;AAOT,MAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,OAAjB,CAPJ;AAQT,MAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,MAAjB,CARJ;AAST,MAAA,YAAY,EAAE,SAAS,CAAC,MAAV,CAAiB,OAAjB,CATL;;AAUT,UAAI,cAAJ,GAAkB;AACd,YAAM,OAAO,GAAG,QAAQ,CAAC,IAAD,CAAxB;;AACA,YAAI,OAAO,KAAK,WAAhB,EAA6B;AACzB,cAAM,CAAC,GAAG,gCAAgC,CAAC,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAvB,EAA8B,IAAI,CAAC,SAAL,GAAiB,CAA/C,EAAkD,CAAlD,CAA1C;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,cAAd,EAA8B,CAA9B;AACA,UAAA,WAAW,GAAG,OAAd;AACH;;AACD,eAAO,cAAP;AACH,OAlBQ;;AAmBT,UAAI,YAAJ,GAAgB;AACZ,YAAI,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OAArB,KAAiC,YAArC,EAAmD;AAC/C,UAAA,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAAtB,EAA6B,IAAI,CAAC,SAAlC,EAA6C,CAA7C,CAAjC;AACA,UAAA,YAAY,GAAG,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,OAApC;AACH;;AACD,eAAO,YAAP;AACH,OAzBQ;;AA0BT,MAAA,iBAAiB,EAAjB,UAAkB,MAAlB,EAAkC;AAC9B,QAAA,QAAQ,CAAC,IAAT,CAAc,cAAd,EAA8B,MAA9B;AACA,QAAA,WAAW,GAAG,QAAQ,CAAC,IAAD,CAAtB;AACH;AA7BQ,KAAb;AA+BA,WAAO,IAAP;AACH;;AAED,WAAS,MAAT,CAAgB,WAAhB,EAAuD,OAAvD,EAA8E,QAA9E,EAAsG,MAAtG,EAA4H,OAA5H,EAAkJ,MAAlJ,EAAwK,OAAxK,EAA+L,SAA/L,EAAkN,IAAlN,EAA4N;AACxN,IAAA,IAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,WAAtB,EAAmC,WAAnC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,YAAtB,EAAoC,OAApC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,aAAtB,EAAqC,QAArC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,WAAtB,EAAmC,MAAnC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,WAAtB,EAAmC,OAAnC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,WAAtB,EAAmC,MAAnC;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,YAAtB,EAAoC,OAApC;AACA,WAAO,IAAP;AACH;;AAEY,EAAA,IAAA,CAAA,MAAA,GAAM,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACZ,YAAY,CAAC,MADD,CAAA,EAEZ,eAFY,CAAA,EAEG;AAClB,IAAA,UAAU,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,EAAf;AAAmB,MAAA,IAAI,EAAE;AAAzB,KAAd,CADM;AAGlB,IAAA,WAAW,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,GAAf;AAAoB,MAAA,IAAI,EAAE;AAA1B,KAAd,CAHK;AAIlB,IAAA,WAAW,EAAE,EAAE,CAAC,KAAH,CAAS,UAAU,CAAC,IAApB,CAJK;AAKlB,IAAA,OAAO,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,EAAf;AAAmB,MAAA,IAAI,EAAE;AAAzB,KAAd,CALS;AAMlB,IAAA,OAAO,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,EAAf;AAAmB,MAAA,IAAI,EAAE;AAAzB,KAAd,CANS;AAOlB,IAAA,OAAO,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,EAAf;AAAmB,MAAA,IAAI,EAAE;AAAzB,KAAd,CAPS;AAQlB,IAAA,UAAU,EAAE,EAAE,CAAC,OAAH,CAAW,KAAX,CARM;AASlB,IAAA,gBAAgB,EAAE,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,CAAf;AAAkB,MAAA,IAAI,EAAE;AAAxB,KAAhB,CATA;AAUlB,IAAA,eAAe,EAAE,EAAE,CAAC,KAAH,CAAS,UAAU,CAAC,IAApB,CAVC;AAWlB,IAAA,iBAAiB,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,CAAf;AAAkB,MAAA,IAAI,EAAE;AAAxB,KAAd,CAXD;AAYlB,IAAA,MAAM,EAAE,EAAE,CAAC,OAAH,CAAW,KAAX,CAZU;AAalB,IAAA,YAAY,EAAE,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,CAAf;AAAkB,MAAA,IAAI,EAAE;AAAxB,KAAd,CAbI;AAclB,IAAA,eAAe,EAAE,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB;AAAE,MAAA,GAAG,EAAE,CAAP;AAAU,MAAA,GAAG,EAAE,CAAf;AAAkB,MAAA,IAAI,EAAE;AAAxB,KAAhB,CAdC;AAgBlB,IAAA,UAAU,EAAE,EAAE,CAAC,MAAH,CAAU,eAAV,EAA2B,CACnC,CAAC,aAAD,EAAgB,aAAhB,CADmC,EACH,CAAC,eAAD,EAAkB,eAAlB,CADG,EACiC,CAAC,cAAD,EAAiB,cAAjB,CADjC,EAEnC,CAAC,aAAD,EAAgB,aAAhB,CAFmC,EAEH,CAAC,eAAD,EAAkB,eAAlB,CAFG,EAEiC,CAAC,cAAD,EAAiB,cAAjB,CAFjC,EAGnC,CAAC,UAAD,EAAa,UAAb,CAHmC,EAGT,CAAC,YAAD,EAAe,YAAf,CAHS,EAGqB,CAAC,WAAD,EAAc,WAAd,CAHrB,CAA3B;AAhBM,GAFH,CAAN;AA0BA,EAAA,IAAA,CAAA,KAAA,GAAqC;AAC9C,IAAA,MAAM,EAAA,IAAA,CAAA,MADwC;AAE9C,IAAA,WAAW,EAAA,WAFmC;AAG9C,IAAA,YAAY,EAAA,YAHkC;AAI9C,IAAA,kBAAkB,EAAA,kBAJ4B;AAK9C,IAAA,YAAY,EAAA,YALkC;AAM9C,IAAA,oBAAoB,EAAA,oBAN0B;AAO9C,IAAA,qBAAqB,EAAA,qBAPyB;AAQ9C,IAAA,qBAAqB,EAAA,qBARyB;AAS9C,IAAA,sBAAsB,EAAA;AATwB,GAArC;;AAYb,WAAS,sBAAT,CAAgC,IAAhC,EAA4C,SAA5C,EAAoE;AAChE,QAAM,UAAU,GAAG,IAAI,CAAC,SAAL,GAAiB,CAApC;AACA,QAAM,aAAa,GAAG,SAAS,CAAC,aAAV,CAAwB,GAAxB,CAA4B,KAAlD;AACA,QAAM,QAAQ,GAAG,gBAAgB,EAAjC;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,QAAnB;AACA,QAAM,CAAC,GAAG,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAhC;AACA,QAAM,CAAC,GAAG,SAAS,CAAC,UAAV,CAAqB,GAArB,CAAyB,KAAnC;;AACA,QAAM,WAAW,GAAG,UAAC,UAAD,EAAqB,aAArB,EAA0C;AAC1D,UAAI,aAAa,GAAG,CAApB,EAAuB;AACnB,QAAA,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,UAAU,GAAG,CAAlC;AACH,OAFD,MAEO;AACH,QAAA,IAAI,CAAC,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,UAAU,GAAG,CAAlD,EAAqD,aAAa,GAAG,EAArE;AACH;;AACD,aAAO,QAAP;AACH,KAPD;;AAQA,WAAO,gBAAgB,CAAC,UAAD,EAAa,aAAb,EAA4B,CAA5B,EAA+B,WAA/B,CAAvB;AACH;;AAED,WAAS,YAAT,CAAsB,IAAtB,EAAkC,SAAlC,EAA4D,UAA5D,EAA0F,KAA1F,EAAwG,KAAxG,EAAgI;AACpH,QAAA,aAAa,GAAiB,UAAU,CAA3B,aAAb;AAAA,QAAe,UAAU,GAAK,UAAU,CAAf,UAAzB;AACR,QAAM,UAAU,GAAG,sBAAsB,CAAC,IAAD,EAAO,SAAP,CAAzC;AAEA,QAAM,KAAK,GAAG,YAAY,CAAC,UAAD,EAAa,UAAb,EAAyB,KAAK,CAAC,KAA/B,CAA1B;AACA,QAAM,IAAI,GAAG,WAAW,CAAC,UAAD,EAAa,KAAK,CAAC,IAAnB,CAAxB;AACA,QAAM,MAAM,GAAG,aAAa,CAAC,aAAa,GAAG,UAAjB,CAA5B;AACA,QAAM,SAAS,GAAG,oBAAoB,EAAtC;AACA,QAAM,YAAY,GAAG,uBAAuB,EAA5C;AACA,QAAM,QAAQ,GAAG,mBAAmB,EAApC;AAEA,QAAM,MAAM,GAAG;AAAE,MAAA,SAAS,EAAE,IAAI,CAAC,SAAL,GAAiB,CAAjB,GAAqB,CAAlC;AAAqC,MAAA,WAAW,EAAE,IAAI,CAAC,SAAL,GAAiB,CAAnE;AAAsE,MAAA,UAAU,EAAA,UAAhF;AAAkF,MAAA,aAAa,EAAA;AAA/F,KAAf;AAEA,QAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,KAAxB,EAA+B,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,KAApD,EAA2D,IAAI,CAAC,SAAhE,EAA2E,UAAU,CAAC,IAAD,CAArF,CAA1B;AACA,QAAM,uBAAuB,GAAG,QAAQ,CAAC,MAAT,CAAgB,QAAQ,EAAxB,EAA4B,IAAI,CAAC,cAAjC,EAAiD,OAAjD,CAAhC;AACA,QAAM,cAAc,GAAG,gCAAgC,CAAC,uBAAD,EAA0B,SAAS,CAAC,UAAV,CAAqB,GAArB,CAAyB,KAAnD,EAA0D,aAA1D,CAAvD;AAEA,WAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA;AACI,MAAA,SAAS,EAAE,IAAI,CAAC,YADpB;AAEI,MAAA,QAAQ,EAAE,IAAI,CAAC,aAFnB;AAGI,MAAA,MAAM,EAAE,IAAI,CAAC,WAHjB;AAII,MAAA,MAAM,EAAE,IAAI,CAAC,WAJjB;AAKI,MAAA,QAAQ,EAAE,IAAI,CAAC,WALnB;AAMI,MAAA,cAAc,EAAE,SAAS,CAAC,MAAV,CAAiB,cAAjB,CANpB;AAOI,MAAA,uBAAuB,EAAE,SAAS,CAAC,MAAV,CAAiB,uBAAjB,CAP7B;AAQI,MAAA,wBAAwB,EAAE,SAAS,CAAC,MAAV,CAAiB,IAAI,CAAC,QAAL,CAAc,uBAAd,CAAjB;AAR9B,KAAA,EASO,KATP,CAAA,EAUO,IAVP,CAAA,EAWO,MAXP,CAAA,EAYO,SAZP,CAAA,EAaO,YAbP,CAAA,EAcO,QAdP,CAAA,EAeO,SAfP,CAAA,EAegB;AAEZ,MAAA,SAAS,EAAE,IAAI,CAAC,YAFJ;AAGZ,MAAA,KAAK,EAAE,IAAI,CAAC,WAHA;AAIZ,MAAA,OAAO,EAAE,SAAS,CAAC,MAAV,CAAiB,OAAjB;AAJG,KAfhB,CAAA,EAqBO,YAAY,CAAC,YAAb,CAA0B,KAA1B,EAAiC,MAAjC,CArBP,CAAA,EAqB+C;AAC3C,MAAA,WAAW,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,UAAvB,CAD8B;AAG3C,MAAA,YAAY,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,KAAK,CAAC,WAAN,GAAoB,CAArB,EAAwB,CAAxB,EAA2B,GAA3B,CAAtB,CAH6B;AAI3C,MAAA,YAAY,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,iBAAN,CAAwB,KAAK,CAAC,WAA9B,EAA2C,IAAI,CAAC,IAAL,EAA3C,EAAwD,CAAxD,CAAjB,CAJ6B;AAK3C,MAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,OAAvB,CALiC;AAM3C,MAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,OAAvB,CANiC;AAO3C,MAAA,QAAQ,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,OAAvB,CAPiC;AAQ3C,MAAA,gBAAgB,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,iBAAN,CAAwB,KAAK,CAAC,eAA9B,EAA+C,IAAI,CAAC,IAAL,EAA/C,EAA4D,CAA5D,CAAjB,CARyB;AAS3C,MAAA,kBAAkB,EAAE,SAAS,CAAC,MAAV,CAAiB,KAAK,CAAC,iBAAvB;AATuB,KArB/C,CAAA;AAgCH;;AAED,WAAS,kBAAT,CAA4B,IAA5B,EAAwC,KAAxC,EAA2E,UAA3E,EAA8F,SAA9F,EAAiH,SAAjH,EAA0I;AACtI,QAAM,CAAC,GAAG,YAAY,CAAC,YAAb,CAA0B,UAA1B,EAAsC,SAAtC,EAAiD,SAAjD,CAAV;;AACA,QAAM,CAAC,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,EAAE,CAAC,gBAAH,CAAoB,IAAA,CAAA,MAApB,CAAR,CAAA,EAAwC,KAAxC,CAAP;;AACA,WAAO,YAAY,CAAC,IAAD,EAAO,CAAC,CAAC,SAAT,EAAoB,CAAC,CAAC,gBAAtB,EAAwC,CAAC,CAAC,KAA1C,EAAiD,CAAjD,CAAnB;AACH;;AAED,WAAS,YAAT,CAAsB,MAAtB,EAA0C,KAA1C,EAAkE;AAC9D,IAAA,YAAY,CAAC,YAAb,CAA0B,MAA1B,EAAkC,KAAlC;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,WAAjC,EAA8C,KAAK,CAAC,UAApD;AAEA,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,YAAjC,EAA+C,KAAK,CAAC,WAArD;;AACA,QAAI,KAAK,CAAC,mBAAN,CAA0B,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAwB,KAAlD,EAAyD,CAAzD,MAAgE,KAAK,CAAC,WAA1E,EAAuF;AACnF,MAAA,KAAK,CAAC,iBAAN,CAAwB,KAAK,CAAC,WAA9B,EAA2C,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAwB,KAAnE,EAA0E,CAA1E;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,YAAxB,EAAsC,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAwB,KAA9D;AACH;;AACD,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,QAAjC,EAA2C,KAAK,CAAC,OAAjD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,QAAjC,EAA2C,KAAK,CAAC,OAAjD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,QAAjC,EAA2C,KAAK,CAAC,OAAjD;;AACA,QAAI,KAAK,CAAC,mBAAN,CAA0B,MAAM,CAAC,gBAAP,CAAwB,GAAxB,CAA4B,KAAtD,EAA6D,CAA7D,MAAoE,KAAK,CAAC,eAA9E,EAA+F;AAC3F,MAAA,KAAK,CAAC,iBAAN,CAAwB,KAAK,CAAC,eAA9B,EAA+C,MAAM,CAAC,gBAAP,CAAwB,GAAxB,CAA4B,KAA3E,EAAkF,CAAlF;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,gBAAxB,EAA0C,MAAM,CAAC,gBAAP,CAAwB,GAAxB,CAA4B,KAAtE;AACH;;AACD,IAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,kBAAjC,EAAqD,KAAK,CAAC,iBAA3D;AACH;;AAED,WAAS,oBAAT,CAA8B,MAA9B,EAAkD,IAAlD,EAA4D;AACxD,QAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAoB,KAArB,EAA4B,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAA9C,EAAqD,IAAI,CAAC,SAA1D,EAAqE,UAAU,CAAC,MAAD,CAA/E,CAA1B;AACA,QAAM,uBAAuB,GAAG,QAAQ,CAAC,MAAT,CAAgB,QAAQ,EAAxB,EAA4B,IAAI,CAAC,cAAjC,EAAiD,OAAjD,CAAhC;AACA,QAAM,cAAc,GAAG,gCAAgC,CAAC,uBAAD,EAA0B,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAAhD,EAAuD,MAAM,CAAC,aAAP,CAAqB,GAArB,CAAyB,KAAhF,CAAvD;;AAEA,QAAI,CAAC,QAAQ,CAAC,MAAT,CAAgB,cAAhB,EAAgC,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAA1D,CAAL,EAAuE;AACnE,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,cAAxB,EAAwC,cAAxC;AACH;;AACD,QAAI,CAAC,QAAQ,CAAC,MAAT,CAAgB,uBAAhB,EAAyC,MAAM,CAAC,uBAAP,CAA+B,GAA/B,CAAmC,KAA5E,CAAL,EAAyF;AACrF,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,uBAAxB,EAAiD,uBAAjD;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,wBAAxB,EAAkD,IAAI,CAAC,UAAL,CAAgB,MAAM,CAAC,wBAAP,CAAgC,GAAhC,CAAoC,KAApD,EAA2D,uBAA3D,CAAlD;AACH;;AACD,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,OAAxB,EAAiC,OAAjC;AACH;;AAED,WAAS,qBAAT,CAA+B,KAA/B,EAAuD;AACnD,QAAM,KAAK,GAAG,YAAY,CAAC,qBAAb,CAAmC,KAAnC,CAAd;AACA,IAAA,qBAAqB,CAAC,KAAD,EAAQ,KAAR,CAArB;AACA,WAAO,KAAP;AACH;;AAED,WAAS,qBAAT,CAA+B,KAA/B,EAAuD,KAAvD,EAA+E;AAC3E,IAAA,YAAY,CAAC,qBAAb,CAAmC,KAAnC,EAA0C,KAA1C;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB,KAAjB;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,KAAf;AACA,IAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB;AACH;AACJ,CAhPD,EAAiB,IAAI,KAAJ,IAAI,GAAA,EAAA,CAArB;;AAkPA,SAAS,UAAT,CAAoB,QAApB,EAA4C,MAA5C,EAAkE,SAAlE,EAAqF,OAArF,EAAoG;AAChG,MAAI,SAAS,GAAG,CAAhB;AACA,MAAI,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,GAAG,CAAjC,EAAoC,CAAC,GAAG,EAAxC,EAA4C,EAAE,CAA9C,EAAiD;AAC7C,QAAM,EAAE,GAAG,IAAI,CAAf;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,EAAD,CAAjB,CAAX;AACA,QAAI,EAAE,GAAG,SAAT,EAAoB,SAAS,GAAG,EAAZ;AACpB,QAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,EAAE,GAAG,CAAN,CAAjB,CAAX;AACA,QAAI,EAAE,GAAG,SAAT,EAAoB,SAAS,GAAG,EAAZ;AACpB,QAAM,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,CAAD,CAAf,CAAV;AACA,QAAI,CAAC,GAAG,QAAR,EAAkB,QAAQ,GAAG,CAAX;AACrB,GAX+F,CAYhG;;;AACA,SAAO,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,OAAO,GAAG,OAAO,GAAG,SAAvC,CAAP,CAbgG,CAchG;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { LocationIterator, PositionLocation } from '../../../mol-geo/util/location-iterator';\r\nimport { createColors } from '../color-data';\r\nimport { createSizes, getMaxSize } from '../size-data';\r\nimport { createMarkers } from '../marker-data';\r\nimport { ColorNames } from '../../../mol-util/color/names';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nimport { createTextureImage, calculateInvariantBoundingSphere, calculateTransformBoundingSphere } from '../../../mol-gl/renderable/util';\r\nimport { Color } from '../../../mol-util/color';\r\nimport { Vec3, Vec4 } from '../../../mol-math/linear-algebra';\r\nimport { FontAtlasParams } from './font-atlas';\r\nimport { clamp } from '../../../mol-math/interpolate';\r\nimport { BaseGeometry } from '../base';\r\nimport { createEmptyOverpaint } from '../overpaint-data';\r\nimport { createEmptyTransparency } from '../transparency-data';\r\nimport { hashFnv32a } from '../../../mol-data/util';\r\nimport { createGroupMapping } from '../../util';\r\nimport { createEmptyClipping } from '../clipping-data';\r\nexport var Text;\r\n(function (Text) {\r\n    function create(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) {\r\n        return text ?\r\n            update(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) :\r\n            fromData(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount);\r\n    }\r\n    Text.create = create;\r\n    function createEmpty(text) {\r\n        var ft = text ? text.fontTexture.ref.value : createTextureImage(0, 1, Uint8Array);\r\n        var cb = text ? text.centerBuffer.ref.value : new Float32Array(0);\r\n        var mb = text ? text.mappingBuffer.ref.value : new Float32Array(0);\r\n        var db = text ? text.depthBuffer.ref.value : new Float32Array(0);\r\n        var ib = text ? text.indexBuffer.ref.value : new Uint32Array(0);\r\n        var gb = text ? text.groupBuffer.ref.value : new Float32Array(0);\r\n        var tb = text ? text.tcoordBuffer.ref.value : new Float32Array(0);\r\n        return create(ft, cb, mb, db, ib, gb, tb, 0, text);\r\n    }\r\n    Text.createEmpty = createEmpty;\r\n    function hashCode(text) {\r\n        return hashFnv32a([\r\n            text.charCount, text.fontTexture.ref.version,\r\n            text.centerBuffer.ref.version, text.mappingBuffer.ref.version,\r\n            text.depthBuffer.ref.version, text.indexBuffer.ref.version,\r\n            text.groupBuffer.ref.version, text.tcoordBuffer.ref.version\r\n        ]);\r\n    }\r\n    function fromData(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount) {\r\n        var boundingSphere = Sphere3D();\r\n        var groupMapping;\r\n        var currentHash = -1;\r\n        var currentGroup = -1;\r\n        var text = {\r\n            kind: 'text',\r\n            charCount: charCount,\r\n            fontTexture: ValueCell.create(fontTexture),\r\n            centerBuffer: ValueCell.create(centers),\r\n            mappingBuffer: ValueCell.create(mappings),\r\n            depthBuffer: ValueCell.create(depths),\r\n            indexBuffer: ValueCell.create(indices),\r\n            groupBuffer: ValueCell.create(groups),\r\n            tcoordBuffer: ValueCell.create(tcoords),\r\n            get boundingSphere() {\r\n                var newHash = hashCode(text);\r\n                if (newHash !== currentHash) {\r\n                    var b = calculateInvariantBoundingSphere(text.centerBuffer.ref.value, text.charCount * 4, 4);\r\n                    Sphere3D.copy(boundingSphere, b);\r\n                    currentHash = newHash;\r\n                }\r\n                return boundingSphere;\r\n            },\r\n            get groupMapping() {\r\n                if (text.groupBuffer.ref.version !== currentGroup) {\r\n                    groupMapping = createGroupMapping(text.groupBuffer.ref.value, text.charCount, 4);\r\n                    currentGroup = text.groupBuffer.ref.version;\r\n                }\r\n                return groupMapping;\r\n            },\r\n            setBoundingSphere: function (sphere) {\r\n                Sphere3D.copy(boundingSphere, sphere);\r\n                currentHash = hashCode(text);\r\n            }\r\n        };\r\n        return text;\r\n    }\r\n    function update(fontTexture, centers, mappings, depths, indices, groups, tcoords, charCount, text) {\r\n        text.charCount = charCount;\r\n        ValueCell.update(text.fontTexture, fontTexture);\r\n        ValueCell.update(text.centerBuffer, centers);\r\n        ValueCell.update(text.mappingBuffer, mappings);\r\n        ValueCell.update(text.depthBuffer, depths);\r\n        ValueCell.update(text.indexBuffer, indices);\r\n        ValueCell.update(text.groupBuffer, groups);\r\n        ValueCell.update(text.tcoordBuffer, tcoords);\r\n        return text;\r\n    }\r\n    Text.Params = __assign(__assign(__assign({}, BaseGeometry.Params), FontAtlasParams), { sizeFactor: PD.Numeric(1, { min: 0, max: 10, step: 0.1 }), borderWidth: PD.Numeric(0, { min: 0, max: 0.5, step: 0.01 }), borderColor: PD.Color(ColorNames.grey), offsetX: PD.Numeric(0, { min: 0, max: 10, step: 0.1 }), offsetY: PD.Numeric(0, { min: 0, max: 10, step: 0.1 }), offsetZ: PD.Numeric(0, { min: 0, max: 10, step: 0.1 }), background: PD.Boolean(false), backgroundMargin: PD.Numeric(0.2, { min: 0, max: 1, step: 0.01 }), backgroundColor: PD.Color(ColorNames.grey), backgroundOpacity: PD.Numeric(1, { min: 0, max: 1, step: 0.01 }), tether: PD.Boolean(false), tetherLength: PD.Numeric(1, { min: 0, max: 5, step: 0.1 }), tetherBaseWidth: PD.Numeric(0.3, { min: 0, max: 1, step: 0.01 }), attachment: PD.Select('middle-center', [\r\n            ['bottom-left', 'bottom-left'], ['bottom-center', 'bottom-center'], ['bottom-right', 'bottom-right'],\r\n            ['middle-left', 'middle-left'], ['middle-center', 'middle-center'], ['middle-right', 'middle-right'],\r\n            ['top-left', 'top-left'], ['top-center', 'top-center'], ['top-right', 'top-right'],\r\n        ]) });\r\n    Text.Utils = {\r\n        Params: Text.Params,\r\n        createEmpty: createEmpty,\r\n        createValues: createValues,\r\n        createValuesSimple: createValuesSimple,\r\n        updateValues: updateValues,\r\n        updateBoundingSphere: updateBoundingSphere,\r\n        createRenderableState: createRenderableState,\r\n        updateRenderableState: updateRenderableState,\r\n        createPositionIterator: createPositionIterator\r\n    };\r\n    function createPositionIterator(text, transform) {\r\n        var groupCount = text.charCount * 4;\r\n        var instanceCount = transform.instanceCount.ref.value;\r\n        var location = PositionLocation();\r\n        var p = location.position;\r\n        var v = text.centerBuffer.ref.value;\r\n        var m = transform.aTransform.ref.value;\r\n        var getLocation = function (groupIndex, instanceIndex) {\r\n            if (instanceIndex < 0) {\r\n                Vec3.fromArray(p, v, groupIndex * 3);\r\n            }\r\n            else {\r\n                Vec3.transformMat4Offset(p, v, m, 0, groupIndex * 3, instanceIndex * 16);\r\n            }\r\n            return location;\r\n        };\r\n        return LocationIterator(groupCount, instanceCount, 4, getLocation);\r\n    }\r\n    function createValues(text, transform, locationIt, theme, props) {\r\n        var instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;\r\n        var positionIt = createPositionIterator(text, transform);\r\n        var color = createColors(locationIt, positionIt, theme.color);\r\n        var size = createSizes(locationIt, theme.size);\r\n        var marker = createMarkers(instanceCount * groupCount);\r\n        var overpaint = createEmptyOverpaint();\r\n        var transparency = createEmptyTransparency();\r\n        var clipping = createEmptyClipping();\r\n        var counts = { drawCount: text.charCount * 2 * 3, vertexCount: text.charCount * 4, groupCount: groupCount, instanceCount: instanceCount };\r\n        var padding = getPadding(text.mappingBuffer.ref.value, text.depthBuffer.ref.value, text.charCount, getMaxSize(size));\r\n        var invariantBoundingSphere = Sphere3D.expand(Sphere3D(), text.boundingSphere, padding);\r\n        var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, transform.aTransform.ref.value, instanceCount);\r\n        return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ aPosition: text.centerBuffer, aMapping: text.mappingBuffer, aDepth: text.depthBuffer, aGroup: text.groupBuffer, elements: text.indexBuffer, boundingSphere: ValueCell.create(boundingSphere), invariantBoundingSphere: ValueCell.create(invariantBoundingSphere), uInvariantBoundingSphere: ValueCell.create(Vec4.ofSphere(invariantBoundingSphere)) }, color), size), marker), overpaint), transparency), clipping), transform), { aTexCoord: text.tcoordBuffer, tFont: text.fontTexture, padding: ValueCell.create(padding) }), BaseGeometry.createValues(props, counts)), { uSizeFactor: ValueCell.create(props.sizeFactor), uBorderWidth: ValueCell.create(clamp(props.borderWidth / 2, 0, 0.5)), uBorderColor: ValueCell.create(Color.toArrayNormalized(props.borderColor, Vec3.zero(), 0)), uOffsetX: ValueCell.create(props.offsetX), uOffsetY: ValueCell.create(props.offsetY), uOffsetZ: ValueCell.create(props.offsetZ), uBackgroundColor: ValueCell.create(Color.toArrayNormalized(props.backgroundColor, Vec3.zero(), 0)), uBackgroundOpacity: ValueCell.create(props.backgroundOpacity) });\r\n    }\r\n    function createValuesSimple(text, props, colorValue, sizeValue, transform) {\r\n        var s = BaseGeometry.createSimple(colorValue, sizeValue, transform);\r\n        var p = __assign(__assign({}, PD.getDefaultValues(Text.Params)), props);\r\n        return createValues(text, s.transform, s.locationIterator, s.theme, p);\r\n    }\r\n    function updateValues(values, props) {\r\n        BaseGeometry.updateValues(values, props);\r\n        ValueCell.updateIfChanged(values.uSizeFactor, props.sizeFactor);\r\n        ValueCell.updateIfChanged(values.uBorderWidth, props.borderWidth);\r\n        if (Color.fromNormalizedArray(values.uBorderColor.ref.value, 0) !== props.borderColor) {\r\n            Color.toArrayNormalized(props.borderColor, values.uBorderColor.ref.value, 0);\r\n            ValueCell.update(values.uBorderColor, values.uBorderColor.ref.value);\r\n        }\r\n        ValueCell.updateIfChanged(values.uOffsetX, props.offsetX);\r\n        ValueCell.updateIfChanged(values.uOffsetY, props.offsetY);\r\n        ValueCell.updateIfChanged(values.uOffsetZ, props.offsetZ);\r\n        if (Color.fromNormalizedArray(values.uBackgroundColor.ref.value, 0) !== props.backgroundColor) {\r\n            Color.toArrayNormalized(props.backgroundColor, values.uBackgroundColor.ref.value, 0);\r\n            ValueCell.update(values.uBackgroundColor, values.uBackgroundColor.ref.value);\r\n        }\r\n        ValueCell.updateIfChanged(values.uBackgroundOpacity, props.backgroundOpacity);\r\n    }\r\n    function updateBoundingSphere(values, text) {\r\n        var padding = getPadding(values.aMapping.ref.value, values.aDepth.ref.value, text.charCount, getMaxSize(values));\r\n        var invariantBoundingSphere = Sphere3D.expand(Sphere3D(), text.boundingSphere, padding);\r\n        var boundingSphere = calculateTransformBoundingSphere(invariantBoundingSphere, values.aTransform.ref.value, values.instanceCount.ref.value);\r\n        if (!Sphere3D.equals(boundingSphere, values.boundingSphere.ref.value)) {\r\n            ValueCell.update(values.boundingSphere, boundingSphere);\r\n        }\r\n        if (!Sphere3D.equals(invariantBoundingSphere, values.invariantBoundingSphere.ref.value)) {\r\n            ValueCell.update(values.invariantBoundingSphere, invariantBoundingSphere);\r\n            ValueCell.update(values.uInvariantBoundingSphere, Vec4.fromSphere(values.uInvariantBoundingSphere.ref.value, invariantBoundingSphere));\r\n        }\r\n        ValueCell.update(values.padding, padding);\r\n    }\r\n    function createRenderableState(props) {\r\n        var state = BaseGeometry.createRenderableState(props);\r\n        updateRenderableState(state, props);\r\n        return state;\r\n    }\r\n    function updateRenderableState(state, props) {\r\n        BaseGeometry.updateRenderableState(state, props);\r\n        state.pickable = false;\r\n        state.opaque = false;\r\n        state.writeDepth = true;\r\n    }\r\n})(Text || (Text = {}));\r\nfunction getPadding(mappings, depths, charCount, maxSize) {\r\n    var maxOffset = 0;\r\n    var maxDepth = 0;\r\n    for (var i = 0, il = charCount * 4; i < il; ++i) {\r\n        var i2 = 2 * i;\r\n        var ox = Math.abs(mappings[i2]);\r\n        if (ox > maxOffset)\r\n            maxOffset = ox;\r\n        var oy = Math.abs(mappings[i2 + 1]);\r\n        if (oy > maxOffset)\r\n            maxOffset = oy;\r\n        var d = Math.abs(depths[i]);\r\n        if (d > maxDepth)\r\n            maxDepth = d;\r\n    }\r\n    // console.log(maxDepth + maxSize, maxDepth, maxSize, maxSize + maxSize * maxOffset, depths)\r\n    return Math.max(maxDepth, maxSize + maxSize * maxOffset);\r\n    // return maxSize + maxSize * maxOffset + maxDepth\r\n}\r\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}