{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ValueCell } from '../../mol-util';\nimport { idFactory } from '../../mol-util/id-factory';\nimport { isWebGL2 } from './compat';\nvar getNextTextureId = idFactory();\nexport function getTarget(gl, kind) {\n  switch (kind) {\n    case 'image-uint8':\n      return gl.TEXTURE_2D;\n\n    case 'image-float32':\n      return gl.TEXTURE_2D;\n\n    case 'image-float16':\n      return gl.TEXTURE_2D;\n\n    case 'image-depth':\n      return gl.TEXTURE_2D;\n  }\n\n  if (isWebGL2(gl)) {\n    switch (kind) {\n      case 'image-int32':\n        return gl.TEXTURE_2D;\n\n      case 'volume-uint8':\n        return gl.TEXTURE_3D;\n\n      case 'volume-float32':\n        return gl.TEXTURE_3D;\n\n      case 'volume-float16':\n        return gl.TEXTURE_3D;\n    }\n  }\n\n  throw new Error(\"unknown texture kind '\" + kind + \"'\");\n}\nexport function getFormat(gl, format, type) {\n  switch (format) {\n    case 'alpha':\n      if (isWebGL2(gl) && type === 'float') return gl.RED;else if (isWebGL2(gl) && type === 'int') return gl.RED_INTEGER;else return gl.ALPHA;\n\n    case 'rgb':\n      if (isWebGL2(gl) && type === 'int') return gl.RGB_INTEGER;\n      return gl.RGB;\n\n    case 'rgba':\n      if (isWebGL2(gl) && type === 'int') return gl.RGBA_INTEGER;\n      return gl.RGBA;\n\n    case 'depth':\n      return gl.DEPTH_COMPONENT;\n  }\n}\nexport function getInternalFormat(gl, format, type) {\n  if (isWebGL2(gl)) {\n    switch (format) {\n      case 'alpha':\n        switch (type) {\n          case 'ubyte':\n            return gl.ALPHA;\n\n          case 'float':\n            return gl.R32F;\n\n          case 'fp16':\n            return gl.R16F;\n\n          case 'int':\n            return gl.R32I;\n        }\n\n      case 'rgb':\n        switch (type) {\n          case 'ubyte':\n            return gl.RGB;\n\n          case 'float':\n            return gl.RGB32F;\n\n          case 'fp16':\n            return gl.RGB16F;\n\n          case 'int':\n            return gl.RGB32I;\n        }\n\n      case 'rgba':\n        switch (type) {\n          case 'ubyte':\n            return gl.RGBA;\n\n          case 'float':\n            return gl.RGBA32F;\n\n          case 'fp16':\n            return gl.RGBA16F;\n\n          case 'int':\n            return gl.RGBA32I;\n        }\n\n      case 'depth':\n        switch (type) {\n          case 'ushort':\n            return gl.DEPTH_COMPONENT16;\n\n          case 'float':\n            return gl.DEPTH_COMPONENT32F;\n        }\n\n    }\n  }\n\n  return getFormat(gl, format, type);\n}\n\nfunction getByteCount(format, type, width, height, depth) {\n  var bpe = getFormatSize(format) * getTypeSize(type);\n  return bpe * width * height * (depth || 1);\n}\n\nfunction getFormatSize(format) {\n  switch (format) {\n    case 'alpha':\n      return 1;\n\n    case 'rgb':\n      return 3;\n\n    case 'rgba':\n      return 4;\n\n    case 'depth':\n      return 4;\n  }\n}\n\nfunction getTypeSize(type) {\n  switch (type) {\n    case 'ubyte':\n      return 1;\n\n    case 'ushort':\n      return 2;\n\n    case 'float':\n      return 4;\n\n    case 'fp16':\n      return 2;\n\n    case 'int':\n      return 4;\n  }\n}\n\nexport function getType(gl, extensions, type) {\n  switch (type) {\n    case 'ubyte':\n      return gl.UNSIGNED_BYTE;\n\n    case 'ushort':\n      return gl.UNSIGNED_SHORT;\n\n    case 'float':\n      return gl.FLOAT;\n\n    case 'fp16':\n      if (extensions.textureHalfFloat) return extensions.textureHalfFloat.HALF_FLOAT;else throw new Error('extension \"texture_half_float\" unavailable');\n\n    case 'int':\n      if (isWebGL2(gl)) return gl.INT;else throw new Error('texture type \"int\" requires webgl2');\n  }\n}\nexport function getFilter(gl, type) {\n  switch (type) {\n    case 'nearest':\n      return gl.NEAREST;\n\n    case 'linear':\n      return gl.LINEAR;\n  }\n}\nexport function getAttachment(gl, extensions, attachment) {\n  switch (attachment) {\n    case 'depth':\n      return gl.DEPTH_ATTACHMENT;\n\n    case 'stencil':\n      return gl.STENCIL_ATTACHMENT;\n\n    case 'color0':\n    case 0:\n      return gl.COLOR_ATTACHMENT0;\n  }\n\n  if (extensions.drawBuffers) {\n    switch (attachment) {\n      case 'color1':\n      case 1:\n        return extensions.drawBuffers.COLOR_ATTACHMENT1;\n\n      case 'color2':\n      case 2:\n        return extensions.drawBuffers.COLOR_ATTACHMENT2;\n\n      case 'color3':\n      case 3:\n        return extensions.drawBuffers.COLOR_ATTACHMENT3;\n\n      case 'color4':\n      case 4:\n        return extensions.drawBuffers.COLOR_ATTACHMENT4;\n\n      case 'color5':\n      case 5:\n        return extensions.drawBuffers.COLOR_ATTACHMENT5;\n\n      case 'color6':\n      case 6:\n        return extensions.drawBuffers.COLOR_ATTACHMENT6;\n\n      case 'color7':\n      case 7:\n        return extensions.drawBuffers.COLOR_ATTACHMENT7;\n    }\n  }\n\n  throw new Error('unknown texture attachment');\n}\n\nfunction isImage(x) {\n  return typeof HTMLImageElement !== 'undefined' && x instanceof HTMLImageElement;\n}\n\nfunction isTexture2d(x, target, gl) {\n  return target === gl.TEXTURE_2D;\n}\n\nfunction isTexture3d(x, target, gl) {\n  return target === gl.TEXTURE_3D;\n}\n\nfunction getTexture(gl) {\n  var texture = gl.createTexture();\n\n  if (texture === null) {\n    throw new Error('Could not create WebGL texture');\n  }\n\n  return texture;\n}\n\nexport function createTexture(gl, extensions, kind, _format, _type, _filter) {\n  var id = getNextTextureId();\n  var texture = getTexture(gl); // check texture kind and type compatability\n\n  if (kind.endsWith('float32') && _type !== 'float' || kind.endsWith('float16') && _type !== 'fp16' || kind.endsWith('uint8') && _type !== 'ubyte' || kind.endsWith('int32') && _type !== 'int' || kind.endsWith('depth') && _type !== 'ushort' && _type !== 'float') {\n    throw new Error(\"texture kind '\" + kind + \"' and type '\" + _type + \"' are incompatible\");\n  }\n\n  var target = getTarget(gl, kind);\n  var filter = getFilter(gl, _filter);\n  var format = getFormat(gl, _format, _type);\n  var internalFormat = getInternalFormat(gl, _format, _type);\n  var type = getType(gl, extensions, _type);\n\n  function init() {\n    gl.bindTexture(target, texture);\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filter); // clamp-to-edge needed for non-power-of-two textures in webgl\n\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(target, null);\n  }\n\n  init();\n  var width = 0,\n      height = 0,\n      depth = 0;\n  var loadedData;\n  var destroyed = false;\n\n  function define(_width, _height, _depth) {\n    if (width === _width && height === _height && depth === (_depth || 0)) return;\n    width = _width, height = _height, depth = _depth || 0;\n    gl.bindTexture(target, texture);\n\n    if (target === gl.TEXTURE_2D) {\n      gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, null);\n    } else if (isWebGL2(gl) && target === gl.TEXTURE_3D && depth !== undefined) {\n      gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, null);\n    } else {\n      throw new Error('unknown texture target');\n    }\n  }\n\n  function load(data, sub) {\n    if (sub === void 0) {\n      sub = false;\n    }\n\n    gl.bindTexture(target, texture); // unpack alignment of 1 since we use textures only for data\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n\n    if (isImage(data)) {\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data);\n    } else if (isTexture2d(data, target, gl)) {\n      var _filter_1 = data.filter ? getFilter(gl, data.filter) : filter;\n\n      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, _filter_1);\n      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _filter_1);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!data.flipY);\n\n      if (sub) {\n        gl.texSubImage2D(target, 0, 0, 0, data.width, data.height, format, type, data.array);\n      } else {\n        width = data.width, height = data.height;\n        gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, data.array);\n      }\n    } else if (isWebGL2(gl) && isTexture3d(data, target, gl)) {\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n\n      if (sub) {\n        gl.texSubImage3D(target, 0, 0, 0, 0, data.width, data.height, data.depth, format, type, data.array);\n      } else {\n        width = data.width, height = data.height, depth = data.depth;\n        gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, data.array);\n      }\n    } else {\n      throw new Error('unknown texture target');\n    }\n\n    gl.bindTexture(target, null);\n    loadedData = data;\n  }\n\n  function attachFramebuffer(framebuffer, attachment, layer) {\n    framebuffer.bind();\n\n    if (target === gl.TEXTURE_2D) {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), gl.TEXTURE_2D, texture, 0);\n    } else if (isWebGL2(gl) && target === gl.TEXTURE_3D) {\n      if (layer === undefined) throw new Error('need `layer` to attach 3D texture');\n      gl.framebufferTextureLayer(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), texture, 0, layer);\n    } else {\n      throw new Error('unknown/unsupported texture target');\n    }\n  }\n\n  return {\n    id: id,\n    target: target,\n    format: format,\n    internalFormat: internalFormat,\n    type: type,\n    filter: filter,\n    getWidth: function () {\n      return width;\n    },\n    getHeight: function () {\n      return height;\n    },\n    getDepth: function () {\n      return depth;\n    },\n    getByteCount: function () {\n      return getByteCount(_format, _type, width, height, depth);\n    },\n    define: define,\n    load: load,\n    bind: function (id) {\n      gl.activeTexture(gl.TEXTURE0 + id);\n      gl.bindTexture(target, texture);\n    },\n    unbind: function (id) {\n      gl.activeTexture(gl.TEXTURE0 + id);\n      gl.bindTexture(target, null);\n    },\n    attachFramebuffer: attachFramebuffer,\n    detachFramebuffer: function (framebuffer, attachment) {\n      framebuffer.bind();\n\n      if (target === gl.TEXTURE_2D) {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), gl.TEXTURE_2D, null, 0);\n      } else if (isWebGL2(gl) && target === gl.TEXTURE_3D) {\n        gl.framebufferTextureLayer(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), null, 0, 0);\n      } else {\n        throw new Error('unknown texture target');\n      }\n    },\n    reset: function () {\n      texture = getTexture(gl);\n      init();\n      var _a = [width, height, depth],\n          _width = _a[0],\n          _height = _a[1],\n          _depth = _a[2];\n      width = 0, height = 0, depth = 0; // set to zero to trigger resize\n\n      define(_width, _height, _depth);\n      if (loadedData) load(loadedData);\n    },\n    destroy: function () {\n      if (destroyed) return;\n      gl.deleteTexture(texture);\n      destroyed = true;\n    }\n  };\n}\nexport function createTextures(ctx, schema, values) {\n  var resources = ctx.resources;\n  var textures = [];\n  Object.keys(schema).forEach(function (k) {\n    var spec = schema[k];\n\n    if (spec.type === 'texture') {\n      var value = values[k];\n\n      if (value) {\n        if (spec.kind === 'texture') {\n          textures[textures.length] = [k, value.ref.value];\n        } else {\n          var texture = resources.texture(spec.kind, spec.format, spec.dataType, spec.filter);\n          texture.load(value.ref.value);\n          textures[textures.length] = [k, texture];\n        }\n      }\n    }\n  });\n  return textures;\n}\n/**\r\n * Loads an image from a url to a textures and triggers update asynchronously.\r\n * This will not work on node.js without a polyfill for `HTMLImageElement`.\r\n */\n\nexport function loadImageTexture(src, cell, texture) {\n  var img = new Image();\n\n  img.onload = function () {\n    texture.load(img);\n    ValueCell.update(cell, texture);\n  };\n\n  img.src = src;\n} //\n\nexport function createNullTexture(gl) {\n  var _a;\n\n  var target = (_a = gl === null || gl === void 0 ? void 0 : gl.TEXTURE_2D) !== null && _a !== void 0 ? _a : 3553;\n  return {\n    id: getNextTextureId(),\n    target: target,\n    format: 0,\n    internalFormat: 0,\n    type: 0,\n    filter: 0,\n    getWidth: function () {\n      return 0;\n    },\n    getHeight: function () {\n      return 0;\n    },\n    getDepth: function () {\n      return 0;\n    },\n    getByteCount: function () {\n      return 0;\n    },\n    define: function () {},\n    load: function () {},\n    bind: function (id) {\n      if (gl) {\n        gl.activeTexture(gl.TEXTURE0 + id);\n        gl.bindTexture(target, null);\n      }\n    },\n    unbind: function (id) {\n      if (gl) {\n        gl.activeTexture(gl.TEXTURE0 + id);\n        gl.bindTexture(target, null);\n      }\n    },\n    attachFramebuffer: function () {},\n    detachFramebuffer: function () {},\n    reset: function () {},\n    destroy: function () {}\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/texture.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ValueCell } from '../../mol-util';\r\nimport { idFactory } from '../../mol-util/id-factory';\r\nimport { isWebGL2 } from './compat';\r\nvar getNextTextureId = idFactory();\r\nexport function getTarget(gl, kind) {\r\n    switch (kind) {\r\n        case 'image-uint8': return gl.TEXTURE_2D;\r\n        case 'image-float32': return gl.TEXTURE_2D;\r\n        case 'image-float16': return gl.TEXTURE_2D;\r\n        case 'image-depth': return gl.TEXTURE_2D;\r\n    }\r\n    if (isWebGL2(gl)) {\r\n        switch (kind) {\r\n            case 'image-int32': return gl.TEXTURE_2D;\r\n            case 'volume-uint8': return gl.TEXTURE_3D;\r\n            case 'volume-float32': return gl.TEXTURE_3D;\r\n            case 'volume-float16': return gl.TEXTURE_3D;\r\n        }\r\n    }\r\n    throw new Error(\"unknown texture kind '\" + kind + \"'\");\r\n}\r\nexport function getFormat(gl, format, type) {\r\n    switch (format) {\r\n        case 'alpha':\r\n            if (isWebGL2(gl) && type === 'float')\r\n                return gl.RED;\r\n            else if (isWebGL2(gl) && type === 'int')\r\n                return gl.RED_INTEGER;\r\n            else\r\n                return gl.ALPHA;\r\n        case 'rgb':\r\n            if (isWebGL2(gl) && type === 'int')\r\n                return gl.RGB_INTEGER;\r\n            return gl.RGB;\r\n        case 'rgba':\r\n            if (isWebGL2(gl) && type === 'int')\r\n                return gl.RGBA_INTEGER;\r\n            return gl.RGBA;\r\n        case 'depth': return gl.DEPTH_COMPONENT;\r\n    }\r\n}\r\nexport function getInternalFormat(gl, format, type) {\r\n    if (isWebGL2(gl)) {\r\n        switch (format) {\r\n            case 'alpha':\r\n                switch (type) {\r\n                    case 'ubyte': return gl.ALPHA;\r\n                    case 'float': return gl.R32F;\r\n                    case 'fp16': return gl.R16F;\r\n                    case 'int': return gl.R32I;\r\n                }\r\n            case 'rgb':\r\n                switch (type) {\r\n                    case 'ubyte': return gl.RGB;\r\n                    case 'float': return gl.RGB32F;\r\n                    case 'fp16': return gl.RGB16F;\r\n                    case 'int': return gl.RGB32I;\r\n                }\r\n            case 'rgba':\r\n                switch (type) {\r\n                    case 'ubyte': return gl.RGBA;\r\n                    case 'float': return gl.RGBA32F;\r\n                    case 'fp16': return gl.RGBA16F;\r\n                    case 'int': return gl.RGBA32I;\r\n                }\r\n            case 'depth':\r\n                switch (type) {\r\n                    case 'ushort': return gl.DEPTH_COMPONENT16;\r\n                    case 'float': return gl.DEPTH_COMPONENT32F;\r\n                }\r\n        }\r\n    }\r\n    return getFormat(gl, format, type);\r\n}\r\nfunction getByteCount(format, type, width, height, depth) {\r\n    var bpe = getFormatSize(format) * getTypeSize(type);\r\n    return bpe * width * height * (depth || 1);\r\n}\r\nfunction getFormatSize(format) {\r\n    switch (format) {\r\n        case 'alpha': return 1;\r\n        case 'rgb': return 3;\r\n        case 'rgba': return 4;\r\n        case 'depth': return 4;\r\n    }\r\n}\r\nfunction getTypeSize(type) {\r\n    switch (type) {\r\n        case 'ubyte': return 1;\r\n        case 'ushort': return 2;\r\n        case 'float': return 4;\r\n        case 'fp16': return 2;\r\n        case 'int': return 4;\r\n    }\r\n}\r\nexport function getType(gl, extensions, type) {\r\n    switch (type) {\r\n        case 'ubyte': return gl.UNSIGNED_BYTE;\r\n        case 'ushort': return gl.UNSIGNED_SHORT;\r\n        case 'float': return gl.FLOAT;\r\n        case 'fp16':\r\n            if (extensions.textureHalfFloat)\r\n                return extensions.textureHalfFloat.HALF_FLOAT;\r\n            else\r\n                throw new Error('extension \"texture_half_float\" unavailable');\r\n        case 'int':\r\n            if (isWebGL2(gl))\r\n                return gl.INT;\r\n            else\r\n                throw new Error('texture type \"int\" requires webgl2');\r\n    }\r\n}\r\nexport function getFilter(gl, type) {\r\n    switch (type) {\r\n        case 'nearest': return gl.NEAREST;\r\n        case 'linear': return gl.LINEAR;\r\n    }\r\n}\r\nexport function getAttachment(gl, extensions, attachment) {\r\n    switch (attachment) {\r\n        case 'depth': return gl.DEPTH_ATTACHMENT;\r\n        case 'stencil': return gl.STENCIL_ATTACHMENT;\r\n        case 'color0':\r\n        case 0: return gl.COLOR_ATTACHMENT0;\r\n    }\r\n    if (extensions.drawBuffers) {\r\n        switch (attachment) {\r\n            case 'color1':\r\n            case 1: return extensions.drawBuffers.COLOR_ATTACHMENT1;\r\n            case 'color2':\r\n            case 2: return extensions.drawBuffers.COLOR_ATTACHMENT2;\r\n            case 'color3':\r\n            case 3: return extensions.drawBuffers.COLOR_ATTACHMENT3;\r\n            case 'color4':\r\n            case 4: return extensions.drawBuffers.COLOR_ATTACHMENT4;\r\n            case 'color5':\r\n            case 5: return extensions.drawBuffers.COLOR_ATTACHMENT5;\r\n            case 'color6':\r\n            case 6: return extensions.drawBuffers.COLOR_ATTACHMENT6;\r\n            case 'color7':\r\n            case 7: return extensions.drawBuffers.COLOR_ATTACHMENT7;\r\n        }\r\n    }\r\n    throw new Error('unknown texture attachment');\r\n}\r\nfunction isImage(x) {\r\n    return typeof HTMLImageElement !== 'undefined' && (x instanceof HTMLImageElement);\r\n}\r\nfunction isTexture2d(x, target, gl) {\r\n    return target === gl.TEXTURE_2D;\r\n}\r\nfunction isTexture3d(x, target, gl) {\r\n    return target === gl.TEXTURE_3D;\r\n}\r\nfunction getTexture(gl) {\r\n    var texture = gl.createTexture();\r\n    if (texture === null) {\r\n        throw new Error('Could not create WebGL texture');\r\n    }\r\n    return texture;\r\n}\r\nexport function createTexture(gl, extensions, kind, _format, _type, _filter) {\r\n    var id = getNextTextureId();\r\n    var texture = getTexture(gl);\r\n    // check texture kind and type compatability\r\n    if ((kind.endsWith('float32') && _type !== 'float') ||\r\n        (kind.endsWith('float16') && _type !== 'fp16') ||\r\n        (kind.endsWith('uint8') && _type !== 'ubyte') ||\r\n        (kind.endsWith('int32') && _type !== 'int') ||\r\n        (kind.endsWith('depth') && _type !== 'ushort' && _type !== 'float')) {\r\n        throw new Error(\"texture kind '\" + kind + \"' and type '\" + _type + \"' are incompatible\");\r\n    }\r\n    var target = getTarget(gl, kind);\r\n    var filter = getFilter(gl, _filter);\r\n    var format = getFormat(gl, _format, _type);\r\n    var internalFormat = getInternalFormat(gl, _format, _type);\r\n    var type = getType(gl, extensions, _type);\r\n    function init() {\r\n        gl.bindTexture(target, texture);\r\n        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filter);\r\n        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filter);\r\n        // clamp-to-edge needed for non-power-of-two textures in webgl\r\n        gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.bindTexture(target, null);\r\n    }\r\n    init();\r\n    var width = 0, height = 0, depth = 0;\r\n    var loadedData;\r\n    var destroyed = false;\r\n    function define(_width, _height, _depth) {\r\n        if (width === _width && height === _height && depth === (_depth || 0))\r\n            return;\r\n        width = _width, height = _height, depth = _depth || 0;\r\n        gl.bindTexture(target, texture);\r\n        if (target === gl.TEXTURE_2D) {\r\n            gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, null);\r\n        }\r\n        else if (isWebGL2(gl) && target === gl.TEXTURE_3D && depth !== undefined) {\r\n            gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, null);\r\n        }\r\n        else {\r\n            throw new Error('unknown texture target');\r\n        }\r\n    }\r\n    function load(data, sub) {\r\n        if (sub === void 0) { sub = false; }\r\n        gl.bindTexture(target, texture);\r\n        // unpack alignment of 1 since we use textures only for data\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n        if (isImage(data)) {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data);\r\n        }\r\n        else if (isTexture2d(data, target, gl)) {\r\n            var _filter_1 = data.filter ? getFilter(gl, data.filter) : filter;\r\n            gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, _filter_1);\r\n            gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _filter_1);\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!data.flipY);\r\n            if (sub) {\r\n                gl.texSubImage2D(target, 0, 0, 0, data.width, data.height, format, type, data.array);\r\n            }\r\n            else {\r\n                width = data.width, height = data.height;\r\n                gl.texImage2D(target, 0, internalFormat, width, height, 0, format, type, data.array);\r\n            }\r\n        }\r\n        else if (isWebGL2(gl) && isTexture3d(data, target, gl)) {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            if (sub) {\r\n                gl.texSubImage3D(target, 0, 0, 0, 0, data.width, data.height, data.depth, format, type, data.array);\r\n            }\r\n            else {\r\n                width = data.width, height = data.height, depth = data.depth;\r\n                gl.texImage3D(target, 0, internalFormat, width, height, depth, 0, format, type, data.array);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('unknown texture target');\r\n        }\r\n        gl.bindTexture(target, null);\r\n        loadedData = data;\r\n    }\r\n    function attachFramebuffer(framebuffer, attachment, layer) {\r\n        framebuffer.bind();\r\n        if (target === gl.TEXTURE_2D) {\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), gl.TEXTURE_2D, texture, 0);\r\n        }\r\n        else if (isWebGL2(gl) && target === gl.TEXTURE_3D) {\r\n            if (layer === undefined)\r\n                throw new Error('need `layer` to attach 3D texture');\r\n            gl.framebufferTextureLayer(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), texture, 0, layer);\r\n        }\r\n        else {\r\n            throw new Error('unknown/unsupported texture target');\r\n        }\r\n    }\r\n    return {\r\n        id: id,\r\n        target: target,\r\n        format: format,\r\n        internalFormat: internalFormat,\r\n        type: type,\r\n        filter: filter,\r\n        getWidth: function () { return width; },\r\n        getHeight: function () { return height; },\r\n        getDepth: function () { return depth; },\r\n        getByteCount: function () { return getByteCount(_format, _type, width, height, depth); },\r\n        define: define,\r\n        load: load,\r\n        bind: function (id) {\r\n            gl.activeTexture(gl.TEXTURE0 + id);\r\n            gl.bindTexture(target, texture);\r\n        },\r\n        unbind: function (id) {\r\n            gl.activeTexture(gl.TEXTURE0 + id);\r\n            gl.bindTexture(target, null);\r\n        },\r\n        attachFramebuffer: attachFramebuffer,\r\n        detachFramebuffer: function (framebuffer, attachment) {\r\n            framebuffer.bind();\r\n            if (target === gl.TEXTURE_2D) {\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), gl.TEXTURE_2D, null, 0);\r\n            }\r\n            else if (isWebGL2(gl) && target === gl.TEXTURE_3D) {\r\n                gl.framebufferTextureLayer(gl.FRAMEBUFFER, getAttachment(gl, extensions, attachment), null, 0, 0);\r\n            }\r\n            else {\r\n                throw new Error('unknown texture target');\r\n            }\r\n        },\r\n        reset: function () {\r\n            texture = getTexture(gl);\r\n            init();\r\n            var _a = [width, height, depth], _width = _a[0], _height = _a[1], _depth = _a[2];\r\n            width = 0, height = 0, depth = 0; // set to zero to trigger resize\r\n            define(_width, _height, _depth);\r\n            if (loadedData)\r\n                load(loadedData);\r\n        },\r\n        destroy: function () {\r\n            if (destroyed)\r\n                return;\r\n            gl.deleteTexture(texture);\r\n            destroyed = true;\r\n        }\r\n    };\r\n}\r\nexport function createTextures(ctx, schema, values) {\r\n    var resources = ctx.resources;\r\n    var textures = [];\r\n    Object.keys(schema).forEach(function (k) {\r\n        var spec = schema[k];\r\n        if (spec.type === 'texture') {\r\n            var value = values[k];\r\n            if (value) {\r\n                if (spec.kind === 'texture') {\r\n                    textures[textures.length] = [k, value.ref.value];\r\n                }\r\n                else {\r\n                    var texture = resources.texture(spec.kind, spec.format, spec.dataType, spec.filter);\r\n                    texture.load(value.ref.value);\r\n                    textures[textures.length] = [k, texture];\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return textures;\r\n}\r\n/**\r\n * Loads an image from a url to a textures and triggers update asynchronously.\r\n * This will not work on node.js without a polyfill for `HTMLImageElement`.\r\n */\r\nexport function loadImageTexture(src, cell, texture) {\r\n    var img = new Image();\r\n    img.onload = function () {\r\n        texture.load(img);\r\n        ValueCell.update(cell, texture);\r\n    };\r\n    img.src = src;\r\n}\r\n//\r\nexport function createNullTexture(gl) {\r\n    var _a;\r\n    var target = (_a = gl === null || gl === void 0 ? void 0 : gl.TEXTURE_2D) !== null && _a !== void 0 ? _a : 3553;\r\n    return {\r\n        id: getNextTextureId(),\r\n        target: target,\r\n        format: 0,\r\n        internalFormat: 0,\r\n        type: 0,\r\n        filter: 0,\r\n        getWidth: function () { return 0; },\r\n        getHeight: function () { return 0; },\r\n        getDepth: function () { return 0; },\r\n        getByteCount: function () { return 0; },\r\n        define: function () { },\r\n        load: function () { },\r\n        bind: function (id) {\r\n            if (gl) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(target, null);\r\n            }\r\n        },\r\n        unbind: function (id) {\r\n            if (gl) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(target, null);\r\n            }\r\n        },\r\n        attachFramebuffer: function () { },\r\n        detachFramebuffer: function () { },\r\n        reset: function () { },\r\n        destroy: function () { },\r\n    };\r\n}\r\n//# sourceMappingURL=texture.js.map"]},"metadata":{},"sourceType":"module"}