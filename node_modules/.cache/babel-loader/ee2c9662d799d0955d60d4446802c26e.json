{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Loci } from '../../../mol-model/loci';\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\nimport { Text } from '../../../mol-geo/geometry/text/text';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { ColorNames } from '../../../mol-util/color/names';\nimport { ShapeRepresentation } from '../representation';\nimport { Representation } from '../../representation';\nimport { Shape } from '../../../mol-model/shape';\nimport { LinesBuilder } from '../../../mol-geo/geometry/lines/lines-builder';\nimport { TextBuilder } from '../../../mol-geo/geometry/text/text-builder';\nimport { Vec3, Mat4 } from '../../../mol-math/linear-algebra';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { arcLength, halfPI, radToDeg } from '../../../mol-math/misc';\nimport { Circle } from '../../../mol-geo/primitive/circle';\nimport { transformPrimitive } from '../../../mol-geo/primitive/primitive';\nimport { MarkerActions, MarkerAction } from '../../../mol-util/marker-action';\nimport { dihedralLabel } from '../../../mol-theme/label';\nimport { LociLabelTextParams } from './common';\nimport { Sphere3D } from '../../../mol-math/geometry';\nvar SharedParams = {\n  color: PD.Color(ColorNames.lightgreen),\n  arcScale: PD.Numeric(0.7, {\n    min: 0.01,\n    max: 1,\n    step: 0.01\n  })\n};\n\nvar LinesParams = __assign(__assign(__assign({}, Lines.Params), SharedParams), {\n  lineSizeAttenuation: PD.Boolean(true),\n  linesSize: PD.Numeric(0.04, {\n    min: 0.01,\n    max: 5,\n    step: 0.01\n  }),\n  dashLength: PD.Numeric(0.04, {\n    min: 0.01,\n    max: 0.2,\n    step: 0.01\n  })\n});\n\nvar VectorsParams = __assign({}, LinesParams);\n\nvar ExtendersParams = __assign({}, LinesParams);\n\nvar ArmsParams = __assign({}, LinesParams);\n\nvar ArcParams = __assign({}, LinesParams);\n\nvar SectorParams = __assign(__assign(__assign({}, Mesh.Params), SharedParams), {\n  ignoreLight: PD.Boolean(true),\n  sectorOpacity: PD.Numeric(0.75, {\n    min: 0,\n    max: 1,\n    step: 0.01\n  })\n});\n\nvar DihedralVisuals = {\n  'vectors': function (ctx, getParams) {\n    return ShapeRepresentation(getVectorsShape, Lines.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          pickable: false\n        });\n      }\n    });\n  },\n  'extenders': function (ctx, getParams) {\n    return ShapeRepresentation(getExtendersShape, Lines.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          pickable: false\n        });\n      }\n    });\n  },\n  'connector': function (ctx, getParams) {\n    return ShapeRepresentation(getConnectorShape, Lines.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          pickable: false\n        });\n      }\n    });\n  },\n  'arms': function (ctx, getParams) {\n    return ShapeRepresentation(getArmsShape, Lines.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          pickable: false\n        });\n      }\n    });\n  },\n  'arc': function (ctx, getParams) {\n    return ShapeRepresentation(getArcShape, Lines.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          pickable: false\n        });\n      }\n    });\n  },\n  'sector': function (ctx, getParams) {\n    return ShapeRepresentation(getSectorShape, Mesh.Utils, {\n      modifyProps: function (p) {\n        return __assign(__assign({}, p), {\n          alpha: p.sectorOpacity\n        });\n      },\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          markerActions: MarkerActions.Highlighting\n        });\n      }\n    });\n  },\n  'text': function (ctx, getParams) {\n    return ShapeRepresentation(getTextShape, Text.Utils, {\n      modifyState: function (s) {\n        return __assign(__assign({}, s), {\n          markerActions: MarkerAction.None\n        });\n      }\n    });\n  }\n};\nexport var DihedralParams = __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, VectorsParams), ExtendersParams), ArmsParams), ArcParams), SectorParams), LociLabelTextParams), {\n  visuals: PD.MultiSelect(['extenders', 'arms', 'sector', 'text'], PD.objectToOptions(DihedralVisuals))\n}); //\n\nfunction getDihedralState() {\n  return {\n    sphereA: Sphere3D(),\n    sphereB: Sphere3D(),\n    sphereC: Sphere3D(),\n    sphereD: Sphere3D(),\n    dirBA: Vec3(),\n    dirCD: Vec3(),\n    projA: Vec3(),\n    projD: Vec3(),\n    arcPointA: Vec3(),\n    arcPointD: Vec3(),\n    arcDirA: Vec3(),\n    arcDirD: Vec3(),\n    arcCenter: Vec3(),\n    arcNormal: Vec3(),\n    radius: 0,\n    angle: 0\n  };\n}\n\nvar tmpVec = Vec3();\nvar tmpMat = Mat4(); // TODO improper dihedrals are not handled correctly\n\nfunction setDihedralState(quad, state, arcScale) {\n  var sphereA = state.sphereA,\n      sphereB = state.sphereB,\n      sphereC = state.sphereC,\n      sphereD = state.sphereD,\n      dirBA = state.dirBA,\n      dirCD = state.dirCD,\n      projA = state.projA,\n      projD = state.projD;\n  var arcPointA = state.arcPointA,\n      arcPointD = state.arcPointD,\n      arcDirA = state.arcDirA,\n      arcDirD = state.arcDirD,\n      arcCenter = state.arcCenter,\n      arcNormal = state.arcNormal;\n  var _a = quad.loci,\n      lociA = _a[0],\n      lociB = _a[1],\n      lociC = _a[2],\n      lociD = _a[3];\n  Loci.getBoundingSphere(lociA, sphereA);\n  Loci.getBoundingSphere(lociB, sphereB);\n  Loci.getBoundingSphere(lociC, sphereC);\n  Loci.getBoundingSphere(lociD, sphereD);\n  Vec3.add(arcCenter, sphereB.center, sphereC.center);\n  Vec3.scale(arcCenter, arcCenter, 0.5);\n  Vec3.sub(dirBA, sphereA.center, sphereB.center);\n  Vec3.sub(dirCD, sphereD.center, sphereC.center);\n  Vec3.add(arcPointA, arcCenter, dirBA);\n  Vec3.add(arcPointD, arcCenter, dirCD);\n  Vec3.sub(arcNormal, sphereC.center, sphereB.center);\n  Vec3.orthogonalize(arcDirA, arcNormal, dirBA);\n  Vec3.orthogonalize(arcDirD, arcNormal, dirCD);\n  Vec3.projectPointOnVector(projA, arcPointA, arcDirA, arcCenter);\n  Vec3.projectPointOnVector(projD, arcPointD, arcDirD, arcCenter);\n  var len = Math.min(Vec3.distance(projA, arcCenter), Vec3.distance(projD, arcCenter));\n  var radius = len * arcScale;\n  Vec3.setMagnitude(arcDirA, arcDirA, radius);\n  Vec3.setMagnitude(arcDirD, arcDirD, radius);\n  Vec3.add(arcPointA, arcCenter, arcDirA);\n  Vec3.add(arcPointD, arcCenter, arcDirD);\n  state.radius = radius;\n  state.angle = Vec3.dihedralAngle(sphereA.center, sphereB.center, sphereC.center, sphereD.center);\n  Vec3.matchDirection(tmpVec, arcNormal, Vec3.sub(tmpVec, arcPointA, sphereA.center));\n  var angleA = Vec3.angle(dirBA, tmpVec);\n  var lenA = radius / Math.cos(angleA - halfPI);\n  Vec3.add(projA, sphereB.center, Vec3.setMagnitude(tmpVec, dirBA, lenA));\n  Vec3.matchDirection(tmpVec, arcNormal, Vec3.sub(tmpVec, arcPointD, sphereD.center));\n  var angleD = Vec3.angle(dirCD, tmpVec);\n  var lenD = radius / Math.cos(angleD - halfPI);\n  Vec3.add(projD, sphereC.center, Vec3.setMagnitude(tmpVec, dirCD, lenD));\n  return state;\n}\n\nfunction getCircle(state, segmentLength) {\n  var radius = state.radius,\n      angle = state.angle;\n  var segments = segmentLength ? arcLength(angle, radius) / segmentLength : 32;\n  Mat4.targetTo(tmpMat, state.arcCenter, angle < 0 ? state.arcPointD : state.arcPointA, state.arcNormal);\n  Mat4.setTranslation(tmpMat, state.arcCenter);\n  Mat4.mul(tmpMat, tmpMat, Mat4.rotY180);\n  var circle = Circle({\n    radius: radius,\n    thetaLength: Math.abs(angle),\n    segments: segments\n  });\n  return transformPrimitive(circle, tmpMat);\n}\n\nvar tmpState = getDihedralState();\n\nfunction getDihedralName(data) {\n  return data.quads.length === 1 ? \"Dihedral \" + dihedralLabel(data.quads[0], {\n    measureOnly: true\n  }) : data.quads.length + \" Dihedrals\";\n} //\n\n\nfunction buildVectorsLines(data, props, lines) {\n  var builder = LinesBuilder.create(128, 64, lines);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    builder.addFixedLengthDashes(tmpState.arcCenter, tmpState.arcPointA, props.dashLength, i);\n    builder.addFixedLengthDashes(tmpState.arcCenter, tmpState.arcPointD, props.dashLength, i);\n  }\n\n  return builder.getLines();\n}\n\nfunction getVectorsShape(ctx, data, props, shape) {\n  var lines = buildVectorsLines(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n  return Shape.create(name, data, lines, function () {\n    return props.color;\n  }, function () {\n    return props.linesSize;\n  }, function () {\n    return '';\n  });\n} //\n\n\nfunction buildConnectorLine(data, props, lines) {\n  var builder = LinesBuilder.create(128, 64, lines);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    builder.addFixedLengthDashes(tmpState.sphereB.center, tmpState.sphereC.center, props.dashLength, i);\n  }\n\n  return builder.getLines();\n}\n\nfunction getConnectorShape(ctx, data, props, shape) {\n  var lines = buildConnectorLine(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n  return Shape.create(name, data, lines, function () {\n    return props.color;\n  }, function () {\n    return props.linesSize;\n  }, function () {\n    return '';\n  });\n} //\n\n\nfunction buildArmsLines(data, props, lines) {\n  var builder = LinesBuilder.create(128, 64, lines);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    builder.addFixedLengthDashes(tmpState.sphereB.center, tmpState.sphereA.center, props.dashLength, i);\n    builder.addFixedLengthDashes(tmpState.sphereC.center, tmpState.sphereD.center, props.dashLength, i);\n  }\n\n  return builder.getLines();\n}\n\nfunction getArmsShape(ctx, data, props, shape) {\n  var lines = buildArmsLines(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n  return Shape.create(name, data, lines, function () {\n    return props.color;\n  }, function () {\n    return props.linesSize;\n  }, function () {\n    return '';\n  });\n} //\n\n\nfunction buildExtendersLines(data, props, lines) {\n  var builder = LinesBuilder.create(128, 64, lines);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    builder.addFixedLengthDashes(tmpState.arcPointA, tmpState.projA, props.dashLength, i);\n    builder.addFixedLengthDashes(tmpState.arcPointD, tmpState.projD, props.dashLength, i);\n  }\n\n  return builder.getLines();\n}\n\nfunction getExtendersShape(ctx, data, props, shape) {\n  var lines = buildExtendersLines(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n  return Shape.create(name, data, lines, function () {\n    return props.color;\n  }, function () {\n    return props.linesSize;\n  }, function () {\n    return '';\n  });\n} //\n\n\nfunction buildArcLines(data, props, lines) {\n  var builder = LinesBuilder.create(128, 64, lines);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    var circle = getCircle(tmpState, props.dashLength);\n    var indices = circle.indices,\n        vertices = circle.vertices;\n\n    for (var j = 0, jl = indices.length; j < jl; j += 3) {\n      if (j % 2 === 1) continue; // draw every other segment to get dashes\n\n      var start = indices[j] * 3;\n      var end = indices[j + 1] * 3;\n      var startX = vertices[start];\n      var startY = vertices[start + 1];\n      var startZ = vertices[start + 2];\n      var endX = vertices[end];\n      var endY = vertices[end + 1];\n      var endZ = vertices[end + 2];\n      builder.add(startX, startY, startZ, endX, endY, endZ, i);\n    }\n  }\n\n  return builder.getLines();\n}\n\nfunction getArcShape(ctx, data, props, shape) {\n  var lines = buildArcLines(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n  return Shape.create(name, data, lines, function () {\n    return props.color;\n  }, function () {\n    return props.linesSize;\n  }, function () {\n    return '';\n  });\n} //\n\n\nfunction buildSectorMesh(data, props, mesh) {\n  var state = MeshBuilder.createState(128, 64, mesh);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    var circle = getCircle(tmpState);\n    state.currentGroup = i;\n    MeshBuilder.addPrimitive(state, Mat4.id, circle);\n    MeshBuilder.addPrimitiveFlipped(state, Mat4.id, circle);\n  }\n\n  return MeshBuilder.getMesh(state);\n}\n\nfunction getSectorShape(ctx, data, props, shape) {\n  var mesh = buildSectorMesh(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n\n  var getLabel = function (groupId) {\n    return dihedralLabel(data.quads[groupId]);\n  };\n\n  return Shape.create(name, data, mesh, function () {\n    return props.color;\n  }, function () {\n    return 1;\n  }, getLabel);\n} //\n\n\nfunction buildText(data, props, text) {\n  var builder = TextBuilder.create(props, 128, 64, text);\n\n  for (var i = 0, il = data.quads.length; i < il; ++i) {\n    setDihedralState(data.quads[i], tmpState, props.arcScale);\n    Vec3.add(tmpVec, tmpState.arcDirA, tmpState.arcDirD);\n    Vec3.setMagnitude(tmpVec, tmpVec, tmpState.radius);\n    Vec3.add(tmpVec, tmpState.arcCenter, tmpVec);\n    var angle = radToDeg(tmpState.angle).toFixed(2);\n    if (angle === '-0.00') angle = '0.00';\n    var label = props.customText || angle + \"\\u00B0\";\n    var radius = Math.max(2, tmpState.sphereA.radius, tmpState.sphereB.radius, tmpState.sphereC.radius, tmpState.sphereD.radius);\n    var scale = radius / 2;\n    builder.add(label, tmpVec[0], tmpVec[1], tmpVec[2], 0.1, scale, i);\n  }\n\n  return builder.getText();\n}\n\nfunction getTextShape(ctx, data, props, shape) {\n  var text = buildText(data, props, shape && shape.geometry);\n  var name = getDihedralName(data);\n\n  var getLabel = function (groupId) {\n    return dihedralLabel(data.quads[groupId]);\n  };\n\n  return Shape.create(name, data, text, function () {\n    return props.textColor;\n  }, function () {\n    return props.textSize;\n  }, getLabel);\n}\n\nexport function DihedralRepresentation(ctx, getParams) {\n  return Representation.createMulti('Dihedral', ctx, getParams, Representation.StateBuilder, DihedralVisuals);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/shape/loci/dihedral.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Loci } from '../../../mol-model/loci';\r\nimport { Lines } from '../../../mol-geo/geometry/lines/lines';\r\nimport { Text } from '../../../mol-geo/geometry/text/text';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { ColorNames } from '../../../mol-util/color/names';\r\nimport { ShapeRepresentation } from '../representation';\r\nimport { Representation } from '../../representation';\r\nimport { Shape } from '../../../mol-model/shape';\r\nimport { LinesBuilder } from '../../../mol-geo/geometry/lines/lines-builder';\r\nimport { TextBuilder } from '../../../mol-geo/geometry/text/text-builder';\r\nimport { Vec3, Mat4 } from '../../../mol-math/linear-algebra';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { arcLength, halfPI, radToDeg } from '../../../mol-math/misc';\r\nimport { Circle } from '../../../mol-geo/primitive/circle';\r\nimport { transformPrimitive } from '../../../mol-geo/primitive/primitive';\r\nimport { MarkerActions, MarkerAction } from '../../../mol-util/marker-action';\r\nimport { dihedralLabel } from '../../../mol-theme/label';\r\nimport { LociLabelTextParams } from './common';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nvar SharedParams = {\r\n    color: PD.Color(ColorNames.lightgreen),\r\n    arcScale: PD.Numeric(0.7, { min: 0.01, max: 1, step: 0.01 })\r\n};\r\nvar LinesParams = __assign(__assign(__assign({}, Lines.Params), SharedParams), { lineSizeAttenuation: PD.Boolean(true), linesSize: PD.Numeric(0.04, { min: 0.01, max: 5, step: 0.01 }), dashLength: PD.Numeric(0.04, { min: 0.01, max: 0.2, step: 0.01 }) });\r\nvar VectorsParams = __assign({}, LinesParams);\r\nvar ExtendersParams = __assign({}, LinesParams);\r\nvar ArmsParams = __assign({}, LinesParams);\r\nvar ArcParams = __assign({}, LinesParams);\r\nvar SectorParams = __assign(__assign(__assign({}, Mesh.Params), SharedParams), { ignoreLight: PD.Boolean(true), sectorOpacity: PD.Numeric(0.75, { min: 0, max: 1, step: 0.01 }) });\r\nvar DihedralVisuals = {\r\n    'vectors': function (ctx, getParams) { return ShapeRepresentation(getVectorsShape, Lines.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { pickable: false })); } }); },\r\n    'extenders': function (ctx, getParams) { return ShapeRepresentation(getExtendersShape, Lines.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { pickable: false })); } }); },\r\n    'connector': function (ctx, getParams) { return ShapeRepresentation(getConnectorShape, Lines.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { pickable: false })); } }); },\r\n    'arms': function (ctx, getParams) { return ShapeRepresentation(getArmsShape, Lines.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { pickable: false })); } }); },\r\n    'arc': function (ctx, getParams) { return ShapeRepresentation(getArcShape, Lines.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { pickable: false })); } }); },\r\n    'sector': function (ctx, getParams) { return ShapeRepresentation(getSectorShape, Mesh.Utils, { modifyProps: function (p) { return (__assign(__assign({}, p), { alpha: p.sectorOpacity })); }, modifyState: function (s) { return (__assign(__assign({}, s), { markerActions: MarkerActions.Highlighting })); } }); },\r\n    'text': function (ctx, getParams) { return ShapeRepresentation(getTextShape, Text.Utils, { modifyState: function (s) { return (__assign(__assign({}, s), { markerActions: MarkerAction.None })); } }); },\r\n};\r\nexport var DihedralParams = __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, VectorsParams), ExtendersParams), ArmsParams), ArcParams), SectorParams), LociLabelTextParams), { visuals: PD.MultiSelect(['extenders', 'arms', 'sector', 'text'], PD.objectToOptions(DihedralVisuals)) });\r\n//\r\nfunction getDihedralState() {\r\n    return {\r\n        sphereA: Sphere3D(),\r\n        sphereB: Sphere3D(),\r\n        sphereC: Sphere3D(),\r\n        sphereD: Sphere3D(),\r\n        dirBA: Vec3(),\r\n        dirCD: Vec3(),\r\n        projA: Vec3(),\r\n        projD: Vec3(),\r\n        arcPointA: Vec3(),\r\n        arcPointD: Vec3(),\r\n        arcDirA: Vec3(),\r\n        arcDirD: Vec3(),\r\n        arcCenter: Vec3(),\r\n        arcNormal: Vec3(),\r\n        radius: 0,\r\n        angle: 0,\r\n    };\r\n}\r\nvar tmpVec = Vec3();\r\nvar tmpMat = Mat4();\r\n// TODO improper dihedrals are not handled correctly\r\nfunction setDihedralState(quad, state, arcScale) {\r\n    var sphereA = state.sphereA, sphereB = state.sphereB, sphereC = state.sphereC, sphereD = state.sphereD, dirBA = state.dirBA, dirCD = state.dirCD, projA = state.projA, projD = state.projD;\r\n    var arcPointA = state.arcPointA, arcPointD = state.arcPointD, arcDirA = state.arcDirA, arcDirD = state.arcDirD, arcCenter = state.arcCenter, arcNormal = state.arcNormal;\r\n    var _a = quad.loci, lociA = _a[0], lociB = _a[1], lociC = _a[2], lociD = _a[3];\r\n    Loci.getBoundingSphere(lociA, sphereA);\r\n    Loci.getBoundingSphere(lociB, sphereB);\r\n    Loci.getBoundingSphere(lociC, sphereC);\r\n    Loci.getBoundingSphere(lociD, sphereD);\r\n    Vec3.add(arcCenter, sphereB.center, sphereC.center);\r\n    Vec3.scale(arcCenter, arcCenter, 0.5);\r\n    Vec3.sub(dirBA, sphereA.center, sphereB.center);\r\n    Vec3.sub(dirCD, sphereD.center, sphereC.center);\r\n    Vec3.add(arcPointA, arcCenter, dirBA);\r\n    Vec3.add(arcPointD, arcCenter, dirCD);\r\n    Vec3.sub(arcNormal, sphereC.center, sphereB.center);\r\n    Vec3.orthogonalize(arcDirA, arcNormal, dirBA);\r\n    Vec3.orthogonalize(arcDirD, arcNormal, dirCD);\r\n    Vec3.projectPointOnVector(projA, arcPointA, arcDirA, arcCenter);\r\n    Vec3.projectPointOnVector(projD, arcPointD, arcDirD, arcCenter);\r\n    var len = Math.min(Vec3.distance(projA, arcCenter), Vec3.distance(projD, arcCenter));\r\n    var radius = len * arcScale;\r\n    Vec3.setMagnitude(arcDirA, arcDirA, radius);\r\n    Vec3.setMagnitude(arcDirD, arcDirD, radius);\r\n    Vec3.add(arcPointA, arcCenter, arcDirA);\r\n    Vec3.add(arcPointD, arcCenter, arcDirD);\r\n    state.radius = radius;\r\n    state.angle = Vec3.dihedralAngle(sphereA.center, sphereB.center, sphereC.center, sphereD.center);\r\n    Vec3.matchDirection(tmpVec, arcNormal, Vec3.sub(tmpVec, arcPointA, sphereA.center));\r\n    var angleA = Vec3.angle(dirBA, tmpVec);\r\n    var lenA = radius / Math.cos(angleA - halfPI);\r\n    Vec3.add(projA, sphereB.center, Vec3.setMagnitude(tmpVec, dirBA, lenA));\r\n    Vec3.matchDirection(tmpVec, arcNormal, Vec3.sub(tmpVec, arcPointD, sphereD.center));\r\n    var angleD = Vec3.angle(dirCD, tmpVec);\r\n    var lenD = radius / Math.cos(angleD - halfPI);\r\n    Vec3.add(projD, sphereC.center, Vec3.setMagnitude(tmpVec, dirCD, lenD));\r\n    return state;\r\n}\r\nfunction getCircle(state, segmentLength) {\r\n    var radius = state.radius, angle = state.angle;\r\n    var segments = segmentLength ? arcLength(angle, radius) / segmentLength : 32;\r\n    Mat4.targetTo(tmpMat, state.arcCenter, angle < 0 ? state.arcPointD : state.arcPointA, state.arcNormal);\r\n    Mat4.setTranslation(tmpMat, state.arcCenter);\r\n    Mat4.mul(tmpMat, tmpMat, Mat4.rotY180);\r\n    var circle = Circle({ radius: radius, thetaLength: Math.abs(angle), segments: segments });\r\n    return transformPrimitive(circle, tmpMat);\r\n}\r\nvar tmpState = getDihedralState();\r\nfunction getDihedralName(data) {\r\n    return data.quads.length === 1 ? \"Dihedral \" + dihedralLabel(data.quads[0], { measureOnly: true }) : data.quads.length + \" Dihedrals\";\r\n}\r\n//\r\nfunction buildVectorsLines(data, props, lines) {\r\n    var builder = LinesBuilder.create(128, 64, lines);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        builder.addFixedLengthDashes(tmpState.arcCenter, tmpState.arcPointA, props.dashLength, i);\r\n        builder.addFixedLengthDashes(tmpState.arcCenter, tmpState.arcPointD, props.dashLength, i);\r\n    }\r\n    return builder.getLines();\r\n}\r\nfunction getVectorsShape(ctx, data, props, shape) {\r\n    var lines = buildVectorsLines(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    return Shape.create(name, data, lines, function () { return props.color; }, function () { return props.linesSize; }, function () { return ''; });\r\n}\r\n//\r\nfunction buildConnectorLine(data, props, lines) {\r\n    var builder = LinesBuilder.create(128, 64, lines);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        builder.addFixedLengthDashes(tmpState.sphereB.center, tmpState.sphereC.center, props.dashLength, i);\r\n    }\r\n    return builder.getLines();\r\n}\r\nfunction getConnectorShape(ctx, data, props, shape) {\r\n    var lines = buildConnectorLine(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    return Shape.create(name, data, lines, function () { return props.color; }, function () { return props.linesSize; }, function () { return ''; });\r\n}\r\n//\r\nfunction buildArmsLines(data, props, lines) {\r\n    var builder = LinesBuilder.create(128, 64, lines);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        builder.addFixedLengthDashes(tmpState.sphereB.center, tmpState.sphereA.center, props.dashLength, i);\r\n        builder.addFixedLengthDashes(tmpState.sphereC.center, tmpState.sphereD.center, props.dashLength, i);\r\n    }\r\n    return builder.getLines();\r\n}\r\nfunction getArmsShape(ctx, data, props, shape) {\r\n    var lines = buildArmsLines(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    return Shape.create(name, data, lines, function () { return props.color; }, function () { return props.linesSize; }, function () { return ''; });\r\n}\r\n//\r\nfunction buildExtendersLines(data, props, lines) {\r\n    var builder = LinesBuilder.create(128, 64, lines);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        builder.addFixedLengthDashes(tmpState.arcPointA, tmpState.projA, props.dashLength, i);\r\n        builder.addFixedLengthDashes(tmpState.arcPointD, tmpState.projD, props.dashLength, i);\r\n    }\r\n    return builder.getLines();\r\n}\r\nfunction getExtendersShape(ctx, data, props, shape) {\r\n    var lines = buildExtendersLines(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    return Shape.create(name, data, lines, function () { return props.color; }, function () { return props.linesSize; }, function () { return ''; });\r\n}\r\n//\r\nfunction buildArcLines(data, props, lines) {\r\n    var builder = LinesBuilder.create(128, 64, lines);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        var circle = getCircle(tmpState, props.dashLength);\r\n        var indices = circle.indices, vertices = circle.vertices;\r\n        for (var j = 0, jl = indices.length; j < jl; j += 3) {\r\n            if (j % 2 === 1)\r\n                continue; // draw every other segment to get dashes\r\n            var start = indices[j] * 3;\r\n            var end = indices[j + 1] * 3;\r\n            var startX = vertices[start];\r\n            var startY = vertices[start + 1];\r\n            var startZ = vertices[start + 2];\r\n            var endX = vertices[end];\r\n            var endY = vertices[end + 1];\r\n            var endZ = vertices[end + 2];\r\n            builder.add(startX, startY, startZ, endX, endY, endZ, i);\r\n        }\r\n    }\r\n    return builder.getLines();\r\n}\r\nfunction getArcShape(ctx, data, props, shape) {\r\n    var lines = buildArcLines(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    return Shape.create(name, data, lines, function () { return props.color; }, function () { return props.linesSize; }, function () { return ''; });\r\n}\r\n//\r\nfunction buildSectorMesh(data, props, mesh) {\r\n    var state = MeshBuilder.createState(128, 64, mesh);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        var circle = getCircle(tmpState);\r\n        state.currentGroup = i;\r\n        MeshBuilder.addPrimitive(state, Mat4.id, circle);\r\n        MeshBuilder.addPrimitiveFlipped(state, Mat4.id, circle);\r\n    }\r\n    return MeshBuilder.getMesh(state);\r\n}\r\nfunction getSectorShape(ctx, data, props, shape) {\r\n    var mesh = buildSectorMesh(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    var getLabel = function (groupId) { return dihedralLabel(data.quads[groupId]); };\r\n    return Shape.create(name, data, mesh, function () { return props.color; }, function () { return 1; }, getLabel);\r\n}\r\n//\r\nfunction buildText(data, props, text) {\r\n    var builder = TextBuilder.create(props, 128, 64, text);\r\n    for (var i = 0, il = data.quads.length; i < il; ++i) {\r\n        setDihedralState(data.quads[i], tmpState, props.arcScale);\r\n        Vec3.add(tmpVec, tmpState.arcDirA, tmpState.arcDirD);\r\n        Vec3.setMagnitude(tmpVec, tmpVec, tmpState.radius);\r\n        Vec3.add(tmpVec, tmpState.arcCenter, tmpVec);\r\n        var angle = radToDeg(tmpState.angle).toFixed(2);\r\n        if (angle === '-0.00')\r\n            angle = '0.00';\r\n        var label = props.customText || angle + \"\\u00B0\";\r\n        var radius = Math.max(2, tmpState.sphereA.radius, tmpState.sphereB.radius, tmpState.sphereC.radius, tmpState.sphereD.radius);\r\n        var scale = radius / 2;\r\n        builder.add(label, tmpVec[0], tmpVec[1], tmpVec[2], 0.1, scale, i);\r\n    }\r\n    return builder.getText();\r\n}\r\nfunction getTextShape(ctx, data, props, shape) {\r\n    var text = buildText(data, props, shape && shape.geometry);\r\n    var name = getDihedralName(data);\r\n    var getLabel = function (groupId) { return dihedralLabel(data.quads[groupId]); };\r\n    return Shape.create(name, data, text, function () { return props.textColor; }, function () { return props.textSize; }, getLabel);\r\n}\r\nexport function DihedralRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Dihedral', ctx, getParams, Representation.StateBuilder, DihedralVisuals);\r\n}\r\n//# sourceMappingURL=dihedral.js.map"]},"metadata":{},"sourceType":"module"}