{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Fred Ludlow <Fred.Ludlow@astx.com>\r\n *\r\n * based in part on NGL (https://github.com/arose/ngl)\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { AtomGeometryAngles, calcAngles, calcPlaneAngle } from '../chemistry/geometry';\nimport { Features } from './features';\nimport { typeSymbol, bondToElementCount, bondCount, formalCharge, compId, atomId } from '../chemistry/util';\nimport { ValenceModelProvider } from '../valence-model';\nimport { degToRad } from '../../../mol-math/misc';\nimport { ProteinBackboneAtoms } from '../../../mol-model/structure/model/types';\nvar GeometryParams = {\n  distanceMax: PD.Numeric(3.5, {\n    min: 1,\n    max: 5,\n    step: 0.1\n  }),\n  backbone: PD.Boolean(true, {\n    description: 'Include backbone-to-backbone hydrogen bonds'\n  }),\n  accAngleDevMax: PD.Numeric(45, {\n    min: 0,\n    max: 180,\n    step: 1\n  }, {\n    description: 'Max deviation from ideal acceptor angle'\n  }),\n  donAngleDevMax: PD.Numeric(45, {\n    min: 0,\n    max: 180,\n    step: 1\n  }, {\n    description: 'Max deviation from ideal donor angle'\n  }),\n  accOutOfPlaneAngleMax: PD.Numeric(90, {\n    min: 0,\n    max: 180,\n    step: 1\n  }),\n  donOutOfPlaneAngleMax: PD.Numeric(45, {\n    min: 0,\n    max: 180,\n    step: 1\n  })\n};\n\nvar HydrogenBondsParams = __assign(__assign({}, GeometryParams), {\n  water: PD.Boolean(false, {\n    description: 'Include water-to-water hydrogen bonds'\n  }),\n  sulfurDistanceMax: PD.Numeric(4.1, {\n    min: 1,\n    max: 5,\n    step: 0.1\n  })\n});\n\nvar WeakHydrogenBondsParams = __assign({}, GeometryParams); //\n// Geometric characteristics of hydrogen bonds involving sulfur atoms in proteins\n// https://doi.org/10.1002/prot.22327\n// Satisfying Hydrogen Bonding Potential in Proteins (HBPLUS)\n// https://doi.org/10.1006/jmbi.1994.1334\n// http://www.csb.yale.edu/userguides/datamanip/hbplus/hbplus_descrip.html\n\n\nfunction getUnitValenceModel(structure, unit) {\n  var valenceModel = ValenceModelProvider.get(structure).value;\n  if (!valenceModel) throw Error('expected valence model to be available');\n  var unitValenceModel = valenceModel.get(unit.id);\n  if (!unitValenceModel) throw Error('expected valence model for unit to be available');\n  return unitValenceModel;\n}\n/**\r\n * Potential hydrogen donor\r\n */\n\n\nfunction addUnitHydrogenDonors(structure, unit, builder) {\n  var totalH = getUnitValenceModel(structure, unit).totalH;\n  var elements = unit.elements;\n  var _a = unit.model.atomicConformation,\n      x = _a.x,\n      y = _a.y,\n      z = _a.z;\n  var elementAromaticRingIndices = unit.rings.elementAromaticRingIndices;\n\n  for (var i = 0, il = elements.length; i < il; ++i) {\n    if (elementAromaticRingIndices.has(i)) continue;\n    var element = typeSymbol(unit, i);\n\n    if ( // include both nitrogen atoms in histidine due to\n    // their often ambiguous protonation assignment\n    isHistidineNitrogen(unit, i) || totalH[i] > 0 && (element === \"N\"\n    /* N */\n    || element === \"O\"\n    /* O */\n    || element === \"S\"\n    /* S */\n    )) {\n      builder.add(4\n      /* HydrogenDonor */\n      , 0\n      /* None */\n      , x[elements[i]], y[elements[i]], z[elements[i]], i);\n    }\n  }\n}\n/**\r\n * Weak hydrogen donor.\r\n */\n\n\nfunction addUnitWeakHydrogenDonors(structure, unit, builder) {\n  var totalH = getUnitValenceModel(structure, unit).totalH;\n  var elements = unit.elements;\n  var _a = unit.model.atomicConformation,\n      x = _a.x,\n      y = _a.y,\n      z = _a.z;\n\n  for (var i = 0, il = elements.length; i < il; ++i) {\n    if (typeSymbol(unit, i) === \"C\"\n    /* C */\n    && totalH[i] > 0 && (bondToElementCount(structure, unit, i, \"N\"\n    /* N */\n    ) > 0 || bondToElementCount(structure, unit, i, \"O\"\n    /* O */\n    ) > 0 || inAromaticRingWithElectronNegativeElement(unit, i))) {\n      builder.add(9\n      /* WeakHydrogenDonor */\n      , 0\n      /* None */\n      , x[elements[i]], y[elements[i]], z[elements[i]], i);\n    }\n  }\n}\n\nfunction inAromaticRingWithElectronNegativeElement(unit, index) {\n  var _a = unit.rings,\n      elementAromaticRingIndices = _a.elementAromaticRingIndices,\n      all = _a.all;\n  var ringIndices = elementAromaticRingIndices.get(index);\n  if (ringIndices === undefined) return false;\n\n  for (var i = 0, il = ringIndices.length; i < il; ++i) {\n    var ring = all[ringIndices[i]];\n\n    for (var j = 0, jl = ring.length; j < jl; ++j) {\n      var element = typeSymbol(unit, ring[j]);\n\n      if (element === \"N\"\n      /* N */\n      || element === \"O\"\n      /* O */\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Potential hydrogen acceptor\r\n */\n\n\nfunction addUnitHydrogenAcceptors(structure, unit, builder) {\n  var _a = getUnitValenceModel(structure, unit),\n      charge = _a.charge,\n      implicitH = _a.implicitH,\n      idealGeometry = _a.idealGeometry;\n\n  var elements = unit.elements;\n  var _b = unit.model.atomicConformation,\n      x = _b.x,\n      y = _b.y,\n      z = _b.z;\n  var elementAromaticRingIndices = unit.rings.elementAromaticRingIndices;\n\n  var add = function (i) {\n    builder.add(5\n    /* HydrogenAcceptor */\n    , 0\n    /* None */\n    , x[elements[i]], y[elements[i]], z[elements[i]], i);\n  };\n\n  for (var i = 0, il = elements.length; i < il; ++i) {\n    if (elementAromaticRingIndices.has(i)) continue;\n    var element = typeSymbol(unit, i);\n\n    if (element === \"O\"\n    /* O */\n    ) {\n      // Basically assume all oxygen atoms are acceptors!\n      add(i);\n    } else if (element === \"N\"\n    /* N */\n    ) {\n      if (isHistidineNitrogen(unit, i)) {\n        // include both nitrogen atoms in histidine due to\n        // their often ambiguous protonation assignment\n        add(i);\n      } else if (charge[i] < 1) {\n        // Neutral nitrogen might be an acceptor\n        // It must have at least one lone pair not conjugated\n        var totalBonds = bondCount(structure, unit, i) + implicitH[i];\n        var ig = idealGeometry[i];\n\n        if (ig === 4\n        /* Tetrahedral */\n        && totalBonds < 4 || ig === 3\n        /* Trigonal */\n        && totalBonds < 3 || ig === 2\n        /* Linear */\n        && totalBonds < 2) {\n          add(i);\n        }\n      }\n    } else if (element === \"S\"\n    /* S */\n    ) {\n      var resname = compId(unit, i);\n\n      if (resname === 'CYS' || resname === 'MET' || formalCharge(unit, i) === -1) {\n        add(i);\n      }\n    }\n  }\n}\n\nfunction isWater(unit, index) {\n  return unit.model.atomicHierarchy.derived.residue.moleculeType[unit.residueIndex[unit.elements[index]]] === 2\n  /* Water */\n  ;\n}\n\nfunction isBackbone(unit, index) {\n  return ProteinBackboneAtoms.has(atomId(unit, index));\n}\n\nfunction isRing(unit, index) {\n  return unit.rings.elementRingIndices.has(index);\n}\n\nfunction isHistidineNitrogen(unit, index) {\n  return compId(unit, index) === 'HIS' && typeSymbol(unit, index) === \"N\"\n  /* N */\n  && isRing(unit, index);\n}\n\nfunction isBackboneHydrogenBond(unitA, indexA, unitB, indexB) {\n  return isBackbone(unitA, indexA) && isBackbone(unitB, indexB);\n}\n\nfunction isWaterHydrogenBond(unitA, indexA, unitB, indexB) {\n  return isWater(unitA, indexA) && isWater(unitB, indexB);\n}\n\nfunction isHydrogenBond(ti, tj) {\n  return ti === 5\n  /* HydrogenAcceptor */\n  && tj === 4\n  /* HydrogenDonor */\n  || ti === 4\n  /* HydrogenDonor */\n  && tj === 5\n  /* HydrogenAcceptor */\n  ;\n}\n\nfunction isWeakHydrogenBond(ti, tj) {\n  return ti === 9\n  /* WeakHydrogenDonor */\n  && tj === 5\n  /* HydrogenAcceptor */\n  || ti === 5\n  /* HydrogenAcceptor */\n  && tj === 9\n  /* WeakHydrogenDonor */\n  ;\n}\n\nfunction getGeometryOptions(props) {\n  return {\n    includeBackbone: props.backbone,\n    maxAccAngleDev: degToRad(props.accAngleDevMax),\n    maxDonAngleDev: degToRad(props.donAngleDevMax),\n    maxAccOutOfPlaneAngle: degToRad(props.accOutOfPlaneAngleMax),\n    maxDonOutOfPlaneAngle: degToRad(props.donOutOfPlaneAngleMax)\n  };\n}\n\nfunction getHydrogenBondsOptions(props) {\n  return __assign(__assign({}, getGeometryOptions(props)), {\n    includeWater: props.water,\n    maxSulfurDistSq: props.sulfurDistanceMax * props.sulfurDistanceMax,\n    maxDistSq: props.distanceMax * props.distanceMax\n  });\n}\n\nvar deg120InRad = degToRad(120);\n\nfunction checkGeometry(structure, don, acc, opts) {\n  var donIndex = don.members[don.offsets[don.feature]];\n  var accIndex = acc.members[acc.offsets[acc.feature]];\n  if (!opts.includeBackbone && isBackboneHydrogenBond(don.unit, donIndex, acc.unit, accIndex)) return;\n  var donAngles = calcAngles(structure, don.unit, donIndex, acc.unit, accIndex);\n  var idealDonAngle = AtomGeometryAngles.get(don.idealGeometry[donIndex]) || deg120InRad;\n  if (donAngles.some(function (donAngle) {\n    return Math.abs(idealDonAngle - donAngle) > opts.maxDonAngleDev;\n  })) return;\n\n  if (don.idealGeometry[donIndex] === 3\n  /* Trigonal */\n  ) {\n    var outOfPlane = calcPlaneAngle(structure, don.unit, donIndex, acc.unit, accIndex);\n    if (outOfPlane !== undefined && outOfPlane > opts.maxDonOutOfPlaneAngle) return;\n  }\n\n  var accAngles = calcAngles(structure, acc.unit, accIndex, don.unit, donIndex);\n  var idealAccAngle = AtomGeometryAngles.get(acc.idealGeometry[accIndex]) || deg120InRad; // Do not limit large acceptor angles\n\n  if (accAngles.some(function (accAngle) {\n    return idealAccAngle - accAngle > opts.maxAccAngleDev;\n  })) return;\n\n  if (acc.idealGeometry[accIndex] === 3\n  /* Trigonal */\n  ) {\n    var outOfPlane = calcPlaneAngle(structure, acc.unit, accIndex, don.unit, donIndex);\n    if (outOfPlane !== undefined && outOfPlane > opts.maxAccOutOfPlaneAngle) return;\n  }\n\n  return true;\n}\n\nfunction testHydrogenBond(structure, infoA, infoB, distanceSq, opts) {\n  var typeA = infoA.types[infoA.feature];\n  var typeB = infoB.types[infoB.feature];\n  if (!isHydrogenBond(typeA, typeB)) return;\n\n  var _a = typeB === 5\n  /* HydrogenAcceptor */\n  ? [infoA, infoB] : [infoB, infoA],\n      don = _a[0],\n      acc = _a[1];\n\n  var donIndex = don.members[don.offsets[don.feature]];\n  var accIndex = acc.members[acc.offsets[acc.feature]]; // check if distance is ok depending on non-sulfur-containing hbond\n\n  var maxDistSq = typeSymbol(don.unit, donIndex) === \"S\"\n  /* S */\n  || typeSymbol(acc.unit, accIndex) === \"S\"\n  /* S */\n  ? opts.maxSulfurDistSq : opts.maxDistSq;\n  if (distanceSq > maxDistSq) return;\n  if (!opts.includeWater && isWaterHydrogenBond(don.unit, donIndex, acc.unit, accIndex)) return;\n  if (!checkGeometry(structure, don, acc, opts)) return;\n  return 4\n  /* HydrogenBond */\n  ;\n}\n\nfunction testWeakHydrogenBond(structure, infoA, infoB, distanceSq, opts) {\n  var typeA = infoA.types[infoA.feature];\n  var typeB = infoB.types[infoB.feature];\n  if (!isWeakHydrogenBond(typeA, typeB)) return;\n\n  var _a = typeB === 5\n  /* HydrogenAcceptor */\n  ? [infoA, infoB] : [infoB, infoA],\n      don = _a[0],\n      acc = _a[1];\n\n  if (!checkGeometry(structure, don, acc, opts)) return;\n  return 8\n  /* WeakHydrogenBond */\n  ;\n} //\n\n\nexport var HydrogenDonorProvider = Features.Provider([4\n/* HydrogenDonor */\n], addUnitHydrogenDonors);\nexport var WeakHydrogenDonorProvider = Features.Provider([9\n/* WeakHydrogenDonor */\n], addUnitWeakHydrogenDonors);\nexport var HydrogenAcceptorProvider = Features.Provider([5\n/* HydrogenAcceptor */\n], addUnitHydrogenAcceptors);\nexport var HydrogenBondsProvider = {\n  name: 'hydrogen-bonds',\n  params: HydrogenBondsParams,\n  createTester: function (props) {\n    var maxDistance = Math.max(props.distanceMax, props.sulfurDistanceMax);\n    var opts = getHydrogenBondsOptions(props);\n    return {\n      maxDistance: maxDistance,\n      requiredFeatures: new Set([4\n      /* HydrogenDonor */\n      , 5\n      /* HydrogenAcceptor */\n      ]),\n      getType: function (structure, infoA, infoB, distanceSq) {\n        return testHydrogenBond(structure, infoA, infoB, distanceSq, opts);\n      }\n    };\n  }\n};\nexport var WeakHydrogenBondsProvider = {\n  name: 'weak-hydrogen-bonds',\n  params: WeakHydrogenBondsParams,\n  createTester: function (props) {\n    var opts = getGeometryOptions(props);\n    return {\n      maxDistance: props.distanceMax,\n      requiredFeatures: new Set([9\n      /* WeakHydrogenDonor */\n      , 5\n      /* HydrogenAcceptor */\n      ]),\n      getType: function (structure, infoA, infoB, distanceSq) {\n        return testWeakHydrogenBond(structure, infoA, infoB, distanceSq, opts);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/interactions/hydrogen-bonds.ts"],"names":[],"mappings":"AAAA;;;;;;;AAOG;;AAEH,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AAEA,SAAuB,kBAAvB,EAA2C,UAA3C,EAAuD,cAAvD,QAA6E,uBAA7E;AACA,SAA0B,QAA1B,QAA0C,YAA1C;AACA,SAAS,UAAT,EAAqB,kBAArB,EAAyC,SAAzC,EAAoD,YAApD,EAAkE,MAAlE,EAA0E,MAA1E,QAAwF,mBAAxF;AAEA,SAAS,oBAAT,QAAqC,kBAArC;AACA,SAAS,QAAT,QAAyB,wBAAzB;AAGA,SAAuB,oBAAvB,QAAmD,0CAAnD;AAEA,IAAM,cAAc,GAAG;AACnB,EAAA,WAAW,EAAE,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,CAAf;AAAkB,IAAA,IAAI,EAAE;AAAxB,GAAhB,CADM;AAEnB,EAAA,QAAQ,EAAE,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB;AAAE,IAAA,WAAW,EAAE;AAAf,GAAjB,CAFS;AAGnB,EAAA,cAAc,EAAE,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,GAAf;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAf,EAA8C;AAAE,IAAA,WAAW,EAAE;AAAf,GAA9C,CAHG;AAInB,EAAA,cAAc,EAAE,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,GAAf;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAf,EAA8C;AAAE,IAAA,WAAW,EAAE;AAAf,GAA9C,CAJG;AAKnB,EAAA,qBAAqB,EAAE,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,GAAf;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAf,CALJ;AAMnB,EAAA,qBAAqB,EAAE,EAAE,CAAC,OAAH,CAAW,EAAX,EAAe;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,GAAf;AAAoB,IAAA,IAAI,EAAE;AAA1B,GAAf;AANJ,CAAvB;;AAWA,IAAM,mBAAmB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAClB,cADkB,CAAA,EACJ;AACjB,EAAA,KAAK,EAAE,EAAE,CAAC,OAAH,CAAW,KAAX,EAAkB;AAAE,IAAA,WAAW,EAAE;AAAf,GAAlB,CADU;AAEjB,EAAA,iBAAiB,EAAE,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,CAAf;AAAkB,IAAA,IAAI,EAAE;AAAxB,GAAhB;AAFF,CADI,CAAzB;;AAQA,IAAM,uBAAuB,GAAA,QAAA,CAAA,EAAA,EACtB,cADsB,CAA7B,C,CAMA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA,SAAS,mBAAT,CAA6B,SAA7B,EAAmD,IAAnD,EAAoE;AAChE,MAAM,YAAY,GAAG,oBAAoB,CAAC,GAArB,CAAyB,SAAzB,EAAoC,KAAzD;AACA,MAAI,CAAC,YAAL,EAAmB,MAAM,KAAK,CAAC,wCAAD,CAAX;AACnB,MAAM,gBAAgB,GAAG,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,EAAtB,CAAzB;AACA,MAAI,CAAC,gBAAL,EAAuB,MAAM,KAAK,CAAC,iDAAD,CAAX;AACvB,SAAO,gBAAP;AACH;AAED;;AAEG;;;AACH,SAAS,qBAAT,CAA+B,SAA/B,EAAqD,IAArD,EAAwE,OAAxE,EAAgG;AACpF,MAAA,MAAM,GAAK,mBAAmB,CAAC,SAAD,EAAY,IAAZ,CAAnB,CAAL,MAAN;AACA,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACF,MAAA,EAAA,GAAc,IAAI,CAAC,KAAL,CAAW,kBAAzB;AAAA,MAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,MAAK,CAAC,GAAA,EAAA,CAAA,CAAN;AAAA,MAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;AACE,MAAA,0BAA0B,GAAK,IAAI,CAAC,KAAL,CAAL,0BAA1B;;AAER,OAAK,IAAI,CAAC,GAAG,CAAR,EAAyC,EAAE,GAAG,QAAQ,CAAC,MAA5D,EAAoE,CAAC,GAAG,EAAxE,EAA4E,EAAE,CAA9E,EAAiF;AAC7E,QAAI,0BAA0B,CAAC,GAA3B,CAA+B,CAA/B,CAAJ,EAAuC;AAEvC,QAAM,OAAO,GAAG,UAAU,CAAC,IAAD,EAAO,CAAP,CAA1B;;AACA,QAAI,CACA;AACA;AACA,IAAA,mBAAmB,CAAC,IAAD,EAAO,CAAP,CAHnB,IAKA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ,KACC,OAAO,KAAA;AAAA;AAAP,OAA0B,OAAO,KAAA;AAAA;AAAjC,OAAoD,OAAO,KAAA;AAAA;AAD5D,KALJ,EAOG;AACC,MAAA,OAAO,CAAC,GAAR,CAAW;AAAA;AAAX,QAAW;AAAA;AAAX,QAA0D,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA3D,EAA0E,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA3E,EAA0F,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA3F,EAA0G,CAA1G;AACH;AACJ;AACJ;AAED;;AAEG;;;AACH,SAAS,yBAAT,CAAmC,SAAnC,EAAyD,IAAzD,EAA4E,OAA5E,EAAoG;AACxF,MAAA,MAAM,GAAK,mBAAmB,CAAC,SAAD,EAAY,IAAZ,CAAnB,CAAL,MAAN;AACA,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACF,MAAA,EAAA,GAAc,IAAI,CAAC,KAAL,CAAW,kBAAzB;AAAA,MAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,MAAK,CAAC,GAAA,EAAA,CAAA,CAAN;AAAA,MAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;;AAEN,OAAK,IAAI,CAAC,GAAG,CAAR,EAAyC,EAAE,GAAG,QAAQ,CAAC,MAA5D,EAAoE,CAAC,GAAG,EAAxE,EAA4E,EAAE,CAA9E,EAAiF;AAC7E,QACI,UAAU,CAAC,IAAD,EAAO,CAAP,CAAV,KAAmB;AAAA;AAAnB,OACA,MAAM,CAAC,CAAD,CAAN,GAAY,CADZ,KAGI,kBAAkB,CAAC,SAAD,EAAY,IAAZ,EAAkB,CAAlB,EAAmB;AAAA;AAAnB,KAAlB,GAAqD,CAArD,IACA,kBAAkB,CAAC,SAAD,EAAY,IAAZ,EAAkB,CAAlB,EAAmB;AAAA;AAAnB,KAAlB,GAAqD,CADrD,IAEA,yCAAyC,CAAC,IAAD,EAAO,CAAP,CAL7C,CADJ,EAQE;AACE,MAAA,OAAO,CAAC,GAAR,CAAW;AAAA;AAAX,QAAW;AAAA;AAAX,QAA8D,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA/D,EAA8E,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA/E,EAA8F,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA/F,EAA8G,CAA9G;AACH;AACJ;AACJ;;AAED,SAAS,yCAAT,CAAmD,IAAnD,EAAsE,KAAtE,EAAuG;AAC7F,MAAA,EAAA,GAAsC,IAAI,CAAC,KAA3C;AAAA,MAAE,0BAA0B,GAAA,EAAA,CAAA,0BAA5B;AAAA,MAA8B,GAAG,GAAA,EAAA,CAAA,GAAjC;AACN,MAAM,WAAW,GAAG,0BAA0B,CAAC,GAA3B,CAA+B,KAA/B,CAApB;AACA,MAAI,WAAW,KAAK,SAApB,EAA+B,OAAO,KAAP;;AAE/B,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,WAAW,CAAC,MAAjC,EAAyC,CAAC,GAAG,EAA7C,EAAiD,EAAE,CAAnD,EAAsD;AAClD,QAAM,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAhB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,UAAM,OAAO,GAAG,UAAU,CAAC,IAAD,EAAO,IAAI,CAAC,CAAD,CAAX,CAA1B;;AACA,UAAI,OAAO,KAAA;AAAA;AAAP,SAA0B,OAAO,KAAA;AAAA;AAArC,QAAsD;AAClD,eAAO,IAAP;AACH;AACJ;AACJ;;AACD,SAAO,KAAP;AACH;AAED;;AAEG;;;AACH,SAAS,wBAAT,CAAkC,SAAlC,EAAwD,IAAxD,EAA2E,OAA3E,EAAmG;AACzF,MAAA,EAAA,GAAuC,mBAAmB,CAAC,SAAD,EAAY,IAAZ,CAA1D;AAAA,MAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,MAAU,SAAS,GAAA,EAAA,CAAA,SAAnB;AAAA,MAAqB,aAAa,GAAA,EAAA,CAAA,aAAlC;;AACE,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;AACF,MAAA,EAAA,GAAc,IAAI,CAAC,KAAL,CAAW,kBAAzB;AAAA,MAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,MAAK,CAAC,GAAA,EAAA,CAAA,CAAN;AAAA,MAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;AACE,MAAA,0BAA0B,GAAK,IAAI,CAAC,KAAL,CAAL,0BAA1B;;AAER,MAAM,GAAG,GAAG,UAAC,CAAD,EAA8B;AACtC,IAAA,OAAO,CAAC,GAAR,CAAW;AAAA;AAAX,MAAW;AAAA;AAAX,MAA6D,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA9D,EAA6E,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA9E,EAA6F,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAA9F,EAA6G,CAA7G;AACH,GAFD;;AAIA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAyC,EAAE,GAAG,QAAQ,CAAC,MAA5D,EAAoE,CAAC,GAAG,EAAxE,EAA4E,EAAE,CAA9E,EAAiF;AAC7E,QAAI,0BAA0B,CAAC,GAA3B,CAA+B,CAA/B,CAAJ,EAAuC;AAEvC,QAAM,OAAO,GAAG,UAAU,CAAC,IAAD,EAAO,CAAP,CAA1B;;AACA,QAAI,OAAO,KAAA;AAAA;AAAX,MAA4B;AACxB;AACA,MAAA,GAAG,CAAC,CAAD,CAAH;AACH,KAHD,MAGO,IAAI,OAAO,KAAA;AAAA;AAAX,MAA4B;AAC/B,UAAI,mBAAmB,CAAC,IAAD,EAAO,CAAP,CAAvB,EAAkC;AAC9B;AACA;AACA,QAAA,GAAG,CAAC,CAAD,CAAH;AACH,OAJD,MAIO,IAAI,MAAM,CAAC,CAAD,CAAN,GAAY,CAAhB,EAAmB;AACtB;AACA;AACA,YAAM,UAAU,GAAG,SAAS,CAAC,SAAD,EAAY,IAAZ,EAAkB,CAAlB,CAAT,GAAgC,SAAS,CAAC,CAAD,CAA5D;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,CAAD,CAAxB;;AACA,YACK,EAAE,KAAA;AAAA;AAAF,WAAmC,UAAU,GAAG,CAAjD,IACC,EAAE,KAAA;AAAA;AAAF,WAAgC,UAAU,GAAG,CAD9C,IAEC,EAAE,KAAA;AAAA;AAAF,WAA8B,UAAU,GAAG,CAHhD,EAIE;AACE,UAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACJ;AACJ,KAlBM,MAkBA,IAAI,OAAO,KAAA;AAAA;AAAX,MAA4B;AAC/B,UAAM,OAAO,GAAG,MAAM,CAAC,IAAD,EAAO,CAAP,CAAtB;;AACA,UAAI,OAAO,KAAK,KAAZ,IAAqB,OAAO,KAAK,KAAjC,IAA0C,YAAY,CAAC,IAAD,EAAO,CAAP,CAAZ,KAA0B,CAAC,CAAzE,EAA4E;AACxE,QAAA,GAAG,CAAC,CAAD,CAAH;AACH;AACJ;AACJ;AACJ;;AAED,SAAS,OAAT,CAAiB,IAAjB,EAAoC,KAApC,EAAqE;AACjE,SAAO,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,OAA3B,CAAmC,OAAnC,CAA2C,YAA3C,CAAwD,IAAI,CAAC,YAAL,CAAkB,IAAI,CAAC,QAAL,CAAc,KAAd,CAAlB,CAAxD,MAAgG;AAAA;AAAvG;AACH;;AAED,SAAS,UAAT,CAAoB,IAApB,EAAuC,KAAvC,EAAwE;AACpE,SAAO,oBAAoB,CAAC,GAArB,CAAyB,MAAM,CAAC,IAAD,EAAO,KAAP,CAA/B,CAAP;AACH;;AAED,SAAS,MAAT,CAAgB,IAAhB,EAAmC,KAAnC,EAAoE;AAChE,SAAO,IAAI,CAAC,KAAL,CAAW,kBAAX,CAA8B,GAA9B,CAAkC,KAAlC,CAAP;AACH;;AAED,SAAS,mBAAT,CAA6B,IAA7B,EAAgD,KAAhD,EAAiF;AAC7E,SAAO,MAAM,CAAC,IAAD,EAAO,KAAP,CAAN,KAAwB,KAAxB,IAAiC,UAAU,CAAC,IAAD,EAAO,KAAP,CAAV,KAAuB;AAAA;AAAxD,KAA2E,MAAM,CAAC,IAAD,EAAO,KAAP,CAAxF;AACH;;AAED,SAAS,sBAAT,CAAgC,KAAhC,EAAoD,MAApD,EAAwF,KAAxF,EAA4G,MAA5G,EAA8I;AAC1I,SAAO,UAAU,CAAC,KAAD,EAAQ,MAAR,CAAV,IAA6B,UAAU,CAAC,KAAD,EAAQ,MAAR,CAA9C;AACH;;AAED,SAAS,mBAAT,CAA6B,KAA7B,EAAiD,MAAjD,EAAqF,KAArF,EAAyG,MAAzG,EAA2I;AACvI,SAAO,OAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,IAA0B,OAAO,CAAC,KAAD,EAAQ,MAAR,CAAxC;AACH;;AAED,SAAS,cAAT,CAAwB,EAAxB,EAAyC,EAAzC,EAAwD;AACpD,SACK,EAAE,KAAA;AAAA;AAAF,KAAuC,EAAE,KAAA;AAAA;AAA1C,KACC,EAAE,KAAA;AAAA;AAAF,KAAoC,EAAE,KAAA;AAAA;AAF3C;AAIH;;AAED,SAAS,kBAAT,CAA4B,EAA5B,EAA6C,EAA7C,EAA4D;AACxD,SACK,EAAE,KAAA;AAAA;AAAF,KAAwC,EAAE,KAAA;AAAA;AAA3C,KACC,EAAE,KAAA;AAAA;AAAF,KAAuC,EAAE,KAAA;AAAA;AAF9C;AAIH;;AAED,SAAS,kBAAT,CAA4B,KAA5B,EAAgD;AAC5C,SAAO;AACH,IAAA,eAAe,EAAE,KAAK,CAAC,QADpB;AAEH,IAAA,cAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,cAAP,CAFrB;AAGH,IAAA,cAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,cAAP,CAHrB;AAIH,IAAA,qBAAqB,EAAE,QAAQ,CAAC,KAAK,CAAC,qBAAP,CAJ5B;AAKH,IAAA,qBAAqB,EAAE,QAAQ,CAAC,KAAK,CAAC,qBAAP;AAL5B,GAAP;AAOH;;AAGD,SAAS,uBAAT,CAAiC,KAAjC,EAA0D;AACtD,SAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACO,kBAAkB,CAAC,KAAD,CADzB,CAAA,EACgC;AAC5B,IAAA,YAAY,EAAE,KAAK,CAAC,KADQ;AAE5B,IAAA,eAAe,EAAE,KAAK,CAAC,iBAAN,GAA0B,KAAK,CAAC,iBAFrB;AAG5B,IAAA,SAAS,EAAE,KAAK,CAAC,WAAN,GAAoB,KAAK,CAAC;AAHT,GADhC,CAAA;AAMH;;AAGD,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAD,CAA5B;;AAEA,SAAS,aAAT,CAAuB,SAAvB,EAA6C,GAA7C,EAAiE,GAAjE,EAAqF,IAArF,EAA0G;AAEtG,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAhB,CAAZ,CAAjB;AACA,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAhB,CAAZ,CAAjB;AAEA,MAAI,CAAC,IAAI,CAAC,eAAN,IAAyB,sBAAsB,CAAC,GAAG,CAAC,IAAL,EAAW,QAAX,EAAqB,GAAG,CAAC,IAAzB,EAA+B,QAA/B,CAAnD,EAA6F;AAE7F,MAAM,SAAS,GAAG,UAAU,CAAC,SAAD,EAAY,GAAG,CAAC,IAAhB,EAAsB,QAAtB,EAAgC,GAAG,CAAC,IAApC,EAA0C,QAA1C,CAA5B;AACA,MAAM,aAAa,GAAG,kBAAkB,CAAC,GAAnB,CAAuB,GAAG,CAAC,aAAJ,CAAkB,QAAlB,CAAvB,KAAuD,WAA7E;AACA,MAAI,SAAS,CAAC,IAAV,CAAe,UAAA,QAAA,EAAQ;AAAI,WAAA,IAAI,CAAC,GAAL,CAAS,aAAa,GAAG,QAAzB,IAAqC,IAAI,CAAzC,cAAA;AAAwD,GAAnF,CAAJ,EAA0F;;AAE1F,MAAI,GAAG,CAAC,aAAJ,CAAkB,QAAlB,MAA2B;AAAA;AAA/B,IAA2D;AACvD,QAAM,UAAU,GAAG,cAAc,CAAC,SAAD,EAAY,GAAG,CAAC,IAAhB,EAAsB,QAAtB,EAAgC,GAAG,CAAC,IAApC,EAA0C,QAA1C,CAAjC;AACA,QAAI,UAAU,KAAK,SAAf,IAA4B,UAAU,GAAG,IAAI,CAAC,qBAAlD,EAAyE;AAC5E;;AAED,MAAM,SAAS,GAAG,UAAU,CAAC,SAAD,EAAY,GAAG,CAAC,IAAhB,EAAsB,QAAtB,EAAgC,GAAG,CAAC,IAApC,EAA0C,QAA1C,CAA5B;AACA,MAAM,aAAa,GAAG,kBAAkB,CAAC,GAAnB,CAAuB,GAAG,CAAC,aAAJ,CAAkB,QAAlB,CAAvB,KAAuD,WAA7E,CAjBsG,CAmBtG;;AACA,MAAI,SAAS,CAAC,IAAV,CAAe,UAAA,QAAA,EAAQ;AAAI,WAAA,aAAa,GAAG,QAAhB,GAA2B,IAAI,CAA/B,cAAA;AAA8C,GAAzE,CAAJ,EAAgF;;AAEhF,MAAI,GAAG,CAAC,aAAJ,CAAkB,QAAlB,MAA2B;AAAA;AAA/B,IAA2D;AACvD,QAAM,UAAU,GAAG,cAAc,CAAC,SAAD,EAAY,GAAG,CAAC,IAAhB,EAAsB,QAAtB,EAAgC,GAAG,CAAC,IAApC,EAA0C,QAA1C,CAAjC;AACA,QAAI,UAAU,KAAK,SAAf,IAA4B,UAAU,GAAG,IAAI,CAAC,qBAAlD,EAAyE;AAC5E;;AAED,SAAO,IAAP;AACH;;AAED,SAAS,gBAAT,CAA0B,SAA1B,EAAgD,KAAhD,EAAsE,KAAtE,EAA4F,UAA5F,EAAgH,IAAhH,EAA0I;AACtI,MAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAlB,CAAd;AACA,MAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAlB,CAAd;AAEA,MAAI,CAAC,cAAc,CAAC,KAAD,EAAQ,KAAR,CAAnB,EAAmC;;AAE7B,MAAA,EAAA,GAAa,KAAK,KAAA;AAAA;AAAL,IAAyC,CAAC,KAAD,EAAQ,KAAR,CAAzC,GAA0D,CAAC,KAAD,EAAQ,KAAR,CAAvE;AAAA,MAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;AAAA,MAAM,GAAG,GAAA,EAAA,CAAA,CAAA,CAAT;;AAEN,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAhB,CAAZ,CAAjB;AACA,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,OAAhB,CAAZ,CAAjB,CATsI,CAWtI;;AACA,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,IAAL,EAAW,QAAX,CAAV,KAA8B;AAAA;AAA9B,KAAiD,UAAU,CAAC,GAAG,CAAC,IAAL,EAAW,QAAX,CAAV,KAA8B;AAAA;AAA/E,IAAiG,IAAI,CAAC,eAAtG,GAAwH,IAAI,CAAC,SAA/I;AACA,MAAI,UAAU,GAAG,SAAjB,EAA4B;AAE5B,MAAI,CAAC,IAAI,CAAC,YAAN,IAAsB,mBAAmB,CAAC,GAAG,CAAC,IAAL,EAAW,QAAX,EAAqB,GAAG,CAAC,IAAzB,EAA+B,QAA/B,CAA7C,EAAuF;AAEvF,MAAI,CAAC,aAAa,CAAC,SAAD,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,CAAlB,EAA+C;AAE/C,SAAA;AAAA;AAAA;AACH;;AAED,SAAS,oBAAT,CAA8B,SAA9B,EAAoD,KAApD,EAA0E,KAA1E,EAAgG,UAAhG,EAAoH,IAApH,EAAyI;AACrI,MAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAlB,CAAd;AACA,MAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAlB,CAAd;AAEA,MAAI,CAAC,kBAAkB,CAAC,KAAD,EAAQ,KAAR,CAAvB,EAAuC;;AAEjC,MAAA,EAAA,GAAa,KAAK,KAAA;AAAA;AAAL,IAAyC,CAAC,KAAD,EAAQ,KAAR,CAAzC,GAA0D,CAAC,KAAD,EAAQ,KAAR,CAAvE;AAAA,MAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;AAAA,MAAM,GAAG,GAAA,EAAA,CAAA,CAAA,CAAT;;AAEN,MAAI,CAAC,aAAa,CAAC,SAAD,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,CAAlB,EAA+C;AAE/C,SAAA;AAAA;AAAA;AACH,C,CAED;;;AAEA,OAAO,IAAM,qBAAqB,GAAG,QAAQ,CAAC,QAAT,CAAkB,CAAA;AAAA;AAAA,CAAlB,EAA+C,qBAA/C,CAA9B;AACP,OAAO,IAAM,yBAAyB,GAAG,QAAQ,CAAC,QAAT,CAAkB,CAAA;AAAA;AAAA,CAAlB,EAAmD,yBAAnD,CAAlC;AACP,OAAO,IAAM,wBAAwB,GAAG,QAAQ,CAAC,QAAT,CAAkB,CAAA;AAAA;AAAA,CAAlB,EAAkD,wBAAlD,CAAjC;AAEP,OAAO,IAAM,qBAAqB,GAAyC;AACvE,EAAA,IAAI,EAAE,gBADiE;AAEvE,EAAA,MAAM,EAAE,mBAF+D;AAGvE,EAAA,YAAY,EAAE,UAAC,KAAD,EAA0B;AACpC,QAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,WAAf,EAA4B,KAAK,CAAC,iBAAlC,CAApB;AACA,QAAM,IAAI,GAAG,uBAAuB,CAAC,KAAD,CAApC;AACA,WAAO;AACH,MAAA,WAAW,EAAA,WADR;AAEH,MAAA,gBAAgB,EAAE,IAAI,GAAJ,CAAQ,CAAA;AAAA;AAAA,QAAA;AAAA;AAAA,OAAR,CAFf;AAGH,MAAA,OAAO,EAAE,UAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,UAA1B,EAAoC;AAAK,eAAA,gBAAgB,CAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,UAA1B,EAAhB,IAAgB,CAAhB;AAA2D;AAH1G,KAAP;AAKH;AAXsE,CAApE;AAcP,OAAO,IAAM,yBAAyB,GAA6C;AAC/E,EAAA,IAAI,EAAE,qBADyE;AAE/E,EAAA,MAAM,EAAE,uBAFuE;AAG/E,EAAA,YAAY,EAAE,UAAC,KAAD,EAA8B;AACxC,QAAM,IAAI,GAAG,kBAAkB,CAAC,KAAD,CAA/B;AACA,WAAO;AACH,MAAA,WAAW,EAAE,KAAK,CAAC,WADhB;AAEH,MAAA,gBAAgB,EAAE,IAAI,GAAJ,CAAQ,CAAA;AAAA;AAAA,QAAA;AAAA;AAAA,OAAR,CAFf;AAGH,MAAA,OAAO,EAAE,UAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,UAA1B,EAAoC;AAAK,eAAA,oBAAoB,CAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,UAA1B,EAApB,IAAoB,CAApB;AAA+D;AAH9G,KAAP;AAKH;AAV8E,CAA5E","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Fred Ludlow <Fred.Ludlow@astx.com>\r\n *\r\n * based in part on NGL (https://github.com/arose/ngl)\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { AtomGeometryAngles, calcAngles, calcPlaneAngle } from '../chemistry/geometry';\r\nimport { Features } from './features';\r\nimport { typeSymbol, bondToElementCount, bondCount, formalCharge, compId, atomId } from '../chemistry/util';\r\nimport { ValenceModelProvider } from '../valence-model';\r\nimport { degToRad } from '../../../mol-math/misc';\r\nimport { ProteinBackboneAtoms } from '../../../mol-model/structure/model/types';\r\nvar GeometryParams = {\r\n    distanceMax: PD.Numeric(3.5, { min: 1, max: 5, step: 0.1 }),\r\n    backbone: PD.Boolean(true, { description: 'Include backbone-to-backbone hydrogen bonds' }),\r\n    accAngleDevMax: PD.Numeric(45, { min: 0, max: 180, step: 1 }, { description: 'Max deviation from ideal acceptor angle' }),\r\n    donAngleDevMax: PD.Numeric(45, { min: 0, max: 180, step: 1 }, { description: 'Max deviation from ideal donor angle' }),\r\n    accOutOfPlaneAngleMax: PD.Numeric(90, { min: 0, max: 180, step: 1 }),\r\n    donOutOfPlaneAngleMax: PD.Numeric(45, { min: 0, max: 180, step: 1 }),\r\n};\r\nvar HydrogenBondsParams = __assign(__assign({}, GeometryParams), { water: PD.Boolean(false, { description: 'Include water-to-water hydrogen bonds' }), sulfurDistanceMax: PD.Numeric(4.1, { min: 1, max: 5, step: 0.1 }) });\r\nvar WeakHydrogenBondsParams = __assign({}, GeometryParams);\r\n//\r\n// Geometric characteristics of hydrogen bonds involving sulfur atoms in proteins\r\n// https://doi.org/10.1002/prot.22327\r\n// Satisfying Hydrogen Bonding Potential in Proteins (HBPLUS)\r\n// https://doi.org/10.1006/jmbi.1994.1334\r\n// http://www.csb.yale.edu/userguides/datamanip/hbplus/hbplus_descrip.html\r\nfunction getUnitValenceModel(structure, unit) {\r\n    var valenceModel = ValenceModelProvider.get(structure).value;\r\n    if (!valenceModel)\r\n        throw Error('expected valence model to be available');\r\n    var unitValenceModel = valenceModel.get(unit.id);\r\n    if (!unitValenceModel)\r\n        throw Error('expected valence model for unit to be available');\r\n    return unitValenceModel;\r\n}\r\n/**\r\n * Potential hydrogen donor\r\n */\r\nfunction addUnitHydrogenDonors(structure, unit, builder) {\r\n    var totalH = getUnitValenceModel(structure, unit).totalH;\r\n    var elements = unit.elements;\r\n    var _a = unit.model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n    var elementAromaticRingIndices = unit.rings.elementAromaticRingIndices;\r\n    for (var i = 0, il = elements.length; i < il; ++i) {\r\n        if (elementAromaticRingIndices.has(i))\r\n            continue;\r\n        var element = typeSymbol(unit, i);\r\n        if ((\r\n        // include both nitrogen atoms in histidine due to\r\n        // their often ambiguous protonation assignment\r\n        isHistidineNitrogen(unit, i)) || (totalH[i] > 0 &&\r\n            (element === \"N\" /* N */ || element === \"O\" /* O */ || element === \"S\" /* S */))) {\r\n            builder.add(4 /* HydrogenDonor */, 0 /* None */, x[elements[i]], y[elements[i]], z[elements[i]], i);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Weak hydrogen donor.\r\n */\r\nfunction addUnitWeakHydrogenDonors(structure, unit, builder) {\r\n    var totalH = getUnitValenceModel(structure, unit).totalH;\r\n    var elements = unit.elements;\r\n    var _a = unit.model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n    for (var i = 0, il = elements.length; i < il; ++i) {\r\n        if (typeSymbol(unit, i) === \"C\" /* C */ &&\r\n            totalH[i] > 0 &&\r\n            (bondToElementCount(structure, unit, i, \"N\" /* N */) > 0 ||\r\n                bondToElementCount(structure, unit, i, \"O\" /* O */) > 0 ||\r\n                inAromaticRingWithElectronNegativeElement(unit, i))) {\r\n            builder.add(9 /* WeakHydrogenDonor */, 0 /* None */, x[elements[i]], y[elements[i]], z[elements[i]], i);\r\n        }\r\n    }\r\n}\r\nfunction inAromaticRingWithElectronNegativeElement(unit, index) {\r\n    var _a = unit.rings, elementAromaticRingIndices = _a.elementAromaticRingIndices, all = _a.all;\r\n    var ringIndices = elementAromaticRingIndices.get(index);\r\n    if (ringIndices === undefined)\r\n        return false;\r\n    for (var i = 0, il = ringIndices.length; i < il; ++i) {\r\n        var ring = all[ringIndices[i]];\r\n        for (var j = 0, jl = ring.length; j < jl; ++j) {\r\n            var element = typeSymbol(unit, ring[j]);\r\n            if (element === \"N\" /* N */ || element === \"O\" /* O */) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Potential hydrogen acceptor\r\n */\r\nfunction addUnitHydrogenAcceptors(structure, unit, builder) {\r\n    var _a = getUnitValenceModel(structure, unit), charge = _a.charge, implicitH = _a.implicitH, idealGeometry = _a.idealGeometry;\r\n    var elements = unit.elements;\r\n    var _b = unit.model.atomicConformation, x = _b.x, y = _b.y, z = _b.z;\r\n    var elementAromaticRingIndices = unit.rings.elementAromaticRingIndices;\r\n    var add = function (i) {\r\n        builder.add(5 /* HydrogenAcceptor */, 0 /* None */, x[elements[i]], y[elements[i]], z[elements[i]], i);\r\n    };\r\n    for (var i = 0, il = elements.length; i < il; ++i) {\r\n        if (elementAromaticRingIndices.has(i))\r\n            continue;\r\n        var element = typeSymbol(unit, i);\r\n        if (element === \"O\" /* O */) {\r\n            // Basically assume all oxygen atoms are acceptors!\r\n            add(i);\r\n        }\r\n        else if (element === \"N\" /* N */) {\r\n            if (isHistidineNitrogen(unit, i)) {\r\n                // include both nitrogen atoms in histidine due to\r\n                // their often ambiguous protonation assignment\r\n                add(i);\r\n            }\r\n            else if (charge[i] < 1) {\r\n                // Neutral nitrogen might be an acceptor\r\n                // It must have at least one lone pair not conjugated\r\n                var totalBonds = bondCount(structure, unit, i) + implicitH[i];\r\n                var ig = idealGeometry[i];\r\n                if ((ig === 4 /* Tetrahedral */ && totalBonds < 4) ||\r\n                    (ig === 3 /* Trigonal */ && totalBonds < 3) ||\r\n                    (ig === 2 /* Linear */ && totalBonds < 2)) {\r\n                    add(i);\r\n                }\r\n            }\r\n        }\r\n        else if (element === \"S\" /* S */) {\r\n            var resname = compId(unit, i);\r\n            if (resname === 'CYS' || resname === 'MET' || formalCharge(unit, i) === -1) {\r\n                add(i);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isWater(unit, index) {\r\n    return unit.model.atomicHierarchy.derived.residue.moleculeType[unit.residueIndex[unit.elements[index]]] === 2 /* Water */;\r\n}\r\nfunction isBackbone(unit, index) {\r\n    return ProteinBackboneAtoms.has(atomId(unit, index));\r\n}\r\nfunction isRing(unit, index) {\r\n    return unit.rings.elementRingIndices.has(index);\r\n}\r\nfunction isHistidineNitrogen(unit, index) {\r\n    return compId(unit, index) === 'HIS' && typeSymbol(unit, index) === \"N\" /* N */ && isRing(unit, index);\r\n}\r\nfunction isBackboneHydrogenBond(unitA, indexA, unitB, indexB) {\r\n    return isBackbone(unitA, indexA) && isBackbone(unitB, indexB);\r\n}\r\nfunction isWaterHydrogenBond(unitA, indexA, unitB, indexB) {\r\n    return isWater(unitA, indexA) && isWater(unitB, indexB);\r\n}\r\nfunction isHydrogenBond(ti, tj) {\r\n    return ((ti === 5 /* HydrogenAcceptor */ && tj === 4 /* HydrogenDonor */) ||\r\n        (ti === 4 /* HydrogenDonor */ && tj === 5 /* HydrogenAcceptor */));\r\n}\r\nfunction isWeakHydrogenBond(ti, tj) {\r\n    return ((ti === 9 /* WeakHydrogenDonor */ && tj === 5 /* HydrogenAcceptor */) ||\r\n        (ti === 5 /* HydrogenAcceptor */ && tj === 9 /* WeakHydrogenDonor */));\r\n}\r\nfunction getGeometryOptions(props) {\r\n    return {\r\n        includeBackbone: props.backbone,\r\n        maxAccAngleDev: degToRad(props.accAngleDevMax),\r\n        maxDonAngleDev: degToRad(props.donAngleDevMax),\r\n        maxAccOutOfPlaneAngle: degToRad(props.accOutOfPlaneAngleMax),\r\n        maxDonOutOfPlaneAngle: degToRad(props.donOutOfPlaneAngleMax),\r\n    };\r\n}\r\nfunction getHydrogenBondsOptions(props) {\r\n    return __assign(__assign({}, getGeometryOptions(props)), { includeWater: props.water, maxSulfurDistSq: props.sulfurDistanceMax * props.sulfurDistanceMax, maxDistSq: props.distanceMax * props.distanceMax });\r\n}\r\nvar deg120InRad = degToRad(120);\r\nfunction checkGeometry(structure, don, acc, opts) {\r\n    var donIndex = don.members[don.offsets[don.feature]];\r\n    var accIndex = acc.members[acc.offsets[acc.feature]];\r\n    if (!opts.includeBackbone && isBackboneHydrogenBond(don.unit, donIndex, acc.unit, accIndex))\r\n        return;\r\n    var donAngles = calcAngles(structure, don.unit, donIndex, acc.unit, accIndex);\r\n    var idealDonAngle = AtomGeometryAngles.get(don.idealGeometry[donIndex]) || deg120InRad;\r\n    if (donAngles.some(function (donAngle) { return Math.abs(idealDonAngle - donAngle) > opts.maxDonAngleDev; }))\r\n        return;\r\n    if (don.idealGeometry[donIndex] === 3 /* Trigonal */) {\r\n        var outOfPlane = calcPlaneAngle(structure, don.unit, donIndex, acc.unit, accIndex);\r\n        if (outOfPlane !== undefined && outOfPlane > opts.maxDonOutOfPlaneAngle)\r\n            return;\r\n    }\r\n    var accAngles = calcAngles(structure, acc.unit, accIndex, don.unit, donIndex);\r\n    var idealAccAngle = AtomGeometryAngles.get(acc.idealGeometry[accIndex]) || deg120InRad;\r\n    // Do not limit large acceptor angles\r\n    if (accAngles.some(function (accAngle) { return idealAccAngle - accAngle > opts.maxAccAngleDev; }))\r\n        return;\r\n    if (acc.idealGeometry[accIndex] === 3 /* Trigonal */) {\r\n        var outOfPlane = calcPlaneAngle(structure, acc.unit, accIndex, don.unit, donIndex);\r\n        if (outOfPlane !== undefined && outOfPlane > opts.maxAccOutOfPlaneAngle)\r\n            return;\r\n    }\r\n    return true;\r\n}\r\nfunction testHydrogenBond(structure, infoA, infoB, distanceSq, opts) {\r\n    var typeA = infoA.types[infoA.feature];\r\n    var typeB = infoB.types[infoB.feature];\r\n    if (!isHydrogenBond(typeA, typeB))\r\n        return;\r\n    var _a = typeB === 5 /* HydrogenAcceptor */ ? [infoA, infoB] : [infoB, infoA], don = _a[0], acc = _a[1];\r\n    var donIndex = don.members[don.offsets[don.feature]];\r\n    var accIndex = acc.members[acc.offsets[acc.feature]];\r\n    // check if distance is ok depending on non-sulfur-containing hbond\r\n    var maxDistSq = typeSymbol(don.unit, donIndex) === \"S\" /* S */ || typeSymbol(acc.unit, accIndex) === \"S\" /* S */ ? opts.maxSulfurDistSq : opts.maxDistSq;\r\n    if (distanceSq > maxDistSq)\r\n        return;\r\n    if (!opts.includeWater && isWaterHydrogenBond(don.unit, donIndex, acc.unit, accIndex))\r\n        return;\r\n    if (!checkGeometry(structure, don, acc, opts))\r\n        return;\r\n    return 4 /* HydrogenBond */;\r\n}\r\nfunction testWeakHydrogenBond(structure, infoA, infoB, distanceSq, opts) {\r\n    var typeA = infoA.types[infoA.feature];\r\n    var typeB = infoB.types[infoB.feature];\r\n    if (!isWeakHydrogenBond(typeA, typeB))\r\n        return;\r\n    var _a = typeB === 5 /* HydrogenAcceptor */ ? [infoA, infoB] : [infoB, infoA], don = _a[0], acc = _a[1];\r\n    if (!checkGeometry(structure, don, acc, opts))\r\n        return;\r\n    return 8 /* WeakHydrogenBond */;\r\n}\r\n//\r\nexport var HydrogenDonorProvider = Features.Provider([4 /* HydrogenDonor */], addUnitHydrogenDonors);\r\nexport var WeakHydrogenDonorProvider = Features.Provider([9 /* WeakHydrogenDonor */], addUnitWeakHydrogenDonors);\r\nexport var HydrogenAcceptorProvider = Features.Provider([5 /* HydrogenAcceptor */], addUnitHydrogenAcceptors);\r\nexport var HydrogenBondsProvider = {\r\n    name: 'hydrogen-bonds',\r\n    params: HydrogenBondsParams,\r\n    createTester: function (props) {\r\n        var maxDistance = Math.max(props.distanceMax, props.sulfurDistanceMax);\r\n        var opts = getHydrogenBondsOptions(props);\r\n        return {\r\n            maxDistance: maxDistance,\r\n            requiredFeatures: new Set([4 /* HydrogenDonor */, 5 /* HydrogenAcceptor */]),\r\n            getType: function (structure, infoA, infoB, distanceSq) { return testHydrogenBond(structure, infoA, infoB, distanceSq, opts); }\r\n        };\r\n    }\r\n};\r\nexport var WeakHydrogenBondsProvider = {\r\n    name: 'weak-hydrogen-bonds',\r\n    params: WeakHydrogenBondsParams,\r\n    createTester: function (props) {\r\n        var opts = getGeometryOptions(props);\r\n        return {\r\n            maxDistance: props.distanceMax,\r\n            requiredFeatures: new Set([9 /* WeakHydrogenDonor */, 5 /* HydrogenAcceptor */]),\r\n            getType: function (structure, infoA, infoB, distanceSq) { return testWeakHydrogenBond(structure, infoA, infoB, distanceSq, opts); }\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=hydrogen-bonds.js.map"]},"metadata":{},"sourceType":"module"}