{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Structure, Unit, StructureElement } from '../../mol-model/structure';\nimport { Visual } from '../visual';\nimport { Geometry } from '../../mol-geo/geometry/geometry';\nimport { Theme } from '../../mol-theme/theme';\nimport { createUnitsTransform, includesUnitKind } from './visual/util/common';\nimport { createRenderObject } from '../../mol-gl/render-object';\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\nimport { Interval } from '../../mol-data/int';\nimport { VisualUpdateState } from '../util';\nimport { ColorTheme } from '../../mol-theme/color';\nimport { createMarkers } from '../../mol-geo/geometry/marker-data';\nimport { MarkerAction } from '../../mol-util/marker-action';\nimport { ValueCell, deepEqual } from '../../mol-util';\nimport { createSizes } from '../../mol-geo/geometry/size-data';\nimport { createColors } from '../../mol-geo/geometry/color-data';\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\nimport { SizeTheme } from '../../mol-theme/size';\nimport { Spheres } from '../../mol-geo/geometry/spheres/spheres';\nimport { Cylinders } from '../../mol-geo/geometry/cylinders/cylinders';\nimport { Points } from '../../mol-geo/geometry/points/points';\nimport { Lines } from '../../mol-geo/geometry/lines/lines';\nimport { Text } from '../../mol-geo/geometry/text/text';\nimport { DirectVolume } from '../../mol-geo/geometry/direct-volume/direct-volume';\nimport { TextureMesh } from '../../mol-geo/geometry/texture-mesh/texture-mesh';\nimport { StructureParams, StructureMeshParams, StructureSpheresParams, StructurePointsParams, StructureLinesParams, StructureTextParams, StructureDirectVolumeParams, StructureTextureMeshParams, StructureCylindersParams } from './params';\nimport { isPromiseLike } from '../../mol-util/type-helpers';\n\nfunction createUnitsRenderObject(structureGroup, geometry, locationIt, theme, props, materialId) {\n  var _a = Geometry.getUtils(geometry),\n      createValues = _a.createValues,\n      createRenderableState = _a.createRenderableState;\n\n  var transform = createUnitsTransform(structureGroup, props.includeParent);\n  var values = createValues(geometry, transform, locationIt, theme, props);\n  var state = createRenderableState(props);\n  return createRenderObject(geometry.kind, values, state, materialId);\n}\n\nexport function UnitsVisual(builder, materialId) {\n  var defaultProps = builder.defaultProps,\n      createGeometry = builder.createGeometry,\n      createLocationIterator = builder.createLocationIterator,\n      getLoci = builder.getLoci,\n      eachLocation = builder.eachLocation,\n      setUpdateState = builder.setUpdateState,\n      mustRecreate = builder.mustRecreate,\n      processValues = builder.processValues,\n      dispose = builder.dispose;\n  var _a = builder.geometryUtils,\n      createEmptyGeometry = _a.createEmpty,\n      updateValues = _a.updateValues,\n      updateBoundingSphere = _a.updateBoundingSphere,\n      updateRenderableState = _a.updateRenderableState,\n      createPositionIterator = _a.createPositionIterator;\n  var updateState = VisualUpdateState.create();\n  var previousMark = {\n    loci: EmptyLoci,\n    action: MarkerAction.None,\n    status: -1\n  };\n  var renderObject;\n  var newProps = Object.assign({}, defaultProps);\n  var newTheme = Theme.createEmpty();\n  var newStructureGroup;\n  var currentProps;\n  var currentTheme;\n  var currentStructureGroup;\n  var geometry;\n  var locationIt;\n  var positionIt;\n\n  function prepareUpdate(theme, props, structureGroup) {\n    if (!structureGroup && !currentStructureGroup) {\n      throw new Error('missing structureGroup');\n    }\n\n    newProps = props;\n    newTheme = theme;\n    newStructureGroup = structureGroup;\n    VisualUpdateState.reset(updateState);\n\n    if (!renderObject || !currentStructureGroup) {\n      // console.log('create new');\n      updateState.createNew = true;\n      updateState.createGeometry = true;\n      return;\n    }\n\n    setUpdateState(updateState, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n\n    if (!Structure.areHierarchiesEqual(currentStructureGroup.structure, newStructureGroup.structure)) {\n      // console.log('new hierarchy');\n      updateState.updateTransform = true;\n      updateState.updateColor = true;\n      updateState.updateSize = true;\n    }\n\n    if (!ColorTheme.areEqual(newTheme.color, currentTheme.color)) {\n      // console.log('new colorTheme');\n      updateState.updateColor = true;\n    }\n\n    if (currentStructureGroup.structure.child !== newStructureGroup.structure.child) {\n      // console.log('new child');\n      updateState.createGeometry = true;\n    }\n\n    if (!deepEqual(newProps.unitKinds, currentProps.unitKinds)) {\n      // console.log('new unitKinds');\n      updateState.createGeometry = true;\n    }\n\n    if (newStructureGroup.group.transformHash !== currentStructureGroup.group.transformHash) {\n      // console.log('new transformHash');\n      if (newStructureGroup.group.units.length !== currentStructureGroup.group.units.length || updateState.updateColor) {\n        updateState.updateTransform = true;\n      } else {\n        updateState.updateMatrix = true;\n      }\n    } // check if the operator or conformation of unit has changed\n\n\n    var newUnit = newStructureGroup.group.units[0];\n    var currentUnit = currentStructureGroup.group.units[0];\n\n    if (!Unit.areOperatorsEqual(newUnit, currentUnit)) {\n      // console.log('new operators');\n      updateState.updateTransform = true;\n    }\n\n    if (!Unit.areConformationsEqual(newUnit, currentUnit)) {\n      // console.log('new conformation');\n      updateState.createGeometry = true;\n    }\n\n    if (updateState.updateTransform) {\n      updateState.updateMatrix = true;\n    }\n\n    if (updateState.updateSize && !('uSize' in renderObject.values)) {\n      updateState.createGeometry = true;\n    }\n\n    if (updateState.createGeometry || updateState.updateTransform) {\n      if (currentStructureGroup.structure.hashCode !== newStructureGroup.structure.hashCode) {\n        // console.log('new hashCode');\n        updateState.updateColor = true;\n        updateState.updateSize = true;\n      }\n\n      if (newTheme.color.granularity.startsWith('vertex') || renderObject.values.dColorType.ref.value.startsWith('vertex') || newTheme.color.granularity.startsWith('volume') || renderObject.values.dColorType.ref.value.startsWith('volume')) {\n        updateState.updateColor = true;\n      }\n    }\n  }\n\n  function update(newGeometry) {\n    if (updateState.createNew) {\n      locationIt = createLocationIterator(newStructureGroup);\n\n      if (newGeometry) {\n        renderObject = createUnitsRenderObject(newStructureGroup, newGeometry, locationIt, newTheme, newProps, materialId);\n        positionIt = createPositionIterator(newGeometry, renderObject.values);\n      } else {\n        throw new Error('expected geometry to be given');\n      }\n    } else {\n      if (!renderObject) {\n        throw new Error('expected renderObject to be available');\n      }\n\n      if (updateState.updateTransform) {\n        // console.log('update transform');\n        locationIt = createLocationIterator(newStructureGroup);\n        var instanceCount = locationIt.instanceCount,\n            groupCount = locationIt.groupCount;\n        createMarkers(instanceCount * groupCount, renderObject.values);\n      }\n\n      if (updateState.updateMatrix) {\n        // console.log('update matrix');\n        createUnitsTransform(newStructureGroup, newProps.includeParent, renderObject.values);\n      }\n\n      if (updateState.createGeometry) {\n        // console.log('update geometry');\n        if (newGeometry) {\n          ValueCell.updateIfChanged(renderObject.values.drawCount, Geometry.getDrawCount(newGeometry));\n          ValueCell.updateIfChanged(renderObject.values.uVertexCount, Geometry.getVertexCount(newGeometry));\n        } else {\n          throw new Error('expected geometry to be given');\n        }\n      }\n\n      if (updateState.updateTransform || updateState.createGeometry) {\n        updateBoundingSphere(renderObject.values, newGeometry || geometry);\n        positionIt = createPositionIterator(newGeometry || geometry, renderObject.values);\n      }\n\n      if (updateState.updateSize) {\n        // not all geometries have size data, so check here\n        if ('uSize' in renderObject.values) {\n          // console.log('update size');\n          createSizes(locationIt, newTheme.size, renderObject.values);\n        }\n      }\n\n      if (updateState.updateColor) {\n        // console.log('update color');\n        createColors(locationIt, positionIt, newTheme.color, renderObject.values);\n      }\n\n      updateValues(renderObject.values, newProps);\n      updateRenderableState(renderObject.state, newProps);\n    }\n\n    currentProps = newProps;\n    currentTheme = newTheme;\n    currentStructureGroup = newStructureGroup;\n    if (newGeometry) geometry = newGeometry;\n  }\n\n  function _createGeometry(ctx, unit, structure, theme, props, geometry) {\n    return includesUnitKind(props.unitKinds, unit) ? createGeometry(ctx, unit, structure, theme, props, geometry) : createEmptyGeometry(geometry);\n  }\n\n  function lociIsSuperset(loci) {\n    if (isEveryLoci(loci)) return true;\n    if (Structure.isLoci(loci) && Structure.areRootsEquivalent(loci.structure, currentStructureGroup.structure)) return true;\n\n    if (StructureElement.Loci.is(loci) && Structure.areRootsEquivalent(loci.structure, currentStructureGroup.structure)) {\n      if (StructureElement.Loci.isWholeStructure(loci)) return true;\n    }\n\n    return false;\n  }\n\n  function lociApply(loci, apply, isMarking) {\n    if (lociIsSuperset(loci)) {\n      return apply(Interval.ofBounds(0, locationIt.groupCount * locationIt.instanceCount));\n    } else {\n      return eachLocation(loci, currentStructureGroup, apply, isMarking);\n    }\n  }\n\n  function finalize(ctx) {\n    if (renderObject) {\n      processValues === null || processValues === void 0 ? void 0 : processValues(renderObject.values, geometry, currentProps, currentTheme, ctx.webgl);\n    }\n  }\n\n  return {\n    get groupCount() {\n      return locationIt ? locationIt.count : 0;\n    },\n\n    get renderObject() {\n      return locationIt && locationIt.count ? renderObject : undefined;\n    },\n\n    createOrUpdate: function (ctx, theme, props, structureGroup) {\n      prepareUpdate(theme, props, structureGroup || currentStructureGroup);\n\n      if (updateState.createGeometry) {\n        var newGeometry = _createGeometry(ctx, newStructureGroup.group.units[0], newStructureGroup.structure, newTheme, newProps, geometry);\n\n        if (isPromiseLike(newGeometry)) {\n          return newGeometry.then(function (g) {\n            update(g);\n            finalize(ctx);\n          });\n        }\n\n        update(newGeometry);\n      } else {\n        update();\n      }\n\n      finalize(ctx);\n    },\n    getLoci: function (pickingId) {\n      return renderObject ? getLoci(pickingId, currentStructureGroup, renderObject.id) : EmptyLoci;\n    },\n    mark: function (loci, action) {\n      var hasInvariantId = true;\n\n      if (StructureElement.Loci.is(loci)) {\n        hasInvariantId = false;\n        var invariantId = currentStructureGroup.group.units[0].invariantId;\n\n        for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n          var e = _a[_i];\n\n          if (e.unit.invariantId === invariantId) {\n            hasInvariantId = true;\n            break;\n          }\n        }\n      }\n\n      return hasInvariantId ? Visual.mark(renderObject, loci, action, lociApply, previousMark) : false;\n    },\n    setVisibility: function (visible) {\n      Visual.setVisibility(renderObject, visible);\n    },\n    setAlphaFactor: function (alphaFactor) {\n      Visual.setAlphaFactor(renderObject, alphaFactor);\n    },\n    setPickable: function (pickable) {\n      Visual.setPickable(renderObject, pickable);\n    },\n    setColorOnly: function (colorOnly) {\n      Visual.setColorOnly(renderObject, colorOnly);\n    },\n    setTransform: function (matrix, instanceMatrices) {\n      Visual.setTransform(renderObject, matrix, instanceMatrices);\n    },\n    setOverpaint: function (overpaint) {\n      Visual.setOverpaint(renderObject, overpaint, lociApply, true);\n    },\n    setTransparency: function (transparency) {\n      Visual.setTransparency(renderObject, transparency, lociApply, true);\n    },\n    setClipping: function (clipping) {\n      Visual.setClipping(renderObject, clipping, lociApply, true);\n    },\n    destroy: function () {\n      dispose === null || dispose === void 0 ? void 0 : dispose(geometry);\n\n      if (renderObject) {\n        renderObject.state.disposed = true;\n        renderObject = undefined;\n      }\n    },\n    mustRecreate: mustRecreate\n  };\n} // mesh\n\nexport var UnitsMeshParams = __assign(__assign({}, StructureMeshParams), StructureParams);\nexport function UnitsMeshVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.createGeometry = true;\n    },\n    geometryUtils: Mesh.Utils\n  }), materialId);\n} // spheres\n\nexport var UnitsSpheresParams = __assign(__assign({}, StructureSpheresParams), StructureParams);\nexport function UnitsSpheresVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.updateSize = true;\n    },\n    geometryUtils: Spheres.Utils\n  }), materialId);\n} // cylinders\n\nexport var UnitsCylindersParams = __assign(__assign({}, StructureCylindersParams), StructureParams);\nexport function UnitsCylindersVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.updateSize = true;\n    },\n    geometryUtils: Cylinders.Utils\n  }), materialId);\n} // points\n\nexport var UnitsPointsParams = __assign(__assign({}, StructurePointsParams), StructureParams);\nexport function UnitsPointsVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.updateSize = true;\n    },\n    geometryUtils: Points.Utils\n  }), materialId);\n} // lines\n\nexport var UnitsLinesParams = __assign(__assign({}, StructureLinesParams), StructureParams);\nexport function UnitsLinesVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.updateSize = true;\n    },\n    geometryUtils: Lines.Utils\n  }), materialId);\n} // text\n\nexport var UnitsTextParams = __assign(__assign({}, StructureTextParams), StructureParams);\nexport function UnitsTextVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.updateSize = true;\n      if (newProps.background !== currentProps.background) state.createGeometry = true;\n      if (newProps.backgroundMargin !== currentProps.backgroundMargin) state.createGeometry = true;\n      if (newProps.tether !== currentProps.tether) state.createGeometry = true;\n      if (newProps.tetherLength !== currentProps.tetherLength) state.createGeometry = true;\n      if (newProps.tetherBaseWidth !== currentProps.tetherBaseWidth) state.createGeometry = true;\n      if (newProps.attachment !== currentProps.attachment) state.createGeometry = true;\n      if (newProps.fontFamily !== currentProps.fontFamily) state.createGeometry = true;\n      if (newProps.fontQuality !== currentProps.fontQuality) state.createGeometry = true;\n      if (newProps.fontStyle !== currentProps.fontStyle) state.createGeometry = true;\n      if (newProps.fontVariant !== currentProps.fontVariant) state.createGeometry = true;\n      if (newProps.fontWeight !== currentProps.fontWeight) state.createGeometry = true;\n    },\n    geometryUtils: Text.Utils\n  }), materialId);\n} // direct-volume\n\nexport var UnitsDirectVolumeParams = __assign(__assign({}, StructureDirectVolumeParams), StructureParams);\nexport function UnitsDirectVolumeVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.createGeometry = true;\n    },\n    geometryUtils: DirectVolume.Utils\n  }), materialId);\n} // texture-mesh\n\nexport var UnitsTextureMeshParams = __assign(__assign({}, StructureTextureMeshParams), StructureParams);\nexport function UnitsTextureMeshVisual(builder, materialId) {\n  return UnitsVisual(__assign(__assign({}, builder), {\n    setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\n      builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\n      if (!SizeTheme.areEqual(newTheme.size, currentTheme.size)) state.createGeometry = true;\n    },\n    geometryUtils: TextureMesh.Utils\n  }), materialId);\n}","map":{"version":3,"sources":["../../../src/mol-repr/structure/units-visual.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Structure, Unit, StructureElement } from '../../mol-model/structure';\r\nimport { Visual } from '../visual';\r\nimport { Geometry } from '../../mol-geo/geometry/geometry';\r\nimport { Theme } from '../../mol-theme/theme';\r\nimport { createUnitsTransform, includesUnitKind } from './visual/util/common';\r\nimport { createRenderObject } from '../../mol-gl/render-object';\r\nimport { isEveryLoci, EmptyLoci } from '../../mol-model/loci';\r\nimport { Interval } from '../../mol-data/int';\r\nimport { VisualUpdateState } from '../util';\r\nimport { ColorTheme } from '../../mol-theme/color';\r\nimport { createMarkers } from '../../mol-geo/geometry/marker-data';\r\nimport { MarkerAction } from '../../mol-util/marker-action';\r\nimport { ValueCell, deepEqual } from '../../mol-util';\r\nimport { createSizes } from '../../mol-geo/geometry/size-data';\r\nimport { createColors } from '../../mol-geo/geometry/color-data';\r\nimport { Mesh } from '../../mol-geo/geometry/mesh/mesh';\r\nimport { SizeTheme } from '../../mol-theme/size';\r\nimport { Spheres } from '../../mol-geo/geometry/spheres/spheres';\r\nimport { Cylinders } from '../../mol-geo/geometry/cylinders/cylinders';\r\nimport { Points } from '../../mol-geo/geometry/points/points';\r\nimport { Lines } from '../../mol-geo/geometry/lines/lines';\r\nimport { Text } from '../../mol-geo/geometry/text/text';\r\nimport { DirectVolume } from '../../mol-geo/geometry/direct-volume/direct-volume';\r\nimport { TextureMesh } from '../../mol-geo/geometry/texture-mesh/texture-mesh';\r\nimport { StructureParams, StructureMeshParams, StructureSpheresParams, StructurePointsParams, StructureLinesParams, StructureTextParams, StructureDirectVolumeParams, StructureTextureMeshParams, StructureCylindersParams } from './params';\r\nimport { isPromiseLike } from '../../mol-util/type-helpers';\r\nfunction createUnitsRenderObject(structureGroup, geometry, locationIt, theme, props, materialId) {\r\n    var _a = Geometry.getUtils(geometry), createValues = _a.createValues, createRenderableState = _a.createRenderableState;\r\n    var transform = createUnitsTransform(structureGroup, props.includeParent);\r\n    var values = createValues(geometry, transform, locationIt, theme, props);\r\n    var state = createRenderableState(props);\r\n    return createRenderObject(geometry.kind, values, state, materialId);\r\n}\r\nexport function UnitsVisual(builder, materialId) {\r\n    var defaultProps = builder.defaultProps, createGeometry = builder.createGeometry, createLocationIterator = builder.createLocationIterator, getLoci = builder.getLoci, eachLocation = builder.eachLocation, setUpdateState = builder.setUpdateState, mustRecreate = builder.mustRecreate, processValues = builder.processValues, dispose = builder.dispose;\r\n    var _a = builder.geometryUtils, createEmptyGeometry = _a.createEmpty, updateValues = _a.updateValues, updateBoundingSphere = _a.updateBoundingSphere, updateRenderableState = _a.updateRenderableState, createPositionIterator = _a.createPositionIterator;\r\n    var updateState = VisualUpdateState.create();\r\n    var previousMark = { loci: EmptyLoci, action: MarkerAction.None, status: -1 };\r\n    var renderObject;\r\n    var newProps = Object.assign({}, defaultProps);\r\n    var newTheme = Theme.createEmpty();\r\n    var newStructureGroup;\r\n    var currentProps;\r\n    var currentTheme;\r\n    var currentStructureGroup;\r\n    var geometry;\r\n    var locationIt;\r\n    var positionIt;\r\n    function prepareUpdate(theme, props, structureGroup) {\r\n        if (!structureGroup && !currentStructureGroup) {\r\n            throw new Error('missing structureGroup');\r\n        }\r\n        newProps = props;\r\n        newTheme = theme;\r\n        newStructureGroup = structureGroup;\r\n        VisualUpdateState.reset(updateState);\r\n        if (!renderObject || !currentStructureGroup) {\r\n            // console.log('create new');\r\n            updateState.createNew = true;\r\n            updateState.createGeometry = true;\r\n            return;\r\n        }\r\n        setUpdateState(updateState, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n        if (!Structure.areHierarchiesEqual(currentStructureGroup.structure, newStructureGroup.structure)) {\r\n            // console.log('new hierarchy');\r\n            updateState.updateTransform = true;\r\n            updateState.updateColor = true;\r\n            updateState.updateSize = true;\r\n        }\r\n        if (!ColorTheme.areEqual(newTheme.color, currentTheme.color)) {\r\n            // console.log('new colorTheme');\r\n            updateState.updateColor = true;\r\n        }\r\n        if (currentStructureGroup.structure.child !== newStructureGroup.structure.child) {\r\n            // console.log('new child');\r\n            updateState.createGeometry = true;\r\n        }\r\n        if (!deepEqual(newProps.unitKinds, currentProps.unitKinds)) {\r\n            // console.log('new unitKinds');\r\n            updateState.createGeometry = true;\r\n        }\r\n        if (newStructureGroup.group.transformHash !== currentStructureGroup.group.transformHash) {\r\n            // console.log('new transformHash');\r\n            if (newStructureGroup.group.units.length !== currentStructureGroup.group.units.length || updateState.updateColor) {\r\n                updateState.updateTransform = true;\r\n            }\r\n            else {\r\n                updateState.updateMatrix = true;\r\n            }\r\n        }\r\n        // check if the operator or conformation of unit has changed\r\n        var newUnit = newStructureGroup.group.units[0];\r\n        var currentUnit = currentStructureGroup.group.units[0];\r\n        if (!Unit.areOperatorsEqual(newUnit, currentUnit)) {\r\n            // console.log('new operators');\r\n            updateState.updateTransform = true;\r\n        }\r\n        if (!Unit.areConformationsEqual(newUnit, currentUnit)) {\r\n            // console.log('new conformation');\r\n            updateState.createGeometry = true;\r\n        }\r\n        if (updateState.updateTransform) {\r\n            updateState.updateMatrix = true;\r\n        }\r\n        if (updateState.updateSize && !('uSize' in renderObject.values)) {\r\n            updateState.createGeometry = true;\r\n        }\r\n        if (updateState.createGeometry || updateState.updateTransform) {\r\n            if (currentStructureGroup.structure.hashCode !== newStructureGroup.structure.hashCode) {\r\n                // console.log('new hashCode');\r\n                updateState.updateColor = true;\r\n                updateState.updateSize = true;\r\n            }\r\n            if (newTheme.color.granularity.startsWith('vertex') ||\r\n                renderObject.values.dColorType.ref.value.startsWith('vertex') ||\r\n                newTheme.color.granularity.startsWith('volume') ||\r\n                renderObject.values.dColorType.ref.value.startsWith('volume')) {\r\n                updateState.updateColor = true;\r\n            }\r\n        }\r\n    }\r\n    function update(newGeometry) {\r\n        if (updateState.createNew) {\r\n            locationIt = createLocationIterator(newStructureGroup);\r\n            if (newGeometry) {\r\n                renderObject = createUnitsRenderObject(newStructureGroup, newGeometry, locationIt, newTheme, newProps, materialId);\r\n                positionIt = createPositionIterator(newGeometry, renderObject.values);\r\n            }\r\n            else {\r\n                throw new Error('expected geometry to be given');\r\n            }\r\n        }\r\n        else {\r\n            if (!renderObject) {\r\n                throw new Error('expected renderObject to be available');\r\n            }\r\n            if (updateState.updateTransform) {\r\n                // console.log('update transform');\r\n                locationIt = createLocationIterator(newStructureGroup);\r\n                var instanceCount = locationIt.instanceCount, groupCount = locationIt.groupCount;\r\n                createMarkers(instanceCount * groupCount, renderObject.values);\r\n            }\r\n            if (updateState.updateMatrix) {\r\n                // console.log('update matrix');\r\n                createUnitsTransform(newStructureGroup, newProps.includeParent, renderObject.values);\r\n            }\r\n            if (updateState.createGeometry) {\r\n                // console.log('update geometry');\r\n                if (newGeometry) {\r\n                    ValueCell.updateIfChanged(renderObject.values.drawCount, Geometry.getDrawCount(newGeometry));\r\n                    ValueCell.updateIfChanged(renderObject.values.uVertexCount, Geometry.getVertexCount(newGeometry));\r\n                }\r\n                else {\r\n                    throw new Error('expected geometry to be given');\r\n                }\r\n            }\r\n            if (updateState.updateTransform || updateState.createGeometry) {\r\n                updateBoundingSphere(renderObject.values, newGeometry || geometry);\r\n                positionIt = createPositionIterator(newGeometry || geometry, renderObject.values);\r\n            }\r\n            if (updateState.updateSize) {\r\n                // not all geometries have size data, so check here\r\n                if ('uSize' in renderObject.values) {\r\n                    // console.log('update size');\r\n                    createSizes(locationIt, newTheme.size, renderObject.values);\r\n                }\r\n            }\r\n            if (updateState.updateColor) {\r\n                // console.log('update color');\r\n                createColors(locationIt, positionIt, newTheme.color, renderObject.values);\r\n            }\r\n            updateValues(renderObject.values, newProps);\r\n            updateRenderableState(renderObject.state, newProps);\r\n        }\r\n        currentProps = newProps;\r\n        currentTheme = newTheme;\r\n        currentStructureGroup = newStructureGroup;\r\n        if (newGeometry)\r\n            geometry = newGeometry;\r\n    }\r\n    function _createGeometry(ctx, unit, structure, theme, props, geometry) {\r\n        return includesUnitKind(props.unitKinds, unit)\r\n            ? createGeometry(ctx, unit, structure, theme, props, geometry)\r\n            : createEmptyGeometry(geometry);\r\n    }\r\n    function lociIsSuperset(loci) {\r\n        if (isEveryLoci(loci))\r\n            return true;\r\n        if (Structure.isLoci(loci) && Structure.areRootsEquivalent(loci.structure, currentStructureGroup.structure))\r\n            return true;\r\n        if (StructureElement.Loci.is(loci) && Structure.areRootsEquivalent(loci.structure, currentStructureGroup.structure)) {\r\n            if (StructureElement.Loci.isWholeStructure(loci))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function lociApply(loci, apply, isMarking) {\r\n        if (lociIsSuperset(loci)) {\r\n            return apply(Interval.ofBounds(0, locationIt.groupCount * locationIt.instanceCount));\r\n        }\r\n        else {\r\n            return eachLocation(loci, currentStructureGroup, apply, isMarking);\r\n        }\r\n    }\r\n    function finalize(ctx) {\r\n        if (renderObject) {\r\n            processValues === null || processValues === void 0 ? void 0 : processValues(renderObject.values, geometry, currentProps, currentTheme, ctx.webgl);\r\n        }\r\n    }\r\n    return {\r\n        get groupCount() { return locationIt ? locationIt.count : 0; },\r\n        get renderObject() { return locationIt && locationIt.count ? renderObject : undefined; },\r\n        createOrUpdate: function (ctx, theme, props, structureGroup) {\r\n            prepareUpdate(theme, props, structureGroup || currentStructureGroup);\r\n            if (updateState.createGeometry) {\r\n                var newGeometry = _createGeometry(ctx, newStructureGroup.group.units[0], newStructureGroup.structure, newTheme, newProps, geometry);\r\n                if (isPromiseLike(newGeometry)) {\r\n                    return newGeometry.then(function (g) {\r\n                        update(g);\r\n                        finalize(ctx);\r\n                    });\r\n                }\r\n                update(newGeometry);\r\n            }\r\n            else {\r\n                update();\r\n            }\r\n            finalize(ctx);\r\n        },\r\n        getLoci: function (pickingId) {\r\n            return renderObject ? getLoci(pickingId, currentStructureGroup, renderObject.id) : EmptyLoci;\r\n        },\r\n        mark: function (loci, action) {\r\n            var hasInvariantId = true;\r\n            if (StructureElement.Loci.is(loci)) {\r\n                hasInvariantId = false;\r\n                var invariantId = currentStructureGroup.group.units[0].invariantId;\r\n                for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n                    var e = _a[_i];\r\n                    if (e.unit.invariantId === invariantId) {\r\n                        hasInvariantId = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return hasInvariantId ? Visual.mark(renderObject, loci, action, lociApply, previousMark) : false;\r\n        },\r\n        setVisibility: function (visible) {\r\n            Visual.setVisibility(renderObject, visible);\r\n        },\r\n        setAlphaFactor: function (alphaFactor) {\r\n            Visual.setAlphaFactor(renderObject, alphaFactor);\r\n        },\r\n        setPickable: function (pickable) {\r\n            Visual.setPickable(renderObject, pickable);\r\n        },\r\n        setColorOnly: function (colorOnly) {\r\n            Visual.setColorOnly(renderObject, colorOnly);\r\n        },\r\n        setTransform: function (matrix, instanceMatrices) {\r\n            Visual.setTransform(renderObject, matrix, instanceMatrices);\r\n        },\r\n        setOverpaint: function (overpaint) {\r\n            Visual.setOverpaint(renderObject, overpaint, lociApply, true);\r\n        },\r\n        setTransparency: function (transparency) {\r\n            Visual.setTransparency(renderObject, transparency, lociApply, true);\r\n        },\r\n        setClipping: function (clipping) {\r\n            Visual.setClipping(renderObject, clipping, lociApply, true);\r\n        },\r\n        destroy: function () {\r\n            dispose === null || dispose === void 0 ? void 0 : dispose(geometry);\r\n            if (renderObject) {\r\n                renderObject.state.disposed = true;\r\n                renderObject = undefined;\r\n            }\r\n        },\r\n        mustRecreate: mustRecreate\r\n    };\r\n}\r\n// mesh\r\nexport var UnitsMeshParams = __assign(__assign({}, StructureMeshParams), StructureParams);\r\nexport function UnitsMeshVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.createGeometry = true;\r\n        }, geometryUtils: Mesh.Utils }), materialId);\r\n}\r\n// spheres\r\nexport var UnitsSpheresParams = __assign(__assign({}, StructureSpheresParams), StructureParams);\r\nexport function UnitsSpheresVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.updateSize = true;\r\n        }, geometryUtils: Spheres.Utils }), materialId);\r\n}\r\n// cylinders\r\nexport var UnitsCylindersParams = __assign(__assign({}, StructureCylindersParams), StructureParams);\r\nexport function UnitsCylindersVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.updateSize = true;\r\n        }, geometryUtils: Cylinders.Utils }), materialId);\r\n}\r\n// points\r\nexport var UnitsPointsParams = __assign(__assign({}, StructurePointsParams), StructureParams);\r\nexport function UnitsPointsVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.updateSize = true;\r\n        }, geometryUtils: Points.Utils }), materialId);\r\n}\r\n// lines\r\nexport var UnitsLinesParams = __assign(__assign({}, StructureLinesParams), StructureParams);\r\nexport function UnitsLinesVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.updateSize = true;\r\n        }, geometryUtils: Lines.Utils }), materialId);\r\n}\r\n// text\r\nexport var UnitsTextParams = __assign(__assign({}, StructureTextParams), StructureParams);\r\nexport function UnitsTextVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.updateSize = true;\r\n            if (newProps.background !== currentProps.background)\r\n                state.createGeometry = true;\r\n            if (newProps.backgroundMargin !== currentProps.backgroundMargin)\r\n                state.createGeometry = true;\r\n            if (newProps.tether !== currentProps.tether)\r\n                state.createGeometry = true;\r\n            if (newProps.tetherLength !== currentProps.tetherLength)\r\n                state.createGeometry = true;\r\n            if (newProps.tetherBaseWidth !== currentProps.tetherBaseWidth)\r\n                state.createGeometry = true;\r\n            if (newProps.attachment !== currentProps.attachment)\r\n                state.createGeometry = true;\r\n            if (newProps.fontFamily !== currentProps.fontFamily)\r\n                state.createGeometry = true;\r\n            if (newProps.fontQuality !== currentProps.fontQuality)\r\n                state.createGeometry = true;\r\n            if (newProps.fontStyle !== currentProps.fontStyle)\r\n                state.createGeometry = true;\r\n            if (newProps.fontVariant !== currentProps.fontVariant)\r\n                state.createGeometry = true;\r\n            if (newProps.fontWeight !== currentProps.fontWeight)\r\n                state.createGeometry = true;\r\n        }, geometryUtils: Text.Utils }), materialId);\r\n}\r\n// direct-volume\r\nexport var UnitsDirectVolumeParams = __assign(__assign({}, StructureDirectVolumeParams), StructureParams);\r\nexport function UnitsDirectVolumeVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.createGeometry = true;\r\n        }, geometryUtils: DirectVolume.Utils }), materialId);\r\n}\r\n// texture-mesh\r\nexport var UnitsTextureMeshParams = __assign(__assign({}, StructureTextureMeshParams), StructureParams);\r\nexport function UnitsTextureMeshVisual(builder, materialId) {\r\n    return UnitsVisual(__assign(__assign({}, builder), { setUpdateState: function (state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup) {\r\n            builder.setUpdateState(state, newProps, currentProps, newTheme, currentTheme, newStructureGroup, currentStructureGroup);\r\n            if (!SizeTheme.areEqual(newTheme.size, currentTheme.size))\r\n                state.createGeometry = true;\r\n        }, geometryUtils: TextureMesh.Utils }), materialId);\r\n}\r\n//# sourceMappingURL=units-visual.js.map"]},"metadata":{},"sourceType":"module"}