{"ast":null,"code":"/**\r\n * Copyright (c) 2018 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Expression } from '../../language/expression';\nimport { QueryContext, Structure } from '../../../mol-model/structure';\n\nvar QueryRuntimeTable =\n/** @class */\nfunction () {\n  function QueryRuntimeTable() {\n    this.map = new Map();\n  }\n\n  QueryRuntimeTable.prototype.removeSymbol = function (runtime) {\n    this.map.delete(runtime.symbol.id);\n  };\n\n  QueryRuntimeTable.prototype.addSymbol = function (runtime) {\n    if (this.map.has(runtime.symbol.id)) {\n      console.warn(\"Symbol '\" + runtime.symbol.id + \"' already added. Call removeSymbol/removeCustomProps re-adding the symbol.\");\n    }\n\n    this.map.set(runtime.symbol.id, runtime);\n  };\n\n  QueryRuntimeTable.prototype.addCustomProp = function (desc) {\n    if (!desc.symbols) return;\n\n    for (var _a = 0, _b = Object.keys(desc.symbols); _a < _b.length; _a++) {\n      var k = _b[_a];\n      this.addSymbol(desc.symbols[k]);\n    }\n  };\n\n  QueryRuntimeTable.prototype.removeCustomProp = function (desc) {\n    if (!desc.symbols) return;\n\n    for (var _a = 0, _b = Object.keys(desc.symbols); _a < _b.length; _a++) {\n      var k = _b[_a];\n      this.removeSymbol(desc.symbols[k]);\n    }\n  };\n\n  QueryRuntimeTable.prototype.getRuntime = function (id) {\n    return this.map.get(id);\n  };\n\n  return QueryRuntimeTable;\n}();\n\nexport { QueryRuntimeTable };\nexport var DefaultQueryRuntimeTable = new QueryRuntimeTable();\n\nvar QueryCompilerCtx =\n/** @class */\nfunction () {\n  function QueryCompilerCtx(table) {\n    this.table = table;\n    this.constQueryContext = new QueryContext(Structure.Empty);\n  }\n\n  return QueryCompilerCtx;\n}();\n\nexport { QueryCompilerCtx };\nexport var QueryCompiledSymbol;\n\n(function (QueryCompiledSymbol) {\n  function Const(value) {\n    return {\n      kind: 'const',\n      value: value\n    };\n  }\n\n  QueryCompiledSymbol.Const = Const;\n\n  function Dynamic(runtime) {\n    return {\n      kind: 'dynamic',\n      runtime: runtime\n    };\n  }\n\n  QueryCompiledSymbol.Dynamic = Dynamic;\n})(QueryCompiledSymbol || (QueryCompiledSymbol = {}));\n\nexport var CompiledQueryFn;\n\n(function (CompiledQueryFn) {\n  function Const(value) {\n    return {\n      isConst: true,\n      fn: function CompiledQueryFn_Const(ctx) {\n        return value;\n      }\n    };\n  }\n\n  CompiledQueryFn.Const = Const;\n\n  function Dynamic(fn) {\n    return {\n      isConst: false,\n      fn: fn\n    };\n  }\n\n  CompiledQueryFn.Dynamic = Dynamic;\n})(CompiledQueryFn || (CompiledQueryFn = {}));\n\nexport var QueryRuntimeArguments;\n\n(function (QueryRuntimeArguments) {\n  function forEachEval(xs, queryCtx, f, ctx) {\n    if (typeof xs.length === 'number') {\n      for (var i = 0, _i = xs.length; i < _i; i++) f(xs[i](queryCtx), i, ctx);\n    } else {\n      var i = 0;\n\n      for (var _a = 0, _b = Object.keys(xs); _a < _b.length; _a++) {\n        var k = _b[_a];\n        f(xs[k](queryCtx), i++, ctx);\n      }\n    }\n\n    return ctx;\n  }\n\n  QueryRuntimeArguments.forEachEval = forEachEval;\n})(QueryRuntimeArguments || (QueryRuntimeArguments = {}));\n\nexport var QuerySymbolRuntime;\n\n(function (QuerySymbolRuntime) {\n  function Const(symbol, fn) {\n    return new SymbolRuntimeImpl(symbol, fn, true);\n  }\n\n  QuerySymbolRuntime.Const = Const;\n\n  function Dynamic(symbol, fn) {\n    return new SymbolRuntimeImpl(symbol, fn, false);\n  }\n\n  QuerySymbolRuntime.Dynamic = Dynamic;\n})(QuerySymbolRuntime || (QuerySymbolRuntime = {}));\n\nvar SymbolRuntimeImpl =\n/** @class */\nfunction () {\n  function SymbolRuntimeImpl(symbol, fn, isConst) {\n    this.symbol = symbol;\n    this.fn = fn;\n    this.isConst = isConst;\n  }\n\n  SymbolRuntimeImpl.prototype.compile = function (ctx, inputArgs) {\n    var args,\n        constArgs = false;\n\n    if (!inputArgs) {\n      args = void 0;\n      constArgs = true;\n    } else if (Expression.isArgumentsArray(inputArgs)) {\n      args = [];\n      constArgs = true;\n\n      for (var _a = 0, inputArgs_1 = inputArgs; _a < inputArgs_1.length; _a++) {\n        var arg = inputArgs_1[_a];\n\n        var compiled = _compile(ctx, arg);\n\n        constArgs = constArgs && compiled.isConst;\n        args.push(compiled.fn);\n      }\n    } else {\n      args = Object.create(null);\n      constArgs = true;\n\n      for (var _b = 0, _c = Object.keys(inputArgs); _b < _c.length; _b++) {\n        var key = _c[_b];\n\n        var compiled = _compile(ctx, inputArgs[key]);\n\n        constArgs = constArgs && compiled.isConst;\n        args[key] = compiled.fn;\n      }\n    }\n\n    if (this.isConst) {\n      if (this.isConst && constArgs) {\n        return CompiledQueryFn.Const(this.fn(ctx.constQueryContext, args));\n      }\n\n      return CompiledQueryFn.Dynamic(createDynamicFn(this.fn, args));\n    }\n\n    return CompiledQueryFn.Dynamic(createDynamicFn(this.fn, args));\n  };\n\n  return SymbolRuntimeImpl;\n}();\n\nfunction createDynamicFn(fn, args) {\n  return function DynamicFn(ctx) {\n    return fn(ctx, args);\n  };\n}\n\nfunction _compile(ctx, expression) {\n  if (Expression.isLiteral(expression)) {\n    return CompiledQueryFn.Const(expression);\n  }\n\n  if (Expression.isSymbol(expression)) {\n    var runtime = ctx.table.getRuntime(expression.name);\n    if (!runtime) return CompiledQueryFn.Const(expression.name);\n    return runtime.compile(ctx);\n  }\n\n  if (!Expression.isSymbol(expression.head)) {\n    throw new Error('Can only apply symbols.');\n  }\n\n  var compiler = ctx.table.getRuntime(expression.head.name);\n\n  if (!compiler) {\n    throw new Error(\"Symbol '\" + expression.head.name + \"' is not implemented.\");\n  }\n\n  return compiler.compile(ctx, expression.args);\n}\n\nexport function compile(expression) {\n  var ctx = new QueryCompilerCtx(DefaultQueryRuntimeTable);\n  return _compile(ctx, expression).fn;\n}","map":{"version":3,"sources":["../../../../src/mol-script/runtime/query/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Expression } from '../../language/expression';\r\nimport { QueryContext, Structure } from '../../../mol-model/structure';\r\nvar QueryRuntimeTable = /** @class */ (function () {\r\n    function QueryRuntimeTable() {\r\n        this.map = new Map();\r\n    }\r\n    QueryRuntimeTable.prototype.removeSymbol = function (runtime) {\r\n        this.map.delete(runtime.symbol.id);\r\n    };\r\n    QueryRuntimeTable.prototype.addSymbol = function (runtime) {\r\n        if (this.map.has(runtime.symbol.id)) {\r\n            console.warn(\"Symbol '\" + runtime.symbol.id + \"' already added. Call removeSymbol/removeCustomProps re-adding the symbol.\");\r\n        }\r\n        this.map.set(runtime.symbol.id, runtime);\r\n    };\r\n    QueryRuntimeTable.prototype.addCustomProp = function (desc) {\r\n        if (!desc.symbols)\r\n            return;\r\n        for (var _a = 0, _b = Object.keys(desc.symbols); _a < _b.length; _a++) {\r\n            var k = _b[_a];\r\n            this.addSymbol(desc.symbols[k]);\r\n        }\r\n    };\r\n    QueryRuntimeTable.prototype.removeCustomProp = function (desc) {\r\n        if (!desc.symbols)\r\n            return;\r\n        for (var _a = 0, _b = Object.keys(desc.symbols); _a < _b.length; _a++) {\r\n            var k = _b[_a];\r\n            this.removeSymbol(desc.symbols[k]);\r\n        }\r\n    };\r\n    QueryRuntimeTable.prototype.getRuntime = function (id) {\r\n        return this.map.get(id);\r\n    };\r\n    return QueryRuntimeTable;\r\n}());\r\nexport { QueryRuntimeTable };\r\nexport var DefaultQueryRuntimeTable = new QueryRuntimeTable();\r\nvar QueryCompilerCtx = /** @class */ (function () {\r\n    function QueryCompilerCtx(table) {\r\n        this.table = table;\r\n        this.constQueryContext = new QueryContext(Structure.Empty);\r\n    }\r\n    return QueryCompilerCtx;\r\n}());\r\nexport { QueryCompilerCtx };\r\nexport var QueryCompiledSymbol;\r\n(function (QueryCompiledSymbol) {\r\n    function Const(value) {\r\n        return { kind: 'const', value: value };\r\n    }\r\n    QueryCompiledSymbol.Const = Const;\r\n    function Dynamic(runtime) {\r\n        return { kind: 'dynamic', runtime: runtime };\r\n    }\r\n    QueryCompiledSymbol.Dynamic = Dynamic;\r\n})(QueryCompiledSymbol || (QueryCompiledSymbol = {}));\r\nexport var CompiledQueryFn;\r\n(function (CompiledQueryFn) {\r\n    function Const(value) {\r\n        return { isConst: true, fn: function CompiledQueryFn_Const(ctx) { return value; } };\r\n    }\r\n    CompiledQueryFn.Const = Const;\r\n    function Dynamic(fn) {\r\n        return { isConst: false, fn: fn };\r\n    }\r\n    CompiledQueryFn.Dynamic = Dynamic;\r\n})(CompiledQueryFn || (CompiledQueryFn = {}));\r\nexport var QueryRuntimeArguments;\r\n(function (QueryRuntimeArguments) {\r\n    function forEachEval(xs, queryCtx, f, ctx) {\r\n        if (typeof xs.length === 'number') {\r\n            for (var i = 0, _i = xs.length; i < _i; i++)\r\n                f(xs[i](queryCtx), i, ctx);\r\n        }\r\n        else {\r\n            var i = 0;\r\n            for (var _a = 0, _b = Object.keys(xs); _a < _b.length; _a++) {\r\n                var k = _b[_a];\r\n                f(xs[k](queryCtx), i++, ctx);\r\n            }\r\n        }\r\n        return ctx;\r\n    }\r\n    QueryRuntimeArguments.forEachEval = forEachEval;\r\n})(QueryRuntimeArguments || (QueryRuntimeArguments = {}));\r\nexport var QuerySymbolRuntime;\r\n(function (QuerySymbolRuntime) {\r\n    function Const(symbol, fn) {\r\n        return new SymbolRuntimeImpl(symbol, fn, true);\r\n    }\r\n    QuerySymbolRuntime.Const = Const;\r\n    function Dynamic(symbol, fn) {\r\n        return new SymbolRuntimeImpl(symbol, fn, false);\r\n    }\r\n    QuerySymbolRuntime.Dynamic = Dynamic;\r\n})(QuerySymbolRuntime || (QuerySymbolRuntime = {}));\r\nvar SymbolRuntimeImpl = /** @class */ (function () {\r\n    function SymbolRuntimeImpl(symbol, fn, isConst) {\r\n        this.symbol = symbol;\r\n        this.fn = fn;\r\n        this.isConst = isConst;\r\n    }\r\n    SymbolRuntimeImpl.prototype.compile = function (ctx, inputArgs) {\r\n        var args, constArgs = false;\r\n        if (!inputArgs) {\r\n            args = void 0;\r\n            constArgs = true;\r\n        }\r\n        else if (Expression.isArgumentsArray(inputArgs)) {\r\n            args = [];\r\n            constArgs = true;\r\n            for (var _a = 0, inputArgs_1 = inputArgs; _a < inputArgs_1.length; _a++) {\r\n                var arg = inputArgs_1[_a];\r\n                var compiled = _compile(ctx, arg);\r\n                constArgs = constArgs && compiled.isConst;\r\n                args.push(compiled.fn);\r\n            }\r\n        }\r\n        else {\r\n            args = Object.create(null);\r\n            constArgs = true;\r\n            for (var _b = 0, _c = Object.keys(inputArgs); _b < _c.length; _b++) {\r\n                var key = _c[_b];\r\n                var compiled = _compile(ctx, inputArgs[key]);\r\n                constArgs = constArgs && compiled.isConst;\r\n                args[key] = compiled.fn;\r\n            }\r\n        }\r\n        if (this.isConst) {\r\n            if (this.isConst && constArgs) {\r\n                return CompiledQueryFn.Const(this.fn(ctx.constQueryContext, args));\r\n            }\r\n            return CompiledQueryFn.Dynamic(createDynamicFn(this.fn, args));\r\n        }\r\n        return CompiledQueryFn.Dynamic(createDynamicFn(this.fn, args));\r\n    };\r\n    return SymbolRuntimeImpl;\r\n}());\r\nfunction createDynamicFn(fn, args) {\r\n    return function DynamicFn(ctx) { return fn(ctx, args); };\r\n}\r\nfunction _compile(ctx, expression) {\r\n    if (Expression.isLiteral(expression)) {\r\n        return CompiledQueryFn.Const(expression);\r\n    }\r\n    if (Expression.isSymbol(expression)) {\r\n        var runtime = ctx.table.getRuntime(expression.name);\r\n        if (!runtime)\r\n            return CompiledQueryFn.Const(expression.name);\r\n        return runtime.compile(ctx);\r\n    }\r\n    if (!Expression.isSymbol(expression.head)) {\r\n        throw new Error('Can only apply symbols.');\r\n    }\r\n    var compiler = ctx.table.getRuntime(expression.head.name);\r\n    if (!compiler) {\r\n        throw new Error(\"Symbol '\" + expression.head.name + \"' is not implemented.\");\r\n    }\r\n    return compiler.compile(ctx, expression.args);\r\n}\r\nexport function compile(expression) {\r\n    var ctx = new QueryCompilerCtx(DefaultQueryRuntimeTable);\r\n    return _compile(ctx, expression).fn;\r\n}\r\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}