{"ast":null,"code":"/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nexport var accumulate_vert = \"\\nprecision highp float;\\n\\n#include common\\n#include read_from_texture\\n\\nuniform int uTotalCount;\\nuniform int uGroupCount;\\n\\nattribute float aSample;\\n#define SampleID int(aSample)\\n\\nattribute mat4 aTransform;\\nattribute float aInstance;\\n\\nuniform vec2 uGeoTexDim;\\nuniform sampler2D tPosition;\\nuniform sampler2D tGroup;\\n\\nuniform vec2 uColorTexDim;\\nuniform sampler2D tColor;\\n\\nvarying vec3 vPosition;\\nvarying vec3 vColor;\\n\\nuniform vec3 uBboxSize;\\nuniform vec3 uBboxMin;\\nuniform float uResolution;\\n\\nvoid main() {\\n    vec3 position = readFromTexture(tPosition, SampleID, uGeoTexDim).xyz;\\n    float group = decodeFloatRGB(readFromTexture(tGroup, SampleID, uGeoTexDim).rgb);\\n\\n    position = (aTransform * vec4(position, 1.0)).xyz;\\n    gl_PointSize = 7.0;\\n    vPosition = (position - uBboxMin) / uResolution;\\n    gl_Position = vec4(((position - uBboxMin) / uBboxSize) * 2.0 - 1.0, 1.0);\\n\\n    #if defined(dColorType_group)\\n        vColor = readFromTexture(tColor, group, uColorTexDim).rgb;\\n    #elif defined(dColorType_groupInstance)\\n        vColor = readFromTexture(tColor, aInstance * float(uGroupCount) + group, uColorTexDim).rgb;\\n    #endif\\n}\\n\";","map":{"version":3,"sources":["../../../../../src/mol-gl/shader/compute/color-smoothing/accumulate.vert.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,OAAO,IAAM,eAAe,GAAG,wpCAAxB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nexport var accumulate_vert = \"\\nprecision highp float;\\n\\n#include common\\n#include read_from_texture\\n\\nuniform int uTotalCount;\\nuniform int uGroupCount;\\n\\nattribute float aSample;\\n#define SampleID int(aSample)\\n\\nattribute mat4 aTransform;\\nattribute float aInstance;\\n\\nuniform vec2 uGeoTexDim;\\nuniform sampler2D tPosition;\\nuniform sampler2D tGroup;\\n\\nuniform vec2 uColorTexDim;\\nuniform sampler2D tColor;\\n\\nvarying vec3 vPosition;\\nvarying vec3 vColor;\\n\\nuniform vec3 uBboxSize;\\nuniform vec3 uBboxMin;\\nuniform float uResolution;\\n\\nvoid main() {\\n    vec3 position = readFromTexture(tPosition, SampleID, uGeoTexDim).xyz;\\n    float group = decodeFloatRGB(readFromTexture(tGroup, SampleID, uGeoTexDim).rgb);\\n\\n    position = (aTransform * vec4(position, 1.0)).xyz;\\n    gl_PointSize = 7.0;\\n    vPosition = (position - uBboxMin) / uResolution;\\n    gl_Position = vec4(((position - uBboxMin) / uBboxSize) * 2.0 - 1.0, 1.0);\\n\\n    #if defined(dColorType_group)\\n        vColor = readFromTexture(tColor, group, uColorTexDim).rgb;\\n    #elif defined(dColorType_groupInstance)\\n        vColor = readFromTexture(tColor, aInstance * float(uGroupCount) + group, uColorTexDim).rgb;\\n    #endif\\n}\\n\";\r\n//# sourceMappingURL=accumulate.vert.js.map"]},"metadata":{},"sourceType":"module"}