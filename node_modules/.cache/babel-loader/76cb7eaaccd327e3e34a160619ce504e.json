{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Michael Krone <michael.krone@uni-tuebingen.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Box3D } from '../../geometry';\nimport { OrderedSet } from '../../../mol-data/int';\nimport { Vec3, Tensor, Mat4, Vec2 } from '../../linear-algebra';\nimport { ValueCell } from '../../../mol-util';\nimport { createComputeRenderable } from '../../../mol-gl/renderable';\nimport { decodeFloatRGB } from '../../../mol-util/float-packing';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { createComputeRenderItem } from '../../../mol-gl/webgl/render-item';\nimport { ValueSpec, AttributeSpec, UniformSpec, TextureSpec, DefineSpec } from '../../../mol-gl/renderable/schema';\nimport { gaussianDensity_vert } from '../../../mol-gl/shader/gaussian-density.vert';\nimport { gaussianDensity_frag } from '../../../mol-gl/shader/gaussian-density.frag';\nvar GaussianDensitySchema = {\n  drawCount: ValueSpec('number'),\n  instanceCount: ValueSpec('number'),\n  aRadius: AttributeSpec('float32', 1, 0),\n  aPosition: AttributeSpec('float32', 3, 0),\n  aGroup: AttributeSpec('float32', 1, 0),\n  uCurrentSlice: UniformSpec('f'),\n  uCurrentX: UniformSpec('f'),\n  uCurrentY: UniformSpec('f'),\n  uBboxMin: UniformSpec('v3', 'material'),\n  uBboxSize: UniformSpec('v3', 'material'),\n  uGridDim: UniformSpec('v3', 'material'),\n  uGridTexDim: UniformSpec('v3', 'material'),\n  uGridTexScale: UniformSpec('v2', 'material'),\n  uAlpha: UniformSpec('f', 'material'),\n  uResolution: UniformSpec('f', 'material'),\n  uRadiusFactorInv: UniformSpec('f', 'material'),\n  tMinDistanceTex: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  dGridTexType: DefineSpec('string', ['2d', '3d']),\n  dCalcType: DefineSpec('string', ['density', 'minDistance', 'groupId'])\n};\nvar GaussianDensityName = 'gaussian-density';\n\nfunction getFramebuffer(webgl) {\n  if (!webgl.namedFramebuffers[GaussianDensityName]) {\n    webgl.namedFramebuffers[GaussianDensityName] = webgl.resources.framebuffer();\n  }\n\n  return webgl.namedFramebuffers[GaussianDensityName];\n}\n\nfunction getTexture(name, webgl, kind, format, type, filter) {\n  var _name = GaussianDensityName + \"-\" + name;\n\n  if (!webgl.namedTextures[_name]) {\n    webgl.namedTextures[_name] = webgl.resources.texture(kind, format, type, filter);\n  }\n\n  return webgl.namedTextures[_name];\n}\n\nexport function GaussianDensityGPU(position, box, radius, props, webgl) {\n  // always use texture2d when the gaussian density needs to be downloaded from the GPU,\n  // it's faster than texture3d\n  // console.time('GaussianDensityTexture2d')\n  var tmpTexture = getTexture('tmp', webgl, 'image-uint8', 'rgba', 'ubyte', 'linear');\n\n  var _a = calcGaussianDensityTexture2d(webgl, position, box, radius, false, props, tmpTexture),\n      scale = _a.scale,\n      bbox = _a.bbox,\n      texture = _a.texture,\n      gridDim = _a.gridDim,\n      gridTexDim = _a.gridTexDim,\n      radiusFactor = _a.radiusFactor,\n      resolution = _a.resolution; // webgl.waitForGpuCommandsCompleteSync()\n  // console.timeEnd('GaussianDensityTexture2d')\n\n\n  var _b = fieldFromTexture2d(webgl, texture, gridDim, gridTexDim),\n      field = _b.field,\n      idField = _b.idField;\n\n  return {\n    field: field,\n    idField: idField,\n    transform: getTransform(scale, bbox),\n    radiusFactor: radiusFactor,\n    resolution: resolution\n  };\n}\nexport function GaussianDensityTexture(webgl, position, box, radius, props, oldTexture) {\n  return webgl.isWebGL2 ? GaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture) : GaussianDensityTexture2d(webgl, position, box, radius, false, props, oldTexture);\n}\nexport function GaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, oldTexture) {\n  return finalizeGaussianDensityTexture(calcGaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, oldTexture));\n}\nexport function GaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture) {\n  return finalizeGaussianDensityTexture(calcGaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture));\n}\n\nfunction finalizeGaussianDensityTexture(_a) {\n  var texture = _a.texture,\n      scale = _a.scale,\n      bbox = _a.bbox,\n      gridDim = _a.gridDim,\n      gridTexDim = _a.gridTexDim,\n      gridTexScale = _a.gridTexScale,\n      radiusFactor = _a.radiusFactor,\n      resolution = _a.resolution;\n  return {\n    transform: getTransform(scale, bbox),\n    texture: texture,\n    bbox: bbox,\n    gridDim: gridDim,\n    gridTexDim: gridTexDim,\n    gridTexScale: gridTexScale,\n    radiusFactor: radiusFactor,\n    resolution: resolution\n  };\n}\n\nfunction getTransform(scale, bbox) {\n  var transform = Mat4.identity();\n  Mat4.fromScaling(transform, scale);\n  Mat4.setTranslation(transform, bbox.min);\n  return transform;\n}\n\nfunction calcGaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, texture) {\n  // console.log('2d');\n  var gl = webgl.gl,\n      resources = webgl.resources,\n      state = webgl.state,\n      _a = webgl.extensions,\n      colorBufferFloat = _a.colorBufferFloat,\n      textureFloat = _a.textureFloat,\n      colorBufferHalfFloat = _a.colorBufferHalfFloat,\n      textureHalfFloat = _a.textureHalfFloat,\n      blendMinMax = _a.blendMinMax;\n  var smoothness = props.smoothness,\n      resolution = props.resolution;\n\n  var _b = prepareGaussianDensityData(position, box, radius, props),\n      drawCount = _b.drawCount,\n      positions = _b.positions,\n      radii = _b.radii,\n      groups = _b.groups,\n      scale = _b.scale,\n      expandedBox = _b.expandedBox,\n      dim = _b.dim,\n      maxRadius = _b.maxRadius;\n\n  var dx = dim[0],\n      dy = dim[1],\n      dz = dim[2];\n\n  var _c = getTexture2dSize(dim),\n      texDimX = _c.texDimX,\n      texDimY = _c.texDimY,\n      texCols = _c.texCols,\n      powerOfTwoSize = _c.powerOfTwoSize; // console.log({ texDimX, texDimY, texCols, powerOfTwoSize, dim });\n\n\n  var gridTexDim = Vec3.create(texDimX, texDimY, 0);\n  var gridTexScale = Vec2.create(texDimX / powerOfTwoSize, texDimY / powerOfTwoSize);\n  var radiusFactor = maxRadius * 2;\n  var width = powerOfTwo ? powerOfTwoSize : texDimX;\n  var height = powerOfTwo ? powerOfTwoSize : texDimY;\n  var minDistTex = getTexture('min-dist-2d', webgl, 'image-uint8', 'rgba', 'ubyte', 'nearest');\n  minDistTex.define(width, height);\n  var renderable = getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistTex, expandedBox, dim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor); //\n\n  var _d = renderable.values,\n      uCurrentSlice = _d.uCurrentSlice,\n      uCurrentX = _d.uCurrentX,\n      uCurrentY = _d.uCurrentY;\n  var framebuffer = getFramebuffer(webgl);\n  framebuffer.bind();\n  setRenderingDefaults(webgl);\n  if (!texture) texture = colorBufferHalfFloat && textureHalfFloat ? resources.texture('image-float16', 'rgba', 'fp16', 'linear') : colorBufferFloat && textureFloat ? resources.texture('image-float32', 'rgba', 'float', 'linear') : resources.texture('image-uint8', 'rgba', 'ubyte', 'linear');\n  texture.define(width, height); // console.log(renderable)\n\n  function render(fbTex, clear) {\n    state.currentRenderItemId = -1;\n    fbTex.attachFramebuffer(framebuffer, 0);\n\n    if (clear) {\n      gl.viewport(0, 0, width, height);\n      gl.scissor(0, 0, width, height);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    ValueCell.update(uCurrentY, 0);\n    var currCol = 0;\n    var currY = 0;\n    var currX = 0;\n\n    for (var i = 0; i < dz; ++i) {\n      if (currCol >= texCols) {\n        currCol -= texCols;\n        currY += dy;\n        currX = 0;\n        ValueCell.update(uCurrentY, currY);\n      } // console.log({ i, currX, currY });\n\n\n      ValueCell.update(uCurrentX, currX);\n      ValueCell.update(uCurrentSlice, i);\n      gl.viewport(currX, currY, dx, dy);\n      gl.scissor(currX, currY, dx, dy);\n      renderable.render();\n      ++currCol;\n      currX += dx;\n    }\n\n    gl.flush();\n  }\n\n  setupDensityRendering(webgl, renderable);\n  render(texture, true);\n\n  if (blendMinMax) {\n    setupMinDistanceRendering(webgl, renderable);\n    render(minDistTex, true);\n    setupGroupIdRendering(webgl, renderable);\n    render(texture, false);\n  } // printTexture(webgl, minDistTex, 0.75);\n\n\n  return {\n    texture: texture,\n    scale: scale,\n    bbox: expandedBox,\n    gridDim: dim,\n    gridTexDim: gridTexDim,\n    gridTexScale: gridTexScale,\n    radiusFactor: radiusFactor,\n    resolution: resolution\n  };\n}\n\nfunction calcGaussianDensityTexture3d(webgl, position, box, radius, props, texture) {\n  // console.log('3d');\n  var gl = webgl.gl,\n      resources = webgl.resources,\n      state = webgl.state,\n      _a = webgl.extensions,\n      colorBufferFloat = _a.colorBufferFloat,\n      textureFloat = _a.textureFloat,\n      colorBufferHalfFloat = _a.colorBufferHalfFloat,\n      textureHalfFloat = _a.textureHalfFloat;\n  var smoothness = props.smoothness,\n      resolution = props.resolution;\n\n  var _b = prepareGaussianDensityData(position, box, radius, props),\n      drawCount = _b.drawCount,\n      positions = _b.positions,\n      radii = _b.radii,\n      groups = _b.groups,\n      scale = _b.scale,\n      expandedBox = _b.expandedBox,\n      dim = _b.dim,\n      maxRadius = _b.maxRadius;\n\n  var dx = dim[0],\n      dy = dim[1],\n      dz = dim[2];\n  var minDistTex = getTexture('min-dist-3d', webgl, 'volume-uint8', 'rgba', 'ubyte', 'nearest');\n  minDistTex.define(dx, dy, dz);\n  var gridTexScale = Vec2.create(1, 1);\n  var radiusFactor = maxRadius * 2;\n  var renderable = getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistTex, expandedBox, dim, dim, gridTexScale, smoothness, resolution, radiusFactor); //\n\n  var uCurrentSlice = renderable.values.uCurrentSlice;\n  var framebuffer = getFramebuffer(webgl);\n  framebuffer.bind();\n  setRenderingDefaults(webgl);\n  gl.viewport(0, 0, dx, dy);\n  gl.scissor(0, 0, dx, dy);\n  if (!texture) texture = colorBufferHalfFloat && textureHalfFloat ? resources.texture('volume-float16', 'rgba', 'fp16', 'linear') : colorBufferFloat && textureFloat ? resources.texture('volume-float32', 'rgba', 'float', 'linear') : resources.texture('volume-uint8', 'rgba', 'ubyte', 'linear');\n  texture.define(dx, dy, dz);\n\n  function render(fbTex, clear) {\n    state.currentRenderItemId = -1;\n\n    for (var i = 0; i < dz; ++i) {\n      ValueCell.update(uCurrentSlice, i);\n      fbTex.attachFramebuffer(framebuffer, 0, i);\n      if (clear) gl.clear(gl.COLOR_BUFFER_BIT);\n      renderable.render();\n    }\n\n    gl.flush();\n  }\n\n  setupDensityRendering(webgl, renderable);\n  render(texture, true);\n  setupMinDistanceRendering(webgl, renderable);\n  render(minDistTex, true);\n  setupGroupIdRendering(webgl, renderable);\n  render(texture, false);\n  return {\n    texture: texture,\n    scale: scale,\n    bbox: expandedBox,\n    gridDim: dim,\n    gridTexDim: dim,\n    gridTexScale: gridTexScale,\n    radiusFactor: radiusFactor,\n    resolution: resolution\n  };\n} //\n\n\nfunction prepareGaussianDensityData(position, box, radius, props) {\n  var resolution = props.resolution,\n      radiusOffset = props.radiusOffset;\n  var scaleFactor = 1 / resolution;\n  var indices = position.indices,\n      x = position.x,\n      y = position.y,\n      z = position.z,\n      id = position.id;\n  var n = OrderedSet.size(indices);\n  var positions = new Float32Array(n * 3);\n  var radii = new Float32Array(n);\n  var groups = new Float32Array(n);\n  var maxRadius = 0;\n\n  for (var i = 0; i < n; ++i) {\n    var j = OrderedSet.getAt(indices, i);\n    positions[i * 3] = x[j];\n    positions[i * 3 + 1] = y[j];\n    positions[i * 3 + 2] = z[j];\n    var r = radius(j) + radiusOffset;\n    if (maxRadius < r) maxRadius = r;\n    radii[i] = r;\n    groups[i] = id ? id[i] : i;\n  }\n\n  var pad = maxRadius * 2 + resolution * 4;\n  var expandedBox = Box3D.expand(Box3D(), box, Vec3.create(pad, pad, pad));\n  var scaledBox = Box3D.scale(Box3D(), expandedBox, scaleFactor);\n  var dim = Box3D.size(Vec3(), scaledBox);\n  Vec3.ceil(dim, dim);\n  var scale = Vec3.create(resolution, resolution, resolution);\n  return {\n    drawCount: n,\n    positions: positions,\n    radii: radii,\n    groups: groups,\n    scale: scale,\n    expandedBox: expandedBox,\n    dim: dim,\n    maxRadius: maxRadius\n  };\n}\n\nfunction getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor) {\n  // console.log('radiusFactor', radiusFactor);\n  if (webgl.namedComputeRenderables[GaussianDensityName]) {\n    var extent = Vec3.sub(Vec3(), box.max, box.min);\n    var v = webgl.namedComputeRenderables[GaussianDensityName].values;\n    ValueCell.updateIfChanged(v.drawCount, drawCount);\n    ValueCell.updateIfChanged(v.instanceCount, 1);\n    ValueCell.update(v.aRadius, radii);\n    ValueCell.update(v.aPosition, positions);\n    ValueCell.update(v.aGroup, groups);\n    ValueCell.updateIfChanged(v.uCurrentSlice, 0);\n    ValueCell.updateIfChanged(v.uCurrentX, 0);\n    ValueCell.updateIfChanged(v.uCurrentY, 0);\n    ValueCell.update(v.uBboxMin, box.min);\n    ValueCell.update(v.uBboxSize, extent);\n    ValueCell.update(v.uGridDim, gridDim);\n    ValueCell.update(v.uGridTexDim, gridTexDim);\n    ValueCell.update(v.uGridTexScale, gridTexScale);\n    ValueCell.updateIfChanged(v.uAlpha, smoothness);\n    ValueCell.updateIfChanged(v.uResolution, resolution);\n    ValueCell.updateIfChanged(v.uRadiusFactorInv, 1 / radiusFactor);\n    ValueCell.update(v.tMinDistanceTex, minDistanceTexture);\n    ValueCell.updateIfChanged(v.dGridTexType, minDistanceTexture.getDepth() > 0 ? '3d' : '2d');\n    ValueCell.updateIfChanged(v.dCalcType, 'density');\n    webgl.namedComputeRenderables[GaussianDensityName].update();\n  } else {\n    webgl.namedComputeRenderables[GaussianDensityName] = createGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor);\n  }\n\n  return webgl.namedComputeRenderables[GaussianDensityName];\n}\n\nfunction createGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor) {\n  var extent = Vec3.sub(Vec3(), box.max, box.min);\n  var values = {\n    drawCount: ValueCell.create(drawCount),\n    instanceCount: ValueCell.create(1),\n    aRadius: ValueCell.create(radii),\n    aPosition: ValueCell.create(positions),\n    aGroup: ValueCell.create(groups),\n    uCurrentSlice: ValueCell.create(0),\n    uCurrentX: ValueCell.create(0),\n    uCurrentY: ValueCell.create(0),\n    uBboxMin: ValueCell.create(box.min),\n    uBboxSize: ValueCell.create(extent),\n    uGridDim: ValueCell.create(gridDim),\n    uGridTexDim: ValueCell.create(gridTexDim),\n    uGridTexScale: ValueCell.create(gridTexScale),\n    uAlpha: ValueCell.create(smoothness),\n    uResolution: ValueCell.create(resolution),\n    uRadiusFactorInv: ValueCell.create(1 / radiusFactor),\n    tMinDistanceTex: ValueCell.create(minDistanceTexture),\n    dGridTexType: ValueCell.create(minDistanceTexture.getDepth() > 0 ? '3d' : '2d'),\n    dCalcType: ValueCell.create('density')\n  };\n\n  var schema = __assign({}, GaussianDensitySchema);\n\n  var shaderCode = ShaderCode(GaussianDensityName, gaussianDensity_vert, gaussianDensity_frag);\n  var renderItem = createComputeRenderItem(webgl, 'points', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction setRenderingDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.enable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.enable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.clearColor(0, 0, 0, 0);\n}\n\nfunction setupMinDistanceRendering(webgl, renderable) {\n  var gl = webgl.gl,\n      state = webgl.state;\n  ValueCell.update(renderable.values.dCalcType, 'minDistance');\n  renderable.update();\n  state.colorMask(false, false, false, true);\n  state.blendFunc(gl.ONE, gl.ONE); // the shader writes 1 - dist so we set blending to MAX\n\n  if (!webgl.extensions.blendMinMax) {\n    throw new Error('GPU gaussian surface calculation requires EXT_blend_minmax');\n  }\n\n  state.blendEquation(webgl.extensions.blendMinMax.MAX);\n}\n\nfunction setupDensityRendering(webgl, renderable) {\n  var gl = webgl.gl,\n      state = webgl.state;\n  ValueCell.update(renderable.values.dCalcType, 'density');\n  renderable.update();\n  state.colorMask(false, false, false, true);\n  state.blendFunc(gl.ONE, gl.ONE);\n  state.blendEquation(gl.FUNC_ADD);\n}\n\nfunction setupGroupIdRendering(webgl, renderable) {\n  var gl = webgl.gl,\n      state = webgl.state;\n  ValueCell.update(renderable.values.dCalcType, 'groupId');\n  renderable.update(); // overwrite color, don't change alpha\n\n  state.colorMask(true, true, true, false);\n  state.blendFunc(gl.ONE, gl.ZERO);\n  state.blendEquation(gl.FUNC_ADD);\n}\n\nfunction getTexture2dSize(gridDim) {\n  var area = gridDim[0] * gridDim[1] * gridDim[2];\n  var squareDim = Math.sqrt(area);\n  var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\n  var texDimX = 0;\n  var texDimY = gridDim[1];\n  var texRows = 1;\n  var texCols = gridDim[2];\n\n  if (powerOfTwoSize < gridDim[0] * gridDim[2]) {\n    texCols = Math.floor(powerOfTwoSize / gridDim[0]);\n    texRows = Math.ceil(gridDim[2] / texCols);\n    texDimX = texCols * gridDim[0];\n    texDimY *= texRows;\n  } else {\n    texDimX = gridDim[0] * gridDim[2];\n  } // console.log(texDimX, texDimY, texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2);\n\n\n  return {\n    texDimX: texDimX,\n    texDimY: texDimY,\n    texRows: texRows,\n    texCols: texCols,\n    powerOfTwoSize: texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2\n  };\n}\n\nfunction fieldFromTexture2d(ctx, texture, dim, texDim) {\n  // console.time('fieldFromTexture2d')\n  var dx = dim[0],\n      dy = dim[1],\n      dz = dim[2];\n  var width = texDim[0],\n      height = texDim[1];\n  var fboTexCols = Math.floor(width / dx);\n  var space = Tensor.Space(dim, [2, 1, 0], Float32Array);\n  var data = space.create();\n  var field = Tensor.create(space, data);\n  var idData = space.create();\n  var idField = Tensor.create(space, idData);\n  var image = new Uint8Array(width * height * 4);\n  var framebuffer = getFramebuffer(ctx);\n  framebuffer.bind();\n  texture.attachFramebuffer(framebuffer, 0);\n  ctx.readPixels(0, 0, width, height, image); // printImageData(createImageData(image, width, height), 1/3)\n\n  var j = 0;\n  var tmpCol = 0;\n  var tmpRow = 0;\n\n  for (var iz = 0; iz < dz; ++iz) {\n    if (tmpCol >= fboTexCols) {\n      tmpCol = 0;\n      tmpRow += dy;\n    }\n\n    for (var iy = 0; iy < dy; ++iy) {\n      for (var ix = 0; ix < dx; ++ix) {\n        var idx = 4 * (tmpCol * dx + (iy + tmpRow) * width + ix);\n        data[j] = image[idx + 3] / 255;\n        idData[j] = decodeFloatRGB(image[idx], image[idx + 1], image[idx + 2]);\n        j++;\n      }\n    }\n\n    tmpCol++;\n  } // console.timeEnd('fieldFromTexture2d')\n\n\n  return {\n    field: field,\n    idField: idField\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-math/geometry/gaussian-density/gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Michael Krone <michael.krone@uni-tuebingen.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Box3D } from '../../geometry';\r\nimport { OrderedSet } from '../../../mol-data/int';\r\nimport { Vec3, Tensor, Mat4, Vec2 } from '../../linear-algebra';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { createComputeRenderable } from '../../../mol-gl/renderable';\r\nimport { decodeFloatRGB } from '../../../mol-util/float-packing';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { createComputeRenderItem } from '../../../mol-gl/webgl/render-item';\r\nimport { ValueSpec, AttributeSpec, UniformSpec, TextureSpec, DefineSpec } from '../../../mol-gl/renderable/schema';\r\nimport { gaussianDensity_vert } from '../../../mol-gl/shader/gaussian-density.vert';\r\nimport { gaussianDensity_frag } from '../../../mol-gl/shader/gaussian-density.frag';\r\nvar GaussianDensitySchema = {\r\n    drawCount: ValueSpec('number'),\r\n    instanceCount: ValueSpec('number'),\r\n    aRadius: AttributeSpec('float32', 1, 0),\r\n    aPosition: AttributeSpec('float32', 3, 0),\r\n    aGroup: AttributeSpec('float32', 1, 0),\r\n    uCurrentSlice: UniformSpec('f'),\r\n    uCurrentX: UniformSpec('f'),\r\n    uCurrentY: UniformSpec('f'),\r\n    uBboxMin: UniformSpec('v3', 'material'),\r\n    uBboxSize: UniformSpec('v3', 'material'),\r\n    uGridDim: UniformSpec('v3', 'material'),\r\n    uGridTexDim: UniformSpec('v3', 'material'),\r\n    uGridTexScale: UniformSpec('v2', 'material'),\r\n    uAlpha: UniformSpec('f', 'material'),\r\n    uResolution: UniformSpec('f', 'material'),\r\n    uRadiusFactorInv: UniformSpec('f', 'material'),\r\n    tMinDistanceTex: TextureSpec('texture', 'rgba', 'float', 'nearest'),\r\n    dGridTexType: DefineSpec('string', ['2d', '3d']),\r\n    dCalcType: DefineSpec('string', ['density', 'minDistance', 'groupId']),\r\n};\r\nvar GaussianDensityName = 'gaussian-density';\r\nfunction getFramebuffer(webgl) {\r\n    if (!webgl.namedFramebuffers[GaussianDensityName]) {\r\n        webgl.namedFramebuffers[GaussianDensityName] = webgl.resources.framebuffer();\r\n    }\r\n    return webgl.namedFramebuffers[GaussianDensityName];\r\n}\r\nfunction getTexture(name, webgl, kind, format, type, filter) {\r\n    var _name = GaussianDensityName + \"-\" + name;\r\n    if (!webgl.namedTextures[_name]) {\r\n        webgl.namedTextures[_name] = webgl.resources.texture(kind, format, type, filter);\r\n    }\r\n    return webgl.namedTextures[_name];\r\n}\r\nexport function GaussianDensityGPU(position, box, radius, props, webgl) {\r\n    // always use texture2d when the gaussian density needs to be downloaded from the GPU,\r\n    // it's faster than texture3d\r\n    // console.time('GaussianDensityTexture2d')\r\n    var tmpTexture = getTexture('tmp', webgl, 'image-uint8', 'rgba', 'ubyte', 'linear');\r\n    var _a = calcGaussianDensityTexture2d(webgl, position, box, radius, false, props, tmpTexture), scale = _a.scale, bbox = _a.bbox, texture = _a.texture, gridDim = _a.gridDim, gridTexDim = _a.gridTexDim, radiusFactor = _a.radiusFactor, resolution = _a.resolution;\r\n    // webgl.waitForGpuCommandsCompleteSync()\r\n    // console.timeEnd('GaussianDensityTexture2d')\r\n    var _b = fieldFromTexture2d(webgl, texture, gridDim, gridTexDim), field = _b.field, idField = _b.idField;\r\n    return { field: field, idField: idField, transform: getTransform(scale, bbox), radiusFactor: radiusFactor, resolution: resolution };\r\n}\r\nexport function GaussianDensityTexture(webgl, position, box, radius, props, oldTexture) {\r\n    return webgl.isWebGL2 ?\r\n        GaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture) :\r\n        GaussianDensityTexture2d(webgl, position, box, radius, false, props, oldTexture);\r\n}\r\nexport function GaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, oldTexture) {\r\n    return finalizeGaussianDensityTexture(calcGaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, oldTexture));\r\n}\r\nexport function GaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture) {\r\n    return finalizeGaussianDensityTexture(calcGaussianDensityTexture3d(webgl, position, box, radius, props, oldTexture));\r\n}\r\nfunction finalizeGaussianDensityTexture(_a) {\r\n    var texture = _a.texture, scale = _a.scale, bbox = _a.bbox, gridDim = _a.gridDim, gridTexDim = _a.gridTexDim, gridTexScale = _a.gridTexScale, radiusFactor = _a.radiusFactor, resolution = _a.resolution;\r\n    return { transform: getTransform(scale, bbox), texture: texture, bbox: bbox, gridDim: gridDim, gridTexDim: gridTexDim, gridTexScale: gridTexScale, radiusFactor: radiusFactor, resolution: resolution };\r\n}\r\nfunction getTransform(scale, bbox) {\r\n    var transform = Mat4.identity();\r\n    Mat4.fromScaling(transform, scale);\r\n    Mat4.setTranslation(transform, bbox.min);\r\n    return transform;\r\n}\r\nfunction calcGaussianDensityTexture2d(webgl, position, box, radius, powerOfTwo, props, texture) {\r\n    // console.log('2d');\r\n    var gl = webgl.gl, resources = webgl.resources, state = webgl.state, _a = webgl.extensions, colorBufferFloat = _a.colorBufferFloat, textureFloat = _a.textureFloat, colorBufferHalfFloat = _a.colorBufferHalfFloat, textureHalfFloat = _a.textureHalfFloat, blendMinMax = _a.blendMinMax;\r\n    var smoothness = props.smoothness, resolution = props.resolution;\r\n    var _b = prepareGaussianDensityData(position, box, radius, props), drawCount = _b.drawCount, positions = _b.positions, radii = _b.radii, groups = _b.groups, scale = _b.scale, expandedBox = _b.expandedBox, dim = _b.dim, maxRadius = _b.maxRadius;\r\n    var dx = dim[0], dy = dim[1], dz = dim[2];\r\n    var _c = getTexture2dSize(dim), texDimX = _c.texDimX, texDimY = _c.texDimY, texCols = _c.texCols, powerOfTwoSize = _c.powerOfTwoSize;\r\n    // console.log({ texDimX, texDimY, texCols, powerOfTwoSize, dim });\r\n    var gridTexDim = Vec3.create(texDimX, texDimY, 0);\r\n    var gridTexScale = Vec2.create(texDimX / powerOfTwoSize, texDimY / powerOfTwoSize);\r\n    var radiusFactor = maxRadius * 2;\r\n    var width = powerOfTwo ? powerOfTwoSize : texDimX;\r\n    var height = powerOfTwo ? powerOfTwoSize : texDimY;\r\n    var minDistTex = getTexture('min-dist-2d', webgl, 'image-uint8', 'rgba', 'ubyte', 'nearest');\r\n    minDistTex.define(width, height);\r\n    var renderable = getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistTex, expandedBox, dim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor);\r\n    //\r\n    var _d = renderable.values, uCurrentSlice = _d.uCurrentSlice, uCurrentX = _d.uCurrentX, uCurrentY = _d.uCurrentY;\r\n    var framebuffer = getFramebuffer(webgl);\r\n    framebuffer.bind();\r\n    setRenderingDefaults(webgl);\r\n    if (!texture)\r\n        texture = colorBufferHalfFloat && textureHalfFloat\r\n            ? resources.texture('image-float16', 'rgba', 'fp16', 'linear')\r\n            : colorBufferFloat && textureFloat\r\n                ? resources.texture('image-float32', 'rgba', 'float', 'linear')\r\n                : resources.texture('image-uint8', 'rgba', 'ubyte', 'linear');\r\n    texture.define(width, height);\r\n    // console.log(renderable)\r\n    function render(fbTex, clear) {\r\n        state.currentRenderItemId = -1;\r\n        fbTex.attachFramebuffer(framebuffer, 0);\r\n        if (clear) {\r\n            gl.viewport(0, 0, width, height);\r\n            gl.scissor(0, 0, width, height);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        ValueCell.update(uCurrentY, 0);\r\n        var currCol = 0;\r\n        var currY = 0;\r\n        var currX = 0;\r\n        for (var i = 0; i < dz; ++i) {\r\n            if (currCol >= texCols) {\r\n                currCol -= texCols;\r\n                currY += dy;\r\n                currX = 0;\r\n                ValueCell.update(uCurrentY, currY);\r\n            }\r\n            // console.log({ i, currX, currY });\r\n            ValueCell.update(uCurrentX, currX);\r\n            ValueCell.update(uCurrentSlice, i);\r\n            gl.viewport(currX, currY, dx, dy);\r\n            gl.scissor(currX, currY, dx, dy);\r\n            renderable.render();\r\n            ++currCol;\r\n            currX += dx;\r\n        }\r\n        gl.flush();\r\n    }\r\n    setupDensityRendering(webgl, renderable);\r\n    render(texture, true);\r\n    if (blendMinMax) {\r\n        setupMinDistanceRendering(webgl, renderable);\r\n        render(minDistTex, true);\r\n        setupGroupIdRendering(webgl, renderable);\r\n        render(texture, false);\r\n    }\r\n    // printTexture(webgl, minDistTex, 0.75);\r\n    return { texture: texture, scale: scale, bbox: expandedBox, gridDim: dim, gridTexDim: gridTexDim, gridTexScale: gridTexScale, radiusFactor: radiusFactor, resolution: resolution };\r\n}\r\nfunction calcGaussianDensityTexture3d(webgl, position, box, radius, props, texture) {\r\n    // console.log('3d');\r\n    var gl = webgl.gl, resources = webgl.resources, state = webgl.state, _a = webgl.extensions, colorBufferFloat = _a.colorBufferFloat, textureFloat = _a.textureFloat, colorBufferHalfFloat = _a.colorBufferHalfFloat, textureHalfFloat = _a.textureHalfFloat;\r\n    var smoothness = props.smoothness, resolution = props.resolution;\r\n    var _b = prepareGaussianDensityData(position, box, radius, props), drawCount = _b.drawCount, positions = _b.positions, radii = _b.radii, groups = _b.groups, scale = _b.scale, expandedBox = _b.expandedBox, dim = _b.dim, maxRadius = _b.maxRadius;\r\n    var dx = dim[0], dy = dim[1], dz = dim[2];\r\n    var minDistTex = getTexture('min-dist-3d', webgl, 'volume-uint8', 'rgba', 'ubyte', 'nearest');\r\n    minDistTex.define(dx, dy, dz);\r\n    var gridTexScale = Vec2.create(1, 1);\r\n    var radiusFactor = maxRadius * 2;\r\n    var renderable = getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistTex, expandedBox, dim, dim, gridTexScale, smoothness, resolution, radiusFactor);\r\n    //\r\n    var uCurrentSlice = renderable.values.uCurrentSlice;\r\n    var framebuffer = getFramebuffer(webgl);\r\n    framebuffer.bind();\r\n    setRenderingDefaults(webgl);\r\n    gl.viewport(0, 0, dx, dy);\r\n    gl.scissor(0, 0, dx, dy);\r\n    if (!texture)\r\n        texture = colorBufferHalfFloat && textureHalfFloat\r\n            ? resources.texture('volume-float16', 'rgba', 'fp16', 'linear')\r\n            : colorBufferFloat && textureFloat\r\n                ? resources.texture('volume-float32', 'rgba', 'float', 'linear')\r\n                : resources.texture('volume-uint8', 'rgba', 'ubyte', 'linear');\r\n    texture.define(dx, dy, dz);\r\n    function render(fbTex, clear) {\r\n        state.currentRenderItemId = -1;\r\n        for (var i = 0; i < dz; ++i) {\r\n            ValueCell.update(uCurrentSlice, i);\r\n            fbTex.attachFramebuffer(framebuffer, 0, i);\r\n            if (clear)\r\n                gl.clear(gl.COLOR_BUFFER_BIT);\r\n            renderable.render();\r\n        }\r\n        gl.flush();\r\n    }\r\n    setupDensityRendering(webgl, renderable);\r\n    render(texture, true);\r\n    setupMinDistanceRendering(webgl, renderable);\r\n    render(minDistTex, true);\r\n    setupGroupIdRendering(webgl, renderable);\r\n    render(texture, false);\r\n    return { texture: texture, scale: scale, bbox: expandedBox, gridDim: dim, gridTexDim: dim, gridTexScale: gridTexScale, radiusFactor: radiusFactor, resolution: resolution };\r\n}\r\n//\r\nfunction prepareGaussianDensityData(position, box, radius, props) {\r\n    var resolution = props.resolution, radiusOffset = props.radiusOffset;\r\n    var scaleFactor = 1 / resolution;\r\n    var indices = position.indices, x = position.x, y = position.y, z = position.z, id = position.id;\r\n    var n = OrderedSet.size(indices);\r\n    var positions = new Float32Array(n * 3);\r\n    var radii = new Float32Array(n);\r\n    var groups = new Float32Array(n);\r\n    var maxRadius = 0;\r\n    for (var i = 0; i < n; ++i) {\r\n        var j = OrderedSet.getAt(indices, i);\r\n        positions[i * 3] = x[j];\r\n        positions[i * 3 + 1] = y[j];\r\n        positions[i * 3 + 2] = z[j];\r\n        var r = radius(j) + radiusOffset;\r\n        if (maxRadius < r)\r\n            maxRadius = r;\r\n        radii[i] = r;\r\n        groups[i] = id ? id[i] : i;\r\n    }\r\n    var pad = maxRadius * 2 + resolution * 4;\r\n    var expandedBox = Box3D.expand(Box3D(), box, Vec3.create(pad, pad, pad));\r\n    var scaledBox = Box3D.scale(Box3D(), expandedBox, scaleFactor);\r\n    var dim = Box3D.size(Vec3(), scaledBox);\r\n    Vec3.ceil(dim, dim);\r\n    var scale = Vec3.create(resolution, resolution, resolution);\r\n    return { drawCount: n, positions: positions, radii: radii, groups: groups, scale: scale, expandedBox: expandedBox, dim: dim, maxRadius: maxRadius };\r\n}\r\nfunction getGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor) {\r\n    // console.log('radiusFactor', radiusFactor);\r\n    if (webgl.namedComputeRenderables[GaussianDensityName]) {\r\n        var extent = Vec3.sub(Vec3(), box.max, box.min);\r\n        var v = webgl.namedComputeRenderables[GaussianDensityName].values;\r\n        ValueCell.updateIfChanged(v.drawCount, drawCount);\r\n        ValueCell.updateIfChanged(v.instanceCount, 1);\r\n        ValueCell.update(v.aRadius, radii);\r\n        ValueCell.update(v.aPosition, positions);\r\n        ValueCell.update(v.aGroup, groups);\r\n        ValueCell.updateIfChanged(v.uCurrentSlice, 0);\r\n        ValueCell.updateIfChanged(v.uCurrentX, 0);\r\n        ValueCell.updateIfChanged(v.uCurrentY, 0);\r\n        ValueCell.update(v.uBboxMin, box.min);\r\n        ValueCell.update(v.uBboxSize, extent);\r\n        ValueCell.update(v.uGridDim, gridDim);\r\n        ValueCell.update(v.uGridTexDim, gridTexDim);\r\n        ValueCell.update(v.uGridTexScale, gridTexScale);\r\n        ValueCell.updateIfChanged(v.uAlpha, smoothness);\r\n        ValueCell.updateIfChanged(v.uResolution, resolution);\r\n        ValueCell.updateIfChanged(v.uRadiusFactorInv, 1 / radiusFactor);\r\n        ValueCell.update(v.tMinDistanceTex, minDistanceTexture);\r\n        ValueCell.updateIfChanged(v.dGridTexType, minDistanceTexture.getDepth() > 0 ? '3d' : '2d');\r\n        ValueCell.updateIfChanged(v.dCalcType, 'density');\r\n        webgl.namedComputeRenderables[GaussianDensityName].update();\r\n    }\r\n    else {\r\n        webgl.namedComputeRenderables[GaussianDensityName] = createGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor);\r\n    }\r\n    return webgl.namedComputeRenderables[GaussianDensityName];\r\n}\r\nfunction createGaussianDensityRenderable(webgl, drawCount, positions, radii, groups, minDistanceTexture, box, gridDim, gridTexDim, gridTexScale, smoothness, resolution, radiusFactor) {\r\n    var extent = Vec3.sub(Vec3(), box.max, box.min);\r\n    var values = {\r\n        drawCount: ValueCell.create(drawCount),\r\n        instanceCount: ValueCell.create(1),\r\n        aRadius: ValueCell.create(radii),\r\n        aPosition: ValueCell.create(positions),\r\n        aGroup: ValueCell.create(groups),\r\n        uCurrentSlice: ValueCell.create(0),\r\n        uCurrentX: ValueCell.create(0),\r\n        uCurrentY: ValueCell.create(0),\r\n        uBboxMin: ValueCell.create(box.min),\r\n        uBboxSize: ValueCell.create(extent),\r\n        uGridDim: ValueCell.create(gridDim),\r\n        uGridTexDim: ValueCell.create(gridTexDim),\r\n        uGridTexScale: ValueCell.create(gridTexScale),\r\n        uAlpha: ValueCell.create(smoothness),\r\n        uResolution: ValueCell.create(resolution),\r\n        uRadiusFactorInv: ValueCell.create(1 / radiusFactor),\r\n        tMinDistanceTex: ValueCell.create(minDistanceTexture),\r\n        dGridTexType: ValueCell.create(minDistanceTexture.getDepth() > 0 ? '3d' : '2d'),\r\n        dCalcType: ValueCell.create('density'),\r\n    };\r\n    var schema = __assign({}, GaussianDensitySchema);\r\n    var shaderCode = ShaderCode(GaussianDensityName, gaussianDensity_vert, gaussianDensity_frag);\r\n    var renderItem = createComputeRenderItem(webgl, 'points', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction setRenderingDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.enable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.enable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.clearColor(0, 0, 0, 0);\r\n}\r\nfunction setupMinDistanceRendering(webgl, renderable) {\r\n    var gl = webgl.gl, state = webgl.state;\r\n    ValueCell.update(renderable.values.dCalcType, 'minDistance');\r\n    renderable.update();\r\n    state.colorMask(false, false, false, true);\r\n    state.blendFunc(gl.ONE, gl.ONE);\r\n    // the shader writes 1 - dist so we set blending to MAX\r\n    if (!webgl.extensions.blendMinMax) {\r\n        throw new Error('GPU gaussian surface calculation requires EXT_blend_minmax');\r\n    }\r\n    state.blendEquation(webgl.extensions.blendMinMax.MAX);\r\n}\r\nfunction setupDensityRendering(webgl, renderable) {\r\n    var gl = webgl.gl, state = webgl.state;\r\n    ValueCell.update(renderable.values.dCalcType, 'density');\r\n    renderable.update();\r\n    state.colorMask(false, false, false, true);\r\n    state.blendFunc(gl.ONE, gl.ONE);\r\n    state.blendEquation(gl.FUNC_ADD);\r\n}\r\nfunction setupGroupIdRendering(webgl, renderable) {\r\n    var gl = webgl.gl, state = webgl.state;\r\n    ValueCell.update(renderable.values.dCalcType, 'groupId');\r\n    renderable.update();\r\n    // overwrite color, don't change alpha\r\n    state.colorMask(true, true, true, false);\r\n    state.blendFunc(gl.ONE, gl.ZERO);\r\n    state.blendEquation(gl.FUNC_ADD);\r\n}\r\nfunction getTexture2dSize(gridDim) {\r\n    var area = gridDim[0] * gridDim[1] * gridDim[2];\r\n    var squareDim = Math.sqrt(area);\r\n    var powerOfTwoSize = Math.pow(2, Math.ceil(Math.log(squareDim) / Math.log(2)));\r\n    var texDimX = 0;\r\n    var texDimY = gridDim[1];\r\n    var texRows = 1;\r\n    var texCols = gridDim[2];\r\n    if (powerOfTwoSize < gridDim[0] * gridDim[2]) {\r\n        texCols = Math.floor(powerOfTwoSize / gridDim[0]);\r\n        texRows = Math.ceil(gridDim[2] / texCols);\r\n        texDimX = texCols * gridDim[0];\r\n        texDimY *= texRows;\r\n    }\r\n    else {\r\n        texDimX = gridDim[0] * gridDim[2];\r\n    }\r\n    // console.log(texDimX, texDimY, texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2);\r\n    return { texDimX: texDimX, texDimY: texDimY, texRows: texRows, texCols: texCols, powerOfTwoSize: texDimY < powerOfTwoSize ? powerOfTwoSize : powerOfTwoSize * 2 };\r\n}\r\nfunction fieldFromTexture2d(ctx, texture, dim, texDim) {\r\n    // console.time('fieldFromTexture2d')\r\n    var dx = dim[0], dy = dim[1], dz = dim[2];\r\n    var width = texDim[0], height = texDim[1];\r\n    var fboTexCols = Math.floor(width / dx);\r\n    var space = Tensor.Space(dim, [2, 1, 0], Float32Array);\r\n    var data = space.create();\r\n    var field = Tensor.create(space, data);\r\n    var idData = space.create();\r\n    var idField = Tensor.create(space, idData);\r\n    var image = new Uint8Array(width * height * 4);\r\n    var framebuffer = getFramebuffer(ctx);\r\n    framebuffer.bind();\r\n    texture.attachFramebuffer(framebuffer, 0);\r\n    ctx.readPixels(0, 0, width, height, image);\r\n    // printImageData(createImageData(image, width, height), 1/3)\r\n    var j = 0;\r\n    var tmpCol = 0;\r\n    var tmpRow = 0;\r\n    for (var iz = 0; iz < dz; ++iz) {\r\n        if (tmpCol >= fboTexCols) {\r\n            tmpCol = 0;\r\n            tmpRow += dy;\r\n        }\r\n        for (var iy = 0; iy < dy; ++iy) {\r\n            for (var ix = 0; ix < dx; ++ix) {\r\n                var idx = 4 * (tmpCol * dx + (iy + tmpRow) * width + ix);\r\n                data[j] = image[idx + 3] / 255;\r\n                idData[j] = decodeFloatRGB(image[idx], image[idx + 1], image[idx + 2]);\r\n                j++;\r\n            }\r\n        }\r\n        tmpCol++;\r\n    }\r\n    // console.timeEnd('fieldFromTexture2d')\r\n    return { field: field, idField: idField };\r\n}\r\n//# sourceMappingURL=gpu.js.map"]},"metadata":{},"sourceType":"module"}