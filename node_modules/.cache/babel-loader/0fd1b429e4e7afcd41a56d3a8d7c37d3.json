{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Structure } from '../../structure';\nimport { SortedArray } from '../../../../mol-data/int';\nexport function structureUnion(source, structures) {\n  if (structures.length === 0) return Structure.Empty;\n  if (structures.length === 1) return structures[0];\n  var unitMap = new Map();\n  var fullUnits = new Set();\n\n  for (var _a = 0, structures_1 = structures; _a < structures_1.length; _a++) {\n    var units = structures_1[_a].units;\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      var u = units[i];\n\n      if (unitMap.has(u.id)) {\n        // check if there is anything more to union in this particual unit.\n        if (fullUnits.has(u.id)) continue;\n        var merged = SortedArray.union(unitMap.get(u.id), u.elements);\n        unitMap.set(u.id, merged);\n        if (merged.length === source.unitMap.get(u.id).elements.length) fullUnits.add(u.id);\n      } else {\n        unitMap.set(u.id, u.elements);\n        if (u.elements.length === source.unitMap.get(u.id).elements.length) fullUnits.add(u.id);\n      }\n    }\n  }\n\n  var builder = source.subsetBuilder(true);\n  unitMap.forEach(buildUnion, builder);\n  return builder.getStructure();\n}\n\nfunction buildUnion(elements, id) {\n  this.setUnit(id, elements);\n}\n\nexport function structureAreEqual(sA, sB) {\n  if (sA === sB) return true;\n  if (sA.units.length !== sB.units.length) return false;\n  var aU = sA.units,\n      bU = sB.unitMap;\n\n  for (var i = 0, _i = aU.length; i < _i; i++) {\n    var u = aU[i];\n    if (!bU.has(u.id)) return false;\n    var v = bU.get(u.id);\n    if (!SortedArray.areEqual(u.elements, v.elements)) return false;\n  }\n\n  return true;\n}\nexport function structureAreIntersecting(sA, sB) {\n  if (sA === sB) return true;\n  var a, b;\n\n  if (sA.units.length < sB.units.length) {\n    a = sA;\n    b = sB;\n  } else {\n    a = sB;\n    b = sA;\n  }\n\n  var aU = a.units,\n      bU = b.unitMap;\n\n  for (var i = 0, _i = aU.length; i < _i; i++) {\n    var u = aU[i];\n    if (!bU.has(u.id)) continue;\n    var v = bU.get(u.id);\n    if (SortedArray.areIntersecting(u.elements, v.elements)) return true;\n  }\n\n  return false;\n}\nexport function structureIntersect(sA, sB) {\n  if (sA === sB) return sA;\n  if (!structureAreIntersecting(sA, sB)) return Structure.Empty;\n  var a, b;\n\n  if (sA.units.length < sB.units.length) {\n    a = sA;\n    b = sB;\n  } else {\n    a = sB;\n    b = sA;\n  }\n\n  var aU = a.units,\n      bU = b.unitMap;\n  var units = [];\n\n  for (var i = 0, _i = aU.length; i < _i; i++) {\n    var u = aU[i];\n    if (!bU.has(u.id)) continue;\n    var v = bU.get(u.id);\n\n    if (SortedArray.areIntersecting(u.elements, v.elements)) {\n      var int = SortedArray.intersect(u.elements, v.elements);\n      units[units.length] = u.getChild(int);\n    }\n  }\n\n  return Structure.create(units, {\n    parent: sA.parent || sB.parent\n  });\n}\nexport function structureSubtract(a, b) {\n  if (a === b) return Structure.Empty;\n  if (!structureAreIntersecting(a, b)) return a;\n  var aU = a.units,\n      bU = b.unitMap;\n  var units = [];\n\n  for (var i = 0, _i = aU.length; i < _i; i++) {\n    var u = aU[i];\n\n    if (!bU.has(u.id)) {\n      units[units.length] = u;\n      continue;\n    }\n\n    var v = bU.get(u.id);\n    var sub = SortedArray.subtract(u.elements, v.elements);\n\n    if (sub.length > 0) {\n      units[units.length] = u.getChild(sub);\n    }\n  }\n\n  return Structure.create(units, {\n    parent: a.parent || b.parent\n  });\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/query/utils/structure-set.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Structure } from '../../structure';\r\nimport { SortedArray } from '../../../../mol-data/int';\r\nexport function structureUnion(source, structures) {\r\n    if (structures.length === 0)\r\n        return Structure.Empty;\r\n    if (structures.length === 1)\r\n        return structures[0];\r\n    var unitMap = new Map();\r\n    var fullUnits = new Set();\r\n    for (var _a = 0, structures_1 = structures; _a < structures_1.length; _a++) {\r\n        var units = structures_1[_a].units;\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            var u = units[i];\r\n            if (unitMap.has(u.id)) {\r\n                // check if there is anything more to union in this particual unit.\r\n                if (fullUnits.has(u.id))\r\n                    continue;\r\n                var merged = SortedArray.union(unitMap.get(u.id), u.elements);\r\n                unitMap.set(u.id, merged);\r\n                if (merged.length === source.unitMap.get(u.id).elements.length)\r\n                    fullUnits.add(u.id);\r\n            }\r\n            else {\r\n                unitMap.set(u.id, u.elements);\r\n                if (u.elements.length === source.unitMap.get(u.id).elements.length)\r\n                    fullUnits.add(u.id);\r\n            }\r\n        }\r\n    }\r\n    var builder = source.subsetBuilder(true);\r\n    unitMap.forEach(buildUnion, builder);\r\n    return builder.getStructure();\r\n}\r\nfunction buildUnion(elements, id) {\r\n    this.setUnit(id, elements);\r\n}\r\nexport function structureAreEqual(sA, sB) {\r\n    if (sA === sB)\r\n        return true;\r\n    if (sA.units.length !== sB.units.length)\r\n        return false;\r\n    var aU = sA.units, bU = sB.unitMap;\r\n    for (var i = 0, _i = aU.length; i < _i; i++) {\r\n        var u = aU[i];\r\n        if (!bU.has(u.id))\r\n            return false;\r\n        var v = bU.get(u.id);\r\n        if (!SortedArray.areEqual(u.elements, v.elements))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nexport function structureAreIntersecting(sA, sB) {\r\n    if (sA === sB)\r\n        return true;\r\n    var a, b;\r\n    if (sA.units.length < sB.units.length) {\r\n        a = sA;\r\n        b = sB;\r\n    }\r\n    else {\r\n        a = sB;\r\n        b = sA;\r\n    }\r\n    var aU = a.units, bU = b.unitMap;\r\n    for (var i = 0, _i = aU.length; i < _i; i++) {\r\n        var u = aU[i];\r\n        if (!bU.has(u.id))\r\n            continue;\r\n        var v = bU.get(u.id);\r\n        if (SortedArray.areIntersecting(u.elements, v.elements))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nexport function structureIntersect(sA, sB) {\r\n    if (sA === sB)\r\n        return sA;\r\n    if (!structureAreIntersecting(sA, sB))\r\n        return Structure.Empty;\r\n    var a, b;\r\n    if (sA.units.length < sB.units.length) {\r\n        a = sA;\r\n        b = sB;\r\n    }\r\n    else {\r\n        a = sB;\r\n        b = sA;\r\n    }\r\n    var aU = a.units, bU = b.unitMap;\r\n    var units = [];\r\n    for (var i = 0, _i = aU.length; i < _i; i++) {\r\n        var u = aU[i];\r\n        if (!bU.has(u.id))\r\n            continue;\r\n        var v = bU.get(u.id);\r\n        if (SortedArray.areIntersecting(u.elements, v.elements)) {\r\n            var int = SortedArray.intersect(u.elements, v.elements);\r\n            units[units.length] = u.getChild(int);\r\n        }\r\n    }\r\n    return Structure.create(units, { parent: sA.parent || sB.parent });\r\n}\r\nexport function structureSubtract(a, b) {\r\n    if (a === b)\r\n        return Structure.Empty;\r\n    if (!structureAreIntersecting(a, b))\r\n        return a;\r\n    var aU = a.units, bU = b.unitMap;\r\n    var units = [];\r\n    for (var i = 0, _i = aU.length; i < _i; i++) {\r\n        var u = aU[i];\r\n        if (!bU.has(u.id)) {\r\n            units[units.length] = u;\r\n            continue;\r\n        }\r\n        var v = bU.get(u.id);\r\n        var sub = SortedArray.subtract(u.elements, v.elements);\r\n        if (sub.length > 0) {\r\n            units[units.length] = u.getChild(sub);\r\n        }\r\n    }\r\n    return Structure.create(units, { parent: a.parent || b.parent });\r\n}\r\n//# sourceMappingURL=structure-set.js.map"]},"metadata":{},"sourceType":"module"}