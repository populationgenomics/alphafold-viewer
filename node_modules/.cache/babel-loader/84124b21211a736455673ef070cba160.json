{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { MaxAsa, VdWLookup } from './common';\nimport { getElementIdx, isHydrogen } from '../../../../mol-model/structure/structure/unit/bonds/common';\nimport { isPolymer, isNucleic } from '../../../../mol-model/structure/model/types';\nimport { VdwRadius } from '../../../../mol-model/structure/model/properties/atomic';\nimport { StructureElement, StructureProperties } from '../../../../mol-model/structure/structure';\nimport { getElementMoleculeType } from '../../../../mol-model/structure/util';\nexport function assignRadiusForHeavyAtoms(ctx) {\n  var key = StructureProperties.residue.key;\n  var _a = StructureProperties.atom,\n      type_symbol = _a.type_symbol,\n      label_atom_id = _a.label_atom_id,\n      label_comp_id = _a.label_comp_id;\n  var structure = ctx.structure,\n      atomRadiusType = ctx.atomRadiusType,\n      serialResidueIndex = ctx.serialResidueIndex;\n  var l = StructureElement.Location.create(structure);\n  var prevResidueIdx = 0;\n  var residueIdx = 0;\n  var serialResidueIdx = -1;\n  l.structure = structure;\n\n  for (var i = 0, m = 0, il = structure.units.length; i < il; ++i) {\n    var unit = structure.units[i];\n    var elements = unit.elements;\n    l.unit = unit;\n    prevResidueIdx = -1;\n\n    for (var j = 0, jl = elements.length; j < jl; ++j) {\n      var eI = elements[j];\n      var mj = m + j;\n      l.element = eI;\n      residueIdx = key(l);\n      if (prevResidueIdx !== residueIdx) ++serialResidueIdx;\n      prevResidueIdx = residueIdx;\n      var element = type_symbol(l);\n      var elementIdx = getElementIdx(element); // skip hydrogen atoms\n\n      if (isHydrogen(elementIdx)) {\n        atomRadiusType[mj] = 0;\n        serialResidueIndex[mj] = -1;\n        continue;\n      }\n\n      var atomId = label_atom_id(l);\n      var moleculeType = getElementMoleculeType(unit, eI); // skip water and optionally non-polymer groups\n\n      if (moleculeType === 2\n      /* Water */\n      || !ctx.nonPolymer && !isPolymer(moleculeType)) {\n        atomRadiusType[mj] = 0;\n        serialResidueIndex[mj] = -1;\n        continue;\n      }\n\n      var compId = label_comp_id(l);\n\n      if (ctx.traceOnly && (atomId !== 'CA' && atomId !== 'BB' || !MaxAsa[compId])) {\n        atomRadiusType[mj] = 0;\n        serialResidueIndex[mj] = serialResidueIdx;\n        continue;\n      }\n\n      if (isNucleic(moleculeType)) {\n        atomRadiusType[mj] = determineRadiusNucl(atomId, element, compId);\n      } else if (moleculeType === 5\n      /* Protein */\n      ) {\n        atomRadiusType[mj] = determineRadiusAmino(atomId, element, compId);\n      } else {\n        atomRadiusType[mj] = handleNonStandardCase(element);\n      }\n\n      serialResidueIndex[mj] = serialResidueIdx;\n    }\n\n    m += elements.length;\n  }\n}\n/**\r\n * Gets the van der Waals radius of the given atom following the values defined by Chothia (1976)\r\n * J.Mol.Biol.105,1-14. NOTE: the vdw values defined by the paper assume no Hydrogens and thus \"inflates\" slightly\r\n * the heavy atoms to account for Hydrogens.\r\n */\n\nfunction determineRadiusAmino(atomId, element, compId) {\n  switch (element) {\n    case 'O':\n      return 5;\n\n    case 'S':\n      return 6;\n\n    case 'N':\n      return atomId === 'NZ' ? 4 : 3;\n\n    case 'C':\n      switch (atomId) {\n        case 'C':\n        case 'CE1':\n        case 'CE2':\n        case 'CE3':\n        case 'CH2':\n        case 'CZ':\n        case 'CZ2':\n        case 'CZ3':\n          return 1;\n\n        case 'CA':\n        case 'CB':\n        case 'CE':\n        case 'CG1':\n        case 'CG2':\n          return 2;\n\n        default:\n          switch (compId) {\n            case 'PHE':\n            case 'TRP':\n            case 'TYR':\n            case 'HIS':\n            case 'ASP':\n            case 'ASN':\n              return 1;\n\n            case 'PRO':\n            case 'LYS':\n            case 'ARG':\n            case 'MET':\n            case 'ILE':\n            case 'LEU':\n              return 2;\n\n            case 'GLU':\n            case 'GLN':\n              return atomId === 'CD' ? 1 : 2;\n          }\n\n      }\n\n  }\n\n  return handleNonStandardCase(element);\n}\n\nfunction determineRadiusNucl(atomId, element, compId) {\n  switch (element) {\n    case 'C':\n      return 7;\n\n    case 'N':\n      return 8;\n\n    case 'P':\n      return 9;\n\n    case 'O':\n      return 5;\n  }\n\n  return handleNonStandardCase(element);\n}\n\nfunction handleNonStandardCase(element) {\n  var radius = VdwRadius(element);\n  var index = VdWLookup.indexOf(radius);\n\n  if (index === -1) {\n    // add novel value to lookup array\n    index = VdWLookup.length;\n    VdWLookup[index] = radius;\n  }\n\n  return index;\n}","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/accessible-surface-area/shrake-rupley/radii.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { MaxAsa, VdWLookup } from './common';\r\nimport { getElementIdx, isHydrogen } from '../../../../mol-model/structure/structure/unit/bonds/common';\r\nimport { isPolymer, isNucleic } from '../../../../mol-model/structure/model/types';\r\nimport { VdwRadius } from '../../../../mol-model/structure/model/properties/atomic';\r\nimport { StructureElement, StructureProperties } from '../../../../mol-model/structure/structure';\r\nimport { getElementMoleculeType } from '../../../../mol-model/structure/util';\r\nexport function assignRadiusForHeavyAtoms(ctx) {\r\n    var key = StructureProperties.residue.key;\r\n    var _a = StructureProperties.atom, type_symbol = _a.type_symbol, label_atom_id = _a.label_atom_id, label_comp_id = _a.label_comp_id;\r\n    var structure = ctx.structure, atomRadiusType = ctx.atomRadiusType, serialResidueIndex = ctx.serialResidueIndex;\r\n    var l = StructureElement.Location.create(structure);\r\n    var prevResidueIdx = 0;\r\n    var residueIdx = 0;\r\n    var serialResidueIdx = -1;\r\n    l.structure = structure;\r\n    for (var i = 0, m = 0, il = structure.units.length; i < il; ++i) {\r\n        var unit = structure.units[i];\r\n        var elements = unit.elements;\r\n        l.unit = unit;\r\n        prevResidueIdx = -1;\r\n        for (var j = 0, jl = elements.length; j < jl; ++j) {\r\n            var eI = elements[j];\r\n            var mj = m + j;\r\n            l.element = eI;\r\n            residueIdx = key(l);\r\n            if (prevResidueIdx !== residueIdx)\r\n                ++serialResidueIdx;\r\n            prevResidueIdx = residueIdx;\r\n            var element = type_symbol(l);\r\n            var elementIdx = getElementIdx(element);\r\n            // skip hydrogen atoms\r\n            if (isHydrogen(elementIdx)) {\r\n                atomRadiusType[mj] = 0;\r\n                serialResidueIndex[mj] = -1;\r\n                continue;\r\n            }\r\n            var atomId = label_atom_id(l);\r\n            var moleculeType = getElementMoleculeType(unit, eI);\r\n            // skip water and optionally non-polymer groups\r\n            if (moleculeType === 2 /* Water */ || (!ctx.nonPolymer && !isPolymer(moleculeType))) {\r\n                atomRadiusType[mj] = 0;\r\n                serialResidueIndex[mj] = -1;\r\n                continue;\r\n            }\r\n            var compId = label_comp_id(l);\r\n            if (ctx.traceOnly && ((atomId !== 'CA' && atomId !== 'BB') || !MaxAsa[compId])) {\r\n                atomRadiusType[mj] = 0;\r\n                serialResidueIndex[mj] = serialResidueIdx;\r\n                continue;\r\n            }\r\n            if (isNucleic(moleculeType)) {\r\n                atomRadiusType[mj] = determineRadiusNucl(atomId, element, compId);\r\n            }\r\n            else if (moleculeType === 5 /* Protein */) {\r\n                atomRadiusType[mj] = determineRadiusAmino(atomId, element, compId);\r\n            }\r\n            else {\r\n                atomRadiusType[mj] = handleNonStandardCase(element);\r\n            }\r\n            serialResidueIndex[mj] = serialResidueIdx;\r\n        }\r\n        m += elements.length;\r\n    }\r\n}\r\n/**\r\n * Gets the van der Waals radius of the given atom following the values defined by Chothia (1976)\r\n * J.Mol.Biol.105,1-14. NOTE: the vdw values defined by the paper assume no Hydrogens and thus \"inflates\" slightly\r\n * the heavy atoms to account for Hydrogens.\r\n */\r\nfunction determineRadiusAmino(atomId, element, compId) {\r\n    switch (element) {\r\n        case 'O':\r\n            return 5;\r\n        case 'S':\r\n            return 6;\r\n        case 'N':\r\n            return atomId === 'NZ' ? 4 : 3;\r\n        case 'C':\r\n            switch (atomId) {\r\n                case 'C':\r\n                case 'CE1':\r\n                case 'CE2':\r\n                case 'CE3':\r\n                case 'CH2':\r\n                case 'CZ':\r\n                case 'CZ2':\r\n                case 'CZ3':\r\n                    return 1;\r\n                case 'CA':\r\n                case 'CB':\r\n                case 'CE':\r\n                case 'CG1':\r\n                case 'CG2':\r\n                    return 2;\r\n                default:\r\n                    switch (compId) {\r\n                        case 'PHE':\r\n                        case 'TRP':\r\n                        case 'TYR':\r\n                        case 'HIS':\r\n                        case 'ASP':\r\n                        case 'ASN':\r\n                            return 1;\r\n                        case 'PRO':\r\n                        case 'LYS':\r\n                        case 'ARG':\r\n                        case 'MET':\r\n                        case 'ILE':\r\n                        case 'LEU':\r\n                            return 2;\r\n                        case 'GLU':\r\n                        case 'GLN':\r\n                            return atomId === 'CD' ? 1 : 2;\r\n                    }\r\n            }\r\n    }\r\n    return handleNonStandardCase(element);\r\n}\r\nfunction determineRadiusNucl(atomId, element, compId) {\r\n    switch (element) {\r\n        case 'C': return 7;\r\n        case 'N': return 8;\r\n        case 'P': return 9;\r\n        case 'O': return 5;\r\n    }\r\n    return handleNonStandardCase(element);\r\n}\r\nfunction handleNonStandardCase(element) {\r\n    var radius = VdwRadius(element);\r\n    var index = VdWLookup.indexOf(radius);\r\n    if (index === -1) {\r\n        // add novel value to lookup array\r\n        index = VdWLookup.length;\r\n        VdWLookup[index] = radius;\r\n    }\r\n    return index;\r\n}\r\n//# sourceMappingURL=radii.js.map"]},"metadata":{},"sourceType":"module"}