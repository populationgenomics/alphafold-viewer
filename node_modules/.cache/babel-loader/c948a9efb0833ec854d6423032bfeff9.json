{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Loci, isEmptyLoci, isEveryLoci, EveryLoci } from '../mol-model/loci';\nimport { applyMarkerAction, getMarkerInfo, setMarkerValue, getPartialMarkerAverage, MarkerActions } from '../mol-util/marker-action';\nimport { Mat4 } from '../mol-math/linear-algebra';\nimport { updateTransformData, fillIdentityTransform } from '../mol-geo/geometry/transform-data';\nimport { calculateTransformBoundingSphere } from '../mol-gl/renderable/util';\nimport { ValueCell } from '../mol-util';\nimport { createOverpaint, clearOverpaint, applyOverpaintColor } from '../mol-geo/geometry/overpaint-data';\nimport { Interval } from '../mol-data/int';\nimport { createTransparency, clearTransparency, applyTransparencyValue, getTransparencyAverage } from '../mol-geo/geometry/transparency-data';\nimport { createClipping, applyClippingGroups, clearClipping } from '../mol-geo/geometry/clipping-data';\nimport { getMarkersAverage } from '../mol-geo/geometry/marker-data';\nexport { Visual };\nvar Visual;\n\n(function (Visual) {\n  function setVisibility(renderObject, visible) {\n    if (renderObject) renderObject.state.visible = visible;\n  }\n\n  Visual.setVisibility = setVisibility;\n\n  function setAlphaFactor(renderObject, alphaFactor) {\n    if (renderObject) renderObject.state.alphaFactor = alphaFactor;\n  }\n\n  Visual.setAlphaFactor = setAlphaFactor;\n\n  function setPickable(renderObject, pickable) {\n    if (renderObject) renderObject.state.pickable = pickable;\n  }\n\n  Visual.setPickable = setPickable;\n\n  function setColorOnly(renderObject, colorOnly) {\n    if (renderObject) renderObject.state.colorOnly = colorOnly;\n  }\n\n  Visual.setColorOnly = setColorOnly;\n\n  function mark(renderObject, loci, action, lociApply, previous) {\n    if (!renderObject || isEmptyLoci(loci)) return false;\n    var _a = renderObject.values,\n        tMarker = _a.tMarker,\n        dMarkerType = _a.dMarkerType,\n        uMarker = _a.uMarker,\n        markerAverage = _a.markerAverage,\n        markerStatus = _a.markerStatus,\n        uGroupCount = _a.uGroupCount,\n        instanceCount = _a.instanceCount;\n    var count = uGroupCount.ref.value * instanceCount.ref.value;\n    var array = tMarker.ref.value.array;\n    var currentStatus = markerStatus.ref.value;\n\n    if (!isEveryLoci(loci)) {\n      var intervalSize_1 = 0;\n      lociApply(loci, function (interval) {\n        intervalSize_1 += Interval.size(interval);\n        return true;\n      }, true);\n      if (intervalSize_1 === 0) return false;\n      if (intervalSize_1 === count) loci = EveryLoci;\n    }\n\n    var changed = false;\n    var average = -1;\n    var status = -1;\n\n    if (isEveryLoci(loci)) {\n      var info = getMarkerInfo(action, currentStatus);\n\n      if (info.status !== -1) {\n        changed = currentStatus !== info.status;\n        if (changed) setMarkerValue(array, info.status, count);\n      } else {\n        changed = applyMarkerAction(array, Interval.ofLength(count), action);\n      }\n\n      average = info.average;\n      status = info.status;\n    } else {\n      changed = lociApply(loci, function (interval) {\n        return applyMarkerAction(array, interval, action);\n      }, true);\n\n      if (changed) {\n        average = getPartialMarkerAverage(action, currentStatus);\n\n        if (previous && previous.status !== -1 && average === -1 && MarkerActions.isReverse(previous.action, action) && Loci.areEqual(loci, previous.loci)) {\n          status = previous.status;\n          average = status === 0 ? 0 : 0.5;\n        }\n      }\n    }\n\n    if (changed) {\n      if (average === -1) {\n        average = getMarkersAverage(array, count);\n        if (average === 0) status = 0;\n      }\n\n      if (previous) {\n        previous.action = action;\n        previous.loci = loci;\n        previous.status = currentStatus;\n      }\n\n      ValueCell.updateIfChanged(uMarker, status);\n      if (status === -1) ValueCell.update(tMarker, tMarker.ref.value);\n      ValueCell.updateIfChanged(dMarkerType, status === -1 ? 'groupInstance' : 'uniform');\n      ValueCell.updateIfChanged(markerAverage, average);\n      ValueCell.updateIfChanged(markerStatus, status);\n    }\n\n    return changed;\n  }\n\n  Visual.mark = mark;\n\n  function setOverpaint(renderObject, overpaint, lociApply, clear) {\n    if (!renderObject) return;\n    var _a = renderObject.values,\n        tOverpaint = _a.tOverpaint,\n        uGroupCount = _a.uGroupCount,\n        instanceCount = _a.instanceCount;\n    var count = uGroupCount.ref.value * instanceCount.ref.value; // ensure texture has right size\n\n    createOverpaint(overpaint.layers.length ? count : 0, renderObject.values);\n    var array = tOverpaint.ref.value.array; // clear all if requested\n\n    if (clear) clearOverpaint(array, 0, count);\n\n    var _loop_1 = function (i, il) {\n      var _b = overpaint.layers[i],\n          loci = _b.loci,\n          color = _b.color,\n          clear_1 = _b.clear;\n\n      var apply = function (interval) {\n        var start = Interval.start(interval);\n        var end = Interval.end(interval);\n        return clear_1 ? clearOverpaint(array, start, end) : applyOverpaintColor(array, start, end, color);\n      };\n\n      lociApply(loci, apply, false);\n    };\n\n    for (var i = 0, il = overpaint.layers.length; i < il; ++i) {\n      _loop_1(i, il);\n    }\n\n    ValueCell.update(tOverpaint, tOverpaint.ref.value);\n  }\n\n  Visual.setOverpaint = setOverpaint;\n\n  function setTransparency(renderObject, transparency, lociApply, clear) {\n    if (!renderObject) return;\n    var _a = renderObject.values,\n        tTransparency = _a.tTransparency,\n        transparencyAverage = _a.transparencyAverage,\n        uGroupCount = _a.uGroupCount,\n        instanceCount = _a.instanceCount;\n    var count = uGroupCount.ref.value * instanceCount.ref.value; // ensure texture has right size and variant\n\n    createTransparency(transparency.layers.length ? count : 0, renderObject.values);\n    var array = tTransparency.ref.value.array; // clear if requested\n\n    if (clear) clearTransparency(array, 0, count);\n\n    var _loop_2 = function (i, il) {\n      var _b = transparency.layers[i],\n          loci = _b.loci,\n          value = _b.value;\n\n      var apply = function (interval) {\n        var start = Interval.start(interval);\n        var end = Interval.end(interval);\n        return applyTransparencyValue(array, start, end, value);\n      };\n\n      lociApply(loci, apply, false);\n    };\n\n    for (var i = 0, il = transparency.layers.length; i < il; ++i) {\n      _loop_2(i, il);\n    }\n\n    ValueCell.update(tTransparency, tTransparency.ref.value);\n    ValueCell.updateIfChanged(transparencyAverage, getTransparencyAverage(array, count));\n  }\n\n  Visual.setTransparency = setTransparency;\n\n  function setClipping(renderObject, clipping, lociApply, clear) {\n    if (!renderObject) return;\n    var _a = renderObject.values,\n        tClipping = _a.tClipping,\n        uGroupCount = _a.uGroupCount,\n        instanceCount = _a.instanceCount;\n    var count = uGroupCount.ref.value * instanceCount.ref.value; // ensure texture has right size\n\n    createClipping(clipping.layers.length ? count : 0, renderObject.values);\n    var array = tClipping.ref.value.array; // clear if requested\n\n    if (clear) clearClipping(array, 0, count);\n\n    var _loop_3 = function (i, il) {\n      var _b = clipping.layers[i],\n          loci = _b.loci,\n          groups = _b.groups;\n\n      var apply = function (interval) {\n        var start = Interval.start(interval);\n        var end = Interval.end(interval);\n        return applyClippingGroups(array, start, end, groups);\n      };\n\n      lociApply(loci, apply, false);\n    };\n\n    for (var i = 0, il = clipping.layers.length; i < il; ++i) {\n      _loop_3(i, il);\n    }\n\n    ValueCell.update(tClipping, tClipping.ref.value);\n  }\n\n  Visual.setClipping = setClipping;\n\n  function setTransform(renderObject, transform, instanceTransforms) {\n    if (!renderObject || !transform && !instanceTransforms) return;\n    var values = renderObject.values;\n\n    if (transform) {\n      Mat4.copy(values.matrix.ref.value, transform);\n      ValueCell.update(values.matrix, values.matrix.ref.value);\n    }\n\n    if (instanceTransforms) {\n      values.extraTransform.ref.value.set(instanceTransforms);\n      ValueCell.update(values.extraTransform, values.extraTransform.ref.value);\n    } else if (instanceTransforms === null) {\n      fillIdentityTransform(values.extraTransform.ref.value, values.instanceCount.ref.value);\n      ValueCell.update(values.extraTransform, values.extraTransform.ref.value);\n    }\n\n    updateTransformData(values);\n    var boundingSphere = calculateTransformBoundingSphere(values.invariantBoundingSphere.ref.value, values.aTransform.ref.value, values.instanceCount.ref.value);\n    ValueCell.update(values.boundingSphere, boundingSphere);\n  }\n\n  Visual.setTransform = setTransform;\n})(Visual || (Visual = {}));","map":{"version":3,"sources":["../../src/mol-repr/visual.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAKH,SAAS,IAAT,EAAe,WAAf,EAA4B,WAA5B,EAAyC,SAAzC,QAA0D,mBAA1D;AACA,SAAuB,iBAAvB,EAA0C,aAA1C,EAAyD,cAAzD,EAAyE,uBAAzE,EAAkG,aAAlG,QAAmI,2BAAnI;AAIA,SAAS,IAAT,QAAqB,4BAArB;AACA,SAAS,mBAAT,EAA8B,qBAA9B,QAA2D,oCAA3D;AACA,SAAS,gCAAT,QAAiD,2BAAjD;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA,SAAS,eAAT,EAA0B,cAA1B,EAA0C,mBAA1C,QAAqE,oCAArE;AACA,SAAS,QAAT,QAAyB,iBAAzB;AAEA,SAAS,kBAAT,EAA6B,iBAA7B,EAAgD,sBAAhD,EAAwE,sBAAxE,QAAsG,uCAAtG;AAEA,SAAS,cAAT,EAAyB,mBAAzB,EAA8C,aAA9C,QAAmE,mCAAnE;AACA,SAAS,iBAAT,QAAkC,iCAAlC;AAOA,SAAS,MAAT;AAmBA,IAAU,MAAV;;AAAA,CAAA,UAAU,MAAV,EAAgB;AAGZ,WAAgB,aAAhB,CAA8B,YAA9B,EAA8E,OAA9E,EAA8F;AAC1F,QAAI,YAAJ,EAAkB,YAAY,CAAC,KAAb,CAAmB,OAAnB,GAA6B,OAA7B;AACrB;;AAFe,EAAA,MAAA,CAAA,aAAA,GAAa,aAAb;;AAIhB,WAAgB,cAAhB,CAA+B,YAA/B,EAA+E,WAA/E,EAAkG;AAC9F,QAAI,YAAJ,EAAkB,YAAY,CAAC,KAAb,CAAmB,WAAnB,GAAiC,WAAjC;AACrB;;AAFe,EAAA,MAAA,CAAA,cAAA,GAAc,cAAd;;AAIhB,WAAgB,WAAhB,CAA4B,YAA5B,EAA4E,QAA5E,EAA6F;AACzF,QAAI,YAAJ,EAAkB,YAAY,CAAC,KAAb,CAAmB,QAAnB,GAA8B,QAA9B;AACrB;;AAFe,EAAA,MAAA,CAAA,WAAA,GAAW,WAAX;;AAIhB,WAAgB,YAAhB,CAA6B,YAA7B,EAA6E,SAA7E,EAA+F;AAC3F,QAAI,YAAJ,EAAkB,YAAY,CAAC,KAAb,CAAmB,SAAnB,GAA+B,SAA/B;AACrB;;AAFe,EAAA,MAAA,CAAA,YAAA,GAAY,YAAZ;;AAMhB,WAAgB,IAAhB,CAAqB,YAArB,EAAqE,IAArE,EAAiF,MAAjF,EAAuG,SAAvG,EAA6H,QAA7H,EAAoJ;AAChJ,QAAI,CAAC,YAAD,IAAiB,WAAW,CAAC,IAAD,CAAhC,EAAwC,OAAO,KAAP;AAElC,QAAA,EAAA,GAA6F,YAAY,CAAC,MAA1G;AAAA,QAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,QAAW,WAAW,GAAA,EAAA,CAAA,WAAtB;AAAA,QAAwB,OAAO,GAAA,EAAA,CAAA,OAA/B;AAAA,QAAiC,aAAa,GAAA,EAAA,CAAA,aAA9C;AAAA,QAAgD,YAAY,GAAA,EAAA,CAAA,YAA5D;AAAA,QAA8D,WAAW,GAAA,EAAA,CAAA,WAAzE;AAAA,QAA2E,aAAa,GAAA,EAAA,CAAA,aAAxF;AACN,QAAM,KAAK,GAAG,WAAW,CAAC,GAAZ,CAAgB,KAAhB,GAAwB,aAAa,CAAC,GAAd,CAAkB,KAAxD;AACQ,QAAA,KAAK,GAAK,OAAO,CAAC,GAAR,CAAY,KAAZ,CAAL,KAAL;AACR,QAAM,aAAa,GAAG,YAAY,CAAC,GAAb,CAAiB,KAAvC;;AAEA,QAAI,CAAC,WAAW,CAAC,IAAD,CAAhB,EAAwB;AACpB,UAAI,cAAY,GAAG,CAAnB;AACA,MAAA,SAAS,CAAC,IAAD,EAAO,UAAA,QAAA,EAAQ;AACpB,QAAA,cAAY,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAhB;AACA,eAAO,IAAP;AACH,OAHQ,EAGN,IAHM,CAAT;AAIA,UAAI,cAAY,KAAK,CAArB,EAAwB,OAAO,KAAP;AACxB,UAAI,cAAY,KAAK,KAArB,EAA4B,IAAI,GAAG,SAAP;AAC/B;;AAED,QAAI,OAAO,GAAG,KAAd;AACA,QAAI,OAAO,GAAG,CAAC,CAAf;AACA,QAAI,MAAM,GAAyB,CAAC,CAApC;;AACA,QAAI,WAAW,CAAC,IAAD,CAAf,EAAuB;AACnB,UAAM,IAAI,GAAG,aAAa,CAAC,MAAD,EAAS,aAAT,CAA1B;;AACA,UAAI,IAAI,CAAC,MAAL,KAAgB,CAAC,CAArB,EAAwB;AACpB,QAAA,OAAO,GAAG,aAAa,KAAK,IAAI,CAAC,MAAjC;AACA,YAAI,OAAJ,EAAa,cAAc,CAAC,KAAD,EAAQ,IAAI,CAAC,MAAb,EAAqB,KAArB,CAAd;AAChB,OAHD,MAGO;AACH,QAAA,OAAO,GAAG,iBAAiB,CAAC,KAAD,EAAQ,QAAQ,CAAC,QAAT,CAAkB,KAAlB,CAAR,EAAkC,MAAlC,CAA3B;AACH;;AACD,MAAA,OAAO,GAAG,IAAI,CAAC,OAAf;AACA,MAAA,MAAM,GAAG,IAAI,CAAC,MAAd;AACH,KAVD,MAUO;AACH,MAAA,OAAO,GAAG,SAAS,CAAC,IAAD,EAAO,UAAA,QAAA,EAAQ;AAAI,eAAA,iBAAiB,CAAC,KAAD,EAAQ,QAAR,EAAjB,MAAiB,CAAjB;AAA0C,OAA7D,EAA+D,IAA/D,CAAnB;;AACA,UAAI,OAAJ,EAAa;AACT,QAAA,OAAO,GAAG,uBAAuB,CAAC,MAAD,EAAS,aAAT,CAAjC;;AACA,YAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,KAAoB,CAAC,CAAjC,IAAsC,OAAO,KAAK,CAAC,CAAnD,IACA,aAAa,CAAC,SAAd,CAAwB,QAAQ,CAAC,MAAjC,EAAyC,MAAzC,CADA,IAEA,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,QAAQ,CAAC,IAA7B,CAFJ,EAGE;AACE,UAAA,MAAM,GAAG,QAAQ,CAAC,MAAlB;AACA,UAAA,OAAO,GAAG,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmB,GAA7B;AACH;AACJ;AACJ;;AACD,QAAI,OAAJ,EAAa;AACT,UAAI,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAChB,QAAA,OAAO,GAAG,iBAAiB,CAAC,KAAD,EAAQ,KAAR,CAA3B;AACA,YAAI,OAAO,KAAK,CAAhB,EAAmB,MAAM,GAAG,CAAT;AACtB;;AACD,UAAI,QAAJ,EAAc;AACV,QAAA,QAAQ,CAAC,MAAT,GAAkB,MAAlB;AACA,QAAA,QAAQ,CAAC,IAAT,GAAgB,IAAhB;AACA,QAAA,QAAQ,CAAC,MAAT,GAAkB,aAAlB;AACH;;AACD,MAAA,SAAS,CAAC,eAAV,CAA0B,OAA1B,EAAmC,MAAnC;AACA,UAAI,MAAM,KAAK,CAAC,CAAhB,EAAmB,SAAS,CAAC,MAAV,CAAiB,OAAjB,EAA0B,OAAO,CAAC,GAAR,CAAY,KAAtC;AACnB,MAAA,SAAS,CAAC,eAAV,CAA0B,WAA1B,EAAuC,MAAM,KAAK,CAAC,CAAZ,GAAgB,eAAhB,GAAkC,SAAzE;AACA,MAAA,SAAS,CAAC,eAAV,CAA0B,aAA1B,EAAyC,OAAzC;AACA,MAAA,SAAS,CAAC,eAAV,CAA0B,YAA1B,EAAwC,MAAxC;AACH;;AACD,WAAO,OAAP;AACH;;AA7De,EAAA,MAAA,CAAA,IAAA,GAAI,IAAJ;;AA+DhB,WAAgB,YAAhB,CAA6B,YAA7B,EAA6E,SAA7E,EAAmG,SAAnG,EAAyH,KAAzH,EAAuI;AACnI,QAAI,CAAC,YAAL,EAAmB;AAEb,QAAA,EAAA,GAA6C,YAAY,CAAC,MAA1D;AAAA,QAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;AAAA,QAAc,WAAW,GAAA,EAAA,CAAA,WAAzB;AAAA,QAA2B,aAAa,GAAA,EAAA,CAAA,aAAxC;AACN,QAAM,KAAK,GAAG,WAAW,CAAC,GAAZ,CAAgB,KAAhB,GAAwB,aAAa,CAAC,GAAd,CAAkB,KAAxD,CAJmI,CAMnI;;AACA,IAAA,eAAe,CAAC,SAAS,CAAC,MAAV,CAAiB,MAAjB,GAA0B,KAA1B,GAAkC,CAAnC,EAAsC,YAAY,CAAC,MAAnD,CAAf;AACQ,QAAA,KAAK,GAAK,UAAU,CAAC,GAAX,CAAe,KAAf,CAAL,KAAL,CAR2H,CAUnI;;AACA,QAAI,KAAJ,EAAW,cAAc,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAd;;4BAEF,C,EAAO,E,EAAE;AACR,UAAA,EAAA,GAAyB,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAzB;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;AAAA,UAAe,OAAK,GAAA,EAAA,CAAA,KAApB;;AACN,UAAM,KAAK,GAAG,UAAC,QAAD,EAAmB;AAC7B,YAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAd;AACA,YAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAb,CAAZ;AACA,eAAO,OAAK,GACN,cAAc,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,CADR,GAEN,mBAAmB,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,KAApB,CAFzB;AAGH,OAND;;AAOA,MAAA,SAAS,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAT;;;AATJ,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,SAAS,CAAC,MAAV,CAAiB,MAAtC,EAA8C,CAAC,GAAG,EAAlD,EAAsD,EAAE,CAAxD,EAAyD;cAAhD,C,EAAO,E;AAUf;;AACD,IAAA,SAAS,CAAC,MAAV,CAAiB,UAAjB,EAA6B,UAAU,CAAC,GAAX,CAAe,KAA5C;AACH;;AAzBe,EAAA,MAAA,CAAA,YAAA,GAAY,YAAZ;;AA2BhB,WAAgB,eAAhB,CAAgC,YAAhC,EAAgF,YAAhF,EAA4G,SAA5G,EAAkI,KAAlI,EAAgJ;AAC5I,QAAI,CAAC,YAAL,EAAmB;AAEb,QAAA,EAAA,GAAqE,YAAY,CAAC,MAAlF;AAAA,QAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,QAAiB,mBAAmB,GAAA,EAAA,CAAA,mBAApC;AAAA,QAAsC,WAAW,GAAA,EAAA,CAAA,WAAjD;AAAA,QAAmD,aAAa,GAAA,EAAA,CAAA,aAAhE;AACN,QAAM,KAAK,GAAG,WAAW,CAAC,GAAZ,CAAgB,KAAhB,GAAwB,aAAa,CAAC,GAAd,CAAkB,KAAxD,CAJ4I,CAM5I;;AACA,IAAA,kBAAkB,CAAC,YAAY,CAAC,MAAb,CAAoB,MAApB,GAA6B,KAA7B,GAAqC,CAAtC,EAAyC,YAAY,CAAC,MAAtD,CAAlB;AACQ,QAAA,KAAK,GAAK,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAL,KAAL,CARoI,CAU5I;;AACA,QAAI,KAAJ,EAAW,iBAAiB,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAjB;;4BAEF,C,EAAO,E,EAAE;AACR,UAAA,EAAA,GAAkB,YAAY,CAAC,MAAb,CAAoB,CAApB,CAAlB;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;;AACN,UAAM,KAAK,GAAG,UAAC,QAAD,EAAmB;AAC7B,YAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAd;AACA,YAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAb,CAAZ;AACA,eAAO,sBAAsB,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,KAApB,CAA7B;AACH,OAJD;;AAKA,MAAA,SAAS,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAT;;;AAPJ,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,YAAY,CAAC,MAAb,CAAoB,MAAzC,EAAiD,CAAC,GAAG,EAArD,EAAyD,EAAE,CAA3D,EAA4D;cAAnD,C,EAAO,E;AAQf;;AACD,IAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,aAAa,CAAC,GAAd,CAAkB,KAAlD;AACA,IAAA,SAAS,CAAC,eAAV,CAA0B,mBAA1B,EAA+C,sBAAsB,CAAC,KAAD,EAAQ,KAAR,CAArE;AACH;;AAxBe,EAAA,MAAA,CAAA,eAAA,GAAe,eAAf;;AA0BhB,WAAgB,WAAhB,CAA4B,YAA5B,EAA4E,QAA5E,EAAgG,SAAhG,EAAsH,KAAtH,EAAoI;AAChI,QAAI,CAAC,YAAL,EAAmB;AAEb,QAAA,EAAA,GAA4C,YAAY,CAAC,MAAzD;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,WAAW,GAAA,EAAA,CAAA,WAAxB;AAAA,QAA0B,aAAa,GAAA,EAAA,CAAA,aAAvC;AACN,QAAM,KAAK,GAAG,WAAW,CAAC,GAAZ,CAAgB,KAAhB,GAAwB,aAAa,CAAC,GAAd,CAAkB,KAAxD,CAJgI,CAMhI;;AACA,IAAA,cAAc,CAAC,QAAQ,CAAC,MAAT,CAAgB,MAAhB,GAAyB,KAAzB,GAAiC,CAAlC,EAAqC,YAAY,CAAC,MAAlD,CAAd;AACQ,QAAA,KAAK,GAAK,SAAS,CAAC,GAAV,CAAc,KAAd,CAAL,KAAL,CARwH,CAUhI;;AACA,QAAI,KAAJ,EAAW,aAAa,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAb;;4BAEF,C,EAAO,E,EAAE;AACR,UAAA,EAAA,GAAmB,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAnB;AAAA,UAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,UAAQ,MAAM,GAAA,EAAA,CAAA,MAAd;;AACN,UAAM,KAAK,GAAG,UAAC,QAAD,EAAmB;AAC7B,YAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAd;AACA,YAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAb,CAAZ;AACA,eAAO,mBAAmB,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,MAApB,CAA1B;AACH,OAJD;;AAKA,MAAA,SAAS,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAT;;;AAPJ,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,QAAQ,CAAC,MAAT,CAAgB,MAArC,EAA6C,CAAC,GAAG,EAAjD,EAAqD,EAAE,CAAvD,EAAwD;cAA/C,C,EAAO,E;AAQf;;AACD,IAAA,SAAS,CAAC,MAAV,CAAiB,SAAjB,EAA4B,SAAS,CAAC,GAAV,CAAc,KAA1C;AACH;;AAvBe,EAAA,MAAA,CAAA,WAAA,GAAW,WAAX;;AAyBhB,WAAgB,YAAhB,CAA6B,YAA7B,EAA6E,SAA7E,EAA+F,kBAA/F,EAAuI;AACnI,QAAI,CAAC,YAAD,IAAkB,CAAC,SAAD,IAAc,CAAC,kBAArC,EAA0D;AAElD,QAAA,MAAM,GAAK,YAAY,CAAjB,MAAN;;AACR,QAAI,SAAJ,EAAe;AACX,MAAA,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAA5B,EAAmC,SAAnC;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,MAAxB,EAAgC,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAAlD;AACH;;AACD,QAAI,kBAAJ,EAAwB;AACpB,MAAA,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAA1B,CAAgC,GAAhC,CAAoC,kBAApC;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,cAAxB,EAAwC,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAAlE;AACH,KAHD,MAGO,IAAI,kBAAkB,KAAK,IAA3B,EAAiC;AACpC,MAAA,qBAAqB,CAAC,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAA3B,EAAkC,MAAM,CAAC,aAAP,CAAqB,GAArB,CAAyB,KAA3D,CAArB;AACA,MAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,cAAxB,EAAwC,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAA0B,KAAlE;AACH;;AACD,IAAA,mBAAmB,CAAC,MAAD,CAAnB;AACA,QAAM,cAAc,GAAG,gCAAgC,CAAC,MAAM,CAAC,uBAAP,CAA+B,GAA/B,CAAmC,KAApC,EAA2C,MAAM,CAAC,UAAP,CAAkB,GAAlB,CAAsB,KAAjE,EAAwE,MAAM,CAAC,aAAP,CAAqB,GAArB,CAAyB,KAAjG,CAAvD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,cAAxB,EAAwC,cAAxC;AACH;;AAlBe,EAAA,MAAA,CAAA,YAAA,GAAY,YAAZ;AAmBnB,CArLD,EAAU,MAAM,KAAN,MAAM,GAAA,EAAA,CAAhB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Loci, isEmptyLoci, isEveryLoci, EveryLoci } from '../mol-model/loci';\r\nimport { applyMarkerAction, getMarkerInfo, setMarkerValue, getPartialMarkerAverage, MarkerActions } from '../mol-util/marker-action';\r\nimport { Mat4 } from '../mol-math/linear-algebra';\r\nimport { updateTransformData, fillIdentityTransform } from '../mol-geo/geometry/transform-data';\r\nimport { calculateTransformBoundingSphere } from '../mol-gl/renderable/util';\r\nimport { ValueCell } from '../mol-util';\r\nimport { createOverpaint, clearOverpaint, applyOverpaintColor } from '../mol-geo/geometry/overpaint-data';\r\nimport { Interval } from '../mol-data/int';\r\nimport { createTransparency, clearTransparency, applyTransparencyValue, getTransparencyAverage } from '../mol-geo/geometry/transparency-data';\r\nimport { createClipping, applyClippingGroups, clearClipping } from '../mol-geo/geometry/clipping-data';\r\nimport { getMarkersAverage } from '../mol-geo/geometry/marker-data';\r\nexport { Visual };\r\nvar Visual;\r\n(function (Visual) {\r\n    function setVisibility(renderObject, visible) {\r\n        if (renderObject)\r\n            renderObject.state.visible = visible;\r\n    }\r\n    Visual.setVisibility = setVisibility;\r\n    function setAlphaFactor(renderObject, alphaFactor) {\r\n        if (renderObject)\r\n            renderObject.state.alphaFactor = alphaFactor;\r\n    }\r\n    Visual.setAlphaFactor = setAlphaFactor;\r\n    function setPickable(renderObject, pickable) {\r\n        if (renderObject)\r\n            renderObject.state.pickable = pickable;\r\n    }\r\n    Visual.setPickable = setPickable;\r\n    function setColorOnly(renderObject, colorOnly) {\r\n        if (renderObject)\r\n            renderObject.state.colorOnly = colorOnly;\r\n    }\r\n    Visual.setColorOnly = setColorOnly;\r\n    function mark(renderObject, loci, action, lociApply, previous) {\r\n        if (!renderObject || isEmptyLoci(loci))\r\n            return false;\r\n        var _a = renderObject.values, tMarker = _a.tMarker, dMarkerType = _a.dMarkerType, uMarker = _a.uMarker, markerAverage = _a.markerAverage, markerStatus = _a.markerStatus, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;\r\n        var count = uGroupCount.ref.value * instanceCount.ref.value;\r\n        var array = tMarker.ref.value.array;\r\n        var currentStatus = markerStatus.ref.value;\r\n        if (!isEveryLoci(loci)) {\r\n            var intervalSize_1 = 0;\r\n            lociApply(loci, function (interval) {\r\n                intervalSize_1 += Interval.size(interval);\r\n                return true;\r\n            }, true);\r\n            if (intervalSize_1 === 0)\r\n                return false;\r\n            if (intervalSize_1 === count)\r\n                loci = EveryLoci;\r\n        }\r\n        var changed = false;\r\n        var average = -1;\r\n        var status = -1;\r\n        if (isEveryLoci(loci)) {\r\n            var info = getMarkerInfo(action, currentStatus);\r\n            if (info.status !== -1) {\r\n                changed = currentStatus !== info.status;\r\n                if (changed)\r\n                    setMarkerValue(array, info.status, count);\r\n            }\r\n            else {\r\n                changed = applyMarkerAction(array, Interval.ofLength(count), action);\r\n            }\r\n            average = info.average;\r\n            status = info.status;\r\n        }\r\n        else {\r\n            changed = lociApply(loci, function (interval) { return applyMarkerAction(array, interval, action); }, true);\r\n            if (changed) {\r\n                average = getPartialMarkerAverage(action, currentStatus);\r\n                if (previous && previous.status !== -1 && average === -1 &&\r\n                    MarkerActions.isReverse(previous.action, action) &&\r\n                    Loci.areEqual(loci, previous.loci)) {\r\n                    status = previous.status;\r\n                    average = status === 0 ? 0 : 0.5;\r\n                }\r\n            }\r\n        }\r\n        if (changed) {\r\n            if (average === -1) {\r\n                average = getMarkersAverage(array, count);\r\n                if (average === 0)\r\n                    status = 0;\r\n            }\r\n            if (previous) {\r\n                previous.action = action;\r\n                previous.loci = loci;\r\n                previous.status = currentStatus;\r\n            }\r\n            ValueCell.updateIfChanged(uMarker, status);\r\n            if (status === -1)\r\n                ValueCell.update(tMarker, tMarker.ref.value);\r\n            ValueCell.updateIfChanged(dMarkerType, status === -1 ? 'groupInstance' : 'uniform');\r\n            ValueCell.updateIfChanged(markerAverage, average);\r\n            ValueCell.updateIfChanged(markerStatus, status);\r\n        }\r\n        return changed;\r\n    }\r\n    Visual.mark = mark;\r\n    function setOverpaint(renderObject, overpaint, lociApply, clear) {\r\n        if (!renderObject)\r\n            return;\r\n        var _a = renderObject.values, tOverpaint = _a.tOverpaint, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;\r\n        var count = uGroupCount.ref.value * instanceCount.ref.value;\r\n        // ensure texture has right size\r\n        createOverpaint(overpaint.layers.length ? count : 0, renderObject.values);\r\n        var array = tOverpaint.ref.value.array;\r\n        // clear all if requested\r\n        if (clear)\r\n            clearOverpaint(array, 0, count);\r\n        var _loop_1 = function (i, il) {\r\n            var _b = overpaint.layers[i], loci = _b.loci, color = _b.color, clear_1 = _b.clear;\r\n            var apply = function (interval) {\r\n                var start = Interval.start(interval);\r\n                var end = Interval.end(interval);\r\n                return clear_1\r\n                    ? clearOverpaint(array, start, end)\r\n                    : applyOverpaintColor(array, start, end, color);\r\n            };\r\n            lociApply(loci, apply, false);\r\n        };\r\n        for (var i = 0, il = overpaint.layers.length; i < il; ++i) {\r\n            _loop_1(i, il);\r\n        }\r\n        ValueCell.update(tOverpaint, tOverpaint.ref.value);\r\n    }\r\n    Visual.setOverpaint = setOverpaint;\r\n    function setTransparency(renderObject, transparency, lociApply, clear) {\r\n        if (!renderObject)\r\n            return;\r\n        var _a = renderObject.values, tTransparency = _a.tTransparency, transparencyAverage = _a.transparencyAverage, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;\r\n        var count = uGroupCount.ref.value * instanceCount.ref.value;\r\n        // ensure texture has right size and variant\r\n        createTransparency(transparency.layers.length ? count : 0, renderObject.values);\r\n        var array = tTransparency.ref.value.array;\r\n        // clear if requested\r\n        if (clear)\r\n            clearTransparency(array, 0, count);\r\n        var _loop_2 = function (i, il) {\r\n            var _b = transparency.layers[i], loci = _b.loci, value = _b.value;\r\n            var apply = function (interval) {\r\n                var start = Interval.start(interval);\r\n                var end = Interval.end(interval);\r\n                return applyTransparencyValue(array, start, end, value);\r\n            };\r\n            lociApply(loci, apply, false);\r\n        };\r\n        for (var i = 0, il = transparency.layers.length; i < il; ++i) {\r\n            _loop_2(i, il);\r\n        }\r\n        ValueCell.update(tTransparency, tTransparency.ref.value);\r\n        ValueCell.updateIfChanged(transparencyAverage, getTransparencyAverage(array, count));\r\n    }\r\n    Visual.setTransparency = setTransparency;\r\n    function setClipping(renderObject, clipping, lociApply, clear) {\r\n        if (!renderObject)\r\n            return;\r\n        var _a = renderObject.values, tClipping = _a.tClipping, uGroupCount = _a.uGroupCount, instanceCount = _a.instanceCount;\r\n        var count = uGroupCount.ref.value * instanceCount.ref.value;\r\n        // ensure texture has right size\r\n        createClipping(clipping.layers.length ? count : 0, renderObject.values);\r\n        var array = tClipping.ref.value.array;\r\n        // clear if requested\r\n        if (clear)\r\n            clearClipping(array, 0, count);\r\n        var _loop_3 = function (i, il) {\r\n            var _b = clipping.layers[i], loci = _b.loci, groups = _b.groups;\r\n            var apply = function (interval) {\r\n                var start = Interval.start(interval);\r\n                var end = Interval.end(interval);\r\n                return applyClippingGroups(array, start, end, groups);\r\n            };\r\n            lociApply(loci, apply, false);\r\n        };\r\n        for (var i = 0, il = clipping.layers.length; i < il; ++i) {\r\n            _loop_3(i, il);\r\n        }\r\n        ValueCell.update(tClipping, tClipping.ref.value);\r\n    }\r\n    Visual.setClipping = setClipping;\r\n    function setTransform(renderObject, transform, instanceTransforms) {\r\n        if (!renderObject || (!transform && !instanceTransforms))\r\n            return;\r\n        var values = renderObject.values;\r\n        if (transform) {\r\n            Mat4.copy(values.matrix.ref.value, transform);\r\n            ValueCell.update(values.matrix, values.matrix.ref.value);\r\n        }\r\n        if (instanceTransforms) {\r\n            values.extraTransform.ref.value.set(instanceTransforms);\r\n            ValueCell.update(values.extraTransform, values.extraTransform.ref.value);\r\n        }\r\n        else if (instanceTransforms === null) {\r\n            fillIdentityTransform(values.extraTransform.ref.value, values.instanceCount.ref.value);\r\n            ValueCell.update(values.extraTransform, values.extraTransform.ref.value);\r\n        }\r\n        updateTransformData(values);\r\n        var boundingSphere = calculateTransformBoundingSphere(values.invariantBoundingSphere.ref.value, values.aTransform.ref.value, values.instanceCount.ref.value);\r\n        ValueCell.update(values.boundingSphere, boundingSphere);\r\n    }\r\n    Visual.setTransform = setTransform;\r\n})(Visual || (Visual = {}));\r\n//# sourceMappingURL=visual.js.map"]},"metadata":{},"sourceType":"module"}