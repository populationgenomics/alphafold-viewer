{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * from https://github.com/dsehnal/CIFTools.js\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nexport function arrayFind(array, f) {\n  for (var i = 0, _i = array.length; i < _i; i++) {\n    if (f(array[i])) return array[i];\n  }\n\n  return void 0;\n}\nexport function iterableToArray(it) {\n  if (Array.from) return Array.from(it);\n  var ret = [];\n\n  while (true) {\n    var _a = it.next(),\n        done = _a.done,\n        value = _a.value;\n\n    if (done) break;\n    ret[ret.length] = value;\n  }\n\n  return ret;\n}\n/** Fills the array so that array[0] = start and array[array.length - 1] = end */\n\nexport function createRangeArray(start, end, ctor) {\n  var len = end - start + 1;\n  var array = ctor ? new ctor(len) : new Int32Array(len);\n\n  for (var i = 0; i < len; i++) {\n    array[i] = i + start;\n  }\n\n  return array;\n}\nexport function arrayPickIndices(array, indices) {\n  var ret = new (arrayGetCtor(array))(indices.length);\n\n  for (var i = 0, _i = indices.length; i < _i; i++) {\n    ret[i] = array[indices[i]];\n  }\n\n  return ret;\n}\nexport function arrayGetCtor(data) {\n  var ret = data.constructor;\n  if (!ret) throw new Error('data does not define a constructor and it should');\n  return ret;\n}","map":{"version":3,"sources":["../../../src/mol-data/util/array.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAIH,OAAM,SAAU,SAAV,CAAuB,KAAvB,EAA4C,CAA5C,EAAgE;AAClE,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,CAAC,EAA5C,EAAgD;AAC5C,QAAI,CAAC,CAAC,KAAK,CAAC,CAAD,CAAN,CAAL,EAAiB,OAAO,KAAK,CAAC,CAAD,CAAZ;AACpB;;AACD,SAAO,KAAK,CAAZ;AACH;AAED,OAAM,SAAU,eAAV,CAA6B,EAA7B,EAAoD;AACtD,MAAI,KAAK,CAAC,IAAV,EAAgB,OAAO,KAAK,CAAC,IAAN,CAAW,EAAX,CAAP;AAEhB,MAAM,GAAG,GAAG,EAAZ;;AACA,SAAO,IAAP,EAAa;AACH,QAAA,EAAA,GAAkB,EAAE,CAAC,IAAH,EAAlB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;;AACN,QAAI,IAAJ,EAAU;AACV,IAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,KAAlB;AACH;;AACD,SAAO,GAAP;AACH;AAED;;AACA,OAAM,SAAU,gBAAV,CAA2B,KAA3B,EAA0C,GAA1C,EAAuD,IAAvD,EAA+E;AACjF,MAAM,GAAG,GAAG,GAAG,GAAG,KAAN,GAAc,CAA1B;AACA,MAAM,KAAK,GAAG,IAAI,GAAG,IAAI,IAAJ,CAAS,GAAT,CAAH,GAAmB,IAAI,UAAJ,CAAe,GAAf,CAArC;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC1B,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAC,GAAG,KAAf;AACH;;AACD,SAAO,KAAP;AACH;AAED,OAAM,SAAU,gBAAV,CAA8B,KAA9B,EAAmD,OAAnD,EAA6E;AAC/E,MAAM,GAAG,GAAG,KAAK,YAAY,CAAC,KAAD,CAAjB,EAA0B,OAAO,CAAC,MAAlC,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,OAAO,CAAC,MAA7B,EAAqC,CAAC,GAAG,EAAzC,EAA6C,CAAC,EAA9C,EAAkD;AAC9C,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK,CAAC,OAAO,CAAC,CAAD,CAAR,CAAd;AACH;;AACD,SAAO,GAAP;AACH;AAED,OAAM,SAAU,YAAV,CAA0B,IAA1B,EAA4C;AAC9C,MAAM,GAAG,GAAI,IAAY,CAAC,WAA1B;AACA,MAAI,CAAC,GAAL,EAAU,MAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACV,SAAO,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * from https://github.com/dsehnal/CIFTools.js\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nexport function arrayFind(array, f) {\r\n    for (var i = 0, _i = array.length; i < _i; i++) {\r\n        if (f(array[i]))\r\n            return array[i];\r\n    }\r\n    return void 0;\r\n}\r\nexport function iterableToArray(it) {\r\n    if (Array.from)\r\n        return Array.from(it);\r\n    var ret = [];\r\n    while (true) {\r\n        var _a = it.next(), done = _a.done, value = _a.value;\r\n        if (done)\r\n            break;\r\n        ret[ret.length] = value;\r\n    }\r\n    return ret;\r\n}\r\n/** Fills the array so that array[0] = start and array[array.length - 1] = end */\r\nexport function createRangeArray(start, end, ctor) {\r\n    var len = end - start + 1;\r\n    var array = ctor ? new ctor(len) : new Int32Array(len);\r\n    for (var i = 0; i < len; i++) {\r\n        array[i] = i + start;\r\n    }\r\n    return array;\r\n}\r\nexport function arrayPickIndices(array, indices) {\r\n    var ret = new (arrayGetCtor(array))(indices.length);\r\n    for (var i = 0, _i = indices.length; i < _i; i++) {\r\n        ret[i] = array[indices[i]];\r\n    }\r\n    return ret;\r\n}\r\nexport function arrayGetCtor(data) {\r\n    var ret = data.constructor;\r\n    if (!ret)\r\n        throw new Error('data does not define a constructor and it should');\r\n    return ret;\r\n}\r\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"module"}