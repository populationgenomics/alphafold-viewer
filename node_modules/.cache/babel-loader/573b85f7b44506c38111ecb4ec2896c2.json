{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { PluginStateObject as SO } from '../../objects';\nimport { StateObject } from '../../../mol-state';\nimport { StateTransforms } from '../../transforms';\nimport { VolumeStreaming } from '../../../mol-plugin/behavior/dynamic/volume-streaming/behavior';\nexport function buildStructureHierarchy(state, previous) {\n  var build = BuildState(state, previous || StructureHierarchy());\n  doPreOrder(state.tree, build);\n  if (previous) previous.refs.forEach(isRemoved, build);\n  return {\n    hierarchy: build.hierarchy,\n    added: build.added,\n    changed: build.changed\n  };\n}\nexport function StructureHierarchy() {\n  return {\n    trajectories: [],\n    models: [],\n    structures: [],\n    refs: new Map()\n  };\n}\n\nfunction TrajectoryRef(cell) {\n  return {\n    kind: 'trajectory',\n    cell: cell,\n    version: cell.transform.version,\n    models: []\n  };\n}\n\nfunction ModelRef(cell, trajectory) {\n  return {\n    kind: 'model',\n    cell: cell,\n    version: cell.transform.version,\n    trajectory: trajectory,\n    structures: []\n  };\n}\n\nfunction ModelPropertiesRef(cell, model) {\n  return {\n    kind: 'model-properties',\n    cell: cell,\n    version: cell.transform.version,\n    model: model\n  };\n}\n\nfunction ModelUnitcellRef(cell, model) {\n  return {\n    kind: 'model-unitcell',\n    cell: cell,\n    version: cell.transform.version,\n    model: model\n  };\n}\n\nfunction StructureRef(cell, model) {\n  return {\n    kind: 'structure',\n    cell: cell,\n    version: cell.transform.version,\n    model: model,\n    components: []\n  };\n}\n\nfunction StructurePropertiesRef(cell, structure) {\n  return {\n    kind: 'structure-properties',\n    cell: cell,\n    version: cell.transform.version,\n    structure: structure\n  };\n}\n\nfunction StructureTransformRef(cell, structure) {\n  return {\n    kind: 'structure-transform',\n    cell: cell,\n    version: cell.transform.version,\n    structure: structure\n  };\n}\n\nfunction StructureVolumeStreamingRef(cell, structure) {\n  return {\n    kind: 'structure-volume-streaming',\n    cell: cell,\n    version: cell.transform.version,\n    structure: structure\n  };\n}\n\nfunction componentKey(cell) {\n  if (!cell.transform.tags) return cell.transform.ref;\n  return __spreadArray([], cell.transform.tags, true).sort().join();\n}\n\nfunction StructureComponentRef(cell, structure) {\n  return {\n    kind: 'structure-component',\n    cell: cell,\n    version: cell.transform.version,\n    structure: structure,\n    key: componentKey(cell),\n    representations: []\n  };\n}\n\nfunction StructureRepresentationRef(cell, component) {\n  return {\n    kind: 'structure-representation',\n    cell: cell,\n    version: cell.transform.version,\n    component: component\n  };\n}\n\nfunction GenericRepresentationRef(cell, parent) {\n  return {\n    kind: 'generic-representation',\n    cell: cell,\n    version: cell.transform.version,\n    parent: parent\n  };\n}\n\nfunction BuildState(state, oldHierarchy) {\n  return {\n    state: state,\n    oldHierarchy: oldHierarchy,\n    hierarchy: StructureHierarchy(),\n    changed: false,\n    added: new Set()\n  };\n}\n\nfunction createOrUpdateRefList(state, cell, list, ctor) {\n  var args = [];\n\n  for (var _i = 4; _i < arguments.length; _i++) {\n    args[_i - 4] = arguments[_i];\n  }\n\n  var ref = ctor.apply(void 0, args);\n  list.push(ref);\n  state.hierarchy.refs.set(cell.transform.ref, ref);\n  var old = state.oldHierarchy.refs.get(cell.transform.ref);\n\n  if (old) {\n    if (old.version !== cell.transform.version) state.changed = true;\n  } else {\n    state.added.add(ref.cell.transform.ref);\n    state.changed = true;\n  }\n\n  return ref;\n}\n\nfunction createOrUpdateRef(state, cell, ctor) {\n  var args = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n\n  var ref = ctor.apply(void 0, args);\n  state.hierarchy.refs.set(cell.transform.ref, ref);\n  var old = state.oldHierarchy.refs.get(cell.transform.ref);\n\n  if (old) {\n    if (old.version !== cell.transform.version) state.changed = true;\n  } else {\n    state.added.add(ref.cell.transform.ref);\n    state.changed = true;\n  }\n\n  return ref;\n}\n\nfunction isType(t) {\n  return function (cell) {\n    return t.is(cell.obj);\n  };\n}\n\nfunction isTypeRoot(t, target) {\n  return function (cell, state) {\n    return !target(state) && t.is(cell.obj);\n  };\n}\n\nfunction isTransformer(t) {\n  return function (cell) {\n    return cell.transform.transformer === t;\n  };\n}\n\nfunction noop() {}\n\nvar Mapping = [// Trajectory\n[isType(SO.Molecule.Trajectory), function (state, cell) {\n  state.currentTrajectory = createOrUpdateRefList(state, cell, state.hierarchy.trajectories, TrajectoryRef, cell);\n}, function (state) {\n  return state.currentTrajectory = void 0;\n}], // Model\n[isTypeRoot(SO.Molecule.Model, function (s) {\n  return s.currentModel;\n}), function (state, cell) {\n  if (state.currentTrajectory) {\n    state.currentModel = createOrUpdateRefList(state, cell, state.currentTrajectory.models, ModelRef, cell, state.currentTrajectory);\n  } else {\n    state.currentModel = createOrUpdateRef(state, cell, ModelRef, cell);\n  }\n\n  state.hierarchy.models.push(state.currentModel);\n}, function (state) {\n  return state.currentModel = void 0;\n}], [isTransformer(StateTransforms.Model.CustomModelProperties), function (state, cell) {\n  if (!state.currentModel) return false;\n  state.currentModel.properties = createOrUpdateRef(state, cell, ModelPropertiesRef, cell, state.currentModel);\n}, noop], [isTransformer(StateTransforms.Representation.ModelUnitcell3D), function (state, cell) {\n  if (!state.currentModel) return false;\n  state.currentModel.unitcell = createOrUpdateRef(state, cell, ModelUnitcellRef, cell, state.currentModel);\n}, noop], // Structure\n[isTypeRoot(SO.Molecule.Structure, function (s) {\n  return s.currentStructure;\n}), function (state, cell) {\n  if (state.currentModel) {\n    state.currentStructure = createOrUpdateRefList(state, cell, state.currentModel.structures, StructureRef, cell, state.currentModel);\n  } else {\n    state.currentStructure = createOrUpdateRef(state, cell, StructureRef, cell);\n  }\n\n  state.hierarchy.structures.push(state.currentStructure);\n}, function (state) {\n  return state.currentStructure = void 0;\n}], [isTransformer(StateTransforms.Model.CustomStructureProperties), function (state, cell) {\n  if (!state.currentStructure) return false;\n  state.currentStructure.properties = createOrUpdateRef(state, cell, StructurePropertiesRef, cell, state.currentStructure);\n}, noop], [isTransformer(StateTransforms.Model.TransformStructureConformation), function (state, cell) {\n  if (!state.currentStructure) return false;\n  state.currentStructure.transform = createOrUpdateRef(state, cell, StructureTransformRef, cell, state.currentStructure);\n}, noop], // Volume Streaming\n[isType(VolumeStreaming), function (state, cell) {\n  if (!state.currentStructure) return false;\n  state.currentStructure.volumeStreaming = createOrUpdateRef(state, cell, StructureVolumeStreamingRef, cell, state.currentStructure); // Do not continue into VolumeStreaming subtree.\n\n  return false;\n}, noop], // Component\n[function (cell, state) {\n  if (state.currentComponent || !state.currentStructure || cell.transform.transformer.definition.isDecorator) return false;\n  return SO.Molecule.Structure.is(cell.obj);\n}, function (state, cell) {\n  if (state.currentStructure) {\n    state.currentComponent = createOrUpdateRefList(state, cell, state.currentStructure.components, StructureComponentRef, cell, state.currentStructure);\n  }\n}, function (state) {\n  return state.currentComponent = void 0;\n}], // Component Representation\n[function (cell, state) {\n  return !cell.state.isGhost && !!state.currentComponent && SO.Molecule.Structure.Representation3D.is(cell.obj);\n}, function (state, cell) {\n  if (state.currentComponent) {\n    createOrUpdateRefList(state, cell, state.currentComponent.representations, StructureRepresentationRef, cell, state.currentComponent);\n  } // Nothing useful down the line\n\n\n  return false;\n}, noop], // Generic Representation\n[function (cell) {\n  return !cell.state.isGhost && SO.isRepresentation3D(cell.obj);\n}, function (state, cell) {\n  var genericTarget = state.currentComponent || state.currentStructure || state.currentModel;\n\n  if (genericTarget) {\n    if (!genericTarget.genericRepresentations) genericTarget.genericRepresentations = [];\n    createOrUpdateRefList(state, cell, genericTarget.genericRepresentations, GenericRepresentationRef, cell, genericTarget);\n  }\n}, noop]];\n\nfunction isValidCell(cell) {\n  if (!cell || !(cell === null || cell === void 0 ? void 0 : cell.parent) || !cell.parent.cells.has(cell.transform.ref)) return false;\n  var obj = cell.obj;\n  if (!obj || obj === StateObject.Null || cell.status !== 'ok' && cell.status !== 'error') return false;\n  return true;\n}\n\nfunction isRemoved(ref) {\n  var cell = ref.cell;\n  if (isValidCell(cell)) return;\n  this.changed = true;\n}\n\nfunction _preOrderFunc(c) {\n  _doPreOrder(this, this.tree.transforms.get(c));\n}\n\nfunction _doPreOrder(ctx, root) {\n  var state = ctx.state;\n  var cell = state.state.cells.get(root.ref);\n  if (!isValidCell(cell)) return;\n  var onLeave = void 0;\n  var end = false;\n\n  for (var _i = 0, Mapping_1 = Mapping; _i < Mapping_1.length; _i++) {\n    var _a = Mapping_1[_i],\n        test_1 = _a[0],\n        f = _a[1],\n        l = _a[2];\n\n    if (test_1(cell, state)) {\n      var cont = f(state, cell);\n\n      if (cont === false) {\n        end = true;\n        break;\n      }\n\n      onLeave = l;\n      break;\n    }\n  } // TODO: might be needed in the future\n  // const { currentComponent, currentModel, currentStructure, currentTrajectory } = ctx.state;\n  // const inTrackedSubtree = currentComponent || currentModel || currentStructure || currentTrajectory;\n  // if (inTrackedSubtree && cell.transform.transformer.definition.isDecorator) {\n  //     const ref = cell.transform.ref;\n  //     const old = ctx.state.oldHierarchy.decorators.get(ref);\n  //     if (old && old.version !== cell.transform.version) {\n  //         ctx.state.changed = true;\n  //     }\n  //     ctx.state.hierarchy.decorators.set(cell.transform.ref, cell.transform);\n  // }\n\n\n  if (end) return;\n  var children = ctx.tree.children.get(root.ref);\n\n  if (children && children.size) {\n    children.forEach(_preOrderFunc, ctx);\n  }\n\n  if (onLeave) onLeave(state);\n}\n\nfunction doPreOrder(tree, state) {\n  var ctx = {\n    tree: tree,\n    state: state\n  };\n\n  _doPreOrder(ctx, tree.root);\n\n  return ctx.state;\n}","map":{"version":3,"sources":["../../../../src/mol-plugin-state/manager/structure/hierarchy-state.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { PluginStateObject as SO } from '../../objects';\r\nimport { StateObject } from '../../../mol-state';\r\nimport { StateTransforms } from '../../transforms';\r\nimport { VolumeStreaming } from '../../../mol-plugin/behavior/dynamic/volume-streaming/behavior';\r\nexport function buildStructureHierarchy(state, previous) {\r\n    var build = BuildState(state, previous || StructureHierarchy());\r\n    doPreOrder(state.tree, build);\r\n    if (previous)\r\n        previous.refs.forEach(isRemoved, build);\r\n    return { hierarchy: build.hierarchy, added: build.added, changed: build.changed };\r\n}\r\nexport function StructureHierarchy() {\r\n    return { trajectories: [], models: [], structures: [], refs: new Map() };\r\n}\r\nfunction TrajectoryRef(cell) {\r\n    return { kind: 'trajectory', cell: cell, version: cell.transform.version, models: [] };\r\n}\r\nfunction ModelRef(cell, trajectory) {\r\n    return { kind: 'model', cell: cell, version: cell.transform.version, trajectory: trajectory, structures: [] };\r\n}\r\nfunction ModelPropertiesRef(cell, model) {\r\n    return { kind: 'model-properties', cell: cell, version: cell.transform.version, model: model };\r\n}\r\nfunction ModelUnitcellRef(cell, model) {\r\n    return { kind: 'model-unitcell', cell: cell, version: cell.transform.version, model: model };\r\n}\r\nfunction StructureRef(cell, model) {\r\n    return { kind: 'structure', cell: cell, version: cell.transform.version, model: model, components: [] };\r\n}\r\nfunction StructurePropertiesRef(cell, structure) {\r\n    return { kind: 'structure-properties', cell: cell, version: cell.transform.version, structure: structure };\r\n}\r\nfunction StructureTransformRef(cell, structure) {\r\n    return { kind: 'structure-transform', cell: cell, version: cell.transform.version, structure: structure };\r\n}\r\nfunction StructureVolumeStreamingRef(cell, structure) {\r\n    return { kind: 'structure-volume-streaming', cell: cell, version: cell.transform.version, structure: structure };\r\n}\r\nfunction componentKey(cell) {\r\n    if (!cell.transform.tags)\r\n        return cell.transform.ref;\r\n    return __spreadArray([], cell.transform.tags, true).sort().join();\r\n}\r\nfunction StructureComponentRef(cell, structure) {\r\n    return { kind: 'structure-component', cell: cell, version: cell.transform.version, structure: structure, key: componentKey(cell), representations: [] };\r\n}\r\nfunction StructureRepresentationRef(cell, component) {\r\n    return { kind: 'structure-representation', cell: cell, version: cell.transform.version, component: component };\r\n}\r\nfunction GenericRepresentationRef(cell, parent) {\r\n    return { kind: 'generic-representation', cell: cell, version: cell.transform.version, parent: parent };\r\n}\r\nfunction BuildState(state, oldHierarchy) {\r\n    return { state: state, oldHierarchy: oldHierarchy, hierarchy: StructureHierarchy(), changed: false, added: new Set() };\r\n}\r\nfunction createOrUpdateRefList(state, cell, list, ctor) {\r\n    var args = [];\r\n    for (var _i = 4; _i < arguments.length; _i++) {\r\n        args[_i - 4] = arguments[_i];\r\n    }\r\n    var ref = ctor.apply(void 0, args);\r\n    list.push(ref);\r\n    state.hierarchy.refs.set(cell.transform.ref, ref);\r\n    var old = state.oldHierarchy.refs.get(cell.transform.ref);\r\n    if (old) {\r\n        if (old.version !== cell.transform.version)\r\n            state.changed = true;\r\n    }\r\n    else {\r\n        state.added.add(ref.cell.transform.ref);\r\n        state.changed = true;\r\n    }\r\n    return ref;\r\n}\r\nfunction createOrUpdateRef(state, cell, ctor) {\r\n    var args = [];\r\n    for (var _i = 3; _i < arguments.length; _i++) {\r\n        args[_i - 3] = arguments[_i];\r\n    }\r\n    var ref = ctor.apply(void 0, args);\r\n    state.hierarchy.refs.set(cell.transform.ref, ref);\r\n    var old = state.oldHierarchy.refs.get(cell.transform.ref);\r\n    if (old) {\r\n        if (old.version !== cell.transform.version)\r\n            state.changed = true;\r\n    }\r\n    else {\r\n        state.added.add(ref.cell.transform.ref);\r\n        state.changed = true;\r\n    }\r\n    return ref;\r\n}\r\nfunction isType(t) {\r\n    return function (cell) { return t.is(cell.obj); };\r\n}\r\nfunction isTypeRoot(t, target) {\r\n    return function (cell, state) { return !target(state) && t.is(cell.obj); };\r\n}\r\nfunction isTransformer(t) {\r\n    return function (cell) { return cell.transform.transformer === t; };\r\n}\r\nfunction noop() { }\r\nvar Mapping = [\r\n    // Trajectory\r\n    [isType(SO.Molecule.Trajectory), function (state, cell) {\r\n            state.currentTrajectory = createOrUpdateRefList(state, cell, state.hierarchy.trajectories, TrajectoryRef, cell);\r\n        }, function (state) { return state.currentTrajectory = void 0; }],\r\n    // Model\r\n    [isTypeRoot(SO.Molecule.Model, function (s) { return s.currentModel; }), function (state, cell) {\r\n            if (state.currentTrajectory) {\r\n                state.currentModel = createOrUpdateRefList(state, cell, state.currentTrajectory.models, ModelRef, cell, state.currentTrajectory);\r\n            }\r\n            else {\r\n                state.currentModel = createOrUpdateRef(state, cell, ModelRef, cell);\r\n            }\r\n            state.hierarchy.models.push(state.currentModel);\r\n        }, function (state) { return state.currentModel = void 0; }],\r\n    [isTransformer(StateTransforms.Model.CustomModelProperties), function (state, cell) {\r\n            if (!state.currentModel)\r\n                return false;\r\n            state.currentModel.properties = createOrUpdateRef(state, cell, ModelPropertiesRef, cell, state.currentModel);\r\n        }, noop],\r\n    [isTransformer(StateTransforms.Representation.ModelUnitcell3D), function (state, cell) {\r\n            if (!state.currentModel)\r\n                return false;\r\n            state.currentModel.unitcell = createOrUpdateRef(state, cell, ModelUnitcellRef, cell, state.currentModel);\r\n        }, noop],\r\n    // Structure\r\n    [isTypeRoot(SO.Molecule.Structure, function (s) { return s.currentStructure; }), function (state, cell) {\r\n            if (state.currentModel) {\r\n                state.currentStructure = createOrUpdateRefList(state, cell, state.currentModel.structures, StructureRef, cell, state.currentModel);\r\n            }\r\n            else {\r\n                state.currentStructure = createOrUpdateRef(state, cell, StructureRef, cell);\r\n            }\r\n            state.hierarchy.structures.push(state.currentStructure);\r\n        }, function (state) { return state.currentStructure = void 0; }],\r\n    [isTransformer(StateTransforms.Model.CustomStructureProperties), function (state, cell) {\r\n            if (!state.currentStructure)\r\n                return false;\r\n            state.currentStructure.properties = createOrUpdateRef(state, cell, StructurePropertiesRef, cell, state.currentStructure);\r\n        }, noop],\r\n    [isTransformer(StateTransforms.Model.TransformStructureConformation), function (state, cell) {\r\n            if (!state.currentStructure)\r\n                return false;\r\n            state.currentStructure.transform = createOrUpdateRef(state, cell, StructureTransformRef, cell, state.currentStructure);\r\n        }, noop],\r\n    // Volume Streaming\r\n    [isType(VolumeStreaming), function (state, cell) {\r\n            if (!state.currentStructure)\r\n                return false;\r\n            state.currentStructure.volumeStreaming = createOrUpdateRef(state, cell, StructureVolumeStreamingRef, cell, state.currentStructure);\r\n            // Do not continue into VolumeStreaming subtree.\r\n            return false;\r\n        }, noop],\r\n    // Component\r\n    [function (cell, state) {\r\n            if (state.currentComponent || !state.currentStructure || cell.transform.transformer.definition.isDecorator)\r\n                return false;\r\n            return SO.Molecule.Structure.is(cell.obj);\r\n        }, function (state, cell) {\r\n            if (state.currentStructure) {\r\n                state.currentComponent = createOrUpdateRefList(state, cell, state.currentStructure.components, StructureComponentRef, cell, state.currentStructure);\r\n            }\r\n        }, function (state) { return state.currentComponent = void 0; }],\r\n    // Component Representation\r\n    [function (cell, state) {\r\n            return !cell.state.isGhost && !!state.currentComponent && SO.Molecule.Structure.Representation3D.is(cell.obj);\r\n        }, function (state, cell) {\r\n            if (state.currentComponent) {\r\n                createOrUpdateRefList(state, cell, state.currentComponent.representations, StructureRepresentationRef, cell, state.currentComponent);\r\n            }\r\n            // Nothing useful down the line\r\n            return false;\r\n        }, noop],\r\n    // Generic Representation\r\n    [function (cell) { return !cell.state.isGhost && SO.isRepresentation3D(cell.obj); }, function (state, cell) {\r\n            var genericTarget = state.currentComponent || state.currentStructure || state.currentModel;\r\n            if (genericTarget) {\r\n                if (!genericTarget.genericRepresentations)\r\n                    genericTarget.genericRepresentations = [];\r\n                createOrUpdateRefList(state, cell, genericTarget.genericRepresentations, GenericRepresentationRef, cell, genericTarget);\r\n            }\r\n        }, noop],\r\n];\r\nfunction isValidCell(cell) {\r\n    if (!cell || !(cell === null || cell === void 0 ? void 0 : cell.parent) || !cell.parent.cells.has(cell.transform.ref))\r\n        return false;\r\n    var obj = cell.obj;\r\n    if (!obj || obj === StateObject.Null || (cell.status !== 'ok' && cell.status !== 'error'))\r\n        return false;\r\n    return true;\r\n}\r\nfunction isRemoved(ref) {\r\n    var cell = ref.cell;\r\n    if (isValidCell(cell))\r\n        return;\r\n    this.changed = true;\r\n}\r\nfunction _preOrderFunc(c) { _doPreOrder(this, this.tree.transforms.get(c)); }\r\nfunction _doPreOrder(ctx, root) {\r\n    var state = ctx.state;\r\n    var cell = state.state.cells.get(root.ref);\r\n    if (!isValidCell(cell))\r\n        return;\r\n    var onLeave = void 0;\r\n    var end = false;\r\n    for (var _i = 0, Mapping_1 = Mapping; _i < Mapping_1.length; _i++) {\r\n        var _a = Mapping_1[_i], test_1 = _a[0], f = _a[1], l = _a[2];\r\n        if (test_1(cell, state)) {\r\n            var cont = f(state, cell);\r\n            if (cont === false) {\r\n                end = true;\r\n                break;\r\n            }\r\n            onLeave = l;\r\n            break;\r\n        }\r\n    }\r\n    // TODO: might be needed in the future\r\n    // const { currentComponent, currentModel, currentStructure, currentTrajectory } = ctx.state;\r\n    // const inTrackedSubtree = currentComponent || currentModel || currentStructure || currentTrajectory;\r\n    // if (inTrackedSubtree && cell.transform.transformer.definition.isDecorator) {\r\n    //     const ref = cell.transform.ref;\r\n    //     const old = ctx.state.oldHierarchy.decorators.get(ref);\r\n    //     if (old && old.version !== cell.transform.version) {\r\n    //         ctx.state.changed = true;\r\n    //     }\r\n    //     ctx.state.hierarchy.decorators.set(cell.transform.ref, cell.transform);\r\n    // }\r\n    if (end)\r\n        return;\r\n    var children = ctx.tree.children.get(root.ref);\r\n    if (children && children.size) {\r\n        children.forEach(_preOrderFunc, ctx);\r\n    }\r\n    if (onLeave)\r\n        onLeave(state);\r\n}\r\nfunction doPreOrder(tree, state) {\r\n    var ctx = { tree: tree, state: state };\r\n    _doPreOrder(ctx, tree.root);\r\n    return ctx.state;\r\n}\r\n//# sourceMappingURL=hierarchy-state.js.map"]},"metadata":{},"sourceType":"module"}