{"ast":null,"code":"/**\r\n * Copyright (c) 2018 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { UniqueArray } from '../../../mol-data/generic';\nimport { Expression } from '../../language/expression';\nimport { Argument, MSymbol, Arguments } from '../../language/symbol';\nimport { MolScriptSymbolTable as MolScript } from '../../language/symbol-table';\nimport { Type } from '../../language/type';\nimport { Types as StructureQueryTypes } from '../../language/symbol-table/structure-query';\nimport { MolScriptBuilder as B } from '../../language/builder';\nimport { getPositionalArgs, tryGetArg } from './script-macro';\n\nfunction Alias(symbol) {\n  var aliases = [];\n\n  for (var _a = 1; _a < arguments.length; _a++) {\n    aliases[_a - 1] = arguments[_a];\n  }\n\n  return {\n    kind: 'alias',\n    aliases: aliases,\n    symbol: symbol\n  };\n}\n\nfunction Macro(symbol, translate) {\n  var aliases = [];\n\n  for (var _a = 2; _a < arguments.length; _a++) {\n    aliases[_a - 2] = arguments[_a];\n  }\n\n  symbol.info.namespace = 'molscript-macro';\n  symbol.id = \"molscript-macro.\" + symbol.info.name;\n  return {\n    kind: 'macro',\n    symbol: symbol,\n    translate: translate,\n    aliases: __spreadArray([symbol.info.name], aliases, true)\n  };\n}\n\nexport function isMolScriptSymbol(x) {\n  return x.kind === 'alias' || x.kind === 'macro';\n}\nexport var SymbolTable = [['Core symbols', Alias(MolScript.core.type.bool, 'bool'), Alias(MolScript.core.type.num, 'num'), Alias(MolScript.core.type.str, 'str'), Alias(MolScript.core.type.regex, 'regex'), Alias(MolScript.core.type.list, 'list'), Alias(MolScript.core.type.set, 'set'), Alias(MolScript.core.type.compositeKey, 'composite-key'), Alias(MolScript.core.logic.not, 'not'), Alias(MolScript.core.logic.and, 'and'), Alias(MolScript.core.logic.or, 'or'), Alias(MolScript.core.ctrl.if, 'if'), Alias(MolScript.core.ctrl.fn, 'fn'), Alias(MolScript.core.ctrl.eval, 'eval'), Alias(MolScript.core.math.add, 'add', '+'), Alias(MolScript.core.math.sub, 'sub', '-'), Alias(MolScript.core.math.mult, 'mult', '*'), Alias(MolScript.core.math.div, 'div', '/'), Alias(MolScript.core.math.pow, 'pow', '**'), Alias(MolScript.core.math.mod, 'mod'), Alias(MolScript.core.math.min, 'min'), Alias(MolScript.core.math.max, 'max'), Alias(MolScript.core.math.floor, 'floor'), Alias(MolScript.core.math.ceil, 'ceil'), Alias(MolScript.core.math.roundInt, 'round'), Alias(MolScript.core.math.abs, 'abs'), Alias(MolScript.core.math.sqrt, 'sqrt'), Alias(MolScript.core.math.cbrt, 'cbrt'), Alias(MolScript.core.math.sin, 'sin'), Alias(MolScript.core.math.cos, 'cos'), Alias(MolScript.core.math.tan, 'tan'), Alias(MolScript.core.math.asin, 'asin'), Alias(MolScript.core.math.acos, 'acos'), Alias(MolScript.core.math.atan, 'atan'), Alias(MolScript.core.math.sinh, 'sinh'), Alias(MolScript.core.math.cosh, 'cosh'), Alias(MolScript.core.math.tanh, 'tanh'), Alias(MolScript.core.math.exp, 'exp'), Alias(MolScript.core.math.log, 'log'), Alias(MolScript.core.math.log10, 'log10'), Alias(MolScript.core.math.atan2, 'atan2'), Alias(MolScript.core.rel.eq, 'eq', '='), Alias(MolScript.core.rel.neq, 'neq', '!='), Alias(MolScript.core.rel.lt, 'lt', '<'), Alias(MolScript.core.rel.lte, 'lte', '<='), Alias(MolScript.core.rel.gr, 'gr', '>'), Alias(MolScript.core.rel.gre, 'gre', '>='), Alias(MolScript.core.rel.inRange, 'in-range'), Alias(MolScript.core.str.concat, 'concat'), Alias(MolScript.core.str.match, 'regex.match'), Alias(MolScript.core.list.getAt, 'list.get'), Alias(MolScript.core.set.has, 'set.has'), Alias(MolScript.core.set.isSubset, 'set.subset')], ['Structure', ['Types', Alias(MolScript.structureQuery.type.entityType, 'ent-type'), Alias(MolScript.structureQuery.type.authResidueId, 'auth-resid'), Alias(MolScript.structureQuery.type.labelResidueId, 'label-resid'), Alias(MolScript.structureQuery.type.ringFingerprint, 'ringfp'), Alias(MolScript.structureQuery.type.bondFlags, 'bond-flags')], ['Slots', Alias(MolScript.structureQuery.slot.elementSetReduce, 'atom.set.reduce.value')], ['Generators', Alias(MolScript.structureQuery.generator.atomGroups, 'sel.atom.atom-groups'), Alias(MolScript.structureQuery.generator.queryInSelection, 'sel.atom.query-in-selection'), Alias(MolScript.structureQuery.generator.rings, 'sel.atom.rings'), Alias(MolScript.structureQuery.generator.empty, 'sel.atom.empty'), Alias(MolScript.structureQuery.generator.all, 'sel.atom.all'), Alias(MolScript.structureQuery.generator.bondedAtomicPairs, 'sel.atom.bonded-pairs'), Macro(MSymbol('sel.atom.atoms', Arguments.Dictionary({\n  0: Argument(Type.Bool, {\n    isOptional: true,\n    defaultValue: true,\n    description: 'Test applied to each atom.'\n  })\n}), StructureQueryTypes.ElementSelection, 'A selection of singleton atom sets.'), function (args) {\n  return B.struct.generator.atomGroups({\n    'atom-test': tryGetArg(args, 0, true)\n  });\n}), Macro(MSymbol('sel.atom.res', Arguments.Dictionary({\n  0: Argument(Type.Bool, {\n    isOptional: true,\n    defaultValue: true,\n    description: 'Test applied to the 1st atom of each residue.'\n  })\n}), StructureQueryTypes.ElementSelection, 'A selection of atom sets grouped by residue.'), function (args) {\n  return B.struct.generator.atomGroups({\n    'residue-test': tryGetArg(args, 0, true),\n    'group-by': B.ammp('residueKey')\n  });\n}), Macro(MSymbol('sel.atom.chains', Arguments.Dictionary({\n  0: Argument(Type.Bool, {\n    isOptional: true,\n    defaultValue: true,\n    description: 'Test applied to the 1st atom of each chain.'\n  })\n}), StructureQueryTypes.ElementSelection, 'A selection of atom sets grouped by chain.'), function (args) {\n  return B.struct.generator.atomGroups({\n    'chain-test': tryGetArg(args, 0, true),\n    'group-by': B.ammp('chainKey')\n  });\n})], ['Modifiers', Alias(MolScript.structureQuery.modifier.queryEach, 'sel.atom.query-each'), Alias(MolScript.structureQuery.modifier.intersectBy, 'sel.atom.intersect-by'), Alias(MolScript.structureQuery.modifier.exceptBy, 'sel.atom.except-by'), Alias(MolScript.structureQuery.modifier.unionBy, 'sel.atom.union-by'), Alias(MolScript.structureQuery.modifier.union, 'sel.atom.union'), Alias(MolScript.structureQuery.modifier.cluster, 'sel.atom.cluster'), Alias(MolScript.structureQuery.modifier.includeSurroundings, 'sel.atom.include-surroundings'), Alias(MolScript.structureQuery.modifier.surroundingLigands, 'sel.atom.surrounding-ligands'), Alias(MolScript.structureQuery.modifier.includeConnected, 'sel.atom.include-connected'), Alias(MolScript.structureQuery.modifier.expandProperty, 'sel.atom.expand-property') // Macro(MSymbol('sel.atom.around', Arguments.Dictionary({\n//     0: Argument(Type.Bool, { isOptional: true, defaultValue: true, description: 'Test applied to the 1st atom of each chain.' })\n// }), Struct.Types.ElementSelection, 'A selection of singleton atom sets with centers within \"radius\" of the center of any atom in the given selection.'),\n// args => B.struct.modifier.exceptBy({\n//     '0': B.struct.filter.within({\n//         '0': B.struct.generator.atomGroups(), target: M.tryGetArg(args, 0), 'max-radius': M.tryGetArg(args, 'radius')\n//     }),\n//     by: M.tryGetArg(args, 0)\n// }))\n], ['Filters', Alias(MolScript.structureQuery.filter.pick, 'sel.atom.pick'), Alias(MolScript.structureQuery.filter.first, 'sel.atom.first'), Alias(MolScript.structureQuery.filter.withSameAtomProperties, 'sel.atom.with-same-atom-properties'), Alias(MolScript.structureQuery.filter.intersectedBy, 'sel.atom.intersected-by'), Alias(MolScript.structureQuery.filter.within, 'sel.atom.within'), Alias(MolScript.structureQuery.filter.isConnectedTo, 'sel.atom.is-connected-to')], ['Combinators', Alias(MolScript.structureQuery.combinator.intersect, 'sel.atom.intersect'), Alias(MolScript.structureQuery.combinator.merge, 'sel.atom.merge'), Alias(MolScript.structureQuery.combinator.distanceCluster, 'sel.atom.dist-cluster')], ['Atom Set Properties', Alias(MolScript.structureQuery.atomSet.atomCount, 'atom.set.atom-count'), Alias(MolScript.structureQuery.atomSet.countQuery, 'atom.set.count-query'), Alias(MolScript.structureQuery.atomSet.reduce, 'atom.set.reduce'), Alias(MolScript.structureQuery.atomSet.propertySet, 'atom.set.property') // Macro(MSymbol('atom.set.max', Arguments.Dictionary({\n//     0: Argument(Type.Num, { description: 'Numeric atom property.'})\n// }), Type.Num, 'Maximum of the given property in the current atom set.'),\n// args => M.aggregate(M.tryGetArg(args, 0), B.core.math.max)),\n// Macro(MSymbol('atom.set.sum', Arguments.Dictionary({\n//     0: Argument(Type.Num, { description: 'Numeric atom property.'})\n// }), Type.Num, 'Sum of the given property in the current atom set.'),\n// args => M.aggregate(M.tryGetArg(args, 0), B.core.math.add, 0)),\n// Macro(MSymbol('atom.set.avg', Arguments.Dictionary({\n//     0: Argument(Type.Num, { description: 'Numeric atom property.'})\n// }), Type.Num, 'Average of the given property in the current atom set.'),\n// args => B.core.math.div([ M.aggregate(M.tryGetArg(args, 0), B.core.math.add, 0), B.struct.atomSet.atomCount() ])),\n// Macro(MSymbol('atom.set.min', Arguments.Dictionary({\n//     0: Argument(Type.Num, { description: 'Numeric atom property.'})\n// }), Type.Num, 'Minimum of the given property in the current atom set.'),\n// args => M.aggregate(M.tryGetArg(args, 0), B.core.math.min))\n], ['Atom Properties', Alias(MolScript.structureQuery.atomProperty.core.elementSymbol, 'atom.el'), Alias(MolScript.structureQuery.atomProperty.core.vdw, 'atom.vdw'), Alias(MolScript.structureQuery.atomProperty.core.mass, 'atom.mass'), Alias(MolScript.structureQuery.atomProperty.core.atomicNumber, 'atom.atomic-number'), Alias(MolScript.structureQuery.atomProperty.core.x, 'atom.x'), Alias(MolScript.structureQuery.atomProperty.core.y, 'atom.y'), Alias(MolScript.structureQuery.atomProperty.core.z, 'atom.z'), Alias(MolScript.structureQuery.atomProperty.core.sourceIndex, 'atom.src-index'), Alias(MolScript.structureQuery.atomProperty.core.operatorName, 'atom.op-name'), Alias(MolScript.structureQuery.atomProperty.core.modelIndex, 'atom.model-index'), Alias(MolScript.structureQuery.atomProperty.core.modelLabel, 'atom.model-label'), Alias(MolScript.structureQuery.atomProperty.core.atomKey, 'atom.key'), Alias(MolScript.structureQuery.atomProperty.core.bondCount, 'atom.bond-count'), Alias(MolScript.structureQuery.atomProperty.topology.connectedComponentKey, 'atom.key.molecule'), Alias(MolScript.structureQuery.atomProperty.macromolecular.authResidueId, 'atom.auth-resid'), Alias(MolScript.structureQuery.atomProperty.macromolecular.labelResidueId, 'atom.label-resid'), Alias(MolScript.structureQuery.atomProperty.macromolecular.residueKey, 'atom.key.res'), Alias(MolScript.structureQuery.atomProperty.macromolecular.chainKey, 'atom.key.chain'), Alias(MolScript.structureQuery.atomProperty.macromolecular.entityKey, 'atom.key.entity'), Alias(MolScript.structureQuery.atomProperty.macromolecular.isHet, 'atom.is-het'), Alias(MolScript.structureQuery.atomProperty.macromolecular.id, 'atom.id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_atom_id, 'atom.label_atom_id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_alt_id, 'atom.label_alt_id', 'atom.altloc'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_comp_id, 'atom.label_comp_id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_asym_id, 'atom.label_asym_id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_entity_id, 'atom.label_entity_id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.label_seq_id, 'atom.label_seq_id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_atom_id, 'atom.auth_atom_id', 'atom.name'), Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_comp_id, 'atom.auth_comp_id', 'atom.resname'), Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_asym_id, 'atom.auth_asym_id', 'atom.chain'), Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_seq_id, 'atom.auth_seq_id', 'atom.resno'), Alias(MolScript.structureQuery.atomProperty.macromolecular.pdbx_PDB_ins_code, 'atom.pdbx_PDB_ins_code', 'atom.inscode'), Alias(MolScript.structureQuery.atomProperty.macromolecular.pdbx_formal_charge, 'atom.pdbx_formal_charge'), Alias(MolScript.structureQuery.atomProperty.macromolecular.occupancy, 'atom.occupancy'), Alias(MolScript.structureQuery.atomProperty.macromolecular.B_iso_or_equiv, 'atom.B_iso_or_equiv', 'atom.bfactor'), Alias(MolScript.structureQuery.atomProperty.macromolecular.entityType, 'atom.entity-type'), Alias(MolScript.structureQuery.atomProperty.macromolecular.entitySubtype, 'atom.entity-subtype'), Alias(MolScript.structureQuery.atomProperty.macromolecular.entityPrdId, 'atom.entity-prd-id'), Alias(MolScript.structureQuery.atomProperty.macromolecular.entityDescription, 'atom.entity-description'), Alias(MolScript.structureQuery.atomProperty.macromolecular.objectPrimitive, 'atom.object-primitive'), Alias(MolScript.structureQuery.atomProperty.macromolecular.chemCompType, 'atom.chem-comp-type'), Alias(MolScript.structureQuery.atomProperty.macromolecular.secondaryStructureKey, 'atom.key.sec-struct'), Alias(MolScript.structureQuery.atomProperty.macromolecular.isModified, 'atom.is-modified'), Alias(MolScript.structureQuery.atomProperty.macromolecular.modifiedParentName, 'atom.modified-parent') // Macro(MSymbol('atom.sec-struct.is', Arguments.List(Struct.Types.SecondaryStructureFlag), Type.Bool,\n//     `Test if the current atom is part of an secondary structure. Optionally specify allowed sec. struct. types: ${Type.oneOfValues(Struct.Types.SecondaryStructureFlag).join(', ')}`),\n// args => B.core.flags.hasAny([B.struct.atomProperty.macromolecular.secondaryStructureFlags(), B.struct.type.secondaryStructureFlags(args)])),\n], ['Bond Properties', Alias(MolScript.structureQuery.bondProperty.order, 'bond.order'), Alias(MolScript.structureQuery.bondProperty.length, 'bond.length'), Alias(MolScript.structureQuery.bondProperty.atomA, 'bond.atom-a'), Alias(MolScript.structureQuery.bondProperty.atomB, 'bond.atom-b'), Macro(MSymbol('bond.is', Arguments.List(StructureQueryTypes.BondFlag), Type.Bool, \"Test if the current bond has at least one (or all if partial = false) of the specified flags: \" + Type.oneOfValues(StructureQueryTypes.BondFlag).join(', ')), function (args) {\n  return B.core.flags.hasAny([B.struct.bondProperty.flags(), B.struct.type.bondFlags(getPositionalArgs(args))]);\n})]]];\nvar list = [];\n\nfunction makeList(xs) {\n  for (var _a = 0, xs_1 = xs; _a < xs_1.length; _a++) {\n    var x = xs_1[_a];\n    if (isMolScriptSymbol(x)) list.push(x);else if (x instanceof Array) makeList(x);\n  }\n}\n\nmakeList(SymbolTable);\n\nvar normalized = function () {\n  var symbolList = [];\n  var symbolMap = Object.create(null);\n  var namedArgs = UniqueArray.create();\n  var constants = UniqueArray.create();\n\n  for (var _a = 0, list_1 = list; _a < list_1.length; _a++) {\n    var s = list_1[_a];\n\n    for (var _b = 0, _c = s.aliases; _b < _c.length; _b++) {\n      var a = _c[_b];\n      symbolList.push([a, s]);\n      if (symbolMap[a]) throw new Error(\"Alias '\" + a + \"' already in use.\");\n      symbolMap[a] = s;\n    }\n\n    var args = s.symbol.args;\n\n    if (args.kind !== 'dictionary') {\n      if (args.type.kind === 'oneof') {\n        Type.oneOfValues(args.type).forEach(function (v) {\n          return UniqueArray.add(constants, v, v);\n        });\n      }\n\n      continue;\n    }\n\n    for (var _d = 0, _e = Object.keys(args.map); _d < _e.length; _d++) {\n      var a = _e[_d];\n      if (isNaN(a)) UniqueArray.add(namedArgs, a, a);\n      var arg = args.map[a];\n\n      if (arg.type.kind === 'oneof') {\n        Type.oneOfValues(arg.type).forEach(function (v) {\n          return UniqueArray.add(constants, v, v);\n        });\n      }\n    }\n  }\n\n  return {\n    symbolList: symbolList,\n    symbolMap: symbolMap,\n    namedArgs: namedArgs.array,\n    constants: constants.array\n  };\n}();\n\nexport var MolScriptSymbols = list;\nexport var Constants = normalized.constants;\nexport var NamedArgs = normalized.namedArgs;\nexport var SymbolMap = normalized.symbolMap;\nexport var SymbolList = normalized.symbolList;\n\nfunction substSymbols(expr) {\n  if (Expression.isLiteral(expr)) {\n    return expr;\n  }\n\n  if (Expression.isSymbol(expr)) {\n    if (!SymbolMap[expr.name]) return expr;\n    var s = SymbolMap[expr.name];\n    if (s.kind === 'alias') return Expression.Symbol(SymbolMap[expr.name].symbol.id);\n    throw s.translate([]);\n  }\n\n  var isMacro = Expression.isSymbol(expr.head) && !!SymbolMap[expr.head.name] && SymbolMap[expr.head.name].kind === 'macro';\n  var head = isMacro ? expr.head : substSymbols(expr.head);\n  var headChanged = head !== expr.head;\n\n  if (!expr.args) {\n    if (isMacro) return substSymbols(expr.head); // TODO: is this correct?\n\n    return headChanged ? Expression.Apply(head) : expr;\n  }\n\n  var argsChanged = false;\n  var newArgs;\n\n  if (Expression.isArgumentsArray(expr.args)) {\n    newArgs = [];\n\n    for (var i = 0, _i = expr.args.length; i < _i; i++) {\n      var oldArg = expr.args[i];\n      var newArg = substSymbols(oldArg);\n      if (oldArg !== newArg) argsChanged = true;\n      newArgs[newArgs.length] = newArg;\n    }\n\n    if (!argsChanged) newArgs = expr.args;\n    if (!isMacro && !headChanged && !argsChanged) return expr;\n  } else {\n    newArgs = {};\n\n    for (var _a = 0, _b = Object.keys(expr.args); _a < _b.length; _a++) {\n      var key = _b[_a];\n      var oldArg = expr.args[key];\n      var newArg = substSymbols(oldArg);\n      if (oldArg !== newArg) argsChanged = true;\n      newArgs[key] = newArg;\n    }\n\n    if (!isMacro && !headChanged && !argsChanged) return expr;\n    if (!argsChanged) newArgs = expr.args;\n  }\n\n  if (isMacro) {\n    var macro = SymbolMap[expr.head.name];\n    if (macro.kind !== 'macro') return Expression.Apply(head, newArgs);\n    var ret = macro.translate(newArgs);\n    return ret;\n  }\n\n  return Expression.Apply(head, newArgs);\n}\n\nexport function transpileMolScript(expr) {\n  return substSymbols(expr);\n} // const sortedSymbols = SymbolList.map(s => s[0]).sort((a, b) => {\n//     if (a.length === b.length) return (a < b) as any;\n//     return a.length - b.length;\n// });\n// export default [...sortedSymbols, ...NamedArgs.map(a => ':' + a), ...Constants];","map":{"version":3,"sources":["../../../../src/mol-script/script/mol-script/symbols.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 Mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { UniqueArray } from '../../../mol-data/generic';\r\nimport { Expression } from '../../language/expression';\r\nimport { Argument, MSymbol, Arguments } from '../../language/symbol';\r\nimport { MolScriptSymbolTable as MolScript } from '../../language/symbol-table';\r\nimport { Type } from '../../language/type';\r\nimport { Types as StructureQueryTypes } from '../../language/symbol-table/structure-query';\r\nimport { MolScriptBuilder as B } from '../../language/builder';\r\nimport { getPositionalArgs, tryGetArg } from './script-macro';\r\nfunction Alias(symbol) {\r\n    var aliases = [];\r\n    for (var _a = 1; _a < arguments.length; _a++) {\r\n        aliases[_a - 1] = arguments[_a];\r\n    }\r\n    return { kind: 'alias', aliases: aliases, symbol: symbol };\r\n}\r\nfunction Macro(symbol, translate) {\r\n    var aliases = [];\r\n    for (var _a = 2; _a < arguments.length; _a++) {\r\n        aliases[_a - 2] = arguments[_a];\r\n    }\r\n    symbol.info.namespace = 'molscript-macro';\r\n    symbol.id = \"molscript-macro.\" + symbol.info.name;\r\n    return { kind: 'macro', symbol: symbol, translate: translate, aliases: __spreadArray([symbol.info.name], aliases, true) };\r\n}\r\nexport function isMolScriptSymbol(x) {\r\n    return x.kind === 'alias' || x.kind === 'macro';\r\n}\r\nexport var SymbolTable = [\r\n    [\r\n        'Core symbols',\r\n        Alias(MolScript.core.type.bool, 'bool'),\r\n        Alias(MolScript.core.type.num, 'num'),\r\n        Alias(MolScript.core.type.str, 'str'),\r\n        Alias(MolScript.core.type.regex, 'regex'),\r\n        Alias(MolScript.core.type.list, 'list'),\r\n        Alias(MolScript.core.type.set, 'set'),\r\n        Alias(MolScript.core.type.compositeKey, 'composite-key'),\r\n        Alias(MolScript.core.logic.not, 'not'),\r\n        Alias(MolScript.core.logic.and, 'and'),\r\n        Alias(MolScript.core.logic.or, 'or'),\r\n        Alias(MolScript.core.ctrl.if, 'if'),\r\n        Alias(MolScript.core.ctrl.fn, 'fn'),\r\n        Alias(MolScript.core.ctrl.eval, 'eval'),\r\n        Alias(MolScript.core.math.add, 'add', '+'),\r\n        Alias(MolScript.core.math.sub, 'sub', '-'),\r\n        Alias(MolScript.core.math.mult, 'mult', '*'),\r\n        Alias(MolScript.core.math.div, 'div', '/'),\r\n        Alias(MolScript.core.math.pow, 'pow', '**'),\r\n        Alias(MolScript.core.math.mod, 'mod'),\r\n        Alias(MolScript.core.math.min, 'min'),\r\n        Alias(MolScript.core.math.max, 'max'),\r\n        Alias(MolScript.core.math.floor, 'floor'),\r\n        Alias(MolScript.core.math.ceil, 'ceil'),\r\n        Alias(MolScript.core.math.roundInt, 'round'),\r\n        Alias(MolScript.core.math.abs, 'abs'),\r\n        Alias(MolScript.core.math.sqrt, 'sqrt'),\r\n        Alias(MolScript.core.math.cbrt, 'cbrt'),\r\n        Alias(MolScript.core.math.sin, 'sin'),\r\n        Alias(MolScript.core.math.cos, 'cos'),\r\n        Alias(MolScript.core.math.tan, 'tan'),\r\n        Alias(MolScript.core.math.asin, 'asin'),\r\n        Alias(MolScript.core.math.acos, 'acos'),\r\n        Alias(MolScript.core.math.atan, 'atan'),\r\n        Alias(MolScript.core.math.sinh, 'sinh'),\r\n        Alias(MolScript.core.math.cosh, 'cosh'),\r\n        Alias(MolScript.core.math.tanh, 'tanh'),\r\n        Alias(MolScript.core.math.exp, 'exp'),\r\n        Alias(MolScript.core.math.log, 'log'),\r\n        Alias(MolScript.core.math.log10, 'log10'),\r\n        Alias(MolScript.core.math.atan2, 'atan2'),\r\n        Alias(MolScript.core.rel.eq, 'eq', '='),\r\n        Alias(MolScript.core.rel.neq, 'neq', '!='),\r\n        Alias(MolScript.core.rel.lt, 'lt', '<'),\r\n        Alias(MolScript.core.rel.lte, 'lte', '<='),\r\n        Alias(MolScript.core.rel.gr, 'gr', '>'),\r\n        Alias(MolScript.core.rel.gre, 'gre', '>='),\r\n        Alias(MolScript.core.rel.inRange, 'in-range'),\r\n        Alias(MolScript.core.str.concat, 'concat'),\r\n        Alias(MolScript.core.str.match, 'regex.match'),\r\n        Alias(MolScript.core.list.getAt, 'list.get'),\r\n        Alias(MolScript.core.set.has, 'set.has'),\r\n        Alias(MolScript.core.set.isSubset, 'set.subset'),\r\n    ],\r\n    [\r\n        'Structure',\r\n        [\r\n            'Types',\r\n            Alias(MolScript.structureQuery.type.entityType, 'ent-type'),\r\n            Alias(MolScript.structureQuery.type.authResidueId, 'auth-resid'),\r\n            Alias(MolScript.structureQuery.type.labelResidueId, 'label-resid'),\r\n            Alias(MolScript.structureQuery.type.ringFingerprint, 'ringfp'),\r\n            Alias(MolScript.structureQuery.type.bondFlags, 'bond-flags'),\r\n        ],\r\n        [\r\n            'Slots',\r\n            Alias(MolScript.structureQuery.slot.elementSetReduce, 'atom.set.reduce.value'),\r\n        ],\r\n        [\r\n            'Generators',\r\n            Alias(MolScript.structureQuery.generator.atomGroups, 'sel.atom.atom-groups'),\r\n            Alias(MolScript.structureQuery.generator.queryInSelection, 'sel.atom.query-in-selection'),\r\n            Alias(MolScript.structureQuery.generator.rings, 'sel.atom.rings'),\r\n            Alias(MolScript.structureQuery.generator.empty, 'sel.atom.empty'),\r\n            Alias(MolScript.structureQuery.generator.all, 'sel.atom.all'),\r\n            Alias(MolScript.structureQuery.generator.bondedAtomicPairs, 'sel.atom.bonded-pairs'),\r\n            Macro(MSymbol('sel.atom.atoms', Arguments.Dictionary({\r\n                0: Argument(Type.Bool, { isOptional: true, defaultValue: true, description: 'Test applied to each atom.' })\r\n            }), StructureQueryTypes.ElementSelection, 'A selection of singleton atom sets.'), function (args) { return B.struct.generator.atomGroups({ 'atom-test': tryGetArg(args, 0, true) }); }),\r\n            Macro(MSymbol('sel.atom.res', Arguments.Dictionary({\r\n                0: Argument(Type.Bool, { isOptional: true, defaultValue: true, description: 'Test applied to the 1st atom of each residue.' })\r\n            }), StructureQueryTypes.ElementSelection, 'A selection of atom sets grouped by residue.'), function (args) { return B.struct.generator.atomGroups({\r\n                'residue-test': tryGetArg(args, 0, true),\r\n                'group-by': B.ammp('residueKey')\r\n            }); }),\r\n            Macro(MSymbol('sel.atom.chains', Arguments.Dictionary({\r\n                0: Argument(Type.Bool, { isOptional: true, defaultValue: true, description: 'Test applied to the 1st atom of each chain.' })\r\n            }), StructureQueryTypes.ElementSelection, 'A selection of atom sets grouped by chain.'), function (args) { return B.struct.generator.atomGroups({\r\n                'chain-test': tryGetArg(args, 0, true),\r\n                'group-by': B.ammp('chainKey')\r\n            }); }),\r\n        ],\r\n        [\r\n            'Modifiers',\r\n            Alias(MolScript.structureQuery.modifier.queryEach, 'sel.atom.query-each'),\r\n            Alias(MolScript.structureQuery.modifier.intersectBy, 'sel.atom.intersect-by'),\r\n            Alias(MolScript.structureQuery.modifier.exceptBy, 'sel.atom.except-by'),\r\n            Alias(MolScript.structureQuery.modifier.unionBy, 'sel.atom.union-by'),\r\n            Alias(MolScript.structureQuery.modifier.union, 'sel.atom.union'),\r\n            Alias(MolScript.structureQuery.modifier.cluster, 'sel.atom.cluster'),\r\n            Alias(MolScript.structureQuery.modifier.includeSurroundings, 'sel.atom.include-surroundings'),\r\n            Alias(MolScript.structureQuery.modifier.surroundingLigands, 'sel.atom.surrounding-ligands'),\r\n            Alias(MolScript.structureQuery.modifier.includeConnected, 'sel.atom.include-connected'),\r\n            Alias(MolScript.structureQuery.modifier.expandProperty, 'sel.atom.expand-property'),\r\n            // Macro(MSymbol('sel.atom.around', Arguments.Dictionary({\r\n            //     0: Argument(Type.Bool, { isOptional: true, defaultValue: true, description: 'Test applied to the 1st atom of each chain.' })\r\n            // }), Struct.Types.ElementSelection, 'A selection of singleton atom sets with centers within \"radius\" of the center of any atom in the given selection.'),\r\n            // args => B.struct.modifier.exceptBy({\r\n            //     '0': B.struct.filter.within({\r\n            //         '0': B.struct.generator.atomGroups(), target: M.tryGetArg(args, 0), 'max-radius': M.tryGetArg(args, 'radius')\r\n            //     }),\r\n            //     by: M.tryGetArg(args, 0)\r\n            // }))\r\n        ],\r\n        [\r\n            'Filters',\r\n            Alias(MolScript.structureQuery.filter.pick, 'sel.atom.pick'),\r\n            Alias(MolScript.structureQuery.filter.first, 'sel.atom.first'),\r\n            Alias(MolScript.structureQuery.filter.withSameAtomProperties, 'sel.atom.with-same-atom-properties'),\r\n            Alias(MolScript.structureQuery.filter.intersectedBy, 'sel.atom.intersected-by'),\r\n            Alias(MolScript.structureQuery.filter.within, 'sel.atom.within'),\r\n            Alias(MolScript.structureQuery.filter.isConnectedTo, 'sel.atom.is-connected-to'),\r\n        ],\r\n        [\r\n            'Combinators',\r\n            Alias(MolScript.structureQuery.combinator.intersect, 'sel.atom.intersect'),\r\n            Alias(MolScript.structureQuery.combinator.merge, 'sel.atom.merge'),\r\n            Alias(MolScript.structureQuery.combinator.distanceCluster, 'sel.atom.dist-cluster'),\r\n        ],\r\n        [\r\n            'Atom Set Properties',\r\n            Alias(MolScript.structureQuery.atomSet.atomCount, 'atom.set.atom-count'),\r\n            Alias(MolScript.structureQuery.atomSet.countQuery, 'atom.set.count-query'),\r\n            Alias(MolScript.structureQuery.atomSet.reduce, 'atom.set.reduce'),\r\n            Alias(MolScript.structureQuery.atomSet.propertySet, 'atom.set.property'),\r\n            // Macro(MSymbol('atom.set.max', Arguments.Dictionary({\r\n            //     0: Argument(Type.Num, { description: 'Numeric atom property.'})\r\n            // }), Type.Num, 'Maximum of the given property in the current atom set.'),\r\n            // args => M.aggregate(M.tryGetArg(args, 0), B.core.math.max)),\r\n            // Macro(MSymbol('atom.set.sum', Arguments.Dictionary({\r\n            //     0: Argument(Type.Num, { description: 'Numeric atom property.'})\r\n            // }), Type.Num, 'Sum of the given property in the current atom set.'),\r\n            // args => M.aggregate(M.tryGetArg(args, 0), B.core.math.add, 0)),\r\n            // Macro(MSymbol('atom.set.avg', Arguments.Dictionary({\r\n            //     0: Argument(Type.Num, { description: 'Numeric atom property.'})\r\n            // }), Type.Num, 'Average of the given property in the current atom set.'),\r\n            // args => B.core.math.div([ M.aggregate(M.tryGetArg(args, 0), B.core.math.add, 0), B.struct.atomSet.atomCount() ])),\r\n            // Macro(MSymbol('atom.set.min', Arguments.Dictionary({\r\n            //     0: Argument(Type.Num, { description: 'Numeric atom property.'})\r\n            // }), Type.Num, 'Minimum of the given property in the current atom set.'),\r\n            // args => M.aggregate(M.tryGetArg(args, 0), B.core.math.min))\r\n        ],\r\n        [\r\n            'Atom Properties',\r\n            Alias(MolScript.structureQuery.atomProperty.core.elementSymbol, 'atom.el'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.vdw, 'atom.vdw'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.mass, 'atom.mass'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.atomicNumber, 'atom.atomic-number'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.x, 'atom.x'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.y, 'atom.y'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.z, 'atom.z'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.sourceIndex, 'atom.src-index'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.operatorName, 'atom.op-name'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.modelIndex, 'atom.model-index'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.modelLabel, 'atom.model-label'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.atomKey, 'atom.key'),\r\n            Alias(MolScript.structureQuery.atomProperty.core.bondCount, 'atom.bond-count'),\r\n            Alias(MolScript.structureQuery.atomProperty.topology.connectedComponentKey, 'atom.key.molecule'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.authResidueId, 'atom.auth-resid'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.labelResidueId, 'atom.label-resid'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.residueKey, 'atom.key.res'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.chainKey, 'atom.key.chain'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.entityKey, 'atom.key.entity'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.isHet, 'atom.is-het'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.id, 'atom.id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_atom_id, 'atom.label_atom_id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_alt_id, 'atom.label_alt_id', 'atom.altloc'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_comp_id, 'atom.label_comp_id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_asym_id, 'atom.label_asym_id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_entity_id, 'atom.label_entity_id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.label_seq_id, 'atom.label_seq_id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_atom_id, 'atom.auth_atom_id', 'atom.name'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_comp_id, 'atom.auth_comp_id', 'atom.resname'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_asym_id, 'atom.auth_asym_id', 'atom.chain'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.auth_seq_id, 'atom.auth_seq_id', 'atom.resno'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.pdbx_PDB_ins_code, 'atom.pdbx_PDB_ins_code', 'atom.inscode'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.pdbx_formal_charge, 'atom.pdbx_formal_charge'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.occupancy, 'atom.occupancy'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.B_iso_or_equiv, 'atom.B_iso_or_equiv', 'atom.bfactor'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.entityType, 'atom.entity-type'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.entitySubtype, 'atom.entity-subtype'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.entityPrdId, 'atom.entity-prd-id'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.entityDescription, 'atom.entity-description'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.objectPrimitive, 'atom.object-primitive'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.chemCompType, 'atom.chem-comp-type'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.secondaryStructureKey, 'atom.key.sec-struct'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.isModified, 'atom.is-modified'),\r\n            Alias(MolScript.structureQuery.atomProperty.macromolecular.modifiedParentName, 'atom.modified-parent'),\r\n            // Macro(MSymbol('atom.sec-struct.is', Arguments.List(Struct.Types.SecondaryStructureFlag), Type.Bool,\r\n            //     `Test if the current atom is part of an secondary structure. Optionally specify allowed sec. struct. types: ${Type.oneOfValues(Struct.Types.SecondaryStructureFlag).join(', ')}`),\r\n            // args => B.core.flags.hasAny([B.struct.atomProperty.macromolecular.secondaryStructureFlags(), B.struct.type.secondaryStructureFlags(args)])),\r\n        ],\r\n        [\r\n            'Bond Properties',\r\n            Alias(MolScript.structureQuery.bondProperty.order, 'bond.order'),\r\n            Alias(MolScript.structureQuery.bondProperty.length, 'bond.length'),\r\n            Alias(MolScript.structureQuery.bondProperty.atomA, 'bond.atom-a'),\r\n            Alias(MolScript.structureQuery.bondProperty.atomB, 'bond.atom-b'),\r\n            Macro(MSymbol('bond.is', Arguments.List(StructureQueryTypes.BondFlag), Type.Bool, \"Test if the current bond has at least one (or all if partial = false) of the specified flags: \" + Type.oneOfValues(StructureQueryTypes.BondFlag).join(', ')), function (args) { return B.core.flags.hasAny([B.struct.bondProperty.flags(), B.struct.type.bondFlags(getPositionalArgs(args))]); }),\r\n        ]\r\n    ]\r\n];\r\nvar list = [];\r\nfunction makeList(xs) {\r\n    for (var _a = 0, xs_1 = xs; _a < xs_1.length; _a++) {\r\n        var x = xs_1[_a];\r\n        if (isMolScriptSymbol(x))\r\n            list.push(x);\r\n        else if (x instanceof Array)\r\n            makeList(x);\r\n    }\r\n}\r\nmakeList(SymbolTable);\r\nvar normalized = (function () {\r\n    var symbolList = [];\r\n    var symbolMap = Object.create(null);\r\n    var namedArgs = UniqueArray.create();\r\n    var constants = UniqueArray.create();\r\n    for (var _a = 0, list_1 = list; _a < list_1.length; _a++) {\r\n        var s = list_1[_a];\r\n        for (var _b = 0, _c = s.aliases; _b < _c.length; _b++) {\r\n            var a = _c[_b];\r\n            symbolList.push([a, s]);\r\n            if (symbolMap[a])\r\n                throw new Error(\"Alias '\" + a + \"' already in use.\");\r\n            symbolMap[a] = s;\r\n        }\r\n        var args = s.symbol.args;\r\n        if (args.kind !== 'dictionary') {\r\n            if (args.type.kind === 'oneof') {\r\n                Type.oneOfValues(args.type).forEach(function (v) { return UniqueArray.add(constants, v, v); });\r\n            }\r\n            continue;\r\n        }\r\n        for (var _d = 0, _e = Object.keys(args.map); _d < _e.length; _d++) {\r\n            var a = _e[_d];\r\n            if (isNaN(a))\r\n                UniqueArray.add(namedArgs, a, a);\r\n            var arg = (args.map[a]);\r\n            if (arg.type.kind === 'oneof') {\r\n                Type.oneOfValues(arg.type).forEach(function (v) { return UniqueArray.add(constants, v, v); });\r\n            }\r\n        }\r\n    }\r\n    return { symbolList: symbolList, symbolMap: symbolMap, namedArgs: namedArgs.array, constants: constants.array };\r\n})();\r\nexport var MolScriptSymbols = list;\r\nexport var Constants = normalized.constants;\r\nexport var NamedArgs = normalized.namedArgs;\r\nexport var SymbolMap = normalized.symbolMap;\r\nexport var SymbolList = normalized.symbolList;\r\nfunction substSymbols(expr) {\r\n    if (Expression.isLiteral(expr)) {\r\n        return expr;\r\n    }\r\n    if (Expression.isSymbol(expr)) {\r\n        if (!SymbolMap[expr.name])\r\n            return expr;\r\n        var s = SymbolMap[expr.name];\r\n        if (s.kind === 'alias')\r\n            return Expression.Symbol(SymbolMap[expr.name].symbol.id);\r\n        throw s.translate([]);\r\n    }\r\n    var isMacro = Expression.isSymbol(expr.head) && !!SymbolMap[expr.head.name] && SymbolMap[expr.head.name].kind === 'macro';\r\n    var head = isMacro ? expr.head : substSymbols(expr.head);\r\n    var headChanged = head !== expr.head;\r\n    if (!expr.args) {\r\n        if (isMacro)\r\n            return substSymbols(expr.head); // TODO: is this correct?\r\n        return headChanged ? Expression.Apply(head) : expr;\r\n    }\r\n    var argsChanged = false;\r\n    var newArgs;\r\n    if (Expression.isArgumentsArray(expr.args)) {\r\n        newArgs = [];\r\n        for (var i = 0, _i = expr.args.length; i < _i; i++) {\r\n            var oldArg = expr.args[i];\r\n            var newArg = substSymbols(oldArg);\r\n            if (oldArg !== newArg)\r\n                argsChanged = true;\r\n            newArgs[newArgs.length] = newArg;\r\n        }\r\n        if (!argsChanged)\r\n            newArgs = expr.args;\r\n        if (!isMacro && !headChanged && !argsChanged)\r\n            return expr;\r\n    }\r\n    else {\r\n        newArgs = {};\r\n        for (var _a = 0, _b = Object.keys(expr.args); _a < _b.length; _a++) {\r\n            var key = _b[_a];\r\n            var oldArg = expr.args[key];\r\n            var newArg = substSymbols(oldArg);\r\n            if (oldArg !== newArg)\r\n                argsChanged = true;\r\n            newArgs[key] = newArg;\r\n        }\r\n        if (!isMacro && !headChanged && !argsChanged)\r\n            return expr;\r\n        if (!argsChanged)\r\n            newArgs = expr.args;\r\n    }\r\n    if (isMacro) {\r\n        var macro = SymbolMap[expr.head.name];\r\n        if (macro.kind !== 'macro')\r\n            return Expression.Apply(head, newArgs);\r\n        var ret = macro.translate(newArgs);\r\n        return ret;\r\n    }\r\n    return Expression.Apply(head, newArgs);\r\n}\r\nexport function transpileMolScript(expr) {\r\n    return substSymbols(expr);\r\n}\r\n// const sortedSymbols = SymbolList.map(s => s[0]).sort((a, b) => {\r\n//     if (a.length === b.length) return (a < b) as any;\r\n//     return a.length - b.length;\r\n// });\r\n// export default [...sortedSymbols, ...NamedArgs.map(a => ':' + a), ...Constants];\r\n//# sourceMappingURL=symbols.js.map"]},"metadata":{},"sourceType":"module"}