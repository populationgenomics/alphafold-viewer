{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { StructureSequence } from '../../../mol-model/structure/model/properties/sequence';\nimport { Column } from '../../../mol-data/db';\nimport { Sequence } from '../../../mol-model/sequence';\nexport function getSequence(data, entities, atomicHierarchy, coarseHierarchy) {\n  if (!data.entity_poly_seq || !data.entity_poly_seq._rowCount) {\n    return StructureSequence.fromHierarchy(entities, atomicHierarchy, coarseHierarchy);\n  }\n\n  var _a = data.entity_poly_seq,\n      entity_id = _a.entity_id,\n      num = _a.num,\n      mon_id = _a.mon_id;\n  var byEntityKey = {};\n  var sequences = [];\n  var count = entity_id.rowCount;\n  var i = 0;\n\n  while (i < count) {\n    var start = i;\n\n    while (i < count - 1 && entity_id.areValuesEqual(i, i + 1)) i++;\n\n    i++;\n    var id = entity_id.value(start);\n    var compId = Column.window(mon_id, start, i);\n    var seqId = Column.window(num, start, i);\n    var entityKey = entities.getEntityIndex(id);\n    byEntityKey[entityKey] = {\n      entityId: id,\n      sequence: Sequence.ofResidueNames(compId, seqId)\n    };\n    sequences.push(byEntityKey[entityKey]);\n  }\n\n  return {\n    byEntityKey: byEntityKey,\n    sequences: sequences\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/sequence.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAEH,SAAS,iBAAT,QAAkC,wDAAlC;AACA,SAAS,MAAT,QAAuB,sBAAvB;AAGA,SAAS,QAAT,QAAyB,6BAAzB;AAIA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAuC,QAAvC,EAA2D,eAA3D,EAA6F,eAA7F,EAA6H;AAC/H,MAAI,CAAC,IAAI,CAAC,eAAN,IAAyB,CAAC,IAAI,CAAC,eAAL,CAAqB,SAAnD,EAA8D;AAC1D,WAAO,iBAAiB,CAAC,aAAlB,CAAgC,QAAhC,EAA0C,eAA1C,EAA2D,eAA3D,CAAP;AACH;;AAEK,MAAA,EAAA,GAA6B,IAAI,CAAC,eAAlC;AAAA,MAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,MAAa,GAAG,GAAA,EAAA,CAAA,GAAhB;AAAA,MAAkB,MAAM,GAAA,EAAA,CAAA,MAAxB;AAEN,MAAM,WAAW,GAAqC,EAAtD;AACA,MAAM,SAAS,GAA+B,EAA9C;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,QAAxB;AAEA,MAAI,CAAC,GAAG,CAAR;;AACA,SAAO,CAAC,GAAG,KAAX,EAAkB;AACd,QAAM,KAAK,GAAG,CAAd;;AACA,WAAO,CAAC,GAAG,KAAK,GAAG,CAAZ,IAAiB,SAAS,CAAC,cAAV,CAAyB,CAAzB,EAA4B,CAAC,GAAG,CAAhC,CAAxB,EAA4D,CAAC;;AAC7D,IAAA,CAAC;AAED,QAAM,EAAE,GAAG,SAAS,CAAC,KAAV,CAAgB,KAAhB,CAAX;AACA,QAAM,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,KAAtB,EAA6B,CAA7B,CAAf;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,KAAnB,EAA0B,CAA1B,CAAd;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAlB;AAEA,IAAA,WAAW,CAAC,SAAD,CAAX,GAAyB;AACrB,MAAA,QAAQ,EAAE,EADW;AAErB,MAAA,QAAQ,EAAE,QAAQ,CAAC,cAAT,CAAwB,MAAxB,EAAgC,KAAhC;AAFW,KAAzB;AAKA,IAAA,SAAS,CAAC,IAAV,CAAe,WAAW,CAAC,SAAD,CAA1B;AACH;;AAED,SAAO;AAAE,IAAA,WAAW,EAAA,WAAb;AAAe,IAAA,SAAS,EAAA;AAAxB,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { StructureSequence } from '../../../mol-model/structure/model/properties/sequence';\r\nimport { Column } from '../../../mol-data/db';\r\nimport { Sequence } from '../../../mol-model/sequence';\r\nexport function getSequence(data, entities, atomicHierarchy, coarseHierarchy) {\r\n    if (!data.entity_poly_seq || !data.entity_poly_seq._rowCount) {\r\n        return StructureSequence.fromHierarchy(entities, atomicHierarchy, coarseHierarchy);\r\n    }\r\n    var _a = data.entity_poly_seq, entity_id = _a.entity_id, num = _a.num, mon_id = _a.mon_id;\r\n    var byEntityKey = {};\r\n    var sequences = [];\r\n    var count = entity_id.rowCount;\r\n    var i = 0;\r\n    while (i < count) {\r\n        var start = i;\r\n        while (i < count - 1 && entity_id.areValuesEqual(i, i + 1))\r\n            i++;\r\n        i++;\r\n        var id = entity_id.value(start);\r\n        var compId = Column.window(mon_id, start, i);\r\n        var seqId = Column.window(num, start, i);\r\n        var entityKey = entities.getEntityIndex(id);\r\n        byEntityKey[entityKey] = {\r\n            entityId: id,\r\n            sequence: Sequence.ofResidueNames(compId, seqId)\r\n        };\r\n        sequences.push(byEntityKey[entityKey]);\r\n    }\r\n    return { byEntityKey: byEntityKey, sequences: sequences };\r\n}\r\n//# sourceMappingURL=sequence.js.map"]},"metadata":{},"sourceType":"module"}