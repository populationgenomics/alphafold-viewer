{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Unit, StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\nimport { Color } from '../../mol-util/color';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPalette, getPaletteParams } from '../../mol-util/color/palette';\nimport { Segmentation } from '../../mol-data/int';\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\nvar DefaultList = 'dark-2';\nvar DefaultColor = Color(0xFAFAFA);\nvar Description = 'Gives every polymer chain a color based on its `asym_id` value.';\nexport var PolymerIdColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: DefaultList\n}));\nexport function getPolymerIdColorThemeParams(ctx) {\n  var params = PD.clone(PolymerIdColorThemeParams);\n\n  if (ctx.structure) {\n    if (getPolymerAsymIdSerialMap(ctx.structure.root).size > ColorLists[DefaultList].list.length) {\n      params.palette.defaultValue.name = 'colors';\n      params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), {\n        list: {\n          kind: 'interpolate',\n          colors: getColorListFromName(DefaultList).list\n        }\n      });\n    }\n  }\n\n  return params;\n}\n\nfunction getAsymId(unit) {\n  switch (unit.kind) {\n    case 0\n    /* Atomic */\n    :\n      return StructureProperties.chain.label_asym_id;\n\n    case 1\n    /* Spheres */\n    :\n    case 2\n    /* Gaussians */\n    :\n      return StructureProperties.coarse.asym_id;\n  }\n}\n\nfunction getPolymerAsymIdSerialMap(structure) {\n  var map = new Map();\n\n  for (var i = 0, il = structure.unitSymmetryGroups.length; i < il; ++i) {\n    var unit = structure.unitSymmetryGroups[i].units[0];\n    var model = unit.model;\n\n    if (Unit.isAtomic(unit)) {\n      var _a = model.atomicHierarchy,\n          chainAtomSegments = _a.chainAtomSegments,\n          chains = _a.chains;\n      var chainIt = Segmentation.transientSegments(chainAtomSegments, unit.elements);\n\n      while (chainIt.hasNext) {\n        var chainIndex = chainIt.move().index;\n        var entityId = chains.label_entity_id.value(chainIndex);\n        var eI = model.entities.getEntityIndex(entityId);\n\n        if (model.entities.data.type.value(eI) === 'polymer') {\n          var asymId = chains.label_asym_id.value(chainIndex);\n          if (!map.has(asymId)) map.set(asymId, map.size);\n        }\n      }\n    } else if (Unit.isCoarse(unit)) {\n      var _b = Unit.isSpheres(unit) ? model.coarseHierarchy.spheres : model.coarseHierarchy.gaussians,\n          chainElementSegments = _b.chainElementSegments,\n          asym_id = _b.asym_id,\n          entity_id = _b.entity_id;\n\n      var chainIt = Segmentation.transientSegments(chainElementSegments, unit.elements);\n\n      while (chainIt.hasNext) {\n        var chainIndex = chainIt.move().index;\n        var elementIndex = chainElementSegments.offsets[chainIndex];\n        var entityId = entity_id.value(elementIndex);\n        var eI = model.entities.getEntityIndex(entityId);\n\n        if (model.entities.data.type.value(eI) === 'polymer') {\n          var asymId = asym_id.value(elementIndex);\n          if (!map.has(asymId)) map.set(asymId, map.size);\n        }\n      }\n    }\n  }\n\n  return map;\n}\n\nexport function PolymerIdColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var l_1 = StructureElement.Location.create(ctx.structure);\n    var polymerAsymIdSerialMap_1 = getPolymerAsymIdSerialMap(ctx.structure.root);\n    var labelTable_1 = Array.from(polymerAsymIdSerialMap_1.keys());\n\n    var valueLabel = function (i) {\n      return labelTable_1[i];\n    };\n\n    var palette_1 = getPalette(polymerAsymIdSerialMap_1.size, props, {\n      valueLabel: valueLabel\n    });\n    legend = palette_1.legend;\n\n    color = function (location) {\n      var serial = undefined;\n\n      if (StructureElement.Location.is(location)) {\n        var asym_id = getAsymId(location.unit);\n        serial = polymerAsymIdSerialMap_1.get(asym_id(location));\n      } else if (Bond.isLocation(location)) {\n        var asym_id = getAsymId(location.aUnit);\n        l_1.unit = location.aUnit;\n        l_1.element = location.aUnit.elements[location.aIndex];\n        serial = polymerAsymIdSerialMap_1.get(asym_id(l_1));\n      }\n\n      return serial === undefined ? DefaultColor : palette_1.color(serial);\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: PolymerIdColorTheme,\n    granularity: 'group',\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var PolymerIdColorThemeProvider = {\n  name: 'polymer-id',\n  label: 'Polymer Chain Id',\n  category: \"Chain Property\"\n  /* Chain */\n  ,\n  factory: PolymerIdColorTheme,\n  getParams: getPolymerIdColorThemeParams,\n  defaultValues: PD.getDefaultValues(PolymerIdColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/polymer-id.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Unit, StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\r\nimport { Color } from '../../mol-util/color';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPalette, getPaletteParams } from '../../mol-util/color/palette';\r\nimport { Segmentation } from '../../mol-data/int';\r\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\r\nvar DefaultList = 'dark-2';\r\nvar DefaultColor = Color(0xFAFAFA);\r\nvar Description = 'Gives every polymer chain a color based on its `asym_id` value.';\r\nexport var PolymerIdColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: DefaultList }));\r\nexport function getPolymerIdColorThemeParams(ctx) {\r\n    var params = PD.clone(PolymerIdColorThemeParams);\r\n    if (ctx.structure) {\r\n        if (getPolymerAsymIdSerialMap(ctx.structure.root).size > ColorLists[DefaultList].list.length) {\r\n            params.palette.defaultValue.name = 'colors';\r\n            params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), { list: { kind: 'interpolate', colors: getColorListFromName(DefaultList).list } });\r\n        }\r\n    }\r\n    return params;\r\n}\r\nfunction getAsymId(unit) {\r\n    switch (unit.kind) {\r\n        case 0 /* Atomic */:\r\n            return StructureProperties.chain.label_asym_id;\r\n        case 1 /* Spheres */:\r\n        case 2 /* Gaussians */:\r\n            return StructureProperties.coarse.asym_id;\r\n    }\r\n}\r\nfunction getPolymerAsymIdSerialMap(structure) {\r\n    var map = new Map();\r\n    for (var i = 0, il = structure.unitSymmetryGroups.length; i < il; ++i) {\r\n        var unit = structure.unitSymmetryGroups[i].units[0];\r\n        var model = unit.model;\r\n        if (Unit.isAtomic(unit)) {\r\n            var _a = model.atomicHierarchy, chainAtomSegments = _a.chainAtomSegments, chains = _a.chains;\r\n            var chainIt = Segmentation.transientSegments(chainAtomSegments, unit.elements);\r\n            while (chainIt.hasNext) {\r\n                var chainIndex = chainIt.move().index;\r\n                var entityId = chains.label_entity_id.value(chainIndex);\r\n                var eI = model.entities.getEntityIndex(entityId);\r\n                if (model.entities.data.type.value(eI) === 'polymer') {\r\n                    var asymId = chains.label_asym_id.value(chainIndex);\r\n                    if (!map.has(asymId))\r\n                        map.set(asymId, map.size);\r\n                }\r\n            }\r\n        }\r\n        else if (Unit.isCoarse(unit)) {\r\n            var _b = Unit.isSpheres(unit)\r\n                ? model.coarseHierarchy.spheres\r\n                : model.coarseHierarchy.gaussians, chainElementSegments = _b.chainElementSegments, asym_id = _b.asym_id, entity_id = _b.entity_id;\r\n            var chainIt = Segmentation.transientSegments(chainElementSegments, unit.elements);\r\n            while (chainIt.hasNext) {\r\n                var chainIndex = chainIt.move().index;\r\n                var elementIndex = chainElementSegments.offsets[chainIndex];\r\n                var entityId = entity_id.value(elementIndex);\r\n                var eI = model.entities.getEntityIndex(entityId);\r\n                if (model.entities.data.type.value(eI) === 'polymer') {\r\n                    var asymId = asym_id.value(elementIndex);\r\n                    if (!map.has(asymId))\r\n                        map.set(asymId, map.size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return map;\r\n}\r\nexport function PolymerIdColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var l_1 = StructureElement.Location.create(ctx.structure);\r\n        var polymerAsymIdSerialMap_1 = getPolymerAsymIdSerialMap(ctx.structure.root);\r\n        var labelTable_1 = Array.from(polymerAsymIdSerialMap_1.keys());\r\n        var valueLabel = function (i) { return labelTable_1[i]; };\r\n        var palette_1 = getPalette(polymerAsymIdSerialMap_1.size, props, { valueLabel: valueLabel });\r\n        legend = palette_1.legend;\r\n        color = function (location) {\r\n            var serial = undefined;\r\n            if (StructureElement.Location.is(location)) {\r\n                var asym_id = getAsymId(location.unit);\r\n                serial = polymerAsymIdSerialMap_1.get(asym_id(location));\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                var asym_id = getAsymId(location.aUnit);\r\n                l_1.unit = location.aUnit;\r\n                l_1.element = location.aUnit.elements[location.aIndex];\r\n                serial = polymerAsymIdSerialMap_1.get(asym_id(l_1));\r\n            }\r\n            return serial === undefined ? DefaultColor : palette_1.color(serial);\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: PolymerIdColorTheme,\r\n        granularity: 'group',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var PolymerIdColorThemeProvider = {\r\n    name: 'polymer-id',\r\n    label: 'Polymer Chain Id',\r\n    category: \"Chain Property\" /* Chain */,\r\n    factory: PolymerIdColorTheme,\r\n    getParams: getPolymerIdColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(PolymerIdColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=polymer-id.js.map"]},"metadata":{},"sourceType":"module"}