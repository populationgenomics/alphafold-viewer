/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { ParamDefinition as PD } from '../../../mol-util/param-definition';
import { ComplexVisual } from '../complex-visual';
import { UnitsVisual } from '../units-visual';
export declare const GaussianDensityVolumeParams: {
    ignoreHydrogens: PD.BooleanParam;
    includeParent: PD.BooleanParam;
    traceOnly: PD.BooleanParam;
    resolution: PD.Numeric;
    radiusOffset: PD.Numeric;
    smoothness: PD.Numeric;
    unitKinds: PD.MultiSelect<"spheres" | "atomic" | "gaussians">;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    renderMode: PD.Mapped<PD.NamedParams<PD.Normalize<{
        controlPoints: import("../../../mol-math/linear-algebra/3d/vec2").Vec2[];
        list: {
            kind: "set" | "interpolate";
            colors: import("../../../mol-util/color/color").ColorListEntry[];
        };
    }>, "volume"> | PD.NamedParams<PD.Normalize<{
        isoValue: Readonly<{
            kind: "absolute";
            absoluteValue: number;
        }> | Readonly<{
            kind: "relative";
            relativeValue: number;
        }>;
        singleLayer: boolean;
    }>, "isosurface">>;
    stepsPerCell: PD.Numeric;
    jumpLength: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type GaussianDensityVolumeParams = typeof GaussianDensityVolumeParams;
export declare function GaussianDensityVolumeVisual(materialId: number): ComplexVisual<GaussianDensityVolumeParams>;
export declare const UnitsGaussianDensityVolumeParams: {
    ignoreHydrogens: PD.BooleanParam;
    includeParent: PD.BooleanParam;
    traceOnly: PD.BooleanParam;
    resolution: PD.Numeric;
    radiusOffset: PD.Numeric;
    smoothness: PD.Numeric;
    unitKinds: PD.MultiSelect<"spheres" | "atomic" | "gaussians">;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    renderMode: PD.Mapped<PD.NamedParams<PD.Normalize<{
        controlPoints: import("../../../mol-math/linear-algebra/3d/vec2").Vec2[];
        list: {
            kind: "set" | "interpolate";
            colors: import("../../../mol-util/color/color").ColorListEntry[];
        };
    }>, "volume"> | PD.NamedParams<PD.Normalize<{
        isoValue: Readonly<{
            kind: "absolute";
            absoluteValue: number;
        }> | Readonly<{
            kind: "relative";
            relativeValue: number;
        }>;
        singleLayer: boolean;
    }>, "isosurface">>;
    stepsPerCell: PD.Numeric;
    jumpLength: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type UnitsGaussianDensityVolumeParams = typeof UnitsGaussianDensityVolumeParams;
export declare function UnitsGaussianDensityVolumeVisual(materialId: number): UnitsVisual<UnitsGaussianDensityVolumeParams>;
