{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Column, Table } from '../../mol-data/db';\nimport { Task } from '../../mol-task';\nimport { createModels } from './basic/parser';\nimport { BasicSchema, createBasic } from './basic/schema';\nimport { ComponentBuilder } from './common/component';\nimport { EntityBuilder } from './common/entity';\nimport { CIF } from '../../mol-io/reader/cif';\nimport { Spacegroup, SpacegroupCell } from '../../mol-math/geometry';\nimport { Vec3 } from '../../mol-math/linear-algebra';\nimport { ModelSymmetry } from './property/symmetry';\nimport { IndexPairBonds } from './property/bonds/index-pair';\nimport { AtomSiteAnisotrop } from './property/anisotropic';\nimport { guessElementSymbolString } from './util';\nimport { cantorPairing } from '../../mol-data/util';\n\nfunction getSpacegroupNameOrNumber(space_group) {\n  var groupNumber = space_group.it_number.value(0);\n  var groupName = space_group['name_h-m_full'].value(0).replace('-', ' ');\n  if (!space_group.it_number.isDefined) return groupName;\n  if (!space_group['name_h-m_full'].isDefined) return groupNumber;\n  return groupNumber;\n}\n\nfunction getSymmetry(db) {\n  var cell = db.cell,\n      space_group = db.space_group;\n  var nameOrNumber = getSpacegroupNameOrNumber(space_group);\n  var spaceCell = SpacegroupCell.create(nameOrNumber, Vec3.create(cell.length_a.value(0), cell.length_b.value(0), cell.length_c.value(0)), Vec3.scale(Vec3(), Vec3.create(cell.angle_alpha.value(0), cell.angle_beta.value(0), cell.angle_gamma.value(0)), Math.PI / 180));\n  return {\n    spacegroup: Spacegroup.create(spaceCell),\n    assemblies: [],\n    isNonStandardCrystalFrame: false,\n    ncsOperators: []\n  };\n}\n\nfunction getModels(db, format, ctx) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var atomCount, MOL, A, seq_id, symmetry, m, _b, fract_x, fract_y, fract_z, x, y, z, v, i, _c, type_symbol, label, typeSymbol, formalCharge, element_symbol, formal_charge, i, ts, n, element_symbol, i, atom_site, name, entityBuilder, componentBuilder, basics, models, first, bondCount, labelIndexMap, label_1, i, il, bond_type, indexA, indexB, order, dist, flag, included, j, _d, atom_site_label_1, atom_site_label_2, valence, distance, i, iA, iB, id, t;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          atomCount = db.atom_site._rowCount;\n          MOL = Column.ofConst('MOL', atomCount, Column.Schema.str);\n          A = Column.ofConst('A', atomCount, Column.Schema.str);\n          seq_id = Column.ofConst(1, atomCount, Column.Schema.int);\n          symmetry = getSymmetry(db);\n          m = symmetry.spacegroup.cell.fromFractional;\n          _b = db.atom_site, fract_x = _b.fract_x, fract_y = _b.fract_y, fract_z = _b.fract_z;\n          x = new Float32Array(atomCount);\n          y = new Float32Array(atomCount);\n          z = new Float32Array(atomCount);\n          v = Vec3();\n\n          for (i = 0; i < atomCount; ++i) {\n            Vec3.set(v, fract_x.value(i), fract_y.value(i), fract_z.value(i));\n            Vec3.transformMat4(v, v, m);\n            x[i] = v[0], y[i] = v[1], z[i] = v[2];\n          }\n\n          _c = db.atom_site, type_symbol = _c.type_symbol, label = _c.label;\n\n          if (type_symbol.isDefined) {\n            element_symbol = new Array(atomCount);\n            formal_charge = new Int8Array(atomCount);\n\n            for (i = 0; i < atomCount; ++i) {\n              ts = type_symbol.value(i);\n              n = ts.length;\n\n              if (ts[n - 1] === '+') {\n                element_symbol[i] = ts.substring(0, n - 2);\n                formal_charge[i] = parseInt(ts[n - 2]);\n              } else if (ts[n - 2] === '+') {\n                element_symbol[i] = ts.substring(0, n - 2);\n                formal_charge[i] = parseInt(ts[n - 1]);\n              } else if (ts[n - 1] === '-') {\n                element_symbol[i] = ts.substring(0, n - 2);\n                formal_charge[i] = -parseInt(ts[n - 2]);\n              } else if (ts[n - 2] === '-') {\n                element_symbol[i] = ts.substring(0, n - 2);\n                formal_charge[i] = -parseInt(ts[n - 1]);\n              } else {\n                element_symbol[i] = ts;\n                formal_charge[i] = 0;\n              }\n            }\n\n            typeSymbol = Column.ofStringArray(element_symbol);\n            formalCharge = Column.ofIntArray(formal_charge);\n          } else {\n            element_symbol = new Array(atomCount);\n\n            for (i = 0; i < atomCount; ++i) {\n              // TODO can take as is if type_symbol not given?\n              element_symbol[i] = guessElementSymbolString(label.value(i));\n            }\n\n            typeSymbol = Column.ofStringArray(element_symbol);\n            formalCharge = Column.Undefined(atomCount, Column.Schema.int);\n          }\n\n          atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\n            auth_asym_id: A,\n            auth_atom_id: label,\n            auth_comp_id: MOL,\n            auth_seq_id: seq_id,\n            Cartn_x: Column.ofFloatArray(x),\n            Cartn_y: Column.ofFloatArray(y),\n            Cartn_z: Column.ofFloatArray(z),\n            id: Column.range(0, atomCount - 1),\n            label_asym_id: A,\n            label_atom_id: label,\n            label_comp_id: MOL,\n            label_seq_id: seq_id,\n            label_entity_id: Column.ofConst('1', atomCount, Column.Schema.str),\n            occupancy: db.atom_site.occupancy.isDefined ? db.atom_site.occupancy : Column.ofConst(1, atomCount, Column.Schema.float),\n            type_symbol: typeSymbol,\n            pdbx_formal_charge: formalCharge,\n            pdbx_PDB_model_num: Column.ofConst(1, atomCount, Column.Schema.int),\n            B_iso_or_equiv: db.atom_site.u_iso_or_equiv\n          }, atomCount);\n          name = db.chemical.name_common.value(0) || db.chemical.name_systematic.value(0) || db.chemical_formula.sum.value(0);\n          entityBuilder = new EntityBuilder();\n          entityBuilder.setNames([['MOL', name || 'Unknown Entity']]);\n          entityBuilder.getEntityId('MOL', 0\n          /* Unknown */\n          , 'A');\n          componentBuilder = new ComponentBuilder(seq_id, db.atom_site.type_symbol);\n          componentBuilder.setNames([['MOL', name || 'Unknown Molecule']]);\n          componentBuilder.add('MOL', 0);\n          basics = createBasic({\n            entity: entityBuilder.getEntityTable(),\n            chem_comp: componentBuilder.getChemCompTable(),\n            atom_site: atom_site\n          });\n          return [4\n          /*yield*/\n          , createModels(basics, format, ctx)];\n\n        case 1:\n          models = _e.sent();\n\n          if (models.frameCount > 0) {\n            first = models.representative;\n            ModelSymmetry.Provider.set(first, symmetry);\n            bondCount = db.geom_bond._rowCount;\n\n            if (bondCount > 0) {\n              labelIndexMap = {};\n              label_1 = db.atom_site.label;\n\n              for (i = 0, il = label_1.rowCount; i < il; ++i) {\n                labelIndexMap[label_1.value(i)] = i;\n              }\n\n              bond_type = (_a = format.data.frame.categories.ccdc_geom_bond_type) === null || _a === void 0 ? void 0 : _a.getField('');\n              indexA = [];\n              indexB = [];\n              order = [];\n              dist = [];\n              flag = [];\n              included = new Set();\n              j = 0;\n              _d = db.geom_bond, atom_site_label_1 = _d.atom_site_label_1, atom_site_label_2 = _d.atom_site_label_2, valence = _d.valence, distance = _d.distance;\n\n              for (i = 0; i < bondCount; ++i) {\n                iA = labelIndexMap[atom_site_label_1.value(i)];\n                iB = labelIndexMap[atom_site_label_2.value(i)];\n                id = iA < iB ? cantorPairing(iA, iB) : cantorPairing(iB, iA);\n                if (included.has(id)) continue;\n                included.add(id);\n                indexA[j] = iA;\n                indexB[j] = iB;\n                dist[j] = distance.value(i) || -1;\n\n                if (bond_type) {\n                  t = bond_type.str(i);\n\n                  if (t === 'D') {\n                    order[j] = 2;\n                    flag[j] = 1\n                    /* Covalent */\n                    ;\n                  } else if (t === 'A') {\n                    order[j] = 1;\n                    flag[j] = 1\n                    /* Covalent */\n                    | 16\n                    /* Aromatic */\n                    ;\n                  } else if (t === 'S') {\n                    order[j] = 1;\n                    flag[j] = 1\n                    /* Covalent */\n                    ;\n                  } else {\n                    order[j] = 1;\n                    flag[j] = 1\n                    /* Covalent */\n                    ;\n                  }\n                } else {\n                  flag[j] = 1\n                  /* Covalent */\n                  ; // TODO derive order from bond length if undefined\n\n                  order[j] = valence.isDefined ? valence.value(i) : 1;\n                }\n\n                j += 1;\n              }\n\n              IndexPairBonds.Provider.set(first, IndexPairBonds.fromData({\n                pairs: {\n                  indexA: Column.ofIntArray(indexA),\n                  indexB: Column.ofIntArray(indexB),\n                  order: Column.ofIntArray(order),\n                  distance: Column.ofFloatArray(dist),\n                  flag: Column.ofIntArray(flag)\n                },\n                count: atomCount\n              }));\n            }\n          }\n\n          return [2\n          /*return*/\n          , models];\n      }\n    });\n  });\n}\n\nfunction atomSiteAnisotropFromCifCore(model) {\n  if (!CifCoreFormat.is(model.sourceData)) return;\n  var _a = model.sourceData.data.db,\n      atom_site = _a.atom_site,\n      atom_site_aniso = _a.atom_site_aniso;\n  var data = Table.ofPartialColumns(AtomSiteAnisotrop.Schema, {\n    U: atom_site_aniso.u\n  }, atom_site_aniso._rowCount);\n  var elementToAnsiotrop = AtomSiteAnisotrop.getElementToAnsiotropFromLabel(atom_site.label, atom_site_aniso.label);\n  return {\n    data: data,\n    elementToAnsiotrop: elementToAnsiotrop\n  };\n}\n\nfunction atomSiteAnisotropApplicableCifCore(model) {\n  if (!CifCoreFormat.is(model.sourceData)) return false;\n  return model.sourceData.data.db.atom_site_aniso.u.isDefined;\n}\n\nAtomSiteAnisotrop.Provider.formatRegistry.add('cifCore', atomSiteAnisotropFromCifCore, atomSiteAnisotropApplicableCifCore); //\n\nexport { CifCoreFormat };\nvar CifCoreFormat;\n\n(function (CifCoreFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'cifCore';\n  }\n\n  CifCoreFormat.is = is;\n\n  function fromFrame(frame, db) {\n    if (!db) db = CIF.schema.cifCore(frame);\n\n    var name = db.database_code.depnum_ccdc_archive.value(0) || db.database_code.depnum_ccdc_fiz.value(0) || db.database_code.icsd.value(0) || db.database_code.mdf.value(0) || db.database_code.nbs.value(0) || db.database_code.csd.value(0) || db.database_code.cod.value(0) || db._name;\n\n    return {\n      kind: 'cifCore',\n      name: name,\n      data: {\n        db: db,\n        frame: frame\n      }\n    };\n  }\n\n  CifCoreFormat.fromFrame = fromFrame;\n})(CifCoreFormat || (CifCoreFormat = {}));\n\nexport function trajectoryFromCifCore(frame) {\n  var format = CifCoreFormat.fromFrame(frame);\n  return Task.create('Parse CIF Core', function (ctx) {\n    return getModels(format.data.db, format, ctx);\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/cif-core.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,MAAT,EAAiB,KAAjB,QAA8B,mBAA9B;AAGA,SAAyB,IAAzB,QAAqC,gBAArC;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,WAAT,EAAsB,WAAtB,QAAyC,gBAAzC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAGA,SAAmB,GAAnB,QAA8B,yBAA9B;AACA,SAAS,UAAT,EAAqB,cAArB,QAA2C,yBAA3C;AACA,SAAS,IAAT,QAAqB,+BAArB;AACA,SAAS,aAAT,QAA8B,qBAA9B;AACA,SAAS,cAAT,QAA+B,6BAA/B;AACA,SAAS,iBAAT,QAAkC,wBAAlC;AACA,SAAS,wBAAT,QAAyC,QAAzC;AAEA,SAAS,aAAT,QAA8B,qBAA9B;;AAEA,SAAS,yBAAT,CAAmC,WAAnC,EAA+E;AAC3E,MAAM,WAAW,GAAG,WAAW,CAAC,SAAZ,CAAsB,KAAtB,CAA4B,CAA5B,CAApB;AACA,MAAM,SAAS,GAAG,WAAW,CAAC,eAAD,CAAX,CAA6B,KAA7B,CAAmC,CAAnC,EAAsC,OAAtC,CAA8C,GAA9C,EAAmD,GAAnD,CAAlB;AACA,MAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,SAA3B,EAAsC,OAAO,SAAP;AACtC,MAAI,CAAC,WAAW,CAAC,eAAD,CAAX,CAA6B,SAAlC,EAA6C,OAAO,WAAP;AAC7C,SAAO,WAAP;AACH;;AAED,SAAS,WAAT,CAAqB,EAArB,EAAyC;AAC7B,MAAA,IAAI,GAAkB,EAAE,CAApB,IAAJ;AAAA,MAAM,WAAW,GAAK,EAAE,CAAP,WAAjB;AACR,MAAM,YAAY,GAAG,yBAAyB,CAAC,WAAD,CAA9C;AACA,MAAM,SAAS,GAAG,cAAc,CAAC,MAAf,CAAsB,YAAtB,EACd,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,QAAL,CAAc,KAAd,CAAoB,CAApB,CAAZ,EAAoC,IAAI,CAAC,QAAL,CAAc,KAAd,CAAoB,CAApB,CAApC,EAA4D,IAAI,CAAC,QAAL,CAAc,KAAd,CAAoB,CAApB,CAA5D,CADc,EAEd,IAAI,CAAC,KAAL,CAAW,IAAI,EAAf,EAAmB,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,WAAL,CAAiB,KAAjB,CAAuB,CAAvB,CAAZ,EAAuC,IAAI,CAAC,UAAL,CAAgB,KAAhB,CAAsB,CAAtB,CAAvC,EAAiE,IAAI,CAAC,WAAL,CAAiB,KAAjB,CAAuB,CAAvB,CAAjE,CAAnB,EAAgH,IAAI,CAAC,EAAL,GAAU,GAA1H,CAFc,CAAlB;AAIA,SAAO;AACH,IAAA,UAAU,EAAE,UAAU,CAAC,MAAX,CAAkB,SAAlB,CADT;AAEH,IAAA,UAAU,EAAE,EAFT;AAGH,IAAA,yBAAyB,EAAE,KAHxB;AAIH,IAAA,YAAY,EAAE;AAJX,GAAP;AAMH;;AAED,SAAe,SAAf,CAAyB,EAAzB,EAA+C,MAA/C,EAAsE,GAAtE,EAAyF;;;;;;;;;AAE/E,UAAA,SAAS,GAAG,EAAE,CAAC,SAAH,CAAa,SAAzB;AACA,UAAA,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,SAAtB,EAAiC,MAAM,CAAC,MAAP,CAAc,GAA/C,CAAN;AACA,UAAA,CAAC,GAAG,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,SAApB,EAA+B,MAAM,CAAC,MAAP,CAAc,GAA7C,CAAJ;AACA,UAAA,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,CAAf,EAAkB,SAAlB,EAA6B,MAAM,CAAC,MAAP,CAAc,GAA3C,CAAT;AAEA,UAAA,QAAQ,GAAG,WAAW,CAAC,EAAD,CAAtB;AACA,UAAA,CAAC,GAAG,QAAQ,CAAC,UAAT,CAAoB,IAApB,CAAyB,cAA7B;AAEA,UAAA,EAAA,GAAgC,EAAE,CAAC,SAAnC,EAAE,OAAO,GAAA,EAAA,CAAA,OAAT,EAAW,OAAO,GAAA,EAAA,CAAA,OAAlB,EAAoB,OAAO,GAAA,EAAA,CAAA,OAA3B;AACA,UAAA,CAAC,GAAG,IAAI,YAAJ,CAAiB,SAAjB,CAAJ;AACA,UAAA,CAAC,GAAG,IAAI,YAAJ,CAAiB,SAAjB,CAAJ;AACA,UAAA,CAAC,GAAG,IAAI,YAAJ,CAAiB,SAAjB,CAAJ;AACA,UAAA,CAAC,GAAG,IAAI,EAAR;;AACN,eAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAChC,YAAA,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,OAAO,CAAC,KAAR,CAAc,CAAd,CAAZ,EAA8B,OAAO,CAAC,KAAR,CAAc,CAAd,CAA9B,EAAgD,OAAO,CAAC,KAAR,CAAc,CAAd,CAAhD;AACA,YAAA,IAAI,CAAC,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACA,YAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR,EAAa,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAArB,EAA0B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAlC;AACH;;AAEK,UAAA,EAAA,GAAyB,EAAE,CAAC,SAA5B,EAAE,WAAW,GAAA,EAAA,CAAA,WAAb,EAAe,KAAK,GAAA,EAAA,CAAA,KAApB;;AAGN,cAAI,WAAW,CAAC,SAAhB,EAA2B;AACjB,YAAA,cAAc,GAAG,IAAI,KAAJ,CAAkB,SAAlB,CAAjB;AACA,YAAA,aAAa,GAAG,IAAI,SAAJ,CAAc,SAAd,CAAhB;;AACN,iBAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAC1B,cAAA,EAAE,GAAG,WAAW,CAAC,KAAZ,CAAkB,CAAlB,CAAL;AACA,cAAA,CAAC,GAAG,EAAE,CAAC,MAAP;;AACN,kBAAI,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,KAAc,GAAlB,EAAuB;AACnB,gBAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,CAAC,GAAG,CAApB,CAApB;AACA,gBAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAL,CAAH,CAA3B;AACH,eAHD,MAGO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,KAAc,GAAlB,EAAuB;AAC1B,gBAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,CAAC,GAAG,CAApB,CAApB;AACA,gBAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAL,CAAH,CAA3B;AACH,eAHM,MAGA,IAAI,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,KAAc,GAAlB,EAAuB;AAC1B,gBAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,CAAC,GAAG,CAApB,CAApB;AACA,gBAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAL,CAAH,CAA5B;AACH,eAHM,MAGA,IAAI,EAAE,CAAC,CAAC,GAAG,CAAL,CAAF,KAAc,GAAlB,EAAuB;AAC1B,gBAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,CAAC,GAAG,CAApB,CAApB;AACA,gBAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAG,CAAL,CAAH,CAA5B;AACH,eAHM,MAGA;AACH,gBAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,EAApB;AACA,gBAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACH;AACJ;;AACD,YAAA,UAAU,GAAG,MAAM,CAAC,aAAP,CAAqB,cAArB,CAAb;AACA,YAAA,YAAY,GAAG,MAAM,CAAC,UAAP,CAAkB,aAAlB,CAAf;AACH,WAzBD,MAyBO;AACG,YAAA,cAAc,GAAG,IAAI,KAAJ,CAAkB,SAAlB,CAAjB;;AACN,iBAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAChC;AACA,cAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,wBAAwB,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAD,CAA5C;AACH;;AACD,YAAA,UAAU,GAAG,MAAM,CAAC,aAAP,CAAqB,cAArB,CAAb;AACA,YAAA,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,SAAjB,EAA4B,MAAM,CAAC,MAAP,CAAc,GAA1C,CAAf;AACH;;AAEK,UAAA,SAAS,GAAG,KAAK,CAAC,gBAAN,CAAuB,WAAW,CAAC,SAAnC,EAA8C;AAC5D,YAAA,YAAY,EAAE,CAD8C;AAE5D,YAAA,YAAY,EAAE,KAF8C;AAG5D,YAAA,YAAY,EAAE,GAH8C;AAI5D,YAAA,WAAW,EAAE,MAJ+C;AAK5D,YAAA,OAAO,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CALmD;AAM5D,YAAA,OAAO,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CANmD;AAO5D,YAAA,OAAO,EAAE,MAAM,CAAC,YAAP,CAAoB,CAApB,CAPmD;AAQ5D,YAAA,EAAE,EAAE,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,SAAS,GAAG,CAA5B,CARwD;AAU5D,YAAA,aAAa,EAAE,CAV6C;AAW5D,YAAA,aAAa,EAAE,KAX6C;AAY5D,YAAA,aAAa,EAAE,GAZ6C;AAa5D,YAAA,YAAY,EAAE,MAb8C;AAc5D,YAAA,eAAe,EAAE,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,SAApB,EAA+B,MAAM,CAAC,MAAP,CAAc,GAA7C,CAd2C;AAgB5D,YAAA,SAAS,EAAE,EAAE,CAAC,SAAH,CAAa,SAAb,CAAuB,SAAvB,GACL,EAAE,CAAC,SAAH,CAAa,SADR,GAEL,MAAM,CAAC,OAAP,CAAe,CAAf,EAAkB,SAAlB,EAA6B,MAAM,CAAC,MAAP,CAAc,KAA3C,CAlBsD;AAmB5D,YAAA,WAAW,EAAE,UAnB+C;AAoB5D,YAAA,kBAAkB,EAAE,YApBwC;AAsB5D,YAAA,kBAAkB,EAAE,MAAM,CAAC,OAAP,CAAe,CAAf,EAAkB,SAAlB,EAA6B,MAAM,CAAC,MAAP,CAAc,GAA3C,CAtBwC;AAuB5D,YAAA,cAAc,EAAE,EAAE,CAAC,SAAH,CAAa;AAvB+B,WAA9C,EAwBf,SAxBe,CAAZ;AA0BA,UAAA,IAAI,GACN,EAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,KAAxB,CAA8B,CAA9B,KACA,EAAE,CAAC,QAAH,CAAY,eAAZ,CAA4B,KAA5B,CAAkC,CAAlC,CADA,IAEA,EAAE,CAAC,gBAAH,CAAoB,GAApB,CAAwB,KAAxB,CAA8B,CAA9B,CAHE;AAMA,UAAA,aAAa,GAAG,IAAI,aAAJ,EAAhB;AACN,UAAA,aAAa,CAAC,QAAd,CAAuB,CAAC,CAAC,KAAD,EAAQ,IAAI,IAAI,gBAAhB,CAAD,CAAvB;AACA,UAAA,aAAa,CAAC,WAAd,CAA0B,KAA1B,EAA+B;AAAA;AAA/B,YAAuD,GAAvD;AAEM,UAAA,gBAAgB,GAAG,IAAI,gBAAJ,CAAqB,MAArB,EAA6B,EAAE,CAAC,SAAH,CAAa,WAA1C,CAAnB;AACN,UAAA,gBAAgB,CAAC,QAAjB,CAA0B,CAAC,CAAC,KAAD,EAAQ,IAAI,IAAI,kBAAhB,CAAD,CAA1B;AACA,UAAA,gBAAgB,CAAC,GAAjB,CAAqB,KAArB,EAA4B,CAA5B;AAEM,UAAA,MAAM,GAAG,WAAW,CAAC;AACvB,YAAA,MAAM,EAAE,aAAa,CAAC,cAAd,EADe;AAEvB,YAAA,SAAS,EAAE,gBAAgB,CAAC,gBAAjB,EAFY;AAGvB,YAAA,SAAS,EAAA;AAHc,WAAD,CAApB;AAMS,iBAAA,CAAA;AAAA;AAAA,YAAM,YAAY,CAAC,MAAD,EAAS,MAAT,EAAiB,GAAjB,CAAlB,CAAA;;;AAAT,UAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;;AAEN,cAAI,MAAM,CAAC,UAAP,GAAoB,CAAxB,EAA2B;AACjB,YAAA,KAAK,GAAG,MAAM,CAAC,cAAf;AAEN,YAAA,aAAa,CAAC,QAAd,CAAuB,GAAvB,CAA2B,KAA3B,EAAkC,QAAlC;AAEM,YAAA,SAAS,GAAG,EAAE,CAAC,SAAH,CAAa,SAAzB;;AACN,gBAAI,SAAS,GAAG,CAAhB,EAAmB;AACT,cAAA,aAAa,GAAgC,EAA7C;AACE,cAAA,OAAA,GAAU,EAAE,CAAC,SAAH,CAAL,KAAL;;AACR,mBAAS,CAAC,GAAG,CAAJ,EAAO,EAAE,GAAG,OAAK,CAAC,QAA3B,EAAqC,CAAC,GAAG,EAAzC,EAA6C,EAAE,CAA/C,EAAkD;AAC9C,gBAAA,aAAa,CAAC,OAAK,CAAC,KAAN,CAAY,CAAZ,CAAD,CAAb,GAAgC,CAAhC;AACH;;AAEK,cAAA,SAAS,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,UAAlB,CAA6B,mBAA7B,MAAgD,IAAhD,IAAgD,EAAA,KAAA,KAAA,CAAhD,GAAgD,KAAA,CAAhD,GAAgD,EAAA,CAAE,QAAF,CAAW,EAAX,CAA5D;AAEA,cAAA,MAAM,GAAa,EAAnB;AACA,cAAA,MAAM,GAAa,EAAnB;AACA,cAAA,KAAK,GAAa,EAAlB;AACA,cAAA,IAAI,GAAa,EAAjB;AACA,cAAA,IAAI,GAAa,EAAjB;AAEA,cAAA,QAAQ,GAAG,IAAI,GAAJ,EAAX;AACF,cAAA,CAAC,GAAG,CAAJ;AAEE,cAAA,EAAA,GAA8D,EAAE,CAAC,SAAjE,EAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAnB,EAAqB,iBAAiB,GAAA,EAAA,CAAA,iBAAtC,EAAwC,OAAO,GAAA,EAAA,CAAA,OAA/C,EAAiD,QAAQ,GAAA,EAAA,CAAA,QAAzD;;AACN,mBAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,EAAE,CAAjC,EAAoC;AAC1B,gBAAA,EAAE,GAAG,aAAa,CAAC,iBAAiB,CAAC,KAAlB,CAAwB,CAAxB,CAAD,CAAlB;AACA,gBAAA,EAAE,GAAG,aAAa,CAAC,iBAAiB,CAAC,KAAlB,CAAwB,CAAxB,CAAD,CAAlB;AACA,gBAAA,EAAE,GAAG,EAAE,GAAG,EAAL,GAAU,aAAa,CAAC,EAAD,EAAK,EAAL,CAAvB,GAAkC,aAAa,CAAC,EAAD,EAAK,EAAL,CAApD;AACN,oBAAI,QAAQ,CAAC,GAAT,CAAa,EAAb,CAAJ,EAAsB;AACtB,gBAAA,QAAQ,CAAC,GAAT,CAAa,EAAb;AAEA,gBAAA,MAAM,CAAC,CAAD,CAAN,GAAY,EAAZ;AACA,gBAAA,MAAM,CAAC,CAAD,CAAN,GAAY,EAAZ;AACA,gBAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,QAAQ,CAAC,KAAT,CAAe,CAAf,KAAqB,CAAC,CAAhC;;AAEA,oBAAI,SAAJ,EAAe;AACL,kBAAA,CAAC,GAAG,SAAS,CAAC,GAAV,CAAc,CAAd,CAAJ;;AACN,sBAAI,CAAC,KAAK,GAAV,EAAe;AACX,oBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACA,oBAAA,IAAI,CAAC,CAAD,CAAJ,GAAO;AAAA;AAAP;AACH,mBAHD,MAGO,IAAI,CAAC,KAAK,GAAV,EAAe;AAClB,oBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACA,oBAAA,IAAI,CAAC,CAAD,CAAJ,GAAU;AAAA;AAAA,sBAAA;AAAA;AAAV;AACH,mBAHM,MAGA,IAAI,CAAC,KAAK,GAAV,EAAe;AAClB,oBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACA,oBAAA,IAAI,CAAC,CAAD,CAAJ,GAAO;AAAA;AAAP;AACH,mBAHM,MAGA;AACH,oBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACA,oBAAA,IAAI,CAAC,CAAD,CAAJ,GAAO;AAAA;AAAP;AACH;AACJ,iBAfD,MAeO;AACH,kBAAA,IAAI,CAAC,CAAD,CAAJ,GAAO;AAAA;AAAP,mBADG,CAEH;;AACA,kBAAA,KAAK,CAAC,CAAD,CAAL,GAAW,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC,KAAR,CAAc,CAAd,CAApB,GAAuC,CAAlD;AACH;;AAED,gBAAA,CAAC,IAAI,CAAL;AACH;;AAED,cAAA,cAAc,CAAC,QAAf,CAAwB,GAAxB,CAA4B,KAA5B,EAAmC,cAAc,CAAC,QAAf,CAAwB;AAAE,gBAAA,KAAK,EAAE;AAChE,kBAAA,MAAM,EAAE,MAAM,CAAC,UAAP,CAAkB,MAAlB,CADwD;AAEhE,kBAAA,MAAM,EAAE,MAAM,CAAC,UAAP,CAAkB,MAAlB,CAFwD;AAGhE,kBAAA,KAAK,EAAE,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAHyD;AAIhE,kBAAA,QAAQ,EAAE,MAAM,CAAC,YAAP,CAAoB,IAApB,CAJsD;AAKhE,kBAAA,IAAI,EAAE,MAAM,CAAC,UAAP,CAAkB,IAAlB;AAL0D,iBAAT;AAMxD,gBAAA,KAAK,EAAE;AANiD,eAAxB,CAAnC;AAOH;AACJ;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,MAAP,CAAA;;;;AACH;;AAED,SAAS,4BAAT,CAAsC,KAAtC,EAAkD;AAC9C,MAAI,CAAC,aAAa,CAAC,EAAd,CAAiB,KAAK,CAAC,UAAvB,CAAL,EAAyC;AACnC,MAAA,EAAA,GAAiC,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAsB,EAAvD;AAAA,MAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,MAAa,eAAe,GAAA,EAAA,CAAA,eAA5B;AACN,MAAM,IAAI,GAAG,KAAK,CAAC,gBAAN,CAAuB,iBAAiB,CAAC,MAAzC,EAAiD;AAC1D,IAAA,CAAC,EAAE,eAAe,CAAC;AADuC,GAAjD,EAEV,eAAe,CAAC,SAFN,CAAb;AAGA,MAAM,kBAAkB,GAAG,iBAAiB,CAAC,8BAAlB,CAAiD,SAAS,CAAC,KAA3D,EAAkE,eAAe,CAAC,KAAlF,CAA3B;AACA,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,kBAAkB,EAAA;AAA1B,GAAP;AACH;;AACD,SAAS,kCAAT,CAA4C,KAA5C,EAAwD;AACpD,MAAI,CAAC,aAAa,CAAC,EAAd,CAAiB,KAAK,CAAC,UAAvB,CAAL,EAAyC,OAAO,KAAP;AACzC,SAAO,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAsB,EAAtB,CAAyB,eAAzB,CAAyC,CAAzC,CAA2C,SAAlD;AACH;;AACD,iBAAiB,CAAC,QAAlB,CAA2B,cAA3B,CAA0C,GAA1C,CAA8C,SAA9C,EAAyD,4BAAzD,EAAuF,kCAAvF,E,CAEA;;AAEA,SAAS,aAAT;AAIA,IAAU,aAAV;;AAAA,CAAA,UAAU,aAAV,EAAuB;AAEnB,WAAgB,EAAhB,CAAmB,CAAnB,EAAkC;AAC9B,WAAO,CAAA,CAAC,KAAA,IAAD,IAAA,CAAC,KAAA,KAAA,CAAD,GAAC,KAAA,CAAD,GAAA,CAAC,CAAE,IAAH,MAAY,SAAnB;AACH;;AAFe,EAAA,aAAA,CAAA,EAAA,GAAE,EAAF;;AAIhB,WAAgB,SAAhB,CAA0B,KAA1B,EAA2C,EAA3C,EAAgE;AAC5D,QAAI,CAAC,EAAL,EAAS,EAAE,GAAG,GAAG,CAAC,MAAJ,CAAW,OAAX,CAAmB,KAAnB,CAAL;;AAET,QAAM,IAAI,GACN,EAAE,CAAC,aAAH,CAAiB,mBAAjB,CAAqC,KAArC,CAA2C,CAA3C,KACA,EAAE,CAAC,aAAH,CAAiB,eAAjB,CAAiC,KAAjC,CAAuC,CAAvC,CADA,IAEA,EAAE,CAAC,aAAH,CAAiB,IAAjB,CAAsB,KAAtB,CAA4B,CAA5B,CAFA,IAGA,EAAE,CAAC,aAAH,CAAiB,GAAjB,CAAqB,KAArB,CAA2B,CAA3B,CAHA,IAIA,EAAE,CAAC,aAAH,CAAiB,GAAjB,CAAqB,KAArB,CAA2B,CAA3B,CAJA,IAKA,EAAE,CAAC,aAAH,CAAiB,GAAjB,CAAqB,KAArB,CAA2B,CAA3B,CALA,IAMA,EAAE,CAAC,aAAH,CAAiB,GAAjB,CAAqB,KAArB,CAA2B,CAA3B,CANA,IAOA,EAAE,CAAC,KARP;;AAWA,WAAO;AAAE,MAAA,IAAI,EAAE,SAAR;AAAmB,MAAA,IAAI,EAAA,IAAvB;AAAyB,MAAA,IAAI,EAAE;AAAE,QAAA,EAAE,EAAA,EAAJ;AAAM,QAAA,KAAK,EAAA;AAAX;AAA/B,KAAP;AACH;;AAfe,EAAA,aAAA,CAAA,SAAA,GAAS,SAAT;AAgBnB,CAtBD,EAAU,aAAa,KAAb,aAAa,GAAA,EAAA,CAAvB;;AAwBA,OAAM,SAAU,qBAAV,CAAgC,KAAhC,EAA+C;AACjD,MAAM,MAAM,GAAG,aAAa,CAAC,SAAd,CAAwB,KAAxB,CAAf;AACA,SAAO,IAAI,CAAC,MAAL,CAAY,gBAAZ,EAA8B,UAAA,GAAA,EAAG;AAAI,WAAA,SAAS,CAAC,MAAM,CAAC,IAAP,CAAY,EAAb,EAAiB,MAAjB,EAAT,GAAS,CAAT;AAAsC,GAA3E,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Column, Table } from '../../mol-data/db';\r\nimport { Task } from '../../mol-task';\r\nimport { createModels } from './basic/parser';\r\nimport { BasicSchema, createBasic } from './basic/schema';\r\nimport { ComponentBuilder } from './common/component';\r\nimport { EntityBuilder } from './common/entity';\r\nimport { CIF } from '../../mol-io/reader/cif';\r\nimport { Spacegroup, SpacegroupCell } from '../../mol-math/geometry';\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nimport { ModelSymmetry } from './property/symmetry';\r\nimport { IndexPairBonds } from './property/bonds/index-pair';\r\nimport { AtomSiteAnisotrop } from './property/anisotropic';\r\nimport { guessElementSymbolString } from './util';\r\nimport { cantorPairing } from '../../mol-data/util';\r\nfunction getSpacegroupNameOrNumber(space_group) {\r\n    var groupNumber = space_group.it_number.value(0);\r\n    var groupName = space_group['name_h-m_full'].value(0).replace('-', ' ');\r\n    if (!space_group.it_number.isDefined)\r\n        return groupName;\r\n    if (!space_group['name_h-m_full'].isDefined)\r\n        return groupNumber;\r\n    return groupNumber;\r\n}\r\nfunction getSymmetry(db) {\r\n    var cell = db.cell, space_group = db.space_group;\r\n    var nameOrNumber = getSpacegroupNameOrNumber(space_group);\r\n    var spaceCell = SpacegroupCell.create(nameOrNumber, Vec3.create(cell.length_a.value(0), cell.length_b.value(0), cell.length_c.value(0)), Vec3.scale(Vec3(), Vec3.create(cell.angle_alpha.value(0), cell.angle_beta.value(0), cell.angle_gamma.value(0)), Math.PI / 180));\r\n    return {\r\n        spacegroup: Spacegroup.create(spaceCell),\r\n        assemblies: [],\r\n        isNonStandardCrystalFrame: false,\r\n        ncsOperators: []\r\n    };\r\n}\r\nfunction getModels(db, format, ctx) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var atomCount, MOL, A, seq_id, symmetry, m, _b, fract_x, fract_y, fract_z, x, y, z, v, i, _c, type_symbol, label, typeSymbol, formalCharge, element_symbol, formal_charge, i, ts, n, element_symbol, i, atom_site, name, entityBuilder, componentBuilder, basics, models, first, bondCount, labelIndexMap, label_1, i, il, bond_type, indexA, indexB, order, dist, flag, included, j, _d, atom_site_label_1, atom_site_label_2, valence, distance, i, iA, iB, id, t;\r\n        return __generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    atomCount = db.atom_site._rowCount;\r\n                    MOL = Column.ofConst('MOL', atomCount, Column.Schema.str);\r\n                    A = Column.ofConst('A', atomCount, Column.Schema.str);\r\n                    seq_id = Column.ofConst(1, atomCount, Column.Schema.int);\r\n                    symmetry = getSymmetry(db);\r\n                    m = symmetry.spacegroup.cell.fromFractional;\r\n                    _b = db.atom_site, fract_x = _b.fract_x, fract_y = _b.fract_y, fract_z = _b.fract_z;\r\n                    x = new Float32Array(atomCount);\r\n                    y = new Float32Array(atomCount);\r\n                    z = new Float32Array(atomCount);\r\n                    v = Vec3();\r\n                    for (i = 0; i < atomCount; ++i) {\r\n                        Vec3.set(v, fract_x.value(i), fract_y.value(i), fract_z.value(i));\r\n                        Vec3.transformMat4(v, v, m);\r\n                        x[i] = v[0], y[i] = v[1], z[i] = v[2];\r\n                    }\r\n                    _c = db.atom_site, type_symbol = _c.type_symbol, label = _c.label;\r\n                    if (type_symbol.isDefined) {\r\n                        element_symbol = new Array(atomCount);\r\n                        formal_charge = new Int8Array(atomCount);\r\n                        for (i = 0; i < atomCount; ++i) {\r\n                            ts = type_symbol.value(i);\r\n                            n = ts.length;\r\n                            if (ts[n - 1] === '+') {\r\n                                element_symbol[i] = ts.substring(0, n - 2);\r\n                                formal_charge[i] = parseInt(ts[n - 2]);\r\n                            }\r\n                            else if (ts[n - 2] === '+') {\r\n                                element_symbol[i] = ts.substring(0, n - 2);\r\n                                formal_charge[i] = parseInt(ts[n - 1]);\r\n                            }\r\n                            else if (ts[n - 1] === '-') {\r\n                                element_symbol[i] = ts.substring(0, n - 2);\r\n                                formal_charge[i] = -parseInt(ts[n - 2]);\r\n                            }\r\n                            else if (ts[n - 2] === '-') {\r\n                                element_symbol[i] = ts.substring(0, n - 2);\r\n                                formal_charge[i] = -parseInt(ts[n - 1]);\r\n                            }\r\n                            else {\r\n                                element_symbol[i] = ts;\r\n                                formal_charge[i] = 0;\r\n                            }\r\n                        }\r\n                        typeSymbol = Column.ofStringArray(element_symbol);\r\n                        formalCharge = Column.ofIntArray(formal_charge);\r\n                    }\r\n                    else {\r\n                        element_symbol = new Array(atomCount);\r\n                        for (i = 0; i < atomCount; ++i) {\r\n                            // TODO can take as is if type_symbol not given?\r\n                            element_symbol[i] = guessElementSymbolString(label.value(i));\r\n                        }\r\n                        typeSymbol = Column.ofStringArray(element_symbol);\r\n                        formalCharge = Column.Undefined(atomCount, Column.Schema.int);\r\n                    }\r\n                    atom_site = Table.ofPartialColumns(BasicSchema.atom_site, {\r\n                        auth_asym_id: A,\r\n                        auth_atom_id: label,\r\n                        auth_comp_id: MOL,\r\n                        auth_seq_id: seq_id,\r\n                        Cartn_x: Column.ofFloatArray(x),\r\n                        Cartn_y: Column.ofFloatArray(y),\r\n                        Cartn_z: Column.ofFloatArray(z),\r\n                        id: Column.range(0, atomCount - 1),\r\n                        label_asym_id: A,\r\n                        label_atom_id: label,\r\n                        label_comp_id: MOL,\r\n                        label_seq_id: seq_id,\r\n                        label_entity_id: Column.ofConst('1', atomCount, Column.Schema.str),\r\n                        occupancy: db.atom_site.occupancy.isDefined\r\n                            ? db.atom_site.occupancy\r\n                            : Column.ofConst(1, atomCount, Column.Schema.float),\r\n                        type_symbol: typeSymbol,\r\n                        pdbx_formal_charge: formalCharge,\r\n                        pdbx_PDB_model_num: Column.ofConst(1, atomCount, Column.Schema.int),\r\n                        B_iso_or_equiv: db.atom_site.u_iso_or_equiv,\r\n                    }, atomCount);\r\n                    name = (db.chemical.name_common.value(0) ||\r\n                        db.chemical.name_systematic.value(0) ||\r\n                        db.chemical_formula.sum.value(0));\r\n                    entityBuilder = new EntityBuilder();\r\n                    entityBuilder.setNames([['MOL', name || 'Unknown Entity']]);\r\n                    entityBuilder.getEntityId('MOL', 0 /* Unknown */, 'A');\r\n                    componentBuilder = new ComponentBuilder(seq_id, db.atom_site.type_symbol);\r\n                    componentBuilder.setNames([['MOL', name || 'Unknown Molecule']]);\r\n                    componentBuilder.add('MOL', 0);\r\n                    basics = createBasic({\r\n                        entity: entityBuilder.getEntityTable(),\r\n                        chem_comp: componentBuilder.getChemCompTable(),\r\n                        atom_site: atom_site\r\n                    });\r\n                    return [4 /*yield*/, createModels(basics, format, ctx)];\r\n                case 1:\r\n                    models = _e.sent();\r\n                    if (models.frameCount > 0) {\r\n                        first = models.representative;\r\n                        ModelSymmetry.Provider.set(first, symmetry);\r\n                        bondCount = db.geom_bond._rowCount;\r\n                        if (bondCount > 0) {\r\n                            labelIndexMap = {};\r\n                            label_1 = db.atom_site.label;\r\n                            for (i = 0, il = label_1.rowCount; i < il; ++i) {\r\n                                labelIndexMap[label_1.value(i)] = i;\r\n                            }\r\n                            bond_type = (_a = format.data.frame.categories.ccdc_geom_bond_type) === null || _a === void 0 ? void 0 : _a.getField('');\r\n                            indexA = [];\r\n                            indexB = [];\r\n                            order = [];\r\n                            dist = [];\r\n                            flag = [];\r\n                            included = new Set();\r\n                            j = 0;\r\n                            _d = db.geom_bond, atom_site_label_1 = _d.atom_site_label_1, atom_site_label_2 = _d.atom_site_label_2, valence = _d.valence, distance = _d.distance;\r\n                            for (i = 0; i < bondCount; ++i) {\r\n                                iA = labelIndexMap[atom_site_label_1.value(i)];\r\n                                iB = labelIndexMap[atom_site_label_2.value(i)];\r\n                                id = iA < iB ? cantorPairing(iA, iB) : cantorPairing(iB, iA);\r\n                                if (included.has(id))\r\n                                    continue;\r\n                                included.add(id);\r\n                                indexA[j] = iA;\r\n                                indexB[j] = iB;\r\n                                dist[j] = distance.value(i) || -1;\r\n                                if (bond_type) {\r\n                                    t = bond_type.str(i);\r\n                                    if (t === 'D') {\r\n                                        order[j] = 2;\r\n                                        flag[j] = 1 /* Covalent */;\r\n                                    }\r\n                                    else if (t === 'A') {\r\n                                        order[j] = 1;\r\n                                        flag[j] = 1 /* Covalent */ | 16 /* Aromatic */;\r\n                                    }\r\n                                    else if (t === 'S') {\r\n                                        order[j] = 1;\r\n                                        flag[j] = 1 /* Covalent */;\r\n                                    }\r\n                                    else {\r\n                                        order[j] = 1;\r\n                                        flag[j] = 1 /* Covalent */;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    flag[j] = 1 /* Covalent */;\r\n                                    // TODO derive order from bond length if undefined\r\n                                    order[j] = valence.isDefined ? valence.value(i) : 1;\r\n                                }\r\n                                j += 1;\r\n                            }\r\n                            IndexPairBonds.Provider.set(first, IndexPairBonds.fromData({ pairs: {\r\n                                    indexA: Column.ofIntArray(indexA),\r\n                                    indexB: Column.ofIntArray(indexB),\r\n                                    order: Column.ofIntArray(order),\r\n                                    distance: Column.ofFloatArray(dist),\r\n                                    flag: Column.ofIntArray(flag)\r\n                                }, count: atomCount }));\r\n                        }\r\n                    }\r\n                    return [2 /*return*/, models];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction atomSiteAnisotropFromCifCore(model) {\r\n    if (!CifCoreFormat.is(model.sourceData))\r\n        return;\r\n    var _a = model.sourceData.data.db, atom_site = _a.atom_site, atom_site_aniso = _a.atom_site_aniso;\r\n    var data = Table.ofPartialColumns(AtomSiteAnisotrop.Schema, {\r\n        U: atom_site_aniso.u,\r\n    }, atom_site_aniso._rowCount);\r\n    var elementToAnsiotrop = AtomSiteAnisotrop.getElementToAnsiotropFromLabel(atom_site.label, atom_site_aniso.label);\r\n    return { data: data, elementToAnsiotrop: elementToAnsiotrop };\r\n}\r\nfunction atomSiteAnisotropApplicableCifCore(model) {\r\n    if (!CifCoreFormat.is(model.sourceData))\r\n        return false;\r\n    return model.sourceData.data.db.atom_site_aniso.u.isDefined;\r\n}\r\nAtomSiteAnisotrop.Provider.formatRegistry.add('cifCore', atomSiteAnisotropFromCifCore, atomSiteAnisotropApplicableCifCore);\r\n//\r\nexport { CifCoreFormat };\r\nvar CifCoreFormat;\r\n(function (CifCoreFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'cifCore';\r\n    }\r\n    CifCoreFormat.is = is;\r\n    function fromFrame(frame, db) {\r\n        if (!db)\r\n            db = CIF.schema.cifCore(frame);\r\n        var name = (db.database_code.depnum_ccdc_archive.value(0) ||\r\n            db.database_code.depnum_ccdc_fiz.value(0) ||\r\n            db.database_code.icsd.value(0) ||\r\n            db.database_code.mdf.value(0) ||\r\n            db.database_code.nbs.value(0) ||\r\n            db.database_code.csd.value(0) ||\r\n            db.database_code.cod.value(0) ||\r\n            db._name);\r\n        return { kind: 'cifCore', name: name, data: { db: db, frame: frame } };\r\n    }\r\n    CifCoreFormat.fromFrame = fromFrame;\r\n})(CifCoreFormat || (CifCoreFormat = {}));\r\nexport function trajectoryFromCifCore(frame) {\r\n    var format = CifCoreFormat.fromFrame(frame);\r\n    return Task.create('Parse CIF Core', function (ctx) { return getModels(format.data.db, format, ctx); });\r\n}\r\n//# sourceMappingURL=cif-core.js.map"]},"metadata":{},"sourceType":"module"}