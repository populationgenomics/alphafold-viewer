{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport * as ColumnHelpers from './column-helpers';\nimport { Tensor as Tensors } from '../../mol-math/linear-algebra';\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../../mol-io/reader/common/text/number-parser';\nvar Column;\n\n(function (Column) {\n  var Schema;\n\n  (function (Schema) {\n    // T also serves as a default value for undefined columns\n    Schema.str = {\n      '@type': 'str',\n      T: '',\n      valueType: 'str'\n    };\n    Schema.int = {\n      '@type': 'int',\n      T: 0,\n      valueType: 'int'\n    };\n    Schema.coord = {\n      '@type': 'coord',\n      T: 0,\n      valueType: 'float'\n    };\n    Schema.float = {\n      '@type': 'float',\n      T: 0,\n      valueType: 'float'\n    };\n\n    function Str(defaultValue) {\n      if (defaultValue === void 0) {\n        defaultValue = '';\n      }\n\n      return {\n        '@type': 'str',\n        T: defaultValue,\n        valueType: 'str'\n      };\n    }\n\n    Schema.Str = Str;\n    ;\n\n    function Int(defaultValue) {\n      if (defaultValue === void 0) {\n        defaultValue = 0;\n      }\n\n      return {\n        '@type': 'int',\n        T: defaultValue,\n        valueType: 'int'\n      };\n    }\n\n    Schema.Int = Int;\n    ;\n\n    function Float(defaultValue) {\n      if (defaultValue === void 0) {\n        defaultValue = 0;\n      }\n\n      return {\n        '@type': 'float',\n        T: defaultValue,\n        valueType: 'float'\n      };\n    }\n\n    Schema.Float = Float;\n    ;\n\n    function Tensor(space, baseType) {\n      if (baseType === void 0) {\n        baseType = Schema.float;\n      }\n\n      return {\n        '@type': 'tensor',\n        T: space.create(),\n        space: space,\n        valueType: 'tensor',\n        baseType: baseType\n      };\n    }\n\n    Schema.Tensor = Tensor;\n\n    function Vector(dim, baseType) {\n      if (baseType === void 0) {\n        baseType = Schema.float;\n      }\n\n      return Tensor(Tensors.Vector(dim, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType);\n    }\n\n    Schema.Vector = Vector;\n\n    function Matrix(rows, cols, baseType) {\n      if (baseType === void 0) {\n        baseType = Schema.float;\n      }\n\n      return Tensor(Tensors.ColumnMajorMatrix(rows, cols, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType);\n    }\n\n    Schema.Matrix = Matrix;\n\n    function Aliased(t, defaultValue) {\n      if (typeof defaultValue !== 'undefined') return __assign(__assign({}, t), {\n        T: defaultValue\n      });\n      return t;\n    }\n\n    Schema.Aliased = Aliased;\n\n    function List(separator, itemParse, defaultValue) {\n      if (defaultValue === void 0) {\n        defaultValue = [];\n      }\n\n      return {\n        '@type': 'list',\n        T: defaultValue,\n        separator: separator,\n        itemParse: itemParse,\n        valueType: 'list'\n      };\n    }\n\n    Schema.List = List;\n  })(Schema = Column.Schema || (Column.Schema = {}));\n\n  function is(v) {\n    return !!v && !!v.schema && !!v.value;\n  }\n\n  Column.is = is;\n\n  function Undefined(rowCount, schema) {\n    return constColumn(schema['T'], rowCount, schema, 1\n    /* NotPresent */\n    );\n  }\n\n  Column.Undefined = Undefined;\n\n  function ofConst(v, rowCount, type) {\n    return constColumn(v, rowCount, type, 0\n    /* Present */\n    );\n  }\n\n  Column.ofConst = ofConst;\n\n  function ofLambda(spec) {\n    return lambdaColumn(spec);\n  }\n\n  Column.ofLambda = ofLambda;\n  /** values [min, max] (i.e. include both values) */\n\n  function range(min, max) {\n    return ofLambda({\n      value: function (i) {\n        return i + min;\n      },\n      rowCount: Math.max(max - min + 1, 0),\n      schema: Schema.int\n    });\n  }\n\n  Column.range = range;\n\n  function ofArray(spec) {\n    return arrayColumn(spec);\n  }\n\n  Column.ofArray = ofArray;\n\n  function ofIntArray(array) {\n    return arrayColumn({\n      array: array,\n      schema: Schema.int\n    });\n  }\n\n  Column.ofIntArray = ofIntArray;\n\n  function ofFloatArray(array) {\n    return arrayColumn({\n      array: array,\n      schema: Schema.float\n    });\n  }\n\n  Column.ofFloatArray = ofFloatArray;\n\n  function ofStringArray(array) {\n    return arrayColumn({\n      array: array,\n      schema: Schema.str\n    });\n  }\n\n  Column.ofStringArray = ofStringArray;\n\n  function ofStringAliasArray(array) {\n    return arrayColumn({\n      array: array,\n      schema: Schema.Aliased(Schema.str)\n    });\n  }\n\n  Column.ofStringAliasArray = ofStringAliasArray;\n\n  function ofStringListArray(array, separator) {\n    if (separator === void 0) {\n      separator = ',';\n    }\n\n    return arrayColumn({\n      array: array,\n      schema: Schema.List(separator, function (x) {\n        return x;\n      })\n    });\n  }\n\n  Column.ofStringListArray = ofStringListArray;\n\n  function ofIntTokens(tokens) {\n    var count = tokens.count,\n        data = tokens.data,\n        indices = tokens.indices;\n    return lambdaColumn({\n      value: function (row) {\n        return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0;\n      },\n      rowCount: count,\n      schema: Schema.int\n    });\n  }\n\n  Column.ofIntTokens = ofIntTokens;\n\n  function ofFloatTokens(tokens) {\n    var count = tokens.count,\n        data = tokens.data,\n        indices = tokens.indices;\n    return lambdaColumn({\n      value: function (row) {\n        return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0;\n      },\n      rowCount: count,\n      schema: Schema.float\n    });\n  }\n\n  Column.ofFloatTokens = ofFloatTokens;\n\n  function ofStringTokens(tokens) {\n    var count = tokens.count,\n        data = tokens.data,\n        indices = tokens.indices;\n    return lambdaColumn({\n      value: function (row) {\n        var ret = data.substring(indices[2 * row], indices[2 * row + 1]);\n        if (ret === '.' || ret === '?') return '';\n        return ret;\n      },\n      rowCount: count,\n      schema: Schema.str\n    });\n  }\n\n  Column.ofStringTokens = ofStringTokens;\n\n  function window(column, start, end) {\n    return windowColumn(column, start, end);\n  }\n\n  Column.window = window;\n\n  function view(column, indices, checkIndentity) {\n    if (checkIndentity === void 0) {\n      checkIndentity = true;\n    }\n\n    return columnView(column, indices, checkIndentity);\n  }\n\n  Column.view = view;\n  /** A map of the 1st occurence of each value. */\n\n  function createFirstIndexMap(column) {\n    return createFirstIndexMapOfColumn(column);\n  }\n\n  Column.createFirstIndexMap = createFirstIndexMap;\n\n  function createIndexer(column) {\n    return createIndexerOfColumn(column);\n  }\n\n  Column.createIndexer = createIndexer;\n\n  function mapToArray(column, f, ctor) {\n    return mapToArrayImpl(column, f, ctor || Array);\n  }\n\n  Column.mapToArray = mapToArray;\n\n  function areEqual(a, b) {\n    return areColumnsEqual(a, b);\n  }\n\n  Column.areEqual = areEqual;\n\n  function indicesOf(c, test) {\n    return columnIndicesOf(c, test);\n  }\n\n  Column.indicesOf = indicesOf;\n  /** Makes the column backed by an array. Useful for columns that are accessed often. */\n\n  function asArrayColumn(c, array) {\n    if (c.__array) return c;\n    if (!c.isDefined) return Undefined(c.rowCount, c.schema);\n    return arrayColumn({\n      array: c.toArray({\n        array: array\n      }),\n      schema: c.schema,\n      valueKind: c.valueKind\n    });\n  }\n\n  Column.asArrayColumn = asArrayColumn;\n\n  function copyToArray(c, array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (!c.isDefined) return;\n    var cArray = c.__array;\n\n    if (cArray) {\n      for (var i = 0, _i = cArray.length; i < _i; i++) array[offset + i] = cArray[i];\n    } else {\n      for (var i = 0, _i = c.rowCount; i < _i; i++) array[offset + i] = c.value(i);\n    }\n  }\n\n  Column.copyToArray = copyToArray;\n\n  function isIdentity(c) {\n    for (var i = 0, _i = c.rowCount; i < _i; i++) {\n      if (i !== c.value(i)) return false;\n    }\n\n    return true;\n  }\n\n  Column.isIdentity = isIdentity;\n})(Column || (Column = {}));\n\nexport { Column };\n\nfunction createFirstIndexMapOfColumn(c) {\n  var map = new Map();\n\n  for (var i = 0, _i = c.rowCount; i < _i; i++) {\n    var v = c.value(i);\n    if (!map.has(v)) map.set(c.value(i), i);\n  }\n\n  return map;\n}\n\nfunction createIndexerOfColumn(c) {\n  var map = new Map();\n\n  for (var i = 0, _i = c.rowCount; i < _i; i++) {\n    var v = c.value(i);\n    if (!map.has(v)) map.set(c.value(i), i);\n  }\n\n  return function (v) {\n    return map.has(v) ? map.get(v) : -1;\n  };\n}\n\nfunction constColumn(v, rowCount, schema, valueKind) {\n  var value = function (row) {\n    return v;\n  };\n\n  return {\n    schema: schema,\n    __array: void 0,\n    isDefined: valueKind === 0\n    /* Present */\n    ,\n    rowCount: rowCount,\n    value: value,\n    valueKind: function (row) {\n      return valueKind;\n    },\n    toArray: function (params) {\n      var array = ColumnHelpers.createArray(rowCount, params).array;\n\n      for (var i = 0, _i = array.length; i < _i; i++) array[i] = v;\n\n      return array;\n    },\n    areValuesEqual: function (rowA, rowB) {\n      return true;\n    }\n  };\n}\n\nfunction lambdaColumn(_a) {\n  var value = _a.value,\n      valueKind = _a.valueKind,\n      areValuesEqual = _a.areValuesEqual,\n      rowCount = _a.rowCount,\n      schema = _a.schema;\n  return {\n    schema: schema,\n    __array: void 0,\n    isDefined: true,\n    rowCount: rowCount,\n    value: value,\n    valueKind: valueKind ? valueKind : function (row) {\n      return 0\n      /* Present */\n      ;\n    },\n    toArray: function (params) {\n      var _a = ColumnHelpers.createArray(rowCount, params),\n          array = _a.array,\n          start = _a.start;\n\n      for (var i = 0, _i = array.length; i < _i; i++) array[i] = value(i + start);\n\n      return array;\n    },\n    areValuesEqual: areValuesEqual ? areValuesEqual : function (rowA, rowB) {\n      return value(rowA) === value(rowB);\n    }\n  };\n}\n\nfunction arrayColumn(_a) {\n  var array = _a.array,\n      schema = _a.schema,\n      valueKind = _a.valueKind;\n  var rowCount = array.length;\n  var value = schema.valueType === 'str' ? function (row) {\n    var v = array[row];\n    return typeof v === 'string' ? v : '' + v;\n  } : function (row) {\n    return array[row];\n  };\n  var isTyped = ColumnHelpers.isTypedArray(array);\n  return {\n    schema: schema,\n    __array: array,\n    isDefined: true,\n    rowCount: rowCount,\n    value: value,\n    valueKind: valueKind ? valueKind : function (row) {\n      return 0\n      /* Present */\n      ;\n    },\n    toArray: schema.valueType === 'str' ? function (params) {\n      var _a = ColumnHelpers.getArrayBounds(rowCount, params),\n          start = _a.start,\n          end = _a.end;\n\n      var ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);\n\n      for (var i = 0, _i = end - start; i < _i; i++) {\n        var v = array[start + i];\n        ret[i] = typeof v === 'string' ? v : '' + v;\n      }\n\n      return ret;\n    } : isTyped ? function (params) {\n      return ColumnHelpers.typedArrayWindow(array, params);\n    } : function (params) {\n      var _a = ColumnHelpers.getArrayBounds(rowCount, params),\n          start = _a.start,\n          end = _a.end;\n\n      if (start === 0 && end === array.length) return array;\n      var ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);\n\n      for (var i = 0, _i = end - start; i < _i; i++) ret[i] = array[start + i];\n\n      return ret;\n    },\n    areValuesEqual: function (rowA, rowB) {\n      return array[rowA] === array[rowB];\n    }\n  };\n}\n\nfunction windowColumn(column, start, end) {\n  if (!column.isDefined) return Column.Undefined(end - start, column.schema);\n  if (start === 0 && end === column.rowCount) return column;\n  if (!!column.__array && ColumnHelpers.isTypedArray(column.__array)) return windowTyped(column, start, end);\n  return windowFull(column, start, end);\n}\n\nfunction windowTyped(c, start, end) {\n  var array = ColumnHelpers.typedArrayWindow(c.__array, {\n    start: start,\n    end: end\n  });\n  var vk = c.valueKind;\n  return arrayColumn({\n    array: array,\n    schema: c.schema,\n    valueKind: function (row) {\n      return vk(start + row);\n    }\n  });\n}\n\nfunction windowFull(c, start, end) {\n  var v = c.value,\n      vk = c.valueKind,\n      ave = c.areValuesEqual;\n  var value = start === 0 ? v : function (row) {\n    return v(row + start);\n  };\n  var rowCount = end - start;\n  return {\n    schema: c.schema,\n    __array: void 0,\n    isDefined: c.isDefined,\n    rowCount: rowCount,\n    value: value,\n    valueKind: start === 0 ? vk : function (row) {\n      return vk(row + start);\n    },\n    toArray: function (params) {\n      var array = ColumnHelpers.createArray(rowCount, params).array;\n\n      for (var i = 0, _i = array.length; i < _i; i++) array[i] = v(i + start);\n\n      return array;\n    },\n    areValuesEqual: start === 0 ? ave : function (rowA, rowB) {\n      return ave(rowA + start, rowB + start);\n    }\n  };\n}\n\nfunction isIdentity(map, rowCount) {\n  if (map.length !== rowCount) return false;\n\n  for (var i = 0, _i = map.length; i < _i; i++) {\n    if (map[i] !== i) return false;\n  }\n\n  return true;\n}\n\nfunction columnView(c, map, checkIdentity) {\n  if (c.rowCount === 0) return c;\n  if (checkIdentity && isIdentity(map, c.rowCount)) return c;\n  if (!!c.__array && typeof c.value(0) === typeof c.__array[0]) return arrayView(c, map);\n  return viewFull(c, map);\n}\n\nfunction arrayView(c, map) {\n  var array = c.__array;\n  var ret = new array.constructor(map.length);\n\n  for (var i = 0, _i = map.length; i < _i; i++) ret[i] = array[map[i]];\n\n  var vk = c.valueKind;\n  return arrayColumn({\n    array: ret,\n    schema: c.schema,\n    valueKind: function (row) {\n      return vk(map[row]);\n    }\n  });\n}\n\nfunction viewFull(c, map) {\n  var v = c.value,\n      vk = c.valueKind,\n      ave = c.areValuesEqual;\n\n  var value = function (row) {\n    return v(map[row]);\n  };\n\n  var rowCount = map.length;\n  return {\n    schema: c.schema,\n    __array: void 0,\n    isDefined: c.isDefined,\n    rowCount: rowCount,\n    value: value,\n    valueKind: function (row) {\n      return vk(map[row]);\n    },\n    toArray: function (params) {\n      var array = ColumnHelpers.createArray(rowCount, params).array;\n\n      for (var i = 0, _i = array.length; i < _i; i++) array[i] = v(map[i]);\n\n      return array;\n    },\n    areValuesEqual: function (rowA, rowB) {\n      return ave(map[rowA], map[rowB]);\n    }\n  };\n}\n\nfunction mapToArrayImpl(c, f, ctor) {\n  var ret = new ctor(c.rowCount);\n\n  for (var i = 0, _i = c.rowCount; i < _i; i++) ret[i] = f(c.value(i));\n\n  return ret;\n}\n\nfunction areColumnsEqual(a, b) {\n  if (a === b) return true;\n  if (a.rowCount !== b.rowCount || a.isDefined !== b.isDefined || a.schema.valueType !== b.schema.valueType) return false;\n  if (!!a.__array && !!b.__array) return areArraysEqual(a, b);\n  return areValuesEqual(a, b);\n}\n\nfunction areArraysEqual(a, b) {\n  var xs = a.__array,\n      ys = b.__array;\n\n  for (var i = 0, _i = a.rowCount; i < _i; i++) {\n    if (xs[i] !== ys[i]) return false;\n  }\n\n  return true;\n}\n\nfunction areValuesEqual(a, b) {\n  var va = a.value,\n      vb = b.value;\n\n  for (var i = 0, _i = a.rowCount; i < _i; i++) {\n    if (va(i) !== vb(i)) return false;\n  }\n\n  return true;\n}\n\nfunction columnIndicesOf(c, test) {\n  var ret = [],\n      v = c.value;\n\n  for (var i = 0, _i = c.rowCount; i < _i; i++) {\n    if (test(v(i))) ret[ret.length] = i;\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["../../../src/mol-data/db/column.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport * as ColumnHelpers from './column-helpers';\r\nimport { Tensor as Tensors } from '../../mol-math/linear-algebra';\r\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../../mol-io/reader/common/text/number-parser';\r\nvar Column;\r\n(function (Column) {\r\n    var Schema;\r\n    (function (Schema) {\r\n        // T also serves as a default value for undefined columns\r\n        Schema.str = { '@type': 'str', T: '', valueType: 'str' };\r\n        Schema.int = { '@type': 'int', T: 0, valueType: 'int' };\r\n        Schema.coord = { '@type': 'coord', T: 0, valueType: 'float' };\r\n        Schema.float = { '@type': 'float', T: 0, valueType: 'float' };\r\n        function Str(defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = ''; }\r\n            return { '@type': 'str', T: defaultValue, valueType: 'str' };\r\n        }\r\n        Schema.Str = Str;\r\n        ;\r\n        function Int(defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return { '@type': 'int', T: defaultValue, valueType: 'int' };\r\n        }\r\n        Schema.Int = Int;\r\n        ;\r\n        function Float(defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return { '@type': 'float', T: defaultValue, valueType: 'float' };\r\n        }\r\n        Schema.Float = Float;\r\n        ;\r\n        function Tensor(space, baseType) {\r\n            if (baseType === void 0) { baseType = Schema.float; }\r\n            return { '@type': 'tensor', T: space.create(), space: space, valueType: 'tensor', baseType: baseType };\r\n        }\r\n        Schema.Tensor = Tensor;\r\n        function Vector(dim, baseType) {\r\n            if (baseType === void 0) { baseType = Schema.float; }\r\n            return Tensor(Tensors.Vector(dim, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType);\r\n        }\r\n        Schema.Vector = Vector;\r\n        function Matrix(rows, cols, baseType) {\r\n            if (baseType === void 0) { baseType = Schema.float; }\r\n            return Tensor(Tensors.ColumnMajorMatrix(rows, cols, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType);\r\n        }\r\n        Schema.Matrix = Matrix;\r\n        function Aliased(t, defaultValue) {\r\n            if (typeof defaultValue !== 'undefined')\r\n                return __assign(__assign({}, t), { T: defaultValue });\r\n            return t;\r\n        }\r\n        Schema.Aliased = Aliased;\r\n        function List(separator, itemParse, defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = []; }\r\n            return { '@type': 'list', T: defaultValue, separator: separator, itemParse: itemParse, valueType: 'list' };\r\n        }\r\n        Schema.List = List;\r\n    })(Schema = Column.Schema || (Column.Schema = {}));\r\n    function is(v) {\r\n        return !!v && !!v.schema && !!v.value;\r\n    }\r\n    Column.is = is;\r\n    function Undefined(rowCount, schema) {\r\n        return constColumn(schema['T'], rowCount, schema, 1 /* NotPresent */);\r\n    }\r\n    Column.Undefined = Undefined;\r\n    function ofConst(v, rowCount, type) {\r\n        return constColumn(v, rowCount, type, 0 /* Present */);\r\n    }\r\n    Column.ofConst = ofConst;\r\n    function ofLambda(spec) {\r\n        return lambdaColumn(spec);\r\n    }\r\n    Column.ofLambda = ofLambda;\r\n    /** values [min, max] (i.e. include both values) */\r\n    function range(min, max) {\r\n        return ofLambda({\r\n            value: function (i) { return i + min; },\r\n            rowCount: Math.max(max - min + 1, 0),\r\n            schema: Schema.int\r\n        });\r\n    }\r\n    Column.range = range;\r\n    function ofArray(spec) {\r\n        return arrayColumn(spec);\r\n    }\r\n    Column.ofArray = ofArray;\r\n    function ofIntArray(array) {\r\n        return arrayColumn({ array: array, schema: Schema.int });\r\n    }\r\n    Column.ofIntArray = ofIntArray;\r\n    function ofFloatArray(array) {\r\n        return arrayColumn({ array: array, schema: Schema.float });\r\n    }\r\n    Column.ofFloatArray = ofFloatArray;\r\n    function ofStringArray(array) {\r\n        return arrayColumn({ array: array, schema: Schema.str });\r\n    }\r\n    Column.ofStringArray = ofStringArray;\r\n    function ofStringAliasArray(array) {\r\n        return arrayColumn({ array: array, schema: Schema.Aliased(Schema.str) });\r\n    }\r\n    Column.ofStringAliasArray = ofStringAliasArray;\r\n    function ofStringListArray(array, separator) {\r\n        if (separator === void 0) { separator = ','; }\r\n        return arrayColumn({ array: array, schema: Schema.List(separator, function (x) { return x; }) });\r\n    }\r\n    Column.ofStringListArray = ofStringListArray;\r\n    function ofIntTokens(tokens) {\r\n        var count = tokens.count, data = tokens.data, indices = tokens.indices;\r\n        return lambdaColumn({\r\n            value: function (row) { return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0; },\r\n            rowCount: count,\r\n            schema: Schema.int,\r\n        });\r\n    }\r\n    Column.ofIntTokens = ofIntTokens;\r\n    function ofFloatTokens(tokens) {\r\n        var count = tokens.count, data = tokens.data, indices = tokens.indices;\r\n        return lambdaColumn({\r\n            value: function (row) { return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0; },\r\n            rowCount: count,\r\n            schema: Schema.float,\r\n        });\r\n    }\r\n    Column.ofFloatTokens = ofFloatTokens;\r\n    function ofStringTokens(tokens) {\r\n        var count = tokens.count, data = tokens.data, indices = tokens.indices;\r\n        return lambdaColumn({\r\n            value: function (row) {\r\n                var ret = data.substring(indices[2 * row], indices[2 * row + 1]);\r\n                if (ret === '.' || ret === '?')\r\n                    return '';\r\n                return ret;\r\n            },\r\n            rowCount: count,\r\n            schema: Schema.str,\r\n        });\r\n    }\r\n    Column.ofStringTokens = ofStringTokens;\r\n    function window(column, start, end) {\r\n        return windowColumn(column, start, end);\r\n    }\r\n    Column.window = window;\r\n    function view(column, indices, checkIndentity) {\r\n        if (checkIndentity === void 0) { checkIndentity = true; }\r\n        return columnView(column, indices, checkIndentity);\r\n    }\r\n    Column.view = view;\r\n    /** A map of the 1st occurence of each value. */\r\n    function createFirstIndexMap(column) {\r\n        return createFirstIndexMapOfColumn(column);\r\n    }\r\n    Column.createFirstIndexMap = createFirstIndexMap;\r\n    function createIndexer(column) {\r\n        return createIndexerOfColumn(column);\r\n    }\r\n    Column.createIndexer = createIndexer;\r\n    function mapToArray(column, f, ctor) {\r\n        return mapToArrayImpl(column, f, ctor || Array);\r\n    }\r\n    Column.mapToArray = mapToArray;\r\n    function areEqual(a, b) {\r\n        return areColumnsEqual(a, b);\r\n    }\r\n    Column.areEqual = areEqual;\r\n    function indicesOf(c, test) {\r\n        return columnIndicesOf(c, test);\r\n    }\r\n    Column.indicesOf = indicesOf;\r\n    /** Makes the column backed by an array. Useful for columns that are accessed often. */\r\n    function asArrayColumn(c, array) {\r\n        if (c.__array)\r\n            return c;\r\n        if (!c.isDefined)\r\n            return Undefined(c.rowCount, c.schema);\r\n        return arrayColumn({ array: c.toArray({ array: array }), schema: c.schema, valueKind: c.valueKind });\r\n    }\r\n    Column.asArrayColumn = asArrayColumn;\r\n    function copyToArray(c, array, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        if (!c.isDefined)\r\n            return;\r\n        var cArray = c.__array;\r\n        if (cArray) {\r\n            for (var i = 0, _i = cArray.length; i < _i; i++)\r\n                array[offset + i] = cArray[i];\r\n        }\r\n        else {\r\n            for (var i = 0, _i = c.rowCount; i < _i; i++)\r\n                array[offset + i] = c.value(i);\r\n        }\r\n    }\r\n    Column.copyToArray = copyToArray;\r\n    function isIdentity(c) {\r\n        for (var i = 0, _i = c.rowCount; i < _i; i++) {\r\n            if (i !== c.value(i))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Column.isIdentity = isIdentity;\r\n})(Column || (Column = {}));\r\nexport { Column };\r\nfunction createFirstIndexMapOfColumn(c) {\r\n    var map = new Map();\r\n    for (var i = 0, _i = c.rowCount; i < _i; i++) {\r\n        var v = c.value(i);\r\n        if (!map.has(v))\r\n            map.set(c.value(i), i);\r\n    }\r\n    return map;\r\n}\r\nfunction createIndexerOfColumn(c) {\r\n    var map = new Map();\r\n    for (var i = 0, _i = c.rowCount; i < _i; i++) {\r\n        var v = c.value(i);\r\n        if (!map.has(v))\r\n            map.set(c.value(i), i);\r\n    }\r\n    return function (v) { return map.has(v) ? map.get(v) : -1; };\r\n}\r\nfunction constColumn(v, rowCount, schema, valueKind) {\r\n    var value = function (row) { return v; };\r\n    return {\r\n        schema: schema,\r\n        __array: void 0,\r\n        isDefined: valueKind === 0 /* Present */,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: function (row) { return valueKind; },\r\n        toArray: function (params) {\r\n            var array = ColumnHelpers.createArray(rowCount, params).array;\r\n            for (var i = 0, _i = array.length; i < _i; i++)\r\n                array[i] = v;\r\n            return array;\r\n        },\r\n        areValuesEqual: function (rowA, rowB) { return true; }\r\n    };\r\n}\r\nfunction lambdaColumn(_a) {\r\n    var value = _a.value, valueKind = _a.valueKind, areValuesEqual = _a.areValuesEqual, rowCount = _a.rowCount, schema = _a.schema;\r\n    return {\r\n        schema: schema,\r\n        __array: void 0,\r\n        isDefined: true,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: valueKind ? valueKind : function (row) { return 0 /* Present */; },\r\n        toArray: function (params) {\r\n            var _a = ColumnHelpers.createArray(rowCount, params), array = _a.array, start = _a.start;\r\n            for (var i = 0, _i = array.length; i < _i; i++)\r\n                array[i] = value(i + start);\r\n            return array;\r\n        },\r\n        areValuesEqual: areValuesEqual ? areValuesEqual : function (rowA, rowB) { return value(rowA) === value(rowB); }\r\n    };\r\n}\r\nfunction arrayColumn(_a) {\r\n    var array = _a.array, schema = _a.schema, valueKind = _a.valueKind;\r\n    var rowCount = array.length;\r\n    var value = schema.valueType === 'str'\r\n        ? function (row) { var v = array[row]; return typeof v === 'string' ? v : '' + v; }\r\n        : function (row) { return array[row]; };\r\n    var isTyped = ColumnHelpers.isTypedArray(array);\r\n    return {\r\n        schema: schema,\r\n        __array: array,\r\n        isDefined: true,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: valueKind ? valueKind : function (row) { return 0 /* Present */; },\r\n        toArray: schema.valueType === 'str'\r\n            ? function (params) {\r\n                var _a = ColumnHelpers.getArrayBounds(rowCount, params), start = _a.start, end = _a.end;\r\n                var ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);\r\n                for (var i = 0, _i = end - start; i < _i; i++) {\r\n                    var v = array[start + i];\r\n                    ret[i] = typeof v === 'string' ? v : '' + v;\r\n                }\r\n                return ret;\r\n            }\r\n            : isTyped\r\n                ? function (params) { return ColumnHelpers.typedArrayWindow(array, params); }\r\n                : function (params) {\r\n                    var _a = ColumnHelpers.getArrayBounds(rowCount, params), start = _a.start, end = _a.end;\r\n                    if (start === 0 && end === array.length)\r\n                        return array;\r\n                    var ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);\r\n                    for (var i = 0, _i = end - start; i < _i; i++)\r\n                        ret[i] = array[start + i];\r\n                    return ret;\r\n                },\r\n        areValuesEqual: function (rowA, rowB) { return array[rowA] === array[rowB]; }\r\n    };\r\n}\r\nfunction windowColumn(column, start, end) {\r\n    if (!column.isDefined)\r\n        return Column.Undefined(end - start, column.schema);\r\n    if (start === 0 && end === column.rowCount)\r\n        return column;\r\n    if (!!column.__array && ColumnHelpers.isTypedArray(column.__array))\r\n        return windowTyped(column, start, end);\r\n    return windowFull(column, start, end);\r\n}\r\nfunction windowTyped(c, start, end) {\r\n    var array = ColumnHelpers.typedArrayWindow(c.__array, { start: start, end: end });\r\n    var vk = c.valueKind;\r\n    return arrayColumn({ array: array, schema: c.schema, valueKind: function (row) { return vk(start + row); } });\r\n}\r\nfunction windowFull(c, start, end) {\r\n    var v = c.value, vk = c.valueKind, ave = c.areValuesEqual;\r\n    var value = start === 0 ? v : function (row) { return v(row + start); };\r\n    var rowCount = end - start;\r\n    return {\r\n        schema: c.schema,\r\n        __array: void 0,\r\n        isDefined: c.isDefined,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: start === 0 ? vk : function (row) { return vk(row + start); },\r\n        toArray: function (params) {\r\n            var array = ColumnHelpers.createArray(rowCount, params).array;\r\n            for (var i = 0, _i = array.length; i < _i; i++)\r\n                array[i] = v(i + start);\r\n            return array;\r\n        },\r\n        areValuesEqual: start === 0 ? ave : function (rowA, rowB) { return ave(rowA + start, rowB + start); }\r\n    };\r\n}\r\nfunction isIdentity(map, rowCount) {\r\n    if (map.length !== rowCount)\r\n        return false;\r\n    for (var i = 0, _i = map.length; i < _i; i++) {\r\n        if (map[i] !== i)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction columnView(c, map, checkIdentity) {\r\n    if (c.rowCount === 0)\r\n        return c;\r\n    if (checkIdentity && isIdentity(map, c.rowCount))\r\n        return c;\r\n    if (!!c.__array && typeof c.value(0) === typeof c.__array[0])\r\n        return arrayView(c, map);\r\n    return viewFull(c, map);\r\n}\r\nfunction arrayView(c, map) {\r\n    var array = c.__array;\r\n    var ret = new array.constructor(map.length);\r\n    for (var i = 0, _i = map.length; i < _i; i++)\r\n        ret[i] = array[map[i]];\r\n    var vk = c.valueKind;\r\n    return arrayColumn({ array: ret, schema: c.schema, valueKind: function (row) { return vk(map[row]); } });\r\n}\r\nfunction viewFull(c, map) {\r\n    var v = c.value, vk = c.valueKind, ave = c.areValuesEqual;\r\n    var value = function (row) { return v(map[row]); };\r\n    var rowCount = map.length;\r\n    return {\r\n        schema: c.schema,\r\n        __array: void 0,\r\n        isDefined: c.isDefined,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: function (row) { return vk(map[row]); },\r\n        toArray: function (params) {\r\n            var array = ColumnHelpers.createArray(rowCount, params).array;\r\n            for (var i = 0, _i = array.length; i < _i; i++)\r\n                array[i] = v(map[i]);\r\n            return array;\r\n        },\r\n        areValuesEqual: function (rowA, rowB) { return ave(map[rowA], map[rowB]); }\r\n    };\r\n}\r\nfunction mapToArrayImpl(c, f, ctor) {\r\n    var ret = new ctor(c.rowCount);\r\n    for (var i = 0, _i = c.rowCount; i < _i; i++)\r\n        ret[i] = f(c.value(i));\r\n    return ret;\r\n}\r\nfunction areColumnsEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    if (a.rowCount !== b.rowCount || a.isDefined !== b.isDefined || a.schema.valueType !== b.schema.valueType)\r\n        return false;\r\n    if (!!a.__array && !!b.__array)\r\n        return areArraysEqual(a, b);\r\n    return areValuesEqual(a, b);\r\n}\r\nfunction areArraysEqual(a, b) {\r\n    var xs = a.__array, ys = b.__array;\r\n    for (var i = 0, _i = a.rowCount; i < _i; i++) {\r\n        if (xs[i] !== ys[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction areValuesEqual(a, b) {\r\n    var va = a.value, vb = b.value;\r\n    for (var i = 0, _i = a.rowCount; i < _i; i++) {\r\n        if (va(i) !== vb(i))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction columnIndicesOf(c, test) {\r\n    var ret = [], v = c.value;\r\n    for (var i = 0, _i = c.rowCount; i < _i; i++) {\r\n        if (test(v(i)))\r\n            ret[ret.length] = i;\r\n    }\r\n    return ret;\r\n}\r\n//# sourceMappingURL=column.js.map"]},"metadata":{},"sourceType":"module"}