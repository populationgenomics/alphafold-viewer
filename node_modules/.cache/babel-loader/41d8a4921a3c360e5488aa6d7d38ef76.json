{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Color, ColorScale } from '../../../mol-util/color';\nimport { Bond, StructureElement, Unit } from '../../../mol-model/structure';\nimport { AccessibleSurfaceAreaProvider } from '../accessible-surface-area';\nimport { AccessibleSurfaceArea } from '../accessible-surface-area/shrake-rupley';\nimport { hash2 } from '../../../mol-data/util';\nvar DefaultColor = Color(0xFAFAFA);\nvar Description = 'Assigns a color based on the relative accessible surface area of a residue.';\nexport var AccessibleSurfaceAreaColorThemeParams = {\n  list: PD.ColorList('rainbow', {\n    presetKind: 'scale'\n  })\n};\nexport function getAccessibleSurfaceAreaColorThemeParams(ctx) {\n  return AccessibleSurfaceAreaColorThemeParams; // TODO return copy\n}\nexport function AccessibleSurfaceAreaColorTheme(ctx, props) {\n  var color;\n  var scale = ColorScale.create({\n    listOrName: props.list.colors,\n    minLabel: 'buried',\n    maxLabel: 'exposed',\n    domain: [0.0, 1.0]\n  });\n  var accessibleSurfaceArea = ctx.structure && AccessibleSurfaceAreaProvider.get(ctx.structure);\n  var contextHash = accessibleSurfaceArea ? hash2(accessibleSurfaceArea.id, accessibleSurfaceArea.version) : -1;\n\n  if ((accessibleSurfaceArea === null || accessibleSurfaceArea === void 0 ? void 0 : accessibleSurfaceArea.value) && ctx.structure) {\n    var l_1 = StructureElement.Location.create(ctx.structure);\n    var asa_1 = accessibleSurfaceArea.value;\n\n    var getColor_1 = function (location) {\n      var value = AccessibleSurfaceArea.getNormalizedValue(location, asa_1);\n      return value === -1 ? DefaultColor : scale.color(value);\n    };\n\n    color = function (location) {\n      if (StructureElement.Location.is(location) && Unit.isAtomic(location.unit)) {\n        return getColor_1(location);\n      } else if (Bond.isLocation(location)) {\n        l_1.unit = location.aUnit;\n        l_1.element = location.aUnit.elements[location.aIndex];\n        return getColor_1(l_1);\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: AccessibleSurfaceAreaColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    contextHash: contextHash,\n    description: Description,\n    legend: scale ? scale.legend : undefined\n  };\n}\nexport var AccessibleSurfaceAreaColorThemeProvider = {\n  name: 'accessible-surface-area',\n  label: 'Accessible Surface Area',\n  category: \"Residue Property\"\n  /* Residue */\n  ,\n  factory: AccessibleSurfaceAreaColorTheme,\n  getParams: getAccessibleSurfaceAreaColorThemeParams,\n  defaultValues: PD.getDefaultValues(AccessibleSurfaceAreaColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  },\n  ensureCustomProperties: {\n    attach: function (ctx, data) {\n      return data.structure ? AccessibleSurfaceAreaProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve();\n    },\n    detach: function (data) {\n      return data.structure && AccessibleSurfaceAreaProvider.ref(data.structure, false);\n    }\n  }\n};","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/themes/accessible-surface-area.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Color, ColorScale } from '../../../mol-util/color';\r\nimport { Bond, StructureElement, Unit } from '../../../mol-model/structure';\r\nimport { AccessibleSurfaceAreaProvider } from '../accessible-surface-area';\r\nimport { AccessibleSurfaceArea } from '../accessible-surface-area/shrake-rupley';\r\nimport { hash2 } from '../../../mol-data/util';\r\nvar DefaultColor = Color(0xFAFAFA);\r\nvar Description = 'Assigns a color based on the relative accessible surface area of a residue.';\r\nexport var AccessibleSurfaceAreaColorThemeParams = {\r\n    list: PD.ColorList('rainbow', { presetKind: 'scale' })\r\n};\r\nexport function getAccessibleSurfaceAreaColorThemeParams(ctx) {\r\n    return AccessibleSurfaceAreaColorThemeParams; // TODO return copy\r\n}\r\nexport function AccessibleSurfaceAreaColorTheme(ctx, props) {\r\n    var color;\r\n    var scale = ColorScale.create({\r\n        listOrName: props.list.colors,\r\n        minLabel: 'buried',\r\n        maxLabel: 'exposed',\r\n        domain: [0.0, 1.0]\r\n    });\r\n    var accessibleSurfaceArea = ctx.structure && AccessibleSurfaceAreaProvider.get(ctx.structure);\r\n    var contextHash = accessibleSurfaceArea ? hash2(accessibleSurfaceArea.id, accessibleSurfaceArea.version) : -1;\r\n    if ((accessibleSurfaceArea === null || accessibleSurfaceArea === void 0 ? void 0 : accessibleSurfaceArea.value) && ctx.structure) {\r\n        var l_1 = StructureElement.Location.create(ctx.structure);\r\n        var asa_1 = accessibleSurfaceArea.value;\r\n        var getColor_1 = function (location) {\r\n            var value = AccessibleSurfaceArea.getNormalizedValue(location, asa_1);\r\n            return value === -1 ? DefaultColor : scale.color(value);\r\n        };\r\n        color = function (location) {\r\n            if (StructureElement.Location.is(location) && Unit.isAtomic(location.unit)) {\r\n                return getColor_1(location);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                l_1.unit = location.aUnit;\r\n                l_1.element = location.aUnit.elements[location.aIndex];\r\n                return getColor_1(l_1);\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: AccessibleSurfaceAreaColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        contextHash: contextHash,\r\n        description: Description,\r\n        legend: scale ? scale.legend : undefined\r\n    };\r\n}\r\nexport var AccessibleSurfaceAreaColorThemeProvider = {\r\n    name: 'accessible-surface-area',\r\n    label: 'Accessible Surface Area',\r\n    category: \"Residue Property\" /* Residue */,\r\n    factory: AccessibleSurfaceAreaColorTheme,\r\n    getParams: getAccessibleSurfaceAreaColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(AccessibleSurfaceAreaColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; },\r\n    ensureCustomProperties: {\r\n        attach: function (ctx, data) { return data.structure ? AccessibleSurfaceAreaProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve(); },\r\n        detach: function (data) { return data.structure && AccessibleSurfaceAreaProvider.ref(data.structure, false); }\r\n    }\r\n};\r\n//# sourceMappingURL=accessible-surface-area.js.map"]},"metadata":{},"sourceType":"module"}