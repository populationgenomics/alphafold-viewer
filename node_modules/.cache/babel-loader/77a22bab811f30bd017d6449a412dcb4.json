{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { OrderedSet, SortedArray, Interval } from '../int';\nvar SortedRanges;\n\n(function (SortedRanges) {\n  function ofSortedRanges(array) {\n    return SortedArray.ofSortedArray(array);\n  }\n\n  SortedRanges.ofSortedRanges = ofSortedRanges;\n\n  function start(ranges) {\n    return ranges[0];\n  }\n\n  SortedRanges.start = start;\n\n  function end(ranges) {\n    return ranges[ranges.length - 1] + 1;\n  }\n\n  SortedRanges.end = end;\n\n  function min(ranges) {\n    return ranges[0];\n  }\n\n  SortedRanges.min = min;\n\n  function max(ranges) {\n    return ranges[ranges.length - 1];\n  }\n\n  SortedRanges.max = max;\n\n  function size(ranges) {\n    var size = 0;\n\n    for (var i = 0, il = ranges.length; i < il; i += 2) {\n      size += ranges[i + 1] - ranges[i] + 1;\n    }\n\n    return size;\n  }\n\n  SortedRanges.size = size;\n\n  function count(ranges) {\n    return ranges.length / 2;\n  }\n\n  SortedRanges.count = count;\n\n  function startAt(ranges, index) {\n    return ranges[index * 2];\n  }\n\n  SortedRanges.startAt = startAt;\n\n  function endAt(ranges, index) {\n    return ranges[index * 2 + 1] + 1;\n  }\n\n  SortedRanges.endAt = endAt;\n\n  function minAt(ranges, index) {\n    return ranges[index * 2];\n  }\n\n  SortedRanges.minAt = minAt;\n\n  function maxAt(ranges, index) {\n    return ranges[index * 2 + 1];\n  }\n\n  SortedRanges.maxAt = maxAt;\n\n  function areEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (var i = 0, il = a.length; i < il; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  SortedRanges.areEqual = areEqual;\n\n  function forEach(ranges, f) {\n    var k = 0;\n\n    for (var i = 0, il = ranges.length; i < il; i += 2) {\n      for (var j = ranges[i], jl = ranges[i + 1]; j <= jl; ++j) {\n        f(j, k);\n        ++k;\n      }\n    }\n  }\n\n  SortedRanges.forEach = forEach;\n  /** Returns if a value of `set` is included in `ranges` */\n\n  function has(ranges, set) {\n    return firstIntersectionIndex(ranges, set) !== -1;\n  }\n\n  SortedRanges.has = has;\n  /** Returns if a value of `set` is included in `ranges` from given index */\n\n  function hasFrom(ranges, set, from) {\n    return firstIntersectionIndexFrom(ranges, set, from) !== -1;\n  }\n\n  SortedRanges.hasFrom = hasFrom;\n\n  function firstIntersectionIndex(ranges, set) {\n    return firstIntersectionIndexFrom(ranges, set, 0);\n  }\n\n  SortedRanges.firstIntersectionIndex = firstIntersectionIndex;\n\n  function firstIntersectionIndexFrom(ranges, set, from) {\n    if (minAt(ranges, from) > OrderedSet.max(set) || max(ranges) < OrderedSet.min(set)) return -1;\n\n    for (var i = from, il = count(ranges); i < il; ++i) {\n      var interval = Interval.ofRange(minAt(ranges, i), maxAt(ranges, i));\n      if (OrderedSet.areIntersecting(interval, set)) return i;\n    }\n\n    return -1;\n  }\n\n  SortedRanges.firstIntersectionIndexFrom = firstIntersectionIndexFrom;\n\n  function transientSegments(ranges, set) {\n    return new Iterator(ranges, set);\n  }\n\n  SortedRanges.transientSegments = transientSegments;\n\n  var Iterator =\n  /** @class */\n  function () {\n    function Iterator(ranges, set) {\n      this.ranges = ranges;\n      this.set = set;\n      this.value = {\n        index: 0,\n        start: 0,\n        end: 0\n      };\n      this.curIndex = 0;\n      this.hasNext = false;\n      this.curIndex = firstIntersectionIndex(ranges, set);\n      this.hasNext = this.curIndex !== -1;\n    }\n\n    Iterator.prototype.updateValue = function () {\n      this.value.index = this.curIndex;\n      this.value.start = OrderedSet.findPredecessorIndex(this.set, startAt(this.ranges, this.curIndex));\n      this.value.end = OrderedSet.findPredecessorIndex(this.set, endAt(this.ranges, this.curIndex));\n    };\n\n    Iterator.prototype.move = function () {\n      if (this.hasNext) {\n        this.updateValue();\n        this.curIndex = firstIntersectionIndexFrom(this.ranges, this.set, this.curIndex + 1);\n        this.hasNext = this.curIndex !== -1;\n      }\n\n      return this.value;\n    };\n\n    return Iterator;\n  }();\n\n  SortedRanges.Iterator = Iterator;\n})(SortedRanges || (SortedRanges = {}));\n\nexport { SortedRanges };","map":{"version":3,"sources":["../../../src/mol-data/int/sorted-ranges.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { OrderedSet, SortedArray, Interval } from '../int';\r\nvar SortedRanges;\r\n(function (SortedRanges) {\r\n    function ofSortedRanges(array) { return SortedArray.ofSortedArray(array); }\r\n    SortedRanges.ofSortedRanges = ofSortedRanges;\r\n    function start(ranges) { return ranges[0]; }\r\n    SortedRanges.start = start;\r\n    function end(ranges) { return ranges[ranges.length - 1] + 1; }\r\n    SortedRanges.end = end;\r\n    function min(ranges) { return ranges[0]; }\r\n    SortedRanges.min = min;\r\n    function max(ranges) { return ranges[ranges.length - 1]; }\r\n    SortedRanges.max = max;\r\n    function size(ranges) {\r\n        var size = 0;\r\n        for (var i = 0, il = ranges.length; i < il; i += 2) {\r\n            size += ranges[i + 1] - ranges[i] + 1;\r\n        }\r\n        return size;\r\n    }\r\n    SortedRanges.size = size;\r\n    function count(ranges) { return ranges.length / 2; }\r\n    SortedRanges.count = count;\r\n    function startAt(ranges, index) {\r\n        return ranges[index * 2];\r\n    }\r\n    SortedRanges.startAt = startAt;\r\n    function endAt(ranges, index) {\r\n        return ranges[index * 2 + 1] + 1;\r\n    }\r\n    SortedRanges.endAt = endAt;\r\n    function minAt(ranges, index) {\r\n        return ranges[index * 2];\r\n    }\r\n    SortedRanges.minAt = minAt;\r\n    function maxAt(ranges, index) {\r\n        return ranges[index * 2 + 1];\r\n    }\r\n    SortedRanges.maxAt = maxAt;\r\n    function areEqual(a, b) {\r\n        if (a.length !== b.length)\r\n            return false;\r\n        for (var i = 0, il = a.length; i < il; ++i) {\r\n            if (a[i] !== b[i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    SortedRanges.areEqual = areEqual;\r\n    function forEach(ranges, f) {\r\n        var k = 0;\r\n        for (var i = 0, il = ranges.length; i < il; i += 2) {\r\n            for (var j = ranges[i], jl = ranges[i + 1]; j <= jl; ++j) {\r\n                f(j, k);\r\n                ++k;\r\n            }\r\n        }\r\n    }\r\n    SortedRanges.forEach = forEach;\r\n    /** Returns if a value of `set` is included in `ranges` */\r\n    function has(ranges, set) {\r\n        return firstIntersectionIndex(ranges, set) !== -1;\r\n    }\r\n    SortedRanges.has = has;\r\n    /** Returns if a value of `set` is included in `ranges` from given index */\r\n    function hasFrom(ranges, set, from) {\r\n        return firstIntersectionIndexFrom(ranges, set, from) !== -1;\r\n    }\r\n    SortedRanges.hasFrom = hasFrom;\r\n    function firstIntersectionIndex(ranges, set) {\r\n        return firstIntersectionIndexFrom(ranges, set, 0);\r\n    }\r\n    SortedRanges.firstIntersectionIndex = firstIntersectionIndex;\r\n    function firstIntersectionIndexFrom(ranges, set, from) {\r\n        if (minAt(ranges, from) > OrderedSet.max(set) || max(ranges) < OrderedSet.min(set))\r\n            return -1;\r\n        for (var i = from, il = count(ranges); i < il; ++i) {\r\n            var interval = Interval.ofRange(minAt(ranges, i), maxAt(ranges, i));\r\n            if (OrderedSet.areIntersecting(interval, set))\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n    SortedRanges.firstIntersectionIndexFrom = firstIntersectionIndexFrom;\r\n    function transientSegments(ranges, set) {\r\n        return new Iterator(ranges, set);\r\n    }\r\n    SortedRanges.transientSegments = transientSegments;\r\n    var Iterator = /** @class */ (function () {\r\n        function Iterator(ranges, set) {\r\n            this.ranges = ranges;\r\n            this.set = set;\r\n            this.value = { index: 0, start: 0, end: 0 };\r\n            this.curIndex = 0;\r\n            this.hasNext = false;\r\n            this.curIndex = firstIntersectionIndex(ranges, set);\r\n            this.hasNext = this.curIndex !== -1;\r\n        }\r\n        Iterator.prototype.updateValue = function () {\r\n            this.value.index = this.curIndex;\r\n            this.value.start = OrderedSet.findPredecessorIndex(this.set, startAt(this.ranges, this.curIndex));\r\n            this.value.end = OrderedSet.findPredecessorIndex(this.set, endAt(this.ranges, this.curIndex));\r\n        };\r\n        Iterator.prototype.move = function () {\r\n            if (this.hasNext) {\r\n                this.updateValue();\r\n                this.curIndex = firstIntersectionIndexFrom(this.ranges, this.set, this.curIndex + 1);\r\n                this.hasNext = this.curIndex !== -1;\r\n            }\r\n            return this.value;\r\n        };\r\n        return Iterator;\r\n    }());\r\n    SortedRanges.Iterator = Iterator;\r\n})(SortedRanges || (SortedRanges = {}));\r\nexport { SortedRanges };\r\n//# sourceMappingURL=sorted-ranges.js.map"]},"metadata":{},"sourceType":"module"}