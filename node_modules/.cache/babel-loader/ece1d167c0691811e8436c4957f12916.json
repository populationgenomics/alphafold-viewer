{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Mat4, Tensor } from '../../mol-math/linear-algebra';\nimport { Task } from '../../mol-task';\nimport { arrayMax, arrayMean, arrayMin, arrayRms } from '../../mol-util/array';\nimport { CustomProperties } from '../../mol-model/custom-property';\nexport function volumeFromDx(source, params) {\n  var _this = this;\n\n  return Task.create('Create Volume', function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var header, values, space, data, matrix, basis;\n      return __generator(this, function (_a) {\n        header = source.header, values = source.values;\n        space = Tensor.Space(header.dim, [0, 1, 2], Float64Array);\n        data = Tensor.create(space, Tensor.Data1(values));\n        matrix = Mat4.fromTranslation(Mat4(), header.min);\n        basis = Mat4.fromScaling(Mat4(), header.h);\n        Mat4.mul(matrix, matrix, basis);\n        return [2\n        /*return*/\n        , {\n          label: params === null || params === void 0 ? void 0 : params.label,\n          entryId: params === null || params === void 0 ? void 0 : params.entryId,\n          grid: {\n            transform: {\n              kind: 'matrix',\n              matrix: matrix\n            },\n            cells: data,\n            stats: {\n              min: arrayMin(values),\n              max: arrayMax(values),\n              mean: arrayMean(values),\n              sigma: arrayRms(values)\n            }\n          },\n          sourceData: DxFormat.create(source),\n          customProperties: new CustomProperties(),\n          _propertyData: Object.create(null)\n        }];\n      });\n    });\n  });\n} //\n\nexport { DxFormat };\nvar DxFormat;\n\n(function (DxFormat) {\n  function is(x) {\n    return (x === null || x === void 0 ? void 0 : x.kind) === 'dx';\n  }\n\n  DxFormat.is = is;\n\n  function create(dx) {\n    return {\n      kind: 'dx',\n      name: dx.name,\n      data: dx\n    };\n  }\n\n  DxFormat.create = create;\n})(DxFormat || (DxFormat = {}));","map":{"version":3,"sources":["../../../src/mol-model-formats/volume/dx.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Mat4, Tensor } from '../../mol-math/linear-algebra';\r\nimport { Task } from '../../mol-task';\r\nimport { arrayMax, arrayMean, arrayMin, arrayRms } from '../../mol-util/array';\r\nimport { CustomProperties } from '../../mol-model/custom-property';\r\nexport function volumeFromDx(source, params) {\r\n    var _this = this;\r\n    return Task.create('Create Volume', function () { return __awaiter(_this, void 0, void 0, function () {\r\n        var header, values, space, data, matrix, basis;\r\n        return __generator(this, function (_a) {\r\n            header = source.header, values = source.values;\r\n            space = Tensor.Space(header.dim, [0, 1, 2], Float64Array);\r\n            data = Tensor.create(space, Tensor.Data1(values));\r\n            matrix = Mat4.fromTranslation(Mat4(), header.min);\r\n            basis = Mat4.fromScaling(Mat4(), header.h);\r\n            Mat4.mul(matrix, matrix, basis);\r\n            return [2 /*return*/, {\r\n                    label: params === null || params === void 0 ? void 0 : params.label,\r\n                    entryId: params === null || params === void 0 ? void 0 : params.entryId,\r\n                    grid: {\r\n                        transform: { kind: 'matrix', matrix: matrix },\r\n                        cells: data,\r\n                        stats: {\r\n                            min: arrayMin(values),\r\n                            max: arrayMax(values),\r\n                            mean: arrayMean(values),\r\n                            sigma: arrayRms(values)\r\n                        },\r\n                    },\r\n                    sourceData: DxFormat.create(source),\r\n                    customProperties: new CustomProperties(),\r\n                    _propertyData: Object.create(null),\r\n                }];\r\n        });\r\n    }); });\r\n}\r\n//\r\nexport { DxFormat };\r\nvar DxFormat;\r\n(function (DxFormat) {\r\n    function is(x) {\r\n        return (x === null || x === void 0 ? void 0 : x.kind) === 'dx';\r\n    }\r\n    DxFormat.is = is;\r\n    function create(dx) {\r\n        return { kind: 'dx', name: dx.name, data: dx };\r\n    }\r\n    DxFormat.create = create;\r\n})(DxFormat || (DxFormat = {}));\r\n//# sourceMappingURL=dx.js.map"]},"metadata":{},"sourceType":"module"}