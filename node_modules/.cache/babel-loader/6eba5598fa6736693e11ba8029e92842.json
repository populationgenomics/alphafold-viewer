{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { getInstancedArrays, getStandardDerivatives, getVertexArrayObject, getElementIndexUint, getTextureFloat, getTextureFloatLinear, getBlendMinMax, getFragDepth, getColorBufferFloat, getDrawBuffers, getShaderTextureLod, getDepthTexture, getSRGB, getTextureHalfFloat, getTextureHalfFloatLinear, getColorBufferHalfFloat } from './compat';\nimport { isDebugMode } from '../../mol-util/debug';\nexport function createExtensions(gl) {\n  var instancedArrays = getInstancedArrays(gl);\n\n  if (instancedArrays === null) {\n    throw new Error('Could not find support for \"instanced_arrays\"');\n  }\n\n  var elementIndexUint = getElementIndexUint(gl);\n\n  if (elementIndexUint === null) {\n    throw new Error('Could not find support for \"element_index_uint\"');\n  }\n\n  var standardDerivatives = getStandardDerivatives(gl);\n\n  if (isDebugMode && standardDerivatives === null) {\n    // - non-support handled downstream (flat shading option is ignored)\n    // - can't be a required extension because it is not supported by `headless-gl`\n    console.log('Could not find support for \"standard_derivatives\"');\n  }\n\n  var textureFloat = getTextureFloat(gl);\n\n  if (isDebugMode && textureFloat === null) {\n    console.log('Could not find support for \"texture_float\"');\n  }\n\n  var textureFloatLinear = getTextureFloatLinear(gl);\n\n  if (isDebugMode && textureFloatLinear === null) {\n    // TODO handle non-support downstream (no gpu gaussian calc, no gpu mc???)\n    // - can't be a required extension because it is not supported by `headless-gl`\n    console.log('Could not find support for \"texture_float_linear\"');\n  }\n\n  var textureHalfFloat = getTextureHalfFloat(gl);\n\n  if (isDebugMode && textureHalfFloat === null) {\n    console.log('Could not find support for \"texture_half_float\"');\n  }\n\n  var textureHalfFloatLinear = getTextureHalfFloatLinear(gl);\n\n  if (isDebugMode && textureHalfFloatLinear === null) {\n    // TODO handle non-support downstream (no gpu gaussian calc, no gpu mc???)\n    // - can't be a required extension because it is not supported by `headless-gl`\n    console.log('Could not find support for \"texture_half_float_linear\"');\n  }\n\n  var depthTexture = getDepthTexture(gl);\n\n  if (isDebugMode && depthTexture === null) {\n    console.log('Could not find support for \"depth_texture\"');\n  }\n\n  var blendMinMax = getBlendMinMax(gl);\n\n  if (isDebugMode && blendMinMax === null) {\n    // TODO handle non-support downstream (e.g. no gpu gaussian calc)\n    // - can't be a required extension because it is not supported by `headless-gl`\n    console.log('Could not find support for \"blend_minmax\"');\n  }\n\n  var vertexArrayObject = getVertexArrayObject(gl);\n\n  if (isDebugMode && vertexArrayObject === null) {\n    console.log('Could not find support for \"vertex_array_object\"');\n  }\n\n  var fragDepth = getFragDepth(gl);\n\n  if (isDebugMode && fragDepth === null) {\n    console.log('Could not find support for \"frag_depth\"');\n  }\n\n  var colorBufferFloat = getColorBufferFloat(gl);\n\n  if (isDebugMode && colorBufferFloat === null) {\n    console.log('Could not find support for \"color_buffer_float\"');\n  }\n\n  var colorBufferHalfFloat = getColorBufferHalfFloat(gl);\n\n  if (isDebugMode && colorBufferHalfFloat === null) {\n    console.log('Could not find support for \"color_buffer_half_float\"');\n  }\n\n  var drawBuffers = getDrawBuffers(gl);\n\n  if (isDebugMode && drawBuffers === null) {\n    console.log('Could not find support for \"draw_buffers\"');\n  }\n\n  var shaderTextureLod = getShaderTextureLod(gl);\n\n  if (isDebugMode && shaderTextureLod === null) {\n    console.log('Could not find support for \"shader_texture_lod\"');\n  }\n\n  var sRGB = getSRGB(gl);\n\n  if (isDebugMode && sRGB === null) {\n    console.log('Could not find support for \"sRGB\"');\n  }\n\n  return {\n    instancedArrays: instancedArrays,\n    standardDerivatives: standardDerivatives,\n    textureFloat: textureFloat,\n    textureFloatLinear: textureFloatLinear,\n    textureHalfFloat: textureHalfFloat,\n    textureHalfFloatLinear: textureHalfFloatLinear,\n    elementIndexUint: elementIndexUint,\n    depthTexture: depthTexture,\n    blendMinMax: blendMinMax,\n    vertexArrayObject: vertexArrayObject,\n    fragDepth: fragDepth,\n    colorBufferFloat: colorBufferFloat,\n    colorBufferHalfFloat: colorBufferHalfFloat,\n    drawBuffers: drawBuffers,\n    shaderTextureLod: shaderTextureLod,\n    sRGB: sRGB\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/extensions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { getInstancedArrays, getStandardDerivatives, getVertexArrayObject, getElementIndexUint, getTextureFloat, getTextureFloatLinear, getBlendMinMax, getFragDepth, getColorBufferFloat, getDrawBuffers, getShaderTextureLod, getDepthTexture, getSRGB, getTextureHalfFloat, getTextureHalfFloatLinear, getColorBufferHalfFloat } from './compat';\r\nimport { isDebugMode } from '../../mol-util/debug';\r\nexport function createExtensions(gl) {\r\n    var instancedArrays = getInstancedArrays(gl);\r\n    if (instancedArrays === null) {\r\n        throw new Error('Could not find support for \"instanced_arrays\"');\r\n    }\r\n    var elementIndexUint = getElementIndexUint(gl);\r\n    if (elementIndexUint === null) {\r\n        throw new Error('Could not find support for \"element_index_uint\"');\r\n    }\r\n    var standardDerivatives = getStandardDerivatives(gl);\r\n    if (isDebugMode && standardDerivatives === null) {\r\n        // - non-support handled downstream (flat shading option is ignored)\r\n        // - can't be a required extension because it is not supported by `headless-gl`\r\n        console.log('Could not find support for \"standard_derivatives\"');\r\n    }\r\n    var textureFloat = getTextureFloat(gl);\r\n    if (isDebugMode && textureFloat === null) {\r\n        console.log('Could not find support for \"texture_float\"');\r\n    }\r\n    var textureFloatLinear = getTextureFloatLinear(gl);\r\n    if (isDebugMode && textureFloatLinear === null) {\r\n        // TODO handle non-support downstream (no gpu gaussian calc, no gpu mc???)\r\n        // - can't be a required extension because it is not supported by `headless-gl`\r\n        console.log('Could not find support for \"texture_float_linear\"');\r\n    }\r\n    var textureHalfFloat = getTextureHalfFloat(gl);\r\n    if (isDebugMode && textureHalfFloat === null) {\r\n        console.log('Could not find support for \"texture_half_float\"');\r\n    }\r\n    var textureHalfFloatLinear = getTextureHalfFloatLinear(gl);\r\n    if (isDebugMode && textureHalfFloatLinear === null) {\r\n        // TODO handle non-support downstream (no gpu gaussian calc, no gpu mc???)\r\n        // - can't be a required extension because it is not supported by `headless-gl`\r\n        console.log('Could not find support for \"texture_half_float_linear\"');\r\n    }\r\n    var depthTexture = getDepthTexture(gl);\r\n    if (isDebugMode && depthTexture === null) {\r\n        console.log('Could not find support for \"depth_texture\"');\r\n    }\r\n    var blendMinMax = getBlendMinMax(gl);\r\n    if (isDebugMode && blendMinMax === null) {\r\n        // TODO handle non-support downstream (e.g. no gpu gaussian calc)\r\n        // - can't be a required extension because it is not supported by `headless-gl`\r\n        console.log('Could not find support for \"blend_minmax\"');\r\n    }\r\n    var vertexArrayObject = getVertexArrayObject(gl);\r\n    if (isDebugMode && vertexArrayObject === null) {\r\n        console.log('Could not find support for \"vertex_array_object\"');\r\n    }\r\n    var fragDepth = getFragDepth(gl);\r\n    if (isDebugMode && fragDepth === null) {\r\n        console.log('Could not find support for \"frag_depth\"');\r\n    }\r\n    var colorBufferFloat = getColorBufferFloat(gl);\r\n    if (isDebugMode && colorBufferFloat === null) {\r\n        console.log('Could not find support for \"color_buffer_float\"');\r\n    }\r\n    var colorBufferHalfFloat = getColorBufferHalfFloat(gl);\r\n    if (isDebugMode && colorBufferHalfFloat === null) {\r\n        console.log('Could not find support for \"color_buffer_half_float\"');\r\n    }\r\n    var drawBuffers = getDrawBuffers(gl);\r\n    if (isDebugMode && drawBuffers === null) {\r\n        console.log('Could not find support for \"draw_buffers\"');\r\n    }\r\n    var shaderTextureLod = getShaderTextureLod(gl);\r\n    if (isDebugMode && shaderTextureLod === null) {\r\n        console.log('Could not find support for \"shader_texture_lod\"');\r\n    }\r\n    var sRGB = getSRGB(gl);\r\n    if (isDebugMode && sRGB === null) {\r\n        console.log('Could not find support for \"sRGB\"');\r\n    }\r\n    return {\r\n        instancedArrays: instancedArrays,\r\n        standardDerivatives: standardDerivatives,\r\n        textureFloat: textureFloat,\r\n        textureFloatLinear: textureFloatLinear,\r\n        textureHalfFloat: textureHalfFloat,\r\n        textureHalfFloatLinear: textureHalfFloatLinear,\r\n        elementIndexUint: elementIndexUint,\r\n        depthTexture: depthTexture,\r\n        blendMinMax: blendMinMax,\r\n        vertexArrayObject: vertexArrayObject,\r\n        fragDepth: fragDepth,\r\n        colorBufferFloat: colorBufferFloat,\r\n        colorBufferHalfFloat: colorBufferHalfFloat,\r\n        drawBuffers: drawBuffers,\r\n        shaderTextureLod: shaderTextureLod,\r\n        sRGB: sRGB,\r\n    };\r\n}\r\n//# sourceMappingURL=extensions.js.map"]},"metadata":{},"sourceType":"module"}