{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * ported from https://github.com/photopea/UZIP.js/blob/master/UZIP.js\r\n * MIT License, Copyright (c) 2018 Photopea\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { U, makeCodes, codes2map } from './util';\n\nfunction InflateContext(data, buf) {\n  var noBuf = buf === undefined;\n  if (buf === undefined) buf = new Uint8Array(data.length >>> 2 << 3);\n  return {\n    data: data,\n    buf: buf,\n    noBuf: noBuf,\n    BFINAL: 0,\n    off: 0,\n    pos: 0\n  };\n}\n\nfunction inflateBlocks(ctx, count) {\n  var data = ctx.data,\n      noBuf = ctx.noBuf;\n  var buf = ctx.buf,\n      BFINAL = ctx.BFINAL,\n      off = ctx.off,\n      pos = ctx.pos;\n  var iBlock = 0;\n\n  while (BFINAL === 0 && iBlock < count) {\n    var lmap = void 0,\n        dmap = void 0;\n    var ML = 0,\n        MD = 0;\n    BFINAL = _bitsF(data, pos, 1);\n    iBlock += 1;\n\n    var BTYPE = _bitsF(data, pos + 1, 2);\n\n    pos += 3;\n\n    if (BTYPE === 0) {\n      // uncompressed block\n      if ((pos & 7) !== 0) pos += 8 - (pos & 7);\n      var p8 = (pos >>> 3) + 4;\n      var len = data[p8 - 4] | data[p8 - 3] << 8;\n      if (noBuf) buf = _check(buf, off + len);\n      buf.set(new Uint8Array(data.buffer, data.byteOffset + p8, len), off);\n      pos = p8 + len << 3;\n      off += len;\n      continue;\n    } // grow output buffer if not provided\n\n\n    if (noBuf) buf = _check(buf, off + (1 << 17));\n\n    if (BTYPE === 1) {\n      // block compressed with fixed Huffman codes\n      lmap = U.flmap;\n      dmap = U.fdmap;\n      ML = (1 << 9) - 1;\n      MD = (1 << 5) - 1;\n    } else if (BTYPE === 2) {\n      // block compressed with dynamic Huffman codes\n      var HLIT = _bitsE(data, pos, 5) + 257;\n      var HDIST = _bitsE(data, pos + 5, 5) + 1;\n      var HCLEN = _bitsE(data, pos + 10, 4) + 4;\n      pos += 14;\n\n      for (var i = 0; i < 38; i += 2) {\n        U.itree[i] = 0;\n        U.itree[i + 1] = 0;\n      }\n\n      var tl = 1;\n\n      for (var i = 0; i < HCLEN; i++) {\n        var l = _bitsE(data, pos + i * 3, 3);\n\n        U.itree[(U.ordr[i] << 1) + 1] = l;\n        if (l > tl) tl = l;\n      }\n\n      pos += 3 * HCLEN;\n      makeCodes(U.itree, tl);\n      codes2map(U.itree, tl, U.imap);\n      lmap = U.lmap;\n      dmap = U.dmap;\n      pos = _decodeTiny(U.imap, (1 << tl) - 1, HLIT + HDIST, data, pos, U.ttree);\n\n      var mx0 = _copyOut(U.ttree, 0, HLIT, U.ltree);\n\n      ML = (1 << mx0) - 1;\n\n      var mx1 = _copyOut(U.ttree, HLIT, HDIST, U.dtree);\n\n      MD = (1 << mx1) - 1;\n      makeCodes(U.ltree, mx0);\n      codes2map(U.ltree, mx0, lmap);\n      makeCodes(U.dtree, mx1);\n      codes2map(U.dtree, mx1, dmap);\n    } else {\n      throw new Error(\"unknown BTYPE \" + BTYPE);\n    }\n\n    while (true) {\n      var code = lmap[_get17(data, pos) & ML];\n      pos += code & 15;\n      var lit = code >>> 4;\n\n      if (lit >>> 8 === 0) {\n        buf[off++] = lit;\n      } else if (lit === 256) {\n        break;\n      } else {\n        var end = off + lit - 254;\n\n        if (lit > 264) {\n          var ebs = U.ldef[lit - 257];\n          end = off + (ebs >>> 3) + _bitsE(data, pos, ebs & 7);\n          pos += ebs & 7;\n        }\n\n        var dcode = dmap[_get17(data, pos) & MD];\n        pos += dcode & 15;\n        var dlit = dcode >>> 4;\n        var dbs = U.ddef[dlit];\n\n        var dst = (dbs >>> 4) + _bitsF(data, pos, dbs & 15);\n\n        pos += dbs & 15;\n        if (noBuf) buf = _check(buf, off + (1 << 17));\n\n        while (off < end) {\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n        }\n\n        off = end;\n      }\n    }\n  }\n\n  ctx.buf = buf;\n  ctx.BFINAL = BFINAL;\n  ctx.off = off;\n  ctx.pos = pos;\n} // https://tools.ietf.org/html/rfc1951\n\n\nexport function _inflate(runtime, data, buf) {\n  return __awaiter(this, void 0, void 0, function () {\n    var ctx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (data[0] === 3 && data[1] === 0) return [2\n          /*return*/\n          , buf ? buf : new Uint8Array(0)];\n          ctx = InflateContext(data, buf);\n          _a.label = 1;\n\n        case 1:\n          if (!(ctx.BFINAL === 0)) return [3\n          /*break*/\n          , 4];\n          if (!runtime.shouldUpdate) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , runtime.update({\n            message: 'Inflating blocks...',\n            current: ctx.pos,\n            max: data.length\n          })];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          inflateBlocks(ctx, 100);\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , ctx.buf.length === ctx.off ? ctx.buf : ctx.buf.slice(0, ctx.off)];\n      }\n    });\n  });\n}\n\nfunction _check(buf, len) {\n  var bl = buf.length;\n  if (len <= bl) return buf;\n  var nbuf = new Uint8Array(Math.max(bl << 1, len));\n  nbuf.set(buf, 0);\n  return nbuf;\n}\n\nfunction _decodeTiny(lmap, LL, len, data, pos, tree) {\n  var i = 0;\n\n  while (i < len) {\n    var code = lmap[_get17(data, pos) & LL];\n    pos += code & 15;\n    var lit = code >>> 4;\n\n    if (lit <= 15) {\n      tree[i] = lit;\n      i++;\n    } else {\n      var ll = 0,\n          n = 0;\n\n      if (lit === 16) {\n        n = 3 + _bitsE(data, pos, 2);\n        pos += 2;\n        ll = tree[i - 1];\n      } else if (lit === 17) {\n        n = 3 + _bitsE(data, pos, 3);\n        pos += 3;\n      } else if (lit === 18) {\n        n = 11 + _bitsE(data, pos, 7);\n        pos += 7;\n      }\n\n      var ni = i + n;\n\n      while (i < ni) {\n        tree[i] = ll;\n        i++;\n      }\n    }\n  }\n\n  return pos;\n}\n\nfunction _copyOut(src, off, len, tree) {\n  var mx = 0,\n      i = 0;\n  var tl = tree.length >>> 1;\n\n  while (i < len) {\n    var v = src[i + off];\n    tree[i << 1] = 0;\n    tree[(i << 1) + 1] = v;\n    if (v > mx) mx = v;\n    i++;\n  }\n\n  while (i < tl) {\n    tree[i << 1] = 0;\n    tree[(i << 1) + 1] = 0;\n    i++;\n  }\n\n  return mx;\n}\n\nfunction _bitsE(dt, pos, length) {\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8) >>> (pos & 7) & (1 << length) - 1;\n}\n\nfunction _bitsF(dt, pos, length) {\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7) & (1 << length) - 1;\n}\n\nfunction _get17(dt, pos) {\n  return (dt[pos >>> 3] | dt[(pos >>> 3) + 1] << 8 | dt[(pos >>> 3) + 2] << 16) >>> (pos & 7);\n}","map":{"version":3,"sources":["../../../src/mol-util/zip/inflate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n *\r\n * ported from https://github.com/photopea/UZIP.js/blob/master/UZIP.js\r\n * MIT License, Copyright (c) 2018 Photopea\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { U, makeCodes, codes2map } from './util';\r\nfunction InflateContext(data, buf) {\r\n    var noBuf = buf === undefined;\r\n    if (buf === undefined)\r\n        buf = new Uint8Array((data.length >>> 2) << 3);\r\n    return {\r\n        data: data,\r\n        buf: buf,\r\n        noBuf: noBuf,\r\n        BFINAL: 0,\r\n        off: 0,\r\n        pos: 0\r\n    };\r\n}\r\nfunction inflateBlocks(ctx, count) {\r\n    var data = ctx.data, noBuf = ctx.noBuf;\r\n    var buf = ctx.buf, BFINAL = ctx.BFINAL, off = ctx.off, pos = ctx.pos;\r\n    var iBlock = 0;\r\n    while (BFINAL === 0 && iBlock < count) {\r\n        var lmap = void 0, dmap = void 0;\r\n        var ML = 0, MD = 0;\r\n        BFINAL = _bitsF(data, pos, 1);\r\n        iBlock += 1;\r\n        var BTYPE = _bitsF(data, pos + 1, 2);\r\n        pos += 3;\r\n        if (BTYPE === 0) {\r\n            // uncompressed block\r\n            if ((pos & 7) !== 0)\r\n                pos += 8 - (pos & 7);\r\n            var p8 = (pos >>> 3) + 4;\r\n            var len = data[p8 - 4] | (data[p8 - 3] << 8);\r\n            if (noBuf)\r\n                buf = _check(buf, off + len);\r\n            buf.set(new Uint8Array(data.buffer, data.byteOffset + p8, len), off);\r\n            pos = ((p8 + len) << 3);\r\n            off += len;\r\n            continue;\r\n        }\r\n        // grow output buffer if not provided\r\n        if (noBuf)\r\n            buf = _check(buf, off + (1 << 17));\r\n        if (BTYPE === 1) {\r\n            // block compressed with fixed Huffman codes\r\n            lmap = U.flmap;\r\n            dmap = U.fdmap;\r\n            ML = (1 << 9) - 1;\r\n            MD = (1 << 5) - 1;\r\n        }\r\n        else if (BTYPE === 2) {\r\n            // block compressed with dynamic Huffman codes\r\n            var HLIT = _bitsE(data, pos, 5) + 257;\r\n            var HDIST = _bitsE(data, pos + 5, 5) + 1;\r\n            var HCLEN = _bitsE(data, pos + 10, 4) + 4;\r\n            pos += 14;\r\n            for (var i = 0; i < 38; i += 2) {\r\n                U.itree[i] = 0;\r\n                U.itree[i + 1] = 0;\r\n            }\r\n            var tl = 1;\r\n            for (var i = 0; i < HCLEN; i++) {\r\n                var l = _bitsE(data, pos + i * 3, 3);\r\n                U.itree[(U.ordr[i] << 1) + 1] = l;\r\n                if (l > tl)\r\n                    tl = l;\r\n            }\r\n            pos += 3 * HCLEN;\r\n            makeCodes(U.itree, tl);\r\n            codes2map(U.itree, tl, U.imap);\r\n            lmap = U.lmap;\r\n            dmap = U.dmap;\r\n            pos = _decodeTiny(U.imap, (1 << tl) - 1, HLIT + HDIST, data, pos, U.ttree);\r\n            var mx0 = _copyOut(U.ttree, 0, HLIT, U.ltree);\r\n            ML = (1 << mx0) - 1;\r\n            var mx1 = _copyOut(U.ttree, HLIT, HDIST, U.dtree);\r\n            MD = (1 << mx1) - 1;\r\n            makeCodes(U.ltree, mx0);\r\n            codes2map(U.ltree, mx0, lmap);\r\n            makeCodes(U.dtree, mx1);\r\n            codes2map(U.dtree, mx1, dmap);\r\n        }\r\n        else {\r\n            throw new Error(\"unknown BTYPE \" + BTYPE);\r\n        }\r\n        while (true) {\r\n            var code = lmap[_get17(data, pos) & ML];\r\n            pos += code & 15;\r\n            var lit = code >>> 4;\r\n            if ((lit >>> 8) === 0) {\r\n                buf[off++] = lit;\r\n            }\r\n            else if (lit === 256) {\r\n                break;\r\n            }\r\n            else {\r\n                var end = off + lit - 254;\r\n                if (lit > 264) {\r\n                    var ebs = U.ldef[lit - 257];\r\n                    end = off + (ebs >>> 3) + _bitsE(data, pos, ebs & 7);\r\n                    pos += ebs & 7;\r\n                }\r\n                var dcode = dmap[_get17(data, pos) & MD];\r\n                pos += dcode & 15;\r\n                var dlit = dcode >>> 4;\r\n                var dbs = U.ddef[dlit];\r\n                var dst = (dbs >>> 4) + _bitsF(data, pos, dbs & 15);\r\n                pos += dbs & 15;\r\n                if (noBuf)\r\n                    buf = _check(buf, off + (1 << 17));\r\n                while (off < end) {\r\n                    buf[off] = buf[off++ - dst];\r\n                    buf[off] = buf[off++ - dst];\r\n                    buf[off] = buf[off++ - dst];\r\n                    buf[off] = buf[off++ - dst];\r\n                }\r\n                off = end;\r\n            }\r\n        }\r\n    }\r\n    ctx.buf = buf;\r\n    ctx.BFINAL = BFINAL;\r\n    ctx.off = off;\r\n    ctx.pos = pos;\r\n}\r\n// https://tools.ietf.org/html/rfc1951\r\nexport function _inflate(runtime, data, buf) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var ctx;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (data[0] === 3 && data[1] === 0)\r\n                        return [2 /*return*/, (buf ? buf : new Uint8Array(0))];\r\n                    ctx = InflateContext(data, buf);\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(ctx.BFINAL === 0)) return [3 /*break*/, 4];\r\n                    if (!runtime.shouldUpdate) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, runtime.update({ message: 'Inflating blocks...', current: ctx.pos, max: data.length })];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    inflateBlocks(ctx, 100);\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/, ctx.buf.length === ctx.off ? ctx.buf : ctx.buf.slice(0, ctx.off)];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction _check(buf, len) {\r\n    var bl = buf.length;\r\n    if (len <= bl)\r\n        return buf;\r\n    var nbuf = new Uint8Array(Math.max(bl << 1, len));\r\n    nbuf.set(buf, 0);\r\n    return nbuf;\r\n}\r\nfunction _decodeTiny(lmap, LL, len, data, pos, tree) {\r\n    var i = 0;\r\n    while (i < len) {\r\n        var code = lmap[_get17(data, pos) & LL];\r\n        pos += code & 15;\r\n        var lit = code >>> 4;\r\n        if (lit <= 15) {\r\n            tree[i] = lit;\r\n            i++;\r\n        }\r\n        else {\r\n            var ll = 0, n = 0;\r\n            if (lit === 16) {\r\n                n = (3 + _bitsE(data, pos, 2));\r\n                pos += 2;\r\n                ll = tree[i - 1];\r\n            }\r\n            else if (lit === 17) {\r\n                n = (3 + _bitsE(data, pos, 3));\r\n                pos += 3;\r\n            }\r\n            else if (lit === 18) {\r\n                n = (11 + _bitsE(data, pos, 7));\r\n                pos += 7;\r\n            }\r\n            var ni = i + n;\r\n            while (i < ni) {\r\n                tree[i] = ll;\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    return pos;\r\n}\r\nfunction _copyOut(src, off, len, tree) {\r\n    var mx = 0, i = 0;\r\n    var tl = tree.length >>> 1;\r\n    while (i < len) {\r\n        var v = src[i + off];\r\n        tree[(i << 1)] = 0;\r\n        tree[(i << 1) + 1] = v;\r\n        if (v > mx)\r\n            mx = v;\r\n        i++;\r\n    }\r\n    while (i < tl) {\r\n        tree[(i << 1)] = 0;\r\n        tree[(i << 1) + 1] = 0;\r\n        i++;\r\n    }\r\n    return mx;\r\n}\r\nfunction _bitsE(dt, pos, length) {\r\n    return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8)) >>> (pos & 7)) & ((1 << length) - 1);\r\n}\r\nfunction _bitsF(dt, pos, length) {\r\n    return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7)) & ((1 << length) - 1);\r\n}\r\nfunction _get17(dt, pos) {\r\n    return (dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7);\r\n}\r\n//# sourceMappingURL=inflate.js.map"]},"metadata":{},"sourceType":"module"}