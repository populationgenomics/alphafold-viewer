{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\nimport { Color } from '../../mol-util/color';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nimport { isInteger } from '../../mol-util/number';\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\nimport { MmcifFormat } from '../../mol-model-formats/structure/mmcif';\nvar DefaultList = 'dark-2';\nvar DefaultColor = Color(0xFAFAFA);\nvar Description = 'Gives ranges of a polymer chain a color based on the entity source it originates from (e.g. gene, plasmid, organism).';\nexport var EntitySourceColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: DefaultList\n}));\nexport function getEntitySourceColorThemeParams(ctx) {\n  var params = PD.clone(EntitySourceColorThemeParams);\n\n  if (ctx.structure) {\n    if (getMaps(ctx.structure.root.models).srcKeySerialMap.size > ColorLists[DefaultList].list.length) {\n      params.palette.defaultValue.name = 'colors';\n      params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), {\n        list: {\n          kind: 'interpolate',\n          colors: getColorListFromName(DefaultList).list\n        }\n      });\n    }\n  }\n\n  return params;\n}\n\nfunction modelEntityKey(modelIndex, entityId) {\n  return modelIndex + \"|\" + entityId;\n}\n\nfunction srcKey(modelIndex, entityId, organism, srcId, plasmid, gene) {\n  return modelIndex + \"|\" + entityId + \"|\" + organism + \"|\" + (gene ? gene : plasmid ? plasmid : srcId);\n}\n\nfunction addSrc(seqToSrcByModelEntity, srcKeySerialMap, modelIndex, model, entity_src, scientific_name, plasmid_name, gene_src_gene) {\n  var entity_id = entity_src.entity_id,\n      pdbx_src_id = entity_src.pdbx_src_id,\n      pdbx_beg_seq_num = entity_src.pdbx_beg_seq_num,\n      pdbx_end_seq_num = entity_src.pdbx_end_seq_num;\n\n  for (var j = 0, jl = entity_src._rowCount; j < jl; ++j) {\n    var entityId = entity_id.value(j);\n    var mK = modelEntityKey(modelIndex, entityId);\n    var seqToSrc = void 0;\n\n    if (!seqToSrcByModelEntity.has(mK)) {\n      var entityIndex = model.entities.getEntityIndex(entityId);\n      var seq = model.sequence.sequences[entityIndex].sequence;\n      seqToSrc = new Int16Array(seq.length);\n      seqToSrcByModelEntity.set(mK, seqToSrc);\n    } else {\n      seqToSrc = seqToSrcByModelEntity.get(mK);\n    }\n\n    var plasmid = plasmid_name ? plasmid_name.value(j) : '';\n    var gene = gene_src_gene ? gene_src_gene.value(j)[0] : '';\n    var sK = srcKey(modelIndex, entityId, scientific_name.value(j), pdbx_src_id.value(j), plasmid, gene); // may not be given (= 0) indicating src is for the whole seq\n\n    var beg = pdbx_beg_seq_num.valueKind(j) === 0\n    /* Present */\n    ? pdbx_beg_seq_num.value(j) : 1;\n    var end = pdbx_end_seq_num.valueKind(j) === 0\n    /* Present */\n    ? pdbx_end_seq_num.value(j) : seqToSrc.length;\n    var srcIndex = void 0; // serial no starting from 1\n\n    if (srcKeySerialMap.has(sK)) {\n      srcIndex = srcKeySerialMap.get(sK);\n    } else {\n      srcIndex = srcKeySerialMap.size + 1;\n      srcKeySerialMap.set(sK, srcIndex);\n    } // set src index\n\n\n    for (var i = beg, il = end; i <= il; ++i) {\n      seqToSrc[i - 1] = srcIndex;\n    }\n  }\n}\n\nfunction getMaps(models) {\n  var seqToSrcByModelEntity = new Map();\n  var srcKeySerialMap = new Map(); // serial no starting from 1\n\n  for (var i = 0, il = models.length; i < il; ++i) {\n    var m = models[i];\n    if (!MmcifFormat.is(m.sourceData)) continue;\n    var _a = m.sourceData.data.db,\n        entity_src_gen = _a.entity_src_gen,\n        entity_src_nat = _a.entity_src_nat,\n        pdbx_entity_src_syn = _a.pdbx_entity_src_syn;\n    addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, entity_src_gen, entity_src_gen.pdbx_gene_src_scientific_name, entity_src_gen.plasmid_name, entity_src_gen.pdbx_gene_src_gene);\n    addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, entity_src_nat, entity_src_nat.pdbx_organism_scientific, entity_src_nat.pdbx_plasmid_name);\n    addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, pdbx_entity_src_syn, pdbx_entity_src_syn.organism_scientific);\n  }\n\n  return {\n    seqToSrcByModelEntity: seqToSrcByModelEntity,\n    srcKeySerialMap: srcKeySerialMap\n  };\n}\n\nfunction getLabelTable(srcKeySerialMap) {\n  var unnamedCount = 0;\n  return Array.from(srcKeySerialMap.keys()).map(function (v) {\n    var vs = v.split('|');\n    var organism = vs[2];\n    var name = isInteger(vs[3]) ? \"Unnamed \" + ++unnamedCount : vs[3];\n    return \"\" + name + (organism ? \" (\" + organism + \")\" : '');\n  });\n}\n\nexport function EntitySourceColorTheme(ctx, props) {\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var l_1 = StructureElement.Location.create(ctx.structure);\n    var models_1 = ctx.structure.root.models;\n\n    var _a = getMaps(models_1),\n        seqToSrcByModelEntity_1 = _a.seqToSrcByModelEntity,\n        srcKeySerialMap = _a.srcKeySerialMap;\n\n    var labelTable_1 = getLabelTable(srcKeySerialMap);\n\n    var valueLabel = function (i) {\n      return labelTable_1[i];\n    };\n\n    var palette_1 = getPalette(srcKeySerialMap.size, props, {\n      valueLabel: valueLabel\n    });\n    legend = palette_1.legend;\n\n    var getSrcColor_1 = function (location) {\n      var modelIndex = models_1.indexOf(location.unit.model);\n      var entityId = StructureProperties.entity.id(location);\n      var mK = modelEntityKey(modelIndex, entityId);\n      var seqToSrc = seqToSrcByModelEntity_1.get(mK);\n\n      if (seqToSrc) {\n        // minus 1 to convert seqId to array index\n        var src = seqToSrc[StructureProperties.residue.label_seq_id(location) - 1] - 1; // check for -1 as not all sequence ids have a src given\n\n        return src === -1 ? DefaultColor : palette_1.color(src);\n      } else {\n        return DefaultColor;\n      }\n    };\n\n    color = function (location) {\n      if (StructureElement.Location.is(location)) {\n        return getSrcColor_1(location);\n      } else if (Bond.isLocation(location)) {\n        l_1.unit = location.aUnit;\n        l_1.element = location.aUnit.elements[location.aIndex];\n        return getSrcColor_1(l_1);\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: EntitySourceColorTheme,\n    granularity: 'group',\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var EntitySourceColorThemeProvider = {\n  name: 'entity-source',\n  label: 'Entity Source',\n  category: \"Chain Property\"\n  /* Chain */\n  ,\n  factory: EntitySourceColorTheme,\n  getParams: getEntitySourceColorThemeParams,\n  defaultValues: PD.getDefaultValues(EntitySourceColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/entity-source.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { StructureProperties, StructureElement, Bond } from '../../mol-model/structure';\r\nimport { Color } from '../../mol-util/color';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nimport { isInteger } from '../../mol-util/number';\r\nimport { ColorLists, getColorListFromName } from '../../mol-util/color/lists';\r\nimport { MmcifFormat } from '../../mol-model-formats/structure/mmcif';\r\nvar DefaultList = 'dark-2';\r\nvar DefaultColor = Color(0xFAFAFA);\r\nvar Description = 'Gives ranges of a polymer chain a color based on the entity source it originates from (e.g. gene, plasmid, organism).';\r\nexport var EntitySourceColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: DefaultList }));\r\nexport function getEntitySourceColorThemeParams(ctx) {\r\n    var params = PD.clone(EntitySourceColorThemeParams);\r\n    if (ctx.structure) {\r\n        if (getMaps(ctx.structure.root.models).srcKeySerialMap.size > ColorLists[DefaultList].list.length) {\r\n            params.palette.defaultValue.name = 'colors';\r\n            params.palette.defaultValue.params = __assign(__assign({}, params.palette.defaultValue.params), { list: { kind: 'interpolate', colors: getColorListFromName(DefaultList).list } });\r\n        }\r\n    }\r\n    return params;\r\n}\r\nfunction modelEntityKey(modelIndex, entityId) {\r\n    return modelIndex + \"|\" + entityId;\r\n}\r\nfunction srcKey(modelIndex, entityId, organism, srcId, plasmid, gene) {\r\n    return modelIndex + \"|\" + entityId + \"|\" + organism + \"|\" + (gene ? gene : (plasmid ? plasmid : srcId));\r\n}\r\nfunction addSrc(seqToSrcByModelEntity, srcKeySerialMap, modelIndex, model, entity_src, scientific_name, plasmid_name, gene_src_gene) {\r\n    var entity_id = entity_src.entity_id, pdbx_src_id = entity_src.pdbx_src_id, pdbx_beg_seq_num = entity_src.pdbx_beg_seq_num, pdbx_end_seq_num = entity_src.pdbx_end_seq_num;\r\n    for (var j = 0, jl = entity_src._rowCount; j < jl; ++j) {\r\n        var entityId = entity_id.value(j);\r\n        var mK = modelEntityKey(modelIndex, entityId);\r\n        var seqToSrc = void 0;\r\n        if (!seqToSrcByModelEntity.has(mK)) {\r\n            var entityIndex = model.entities.getEntityIndex(entityId);\r\n            var seq = model.sequence.sequences[entityIndex].sequence;\r\n            seqToSrc = new Int16Array(seq.length);\r\n            seqToSrcByModelEntity.set(mK, seqToSrc);\r\n        }\r\n        else {\r\n            seqToSrc = seqToSrcByModelEntity.get(mK);\r\n        }\r\n        var plasmid = plasmid_name ? plasmid_name.value(j) : '';\r\n        var gene = gene_src_gene ? gene_src_gene.value(j)[0] : '';\r\n        var sK = srcKey(modelIndex, entityId, scientific_name.value(j), pdbx_src_id.value(j), plasmid, gene);\r\n        // may not be given (= 0) indicating src is for the whole seq\r\n        var beg = pdbx_beg_seq_num.valueKind(j) === 0 /* Present */ ? pdbx_beg_seq_num.value(j) : 1;\r\n        var end = pdbx_end_seq_num.valueKind(j) === 0 /* Present */ ? pdbx_end_seq_num.value(j) : seqToSrc.length;\r\n        var srcIndex = void 0; // serial no starting from 1\r\n        if (srcKeySerialMap.has(sK)) {\r\n            srcIndex = srcKeySerialMap.get(sK);\r\n        }\r\n        else {\r\n            srcIndex = srcKeySerialMap.size + 1;\r\n            srcKeySerialMap.set(sK, srcIndex);\r\n        }\r\n        // set src index\r\n        for (var i = beg, il = end; i <= il; ++i) {\r\n            seqToSrc[i - 1] = srcIndex;\r\n        }\r\n    }\r\n}\r\nfunction getMaps(models) {\r\n    var seqToSrcByModelEntity = new Map();\r\n    var srcKeySerialMap = new Map(); // serial no starting from 1\r\n    for (var i = 0, il = models.length; i < il; ++i) {\r\n        var m = models[i];\r\n        if (!MmcifFormat.is(m.sourceData))\r\n            continue;\r\n        var _a = m.sourceData.data.db, entity_src_gen = _a.entity_src_gen, entity_src_nat = _a.entity_src_nat, pdbx_entity_src_syn = _a.pdbx_entity_src_syn;\r\n        addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, entity_src_gen, entity_src_gen.pdbx_gene_src_scientific_name, entity_src_gen.plasmid_name, entity_src_gen.pdbx_gene_src_gene);\r\n        addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, entity_src_nat, entity_src_nat.pdbx_organism_scientific, entity_src_nat.pdbx_plasmid_name);\r\n        addSrc(seqToSrcByModelEntity, srcKeySerialMap, i, m, pdbx_entity_src_syn, pdbx_entity_src_syn.organism_scientific);\r\n    }\r\n    return { seqToSrcByModelEntity: seqToSrcByModelEntity, srcKeySerialMap: srcKeySerialMap };\r\n}\r\nfunction getLabelTable(srcKeySerialMap) {\r\n    var unnamedCount = 0;\r\n    return Array.from(srcKeySerialMap.keys()).map(function (v) {\r\n        var vs = v.split('|');\r\n        var organism = vs[2];\r\n        var name = isInteger(vs[3]) ? \"Unnamed \" + ++unnamedCount : vs[3];\r\n        return \"\" + name + (organism ? \" (\" + organism + \")\" : '');\r\n    });\r\n}\r\nexport function EntitySourceColorTheme(ctx, props) {\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var l_1 = StructureElement.Location.create(ctx.structure);\r\n        var models_1 = ctx.structure.root.models;\r\n        var _a = getMaps(models_1), seqToSrcByModelEntity_1 = _a.seqToSrcByModelEntity, srcKeySerialMap = _a.srcKeySerialMap;\r\n        var labelTable_1 = getLabelTable(srcKeySerialMap);\r\n        var valueLabel = function (i) { return labelTable_1[i]; };\r\n        var palette_1 = getPalette(srcKeySerialMap.size, props, { valueLabel: valueLabel });\r\n        legend = palette_1.legend;\r\n        var getSrcColor_1 = function (location) {\r\n            var modelIndex = models_1.indexOf(location.unit.model);\r\n            var entityId = StructureProperties.entity.id(location);\r\n            var mK = modelEntityKey(modelIndex, entityId);\r\n            var seqToSrc = seqToSrcByModelEntity_1.get(mK);\r\n            if (seqToSrc) {\r\n                // minus 1 to convert seqId to array index\r\n                var src = seqToSrc[StructureProperties.residue.label_seq_id(location) - 1] - 1;\r\n                // check for -1 as not all sequence ids have a src given\r\n                return src === -1 ? DefaultColor : palette_1.color(src);\r\n            }\r\n            else {\r\n                return DefaultColor;\r\n            }\r\n        };\r\n        color = function (location) {\r\n            if (StructureElement.Location.is(location)) {\r\n                return getSrcColor_1(location);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                l_1.unit = location.aUnit;\r\n                l_1.element = location.aUnit.elements[location.aIndex];\r\n                return getSrcColor_1(l_1);\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: EntitySourceColorTheme,\r\n        granularity: 'group',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var EntitySourceColorThemeProvider = {\r\n    name: 'entity-source',\r\n    label: 'Entity Source',\r\n    category: \"Chain Property\" /* Chain */,\r\n    factory: EntitySourceColorTheme,\r\n    getParams: getEntitySourceColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(EntitySourceColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; }\r\n};\r\n//# sourceMappingURL=entity-source.js.map"]},"metadata":{},"sourceType":"module"}