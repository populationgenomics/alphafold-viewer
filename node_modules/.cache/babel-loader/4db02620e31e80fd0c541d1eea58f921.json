{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nexport function utf8Write(data, offset, str) {\n  for (var i = 0, l = str.length; i < l; i++) {\n    var codePoint = str.charCodeAt(i); // One byte of UTF-8\n\n    if (codePoint < 0x80) {\n      data[offset++] = codePoint >>> 0 & 0x7f | 0x00;\n      continue;\n    } // Two bytes of UTF-8\n\n\n    if (codePoint < 0x800) {\n      data[offset++] = codePoint >>> 6 & 0x1f | 0xc0;\n      data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\n      continue;\n    } // Three bytes of UTF-8.\n\n\n    if (codePoint < 0x10000) {\n      data[offset++] = codePoint >>> 12 & 0x0f | 0xe0;\n      data[offset++] = codePoint >>> 6 & 0x3f | 0x80;\n      data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\n      continue;\n    } // Four bytes of UTF-8\n\n\n    if (codePoint < 0x110000) {\n      data[offset++] = codePoint >>> 18 & 0x07 | 0xf0;\n      data[offset++] = codePoint >>> 12 & 0x3f | 0x80;\n      data[offset++] = codePoint >>> 6 & 0x3f | 0x80;\n      data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\n      continue;\n    }\n\n    throw new Error('bad codepoint ' + codePoint);\n  }\n}\n\nvar __chars = function () {\n  var data = [];\n\n  for (var i = 0; i < 1024; i++) data[i] = String.fromCharCode(i);\n\n  return data;\n}();\n\nfunction throwError(err) {\n  throw new Error(err);\n}\n\nfunction _utf8Read(data, offset, length) {\n  var chars = __chars;\n  var str = void 0,\n      chunkOffset = 0;\n  var chunk = [],\n      chunkSize = 512;\n\n  for (var i = offset, end = offset + length; i < end; i++) {\n    var byte = data[i];\n\n    if ((byte & 0x80) === 0x00) {\n      // One byte character\n      chunk[chunkOffset++] = chars[byte];\n    } else if ((byte & 0xe0) === 0xc0) {\n      // Two byte character\n      chunk[chunkOffset++] = chars[(byte & 0x0f) << 6 | data[++i] & 0x3f];\n    } else if ((byte & 0xf0) === 0xe0) {\n      // Three byte character\n      chunk[chunkOffset++] = String.fromCharCode((byte & 0x0f) << 12 | (data[++i] & 0x3f) << 6 | (data[++i] & 0x3f) << 0);\n    } else if ((byte & 0xf8) === 0xf0) {\n      // Four byte character\n      chunk[chunkOffset++] = String.fromCharCode((byte & 0x07) << 18 | (data[++i] & 0x3f) << 12 | (data[++i] & 0x3f) << 6 | (data[++i] & 0x3f) << 0);\n    } else throwError('Invalid byte ' + byte.toString(16));\n\n    if (chunkOffset === chunkSize) {\n      str = str || [];\n      str[str.length] = chunk.join('');\n      chunkOffset = 0;\n    }\n  }\n\n  if (!str) return chunk.slice(0, chunkOffset).join('');\n\n  if (chunkOffset > 0) {\n    str[str.length] = chunk.slice(0, chunkOffset).join('');\n  }\n\n  return str.join('');\n}\n\nvar utf8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : undefined;\nexport function utf8Read(data, offset, length) {\n  if (utf8Decoder) {\n    var input = offset || length !== data.length ? data.subarray(offset, offset + length) : data;\n    return utf8Decoder.decode(input);\n  } else {\n    return _utf8Read(data, offset, length);\n  }\n}\nexport function utf8ByteCount(str) {\n  var count = 0;\n\n  for (var i = 0, l = str.length; i < l; i++) {\n    var codePoint = str.charCodeAt(i);\n\n    if (codePoint < 0x80) {\n      count += 1;\n      continue;\n    }\n\n    if (codePoint < 0x800) {\n      count += 2;\n      continue;\n    }\n\n    if (codePoint < 0x10000) {\n      count += 3;\n      continue;\n    }\n\n    if (codePoint < 0x110000) {\n      count += 4;\n      continue;\n    }\n\n    throwError('bad codepoint ' + codePoint);\n  }\n\n  return count;\n}","map":{"version":3,"sources":["../../../src/mol-io/common/utf8.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from https://github.com/rcsb/mmtf-javascript\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nexport function utf8Write(data, offset, str) {\r\n    for (var i = 0, l = str.length; i < l; i++) {\r\n        var codePoint = str.charCodeAt(i);\r\n        // One byte of UTF-8\r\n        if (codePoint < 0x80) {\r\n            data[offset++] = codePoint >>> 0 & 0x7f | 0x00;\r\n            continue;\r\n        }\r\n        // Two bytes of UTF-8\r\n        if (codePoint < 0x800) {\r\n            data[offset++] = codePoint >>> 6 & 0x1f | 0xc0;\r\n            data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\r\n            continue;\r\n        }\r\n        // Three bytes of UTF-8.\r\n        if (codePoint < 0x10000) {\r\n            data[offset++] = codePoint >>> 12 & 0x0f | 0xe0;\r\n            data[offset++] = codePoint >>> 6 & 0x3f | 0x80;\r\n            data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\r\n            continue;\r\n        }\r\n        // Four bytes of UTF-8\r\n        if (codePoint < 0x110000) {\r\n            data[offset++] = codePoint >>> 18 & 0x07 | 0xf0;\r\n            data[offset++] = codePoint >>> 12 & 0x3f | 0x80;\r\n            data[offset++] = codePoint >>> 6 & 0x3f | 0x80;\r\n            data[offset++] = codePoint >>> 0 & 0x3f | 0x80;\r\n            continue;\r\n        }\r\n        throw new Error('bad codepoint ' + codePoint);\r\n    }\r\n}\r\nvar __chars = function () {\r\n    var data = [];\r\n    for (var i = 0; i < 1024; i++)\r\n        data[i] = String.fromCharCode(i);\r\n    return data;\r\n}();\r\nfunction throwError(err) {\r\n    throw new Error(err);\r\n}\r\nfunction _utf8Read(data, offset, length) {\r\n    var chars = __chars;\r\n    var str = void 0, chunkOffset = 0;\r\n    var chunk = [], chunkSize = 512;\r\n    for (var i = offset, end = offset + length; i < end; i++) {\r\n        var byte = data[i];\r\n        if ((byte & 0x80) === 0x00) {\r\n            // One byte character\r\n            chunk[chunkOffset++] = chars[byte];\r\n        }\r\n        else if ((byte & 0xe0) === 0xc0) {\r\n            // Two byte character\r\n            chunk[chunkOffset++] = chars[((byte & 0x0f) << 6) | (data[++i] & 0x3f)];\r\n        }\r\n        else if ((byte & 0xf0) === 0xe0) {\r\n            // Three byte character\r\n            chunk[chunkOffset++] = String.fromCharCode(((byte & 0x0f) << 12) |\r\n                ((data[++i] & 0x3f) << 6) |\r\n                ((data[++i] & 0x3f) << 0));\r\n        }\r\n        else if ((byte & 0xf8) === 0xf0) {\r\n            // Four byte character\r\n            chunk[chunkOffset++] = String.fromCharCode(((byte & 0x07) << 18) |\r\n                ((data[++i] & 0x3f) << 12) |\r\n                ((data[++i] & 0x3f) << 6) |\r\n                ((data[++i] & 0x3f) << 0));\r\n        }\r\n        else\r\n            throwError('Invalid byte ' + byte.toString(16));\r\n        if (chunkOffset === chunkSize) {\r\n            str = str || [];\r\n            str[str.length] = chunk.join('');\r\n            chunkOffset = 0;\r\n        }\r\n    }\r\n    if (!str)\r\n        return chunk.slice(0, chunkOffset).join('');\r\n    if (chunkOffset > 0) {\r\n        str[str.length] = chunk.slice(0, chunkOffset).join('');\r\n    }\r\n    return str.join('');\r\n}\r\nvar utf8Decoder = (typeof TextDecoder !== 'undefined') ? new TextDecoder() : undefined;\r\nexport function utf8Read(data, offset, length) {\r\n    if (utf8Decoder) {\r\n        var input = (offset || length !== data.length) ? data.subarray(offset, offset + length) : data;\r\n        return utf8Decoder.decode(input);\r\n    }\r\n    else {\r\n        return _utf8Read(data, offset, length);\r\n    }\r\n}\r\nexport function utf8ByteCount(str) {\r\n    var count = 0;\r\n    for (var i = 0, l = str.length; i < l; i++) {\r\n        var codePoint = str.charCodeAt(i);\r\n        if (codePoint < 0x80) {\r\n            count += 1;\r\n            continue;\r\n        }\r\n        if (codePoint < 0x800) {\r\n            count += 2;\r\n            continue;\r\n        }\r\n        if (codePoint < 0x10000) {\r\n            count += 3;\r\n            continue;\r\n        }\r\n        if (codePoint < 0x110000) {\r\n            count += 4;\r\n            continue;\r\n        }\r\n        throwError('bad codepoint ' + codePoint);\r\n    }\r\n    return count;\r\n}\r\n//# sourceMappingURL=utf8.js.map"]},"metadata":{},"sourceType":"module"}