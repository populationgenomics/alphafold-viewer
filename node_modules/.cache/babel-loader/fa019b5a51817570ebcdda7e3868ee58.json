{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorMap } from '../../mol-util/color';\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { SecondaryStructureType } from '../../mol-model/structure/model/types';\nimport { getElementMoleculeType } from '../../mol-model/structure/util';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { TableLegend } from '../../mol-util/legend';\nimport { SecondaryStructureProvider } from '../../mol-model-props/computed/secondary-structure';\nimport { getAdjustedColorMap } from '../../mol-util/color/color';\nimport { hash2 } from '../../mol-data/util'; // from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)\n\nvar SecondaryStructureColors = ColorMap({\n  'alphaHelix': 0xFF0080,\n  'threeTenHelix': 0xA00080,\n  'piHelix': 0x600080,\n  'betaTurn': 0x6080FF,\n  'betaStrand': 0xFFC800,\n  'coil': 0xFFFFFF,\n  'bend': 0x66D8C9\n  /* biting original color used 0x00FF00 */\n  ,\n  'turn': 0x00B266,\n  'dna': 0xAE00FE,\n  'rna': 0xFD0162,\n  'carbohydrate': 0xA6A6FA\n});\nvar DefaultSecondaryStructureColor = Color(0x808080);\nvar Description = 'Assigns a color based on the type of secondary structure and basic molecule type.';\nexport var SecondaryStructureColorThemeParams = {\n  saturation: PD.Numeric(-1, {\n    min: -6,\n    max: 6,\n    step: 0.1\n  }),\n  lightness: PD.Numeric(0, {\n    min: -6,\n    max: 6,\n    step: 0.1\n  })\n};\nexport function getSecondaryStructureColorThemeParams(ctx) {\n  return SecondaryStructureColorThemeParams; // TODO return copy\n}\nexport function secondaryStructureColor(colorMap, unit, element, computedSecondaryStructure) {\n  var secStrucType = SecondaryStructureType.create(0\n  /* None */\n  );\n\n  if (computedSecondaryStructure && Unit.isAtomic(unit)) {\n    var secondaryStructure = computedSecondaryStructure.get(unit.invariantId);\n    if (secondaryStructure) secStrucType = secondaryStructure.type[secondaryStructure.getIndex(unit.residueIndex[element])];\n  }\n\n  if (SecondaryStructureType.is(secStrucType, 2\n  /* Helix */\n  )) {\n    if (SecondaryStructureType.is(secStrucType, 2048\n    /* Helix3Ten */\n    )) {\n      return colorMap.threeTenHelix;\n    } else if (SecondaryStructureType.is(secStrucType, 32768\n    /* HelixPi */\n    )) {\n      return colorMap.piHelix;\n    }\n\n    return colorMap.alphaHelix;\n  } else if (SecondaryStructureType.is(secStrucType, 4\n  /* Beta */\n  )) {\n    return colorMap.betaStrand;\n  } else if (SecondaryStructureType.is(secStrucType, 8\n  /* Bend */\n  )) {\n    return colorMap.bend;\n  } else if (SecondaryStructureType.is(secStrucType, 16\n  /* Turn */\n  )) {\n    return colorMap.turn;\n  } else {\n    var moleculeType = getElementMoleculeType(unit, element);\n\n    if (moleculeType === 7\n    /* DNA */\n    ) {\n      return colorMap.dna;\n    } else if (moleculeType === 6\n    /* RNA */\n    ) {\n      return colorMap.rna;\n    } else if (moleculeType === 9\n    /* Saccharide */\n    ) {\n      return colorMap.carbohydrate;\n    } else if (moleculeType === 5\n    /* Protein */\n    ) {\n      return colorMap.coil;\n    }\n  }\n\n  return DefaultSecondaryStructureColor;\n}\nexport function SecondaryStructureColorTheme(ctx, props) {\n  var computedSecondaryStructure = ctx.structure && SecondaryStructureProvider.get(ctx.structure);\n  var contextHash = computedSecondaryStructure ? hash2(computedSecondaryStructure.id, computedSecondaryStructure.version) : -1;\n  var colorMap = getAdjustedColorMap(SecondaryStructureColors, props.saturation, props.lightness);\n\n  function color(location) {\n    if (StructureElement.Location.is(location)) {\n      return secondaryStructureColor(colorMap, location.unit, location.element, computedSecondaryStructure === null || computedSecondaryStructure === void 0 ? void 0 : computedSecondaryStructure.value);\n    } else if (Bond.isLocation(location)) {\n      return secondaryStructureColor(colorMap, location.aUnit, location.aUnit.elements[location.aIndex], computedSecondaryStructure === null || computedSecondaryStructure === void 0 ? void 0 : computedSecondaryStructure.value);\n    }\n\n    return DefaultSecondaryStructureColor;\n  }\n\n  return {\n    factory: SecondaryStructureColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    contextHash: contextHash,\n    description: Description,\n    legend: TableLegend(Object.keys(SecondaryStructureColors).map(function (name) {\n      return [name, SecondaryStructureColors[name]];\n    }).concat([['Other', DefaultSecondaryStructureColor]]))\n  };\n}\nexport var SecondaryStructureColorThemeProvider = {\n  name: 'secondary-structure',\n  label: 'Secondary Structure',\n  category: \"Residue Property\"\n  /* Residue */\n  ,\n  factory: SecondaryStructureColorTheme,\n  getParams: getSecondaryStructureColorThemeParams,\n  defaultValues: PD.getDefaultValues(SecondaryStructureColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure;\n  },\n  ensureCustomProperties: {\n    attach: function (ctx, data) {\n      return data.structure ? SecondaryStructureProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve();\n    },\n    detach: function (data) {\n      return data.structure && SecondaryStructureProvider.ref(data.structure, false);\n    }\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/secondary-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorMap } from '../../mol-util/color';\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { SecondaryStructureType } from '../../mol-model/structure/model/types';\r\nimport { getElementMoleculeType } from '../../mol-model/structure/util';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { TableLegend } from '../../mol-util/legend';\r\nimport { SecondaryStructureProvider } from '../../mol-model-props/computed/secondary-structure';\r\nimport { getAdjustedColorMap } from '../../mol-util/color/color';\r\nimport { hash2 } from '../../mol-data/util';\r\n// from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)\r\nvar SecondaryStructureColors = ColorMap({\r\n    'alphaHelix': 0xFF0080,\r\n    'threeTenHelix': 0xA00080,\r\n    'piHelix': 0x600080,\r\n    'betaTurn': 0x6080FF,\r\n    'betaStrand': 0xFFC800,\r\n    'coil': 0xFFFFFF,\r\n    'bend': 0x66D8C9 /* biting original color used 0x00FF00 */,\r\n    'turn': 0x00B266,\r\n    'dna': 0xAE00FE,\r\n    'rna': 0xFD0162,\r\n    'carbohydrate': 0xA6A6FA\r\n});\r\nvar DefaultSecondaryStructureColor = Color(0x808080);\r\nvar Description = 'Assigns a color based on the type of secondary structure and basic molecule type.';\r\nexport var SecondaryStructureColorThemeParams = {\r\n    saturation: PD.Numeric(-1, { min: -6, max: 6, step: 0.1 }),\r\n    lightness: PD.Numeric(0, { min: -6, max: 6, step: 0.1 })\r\n};\r\nexport function getSecondaryStructureColorThemeParams(ctx) {\r\n    return SecondaryStructureColorThemeParams; // TODO return copy\r\n}\r\nexport function secondaryStructureColor(colorMap, unit, element, computedSecondaryStructure) {\r\n    var secStrucType = SecondaryStructureType.create(0 /* None */);\r\n    if (computedSecondaryStructure && Unit.isAtomic(unit)) {\r\n        var secondaryStructure = computedSecondaryStructure.get(unit.invariantId);\r\n        if (secondaryStructure)\r\n            secStrucType = secondaryStructure.type[secondaryStructure.getIndex(unit.residueIndex[element])];\r\n    }\r\n    if (SecondaryStructureType.is(secStrucType, 2 /* Helix */)) {\r\n        if (SecondaryStructureType.is(secStrucType, 2048 /* Helix3Ten */)) {\r\n            return colorMap.threeTenHelix;\r\n        }\r\n        else if (SecondaryStructureType.is(secStrucType, 32768 /* HelixPi */)) {\r\n            return colorMap.piHelix;\r\n        }\r\n        return colorMap.alphaHelix;\r\n    }\r\n    else if (SecondaryStructureType.is(secStrucType, 4 /* Beta */)) {\r\n        return colorMap.betaStrand;\r\n    }\r\n    else if (SecondaryStructureType.is(secStrucType, 8 /* Bend */)) {\r\n        return colorMap.bend;\r\n    }\r\n    else if (SecondaryStructureType.is(secStrucType, 16 /* Turn */)) {\r\n        return colorMap.turn;\r\n    }\r\n    else {\r\n        var moleculeType = getElementMoleculeType(unit, element);\r\n        if (moleculeType === 7 /* DNA */) {\r\n            return colorMap.dna;\r\n        }\r\n        else if (moleculeType === 6 /* RNA */) {\r\n            return colorMap.rna;\r\n        }\r\n        else if (moleculeType === 9 /* Saccharide */) {\r\n            return colorMap.carbohydrate;\r\n        }\r\n        else if (moleculeType === 5 /* Protein */) {\r\n            return colorMap.coil;\r\n        }\r\n    }\r\n    return DefaultSecondaryStructureColor;\r\n}\r\nexport function SecondaryStructureColorTheme(ctx, props) {\r\n    var computedSecondaryStructure = ctx.structure && SecondaryStructureProvider.get(ctx.structure);\r\n    var contextHash = computedSecondaryStructure ? hash2(computedSecondaryStructure.id, computedSecondaryStructure.version) : -1;\r\n    var colorMap = getAdjustedColorMap(SecondaryStructureColors, props.saturation, props.lightness);\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location)) {\r\n            return secondaryStructureColor(colorMap, location.unit, location.element, computedSecondaryStructure === null || computedSecondaryStructure === void 0 ? void 0 : computedSecondaryStructure.value);\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            return secondaryStructureColor(colorMap, location.aUnit, location.aUnit.elements[location.aIndex], computedSecondaryStructure === null || computedSecondaryStructure === void 0 ? void 0 : computedSecondaryStructure.value);\r\n        }\r\n        return DefaultSecondaryStructureColor;\r\n    }\r\n    return {\r\n        factory: SecondaryStructureColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        contextHash: contextHash,\r\n        description: Description,\r\n        legend: TableLegend(Object.keys(SecondaryStructureColors).map(function (name) {\r\n            return [name, SecondaryStructureColors[name]];\r\n        }).concat([['Other', DefaultSecondaryStructureColor]]))\r\n    };\r\n}\r\nexport var SecondaryStructureColorThemeProvider = {\r\n    name: 'secondary-structure',\r\n    label: 'Secondary Structure',\r\n    category: \"Residue Property\" /* Residue */,\r\n    factory: SecondaryStructureColorTheme,\r\n    getParams: getSecondaryStructureColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(SecondaryStructureColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure; },\r\n    ensureCustomProperties: {\r\n        attach: function (ctx, data) { return data.structure ? SecondaryStructureProvider.attach(ctx, data.structure, void 0, true) : Promise.resolve(); },\r\n        detach: function (data) { return data.structure && SecondaryStructureProvider.ref(data.structure, false); }\r\n    }\r\n};\r\n//# sourceMappingURL=secondary-structure.js.map"]},"metadata":{},"sourceType":"module"}