{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nvar Matrix;\n\n(function (Matrix) {\n  function create(cols, rows, ctor) {\n    if (ctor === void 0) {\n      ctor = Float32Array;\n    }\n\n    var size = cols * rows;\n    return {\n      data: new ctor(size),\n      size: size,\n      cols: cols,\n      rows: rows\n    };\n  }\n\n  Matrix.create = create;\n  /** Get element assuming data are stored in column-major order */\n\n  function get(m, i, j) {\n    return m.data[m.rows * j + i];\n  }\n\n  Matrix.get = get;\n  /** Set element assuming data are stored in column-major order */\n\n  function set(m, i, j, value) {\n    m.data[m.rows * j + i] = value;\n    return m;\n  }\n\n  Matrix.set = set;\n  /** Add to element assuming data are stored in column-major order */\n\n  function add(m, i, j, value) {\n    m.data[m.rows * j + i] += value;\n    return m;\n  }\n\n  Matrix.add = add;\n  /** Zero out the matrix */\n\n  function makeZero(m) {\n    m.data.fill(0.0);\n    return m;\n  }\n\n  Matrix.makeZero = makeZero;\n\n  function clone(m) {\n    return {\n      data: m.data.slice(),\n      size: m.size,\n      cols: m.cols,\n      rows: m.rows\n    };\n  }\n\n  Matrix.clone = clone;\n\n  function fromArray(data, cols, rows) {\n    return {\n      data: data,\n      size: cols * rows,\n      cols: cols,\n      rows: rows\n    };\n  }\n\n  Matrix.fromArray = fromArray;\n\n  function transpose(out, mat) {\n    if (out.cols !== mat.rows || out.rows !== mat.cols) {\n      throw new Error('transpose: matrix dimensions incompatible');\n    }\n\n    if (out.data === mat.data) {\n      throw new Error('transpose: matrices share memory');\n    }\n\n    var nrows = mat.rows,\n        ncols = mat.cols;\n    var md = mat.data,\n        mtd = out.data;\n\n    for (var i = 0, mi = 0, mti = 0; i < nrows; mti += 1, mi += ncols, ++i) {\n      var ri = mti;\n\n      for (var j = 0; j < ncols; ri += nrows, j++) mtd[ri] = md[mi + j];\n    }\n\n    return out;\n  }\n\n  Matrix.transpose = transpose;\n  /** out = matA * matB' */\n\n  function multiplyABt(out, matA, matB) {\n    var ncols = matA.cols,\n        nrows = matA.rows,\n        mrows = matB.rows;\n    var ad = matA.data,\n        bd = matB.data,\n        cd = out.data;\n\n    for (var i = 0, matAp = 0, outP = 0; i < nrows; matAp += ncols, i++) {\n      for (var pB = 0, j = 0; j < mrows; outP++, j++) {\n        var sum = 0.0;\n        var pMatA = matAp;\n\n        for (var k = 0; k < ncols; pMatA++, pB++, k++) {\n          sum += ad[pMatA] * bd[pB];\n        }\n\n        cd[outP] = sum;\n      }\n    }\n\n    return out;\n  }\n\n  Matrix.multiplyABt = multiplyABt;\n  /** Get the mean of rows in `mat` */\n\n  function meanRows(mat) {\n    var nrows = mat.rows,\n        ncols = mat.cols;\n    var md = mat.data;\n    var mean = new Array(ncols);\n\n    for (var j = 0; j < ncols; ++j) mean[j] = 0.0;\n\n    for (var i = 0, p = 0; i < nrows; ++i) {\n      for (var j = 0; j < ncols; ++j, ++p) mean[j] += md[p];\n    }\n\n    for (var j = 0; j < ncols; ++j) mean[j] /= nrows;\n\n    return mean;\n  }\n\n  Matrix.meanRows = meanRows;\n  /** Subtract `row` from all rows in `mat` */\n\n  function subRows(mat, row) {\n    var nrows = mat.rows,\n        ncols = mat.cols;\n    var md = mat.data;\n\n    for (var i = 0, p = 0; i < nrows; ++i) {\n      for (var j = 0; j < ncols; ++j, ++p) md[p] -= row[j];\n    }\n\n    return mat;\n  }\n\n  Matrix.subRows = subRows;\n})(Matrix || (Matrix = {}));\n\nexport { Matrix };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/matrix/matrix.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nvar Matrix;\r\n(function (Matrix) {\r\n    function create(cols, rows, ctor) {\r\n        if (ctor === void 0) { ctor = Float32Array; }\r\n        var size = cols * rows;\r\n        return { data: new ctor(size), size: size, cols: cols, rows: rows };\r\n    }\r\n    Matrix.create = create;\r\n    /** Get element assuming data are stored in column-major order */\r\n    function get(m, i, j) {\r\n        return m.data[m.rows * j + i];\r\n    }\r\n    Matrix.get = get;\r\n    /** Set element assuming data are stored in column-major order */\r\n    function set(m, i, j, value) {\r\n        m.data[m.rows * j + i] = value;\r\n        return m;\r\n    }\r\n    Matrix.set = set;\r\n    /** Add to element assuming data are stored in column-major order */\r\n    function add(m, i, j, value) {\r\n        m.data[m.rows * j + i] += value;\r\n        return m;\r\n    }\r\n    Matrix.add = add;\r\n    /** Zero out the matrix */\r\n    function makeZero(m) {\r\n        m.data.fill(0.0);\r\n        return m;\r\n    }\r\n    Matrix.makeZero = makeZero;\r\n    function clone(m) {\r\n        return { data: m.data.slice(), size: m.size, cols: m.cols, rows: m.rows };\r\n    }\r\n    Matrix.clone = clone;\r\n    function fromArray(data, cols, rows) {\r\n        return { data: data, size: cols * rows, cols: cols, rows: rows };\r\n    }\r\n    Matrix.fromArray = fromArray;\r\n    function transpose(out, mat) {\r\n        if (out.cols !== mat.rows || out.rows !== mat.cols) {\r\n            throw new Error('transpose: matrix dimensions incompatible');\r\n        }\r\n        if (out.data === mat.data) {\r\n            throw new Error('transpose: matrices share memory');\r\n        }\r\n        var nrows = mat.rows, ncols = mat.cols;\r\n        var md = mat.data, mtd = out.data;\r\n        for (var i = 0, mi = 0, mti = 0; i < nrows; mti += 1, mi += ncols, ++i) {\r\n            var ri = mti;\r\n            for (var j = 0; j < ncols; ri += nrows, j++)\r\n                mtd[ri] = md[mi + j];\r\n        }\r\n        return out;\r\n    }\r\n    Matrix.transpose = transpose;\r\n    /** out = matA * matB' */\r\n    function multiplyABt(out, matA, matB) {\r\n        var ncols = matA.cols, nrows = matA.rows, mrows = matB.rows;\r\n        var ad = matA.data, bd = matB.data, cd = out.data;\r\n        for (var i = 0, matAp = 0, outP = 0; i < nrows; matAp += ncols, i++) {\r\n            for (var pB = 0, j = 0; j < mrows; outP++, j++) {\r\n                var sum = 0.0;\r\n                var pMatA = matAp;\r\n                for (var k = 0; k < ncols; pMatA++, pB++, k++) {\r\n                    sum += ad[pMatA] * bd[pB];\r\n                }\r\n                cd[outP] = sum;\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    Matrix.multiplyABt = multiplyABt;\r\n    /** Get the mean of rows in `mat` */\r\n    function meanRows(mat) {\r\n        var nrows = mat.rows, ncols = mat.cols;\r\n        var md = mat.data;\r\n        var mean = new Array(ncols);\r\n        for (var j = 0; j < ncols; ++j)\r\n            mean[j] = 0.0;\r\n        for (var i = 0, p = 0; i < nrows; ++i) {\r\n            for (var j = 0; j < ncols; ++j, ++p)\r\n                mean[j] += md[p];\r\n        }\r\n        for (var j = 0; j < ncols; ++j)\r\n            mean[j] /= nrows;\r\n        return mean;\r\n    }\r\n    Matrix.meanRows = meanRows;\r\n    /** Subtract `row` from all rows in `mat` */\r\n    function subRows(mat, row) {\r\n        var nrows = mat.rows, ncols = mat.cols;\r\n        var md = mat.data;\r\n        for (var i = 0, p = 0; i < nrows; ++i) {\r\n            for (var j = 0; j < ncols; ++j, ++p)\r\n                md[p] -= row[j];\r\n        }\r\n        return mat;\r\n    }\r\n    Matrix.subRows = subRows;\r\n})(Matrix || (Matrix = {}));\r\nexport { Matrix };\r\n//# sourceMappingURL=matrix.js.map"]},"metadata":{},"sourceType":"module"}