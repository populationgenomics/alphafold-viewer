{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Matrix } from './matrix';\nimport { Vec3 } from '../3d/vec3';\nimport { svd } from './svd';\nimport { Axes3D } from '../../geometry';\nexport { PrincipalAxes };\nvar PrincipalAxes;\n\n(function (PrincipalAxes) {\n  function ofPositions(positions) {\n    var momentsAxes = calculateMomentsAxes(positions);\n    var boxAxes = calculateBoxAxes(positions, momentsAxes);\n    return {\n      momentsAxes: momentsAxes,\n      boxAxes: boxAxes\n    };\n  }\n\n  PrincipalAxes.ofPositions = ofPositions;\n\n  function calculateMomentsAxes(positions) {\n    if (positions.length === 3) {\n      return Axes3D.create(Vec3.fromArray(Vec3(), positions, 0), Vec3.create(1, 0, 0), Vec3.create(0, 1, 0), Vec3.create(0, 1, 0));\n    }\n\n    var points = Matrix.fromArray(positions, 3, positions.length / 3);\n    var n = points.rows;\n    var n3 = n / 3;\n    var A = Matrix.create(3, 3);\n    var W = Matrix.create(1, 3);\n    var U = Matrix.create(3, 3);\n    var V = Matrix.create(3, 3); // calculate\n\n    var mean = Matrix.meanRows(points);\n    var pointsM = Matrix.subRows(Matrix.clone(points), mean);\n    var pointsT = Matrix.transpose(Matrix.create(n, 3), pointsM);\n    Matrix.multiplyABt(A, pointsT, pointsT);\n    svd(A, W, U, V); // origin\n\n    var origin = Vec3.create(mean[0], mean[1], mean[2]); // directions\n\n    var dirA = Vec3.create(U.data[0], U.data[3], U.data[6]);\n    var dirB = Vec3.create(U.data[1], U.data[4], U.data[7]);\n    var dirC = Vec3.create(U.data[2], U.data[5], U.data[8]);\n    Vec3.scale(dirA, dirA, Math.sqrt(W.data[0] / n3));\n    Vec3.scale(dirB, dirB, Math.sqrt(W.data[1] / n3));\n    Vec3.scale(dirC, dirC, Math.sqrt(W.data[2] / n3));\n    return Axes3D.create(origin, dirA, dirB, dirC);\n  }\n\n  PrincipalAxes.calculateMomentsAxes = calculateMomentsAxes;\n  var tmpBoxVec = Vec3();\n  var tmpBoxVecA = Vec3();\n  var tmpBoxVecB = Vec3();\n  var tmpBoxVecC = Vec3();\n  /**\r\n   * Get the scale/length for each dimension for a box around the axes\r\n   * to enclose the given positions\r\n   */\n\n  function calculateBoxAxes(positions, momentsAxes) {\n    if (positions.length === 3) {\n      return Axes3D.clone(momentsAxes);\n    }\n\n    var d1a = -Infinity;\n    var d1b = -Infinity;\n    var d2a = -Infinity;\n    var d2b = -Infinity;\n    var d3a = -Infinity;\n    var d3b = -Infinity;\n    var p = Vec3();\n    var t = Vec3();\n    var center = momentsAxes.origin;\n    var normVecA = Vec3.normalize(tmpBoxVecA, momentsAxes.dirA);\n    var normVecB = Vec3.normalize(tmpBoxVecB, momentsAxes.dirB);\n    var normVecC = Vec3.normalize(tmpBoxVecC, momentsAxes.dirC);\n\n    for (var i = 0, il = positions.length; i < il; i += 3) {\n      Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecA, center);\n      var dp1 = Vec3.dot(normVecA, Vec3.normalize(t, Vec3.sub(t, p, center)));\n      var dt1 = Vec3.distance(p, center);\n\n      if (dp1 > 0) {\n        if (dt1 > d1a) d1a = dt1;\n      } else {\n        if (dt1 > d1b) d1b = dt1;\n      }\n\n      Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecB, center);\n      var dp2 = Vec3.dot(normVecB, Vec3.normalize(t, Vec3.sub(t, p, center)));\n      var dt2 = Vec3.distance(p, center);\n\n      if (dp2 > 0) {\n        if (dt2 > d2a) d2a = dt2;\n      } else {\n        if (dt2 > d2b) d2b = dt2;\n      }\n\n      Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecC, center);\n      var dp3 = Vec3.dot(normVecC, Vec3.normalize(t, Vec3.sub(t, p, center)));\n      var dt3 = Vec3.distance(p, center);\n\n      if (dp3 > 0) {\n        if (dt3 > d3a) d3a = dt3;\n      } else {\n        if (dt3 > d3b) d3b = dt3;\n      }\n    }\n\n    var dirA = Vec3.setMagnitude(Vec3(), normVecA, (d1a + d1b) / 2);\n    var dirB = Vec3.setMagnitude(Vec3(), normVecB, (d2a + d2b) / 2);\n    var dirC = Vec3.setMagnitude(Vec3(), normVecC, (d3a + d3b) / 2);\n    var origin = Vec3();\n\n    var addCornerHelper = function (d1, d2, d3) {\n      Vec3.copy(tmpBoxVec, center);\n      Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecA, d1);\n      Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecB, d2);\n      Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecC, d3);\n      Vec3.add(origin, origin, tmpBoxVec);\n    };\n\n    addCornerHelper(d1a, d2a, d3a);\n    addCornerHelper(d1a, d2a, -d3b);\n    addCornerHelper(d1a, -d2b, -d3b);\n    addCornerHelper(d1a, -d2b, d3a);\n    addCornerHelper(-d1b, -d2b, -d3b);\n    addCornerHelper(-d1b, -d2b, d3a);\n    addCornerHelper(-d1b, d2a, d3a);\n    addCornerHelper(-d1b, d2a, -d3b);\n    Vec3.scale(origin, origin, 1 / 8);\n    return Axes3D.create(origin, dirA, dirB, dirC);\n  }\n\n  PrincipalAxes.calculateBoxAxes = calculateBoxAxes;\n})(PrincipalAxes || (PrincipalAxes = {}));","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/matrix/principal-axes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Matrix } from './matrix';\r\nimport { Vec3 } from '../3d/vec3';\r\nimport { svd } from './svd';\r\nimport { Axes3D } from '../../geometry';\r\nexport { PrincipalAxes };\r\nvar PrincipalAxes;\r\n(function (PrincipalAxes) {\r\n    function ofPositions(positions) {\r\n        var momentsAxes = calculateMomentsAxes(positions);\r\n        var boxAxes = calculateBoxAxes(positions, momentsAxes);\r\n        return { momentsAxes: momentsAxes, boxAxes: boxAxes };\r\n    }\r\n    PrincipalAxes.ofPositions = ofPositions;\r\n    function calculateMomentsAxes(positions) {\r\n        if (positions.length === 3) {\r\n            return Axes3D.create(Vec3.fromArray(Vec3(), positions, 0), Vec3.create(1, 0, 0), Vec3.create(0, 1, 0), Vec3.create(0, 1, 0));\r\n        }\r\n        var points = Matrix.fromArray(positions, 3, positions.length / 3);\r\n        var n = points.rows;\r\n        var n3 = n / 3;\r\n        var A = Matrix.create(3, 3);\r\n        var W = Matrix.create(1, 3);\r\n        var U = Matrix.create(3, 3);\r\n        var V = Matrix.create(3, 3);\r\n        // calculate\r\n        var mean = Matrix.meanRows(points);\r\n        var pointsM = Matrix.subRows(Matrix.clone(points), mean);\r\n        var pointsT = Matrix.transpose(Matrix.create(n, 3), pointsM);\r\n        Matrix.multiplyABt(A, pointsT, pointsT);\r\n        svd(A, W, U, V);\r\n        // origin\r\n        var origin = Vec3.create(mean[0], mean[1], mean[2]);\r\n        // directions\r\n        var dirA = Vec3.create(U.data[0], U.data[3], U.data[6]);\r\n        var dirB = Vec3.create(U.data[1], U.data[4], U.data[7]);\r\n        var dirC = Vec3.create(U.data[2], U.data[5], U.data[8]);\r\n        Vec3.scale(dirA, dirA, Math.sqrt(W.data[0] / n3));\r\n        Vec3.scale(dirB, dirB, Math.sqrt(W.data[1] / n3));\r\n        Vec3.scale(dirC, dirC, Math.sqrt(W.data[2] / n3));\r\n        return Axes3D.create(origin, dirA, dirB, dirC);\r\n    }\r\n    PrincipalAxes.calculateMomentsAxes = calculateMomentsAxes;\r\n    var tmpBoxVec = Vec3();\r\n    var tmpBoxVecA = Vec3();\r\n    var tmpBoxVecB = Vec3();\r\n    var tmpBoxVecC = Vec3();\r\n    /**\r\n     * Get the scale/length for each dimension for a box around the axes\r\n     * to enclose the given positions\r\n     */\r\n    function calculateBoxAxes(positions, momentsAxes) {\r\n        if (positions.length === 3) {\r\n            return Axes3D.clone(momentsAxes);\r\n        }\r\n        var d1a = -Infinity;\r\n        var d1b = -Infinity;\r\n        var d2a = -Infinity;\r\n        var d2b = -Infinity;\r\n        var d3a = -Infinity;\r\n        var d3b = -Infinity;\r\n        var p = Vec3();\r\n        var t = Vec3();\r\n        var center = momentsAxes.origin;\r\n        var normVecA = Vec3.normalize(tmpBoxVecA, momentsAxes.dirA);\r\n        var normVecB = Vec3.normalize(tmpBoxVecB, momentsAxes.dirB);\r\n        var normVecC = Vec3.normalize(tmpBoxVecC, momentsAxes.dirC);\r\n        for (var i = 0, il = positions.length; i < il; i += 3) {\r\n            Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecA, center);\r\n            var dp1 = Vec3.dot(normVecA, Vec3.normalize(t, Vec3.sub(t, p, center)));\r\n            var dt1 = Vec3.distance(p, center);\r\n            if (dp1 > 0) {\r\n                if (dt1 > d1a)\r\n                    d1a = dt1;\r\n            }\r\n            else {\r\n                if (dt1 > d1b)\r\n                    d1b = dt1;\r\n            }\r\n            Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecB, center);\r\n            var dp2 = Vec3.dot(normVecB, Vec3.normalize(t, Vec3.sub(t, p, center)));\r\n            var dt2 = Vec3.distance(p, center);\r\n            if (dp2 > 0) {\r\n                if (dt2 > d2a)\r\n                    d2a = dt2;\r\n            }\r\n            else {\r\n                if (dt2 > d2b)\r\n                    d2b = dt2;\r\n            }\r\n            Vec3.projectPointOnVector(p, Vec3.fromArray(p, positions, i), normVecC, center);\r\n            var dp3 = Vec3.dot(normVecC, Vec3.normalize(t, Vec3.sub(t, p, center)));\r\n            var dt3 = Vec3.distance(p, center);\r\n            if (dp3 > 0) {\r\n                if (dt3 > d3a)\r\n                    d3a = dt3;\r\n            }\r\n            else {\r\n                if (dt3 > d3b)\r\n                    d3b = dt3;\r\n            }\r\n        }\r\n        var dirA = Vec3.setMagnitude(Vec3(), normVecA, (d1a + d1b) / 2);\r\n        var dirB = Vec3.setMagnitude(Vec3(), normVecB, (d2a + d2b) / 2);\r\n        var dirC = Vec3.setMagnitude(Vec3(), normVecC, (d3a + d3b) / 2);\r\n        var origin = Vec3();\r\n        var addCornerHelper = function (d1, d2, d3) {\r\n            Vec3.copy(tmpBoxVec, center);\r\n            Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecA, d1);\r\n            Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecB, d2);\r\n            Vec3.scaleAndAdd(tmpBoxVec, tmpBoxVec, normVecC, d3);\r\n            Vec3.add(origin, origin, tmpBoxVec);\r\n        };\r\n        addCornerHelper(d1a, d2a, d3a);\r\n        addCornerHelper(d1a, d2a, -d3b);\r\n        addCornerHelper(d1a, -d2b, -d3b);\r\n        addCornerHelper(d1a, -d2b, d3a);\r\n        addCornerHelper(-d1b, -d2b, -d3b);\r\n        addCornerHelper(-d1b, -d2b, d3a);\r\n        addCornerHelper(-d1b, d2a, d3a);\r\n        addCornerHelper(-d1b, d2a, -d3b);\r\n        Vec3.scale(origin, origin, 1 / 8);\r\n        return Axes3D.create(origin, dirA, dirB, dirC);\r\n    }\r\n    PrincipalAxes.calculateBoxAxes = calculateBoxAxes;\r\n})(PrincipalAxes || (PrincipalAxes = {}));\r\n//# sourceMappingURL=principal-axes.js.map"]},"metadata":{},"sourceType":"module"}