{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { StructureElement, StructureProperties as P } from '../../structure';\nimport { Segmentation } from '../../../../mol-data/int';\nimport { CifWriter } from '../../../../mol-io/writer/cif';\nimport { Column } from '../../../../mol-data/db';\nexport function atom_site_operator_mapping(ctx) {\n  var entries = getEntries(ctx);\n  if (entries.length === 0) return;\n  return [Category, entries, {\n    ignoreFilter: true\n  }];\n}\nexport var AtomSiteOperatorMappingCategoryName = 'molstar_atom_site_operator_mapping';\nexport var AtomSiteOperatorMappingSchema = {\n  molstar_atom_site_operator_mapping: {\n    label_asym_id: Column.Schema.Str(),\n    auth_asym_id: Column.Schema.Str(),\n    operator_name: Column.Schema.Str(),\n    suffix: Column.Schema.Str(),\n    // assembly\n    assembly_id: Column.Schema.Str(),\n    assembly_operator_id: Column.Schema.Int(),\n    // symmetry\n    symmetry_operator_index: Column.Schema.Int(),\n    symmetry_hkl: Column.Schema.Vector(3),\n    // NCS\n    ncs_id: Column.Schema.Int()\n  }\n};\n\nvar asmValueKind = function (i, xs) {\n  return typeof xs[i].operator.assembly === 'undefined' ? 1\n  /* NotPresent */\n  : 0\n  /* Present */\n  ;\n};\n\nvar symmetryValueKind = function (i, xs) {\n  return xs[i].operator.spgrOp === -1 ? 1\n  /* NotPresent */\n  : 0\n  /* Present */\n  ;\n};\n\nvar Fields = CifWriter.fields().str('label_asym_id', function (i, xs) {\n  return xs[i].label_asym_id;\n}).str('auth_asym_id', function (i, xs) {\n  return xs[i].auth_asym_id;\n}).str('operator_name', function (i, xs) {\n  return xs[i].operator.name;\n}).str('suffix', function (i, xs) {\n  return xs[i].operator.suffix;\n}) // assembly\n// TODO: include oper list as well?\n.str('assembly_id', function (i, xs) {\n  var _a;\n\n  return ((_a = xs[i].operator.assembly) === null || _a === void 0 ? void 0 : _a.id) || '';\n}, {\n  valueKind: asmValueKind\n}).int('assembly_operator_id', function (i, xs) {\n  var _a;\n\n  return ((_a = xs[i].operator.assembly) === null || _a === void 0 ? void 0 : _a.operId) || 0;\n}, {\n  valueKind: asmValueKind\n}) // symmetry\n.int('symmetry_operator_index', function (i, xs) {\n  return xs[i].operator.spgrOp;\n}, {\n  valueKind: symmetryValueKind\n}).vec('symmetry_hkl', [function (i, xs) {\n  return xs[i].operator.hkl[0];\n}, function (i, xs) {\n  return xs[i].operator.hkl[1];\n}, function (i, xs) {\n  return xs[i].operator.hkl[2];\n}], {\n  valueKind: symmetryValueKind\n}) // NCS\n.int('ncs_id', function (i, xs) {\n  return xs[i].operator.ncsId;\n}, {\n  valueKind: symmetryValueKind\n}).getFields();\nvar Category = {\n  name: 'molstar_atom_site_operator_mapping',\n  instance: function (entries) {\n    return {\n      fields: Fields,\n      source: [{\n        data: entries,\n        rowCount: entries.length\n      }]\n    };\n  }\n};\n\nfunction getEntries(ctx) {\n  var existing = new Set();\n  var entries = [];\n\n  for (var _i = 0, _a = ctx.structures; _i < _a.length; _i++) {\n    var s = _a[_i];\n    var l = StructureElement.Location.create(s);\n\n    for (var _b = 0, _c = s.units; _b < _c.length; _b++) {\n      var unit = _c[_b];\n      var operator = unit.conformation.operator;\n      if (!operator.suffix || unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\n\n      while (chainsIt.hasNext) {\n        var chainSegment = chainsIt.move();\n        l.element = elements[chainSegment.start];\n        var label_asym_id = P.chain.label_asym_id(l);\n        var key = \"\" + label_asym_id + operator.suffix;\n        if (existing.has(key)) continue;\n        existing.add(key);\n        var auth_asym_id = P.chain.label_asym_id(l);\n        entries.push({\n          label_asym_id: label_asym_id,\n          auth_asym_id: auth_asym_id,\n          operator: operator\n        });\n      }\n    }\n  }\n\n  return entries;\n}","map":{"version":3,"sources":["../../../../../src/mol-model/structure/export/categories/atom_site_operator_mapping.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { StructureElement, StructureProperties as P } from '../../structure';\r\nimport { Segmentation } from '../../../../mol-data/int';\r\nimport { CifWriter } from '../../../../mol-io/writer/cif';\r\nimport { Column } from '../../../../mol-data/db';\r\nexport function atom_site_operator_mapping(ctx) {\r\n    var entries = getEntries(ctx);\r\n    if (entries.length === 0)\r\n        return;\r\n    return [Category, entries, { ignoreFilter: true }];\r\n}\r\nexport var AtomSiteOperatorMappingCategoryName = 'molstar_atom_site_operator_mapping';\r\nexport var AtomSiteOperatorMappingSchema = {\r\n    molstar_atom_site_operator_mapping: {\r\n        label_asym_id: Column.Schema.Str(),\r\n        auth_asym_id: Column.Schema.Str(),\r\n        operator_name: Column.Schema.Str(),\r\n        suffix: Column.Schema.Str(),\r\n        // assembly\r\n        assembly_id: Column.Schema.Str(),\r\n        assembly_operator_id: Column.Schema.Int(),\r\n        // symmetry\r\n        symmetry_operator_index: Column.Schema.Int(),\r\n        symmetry_hkl: Column.Schema.Vector(3),\r\n        // NCS\r\n        ncs_id: Column.Schema.Int(),\r\n    }\r\n};\r\nvar asmValueKind = function (i, xs) { return typeof xs[i].operator.assembly === 'undefined' ? 1 /* NotPresent */ : 0 /* Present */; };\r\nvar symmetryValueKind = function (i, xs) { return xs[i].operator.spgrOp === -1 ? 1 /* NotPresent */ : 0 /* Present */; };\r\nvar Fields = CifWriter.fields()\r\n    .str('label_asym_id', function (i, xs) { return xs[i].label_asym_id; })\r\n    .str('auth_asym_id', function (i, xs) { return xs[i].auth_asym_id; })\r\n    .str('operator_name', function (i, xs) { return xs[i].operator.name; })\r\n    .str('suffix', function (i, xs) { return xs[i].operator.suffix; })\r\n    // assembly\r\n    // TODO: include oper list as well?\r\n    .str('assembly_id', function (i, xs) { var _a; return ((_a = xs[i].operator.assembly) === null || _a === void 0 ? void 0 : _a.id) || ''; }, { valueKind: asmValueKind })\r\n    .int('assembly_operator_id', function (i, xs) { var _a; return ((_a = xs[i].operator.assembly) === null || _a === void 0 ? void 0 : _a.operId) || 0; }, { valueKind: asmValueKind })\r\n    // symmetry\r\n    .int('symmetry_operator_index', function (i, xs) { return xs[i].operator.spgrOp; }, { valueKind: symmetryValueKind })\r\n    .vec('symmetry_hkl', [function (i, xs) { return xs[i].operator.hkl[0]; }, function (i, xs) { return xs[i].operator.hkl[1]; }, function (i, xs) { return xs[i].operator.hkl[2]; }], { valueKind: symmetryValueKind })\r\n    // NCS\r\n    .int('ncs_id', function (i, xs) { return xs[i].operator.ncsId; }, { valueKind: symmetryValueKind })\r\n    .getFields();\r\nvar Category = {\r\n    name: 'molstar_atom_site_operator_mapping',\r\n    instance: function (entries) {\r\n        return { fields: Fields, source: [{ data: entries, rowCount: entries.length }] };\r\n    }\r\n};\r\nfunction getEntries(ctx) {\r\n    var existing = new Set();\r\n    var entries = [];\r\n    for (var _i = 0, _a = ctx.structures; _i < _a.length; _i++) {\r\n        var s = _a[_i];\r\n        var l = StructureElement.Location.create(s);\r\n        for (var _b = 0, _c = s.units; _b < _c.length; _b++) {\r\n            var unit = _c[_b];\r\n            var operator = unit.conformation.operator;\r\n            if (!operator.suffix || unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\r\n            while (chainsIt.hasNext) {\r\n                var chainSegment = chainsIt.move();\r\n                l.element = elements[chainSegment.start];\r\n                var label_asym_id = P.chain.label_asym_id(l);\r\n                var key = \"\" + label_asym_id + operator.suffix;\r\n                if (existing.has(key))\r\n                    continue;\r\n                existing.add(key);\r\n                var auth_asym_id = P.chain.label_asym_id(l);\r\n                entries.push({ label_asym_id: label_asym_id, auth_asym_id: auth_asym_id, operator: operator });\r\n            }\r\n        }\r\n    }\r\n    return entries;\r\n}\r\n//# sourceMappingURL=atom_site_operator_mapping.js.map"]},"metadata":{},"sourceType":"module"}