{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\nimport { EmptyLoci } from '../../../mol-model/loci';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { createLinkCylinderMesh, LinkCylinderParams } from './util/link';\nimport { OrderedSet, Interval } from '../../../mol-data/int';\nimport { ComplexMeshVisual } from '../complex-visual';\nimport { UnitsMeshParams } from '../units-visual';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\nimport { getAltResidueLociFromId } from './util/common';\n\nfunction createCarbohydrateLinkCylinderMesh(ctx, structure, theme, props, mesh) {\n  var _a = structure.carbohydrates,\n      links = _a.links,\n      elements = _a.elements;\n  var linkSizeFactor = props.linkSizeFactor;\n  var location = StructureElement.Location.create(structure);\n  var builderProps = {\n    linkCount: links.length,\n    position: function (posA, posB, edgeIndex) {\n      var l = links[edgeIndex];\n      Vec3.copy(posA, elements[l.carbohydrateIndexA].geometry.center);\n      Vec3.copy(posB, elements[l.carbohydrateIndexB].geometry.center);\n    },\n    radius: function (edgeIndex) {\n      var l = links[edgeIndex];\n      var carbA = elements[l.carbohydrateIndexA];\n      var ringA = carbA.unit.rings.all[carbA.ringIndex];\n      location.unit = carbA.unit;\n      location.element = carbA.unit.elements[ringA[0]];\n      return theme.size.size(location) * linkSizeFactor;\n    }\n  };\n  return createLinkCylinderMesh(ctx, builderProps, props, mesh);\n}\n\nexport var CarbohydrateLinkParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), {\n  linkSizeFactor: PD.Numeric(0.3, {\n    min: 0,\n    max: 3,\n    step: 0.01\n  })\n});\nexport function CarbohydrateLinkVisual(materialId) {\n  return ComplexMeshVisual({\n    defaultProps: PD.getDefaultValues(CarbohydrateLinkParams),\n    createGeometry: createCarbohydrateLinkCylinderMesh,\n    createLocationIterator: CarbohydrateLinkIterator,\n    getLoci: getLinkLoci,\n    eachLocation: eachCarbohydrateLink,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.linkSizeFactor !== currentProps.linkSizeFactor || newProps.radialSegments !== currentProps.radialSegments || newProps.linkCap !== currentProps.linkCap;\n    }\n  }, materialId);\n}\n\nfunction CarbohydrateLinkIterator(structure) {\n  var _a = structure.carbohydrates,\n      elements = _a.elements,\n      links = _a.links;\n  var groupCount = links.length;\n  var instanceCount = 1;\n  var location = StructureElement.Location.create(structure);\n\n  var getLocation = function (groupIndex) {\n    var link = links[groupIndex];\n    var carbA = elements[link.carbohydrateIndexA];\n    var ringA = carbA.unit.rings.all[carbA.ringIndex];\n    location.unit = carbA.unit;\n    location.element = carbA.unit.elements[ringA[0]];\n    return location;\n  };\n\n  return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\n}\n\nfunction getLinkLoci(pickingId, structure, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var _a = structure.carbohydrates,\n        links = _a.links,\n        elements = _a.elements;\n    var l = links[groupId];\n    var carbA = elements[l.carbohydrateIndexA];\n    var carbB = elements[l.carbohydrateIndexB];\n    return StructureElement.Loci.union(getAltResidueLociFromId(structure, carbA.unit, carbA.residueIndex, carbA.altId), getAltResidueLociFromId(structure, carbB.unit, carbB.residueIndex, carbB.altId));\n  }\n\n  return EmptyLoci;\n}\n\nfunction eachCarbohydrateLink(loci, structure, apply) {\n  var changed = false;\n  if (!StructureElement.Loci.is(loci)) return false;\n  if (!Structure.areEquivalent(loci.structure, structure)) return false;\n  var getLinkIndices = structure.carbohydrates.getLinkIndices;\n\n  var _loop_1 = function (unit, indices) {\n    if (!Unit.isAtomic(unit)) return \"continue\";\n    OrderedSet.forEach(indices, function (v) {\n      // TODO avoid duplicate calls to apply\n      var linkIndices = getLinkIndices(unit, unit.elements[v]);\n\n      for (var i = 0, il = linkIndices.length; i < il; ++i) {\n        if (apply(Interval.ofSingleton(linkIndices[i]))) changed = true;\n      }\n    });\n  };\n\n  for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        unit = _b.unit,\n        indices = _b.indices;\n\n    _loop_1(unit, indices);\n  }\n\n  return changed;\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/carbohydrate-link-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\r\nimport { EmptyLoci } from '../../../mol-model/loci';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { createLinkCylinderMesh, LinkCylinderParams } from './util/link';\r\nimport { OrderedSet, Interval } from '../../../mol-data/int';\r\nimport { ComplexMeshVisual } from '../complex-visual';\r\nimport { UnitsMeshParams } from '../units-visual';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\r\nimport { getAltResidueLociFromId } from './util/common';\r\nfunction createCarbohydrateLinkCylinderMesh(ctx, structure, theme, props, mesh) {\r\n    var _a = structure.carbohydrates, links = _a.links, elements = _a.elements;\r\n    var linkSizeFactor = props.linkSizeFactor;\r\n    var location = StructureElement.Location.create(structure);\r\n    var builderProps = {\r\n        linkCount: links.length,\r\n        position: function (posA, posB, edgeIndex) {\r\n            var l = links[edgeIndex];\r\n            Vec3.copy(posA, elements[l.carbohydrateIndexA].geometry.center);\r\n            Vec3.copy(posB, elements[l.carbohydrateIndexB].geometry.center);\r\n        },\r\n        radius: function (edgeIndex) {\r\n            var l = links[edgeIndex];\r\n            var carbA = elements[l.carbohydrateIndexA];\r\n            var ringA = carbA.unit.rings.all[carbA.ringIndex];\r\n            location.unit = carbA.unit;\r\n            location.element = carbA.unit.elements[ringA[0]];\r\n            return theme.size.size(location) * linkSizeFactor;\r\n        },\r\n    };\r\n    return createLinkCylinderMesh(ctx, builderProps, props, mesh);\r\n}\r\nexport var CarbohydrateLinkParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), { linkSizeFactor: PD.Numeric(0.3, { min: 0, max: 3, step: 0.01 }) });\r\nexport function CarbohydrateLinkVisual(materialId) {\r\n    return ComplexMeshVisual({\r\n        defaultProps: PD.getDefaultValues(CarbohydrateLinkParams),\r\n        createGeometry: createCarbohydrateLinkCylinderMesh,\r\n        createLocationIterator: CarbohydrateLinkIterator,\r\n        getLoci: getLinkLoci,\r\n        eachLocation: eachCarbohydrateLink,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.linkSizeFactor !== currentProps.linkSizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments ||\r\n                newProps.linkCap !== currentProps.linkCap);\r\n        }\r\n    }, materialId);\r\n}\r\nfunction CarbohydrateLinkIterator(structure) {\r\n    var _a = structure.carbohydrates, elements = _a.elements, links = _a.links;\r\n    var groupCount = links.length;\r\n    var instanceCount = 1;\r\n    var location = StructureElement.Location.create(structure);\r\n    var getLocation = function (groupIndex) {\r\n        var link = links[groupIndex];\r\n        var carbA = elements[link.carbohydrateIndexA];\r\n        var ringA = carbA.unit.rings.all[carbA.ringIndex];\r\n        location.unit = carbA.unit;\r\n        location.element = carbA.unit.elements[ringA[0]];\r\n        return location;\r\n    };\r\n    return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\r\n}\r\nfunction getLinkLoci(pickingId, structure, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var _a = structure.carbohydrates, links = _a.links, elements = _a.elements;\r\n        var l = links[groupId];\r\n        var carbA = elements[l.carbohydrateIndexA];\r\n        var carbB = elements[l.carbohydrateIndexB];\r\n        return StructureElement.Loci.union(getAltResidueLociFromId(structure, carbA.unit, carbA.residueIndex, carbA.altId), getAltResidueLociFromId(structure, carbB.unit, carbB.residueIndex, carbB.altId));\r\n    }\r\n    return EmptyLoci;\r\n}\r\nfunction eachCarbohydrateLink(loci, structure, apply) {\r\n    var changed = false;\r\n    if (!StructureElement.Loci.is(loci))\r\n        return false;\r\n    if (!Structure.areEquivalent(loci.structure, structure))\r\n        return false;\r\n    var getLinkIndices = structure.carbohydrates.getLinkIndices;\r\n    var _loop_1 = function (unit, indices) {\r\n        if (!Unit.isAtomic(unit))\r\n            return \"continue\";\r\n        OrderedSet.forEach(indices, function (v) {\r\n            // TODO avoid duplicate calls to apply\r\n            var linkIndices = getLinkIndices(unit, unit.elements[v]);\r\n            for (var i = 0, il = linkIndices.length; i < il; ++i) {\r\n                if (apply(Interval.ofSingleton(linkIndices[i])))\r\n                    changed = true;\r\n            }\r\n        });\r\n    };\r\n    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n        var _b = _a[_i], unit = _b.unit, indices = _b.indices;\r\n        _loop_1(unit, indices);\r\n    }\r\n    return changed;\r\n}\r\n//# sourceMappingURL=carbohydrate-link-cylinder.js.map"]},"metadata":{},"sourceType":"module"}