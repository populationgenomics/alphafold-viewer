{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\nimport { Box, PerforatedBox } from '../../../mol-geo/primitive/box';\nimport { OctagonalPyramid, PerforatedOctagonalPyramid } from '../../../mol-geo/primitive/pyramid';\nimport { Star } from '../../../mol-geo/primitive/star';\nimport { Octahedron, PerforatedOctahedron } from '../../../mol-geo/primitive/octahedron';\nimport { DiamondPrism, PentagonalPrism, ShiftedHexagonalPrism, HexagonalPrism, HeptagonalPrism } from '../../../mol-geo/primitive/prism';\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { getSaccharideShape } from '../../../mol-model/structure/structure/carbohydrates/constants';\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\nimport { ComplexMeshParams, ComplexMeshVisual } from '../complex-visual';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\nimport { OrderedSet, Interval } from '../../../mol-data/int';\nimport { EmptyLoci } from '../../../mol-model/loci';\nimport { getAltResidueLociFromId } from './util/common';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nvar t = Mat4.identity();\nvar sVec = Vec3.zero();\nvar pd = Vec3.zero();\nvar SideFactor = 2 * 0.806; // 0.806 == Math.cos(Math.PI / 4)\n\nvar box = Box();\nvar perforatedBox = PerforatedBox();\nvar octagonalPyramid = OctagonalPyramid();\nvar perforatedOctagonalPyramid = PerforatedOctagonalPyramid();\nvar star = Star({\n  outerRadius: 1,\n  innerRadius: 0.5,\n  thickness: 0.5,\n  pointCount: 5\n});\nvar octahedron = Octahedron();\nvar perforatedOctahedron = PerforatedOctahedron();\nvar diamondPrism = DiamondPrism();\nvar pentagonalPrism = PentagonalPrism();\nvar hexagonalPrism = HexagonalPrism();\nvar shiftedHexagonalPrism = ShiftedHexagonalPrism();\nvar heptagonalPrism = HeptagonalPrism();\n\nfunction createCarbohydrateSymbolMesh(ctx, structure, theme, props, mesh) {\n  var builderState = MeshBuilder.createState(256, 128, mesh);\n  var detail = props.detail,\n      sizeFactor = props.sizeFactor;\n  var carbohydrates = structure.carbohydrates;\n  var n = carbohydrates.elements.length;\n  var l = StructureElement.Location.create(structure);\n\n  for (var i = 0; i < n; ++i) {\n    var c = carbohydrates.elements[i];\n    var ring = c.unit.rings.all[c.ringIndex];\n    var shapeType = getSaccharideShape(c.component.type, ring.length);\n    l.unit = c.unit;\n    l.element = c.unit.elements[ring[0]];\n    var size = theme.size.size(l);\n    var radius = size * sizeFactor;\n    var side = size * sizeFactor * SideFactor;\n    var _a = c.geometry,\n        center = _a.center,\n        normal = _a.normal,\n        direction = _a.direction;\n    Vec3.add(pd, center, direction);\n    Mat4.targetTo(t, center, pd, normal);\n    Mat4.setTranslation(t, center);\n    builderState.currentGroup = i * 2;\n\n    switch (shapeType) {\n      case 0\n      /* FilledSphere */\n      :\n        addSphere(builderState, center, radius, detail);\n        break;\n\n      case 1\n      /* FilledCube */\n      :\n        Mat4.scaleUniformly(t, t, side);\n        MeshBuilder.addPrimitive(builderState, t, box);\n        break;\n\n      case 2\n      /* CrossedCube */\n      :\n        Mat4.scaleUniformly(t, t, side);\n        MeshBuilder.addPrimitive(builderState, t, perforatedBox);\n        Mat4.mul(t, t, Mat4.rotZ90X180);\n        builderState.currentGroup += 1;\n        MeshBuilder.addPrimitive(builderState, t, perforatedBox);\n        break;\n\n      case 4\n      /* FilledCone */\n      :\n        Mat4.scaleUniformly(t, t, side * 1.2);\n        MeshBuilder.addPrimitive(builderState, t, octagonalPyramid);\n        break;\n\n      case 5\n      /* DevidedCone */\n      :\n        Mat4.scaleUniformly(t, t, side * 1.2);\n        MeshBuilder.addPrimitive(builderState, t, perforatedOctagonalPyramid);\n        Mat4.mul(t, t, Mat4.rotZ90);\n        builderState.currentGroup += 1;\n        MeshBuilder.addPrimitive(builderState, t, perforatedOctagonalPyramid);\n        break;\n\n      case 6\n      /* FlatBox */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, box);\n        break;\n\n      case 7\n      /* FilledStar */\n      :\n        Mat4.scaleUniformly(t, t, side);\n        Mat4.mul(t, t, Mat4.rotZY90);\n        MeshBuilder.addPrimitive(builderState, t, star);\n        break;\n\n      case 8\n      /* FilledDiamond */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side * 1.4, side * 1.4, side * 1.4));\n        MeshBuilder.addPrimitive(builderState, t, octahedron);\n        break;\n\n      case 3\n      /* DividedDiamond */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side * 1.4, side * 1.4, side * 1.4));\n        MeshBuilder.addPrimitive(builderState, t, perforatedOctahedron);\n        Mat4.mul(t, t, Mat4.rotY90);\n        builderState.currentGroup += 1;\n        MeshBuilder.addPrimitive(builderState, t, perforatedOctahedron);\n        break;\n\n      case 9\n      /* FlatDiamond */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side / 2, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, diamondPrism);\n        break;\n\n      case 12\n      /* DiamondPrism */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, diamondPrism);\n        break;\n\n      case 13\n      /* PentagonalPrism */\n      :\n      case 11\n      /* Pentagon */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, pentagonalPrism);\n        break;\n\n      case 14\n      /* HexagonalPrism */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, hexagonalPrism);\n        break;\n\n      case 15\n      /* HeptagonalPrism */\n      :\n        Mat4.mul(t, t, Mat4.rotZY90);\n        Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, heptagonalPrism);\n        break;\n\n      case 10\n      /* FlatHexagon */\n      :\n      default:\n        Mat4.mul(t, t, Mat4.rotZYZ90);\n        Mat4.scale(t, t, Vec3.set(sVec, side / 1.5, side, side / 2));\n        MeshBuilder.addPrimitive(builderState, t, shiftedHexagonalPrism);\n        break;\n    }\n  }\n\n  return MeshBuilder.getMesh(builderState);\n}\n\nexport var CarbohydrateSymbolParams = __assign(__assign({}, ComplexMeshParams), {\n  detail: PD.Numeric(0, {\n    min: 0,\n    max: 3,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo),\n  sizeFactor: PD.Numeric(1.75, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  })\n});\nexport function CarbohydrateSymbolVisual(materialId) {\n  return ComplexMeshVisual({\n    defaultProps: PD.getDefaultValues(CarbohydrateSymbolParams),\n    createGeometry: createCarbohydrateSymbolMesh,\n    createLocationIterator: CarbohydrateElementIterator,\n    getLoci: getCarbohydrateLoci,\n    eachLocation: eachCarbohydrate,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.detail !== currentProps.detail;\n    }\n  }, materialId);\n}\n\nfunction CarbohydrateElementIterator(structure) {\n  var carbElements = structure.carbohydrates.elements;\n  var groupCount = carbElements.length * 2;\n  var instanceCount = 1;\n  var location = StructureElement.Location.create(structure);\n\n  function getLocation(groupIndex, instanceIndex) {\n    var carb = carbElements[Math.floor(groupIndex / 2)];\n    var ring = carb.unit.rings.all[carb.ringIndex];\n    location.unit = carb.unit;\n    location.element = carb.unit.elements[ring[0]];\n    return location;\n  }\n\n  function isSecondary(elementIndex, instanceIndex) {\n    return elementIndex % 2 === 1;\n  }\n\n  return LocationIterator(groupCount, instanceCount, 1, getLocation, true, isSecondary);\n}\n/** Return a Loci for the elements of the whole residue of a carbohydrate. */\n\n\nfunction getCarbohydrateLoci(pickingId, structure, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var carb = structure.carbohydrates.elements[Math.floor(groupId / 2)];\n    return getAltResidueLociFromId(structure, carb.unit, carb.residueIndex, carb.altId);\n  }\n\n  return EmptyLoci;\n}\n/** For each carbohydrate (usually a monosaccharide) when all its residue's elements are in a loci. */\n\n\nfunction eachCarbohydrate(loci, structure, apply) {\n  var getElementIndices = structure.carbohydrates.getElementIndices;\n  var changed = false;\n  if (!StructureElement.Loci.is(loci)) return false;\n  if (!Structure.areEquivalent(loci.structure, structure)) return false;\n\n  var _loop_1 = function (unit, indices) {\n    if (!Unit.isAtomic(unit)) return \"continue\";\n    OrderedSet.forEach(indices, function (v) {\n      // TODO avoid duplicate calls to apply\n      var elementIndices = getElementIndices(unit, unit.elements[v]);\n\n      for (var i = 0, il = elementIndices.length; i < il; ++i) {\n        if (apply(Interval.ofSingleton(elementIndices[i] * 2))) changed = true;\n      }\n    });\n  };\n\n  for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        unit = _b.unit,\n        indices = _b.indices;\n\n    _loop_1(unit, indices);\n  }\n\n  return changed;\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/carbohydrate-symbol-mesh.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { Box, PerforatedBox } from '../../../mol-geo/primitive/box';\r\nimport { OctagonalPyramid, PerforatedOctagonalPyramid } from '../../../mol-geo/primitive/pyramid';\r\nimport { Star } from '../../../mol-geo/primitive/star';\r\nimport { Octahedron, PerforatedOctahedron } from '../../../mol-geo/primitive/octahedron';\r\nimport { DiamondPrism, PentagonalPrism, ShiftedHexagonalPrism, HexagonalPrism, HeptagonalPrism } from '../../../mol-geo/primitive/prism';\r\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { getSaccharideShape } from '../../../mol-model/structure/structure/carbohydrates/constants';\r\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\r\nimport { ComplexMeshParams, ComplexMeshVisual } from '../complex-visual';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\r\nimport { OrderedSet, Interval } from '../../../mol-data/int';\r\nimport { EmptyLoci } from '../../../mol-model/loci';\r\nimport { getAltResidueLociFromId } from './util/common';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nvar t = Mat4.identity();\r\nvar sVec = Vec3.zero();\r\nvar pd = Vec3.zero();\r\nvar SideFactor = 2 * 0.806; // 0.806 == Math.cos(Math.PI / 4)\r\nvar box = Box();\r\nvar perforatedBox = PerforatedBox();\r\nvar octagonalPyramid = OctagonalPyramid();\r\nvar perforatedOctagonalPyramid = PerforatedOctagonalPyramid();\r\nvar star = Star({ outerRadius: 1, innerRadius: 0.5, thickness: 0.5, pointCount: 5 });\r\nvar octahedron = Octahedron();\r\nvar perforatedOctahedron = PerforatedOctahedron();\r\nvar diamondPrism = DiamondPrism();\r\nvar pentagonalPrism = PentagonalPrism();\r\nvar hexagonalPrism = HexagonalPrism();\r\nvar shiftedHexagonalPrism = ShiftedHexagonalPrism();\r\nvar heptagonalPrism = HeptagonalPrism();\r\nfunction createCarbohydrateSymbolMesh(ctx, structure, theme, props, mesh) {\r\n    var builderState = MeshBuilder.createState(256, 128, mesh);\r\n    var detail = props.detail, sizeFactor = props.sizeFactor;\r\n    var carbohydrates = structure.carbohydrates;\r\n    var n = carbohydrates.elements.length;\r\n    var l = StructureElement.Location.create(structure);\r\n    for (var i = 0; i < n; ++i) {\r\n        var c = carbohydrates.elements[i];\r\n        var ring = c.unit.rings.all[c.ringIndex];\r\n        var shapeType = getSaccharideShape(c.component.type, ring.length);\r\n        l.unit = c.unit;\r\n        l.element = c.unit.elements[ring[0]];\r\n        var size = theme.size.size(l);\r\n        var radius = size * sizeFactor;\r\n        var side = size * sizeFactor * SideFactor;\r\n        var _a = c.geometry, center = _a.center, normal = _a.normal, direction = _a.direction;\r\n        Vec3.add(pd, center, direction);\r\n        Mat4.targetTo(t, center, pd, normal);\r\n        Mat4.setTranslation(t, center);\r\n        builderState.currentGroup = i * 2;\r\n        switch (shapeType) {\r\n            case 0 /* FilledSphere */:\r\n                addSphere(builderState, center, radius, detail);\r\n                break;\r\n            case 1 /* FilledCube */:\r\n                Mat4.scaleUniformly(t, t, side);\r\n                MeshBuilder.addPrimitive(builderState, t, box);\r\n                break;\r\n            case 2 /* CrossedCube */:\r\n                Mat4.scaleUniformly(t, t, side);\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedBox);\r\n                Mat4.mul(t, t, Mat4.rotZ90X180);\r\n                builderState.currentGroup += 1;\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedBox);\r\n                break;\r\n            case 4 /* FilledCone */:\r\n                Mat4.scaleUniformly(t, t, side * 1.2);\r\n                MeshBuilder.addPrimitive(builderState, t, octagonalPyramid);\r\n                break;\r\n            case 5 /* DevidedCone */:\r\n                Mat4.scaleUniformly(t, t, side * 1.2);\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedOctagonalPyramid);\r\n                Mat4.mul(t, t, Mat4.rotZ90);\r\n                builderState.currentGroup += 1;\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedOctagonalPyramid);\r\n                break;\r\n            case 6 /* FlatBox */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, box);\r\n                break;\r\n            case 7 /* FilledStar */:\r\n                Mat4.scaleUniformly(t, t, side);\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                MeshBuilder.addPrimitive(builderState, t, star);\r\n                break;\r\n            case 8 /* FilledDiamond */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side * 1.4, side * 1.4, side * 1.4));\r\n                MeshBuilder.addPrimitive(builderState, t, octahedron);\r\n                break;\r\n            case 3 /* DividedDiamond */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side * 1.4, side * 1.4, side * 1.4));\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedOctahedron);\r\n                Mat4.mul(t, t, Mat4.rotY90);\r\n                builderState.currentGroup += 1;\r\n                MeshBuilder.addPrimitive(builderState, t, perforatedOctahedron);\r\n                break;\r\n            case 9 /* FlatDiamond */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side / 2, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, diamondPrism);\r\n                break;\r\n            case 12 /* DiamondPrism */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, diamondPrism);\r\n                break;\r\n            case 13 /* PentagonalPrism */:\r\n            case 11 /* Pentagon */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, pentagonalPrism);\r\n                break;\r\n            case 14 /* HexagonalPrism */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, hexagonalPrism);\r\n                break;\r\n            case 15 /* HeptagonalPrism */:\r\n                Mat4.mul(t, t, Mat4.rotZY90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, heptagonalPrism);\r\n                break;\r\n            case 10 /* FlatHexagon */:\r\n            default:\r\n                Mat4.mul(t, t, Mat4.rotZYZ90);\r\n                Mat4.scale(t, t, Vec3.set(sVec, side / 1.5, side, side / 2));\r\n                MeshBuilder.addPrimitive(builderState, t, shiftedHexagonalPrism);\r\n                break;\r\n        }\r\n    }\r\n    return MeshBuilder.getMesh(builderState);\r\n}\r\nexport var CarbohydrateSymbolParams = __assign(__assign({}, ComplexMeshParams), { detail: PD.Numeric(0, { min: 0, max: 3, step: 1 }, BaseGeometry.CustomQualityParamInfo), sizeFactor: PD.Numeric(1.75, { min: 0, max: 10, step: 0.01 }) });\r\nexport function CarbohydrateSymbolVisual(materialId) {\r\n    return ComplexMeshVisual({\r\n        defaultProps: PD.getDefaultValues(CarbohydrateSymbolParams),\r\n        createGeometry: createCarbohydrateSymbolMesh,\r\n        createLocationIterator: CarbohydrateElementIterator,\r\n        getLoci: getCarbohydrateLoci,\r\n        eachLocation: eachCarbohydrate,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.detail !== currentProps.detail);\r\n        }\r\n    }, materialId);\r\n}\r\nfunction CarbohydrateElementIterator(structure) {\r\n    var carbElements = structure.carbohydrates.elements;\r\n    var groupCount = carbElements.length * 2;\r\n    var instanceCount = 1;\r\n    var location = StructureElement.Location.create(structure);\r\n    function getLocation(groupIndex, instanceIndex) {\r\n        var carb = carbElements[Math.floor(groupIndex / 2)];\r\n        var ring = carb.unit.rings.all[carb.ringIndex];\r\n        location.unit = carb.unit;\r\n        location.element = carb.unit.elements[ring[0]];\r\n        return location;\r\n    }\r\n    function isSecondary(elementIndex, instanceIndex) {\r\n        return (elementIndex % 2) === 1;\r\n    }\r\n    return LocationIterator(groupCount, instanceCount, 1, getLocation, true, isSecondary);\r\n}\r\n/** Return a Loci for the elements of the whole residue of a carbohydrate. */\r\nfunction getCarbohydrateLoci(pickingId, structure, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var carb = structure.carbohydrates.elements[Math.floor(groupId / 2)];\r\n        return getAltResidueLociFromId(structure, carb.unit, carb.residueIndex, carb.altId);\r\n    }\r\n    return EmptyLoci;\r\n}\r\n/** For each carbohydrate (usually a monosaccharide) when all its residue's elements are in a loci. */\r\nfunction eachCarbohydrate(loci, structure, apply) {\r\n    var getElementIndices = structure.carbohydrates.getElementIndices;\r\n    var changed = false;\r\n    if (!StructureElement.Loci.is(loci))\r\n        return false;\r\n    if (!Structure.areEquivalent(loci.structure, structure))\r\n        return false;\r\n    var _loop_1 = function (unit, indices) {\r\n        if (!Unit.isAtomic(unit))\r\n            return \"continue\";\r\n        OrderedSet.forEach(indices, function (v) {\r\n            // TODO avoid duplicate calls to apply\r\n            var elementIndices = getElementIndices(unit, unit.elements[v]);\r\n            for (var i = 0, il = elementIndices.length; i < il; ++i) {\r\n                if (apply(Interval.ofSingleton(elementIndices[i] * 2)))\r\n                    changed = true;\r\n            }\r\n        });\r\n    };\r\n    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n        var _b = _a[_i], unit = _b.unit, indices = _b.indices;\r\n        _loop_1(unit, indices);\r\n    }\r\n    return changed;\r\n}\r\n//# sourceMappingURL=carbohydrate-symbol-mesh.js.map"]},"metadata":{},"sourceType":"module"}