{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Task } from '../../mol-task';\nimport { Coordinates, Time } from '../../mol-model/structure/coordinates';\nimport { Cell } from '../../mol-math/geometry/spacegroup/cell';\nimport { Vec3 } from '../../mol-math/linear-algebra';\nexport function coordinatesFromXtc(file) {\n  var _this = this;\n\n  return Task.create('Parse XTC', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var deltaTime, offsetTime, frames, i, il, box, x, y, z;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , ctx.update('Converting to coordinates')];\n\n          case 1:\n            _a.sent();\n\n            deltaTime = Time(file.deltaTime, 'step');\n            offsetTime = Time(file.timeOffset, deltaTime.unit);\n            frames = [];\n\n            for (i = 0, il = file.frames.length; i < il; ++i) {\n              box = file.boxes[i];\n              x = Vec3.fromArray(Vec3(), box, 0);\n              y = Vec3.fromArray(Vec3(), box, 3);\n              z = Vec3.fromArray(Vec3(), box, 6);\n              frames.push({\n                elementCount: file.frames[i].count,\n                cell: Cell.fromBasis(x, y, z),\n                x: file.frames[i].x,\n                y: file.frames[i].y,\n                z: file.frames[i].z,\n                xyzOrdering: {\n                  isIdentity: true\n                },\n                time: Time(offsetTime.value + deltaTime.value * i, deltaTime.unit)\n              });\n            }\n\n            return [2\n            /*return*/\n            , Coordinates.create(frames, deltaTime, offsetTime)];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-formats/structure/xtc.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,IAAT,QAAqB,gBAArB;AAEA,SAAS,WAAT,EAA6B,IAA7B,QAAyC,uCAAzC;AACA,SAAS,IAAT,QAAqB,yCAArB;AACA,SAAS,IAAT,QAAqB,+BAArB;AAEA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAA0C;AAAhD,MAAA,KAAA,GAAA,IAAA;;AACI,SAAO,IAAI,CAAC,MAAL,CAAY,WAAZ,EAAyB,UAAM,GAAN,EAAS;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrC,mBAAA,CAAA;AAAA;AAAA,cAAM,GAAG,CAAC,MAAJ,CAAW,2BAAX,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEM,YAAA,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAN,EAAiB,MAAjB,CAAhB;AACA,YAAA,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAN,EAAkB,SAAS,CAAC,IAA5B,CAAjB;AAEA,YAAA,MAAM,GAAY,EAAlB;;AACN,iBAAS,CAAC,GAAG,CAAJ,EAAO,EAAE,GAAG,IAAI,CAAC,MAAL,CAAY,MAAjC,EAAyC,CAAC,GAAG,EAA7C,EAAiD,EAAE,CAAnD,EAAsD;AAC5C,cAAA,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAN;AACA,cAAA,CAAC,GAAG,IAAI,CAAC,SAAL,CAAe,IAAI,EAAnB,EAAuB,GAAvB,EAA4B,CAA5B,CAAJ;AACA,cAAA,CAAC,GAAG,IAAI,CAAC,SAAL,CAAe,IAAI,EAAnB,EAAuB,GAAvB,EAA4B,CAA5B,CAAJ;AACA,cAAA,CAAC,GAAG,IAAI,CAAC,SAAL,CAAe,IAAI,EAAnB,EAAuB,GAAvB,EAA4B,CAA5B,CAAJ;AACN,cAAA,MAAM,CAAC,IAAP,CAAY;AACR,gBAAA,YAAY,EAAE,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,KADrB;AAER,gBAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAFE;AAGR,gBAAA,CAAC,EAAE,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAHV;AAIR,gBAAA,CAAC,EAAE,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CAJV;AAKR,gBAAA,CAAC,EAAE,IAAI,CAAC,MAAL,CAAY,CAAZ,EAAe,CALV;AAMR,gBAAA,WAAW,EAAE;AAAE,kBAAA,UAAU,EAAE;AAAd,iBANL;AAOR,gBAAA,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,KAAX,GAAmB,SAAS,CAAC,KAAV,GAAkB,CAAtC,EAAyC,SAAS,CAAC,IAAnD;AAPF,eAAZ;AASH;;AAED,mBAAA,CAAA;AAAA;AAAA,cAAO,WAAW,CAAC,MAAZ,CAAmB,MAAnB,EAA2B,SAA3B,EAAsC,UAAtC,CAAP,CAAA;;;KAvBqC,CAAA;AAwBxC,GAxBM,CAAP;AAyBH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Task } from '../../mol-task';\r\nimport { Coordinates, Time } from '../../mol-model/structure/coordinates';\r\nimport { Cell } from '../../mol-math/geometry/spacegroup/cell';\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nexport function coordinatesFromXtc(file) {\r\n    var _this = this;\r\n    return Task.create('Parse XTC', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var deltaTime, offsetTime, frames, i, il, box, x, y, z;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, ctx.update('Converting to coordinates')];\r\n                case 1:\r\n                    _a.sent();\r\n                    deltaTime = Time(file.deltaTime, 'step');\r\n                    offsetTime = Time(file.timeOffset, deltaTime.unit);\r\n                    frames = [];\r\n                    for (i = 0, il = file.frames.length; i < il; ++i) {\r\n                        box = file.boxes[i];\r\n                        x = Vec3.fromArray(Vec3(), box, 0);\r\n                        y = Vec3.fromArray(Vec3(), box, 3);\r\n                        z = Vec3.fromArray(Vec3(), box, 6);\r\n                        frames.push({\r\n                            elementCount: file.frames[i].count,\r\n                            cell: Cell.fromBasis(x, y, z),\r\n                            x: file.frames[i].x,\r\n                            y: file.frames[i].y,\r\n                            z: file.frames[i].z,\r\n                            xyzOrdering: { isIdentity: true },\r\n                            time: Time(offsetTime.value + deltaTime.value * i, deltaTime.unit)\r\n                        });\r\n                    }\r\n                    return [2 /*return*/, Coordinates.create(frames, deltaTime, offsetTime)];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=xtc.js.map"]},"metadata":{},"sourceType":"module"}