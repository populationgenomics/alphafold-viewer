/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Sukolsak Sakshuwong <sukolsak@stanford.edu>
 */
import { Style } from '../../mol-gl/renderer';
import { Box3D } from '../../mol-math/geometry';
import { RuntimeContext } from '../../mol-task';
import { MeshExporter, AddMeshInput } from './mesh-exporter';
export declare type GlbData = {
    glb: Uint8Array;
};
export declare class GlbExporter extends MeshExporter<GlbData> {
    private style;
    readonly fileExtension = "glb";
    private nodes;
    private meshes;
    private accessors;
    private bufferViews;
    private binaryBuffer;
    private byteOffset;
    private centerTransform;
    private static vec3MinMax;
    private addBuffer;
    private addGeometryBuffers;
    private addColorBuffer;
    protected addMeshWithColors(input: AddMeshInput): Promise<void>;
    getData(): Promise<{
        glb: Uint8Array;
    }>;
    getBlob(ctx: RuntimeContext): Promise<Blob>;
    constructor(style: Style, boundingBox: Box3D);
}
