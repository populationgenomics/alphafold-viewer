{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { mmCIF_Schema } from './mmcif';\nimport { Column } from '../../../../mol-data/db';\nexport var mmCIF_residueId_schema = {\n  label_comp_id: mmCIF_Schema.atom_site.label_comp_id,\n  label_seq_id: mmCIF_Schema.atom_site.label_seq_id,\n  pdbx_PDB_ins_code: mmCIF_Schema.atom_site.pdbx_PDB_ins_code,\n  label_asym_id: mmCIF_Schema.atom_site.label_asym_id,\n  label_entity_id: mmCIF_Schema.atom_site.label_entity_id,\n  auth_comp_id: mmCIF_Schema.atom_site.auth_atom_id,\n  auth_seq_id: mmCIF_Schema.atom_site.auth_seq_id,\n  auth_asym_id: mmCIF_Schema.atom_site.auth_asym_id\n};\nexport var mmCIF_chemCompBond_schema = __assign(__assign({}, mmCIF_Schema.chem_comp_bond), {\n  /** Indicates if the bond entry was taken from the protonation variant dictionary */\n  molstar_protonation_variant: Column.Schema.Str()\n});\n/** Has `type` extended with 'Ion' and 'Lipid' */\n\nexport var mmCIF_chemComp_schema = __assign(__assign({}, mmCIF_Schema.chem_comp), {\n  type: Column.Schema.Aliased(Column.Schema.str)\n});","map":{"version":3,"sources":["../../../../../src/mol-io/reader/cif/schema/mmcif-extras.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH,SAAS,YAAT,QAA6B,SAA7B;AACA,SAAS,MAAT,QAAuB,yBAAvB;AAEA,OAAO,IAAM,sBAAsB,GAAG;AAClC,EAAA,aAAa,EAAE,YAAY,CAAC,SAAb,CAAuB,aADJ;AAElC,EAAA,YAAY,EAAE,YAAY,CAAC,SAAb,CAAuB,YAFH;AAGlC,EAAA,iBAAiB,EAAE,YAAY,CAAC,SAAb,CAAuB,iBAHR;AAIlC,EAAA,aAAa,EAAE,YAAY,CAAC,SAAb,CAAuB,aAJJ;AAKlC,EAAA,eAAe,EAAE,YAAY,CAAC,SAAb,CAAuB,eALN;AAMlC,EAAA,YAAY,EAAE,YAAY,CAAC,SAAb,CAAuB,YANH;AAOlC,EAAA,WAAW,EAAE,YAAY,CAAC,SAAb,CAAuB,WAPF;AAQlC,EAAA,YAAY,EAAE,YAAY,CAAC,SAAb,CAAuB;AARH,CAA/B;AAWP,OAAO,IAAM,yBAAyB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC/B,YAAY,CAAC,cADkB,CAAA,EACJ;AAC9B;AACA,EAAA,2BAA2B,EAAE,MAAM,CAAC,MAAP,CAAc,GAAd;AAFC,CADI,CAA/B;AAMP;;AACA,OAAO,IAAM,qBAAqB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC3B,YAAY,CAAC,SADc,CAAA,EACL;AACzB,EAAA,IAAI,EAAE,MAAM,CAAC,MAAP,CAAc,OAAd,CAAgF,MAAM,CAAC,MAAP,CAAc,GAA9F;AADmB,CADK,CAA3B","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { mmCIF_Schema } from './mmcif';\r\nimport { Column } from '../../../../mol-data/db';\r\nexport var mmCIF_residueId_schema = {\r\n    label_comp_id: mmCIF_Schema.atom_site.label_comp_id,\r\n    label_seq_id: mmCIF_Schema.atom_site.label_seq_id,\r\n    pdbx_PDB_ins_code: mmCIF_Schema.atom_site.pdbx_PDB_ins_code,\r\n    label_asym_id: mmCIF_Schema.atom_site.label_asym_id,\r\n    label_entity_id: mmCIF_Schema.atom_site.label_entity_id,\r\n    auth_comp_id: mmCIF_Schema.atom_site.auth_atom_id,\r\n    auth_seq_id: mmCIF_Schema.atom_site.auth_seq_id,\r\n    auth_asym_id: mmCIF_Schema.atom_site.auth_asym_id\r\n};\r\nexport var mmCIF_chemCompBond_schema = __assign(__assign({}, mmCIF_Schema.chem_comp_bond), { \r\n    /** Indicates if the bond entry was taken from the protonation variant dictionary */\r\n    molstar_protonation_variant: Column.Schema.Str() });\r\n/** Has `type` extended with 'Ion' and 'Lipid' */\r\nexport var mmCIF_chemComp_schema = __assign(__assign({}, mmCIF_Schema.chem_comp), { type: Column.Schema.Aliased(Column.Schema.str) });\r\n//# sourceMappingURL=mmcif-extras.js.map"]},"metadata":{},"sourceType":"module"}