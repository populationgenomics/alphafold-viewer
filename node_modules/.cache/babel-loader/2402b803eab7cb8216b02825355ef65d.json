{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Unit, StructureElement } from '../../structure';\nimport { BondType } from '../../model/types';\nimport { SortedArray, OrderedSet } from '../../../../mol-data/int';\nimport { CentroidHelper } from '../../../../mol-math/geometry/centroid-helper';\nexport * from './bonds/data';\nexport * from './bonds/intra-compute';\nexport * from './bonds/inter-compute';\nvar Bond;\n\n(function (Bond) {\n  function Location(aStructure, aUnit, aIndex, bStructure, bUnit, bIndex) {\n    return {\n      kind: 'bond-location',\n      aStructure: aStructure,\n      aUnit: aUnit,\n      aIndex: aIndex,\n      bStructure: bStructure,\n      bUnit: bUnit,\n      bIndex: bIndex\n    };\n  }\n\n  Bond.Location = Location;\n\n  function isLocation(x) {\n    return !!x && x.kind === 'bond-location';\n  }\n\n  Bond.isLocation = isLocation;\n\n  function areLocationsEqual(locA, locB) {\n    return locA.aStructure.label === locB.aStructure.label && locA.bStructure.label === locB.bStructure.label && locA.aIndex === locB.aIndex && locA.bIndex === locB.bIndex && locA.aUnit.id === locB.aUnit.id && locA.bUnit.id === locB.bUnit.id;\n  }\n\n  Bond.areLocationsEqual = areLocationsEqual;\n\n  function Loci(structure, bonds) {\n    return {\n      kind: 'bond-loci',\n      structure: structure,\n      bonds: bonds\n    };\n  }\n\n  Bond.Loci = Loci;\n\n  function isLoci(x) {\n    return !!x && x.kind === 'bond-loci';\n  }\n\n  Bond.isLoci = isLoci;\n\n  function areLociEqual(a, b) {\n    if (a.structure !== b.structure) return false;\n    if (a.bonds.length !== b.bonds.length) return false;\n\n    for (var i = 0, il = a.bonds.length; i < il; ++i) {\n      if (!areLocationsEqual(a.bonds[i], b.bonds[i])) return false;\n    }\n\n    return true;\n  }\n\n  Bond.areLociEqual = areLociEqual;\n\n  function isLociEmpty(loci) {\n    return loci.bonds.length === 0 ? true : false;\n  }\n\n  Bond.isLociEmpty = isLociEmpty;\n\n  function remapLoci(loci, structure) {\n    if (structure === loci.structure) return loci;\n    var bonds = [];\n    loci.bonds.forEach(function (l) {\n      var unitA = structure.unitMap.get(l.aUnit.id);\n      if (!unitA) return;\n      var unitB = structure.unitMap.get(l.bUnit.id);\n      if (!unitB) return;\n      var elementA = l.aUnit.elements[l.aIndex];\n      var indexA = SortedArray.indexOf(unitA.elements, elementA);\n      if (indexA === -1) return;\n      var elementB = l.bUnit.elements[l.bIndex];\n      var indexB = SortedArray.indexOf(unitB.elements, elementB);\n      if (indexB === -1) return;\n      bonds.push(Location(loci.structure, unitA, indexA, loci.structure, unitB, indexB));\n    });\n    return Loci(structure, bonds);\n  }\n\n  Bond.remapLoci = remapLoci;\n\n  function toStructureElementLoci(loci) {\n    var elements = [];\n    var map = new Map();\n\n    for (var _i = 0, _a = loci.bonds; _i < _a.length; _i++) {\n      var lociBond = _a[_i];\n      var aIndex = lociBond.aIndex,\n          aUnit = lociBond.aUnit,\n          bIndex = lociBond.bIndex,\n          bUnit = lociBond.bUnit;\n\n      if (aUnit === bUnit) {\n        if (map.has(aUnit.id)) map.get(aUnit.id).push(aIndex, bIndex);else map.set(aUnit.id, [aIndex, bIndex]);\n      } else {\n        if (map.has(aUnit.id)) map.get(aUnit.id).push(aIndex);else map.set(aUnit.id, [aIndex]);\n        if (map.has(bUnit.id)) map.get(bUnit.id).push(bIndex);else map.set(bUnit.id, [bIndex]);\n      }\n    }\n\n    map.forEach(function (indices, id) {\n      elements.push({\n        unit: loci.structure.unitMap.get(id),\n        indices: SortedArray.deduplicate(SortedArray.ofUnsortedArray(indices))\n      });\n    });\n    return StructureElement.Loci(loci.structure, elements);\n  }\n\n  Bond.toStructureElementLoci = toStructureElementLoci;\n\n  function toFirstStructureElementLoci(loci) {\n    var _a = loci.bonds[0],\n        aUnit = _a.aUnit,\n        aIndex = _a.aIndex;\n    return StructureElement.Loci(loci.structure, [{\n      unit: aUnit,\n      indices: OrderedSet.ofSingleton(aIndex)\n    }]);\n  }\n\n  Bond.toFirstStructureElementLoci = toFirstStructureElementLoci;\n\n  function getType(structure, location) {\n    if (location.aUnit === location.bUnit) {\n      var bonds = location.aUnit.bonds;\n      var idx = bonds.getEdgeIndex(location.aIndex, location.bIndex);\n      if (idx < 0) return BondType.create(0\n      /* None */\n      );\n      return BondType.create(bonds.edgeProps.flags[idx]);\n    } else {\n      var bond = structure.interUnitBonds.getBondFromLocation(location);\n      if (bond) return BondType.create(bond.props.flag);\n      return BondType.create(0\n      /* None */\n      );\n    }\n  }\n\n  Bond.getType = getType;\n\n  function getOrder(structure, location) {\n    if (location.aUnit === location.bUnit) {\n      var bonds = location.aUnit.bonds;\n      var idx = bonds.getEdgeIndex(location.aIndex, location.bIndex);\n      if (idx < 0) return 0;\n      return bonds.edgeProps.order[idx];\n    } else {\n      var bond = structure.interUnitBonds.getBondFromLocation(location);\n      if (bond) return bond.props.order;\n      return 0;\n    }\n  }\n\n  Bond.getOrder = getOrder;\n\n  function getIntraUnitBondCount(structure) {\n    var count = 0;\n\n    for (var i = 0, il = structure.units.length; i < il; ++i) {\n      var u = structure.units[i];\n      if (Unit.isAtomic(u)) count += u.bonds.edgeCount;\n    }\n\n    return count;\n  }\n\n  Bond.getIntraUnitBondCount = getIntraUnitBondCount;\n\n  var ElementBondIterator =\n  /** @class */\n  function () {\n    function ElementBondIterator() {\n      this.current = {};\n      this.hasNext = false;\n    }\n\n    ElementBondIterator.prototype.move = function () {\n      this.advance();\n      return this.current;\n    };\n\n    ElementBondIterator.prototype.setElement = function (structure, unit, index) {\n      this.structure = structure;\n      this.unit = unit;\n      this.index = index;\n      this.interBondIndices = structure.interUnitBonds.getEdgeIndices(index, unit.id);\n      this.interBondCount = this.interBondIndices.length;\n      this.interBondIndex = 0;\n      this.intraBondEnd = unit.bonds.offset[index + 1];\n      this.intraBondIndex = unit.bonds.offset[index];\n      this.hasNext = this.interBondIndex < this.interBondCount || this.intraBondIndex < this.intraBondEnd;\n    };\n\n    ElementBondIterator.prototype.advance = function () {\n      if (this.intraBondIndex < this.intraBondEnd) {\n        this.current.otherUnit = this.unit;\n        this.current.otherIndex = this.unit.bonds.b[this.intraBondIndex];\n        this.current.type = this.unit.bonds.edgeProps.flags[this.intraBondIndex];\n        this.current.order = this.unit.bonds.edgeProps.order[this.intraBondIndex];\n        this.intraBondIndex += 1;\n      } else if (this.interBondIndex < this.interBondCount) {\n        var b = this.structure.interUnitBonds.edges[this.interBondIndex];\n        this.current.otherUnit = this.structure.unitMap.get(b.unitA !== this.unit.id ? b.unitA : b.unitB);\n        this.current.otherIndex = b.indexA !== this.index ? b.indexA : b.indexB;\n        this.current.type = b.props.flag;\n        this.current.order = b.props.order;\n        this.interBondIndex += 1;\n      } else {\n        this.hasNext = false;\n        return;\n      }\n\n      this.hasNext = this.interBondIndex < this.interBondCount || this.intraBondIndex < this.intraBondEnd;\n    };\n\n    return ElementBondIterator;\n  }();\n\n  Bond.ElementBondIterator = ElementBondIterator;\n\n  function getBoundingSphere(loci, boundingSphere) {\n    return CentroidHelper.fromPairProvider(loci.bonds.length, function (i, pA, pB) {\n      var _a = loci.bonds[i],\n          aUnit = _a.aUnit,\n          aIndex = _a.aIndex,\n          bUnit = _a.bUnit,\n          bIndex = _a.bIndex;\n      aUnit.conformation.position(aUnit.elements[aIndex], pA);\n      bUnit.conformation.position(bUnit.elements[bIndex], pB);\n    }, boundingSphere);\n  }\n\n  Bond.getBoundingSphere = getBoundingSphere;\n})(Bond || (Bond = {}));\n\nexport { Bond };","map":{"version":3,"sources":["../../../../../src/mol-model/structure/structure/unit/bonds.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Unit, StructureElement } from '../../structure';\r\nimport { BondType } from '../../model/types';\r\nimport { SortedArray, OrderedSet } from '../../../../mol-data/int';\r\nimport { CentroidHelper } from '../../../../mol-math/geometry/centroid-helper';\r\nexport * from './bonds/data';\r\nexport * from './bonds/intra-compute';\r\nexport * from './bonds/inter-compute';\r\nvar Bond;\r\n(function (Bond) {\r\n    function Location(aStructure, aUnit, aIndex, bStructure, bUnit, bIndex) {\r\n        return {\r\n            kind: 'bond-location',\r\n            aStructure: aStructure,\r\n            aUnit: aUnit,\r\n            aIndex: aIndex,\r\n            bStructure: bStructure,\r\n            bUnit: bUnit,\r\n            bIndex: bIndex\r\n        };\r\n    }\r\n    Bond.Location = Location;\r\n    function isLocation(x) {\r\n        return !!x && x.kind === 'bond-location';\r\n    }\r\n    Bond.isLocation = isLocation;\r\n    function areLocationsEqual(locA, locB) {\r\n        return (locA.aStructure.label === locB.aStructure.label && locA.bStructure.label === locB.bStructure.label &&\r\n            locA.aIndex === locB.aIndex && locA.bIndex === locB.bIndex &&\r\n            locA.aUnit.id === locB.aUnit.id && locA.bUnit.id === locB.bUnit.id);\r\n    }\r\n    Bond.areLocationsEqual = areLocationsEqual;\r\n    function Loci(structure, bonds) {\r\n        return { kind: 'bond-loci', structure: structure, bonds: bonds };\r\n    }\r\n    Bond.Loci = Loci;\r\n    function isLoci(x) {\r\n        return !!x && x.kind === 'bond-loci';\r\n    }\r\n    Bond.isLoci = isLoci;\r\n    function areLociEqual(a, b) {\r\n        if (a.structure !== b.structure)\r\n            return false;\r\n        if (a.bonds.length !== b.bonds.length)\r\n            return false;\r\n        for (var i = 0, il = a.bonds.length; i < il; ++i) {\r\n            if (!areLocationsEqual(a.bonds[i], b.bonds[i]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Bond.areLociEqual = areLociEqual;\r\n    function isLociEmpty(loci) {\r\n        return loci.bonds.length === 0 ? true : false;\r\n    }\r\n    Bond.isLociEmpty = isLociEmpty;\r\n    function remapLoci(loci, structure) {\r\n        if (structure === loci.structure)\r\n            return loci;\r\n        var bonds = [];\r\n        loci.bonds.forEach(function (l) {\r\n            var unitA = structure.unitMap.get(l.aUnit.id);\r\n            if (!unitA)\r\n                return;\r\n            var unitB = structure.unitMap.get(l.bUnit.id);\r\n            if (!unitB)\r\n                return;\r\n            var elementA = l.aUnit.elements[l.aIndex];\r\n            var indexA = SortedArray.indexOf(unitA.elements, elementA);\r\n            if (indexA === -1)\r\n                return;\r\n            var elementB = l.bUnit.elements[l.bIndex];\r\n            var indexB = SortedArray.indexOf(unitB.elements, elementB);\r\n            if (indexB === -1)\r\n                return;\r\n            bonds.push(Location(loci.structure, unitA, indexA, loci.structure, unitB, indexB));\r\n        });\r\n        return Loci(structure, bonds);\r\n    }\r\n    Bond.remapLoci = remapLoci;\r\n    function toStructureElementLoci(loci) {\r\n        var elements = [];\r\n        var map = new Map();\r\n        for (var _i = 0, _a = loci.bonds; _i < _a.length; _i++) {\r\n            var lociBond = _a[_i];\r\n            var aIndex = lociBond.aIndex, aUnit = lociBond.aUnit, bIndex = lociBond.bIndex, bUnit = lociBond.bUnit;\r\n            if (aUnit === bUnit) {\r\n                if (map.has(aUnit.id))\r\n                    map.get(aUnit.id).push(aIndex, bIndex);\r\n                else\r\n                    map.set(aUnit.id, [aIndex, bIndex]);\r\n            }\r\n            else {\r\n                if (map.has(aUnit.id))\r\n                    map.get(aUnit.id).push(aIndex);\r\n                else\r\n                    map.set(aUnit.id, [aIndex]);\r\n                if (map.has(bUnit.id))\r\n                    map.get(bUnit.id).push(bIndex);\r\n                else\r\n                    map.set(bUnit.id, [bIndex]);\r\n            }\r\n        }\r\n        map.forEach(function (indices, id) {\r\n            elements.push({\r\n                unit: loci.structure.unitMap.get(id),\r\n                indices: SortedArray.deduplicate(SortedArray.ofUnsortedArray(indices))\r\n            });\r\n        });\r\n        return StructureElement.Loci(loci.structure, elements);\r\n    }\r\n    Bond.toStructureElementLoci = toStructureElementLoci;\r\n    function toFirstStructureElementLoci(loci) {\r\n        var _a = loci.bonds[0], aUnit = _a.aUnit, aIndex = _a.aIndex;\r\n        return StructureElement.Loci(loci.structure, [{ unit: aUnit, indices: OrderedSet.ofSingleton(aIndex) }]);\r\n    }\r\n    Bond.toFirstStructureElementLoci = toFirstStructureElementLoci;\r\n    function getType(structure, location) {\r\n        if (location.aUnit === location.bUnit) {\r\n            var bonds = location.aUnit.bonds;\r\n            var idx = bonds.getEdgeIndex(location.aIndex, location.bIndex);\r\n            if (idx < 0)\r\n                return BondType.create(0 /* None */);\r\n            return BondType.create(bonds.edgeProps.flags[idx]);\r\n        }\r\n        else {\r\n            var bond = structure.interUnitBonds.getBondFromLocation(location);\r\n            if (bond)\r\n                return BondType.create(bond.props.flag);\r\n            return BondType.create(0 /* None */);\r\n        }\r\n    }\r\n    Bond.getType = getType;\r\n    function getOrder(structure, location) {\r\n        if (location.aUnit === location.bUnit) {\r\n            var bonds = location.aUnit.bonds;\r\n            var idx = bonds.getEdgeIndex(location.aIndex, location.bIndex);\r\n            if (idx < 0)\r\n                return 0;\r\n            return bonds.edgeProps.order[idx];\r\n        }\r\n        else {\r\n            var bond = structure.interUnitBonds.getBondFromLocation(location);\r\n            if (bond)\r\n                return bond.props.order;\r\n            return 0;\r\n        }\r\n    }\r\n    Bond.getOrder = getOrder;\r\n    function getIntraUnitBondCount(structure) {\r\n        var count = 0;\r\n        for (var i = 0, il = structure.units.length; i < il; ++i) {\r\n            var u = structure.units[i];\r\n            if (Unit.isAtomic(u))\r\n                count += u.bonds.edgeCount;\r\n        }\r\n        return count;\r\n    }\r\n    Bond.getIntraUnitBondCount = getIntraUnitBondCount;\r\n    var ElementBondIterator = /** @class */ (function () {\r\n        function ElementBondIterator() {\r\n            this.current = {};\r\n            this.hasNext = false;\r\n        }\r\n        ElementBondIterator.prototype.move = function () {\r\n            this.advance();\r\n            return this.current;\r\n        };\r\n        ElementBondIterator.prototype.setElement = function (structure, unit, index) {\r\n            this.structure = structure;\r\n            this.unit = unit;\r\n            this.index = index;\r\n            this.interBondIndices = structure.interUnitBonds.getEdgeIndices(index, unit.id);\r\n            this.interBondCount = this.interBondIndices.length;\r\n            this.interBondIndex = 0;\r\n            this.intraBondEnd = unit.bonds.offset[index + 1];\r\n            this.intraBondIndex = unit.bonds.offset[index];\r\n            this.hasNext = this.interBondIndex < this.interBondCount || this.intraBondIndex < this.intraBondEnd;\r\n        };\r\n        ElementBondIterator.prototype.advance = function () {\r\n            if (this.intraBondIndex < this.intraBondEnd) {\r\n                this.current.otherUnit = this.unit;\r\n                this.current.otherIndex = this.unit.bonds.b[this.intraBondIndex];\r\n                this.current.type = this.unit.bonds.edgeProps.flags[this.intraBondIndex];\r\n                this.current.order = this.unit.bonds.edgeProps.order[this.intraBondIndex];\r\n                this.intraBondIndex += 1;\r\n            }\r\n            else if (this.interBondIndex < this.interBondCount) {\r\n                var b = this.structure.interUnitBonds.edges[this.interBondIndex];\r\n                this.current.otherUnit = this.structure.unitMap.get(b.unitA !== this.unit.id ? b.unitA : b.unitB);\r\n                this.current.otherIndex = b.indexA !== this.index ? b.indexA : b.indexB;\r\n                this.current.type = b.props.flag;\r\n                this.current.order = b.props.order;\r\n                this.interBondIndex += 1;\r\n            }\r\n            else {\r\n                this.hasNext = false;\r\n                return;\r\n            }\r\n            this.hasNext = this.interBondIndex < this.interBondCount || this.intraBondIndex < this.intraBondEnd;\r\n        };\r\n        return ElementBondIterator;\r\n    }());\r\n    Bond.ElementBondIterator = ElementBondIterator;\r\n    function getBoundingSphere(loci, boundingSphere) {\r\n        return CentroidHelper.fromPairProvider(loci.bonds.length, function (i, pA, pB) {\r\n            var _a = loci.bonds[i], aUnit = _a.aUnit, aIndex = _a.aIndex, bUnit = _a.bUnit, bIndex = _a.bIndex;\r\n            aUnit.conformation.position(aUnit.elements[aIndex], pA);\r\n            bUnit.conformation.position(bUnit.elements[bIndex], pB);\r\n        }, boundingSphere);\r\n    }\r\n    Bond.getBoundingSphere = getBoundingSphere;\r\n})(Bond || (Bond = {}));\r\nexport { Bond };\r\n//# sourceMappingURL=bonds.js.map"]},"metadata":{},"sourceType":"module"}