{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { DSSPComputationParams, computeUnitDSSP } from './secondary-structure/dssp';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Unit } from '../../mol-model/structure/structure';\nimport { CustomStructureProperty } from '../common/custom-structure-property';\nimport { ModelSecondaryStructure } from '../../mol-model-formats/structure/property/secondary-structure';\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\nimport { Model } from '../../mol-model/structure/model';\n\nfunction getSecondaryStructureParams(data) {\n  var defaultType = 'model';\n\n  if (data) {\n    defaultType = 'dssp';\n\n    for (var i = 0, il = data.models.length; i < il; ++i) {\n      var m = data.models[i];\n\n      if (Model.isFromPdbArchive(m) || Model.hasSecondaryStructure(m)) {\n        // if there is any secondary structure definition given or if there is\n        // an archival model, don't calculate dssp by default\n        defaultType = 'model';\n        break;\n      }\n    }\n  }\n\n  return {\n    type: PD.MappedStatic(defaultType, {\n      'model': PD.EmptyGroup({\n        label: 'Model'\n      }),\n      'dssp': PD.Group(DSSPComputationParams, {\n        label: 'DSSP',\n        isFlat: true\n      })\n    }, {\n      options: [['model', 'Model'], ['dssp', 'DSSP']]\n    })\n  };\n}\n\nexport var SecondaryStructureParams = getSecondaryStructureParams();\nexport var SecondaryStructureProvider = CustomStructureProperty.createProvider({\n  label: 'Secondary Structure',\n  descriptor: CustomPropertyDescriptor({\n    name: 'molstar_computed_secondary_structure' // TODO `cifExport` and `symbol`\n\n  }),\n  type: 'root',\n  defaultParams: SecondaryStructureParams,\n  getParams: getSecondaryStructureParams,\n  isApplicable: function (data) {\n    return true;\n  },\n  obtain: function (ctx, data, props) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var p, _a;\n\n      var _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            p = __assign(__assign({}, PD.getDefaultValues(SecondaryStructureParams)), props);\n            _a = p.type.name;\n\n            switch (_a) {\n              case 'dssp':\n                return [3\n                /*break*/\n                , 1];\n\n              case 'model':\n                return [3\n                /*break*/\n                , 3];\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 1:\n            _b = {};\n            return [4\n            /*yield*/\n            , computeDssp(data, p.type.params)];\n\n          case 2:\n            return [2\n            /*return*/\n            , (_b.value = _d.sent(), _b)];\n\n          case 3:\n            _c = {};\n            return [4\n            /*yield*/\n            , computeModel(data)];\n\n          case 4:\n            return [2\n            /*return*/\n            , (_c.value = _d.sent(), _c)];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n});\n\nfunction computeDssp(structure, props) {\n  return __awaiter(this, void 0, void 0, function () {\n    var map, i, il, u, secondaryStructure;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          map = new Map();\n          i = 0, il = structure.unitSymmetryGroups.length;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < il)) return [3\n          /*break*/\n          , 4];\n          u = structure.unitSymmetryGroups[i].units[0];\n          if (!(Unit.isAtomic(u) && !Model.isCoarseGrained(u.model))) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , computeUnitDSSP(u, props)];\n\n        case 2:\n          secondaryStructure = _a.sent();\n          map.set(u.invariantId, secondaryStructure);\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , map];\n      }\n    });\n  });\n}\n\nfunction computeModel(structure) {\n  return __awaiter(this, void 0, void 0, function () {\n    var map, i, il, u, secondaryStructure;\n    return __generator(this, function (_a) {\n      map = new Map();\n\n      for (i = 0, il = structure.unitSymmetryGroups.length; i < il; ++i) {\n        u = structure.unitSymmetryGroups[i].units[0];\n\n        if (Unit.isAtomic(u)) {\n          secondaryStructure = ModelSecondaryStructure.Provider.get(u.model);\n\n          if (secondaryStructure) {\n            map.set(u.invariantId, secondaryStructure);\n          }\n        }\n      }\n\n      return [2\n      /*return*/\n      , map];\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mol-model-props/computed/secondary-structure.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { DSSPComputationParams, computeUnitDSSP } from './secondary-structure/dssp';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Unit } from '../../mol-model/structure/structure';\r\nimport { CustomStructureProperty } from '../common/custom-structure-property';\r\nimport { ModelSecondaryStructure } from '../../mol-model-formats/structure/property/secondary-structure';\r\nimport { CustomPropertyDescriptor } from '../../mol-model/custom-property';\r\nimport { Model } from '../../mol-model/structure/model';\r\nfunction getSecondaryStructureParams(data) {\r\n    var defaultType = 'model';\r\n    if (data) {\r\n        defaultType = 'dssp';\r\n        for (var i = 0, il = data.models.length; i < il; ++i) {\r\n            var m = data.models[i];\r\n            if (Model.isFromPdbArchive(m) || Model.hasSecondaryStructure(m)) {\r\n                // if there is any secondary structure definition given or if there is\r\n                // an archival model, don't calculate dssp by default\r\n                defaultType = 'model';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        type: PD.MappedStatic(defaultType, {\r\n            'model': PD.EmptyGroup({ label: 'Model' }),\r\n            'dssp': PD.Group(DSSPComputationParams, { label: 'DSSP', isFlat: true })\r\n        }, { options: [['model', 'Model'], ['dssp', 'DSSP']] })\r\n    };\r\n}\r\nexport var SecondaryStructureParams = getSecondaryStructureParams();\r\nexport var SecondaryStructureProvider = CustomStructureProperty.createProvider({\r\n    label: 'Secondary Structure',\r\n    descriptor: CustomPropertyDescriptor({\r\n        name: 'molstar_computed_secondary_structure',\r\n        // TODO `cifExport` and `symbol`\r\n    }),\r\n    type: 'root',\r\n    defaultParams: SecondaryStructureParams,\r\n    getParams: getSecondaryStructureParams,\r\n    isApplicable: function (data) { return true; },\r\n    obtain: function (ctx, data, props) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var p, _a;\r\n        var _b, _c;\r\n        return __generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    p = __assign(__assign({}, PD.getDefaultValues(SecondaryStructureParams)), props);\r\n                    _a = p.type.name;\r\n                    switch (_a) {\r\n                        case 'dssp': return [3 /*break*/, 1];\r\n                        case 'model': return [3 /*break*/, 3];\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 1:\r\n                    _b = {};\r\n                    return [4 /*yield*/, computeDssp(data, p.type.params)];\r\n                case 2: return [2 /*return*/, (_b.value = _d.sent(), _b)];\r\n                case 3:\r\n                    _c = {};\r\n                    return [4 /*yield*/, computeModel(data)];\r\n                case 4: return [2 /*return*/, (_c.value = _d.sent(), _c)];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); }\r\n});\r\nfunction computeDssp(structure, props) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var map, i, il, u, secondaryStructure;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    map = new Map();\r\n                    i = 0, il = structure.unitSymmetryGroups.length;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < il)) return [3 /*break*/, 4];\r\n                    u = structure.unitSymmetryGroups[i].units[0];\r\n                    if (!(Unit.isAtomic(u) && !Model.isCoarseGrained(u.model))) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, computeUnitDSSP(u, props)];\r\n                case 2:\r\n                    secondaryStructure = _a.sent();\r\n                    map.set(u.invariantId, secondaryStructure);\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/, map];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction computeModel(structure) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var map, i, il, u, secondaryStructure;\r\n        return __generator(this, function (_a) {\r\n            map = new Map();\r\n            for (i = 0, il = structure.unitSymmetryGroups.length; i < il; ++i) {\r\n                u = structure.unitSymmetryGroups[i].units[0];\r\n                if (Unit.isAtomic(u)) {\r\n                    secondaryStructure = ModelSecondaryStructure.Provider.get(u.model);\r\n                    if (secondaryStructure) {\r\n                        map.set(u.invariantId, secondaryStructure);\r\n                    }\r\n                }\r\n            }\r\n            return [2 /*return*/, map];\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=secondary-structure.js.map"]},"metadata":{},"sourceType":"module"}