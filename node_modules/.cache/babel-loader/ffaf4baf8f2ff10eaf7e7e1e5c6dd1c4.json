{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Zepei Xu <xuzepei19950617@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\"; //               NOTES\n// When want to created undefined string column, must use\n// undefStr = UndefinedColumn(molecule.num_atoms, ColumnType.str)\n// but not\n// const undefPooledStr = UndefinedColumn(molecule.num_atoms, ColumnType.pooledStr);\n// because latter actuall return a column of zeros\n\nimport { Column } from '../../../mol-data/db';\nimport { TokenBuilder, Tokenizer } from '../common/text/tokenizer';\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\nimport { ReaderResult as Result } from '../result';\nimport { Task, chunkedSubtask } from '../../../mol-task';\nvar skipWhitespace = Tokenizer.skipWhitespace,\n    eatValue = Tokenizer.eatValue,\n    markLine = Tokenizer.markLine,\n    getTokenString = Tokenizer.getTokenString,\n    readLine = Tokenizer.readLine;\n\nfunction createEmptyMolecule() {\n  return {\n    mol_name: '',\n    num_atoms: 0,\n    num_bonds: 0,\n    num_subst: 0,\n    num_feat: 0,\n    num_sets: 0,\n    mol_type: '',\n    charge_type: '',\n    status_bits: '',\n    mol_comment: ''\n  };\n}\n\nfunction State(tokenizer, runtimeCtx) {\n  return {\n    tokenizer: tokenizer,\n    molecule: createEmptyMolecule(),\n    runtimeCtx: runtimeCtx\n  };\n}\n\nvar reWhitespace = /\\s+/g;\n\nfunction handleMolecule(state) {\n  var tokenizer = state.tokenizer,\n      molecule = state.molecule;\n\n  while (getTokenString(tokenizer) !== '@<TRIPOS>MOLECULE' && tokenizer.position < tokenizer.data.length) {\n    markLine(tokenizer);\n  }\n\n  markLine(tokenizer);\n  molecule.mol_name = getTokenString(tokenizer);\n  markLine(tokenizer);\n  var values = getTokenString(tokenizer).trim().split(reWhitespace);\n  molecule.num_atoms = parseInt(values[0]);\n  molecule.num_bonds = parseInt(values[1]);\n  molecule.num_subst = parseInt(values[2]);\n  molecule.num_feat = parseInt(values[3]);\n  molecule.num_sets = parseInt(values[4]);\n  markLine(tokenizer);\n  var mol_type = getTokenString(tokenizer);\n  if (mol_type.startsWith('@<TRIPOS>')) return;\n  molecule.mol_type = mol_type;\n  markLine(tokenizer);\n  var charge_type = getTokenString(tokenizer);\n  if (charge_type.startsWith('@<TRIPOS>')) return;\n  molecule.charge_type = charge_type;\n  markLine(tokenizer);\n  var status_bits = getTokenString(tokenizer);\n  if (status_bits.startsWith('@<TRIPOS>')) return;\n  molecule.status_bits = status_bits;\n  markLine(tokenizer);\n  var mol_comment = getTokenString(tokenizer);\n  if (mol_comment.startsWith('@<TRIPOS>')) return;\n  molecule.mol_comment = mol_comment;\n}\n\nfunction handleAtoms(state) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenizer, molecule, initialTokenizerPosition, initialTokenizerLineNumber, firstLine, firstLineArray, columnCount, atom_idTokens, atom_nameTokens, xTokens, yTokens, zTokens, atom_typeTokens, subst_idTokens, subst_nameTokens, chargeTokens, status_bitTokens, undefFloat, undefInt, undefStr, length, linesAlreadyRead, ret;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          tokenizer = state.tokenizer, molecule = state.molecule; // skip empty lines and '@<TRIPOS>ATOM'\n\n          while (getTokenString(tokenizer) !== '@<TRIPOS>ATOM' && tokenizer.position < tokenizer.data.length) {\n            markLine(tokenizer);\n          }\n\n          initialTokenizerPosition = tokenizer.position;\n          initialTokenizerLineNumber = tokenizer.lineNumber;\n          firstLine = readLine(tokenizer);\n          firstLineArray = firstLine.trim().split(/\\s+/g);\n          columnCount = firstLineArray.length;\n          atom_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          atom_nameTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          xTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          yTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          zTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          atom_typeTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          subst_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          subst_nameTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          chargeTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          status_bitTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\n          undefFloat = Column.Undefined(molecule.num_atoms, Column.Schema.float);\n          undefInt = Column.Undefined(molecule.num_atoms, Column.Schema.int);\n          undefStr = Column.Undefined(molecule.num_atoms, Column.Schema.str);\n          tokenizer.position = initialTokenizerPosition;\n          tokenizer.lineNumber = initialTokenizerLineNumber;\n          length = tokenizer.length;\n          linesAlreadyRead = 0;\n          return [4\n          /*yield*/\n          , chunkedSubtask(state.runtimeCtx, 100000, void 0, function (chunkSize) {\n            var linesToRead = Math.min(molecule.num_atoms - linesAlreadyRead, chunkSize);\n\n            for (var i = 0; i < linesToRead; i++) {\n              for (var j = 0; j < columnCount; j++) {\n                skipWhitespace(tokenizer);\n                tokenizer.tokenStart = tokenizer.position;\n                eatValue(tokenizer);\n\n                switch (j) {\n                  case 0:\n                    TokenBuilder.addUnchecked(atom_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 1:\n                    TokenBuilder.addUnchecked(atom_nameTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 2:\n                    TokenBuilder.addUnchecked(xTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 3:\n                    TokenBuilder.addUnchecked(yTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 4:\n                    TokenBuilder.addUnchecked(zTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 5:\n                    TokenBuilder.addUnchecked(atom_typeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 6:\n                    TokenBuilder.addUnchecked(subst_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 7:\n                    TokenBuilder.addUnchecked(subst_nameTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 8:\n                    TokenBuilder.addUnchecked(chargeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 9:\n                    TokenBuilder.addUnchecked(status_bitTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n                }\n              }\n            }\n\n            linesAlreadyRead += linesToRead;\n            return linesToRead;\n          }, function (ctx) {\n            return ctx.update({\n              message: 'Parsing...',\n              current: tokenizer.position,\n              max: length\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          ret = {\n            count: molecule.num_atoms,\n            atom_id: TokenColumn(atom_idTokens)(Column.Schema.int),\n            atom_name: TokenColumn(atom_nameTokens)(Column.Schema.str),\n            x: TokenColumn(xTokens)(Column.Schema.float),\n            y: TokenColumn(yTokens)(Column.Schema.float),\n            z: TokenColumn(zTokens)(Column.Schema.float),\n            atom_type: columnCount > 5 ? TokenColumn(atom_typeTokens)(Column.Schema.str) : undefStr,\n            subst_id: columnCount > 6 ? TokenColumn(subst_idTokens)(Column.Schema.int) : undefInt,\n            subst_name: columnCount > 7 ? TokenColumn(subst_nameTokens)(Column.Schema.str) : undefStr,\n            charge: columnCount > 8 ? TokenColumn(chargeTokens)(Column.Schema.float) : undefFloat,\n            status_bit: columnCount > 9 ? TokenColumn(status_bitTokens)(Column.Schema.str) : undefStr\n          };\n          return [2\n          /*return*/\n          , ret];\n      }\n    });\n  });\n}\n\nfunction handleBonds(state) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenizer, molecule, initialTokenizerPosition, initialTokenizerLineNumber, firstLine, firstLineArray, columnCount, bond_idTokens, origin_bond_idTokens, target_bond_idTokens, bondTypeTokens, status_bitTokens, length, linesAlreadyRead, ret;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          tokenizer = state.tokenizer, molecule = state.molecule;\n\n          while (getTokenString(tokenizer) !== '@<TRIPOS>BOND' && tokenizer.position < tokenizer.data.length) {\n            markLine(tokenizer);\n          }\n\n          initialTokenizerPosition = tokenizer.position;\n          initialTokenizerLineNumber = tokenizer.lineNumber;\n          firstLine = readLine(tokenizer);\n          firstLineArray = firstLine.trim().split(/\\s+/g);\n          columnCount = firstLineArray.length;\n          bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\n          origin_bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\n          target_bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\n          bondTypeTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\n          status_bitTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\n          tokenizer.position = initialTokenizerPosition;\n          tokenizer.lineNumber = initialTokenizerLineNumber;\n          length = tokenizer.length;\n          linesAlreadyRead = 0;\n          return [4\n          /*yield*/\n          , chunkedSubtask(state.runtimeCtx, 100000, void 0, function (chunkSize) {\n            var linesToRead = Math.min(molecule.num_bonds - linesAlreadyRead, chunkSize);\n\n            for (var i = 0; i < linesToRead; i++) {\n              for (var j = 0; j < columnCount; j++) {\n                skipWhitespace(tokenizer);\n                tokenizer.tokenStart = tokenizer.position;\n                eatValue(tokenizer);\n\n                switch (j) {\n                  case 0:\n                    TokenBuilder.addUnchecked(bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 1:\n                    TokenBuilder.addUnchecked(origin_bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 2:\n                    TokenBuilder.addUnchecked(target_bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  case 3:\n                    TokenBuilder.addUnchecked(bondTypeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n\n                  default:\n                    TokenBuilder.addUnchecked(status_bitTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\n                    break;\n                }\n              }\n            }\n\n            linesAlreadyRead += linesToRead;\n            return linesToRead;\n          }, function (ctx) {\n            return ctx.update({\n              message: 'Parsing...',\n              current: tokenizer.position,\n              max: length\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          ret = {\n            count: molecule.num_bonds,\n            bond_id: TokenColumn(bond_idTokens)(Column.Schema.int),\n            origin_atom_id: TokenColumn(origin_bond_idTokens)(Column.Schema.int),\n            target_atom_id: TokenColumn(target_bond_idTokens)(Column.Schema.int),\n            bond_type: TokenColumn(bondTypeTokens)(Column.Schema.str),\n            status_bits: columnCount > 4 ? TokenColumn(status_bitTokens)(Column.Schema.str) : Column.Undefined(molecule.num_bonds, Column.Schema.str)\n          };\n          return [2\n          /*return*/\n          , ret];\n      }\n    });\n  });\n}\n\nfunction parseInternal(ctx, data, name) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenizer, structures, state, atoms, bonds, result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          tokenizer = Tokenizer(data);\n          ctx.update({\n            message: 'Parsing...',\n            current: 0,\n            max: data.length\n          });\n          structures = [];\n          _a.label = 1;\n\n        case 1:\n          if (!(tokenizer.position < data.length)) return [3\n          /*break*/\n          , 4];\n          state = State(tokenizer, ctx);\n          handleMolecule(state);\n          return [4\n          /*yield*/\n          , handleAtoms(state)];\n\n        case 2:\n          atoms = _a.sent();\n          return [4\n          /*yield*/\n          , handleBonds(state)];\n\n        case 3:\n          bonds = _a.sent();\n          structures.push({\n            molecule: state.molecule,\n            atoms: atoms,\n            bonds: bonds\n          });\n          skipWhitespace(tokenizer);\n\n          while (getTokenString(tokenizer) !== '@<TRIPOS>MOLECULE' && tokenizer.position < tokenizer.data.length) {\n            markLine(tokenizer);\n          }\n\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          result = {\n            name: name,\n            structures: structures\n          };\n          return [2\n          /*return*/\n          , Result.success(result)];\n      }\n    });\n  });\n}\n\nexport function parseMol2(data, name) {\n  var _this = this;\n\n  return Task.create('Parse MOL2', function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , parseInternal(ctx, data, name)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/mol2/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Zepei Xu <xuzepei19950617@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\n//               NOTES\r\n// When want to created undefined string column, must use\r\n// undefStr = UndefinedColumn(molecule.num_atoms, ColumnType.str)\r\n// but not\r\n// const undefPooledStr = UndefinedColumn(molecule.num_atoms, ColumnType.pooledStr);\r\n// because latter actuall return a column of zeros\r\nimport { Column } from '../../../mol-data/db';\r\nimport { TokenBuilder, Tokenizer } from '../common/text/tokenizer';\r\nimport { TokenColumnProvider as TokenColumn } from '../common/text/column/token';\r\nimport { ReaderResult as Result } from '../result';\r\nimport { Task, chunkedSubtask } from '../../../mol-task';\r\nvar skipWhitespace = Tokenizer.skipWhitespace, eatValue = Tokenizer.eatValue, markLine = Tokenizer.markLine, getTokenString = Tokenizer.getTokenString, readLine = Tokenizer.readLine;\r\nfunction createEmptyMolecule() {\r\n    return {\r\n        mol_name: '',\r\n        num_atoms: 0,\r\n        num_bonds: 0,\r\n        num_subst: 0,\r\n        num_feat: 0,\r\n        num_sets: 0,\r\n        mol_type: '',\r\n        charge_type: '',\r\n        status_bits: '',\r\n        mol_comment: ''\r\n    };\r\n}\r\nfunction State(tokenizer, runtimeCtx) {\r\n    return {\r\n        tokenizer: tokenizer,\r\n        molecule: createEmptyMolecule(),\r\n        runtimeCtx: runtimeCtx\r\n    };\r\n}\r\nvar reWhitespace = /\\s+/g;\r\nfunction handleMolecule(state) {\r\n    var tokenizer = state.tokenizer, molecule = state.molecule;\r\n    while (getTokenString(tokenizer) !== '@<TRIPOS>MOLECULE' && tokenizer.position < tokenizer.data.length) {\r\n        markLine(tokenizer);\r\n    }\r\n    markLine(tokenizer);\r\n    molecule.mol_name = getTokenString(tokenizer);\r\n    markLine(tokenizer);\r\n    var values = getTokenString(tokenizer).trim().split(reWhitespace);\r\n    molecule.num_atoms = parseInt(values[0]);\r\n    molecule.num_bonds = parseInt(values[1]);\r\n    molecule.num_subst = parseInt(values[2]);\r\n    molecule.num_feat = parseInt(values[3]);\r\n    molecule.num_sets = parseInt(values[4]);\r\n    markLine(tokenizer);\r\n    var mol_type = getTokenString(tokenizer);\r\n    if (mol_type.startsWith('@<TRIPOS>'))\r\n        return;\r\n    molecule.mol_type = mol_type;\r\n    markLine(tokenizer);\r\n    var charge_type = getTokenString(tokenizer);\r\n    if (charge_type.startsWith('@<TRIPOS>'))\r\n        return;\r\n    molecule.charge_type = charge_type;\r\n    markLine(tokenizer);\r\n    var status_bits = getTokenString(tokenizer);\r\n    if (status_bits.startsWith('@<TRIPOS>'))\r\n        return;\r\n    molecule.status_bits = status_bits;\r\n    markLine(tokenizer);\r\n    var mol_comment = getTokenString(tokenizer);\r\n    if (mol_comment.startsWith('@<TRIPOS>'))\r\n        return;\r\n    molecule.mol_comment = mol_comment;\r\n}\r\nfunction handleAtoms(state) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var tokenizer, molecule, initialTokenizerPosition, initialTokenizerLineNumber, firstLine, firstLineArray, columnCount, atom_idTokens, atom_nameTokens, xTokens, yTokens, zTokens, atom_typeTokens, subst_idTokens, subst_nameTokens, chargeTokens, status_bitTokens, undefFloat, undefInt, undefStr, length, linesAlreadyRead, ret;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    tokenizer = state.tokenizer, molecule = state.molecule;\r\n                    // skip empty lines and '@<TRIPOS>ATOM'\r\n                    while (getTokenString(tokenizer) !== '@<TRIPOS>ATOM' && tokenizer.position < tokenizer.data.length) {\r\n                        markLine(tokenizer);\r\n                    }\r\n                    initialTokenizerPosition = tokenizer.position;\r\n                    initialTokenizerLineNumber = tokenizer.lineNumber;\r\n                    firstLine = readLine(tokenizer);\r\n                    firstLineArray = firstLine.trim().split(/\\s+/g);\r\n                    columnCount = firstLineArray.length;\r\n                    atom_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    atom_nameTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    xTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    yTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    zTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    atom_typeTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    subst_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    subst_nameTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    chargeTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    status_bitTokens = TokenBuilder.create(tokenizer.data, molecule.num_atoms * 2);\r\n                    undefFloat = Column.Undefined(molecule.num_atoms, Column.Schema.float);\r\n                    undefInt = Column.Undefined(molecule.num_atoms, Column.Schema.int);\r\n                    undefStr = Column.Undefined(molecule.num_atoms, Column.Schema.str);\r\n                    tokenizer.position = initialTokenizerPosition;\r\n                    tokenizer.lineNumber = initialTokenizerLineNumber;\r\n                    length = tokenizer.length;\r\n                    linesAlreadyRead = 0;\r\n                    return [4 /*yield*/, chunkedSubtask(state.runtimeCtx, 100000, void 0, function (chunkSize) {\r\n                            var linesToRead = Math.min(molecule.num_atoms - linesAlreadyRead, chunkSize);\r\n                            for (var i = 0; i < linesToRead; i++) {\r\n                                for (var j = 0; j < columnCount; j++) {\r\n                                    skipWhitespace(tokenizer);\r\n                                    tokenizer.tokenStart = tokenizer.position;\r\n                                    eatValue(tokenizer);\r\n                                    switch (j) {\r\n                                        case 0:\r\n                                            TokenBuilder.addUnchecked(atom_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 1:\r\n                                            TokenBuilder.addUnchecked(atom_nameTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 2:\r\n                                            TokenBuilder.addUnchecked(xTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 3:\r\n                                            TokenBuilder.addUnchecked(yTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 4:\r\n                                            TokenBuilder.addUnchecked(zTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 5:\r\n                                            TokenBuilder.addUnchecked(atom_typeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 6:\r\n                                            TokenBuilder.addUnchecked(subst_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 7:\r\n                                            TokenBuilder.addUnchecked(subst_nameTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 8:\r\n                                            TokenBuilder.addUnchecked(chargeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 9:\r\n                                            TokenBuilder.addUnchecked(status_bitTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            linesAlreadyRead += linesToRead;\r\n                            return linesToRead;\r\n                        }, function (ctx) { return ctx.update({ message: 'Parsing...', current: tokenizer.position, max: length }); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    ret = {\r\n                        count: molecule.num_atoms,\r\n                        atom_id: TokenColumn(atom_idTokens)(Column.Schema.int),\r\n                        atom_name: TokenColumn(atom_nameTokens)(Column.Schema.str),\r\n                        x: TokenColumn(xTokens)(Column.Schema.float),\r\n                        y: TokenColumn(yTokens)(Column.Schema.float),\r\n                        z: TokenColumn(zTokens)(Column.Schema.float),\r\n                        atom_type: columnCount > 5 ? TokenColumn(atom_typeTokens)(Column.Schema.str) : undefStr,\r\n                        subst_id: columnCount > 6 ? TokenColumn(subst_idTokens)(Column.Schema.int) : undefInt,\r\n                        subst_name: columnCount > 7 ? TokenColumn(subst_nameTokens)(Column.Schema.str) : undefStr,\r\n                        charge: columnCount > 8 ? TokenColumn(chargeTokens)(Column.Schema.float) : undefFloat,\r\n                        status_bit: columnCount > 9 ? TokenColumn(status_bitTokens)(Column.Schema.str) : undefStr,\r\n                    };\r\n                    return [2 /*return*/, ret];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction handleBonds(state) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var tokenizer, molecule, initialTokenizerPosition, initialTokenizerLineNumber, firstLine, firstLineArray, columnCount, bond_idTokens, origin_bond_idTokens, target_bond_idTokens, bondTypeTokens, status_bitTokens, length, linesAlreadyRead, ret;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    tokenizer = state.tokenizer, molecule = state.molecule;\r\n                    while (getTokenString(tokenizer) !== '@<TRIPOS>BOND' && tokenizer.position < tokenizer.data.length) {\r\n                        markLine(tokenizer);\r\n                    }\r\n                    initialTokenizerPosition = tokenizer.position;\r\n                    initialTokenizerLineNumber = tokenizer.lineNumber;\r\n                    firstLine = readLine(tokenizer);\r\n                    firstLineArray = firstLine.trim().split(/\\s+/g);\r\n                    columnCount = firstLineArray.length;\r\n                    bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\r\n                    origin_bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\r\n                    target_bond_idTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\r\n                    bondTypeTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\r\n                    status_bitTokens = TokenBuilder.create(tokenizer.data, molecule.num_bonds * 2);\r\n                    tokenizer.position = initialTokenizerPosition;\r\n                    tokenizer.lineNumber = initialTokenizerLineNumber;\r\n                    length = tokenizer.length;\r\n                    linesAlreadyRead = 0;\r\n                    return [4 /*yield*/, chunkedSubtask(state.runtimeCtx, 100000, void 0, function (chunkSize) {\r\n                            var linesToRead = Math.min(molecule.num_bonds - linesAlreadyRead, chunkSize);\r\n                            for (var i = 0; i < linesToRead; i++) {\r\n                                for (var j = 0; j < columnCount; j++) {\r\n                                    skipWhitespace(tokenizer);\r\n                                    tokenizer.tokenStart = tokenizer.position;\r\n                                    eatValue(tokenizer);\r\n                                    switch (j) {\r\n                                        case 0:\r\n                                            TokenBuilder.addUnchecked(bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 1:\r\n                                            TokenBuilder.addUnchecked(origin_bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 2:\r\n                                            TokenBuilder.addUnchecked(target_bond_idTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        case 3:\r\n                                            TokenBuilder.addUnchecked(bondTypeTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                        default:\r\n                                            TokenBuilder.addUnchecked(status_bitTokens, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            linesAlreadyRead += linesToRead;\r\n                            return linesToRead;\r\n                        }, function (ctx) { return ctx.update({ message: 'Parsing...', current: tokenizer.position, max: length }); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    ret = {\r\n                        count: molecule.num_bonds,\r\n                        bond_id: TokenColumn(bond_idTokens)(Column.Schema.int),\r\n                        origin_atom_id: TokenColumn(origin_bond_idTokens)(Column.Schema.int),\r\n                        target_atom_id: TokenColumn(target_bond_idTokens)(Column.Schema.int),\r\n                        bond_type: TokenColumn(bondTypeTokens)(Column.Schema.str),\r\n                        status_bits: columnCount > 4\r\n                            ? TokenColumn(status_bitTokens)(Column.Schema.str)\r\n                            : Column.Undefined(molecule.num_bonds, Column.Schema.str),\r\n                    };\r\n                    return [2 /*return*/, ret];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction parseInternal(ctx, data, name) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var tokenizer, structures, state, atoms, bonds, result;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    tokenizer = Tokenizer(data);\r\n                    ctx.update({ message: 'Parsing...', current: 0, max: data.length });\r\n                    structures = [];\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(tokenizer.position < data.length)) return [3 /*break*/, 4];\r\n                    state = State(tokenizer, ctx);\r\n                    handleMolecule(state);\r\n                    return [4 /*yield*/, handleAtoms(state)];\r\n                case 2:\r\n                    atoms = _a.sent();\r\n                    return [4 /*yield*/, handleBonds(state)];\r\n                case 3:\r\n                    bonds = _a.sent();\r\n                    structures.push({ molecule: state.molecule, atoms: atoms, bonds: bonds });\r\n                    skipWhitespace(tokenizer);\r\n                    while (getTokenString(tokenizer) !== '@<TRIPOS>MOLECULE' && tokenizer.position < tokenizer.data.length) {\r\n                        markLine(tokenizer);\r\n                    }\r\n                    return [3 /*break*/, 1];\r\n                case 4:\r\n                    result = { name: name, structures: structures };\r\n                    return [2 /*return*/, Result.success(result)];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function parseMol2(data, name) {\r\n    var _this = this;\r\n    return Task.create('Parse MOL2', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, parseInternal(ctx, data, name)];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}