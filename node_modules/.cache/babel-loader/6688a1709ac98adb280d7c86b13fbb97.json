{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ValueCell } from '../mol-util';\nimport { idFactory } from '../mol-util/id-factory';\nimport { clamp } from '../mol-math/interpolate';\nvar getNextRenderableId = idFactory();\nexport function createRenderable(renderItem, values, state) {\n  return {\n    id: getNextRenderableId(),\n    materialId: renderItem.materialId,\n    values: values,\n    state: state,\n    render: function (variant, sharedTexturesList) {\n      if (values.uAlpha && values.alpha) {\n        ValueCell.updateIfChanged(values.uAlpha, clamp(values.alpha.ref.value * state.alphaFactor, 0, 1));\n      }\n\n      renderItem.render(variant, sharedTexturesList);\n    },\n    getProgram: function (variant) {\n      return renderItem.getProgram(variant);\n    },\n    update: function () {\n      return renderItem.update();\n    },\n    dispose: function () {\n      return renderItem.destroy();\n    }\n  };\n}\nexport function createComputeRenderable(renderItem, values) {\n  return {\n    id: getNextRenderableId(),\n    values: values,\n    render: function () {\n      return renderItem.render('compute');\n    },\n    update: function () {\n      return renderItem.update();\n    },\n    dispose: function () {\n      return renderItem.destroy();\n    }\n  };\n}","map":{"version":3,"sources":["../../src/mol-gl/renderable.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAKH,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,SAAT,QAA0B,wBAA1B;AACA,SAAS,KAAT,QAAsB,yBAAtB;AAGA,IAAM,mBAAmB,GAAG,SAAS,EAArC;AAyBA,OAAM,SAAU,gBAAV,CAA+D,UAA/D,EAA+F,MAA/F,EAA0G,KAA1G,EAAgI;AAClI,SAAO;AACH,IAAA,EAAE,EAAE,mBAAmB,EADpB;AAEH,IAAA,UAAU,EAAE,UAAU,CAAC,UAFpB;AAGH,IAAA,MAAM,EAAA,MAHH;AAIH,IAAA,KAAK,EAAA,KAJF;AAMH,IAAA,MAAM,EAAE,UAAC,OAAD,EAAiC,kBAAjC,EAA8D;AAClE,UAAI,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,KAA5B,EAAmC;AAC/B,QAAA,SAAS,CAAC,eAAV,CAA0B,MAAM,CAAC,MAAjC,EAAyC,KAAK,CAAC,MAAM,CAAC,KAAP,CAAa,GAAb,CAAiB,KAAjB,GAAyB,KAAK,CAAC,WAAhC,EAA6C,CAA7C,EAAgD,CAAhD,CAA9C;AACH;;AACD,MAAA,UAAU,CAAC,MAAX,CAAkB,OAAlB,EAA2B,kBAA3B;AACH,KAXE;AAYH,IAAA,UAAU,EAAE,UAAC,OAAD,EAA+B;AAAK,aAAA,UAAU,CAAC,UAAX,CAAA,OAAA,CAAA;AAA8B,KAZ3E;AAaH,IAAA,MAAM,EAAE,YAAA;AAAM,aAAA,UAAU,CAAV,MAAA,EAAA;AAAmB,KAb9B;AAcH,IAAA,OAAO,EAAE,YAAA;AAAM,aAAA,UAAU,CAAV,OAAA,EAAA;AAAoB;AAdhC,GAAP;AAgBH;AAeD,OAAM,SAAU,uBAAV,CAAsE,UAAtE,EAAqG,MAArG,EAA8G;AAChH,SAAO;AACH,IAAA,EAAE,EAAE,mBAAmB,EADpB;AAEH,IAAA,MAAM,EAAA,MAFH;AAIH,IAAA,MAAM,EAAE,YAAA;AAAM,aAAA,UAAU,CAAC,MAAX,CAAA,SAAA,CAAA;AAA4B,KAJvC;AAKH,IAAA,MAAM,EAAE,YAAA;AAAM,aAAA,UAAU,CAAV,MAAA,EAAA;AAAmB,KAL9B;AAMH,IAAA,OAAO,EAAE,YAAA;AAAM,aAAA,UAAU,CAAV,OAAA,EAAA;AAAoB;AANhC,GAAP;AAQH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ValueCell } from '../mol-util';\r\nimport { idFactory } from '../mol-util/id-factory';\r\nimport { clamp } from '../mol-math/interpolate';\r\nvar getNextRenderableId = idFactory();\r\nexport function createRenderable(renderItem, values, state) {\r\n    return {\r\n        id: getNextRenderableId(),\r\n        materialId: renderItem.materialId,\r\n        values: values,\r\n        state: state,\r\n        render: function (variant, sharedTexturesList) {\r\n            if (values.uAlpha && values.alpha) {\r\n                ValueCell.updateIfChanged(values.uAlpha, clamp(values.alpha.ref.value * state.alphaFactor, 0, 1));\r\n            }\r\n            renderItem.render(variant, sharedTexturesList);\r\n        },\r\n        getProgram: function (variant) { return renderItem.getProgram(variant); },\r\n        update: function () { return renderItem.update(); },\r\n        dispose: function () { return renderItem.destroy(); }\r\n    };\r\n}\r\nexport function createComputeRenderable(renderItem, values) {\r\n    return {\r\n        id: getNextRenderableId(),\r\n        values: values,\r\n        render: function () { return renderItem.render('compute'); },\r\n        update: function () { return renderItem.update(); },\r\n        dispose: function () { return renderItem.destroy(); }\r\n    };\r\n}\r\n//# sourceMappingURL=renderable.js.map"]},"metadata":{},"sourceType":"module"}