{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { GridLookup3D } from '../../../mol-math/geometry';\nimport { OrderedSet, SortedArray } from '../../../mol-data/int';\nimport { ValenceModelProvider } from '../valence-model';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { getBoundary } from '../../../mol-math/geometry/boundary';\nexport { Features };\nvar Features;\n\n(function (Features) {\n  function setPosition(out, unit, index, features) {\n    Vec3.set(out, features.x[index], features.y[index], features.z[index]);\n    Vec3.transformMat4(out, out, unit.conformation.operator.matrix);\n    return out;\n  }\n\n  Features.setPosition = setPosition;\n\n  function createElementsIndex(data, elementsCount) {\n    var offsets = new Int32Array(elementsCount + 1);\n    var bucketFill = new Int32Array(elementsCount);\n    var bucketSizes = new Int32Array(elementsCount);\n    var members = data.members,\n        count = data.count,\n        featureOffsets = data.offsets;\n\n    for (var i = 0, il = featureOffsets[count]; i < il; ++i) ++bucketSizes[members[i]];\n\n    var offset = 0;\n\n    for (var i = 0; i < elementsCount; i++) {\n      offsets[i] = offset;\n      offset += bucketSizes[i];\n    }\n\n    offsets[elementsCount] = offset;\n    var indices = new Int32Array(offset);\n\n    for (var i = 0; i < count; ++i) {\n      for (var j = featureOffsets[i], jl = featureOffsets[i + 1]; j < jl; ++j) {\n        var a = members[j];\n        var oa = offsets[a] + bucketFill[a];\n        indices[oa] = i;\n        ++bucketFill[a];\n      }\n    }\n\n    return {\n      indices: indices,\n      offsets: offsets\n    };\n  }\n\n  Features.createElementsIndex = createElementsIndex;\n\n  function create(elementsCount, data) {\n    var lookup3d;\n    var elementsIndex;\n    return __assign(__assign({}, data), {\n      get lookup3d() {\n        if (!lookup3d) {\n          var position_1 = {\n            x: data.x,\n            y: data.y,\n            z: data.z,\n            indices: OrderedSet.ofBounds(0, data.count)\n          };\n          lookup3d = GridLookup3D(position_1, getBoundary(position_1));\n        }\n\n        return lookup3d;\n      },\n\n      get elementsIndex() {\n        return elementsIndex || (elementsIndex = createElementsIndex(data, elementsCount));\n      },\n\n      subset: function (types) {\n        return createSubset(data, types);\n      }\n    });\n  }\n\n  Features.create = create;\n\n  function createSubset(data, types) {\n    var lookup3d;\n    var count = data.count,\n        _types = data.types;\n    var _indices = [];\n\n    for (var i = 0; i < count; ++i) {\n      if (types.has(_types[i])) _indices.push(i);\n    }\n\n    var indices = SortedArray.ofSortedArray(_indices);\n    return {\n      indices: indices,\n\n      get lookup3d() {\n        if (!lookup3d) {\n          var position_2 = {\n            x: data.x,\n            y: data.y,\n            z: data.z,\n            indices: indices\n          };\n          lookup3d = GridLookup3D(position_2, getBoundary(position_2));\n        }\n\n        return lookup3d;\n      }\n\n    };\n  }\n\n  Features.createSubset = createSubset;\n\n  function Info(structure, unit, features) {\n    var valenceModel = ValenceModelProvider.get(structure).value;\n    if (!valenceModel || !valenceModel.has(unit.id)) throw new Error('valence model required');\n    return {\n      unit: unit,\n      types: features.types,\n      feature: -1,\n      x: features.x,\n      y: features.y,\n      z: features.z,\n      members: features.members,\n      offsets: features.offsets,\n      idealGeometry: valenceModel.get(unit.id).idealGeometry\n    };\n  }\n\n  Features.Info = Info;\n\n  function position(out, info) {\n    Vec3.set(out, info.x[info.feature], info.y[info.feature], info.z[info.feature]);\n    Vec3.transformMat4(out, out, info.unit.conformation.operator.matrix);\n    return out;\n  }\n\n  Features.position = position;\n  var tmpVecA = Vec3();\n  var tmpVecB = Vec3();\n\n  function distance(infoA, infoB) {\n    var elementA = infoA.members[infoA.offsets[infoA.feature]];\n    var elementB = infoB.members[infoB.offsets[infoB.feature]];\n    infoA.unit.conformation.position(infoA.unit.elements[elementA], tmpVecA);\n    infoB.unit.conformation.position(infoB.unit.elements[elementB], tmpVecB);\n    return Vec3.distance(tmpVecA, tmpVecB);\n  }\n\n  Features.distance = distance;\n\n  function Provider(types, add) {\n    return {\n      types: new Set(types),\n      add: add\n    };\n  }\n\n  Features.Provider = Provider;\n})(Features || (Features = {}));\n\nexport { FeaturesBuilder };\nvar FeaturesBuilder;\n\n(function (FeaturesBuilder) {\n  function create(initialCount, chunkSize, features) {\n    if (initialCount === void 0) {\n      initialCount = 2048;\n    }\n\n    if (chunkSize === void 0) {\n      chunkSize = 1024;\n    }\n\n    var xCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.x : initialCount);\n    var yCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.y : initialCount);\n    var zCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.z : initialCount);\n    var types = ChunkedArray.create(Uint8Array, 1, chunkSize, features ? features.types : initialCount);\n    var groups = ChunkedArray.create(Uint8Array, 1, chunkSize, features ? features.groups : initialCount);\n    var offsets = ChunkedArray.create(Uint32Array, 1, chunkSize, features ? features.offsets : initialCount);\n    var members = ChunkedArray.create(Uint32Array, 1, chunkSize, features ? features.members : initialCount);\n    var state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      offset: 0,\n      count: 0\n    };\n    return {\n      startState: function () {\n        state.x = 0;\n        state.y = 0;\n        state.z = 0;\n        state.offset = members.elementCount;\n        state.count = 0;\n      },\n      pushMember: function (x, y, z, member) {\n        ChunkedArray.add(members, member);\n        state.x += x;\n        state.y += y;\n        state.z += z;\n        state.count += 1;\n      },\n      finishState: function (type, group) {\n        var count = state.count;\n        if (count === 0) return;\n        ChunkedArray.add(types, type);\n        ChunkedArray.add(groups, group);\n        ChunkedArray.add(xCenters, state.x / count);\n        ChunkedArray.add(yCenters, state.y / count);\n        ChunkedArray.add(zCenters, state.z / count);\n        ChunkedArray.add(offsets, state.offset);\n      },\n      add: function (type, group, x, y, z, member) {\n        ChunkedArray.add(types, type);\n        ChunkedArray.add(groups, group);\n        ChunkedArray.add(xCenters, x);\n        ChunkedArray.add(yCenters, y);\n        ChunkedArray.add(zCenters, z);\n        ChunkedArray.add(offsets, members.elementCount);\n        ChunkedArray.add(members, member);\n      },\n      getFeatures: function (elementsCount) {\n        ChunkedArray.add(offsets, members.elementCount);\n        var x = ChunkedArray.compact(xCenters, true);\n        var y = ChunkedArray.compact(yCenters, true);\n        var z = ChunkedArray.compact(zCenters, true);\n        var count = xCenters.elementCount;\n        return Features.create(elementsCount, {\n          x: x,\n          y: y,\n          z: z,\n          count: count,\n          types: ChunkedArray.compact(types, true),\n          groups: ChunkedArray.compact(groups, true),\n          offsets: ChunkedArray.compact(offsets, true),\n          members: ChunkedArray.compact(members, true)\n        });\n      }\n    };\n  }\n\n  FeaturesBuilder.create = create;\n})(FeaturesBuilder || (FeaturesBuilder = {}));","map":{"version":3,"sources":["../../../../src/mol-model-props/computed/interactions/features.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { GridLookup3D } from '../../../mol-math/geometry';\r\nimport { OrderedSet, SortedArray } from '../../../mol-data/int';\r\nimport { ValenceModelProvider } from '../valence-model';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { getBoundary } from '../../../mol-math/geometry/boundary';\r\nexport { Features };\r\nvar Features;\r\n(function (Features) {\r\n    function setPosition(out, unit, index, features) {\r\n        Vec3.set(out, features.x[index], features.y[index], features.z[index]);\r\n        Vec3.transformMat4(out, out, unit.conformation.operator.matrix);\r\n        return out;\r\n    }\r\n    Features.setPosition = setPosition;\r\n    function createElementsIndex(data, elementsCount) {\r\n        var offsets = new Int32Array(elementsCount + 1);\r\n        var bucketFill = new Int32Array(elementsCount);\r\n        var bucketSizes = new Int32Array(elementsCount);\r\n        var members = data.members, count = data.count, featureOffsets = data.offsets;\r\n        for (var i = 0, il = featureOffsets[count]; i < il; ++i)\r\n            ++bucketSizes[members[i]];\r\n        var offset = 0;\r\n        for (var i = 0; i < elementsCount; i++) {\r\n            offsets[i] = offset;\r\n            offset += bucketSizes[i];\r\n        }\r\n        offsets[elementsCount] = offset;\r\n        var indices = new Int32Array(offset);\r\n        for (var i = 0; i < count; ++i) {\r\n            for (var j = featureOffsets[i], jl = featureOffsets[i + 1]; j < jl; ++j) {\r\n                var a = members[j];\r\n                var oa = offsets[a] + bucketFill[a];\r\n                indices[oa] = i;\r\n                ++bucketFill[a];\r\n            }\r\n        }\r\n        return { indices: indices, offsets: offsets };\r\n    }\r\n    Features.createElementsIndex = createElementsIndex;\r\n    function create(elementsCount, data) {\r\n        var lookup3d;\r\n        var elementsIndex;\r\n        return __assign(__assign({}, data), { get lookup3d() {\r\n                if (!lookup3d) {\r\n                    var position_1 = { x: data.x, y: data.y, z: data.z, indices: OrderedSet.ofBounds(0, data.count) };\r\n                    lookup3d = GridLookup3D(position_1, getBoundary(position_1));\r\n                }\r\n                return lookup3d;\r\n            },\r\n            get elementsIndex() {\r\n                return elementsIndex || (elementsIndex = createElementsIndex(data, elementsCount));\r\n            }, subset: function (types) { return createSubset(data, types); } });\r\n    }\r\n    Features.create = create;\r\n    function createSubset(data, types) {\r\n        var lookup3d;\r\n        var count = data.count, _types = data.types;\r\n        var _indices = [];\r\n        for (var i = 0; i < count; ++i) {\r\n            if (types.has(_types[i]))\r\n                _indices.push(i);\r\n        }\r\n        var indices = SortedArray.ofSortedArray(_indices);\r\n        return {\r\n            indices: indices,\r\n            get lookup3d() {\r\n                if (!lookup3d) {\r\n                    var position_2 = { x: data.x, y: data.y, z: data.z, indices: indices };\r\n                    lookup3d = GridLookup3D(position_2, getBoundary(position_2));\r\n                }\r\n                return lookup3d;\r\n            }\r\n        };\r\n    }\r\n    Features.createSubset = createSubset;\r\n    function Info(structure, unit, features) {\r\n        var valenceModel = ValenceModelProvider.get(structure).value;\r\n        if (!valenceModel || !valenceModel.has(unit.id))\r\n            throw new Error('valence model required');\r\n        return {\r\n            unit: unit,\r\n            types: features.types,\r\n            feature: -1,\r\n            x: features.x,\r\n            y: features.y,\r\n            z: features.z,\r\n            members: features.members,\r\n            offsets: features.offsets,\r\n            idealGeometry: valenceModel.get(unit.id).idealGeometry\r\n        };\r\n    }\r\n    Features.Info = Info;\r\n    function position(out, info) {\r\n        Vec3.set(out, info.x[info.feature], info.y[info.feature], info.z[info.feature]);\r\n        Vec3.transformMat4(out, out, info.unit.conformation.operator.matrix);\r\n        return out;\r\n    }\r\n    Features.position = position;\r\n    var tmpVecA = Vec3();\r\n    var tmpVecB = Vec3();\r\n    function distance(infoA, infoB) {\r\n        var elementA = infoA.members[infoA.offsets[infoA.feature]];\r\n        var elementB = infoB.members[infoB.offsets[infoB.feature]];\r\n        infoA.unit.conformation.position(infoA.unit.elements[elementA], tmpVecA);\r\n        infoB.unit.conformation.position(infoB.unit.elements[elementB], tmpVecB);\r\n        return Vec3.distance(tmpVecA, tmpVecB);\r\n    }\r\n    Features.distance = distance;\r\n    function Provider(types, add) {\r\n        return { types: new Set(types), add: add };\r\n    }\r\n    Features.Provider = Provider;\r\n})(Features || (Features = {}));\r\nexport { FeaturesBuilder };\r\nvar FeaturesBuilder;\r\n(function (FeaturesBuilder) {\r\n    function create(initialCount, chunkSize, features) {\r\n        if (initialCount === void 0) { initialCount = 2048; }\r\n        if (chunkSize === void 0) { chunkSize = 1024; }\r\n        var xCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.x : initialCount);\r\n        var yCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.y : initialCount);\r\n        var zCenters = ChunkedArray.create(Float32Array, 1, chunkSize, features ? features.z : initialCount);\r\n        var types = ChunkedArray.create(Uint8Array, 1, chunkSize, features ? features.types : initialCount);\r\n        var groups = ChunkedArray.create(Uint8Array, 1, chunkSize, features ? features.groups : initialCount);\r\n        var offsets = ChunkedArray.create(Uint32Array, 1, chunkSize, features ? features.offsets : initialCount);\r\n        var members = ChunkedArray.create(Uint32Array, 1, chunkSize, features ? features.members : initialCount);\r\n        var state = { x: 0, y: 0, z: 0, offset: 0, count: 0 };\r\n        return {\r\n            startState: function () {\r\n                state.x = 0;\r\n                state.y = 0;\r\n                state.z = 0;\r\n                state.offset = members.elementCount;\r\n                state.count = 0;\r\n            },\r\n            pushMember: function (x, y, z, member) {\r\n                ChunkedArray.add(members, member);\r\n                state.x += x;\r\n                state.y += y;\r\n                state.z += z;\r\n                state.count += 1;\r\n            },\r\n            finishState: function (type, group) {\r\n                var count = state.count;\r\n                if (count === 0)\r\n                    return;\r\n                ChunkedArray.add(types, type);\r\n                ChunkedArray.add(groups, group);\r\n                ChunkedArray.add(xCenters, state.x / count);\r\n                ChunkedArray.add(yCenters, state.y / count);\r\n                ChunkedArray.add(zCenters, state.z / count);\r\n                ChunkedArray.add(offsets, state.offset);\r\n            },\r\n            add: function (type, group, x, y, z, member) {\r\n                ChunkedArray.add(types, type);\r\n                ChunkedArray.add(groups, group);\r\n                ChunkedArray.add(xCenters, x);\r\n                ChunkedArray.add(yCenters, y);\r\n                ChunkedArray.add(zCenters, z);\r\n                ChunkedArray.add(offsets, members.elementCount);\r\n                ChunkedArray.add(members, member);\r\n            },\r\n            getFeatures: function (elementsCount) {\r\n                ChunkedArray.add(offsets, members.elementCount);\r\n                var x = ChunkedArray.compact(xCenters, true);\r\n                var y = ChunkedArray.compact(yCenters, true);\r\n                var z = ChunkedArray.compact(zCenters, true);\r\n                var count = xCenters.elementCount;\r\n                return Features.create(elementsCount, {\r\n                    x: x,\r\n                    y: y,\r\n                    z: z,\r\n                    count: count,\r\n                    types: ChunkedArray.compact(types, true),\r\n                    groups: ChunkedArray.compact(groups, true),\r\n                    offsets: ChunkedArray.compact(offsets, true),\r\n                    members: ChunkedArray.compact(members, true),\r\n                });\r\n            }\r\n        };\r\n    }\r\n    FeaturesBuilder.create = create;\r\n})(FeaturesBuilder || (FeaturesBuilder = {}));\r\n//# sourceMappingURL=features.js.map"]},"metadata":{},"sourceType":"module"}