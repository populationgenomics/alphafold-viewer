{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nexport function arrayLess(arr, i, j) {\n  return arr[i] - arr[j];\n}\nexport function arraySwap(arr, i, j) {\n  var temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n\nfunction medianPivotIndex(data, cmp, l, r) {\n  var m = l + r >> 1;\n  if (cmp(data, l, r) > 0) return cmp(data, l, m) > 0 ? cmp(data, m, r) > 0 ? m : r : l;else return cmp(data, r, m) > 0 ? cmp(data, m, l) > 0 ? m : l : r;\n}\n\nfunction partition(ctx, l, r) {\n  var cmp = ctx.cmp,\n      swap = ctx.swap,\n      data = ctx.data,\n      parts = ctx.parts;\n  var equals = l + 1,\n      tail = r; // move the median to the 1st spot\n\n  swap(data, l, medianPivotIndex(data, cmp, l, r));\n\n  while (cmp(data, tail, l) > 0) {\n    --tail;\n  }\n\n  for (var i = l + 1; i <= tail; i++) {\n    var c = cmp(data, i, l);\n\n    if (c > 0) {\n      swap(data, i, tail);\n      --tail;\n\n      while (cmp(data, tail, l) > 0) {\n        --tail;\n      }\n\n      i--;\n    } else if (c === 0) {\n      swap(data, i, equals);\n      equals++;\n    }\n  } // move the medians to the correct spots\n\n\n  for (var i = l; i < equals; i++) {\n    swap(data, i, l + tail - i);\n  }\n\n  parts[0] = tail - equals + l + 1;\n  parts[1] = tail;\n}\n\nfunction insertionSort(_a, start, end) {\n  var data = _a.data,\n      cmp = _a.cmp,\n      swap = _a.swap;\n\n  for (var i = start + 1; i <= end; i++) {\n    var j = i - 1;\n\n    while (j >= start && cmp(data, j, j + 1) > 0) {\n      swap(data, j, j + 1);\n      j = j - 1;\n    }\n  }\n}\n\nfunction quickSort(ctx, low, high) {\n  var parts = ctx.parts;\n\n  while (low < high) {\n    if (high - low < 16) {\n      insertionSort(ctx, low, high);\n      return;\n    }\n\n    partition(ctx, low, high);\n    var li = parts[0],\n        ri = parts[1];\n\n    if (li - low < high - ri) {\n      quickSort(ctx, low, li - 1);\n      low = ri + 1;\n    } else {\n      quickSort(ctx, ri + 1, high);\n      high = li - 1;\n    }\n  }\n}\n\nfunction partitionArrayAsc(data, parts, l, r) {\n  var equals = l + 1,\n      tail = r; // move the median to the 1st spot\n\n  arraySwap(data, l, medianPivotIndex(data, arrayLess, l, r));\n  var pivot = data[l];\n\n  while (data[tail] > pivot) {\n    --tail;\n  }\n\n  for (var i = l + 1; i <= tail; i++) {\n    var v = data[i];\n\n    if (v > pivot) {\n      arraySwap(data, i, tail);\n      --tail;\n\n      while (data[tail] > pivot) {\n        --tail;\n      }\n\n      i--;\n    } else if (v === pivot) {\n      arraySwap(data, i, equals);\n      ++equals;\n    }\n  } // move all medians to the correct spots\n\n\n  for (var i = l; i < equals; i++) {\n    arraySwap(data, i, l + tail - i);\n  }\n\n  parts[0] = tail - equals + l + 1;\n  parts[1] = tail;\n}\n\nfunction insertionSortArrayAsc(data, start, end) {\n  for (var i = start + 1; i <= end; i++) {\n    var key = data[i];\n    var j = i - 1;\n\n    while (j >= start && data[j] > key) {\n      data[j + 1] = data[j];\n      j = j - 1;\n    }\n\n    data[j + 1] = key;\n  }\n}\n\nfunction quickSortArrayAsc(data, parts, low, high) {\n  while (low < high) {\n    if (high - low < 16) {\n      insertionSortArrayAsc(data, low, high);\n      return;\n    }\n\n    partitionArrayAsc(data, parts, low, high);\n    var li = parts[0],\n        ri = parts[1];\n\n    if (li - low < high - ri) {\n      quickSortArrayAsc(data, parts, low, li - 1);\n      low = ri + 1;\n    } else {\n      quickSortArrayAsc(data, parts, ri + 1, high);\n      high = li - 1;\n    }\n  }\n}\n\nexport function sortArray(data, cmp) {\n  if (cmp === void 0) {\n    cmp = arrayLess;\n  }\n\n  return sortArrayRange(data, 0, data.length, cmp);\n}\nexport function sortArrayRange(data, start, end, cmp) {\n  if (cmp === void 0) {\n    cmp = arrayLess;\n  }\n\n  if (cmp === arrayLess) quickSortArrayAsc(data, [0, 0], start, end - 1);else quickSort({\n    data: data,\n    cmp: cmp,\n    swap: arraySwap,\n    parts: [0, 0]\n  }, start, end - 1);\n  return data;\n}\nexport function sort(data, start, end, cmp, swap) {\n  var ctx = {\n    data: data,\n    cmp: cmp,\n    swap: swap,\n    parts: [0, 0]\n  };\n  quickSort(ctx, start, end - 1);\n  return data;\n}","map":{"version":3,"sources":["../../../src/mol-data/util/sort.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nexport function arrayLess(arr, i, j) {\r\n    return arr[i] - arr[j];\r\n}\r\nexport function arraySwap(arr, i, j) {\r\n    var temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\nfunction medianPivotIndex(data, cmp, l, r) {\r\n    var m = (l + r) >> 1;\r\n    if (cmp(data, l, r) > 0)\r\n        return cmp(data, l, m) > 0 ? cmp(data, m, r) > 0 ? m : r : l;\r\n    else\r\n        return cmp(data, r, m) > 0 ? cmp(data, m, l) > 0 ? m : l : r;\r\n}\r\nfunction partition(ctx, l, r) {\r\n    var cmp = ctx.cmp, swap = ctx.swap, data = ctx.data, parts = ctx.parts;\r\n    var equals = l + 1, tail = r;\r\n    // move the median to the 1st spot\r\n    swap(data, l, medianPivotIndex(data, cmp, l, r));\r\n    while (cmp(data, tail, l) > 0) {\r\n        --tail;\r\n    }\r\n    for (var i = l + 1; i <= tail; i++) {\r\n        var c = cmp(data, i, l);\r\n        if (c > 0) {\r\n            swap(data, i, tail);\r\n            --tail;\r\n            while (cmp(data, tail, l) > 0) {\r\n                --tail;\r\n            }\r\n            i--;\r\n        }\r\n        else if (c === 0) {\r\n            swap(data, i, equals);\r\n            equals++;\r\n        }\r\n    }\r\n    // move the medians to the correct spots\r\n    for (var i = l; i < equals; i++) {\r\n        swap(data, i, l + tail - i);\r\n    }\r\n    parts[0] = tail - equals + l + 1;\r\n    parts[1] = tail;\r\n}\r\nfunction insertionSort(_a, start, end) {\r\n    var data = _a.data, cmp = _a.cmp, swap = _a.swap;\r\n    for (var i = start + 1; i <= end; i++) {\r\n        var j = i - 1;\r\n        while (j >= start && cmp(data, j, j + 1) > 0) {\r\n            swap(data, j, j + 1);\r\n            j = j - 1;\r\n        }\r\n    }\r\n}\r\nfunction quickSort(ctx, low, high) {\r\n    var parts = ctx.parts;\r\n    while (low < high) {\r\n        if (high - low < 16) {\r\n            insertionSort(ctx, low, high);\r\n            return;\r\n        }\r\n        partition(ctx, low, high);\r\n        var li = parts[0], ri = parts[1];\r\n        if (li - low < high - ri) {\r\n            quickSort(ctx, low, li - 1);\r\n            low = ri + 1;\r\n        }\r\n        else {\r\n            quickSort(ctx, ri + 1, high);\r\n            high = li - 1;\r\n        }\r\n    }\r\n}\r\nfunction partitionArrayAsc(data, parts, l, r) {\r\n    var equals = l + 1, tail = r;\r\n    // move the median to the 1st spot\r\n    arraySwap(data, l, medianPivotIndex(data, arrayLess, l, r));\r\n    var pivot = data[l];\r\n    while (data[tail] > pivot) {\r\n        --tail;\r\n    }\r\n    for (var i = l + 1; i <= tail; i++) {\r\n        var v = data[i];\r\n        if (v > pivot) {\r\n            arraySwap(data, i, tail);\r\n            --tail;\r\n            while (data[tail] > pivot) {\r\n                --tail;\r\n            }\r\n            i--;\r\n        }\r\n        else if (v === pivot) {\r\n            arraySwap(data, i, equals);\r\n            ++equals;\r\n        }\r\n    }\r\n    // move all medians to the correct spots\r\n    for (var i = l; i < equals; i++) {\r\n        arraySwap(data, i, l + tail - i);\r\n    }\r\n    parts[0] = tail - equals + l + 1;\r\n    parts[1] = tail;\r\n}\r\nfunction insertionSortArrayAsc(data, start, end) {\r\n    for (var i = start + 1; i <= end; i++) {\r\n        var key = data[i];\r\n        var j = i - 1;\r\n        while (j >= start && data[j] > key) {\r\n            data[j + 1] = data[j];\r\n            j = j - 1;\r\n        }\r\n        data[j + 1] = key;\r\n    }\r\n}\r\nfunction quickSortArrayAsc(data, parts, low, high) {\r\n    while (low < high) {\r\n        if (high - low < 16) {\r\n            insertionSortArrayAsc(data, low, high);\r\n            return;\r\n        }\r\n        partitionArrayAsc(data, parts, low, high);\r\n        var li = parts[0], ri = parts[1];\r\n        if (li - low < high - ri) {\r\n            quickSortArrayAsc(data, parts, low, li - 1);\r\n            low = ri + 1;\r\n        }\r\n        else {\r\n            quickSortArrayAsc(data, parts, ri + 1, high);\r\n            high = li - 1;\r\n        }\r\n    }\r\n}\r\nexport function sortArray(data, cmp) {\r\n    if (cmp === void 0) { cmp = arrayLess; }\r\n    return sortArrayRange(data, 0, data.length, cmp);\r\n}\r\nexport function sortArrayRange(data, start, end, cmp) {\r\n    if (cmp === void 0) { cmp = arrayLess; }\r\n    if (cmp === arrayLess)\r\n        quickSortArrayAsc(data, [0, 0], start, end - 1);\r\n    else\r\n        quickSort({ data: data, cmp: cmp, swap: arraySwap, parts: [0, 0] }, start, end - 1);\r\n    return data;\r\n}\r\nexport function sort(data, start, end, cmp, swap) {\r\n    var ctx = { data: data, cmp: cmp, swap: swap, parts: [0, 0] };\r\n    quickSort(ctx, start, end - 1);\r\n    return data;\r\n}\r\n//# sourceMappingURL=sort.js.map"]},"metadata":{},"sourceType":"module"}