{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ColumnHelpers } from '../../../../../mol-data/db';\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../number-parser';\nexport function TokenColumnProvider(tokens) {\n  return function (type) {\n    return TokenColumn(tokens, type);\n  };\n}\nexport function TokenColumn(tokens, schema) {\n  var data = tokens.data,\n      indices = tokens.indices,\n      rowCount = tokens.count;\n  var type = schema.valueType;\n  var value = type === 'str' ? function (row) {\n    return data.substring(indices[2 * row], indices[2 * row + 1]);\n  } : type === 'int' ? function (row) {\n    return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0;\n  } : function (row) {\n    return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0;\n  };\n  return {\n    schema: schema,\n    __array: void 0,\n    isDefined: true,\n    rowCount: rowCount,\n    value: value,\n    valueKind: function (row) {\n      return 0\n      /* Present */\n      ;\n    },\n    toArray: function (params) {\n      return ColumnHelpers.createAndFillArray(rowCount, value, params);\n    },\n    areValuesEqual: areValuesEqualProvider(tokens)\n  };\n}\nexport function areValuesEqualProvider(tokens) {\n  var data = tokens.data,\n      indices = tokens.indices;\n  return function (rowA, rowB) {\n    var aS = indices[2 * rowA],\n        bS = indices[2 * rowB];\n    var len = indices[2 * rowA + 1] - aS;\n    if (len !== indices[2 * rowB + 1] - bS) return false;\n\n    for (var i = 0; i < len; i++) {\n      if (data.charCodeAt(i + aS) !== data.charCodeAt(i + bS)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\nexport function areTokensEmpty(tokens) {\n  var count = tokens.count,\n      indices = tokens.indices;\n\n  for (var i = 0; i < count; ++i) {\n    if (indices[2 * i] !== indices[2 * i + 1]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../../../../src/mol-io/reader/common/text/column/token.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ColumnHelpers } from '../../../../../mol-data/db';\r\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../number-parser';\r\nexport function TokenColumnProvider(tokens) {\r\n    return function (type) {\r\n        return TokenColumn(tokens, type);\r\n    };\r\n}\r\nexport function TokenColumn(tokens, schema) {\r\n    var data = tokens.data, indices = tokens.indices, rowCount = tokens.count;\r\n    var type = schema.valueType;\r\n    var value = type === 'str'\r\n        ? function (row) { return data.substring(indices[2 * row], indices[2 * row + 1]); }\r\n        : type === 'int'\r\n            ? function (row) { return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0; }\r\n            : function (row) { return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0; };\r\n    return {\r\n        schema: schema,\r\n        __array: void 0,\r\n        isDefined: true,\r\n        rowCount: rowCount,\r\n        value: value,\r\n        valueKind: function (row) { return 0 /* Present */; },\r\n        toArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, value, params); },\r\n        areValuesEqual: areValuesEqualProvider(tokens)\r\n    };\r\n}\r\nexport function areValuesEqualProvider(tokens) {\r\n    var data = tokens.data, indices = tokens.indices;\r\n    return function (rowA, rowB) {\r\n        var aS = indices[2 * rowA], bS = indices[2 * rowB];\r\n        var len = indices[2 * rowA + 1] - aS;\r\n        if (len !== indices[2 * rowB + 1] - bS)\r\n            return false;\r\n        for (var i = 0; i < len; i++) {\r\n            if (data.charCodeAt(i + aS) !== data.charCodeAt(i + bS)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}\r\nexport function areTokensEmpty(tokens) {\r\n    var count = tokens.count, indices = tokens.indices;\r\n    for (var i = 0; i < count; ++i) {\r\n        if (indices[2 * i] !== indices[2 * i + 1])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n//# sourceMappingURL=token.js.map"]},"metadata":{},"sourceType":"module"}