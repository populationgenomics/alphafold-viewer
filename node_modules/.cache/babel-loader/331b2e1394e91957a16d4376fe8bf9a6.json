{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createComputeRenderable } from '../../renderable';\nimport { createComputeRenderItem } from '../../webgl/render-item';\nimport { TextureSpec, UniformSpec } from '../../renderable/schema';\nimport { ShaderCode } from '../../../mol-gl/shader-code';\nimport { ValueCell } from '../../../mol-util';\nimport { QuadSchema, QuadValues } from '../util';\nimport { getHistopyramidSum } from './sum';\nimport { isPowerOfTwo } from '../../../mol-math/misc';\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\nimport { reduction_frag } from '../../../mol-gl/shader/histogram-pyramid/reduction.frag';\nimport { isWebGL2 } from '../../webgl/compat';\n\nvar HistopyramidReductionSchema = __assign(__assign({}, QuadSchema), {\n  tInputLevel: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  tPreviousLevel: TextureSpec('texture', 'rgba', 'float', 'nearest'),\n  uSize: UniformSpec('f'),\n  uTexSize: UniformSpec('f'),\n  uFirst: UniformSpec('b')\n});\n\nvar HistogramPyramidName = 'histogram-pyramid';\n\nfunction getHistopyramidReductionRenderable(ctx, inputLevel, previousLevel) {\n  if (ctx.namedComputeRenderables[HistogramPyramidName]) {\n    var v = ctx.namedComputeRenderables[HistogramPyramidName].values;\n    ValueCell.update(v.tInputLevel, inputLevel);\n    ValueCell.update(v.tPreviousLevel, previousLevel);\n    ctx.namedComputeRenderables[HistogramPyramidName].update();\n  } else {\n    ctx.namedComputeRenderables[HistogramPyramidName] = createHistopyramidReductionRenderable(ctx, inputLevel, previousLevel);\n  }\n\n  return ctx.namedComputeRenderables[HistogramPyramidName];\n}\n\nfunction createHistopyramidReductionRenderable(ctx, inputLevel, previousLevel) {\n  var values = __assign(__assign({}, QuadValues), {\n    tInputLevel: ValueCell.create(inputLevel),\n    tPreviousLevel: ValueCell.create(previousLevel),\n    uSize: ValueCell.create(0),\n    uTexSize: ValueCell.create(0),\n    uFirst: ValueCell.create(true)\n  });\n\n  var schema = __assign({}, HistopyramidReductionSchema);\n\n  var shaderCode = ShaderCode('reduction', quad_vert, reduction_frag, {}, {\n    0: 'ivec4'\n  });\n  var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nfunction getLevelTextureFramebuffer(ctx, level) {\n  var size = Math.pow(2, level);\n  var name = \"level\" + level;\n  var texture = ctx.isWebGL2 ? getTexture(name, ctx, 'image-int32', 'alpha', 'int', 'nearest') : getTexture(name, ctx, 'image-uint8', 'rgba', 'ubyte', 'nearest');\n  texture.define(size, size);\n  var framebuffer = tryGetFramebuffer(name, ctx);\n\n  if (!framebuffer) {\n    framebuffer = getFramebuffer(name, ctx);\n    texture.attachFramebuffer(framebuffer, 0);\n  }\n\n  return {\n    texture: texture,\n    framebuffer: framebuffer\n  };\n}\n\nfunction setRenderingDefaults(ctx) {\n  var gl = ctx.gl,\n      state = ctx.state;\n  state.disable(gl.CULL_FACE);\n  state.disable(gl.BLEND);\n  state.disable(gl.DEPTH_TEST);\n  state.enable(gl.SCISSOR_TEST);\n  state.depthMask(false);\n  state.colorMask(true, true, true, true);\n  state.clearColor(0, 0, 0, 0);\n}\n\nfunction getFramebuffer(name, webgl) {\n  var _name = HistogramPyramidName + \"-\" + name;\n\n  if (!webgl.namedFramebuffers[_name]) {\n    webgl.namedFramebuffers[_name] = webgl.resources.framebuffer();\n  }\n\n  return webgl.namedFramebuffers[_name];\n}\n\nfunction getTexture(name, webgl, kind, format, type, filter) {\n  var _name = HistogramPyramidName + \"-\" + name;\n\n  if (!webgl.namedTextures[_name]) {\n    webgl.namedTextures[_name] = webgl.resources.texture(kind, format, type, filter);\n  }\n\n  return webgl.namedTextures[_name];\n}\n\nfunction tryGetFramebuffer(name, webgl) {\n  var _name = HistogramPyramidName + \"-\" + name;\n\n  return webgl.namedFramebuffers[_name];\n}\n\nexport function createHistogramPyramid(ctx, inputTexture, scale, gridTexDim) {\n  var gl = ctx.gl;\n  var w = inputTexture.getWidth();\n  var h = inputTexture.getHeight(); // printTexture(ctx, inputTexture, 2)\n\n  if (w !== h || !isPowerOfTwo(w)) {\n    throw new Error('inputTexture must be of square power-of-two size');\n  } // This part set the levels\n\n\n  var levels = Math.ceil(Math.log(w) / Math.log(2));\n  var maxSize = Math.pow(2, levels);\n  var maxSizeX = Math.pow(2, levels);\n  var maxSizeY = Math.pow(2, levels - 1); // console.log('levels', levels, 'maxSize', maxSize, [maxSizeX, maxSizeY], 'input', w);\n\n  var pyramidTex = ctx.isWebGL2 ? getTexture('pyramid', ctx, 'image-int32', 'alpha', 'int', 'nearest') : getTexture('pyramid', ctx, 'image-uint8', 'rgba', 'ubyte', 'nearest');\n  pyramidTex.define(maxSizeX, maxSizeY);\n  var framebuffer = getFramebuffer('pyramid', ctx);\n  pyramidTex.attachFramebuffer(framebuffer, 0);\n  gl.viewport(0, 0, maxSizeX, maxSizeY);\n\n  if (isWebGL2(gl)) {\n    gl.clearBufferiv(gl.COLOR, 0, [0, 0, 0, 0]);\n  } else {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n  }\n\n  var levelTexturesFramebuffers = [];\n\n  for (var i = 0; i < levels; ++i) levelTexturesFramebuffers.push(getLevelTextureFramebuffer(ctx, i));\n\n  var renderable = getHistopyramidReductionRenderable(ctx, inputTexture, levelTexturesFramebuffers[0].texture);\n  ctx.state.currentRenderItemId = -1;\n  setRenderingDefaults(ctx);\n  var offset = 0;\n\n  for (var i = 0; i < levels; i++) {\n    var currLevel = levels - 1 - i;\n    var tf = levelTexturesFramebuffers[currLevel];\n    tf.framebuffer.bind();\n    var size = Math.pow(2, currLevel); // console.log('size', size, 'draw-level', currLevel, 'read-level', levels - i);\n\n    ValueCell.update(renderable.values.uSize, Math.pow(2, i + 1) / maxSize);\n    ValueCell.update(renderable.values.uTexSize, size);\n    ValueCell.updateIfChanged(renderable.values.uFirst, i === 0);\n\n    if (i > 0) {\n      ValueCell.update(renderable.values.tPreviousLevel, levelTexturesFramebuffers[levels - i].texture);\n      renderable.update();\n    }\n\n    ctx.state.currentRenderItemId = -1;\n    gl.viewport(0, 0, size, size);\n    gl.scissor(0, 0, size, size);\n\n    if (isWebGL2(gl)) {\n      gl.clearBufferiv(gl.COLOR, 0, [0, 0, 0, 0]);\n    } else {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    gl.scissor(0, 0, gridTexDim[0], gridTexDim[1]);\n    renderable.render();\n    pyramidTex.bind(0);\n    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, offset, 0, 0, 0, size, size);\n    pyramidTex.unbind(0);\n    offset += size;\n  }\n\n  gl.finish(); // printTexture(ctx, pyramidTex, 2)\n  //\n  // return at least a count of one to avoid issues downstram\n\n  var count = Math.max(1, getHistopyramidSum(ctx, levelTexturesFramebuffers[0].texture));\n  var height = Math.ceil(count / Math.pow(2, levels)); // const scale = Vec2.create(maxSize / inputTexture.width, maxSize / inputTexture.height);\n  // console.log('height', height, 'finalCount', count, 'scale', scale);\n\n  return {\n    pyramidTex: pyramidTex,\n    count: count,\n    height: height,\n    levels: levels,\n    scale: scale\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-gl/compute/histogram-pyramid/reduction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createComputeRenderable } from '../../renderable';\r\nimport { createComputeRenderItem } from '../../webgl/render-item';\r\nimport { TextureSpec, UniformSpec } from '../../renderable/schema';\r\nimport { ShaderCode } from '../../../mol-gl/shader-code';\r\nimport { ValueCell } from '../../../mol-util';\r\nimport { QuadSchema, QuadValues } from '../util';\r\nimport { getHistopyramidSum } from './sum';\r\nimport { isPowerOfTwo } from '../../../mol-math/misc';\r\nimport { quad_vert } from '../../../mol-gl/shader/quad.vert';\r\nimport { reduction_frag } from '../../../mol-gl/shader/histogram-pyramid/reduction.frag';\r\nimport { isWebGL2 } from '../../webgl/compat';\r\nvar HistopyramidReductionSchema = __assign(__assign({}, QuadSchema), { tInputLevel: TextureSpec('texture', 'rgba', 'float', 'nearest'), tPreviousLevel: TextureSpec('texture', 'rgba', 'float', 'nearest'), uSize: UniformSpec('f'), uTexSize: UniformSpec('f'), uFirst: UniformSpec('b') });\r\nvar HistogramPyramidName = 'histogram-pyramid';\r\nfunction getHistopyramidReductionRenderable(ctx, inputLevel, previousLevel) {\r\n    if (ctx.namedComputeRenderables[HistogramPyramidName]) {\r\n        var v = ctx.namedComputeRenderables[HistogramPyramidName].values;\r\n        ValueCell.update(v.tInputLevel, inputLevel);\r\n        ValueCell.update(v.tPreviousLevel, previousLevel);\r\n        ctx.namedComputeRenderables[HistogramPyramidName].update();\r\n    }\r\n    else {\r\n        ctx.namedComputeRenderables[HistogramPyramidName] = createHistopyramidReductionRenderable(ctx, inputLevel, previousLevel);\r\n    }\r\n    return ctx.namedComputeRenderables[HistogramPyramidName];\r\n}\r\nfunction createHistopyramidReductionRenderable(ctx, inputLevel, previousLevel) {\r\n    var values = __assign(__assign({}, QuadValues), { tInputLevel: ValueCell.create(inputLevel), tPreviousLevel: ValueCell.create(previousLevel), uSize: ValueCell.create(0), uTexSize: ValueCell.create(0), uFirst: ValueCell.create(true) });\r\n    var schema = __assign({}, HistopyramidReductionSchema);\r\n    var shaderCode = ShaderCode('reduction', quad_vert, reduction_frag, {}, { 0: 'ivec4' });\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', shaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nfunction getLevelTextureFramebuffer(ctx, level) {\r\n    var size = Math.pow(2, level);\r\n    var name = \"level\" + level;\r\n    var texture = ctx.isWebGL2\r\n        ? getTexture(name, ctx, 'image-int32', 'alpha', 'int', 'nearest')\r\n        : getTexture(name, ctx, 'image-uint8', 'rgba', 'ubyte', 'nearest');\r\n    texture.define(size, size);\r\n    var framebuffer = tryGetFramebuffer(name, ctx);\r\n    if (!framebuffer) {\r\n        framebuffer = getFramebuffer(name, ctx);\r\n        texture.attachFramebuffer(framebuffer, 0);\r\n    }\r\n    return { texture: texture, framebuffer: framebuffer };\r\n}\r\nfunction setRenderingDefaults(ctx) {\r\n    var gl = ctx.gl, state = ctx.state;\r\n    state.disable(gl.CULL_FACE);\r\n    state.disable(gl.BLEND);\r\n    state.disable(gl.DEPTH_TEST);\r\n    state.enable(gl.SCISSOR_TEST);\r\n    state.depthMask(false);\r\n    state.colorMask(true, true, true, true);\r\n    state.clearColor(0, 0, 0, 0);\r\n}\r\nfunction getFramebuffer(name, webgl) {\r\n    var _name = HistogramPyramidName + \"-\" + name;\r\n    if (!webgl.namedFramebuffers[_name]) {\r\n        webgl.namedFramebuffers[_name] = webgl.resources.framebuffer();\r\n    }\r\n    return webgl.namedFramebuffers[_name];\r\n}\r\nfunction getTexture(name, webgl, kind, format, type, filter) {\r\n    var _name = HistogramPyramidName + \"-\" + name;\r\n    if (!webgl.namedTextures[_name]) {\r\n        webgl.namedTextures[_name] = webgl.resources.texture(kind, format, type, filter);\r\n    }\r\n    return webgl.namedTextures[_name];\r\n}\r\nfunction tryGetFramebuffer(name, webgl) {\r\n    var _name = HistogramPyramidName + \"-\" + name;\r\n    return webgl.namedFramebuffers[_name];\r\n}\r\nexport function createHistogramPyramid(ctx, inputTexture, scale, gridTexDim) {\r\n    var gl = ctx.gl;\r\n    var w = inputTexture.getWidth();\r\n    var h = inputTexture.getHeight();\r\n    // printTexture(ctx, inputTexture, 2)\r\n    if (w !== h || !isPowerOfTwo(w)) {\r\n        throw new Error('inputTexture must be of square power-of-two size');\r\n    }\r\n    // This part set the levels\r\n    var levels = Math.ceil(Math.log(w) / Math.log(2));\r\n    var maxSize = Math.pow(2, levels);\r\n    var maxSizeX = Math.pow(2, levels);\r\n    var maxSizeY = Math.pow(2, levels - 1);\r\n    // console.log('levels', levels, 'maxSize', maxSize, [maxSizeX, maxSizeY], 'input', w);\r\n    var pyramidTex = ctx.isWebGL2\r\n        ? getTexture('pyramid', ctx, 'image-int32', 'alpha', 'int', 'nearest')\r\n        : getTexture('pyramid', ctx, 'image-uint8', 'rgba', 'ubyte', 'nearest');\r\n    pyramidTex.define(maxSizeX, maxSizeY);\r\n    var framebuffer = getFramebuffer('pyramid', ctx);\r\n    pyramidTex.attachFramebuffer(framebuffer, 0);\r\n    gl.viewport(0, 0, maxSizeX, maxSizeY);\r\n    if (isWebGL2(gl)) {\r\n        gl.clearBufferiv(gl.COLOR, 0, [0, 0, 0, 0]);\r\n    }\r\n    else {\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    }\r\n    var levelTexturesFramebuffers = [];\r\n    for (var i = 0; i < levels; ++i)\r\n        levelTexturesFramebuffers.push(getLevelTextureFramebuffer(ctx, i));\r\n    var renderable = getHistopyramidReductionRenderable(ctx, inputTexture, levelTexturesFramebuffers[0].texture);\r\n    ctx.state.currentRenderItemId = -1;\r\n    setRenderingDefaults(ctx);\r\n    var offset = 0;\r\n    for (var i = 0; i < levels; i++) {\r\n        var currLevel = levels - 1 - i;\r\n        var tf = levelTexturesFramebuffers[currLevel];\r\n        tf.framebuffer.bind();\r\n        var size = Math.pow(2, currLevel);\r\n        // console.log('size', size, 'draw-level', currLevel, 'read-level', levels - i);\r\n        ValueCell.update(renderable.values.uSize, Math.pow(2, i + 1) / maxSize);\r\n        ValueCell.update(renderable.values.uTexSize, size);\r\n        ValueCell.updateIfChanged(renderable.values.uFirst, i === 0);\r\n        if (i > 0) {\r\n            ValueCell.update(renderable.values.tPreviousLevel, levelTexturesFramebuffers[levels - i].texture);\r\n            renderable.update();\r\n        }\r\n        ctx.state.currentRenderItemId = -1;\r\n        gl.viewport(0, 0, size, size);\r\n        gl.scissor(0, 0, size, size);\r\n        if (isWebGL2(gl)) {\r\n            gl.clearBufferiv(gl.COLOR, 0, [0, 0, 0, 0]);\r\n        }\r\n        else {\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        gl.scissor(0, 0, gridTexDim[0], gridTexDim[1]);\r\n        renderable.render();\r\n        pyramidTex.bind(0);\r\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, offset, 0, 0, 0, size, size);\r\n        pyramidTex.unbind(0);\r\n        offset += size;\r\n    }\r\n    gl.finish();\r\n    // printTexture(ctx, pyramidTex, 2)\r\n    //\r\n    // return at least a count of one to avoid issues downstram\r\n    var count = Math.max(1, getHistopyramidSum(ctx, levelTexturesFramebuffers[0].texture));\r\n    var height = Math.ceil(count / Math.pow(2, levels));\r\n    // const scale = Vec2.create(maxSize / inputTexture.width, maxSize / inputTexture.height);\r\n    // console.log('height', height, 'finalCount', count, 'scale', scale);\r\n    return { pyramidTex: pyramidTex, count: count, height: height, levels: levels, scale: scale };\r\n}\r\n//# sourceMappingURL=reduction.js.map"]},"metadata":{},"sourceType":"module"}