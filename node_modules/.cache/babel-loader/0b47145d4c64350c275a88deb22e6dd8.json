{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { StateAction, StateSelection } from '../../mol-state';\nimport { Task } from '../../mol-task';\nimport { getFileInfo } from '../../mol-util/file-info';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { PluginStateObject } from '../objects';\nimport { Asset } from '../../mol-util/assets';\nimport { StateTransforms } from '../transforms';\nexport { DownloadDensity };\nvar DownloadDensity = StateAction.build({\n  from: PluginStateObject.Root,\n  display: {\n    name: 'Download Density',\n    description: 'Load a density from the provided source and create its default visual.'\n  },\n  params: function (a, ctx) {\n    var options = ctx.dataFormats.options;\n    return {\n      source: PD.MappedStatic('pdb-xray', {\n        'pdb-xray': PD.Group({\n          provider: PD.Group({\n            id: PD.Text('1tqn', {\n              label: 'Id'\n            }),\n            server: PD.Select('rcsb', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']])\n          }, {\n            pivot: 'id'\n          }),\n          type: PD.Select('2fofc', [['2fofc', '2Fo-Fc'], ['fofc', 'Fo-Fc']])\n        }, {\n          isFlat: true\n        }),\n        'pdb-xray-ds': PD.Group({\n          provider: PD.Group({\n            id: PD.Text('1tqn', {\n              label: 'Id'\n            }),\n            server: PD.Select('pdbe', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']])\n          }, {\n            pivot: 'id'\n          }),\n          detail: PD.Numeric(3, {\n            min: 0,\n            max: 6,\n            step: 1\n          }, {\n            label: 'Detail'\n          })\n        }, {\n          isFlat: true\n        }),\n        'pdb-emd-ds': PD.Group({\n          provider: PD.Group({\n            id: PD.Text('emd-8004', {\n              label: 'Id'\n            }),\n            server: PD.Select('pdbe', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']])\n          }, {\n            pivot: 'id'\n          }),\n          detail: PD.Numeric(3, {\n            min: 0,\n            max: 6,\n            step: 1\n          }, {\n            label: 'Detail'\n          })\n        }, {\n          isFlat: true\n        }),\n        'url': PD.Group({\n          url: PD.Url(''),\n          isBinary: PD.Boolean(false),\n          format: PD.Select('auto', options)\n        }, {\n          isFlat: true\n        })\n      }, {\n        options: [['pdb-xray', 'PDB X-ray maps'], ['pdb-emd-ds', 'PDB EMD Density Server'], ['pdb-xray-ds', 'PDB X-ray Density Server'], ['url', 'URL']]\n      })\n    };\n  }\n})(function (_a, plugin) {\n  var params = _a.params;\n  return Task.create('Download Density', function (taskCtx) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var src, downloadParams, provider, data, entryId, volumes;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            src = params.source;\n\n            switch (src.name) {\n              case 'url':\n                downloadParams = src.params;\n                break;\n\n              case 'pdb-xray':\n                downloadParams = src.params.provider.server === 'pdbe' ? {\n                  url: Asset.Url(src.params.type === '2fofc' ? \"http://www.ebi.ac.uk/pdbe/coordinates/files/\" + src.params.provider.id.toLowerCase() + \".ccp4\" : \"http://www.ebi.ac.uk/pdbe/coordinates/files/\" + src.params.provider.id.toLowerCase() + \"_diff.ccp4\"),\n                  isBinary: true,\n                  label: \"PDBe X-ray map: \" + src.params.provider.id\n                } : {\n                  url: Asset.Url(src.params.type === '2fofc' ? \"https://edmaps.rcsb.org/maps/\" + src.params.provider.id.toLowerCase() + \"_2fofc.dsn6\" : \"https://edmaps.rcsb.org/maps/\" + src.params.provider.id.toLowerCase() + \"_fofc.dsn6\"),\n                  isBinary: true,\n                  label: \"RCSB X-ray map: \" + src.params.provider.id\n                };\n                break;\n\n              case 'pdb-emd-ds':\n                downloadParams = src.params.provider.server === 'pdbe' ? {\n                  url: Asset.Url(\"https://www.ebi.ac.uk/pdbe/densities/emd/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\n                  isBinary: true,\n                  label: \"PDBe EMD Density Server: \" + src.params.provider.id\n                } : {\n                  url: Asset.Url(\"https://maps.rcsb.org/em/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\n                  isBinary: true,\n                  label: \"RCSB PDB EMD Density Server: \" + src.params.provider.id\n                };\n                break;\n\n              case 'pdb-xray-ds':\n                downloadParams = src.params.provider.server === 'pdbe' ? {\n                  url: Asset.Url(\"https://www.ebi.ac.uk/pdbe/densities/x-ray/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\n                  isBinary: true,\n                  label: \"PDBe X-ray Density Server: \" + src.params.provider.id\n                } : {\n                  url: Asset.Url(\"https://maps.rcsb.org/x-ray/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\n                  isBinary: true,\n                  label: \"RCSB PDB X-ray Density Server: \" + src.params.provider.id\n                };\n                break;\n\n              default:\n                throw new Error(src.name + \" not supported.\");\n            }\n\n            return [4\n            /*yield*/\n            , plugin.builders.data.download(downloadParams)];\n\n          case 1:\n            data = _c.sent();\n            entryId = undefined;\n\n            switch (src.name) {\n              case 'url':\n                downloadParams = src.params;\n                provider = src.params.format === 'auto' ? plugin.dataFormats.auto(getFileInfo(Asset.getUrl(downloadParams.url)), (_a = data.cell) === null || _a === void 0 ? void 0 : _a.obj) : plugin.dataFormats.get(src.params.format);\n                break;\n\n              case 'pdb-xray':\n                entryId = src.params.provider.id;\n                provider = src.params.provider.server === 'pdbe' ? plugin.dataFormats.get('ccp4') : plugin.dataFormats.get('dsn6');\n                break;\n\n              case 'pdb-emd-ds':\n              case 'pdb-xray-ds':\n                entryId = src.params.provider.id;\n                provider = plugin.dataFormats.get('dscif');\n                break;\n\n              default:\n                throw new Error(src.name + \" not supported.\");\n            }\n\n            if (!provider) {\n              plugin.log.warn('DownloadDensity: Format provider not found.');\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , provider.parse(plugin, data, {\n              entryId: entryId\n            })];\n\n          case 2:\n            volumes = _c.sent();\n            return [4\n            /*yield*/\n            , (_b = provider.visuals) === null || _b === void 0 ? void 0 : _b.call(provider, plugin, volumes)];\n\n          case 3:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n});\nexport var AssignColorVolume = StateAction.build({\n  display: {\n    name: 'Assign Volume Colors',\n    description: 'Assigns another volume to be available for coloring.'\n  },\n  from: PluginStateObject.Volume.Data,\n  isApplicable: function (a) {\n    return !a.data.colorVolume;\n  },\n  params: function (a, plugin) {\n    var cells = plugin.state.data.select(StateSelection.Generators.root.subtree().ofType(PluginStateObject.Volume.Data).filter(function (cell) {\n      var _a;\n\n      return !!cell.obj && !((_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data.colorVolume) && cell.obj !== a;\n    }));\n    if (cells.length === 0) return {\n      ref: PD.Text('', {\n        isHidden: true,\n        label: 'Volume'\n      })\n    };\n    return {\n      ref: PD.Select(cells[0].transform.ref, cells.map(function (c) {\n        return [c.transform.ref, c.obj.label];\n      }), {\n        label: 'Volume'\n      })\n    };\n  }\n})(function (_a, plugin) {\n  var ref = _a.ref,\n      params = _a.params,\n      state = _a.state;\n  return plugin.build().to(ref).apply(StateTransforms.Volume.AssignColorVolume, {\n    ref: params.ref\n  }, {\n    dependsOn: [params.ref]\n  }).commit();\n});","map":{"version":3,"sources":["../../../src/mol-plugin-state/actions/volume.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { StateAction, StateSelection } from '../../mol-state';\r\nimport { Task } from '../../mol-task';\r\nimport { getFileInfo } from '../../mol-util/file-info';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { PluginStateObject } from '../objects';\r\nimport { Asset } from '../../mol-util/assets';\r\nimport { StateTransforms } from '../transforms';\r\nexport { DownloadDensity };\r\nvar DownloadDensity = StateAction.build({\r\n    from: PluginStateObject.Root,\r\n    display: { name: 'Download Density', description: 'Load a density from the provided source and create its default visual.' },\r\n    params: function (a, ctx) {\r\n        var options = ctx.dataFormats.options;\r\n        return {\r\n            source: PD.MappedStatic('pdb-xray', {\r\n                'pdb-xray': PD.Group({\r\n                    provider: PD.Group({\r\n                        id: PD.Text('1tqn', { label: 'Id' }),\r\n                        server: PD.Select('rcsb', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']]),\r\n                    }, { pivot: 'id' }),\r\n                    type: PD.Select('2fofc', [['2fofc', '2Fo-Fc'], ['fofc', 'Fo-Fc']]),\r\n                }, { isFlat: true }),\r\n                'pdb-xray-ds': PD.Group({\r\n                    provider: PD.Group({\r\n                        id: PD.Text('1tqn', { label: 'Id' }),\r\n                        server: PD.Select('pdbe', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']]),\r\n                    }, { pivot: 'id' }),\r\n                    detail: PD.Numeric(3, { min: 0, max: 6, step: 1 }, { label: 'Detail' }),\r\n                }, { isFlat: true }),\r\n                'pdb-emd-ds': PD.Group({\r\n                    provider: PD.Group({\r\n                        id: PD.Text('emd-8004', { label: 'Id' }),\r\n                        server: PD.Select('pdbe', [['pdbe', 'PDBe'], ['rcsb', 'RCSB PDB']]),\r\n                    }, { pivot: 'id' }),\r\n                    detail: PD.Numeric(3, { min: 0, max: 6, step: 1 }, { label: 'Detail' }),\r\n                }, { isFlat: true }),\r\n                'url': PD.Group({\r\n                    url: PD.Url(''),\r\n                    isBinary: PD.Boolean(false),\r\n                    format: PD.Select('auto', options),\r\n                }, { isFlat: true })\r\n            }, {\r\n                options: [\r\n                    ['pdb-xray', 'PDB X-ray maps'],\r\n                    ['pdb-emd-ds', 'PDB EMD Density Server'],\r\n                    ['pdb-xray-ds', 'PDB X-ray Density Server'],\r\n                    ['url', 'URL']\r\n                ]\r\n            })\r\n        };\r\n    }\r\n})(function (_a, plugin) {\r\n    var params = _a.params;\r\n    return Task.create('Download Density', function (taskCtx) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var src, downloadParams, provider, data, entryId, volumes;\r\n        var _a, _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    src = params.source;\r\n                    switch (src.name) {\r\n                        case 'url':\r\n                            downloadParams = src.params;\r\n                            break;\r\n                        case 'pdb-xray':\r\n                            downloadParams = src.params.provider.server === 'pdbe' ? {\r\n                                url: Asset.Url(src.params.type === '2fofc'\r\n                                    ? \"http://www.ebi.ac.uk/pdbe/coordinates/files/\" + src.params.provider.id.toLowerCase() + \".ccp4\"\r\n                                    : \"http://www.ebi.ac.uk/pdbe/coordinates/files/\" + src.params.provider.id.toLowerCase() + \"_diff.ccp4\"),\r\n                                isBinary: true,\r\n                                label: \"PDBe X-ray map: \" + src.params.provider.id\r\n                            } : {\r\n                                url: Asset.Url(src.params.type === '2fofc'\r\n                                    ? \"https://edmaps.rcsb.org/maps/\" + src.params.provider.id.toLowerCase() + \"_2fofc.dsn6\"\r\n                                    : \"https://edmaps.rcsb.org/maps/\" + src.params.provider.id.toLowerCase() + \"_fofc.dsn6\"),\r\n                                isBinary: true,\r\n                                label: \"RCSB X-ray map: \" + src.params.provider.id\r\n                            };\r\n                            break;\r\n                        case 'pdb-emd-ds':\r\n                            downloadParams = src.params.provider.server === 'pdbe' ? {\r\n                                url: Asset.Url(\"https://www.ebi.ac.uk/pdbe/densities/emd/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\r\n                                isBinary: true,\r\n                                label: \"PDBe EMD Density Server: \" + src.params.provider.id\r\n                            } : {\r\n                                url: Asset.Url(\"https://maps.rcsb.org/em/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\r\n                                isBinary: true,\r\n                                label: \"RCSB PDB EMD Density Server: \" + src.params.provider.id\r\n                            };\r\n                            break;\r\n                        case 'pdb-xray-ds':\r\n                            downloadParams = src.params.provider.server === 'pdbe' ? {\r\n                                url: Asset.Url(\"https://www.ebi.ac.uk/pdbe/densities/x-ray/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\r\n                                isBinary: true,\r\n                                label: \"PDBe X-ray Density Server: \" + src.params.provider.id\r\n                            } : {\r\n                                url: Asset.Url(\"https://maps.rcsb.org/x-ray/\" + src.params.provider.id.toLowerCase() + \"/cell?detail=\" + src.params.detail),\r\n                                isBinary: true,\r\n                                label: \"RCSB PDB X-ray Density Server: \" + src.params.provider.id\r\n                            };\r\n                            break;\r\n                        default: throw new Error(src.name + \" not supported.\");\r\n                    }\r\n                    return [4 /*yield*/, plugin.builders.data.download(downloadParams)];\r\n                case 1:\r\n                    data = _c.sent();\r\n                    entryId = undefined;\r\n                    switch (src.name) {\r\n                        case 'url':\r\n                            downloadParams = src.params;\r\n                            provider = src.params.format === 'auto' ? plugin.dataFormats.auto(getFileInfo(Asset.getUrl(downloadParams.url)), (_a = data.cell) === null || _a === void 0 ? void 0 : _a.obj) : plugin.dataFormats.get(src.params.format);\r\n                            break;\r\n                        case 'pdb-xray':\r\n                            entryId = src.params.provider.id;\r\n                            provider = src.params.provider.server === 'pdbe'\r\n                                ? plugin.dataFormats.get('ccp4')\r\n                                : plugin.dataFormats.get('dsn6');\r\n                            break;\r\n                        case 'pdb-emd-ds':\r\n                        case 'pdb-xray-ds':\r\n                            entryId = src.params.provider.id;\r\n                            provider = plugin.dataFormats.get('dscif');\r\n                            break;\r\n                        default: throw new Error(src.name + \" not supported.\");\r\n                    }\r\n                    if (!provider) {\r\n                        plugin.log.warn('DownloadDensity: Format provider not found.');\r\n                        return [2 /*return*/];\r\n                    }\r\n                    return [4 /*yield*/, provider.parse(plugin, data, { entryId: entryId })];\r\n                case 2:\r\n                    volumes = _c.sent();\r\n                    return [4 /*yield*/, ((_b = provider.visuals) === null || _b === void 0 ? void 0 : _b.call(provider, plugin, volumes))];\r\n                case 3:\r\n                    _c.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\nexport var AssignColorVolume = StateAction.build({\r\n    display: { name: 'Assign Volume Colors', description: 'Assigns another volume to be available for coloring.' },\r\n    from: PluginStateObject.Volume.Data,\r\n    isApplicable: function (a) { return !a.data.colorVolume; },\r\n    params: function (a, plugin) {\r\n        var cells = plugin.state.data.select(StateSelection.Generators.root.subtree().ofType(PluginStateObject.Volume.Data).filter(function (cell) { var _a; return !!cell.obj && !((_a = cell.obj) === null || _a === void 0 ? void 0 : _a.data.colorVolume) && cell.obj !== a; }));\r\n        if (cells.length === 0)\r\n            return { ref: PD.Text('', { isHidden: true, label: 'Volume' }) };\r\n        return { ref: PD.Select(cells[0].transform.ref, cells.map(function (c) { return [c.transform.ref, c.obj.label]; }), { label: 'Volume' }) };\r\n    }\r\n})(function (_a, plugin) {\r\n    var ref = _a.ref, params = _a.params, state = _a.state;\r\n    return plugin.build().to(ref).apply(StateTransforms.Volume.AssignColorVolume, { ref: params.ref }, { dependsOn: [params.ref] }).commit();\r\n});\r\n//# sourceMappingURL=volume.js.map"]},"metadata":{},"sourceType":"module"}