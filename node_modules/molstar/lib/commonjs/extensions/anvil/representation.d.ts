/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Sebastian Bittrich <sebastian.bittrich@rcsb.org>
 */
import { ParamDefinition as PD } from '../../mol-util/param-definition';
import { RepresentationContext, RepresentationParamsGetter } from '../../mol-repr/representation';
import { Structure } from '../../mol-model/structure';
import { StructureRepresentationProvider, StructureRepresentation } from '../../mol-repr/structure/representation';
import { ThemeRegistryContext } from '../../mol-theme/theme';
declare const BilayerPlanesParams: {
    sectorOpacity: PD.Numeric;
    color: PD.Color;
    radiusFactor: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type BilayerPlanesParams = typeof BilayerPlanesParams;
export declare type BilayerPlanesProps = PD.Values<BilayerPlanesParams>;
declare const BilayerRimsParams: {
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    color: PD.Color;
    radiusFactor: PD.Numeric;
    sizeFactor: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
};
export declare type BilayerRimsParams = typeof BilayerRimsParams;
export declare type BilayerRimsProps = PD.Values<BilayerRimsParams>;
export declare const MembraneOrientationParams: {
    visuals: PD.MultiSelect<"bilayer-planes" | "bilayer-rims">;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    color: PD.Color;
    radiusFactor: PD.Numeric;
    sizeFactor: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
    sectorOpacity: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
};
export declare type MembraneOrientationParams = typeof MembraneOrientationParams;
export declare type MembraneOrientationProps = PD.Values<MembraneOrientationParams>;
export declare function getMembraneOrientationParams(ctx: ThemeRegistryContext, structure: Structure): {
    visuals: PD.MultiSelect<"bilayer-planes" | "bilayer-rims">;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    color: PD.Color;
    radiusFactor: PD.Numeric;
    sizeFactor: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
    sectorOpacity: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
};
export declare type MembraneOrientationRepresentation = StructureRepresentation<MembraneOrientationParams>;
export declare function MembraneOrientationRepresentation(ctx: RepresentationContext, getParams: RepresentationParamsGetter<Structure, MembraneOrientationParams>): MembraneOrientationRepresentation;
export declare const MembraneOrientationRepresentationProvider: StructureRepresentationProvider<{
    visuals: PD.MultiSelect<"bilayer-planes" | "bilayer-rims">;
    lineSizeAttenuation: PD.BooleanParam;
    linesSize: PD.Numeric;
    dashedLines: PD.BooleanParam;
    color: PD.Color;
    radiusFactor: PD.Numeric;
    sizeFactor: PD.Numeric;
    alpha: PD.Numeric;
    quality: PD.Select<"custom" | "auto" | "highest" | "higher" | "high" | "medium" | "low" | "lower" | "lowest">;
    sectorOpacity: PD.Numeric;
    doubleSided: PD.BooleanParam;
    flipSided: PD.BooleanParam;
    flatShaded: PD.BooleanParam;
    ignoreLight: PD.BooleanParam;
    xrayShaded: PD.BooleanParam;
}, "membrane-orientation">;
export {};
