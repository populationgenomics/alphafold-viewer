{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nvar FormatRegistry =\n/** @class */\nfunction () {\n  function FormatRegistry() {\n    this.map = new Map();\n    this.applicable = new Map();\n  }\n\n  FormatRegistry.prototype.add = function (kind, obtain, applicable) {\n    this.map.set(kind, obtain);\n    if (applicable) this.applicable.set(kind, applicable);\n  };\n\n  FormatRegistry.prototype.remove = function (kind) {\n    this.map.delete(kind);\n    this.applicable.delete(kind);\n  };\n\n  FormatRegistry.prototype.get = function (kind) {\n    return this.map.get(kind);\n  };\n\n  FormatRegistry.prototype.isApplicable = function (model) {\n    var isApplicable = this.applicable.get(model.sourceData.kind);\n    return isApplicable ? isApplicable(model) : true;\n  };\n\n  return FormatRegistry;\n}();\n\nexport { FormatPropertyProvider };\nvar FormatPropertyProvider;\n\n(function (FormatPropertyProvider) {\n  function create(descriptor) {\n    var name = descriptor.name;\n    var formatRegistry = new FormatRegistry();\n    return {\n      descriptor: descriptor,\n      formatRegistry: formatRegistry,\n      isApplicable: function (model) {\n        return formatRegistry.isApplicable(model);\n      },\n      get: function (model) {\n        if (model._staticPropertyData[name]) return model._staticPropertyData[name];\n        if (model.customProperties.has(descriptor)) return;\n        var obtain = formatRegistry.get(model.sourceData.kind);\n        if (!obtain) return;\n        model._staticPropertyData[name] = obtain(model);\n        model.customProperties.add(descriptor);\n        return model._staticPropertyData[name];\n      },\n      set: function (model, value) {\n        model._staticPropertyData[name] = value;\n      },\n      delete: function (model) {\n        delete model._staticPropertyData[name];\n      }\n    };\n  }\n\n  FormatPropertyProvider.create = create;\n})(FormatPropertyProvider || (FormatPropertyProvider = {}));","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/common/property.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAMH,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA;AACY,SAAA,GAAA,GAAM,IAAI,GAAJ,EAAN;AACA,SAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AAoBX;;AAlBG,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAA+B,MAA/B,EAAwE,UAAxE,EAA8G;AAC1G,SAAK,GAAL,CAAS,GAAT,CAAa,IAAb,EAAmB,MAAnB;AACA,QAAI,UAAJ,EAAgB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,UAA1B;AACnB,GAHD;;AAKA,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgC;AAC5B,SAAK,GAAL,CAAS,MAAT,CAAgB,IAAhB;AACA,SAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACH,GAHD;;AAKA,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAA6B;AACzB,WAAO,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,CAAP;AACH,GAFD;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,KAAb,EAAyB;AACrB,QAAM,YAAY,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAAoB,KAAK,CAAC,UAAN,CAAiB,IAArC,CAArB;AACA,WAAO,YAAY,GAAG,YAAY,CAAC,KAAD,CAAf,GAAyB,IAA5C;AACH,GAHD;;AAIJ,SAAA,cAAA;AAAC,CAtBD,EAAA;;AAwBA,SAAS,sBAAT;AAWA,IAAU,sBAAV;;AAAA,CAAA,UAAU,sBAAV,EAAgC;AAC5B,WAAgB,MAAhB,CAA0B,UAA1B,EAA8D;AAClD,QAAA,IAAI,GAAK,UAAU,CAAf,IAAJ;AACR,QAAM,cAAc,GAAG,IAAI,cAAJ,EAAvB;AAEA,WAAO;AACH,MAAA,UAAU,EAAA,UADP;AAEH,MAAA,cAAc,EAAA,cAFX;AAGH,MAAA,YAAY,EAAZ,UAAa,KAAb,EAAyB;AACrB,eAAO,cAAc,CAAC,YAAf,CAA4B,KAA5B,CAAP;AACH,OALE;AAMH,MAAA,GAAG,EAAH,UAAI,KAAJ,EAAgB;AACZ,YAAI,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CAAJ,EAAqC,OAAO,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CAAP;AACrC,YAAI,KAAK,CAAC,gBAAN,CAAuB,GAAvB,CAA2B,UAA3B,CAAJ,EAA4C;AAE5C,YAAM,MAAM,GAAG,cAAc,CAAC,GAAf,CAAmB,KAAK,CAAC,UAAN,CAAiB,IAApC,CAAf;AACA,YAAI,CAAC,MAAL,EAAa;AAEb,QAAA,KAAK,CAAC,mBAAN,CAA0B,IAA1B,IAAkC,MAAM,CAAC,KAAD,CAAxC;AACA,QAAA,KAAK,CAAC,gBAAN,CAAuB,GAAvB,CAA2B,UAA3B;AACA,eAAO,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CAAP;AACH,OAhBE;AAiBH,MAAA,GAAG,EAAH,UAAI,KAAJ,EAAkB,KAAlB,EAA0B;AACtB,QAAA,KAAK,CAAC,mBAAN,CAA0B,IAA1B,IAAkC,KAAlC;AACH,OAnBE;AAoBH,MAAA,MAAM,EAAN,UAAO,KAAP,EAAmB;AACf,eAAO,KAAK,CAAC,mBAAN,CAA0B,IAA1B,CAAP;AACH;AAtBE,KAAP;AAwBH;;AA5Be,EAAA,sBAAA,CAAA,MAAA,GAAM,MAAN;AA6BnB,CA9BD,EAAU,sBAAsB,KAAtB,sBAAsB,GAAA,EAAA,CAAhC","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nvar FormatRegistry = /** @class */ (function () {\r\n    function FormatRegistry() {\r\n        this.map = new Map();\r\n        this.applicable = new Map();\r\n    }\r\n    FormatRegistry.prototype.add = function (kind, obtain, applicable) {\r\n        this.map.set(kind, obtain);\r\n        if (applicable)\r\n            this.applicable.set(kind, applicable);\r\n    };\r\n    FormatRegistry.prototype.remove = function (kind) {\r\n        this.map.delete(kind);\r\n        this.applicable.delete(kind);\r\n    };\r\n    FormatRegistry.prototype.get = function (kind) {\r\n        return this.map.get(kind);\r\n    };\r\n    FormatRegistry.prototype.isApplicable = function (model) {\r\n        var isApplicable = this.applicable.get(model.sourceData.kind);\r\n        return isApplicable ? isApplicable(model) : true;\r\n    };\r\n    return FormatRegistry;\r\n}());\r\nexport { FormatPropertyProvider };\r\nvar FormatPropertyProvider;\r\n(function (FormatPropertyProvider) {\r\n    function create(descriptor) {\r\n        var name = descriptor.name;\r\n        var formatRegistry = new FormatRegistry();\r\n        return {\r\n            descriptor: descriptor,\r\n            formatRegistry: formatRegistry,\r\n            isApplicable: function (model) {\r\n                return formatRegistry.isApplicable(model);\r\n            },\r\n            get: function (model) {\r\n                if (model._staticPropertyData[name])\r\n                    return model._staticPropertyData[name];\r\n                if (model.customProperties.has(descriptor))\r\n                    return;\r\n                var obtain = formatRegistry.get(model.sourceData.kind);\r\n                if (!obtain)\r\n                    return;\r\n                model._staticPropertyData[name] = obtain(model);\r\n                model.customProperties.add(descriptor);\r\n                return model._staticPropertyData[name];\r\n            },\r\n            set: function (model, value) {\r\n                model._staticPropertyData[name] = value;\r\n            },\r\n            delete: function (model) {\r\n                delete model._staticPropertyData[name];\r\n            }\r\n        };\r\n    }\r\n    FormatPropertyProvider.create = create;\r\n})(FormatPropertyProvider || (FormatPropertyProvider = {}));\r\n//# sourceMappingURL=property.js.map"]},"metadata":{},"sourceType":"module"}