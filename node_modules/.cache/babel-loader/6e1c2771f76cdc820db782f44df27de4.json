{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { TableLegend } from '../legend';\nimport { ParamDefinition as PD } from '../param-definition';\nimport { distinctColors, DistinctColorsParams } from './distinct';\nimport { getColorListFromName } from './lists';\nimport { ColorScale } from './scale';\nvar DefaultGetPaletteProps = {\n  type: 'generate',\n  colorList: 'red-yellow-blue'\n};\nexport function getPaletteParams(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var p = __assign(__assign({}, DefaultGetPaletteProps), props);\n\n  return {\n    palette: PD.MappedStatic(p.type, {\n      colors: PD.Group({\n        list: PD.ColorList(p.colorList)\n      }, {\n        isFlat: true\n      }),\n      generate: PD.Group(__assign(__assign({}, DistinctColorsParams), {\n        maxCount: PD.Numeric(75, {\n          min: 1,\n          max: 250,\n          step: 1\n        })\n      }), {\n        isFlat: true\n      })\n    }, {\n      options: [['colors', 'Color List'], ['generate', 'Generate Distinct']]\n    })\n  };\n}\nvar DefaultPaletteProps = PD.getDefaultValues(getPaletteParams());\nvar DefaultLabelOptions = {\n  valueLabel: function (i) {\n    return \"\" + (i + 1);\n  },\n  minLabel: 'Start',\n  maxLabel: 'End'\n};\nexport function getPalette(count, props, labelOptions) {\n  var _a;\n\n  if (labelOptions === void 0) {\n    labelOptions = {};\n  }\n\n  var color;\n  var legend;\n\n  if (props.palette.name === 'colors' && props.palette.params.list.kind === 'interpolate') {\n    var list = props.palette.params.list;\n    var domain = [0, count - 1];\n\n    var _b = __assign(__assign({}, DefaultLabelOptions), labelOptions),\n        minLabel = _b.minLabel,\n        maxLabel = _b.maxLabel;\n\n    var colors = list.colors;\n    if (colors.length === 0) colors = getColorListFromName(DefaultGetPaletteProps.colorList).list;\n    var scale = ColorScale.create({\n      listOrName: colors,\n      domain: domain,\n      minLabel: minLabel,\n      maxLabel: maxLabel\n    });\n    legend = scale.legend;\n    color = scale.color;\n  } else {\n    var colors_1;\n\n    if (props.palette.name === 'colors') {\n      colors_1 = props.palette.params.list.colors.map(function (c) {\n        return Array.isArray(c) ? c[0] : c;\n      });\n      if (colors_1.length === 0) colors_1 = getColorListFromName('dark-2').list.map(function (c) {\n        return Array.isArray(c) ? c[0] : c;\n      });\n    } else {\n      count = Math.min(count, props.palette.params.maxCount);\n      colors_1 = distinctColors(count, props.palette.params);\n    }\n\n    var valueLabel = (_a = labelOptions.valueLabel) !== null && _a !== void 0 ? _a : DefaultLabelOptions.valueLabel;\n    var colorsLength_1 = colors_1.length;\n    var table = [];\n\n    for (var i = 0; i < count; ++i) {\n      var j = i % colorsLength_1;\n\n      if (table[j] === undefined) {\n        table[j] = [valueLabel(i), colors_1[j]];\n      } else {\n        table[j][0] += \", \" + valueLabel(i);\n      }\n    }\n\n    legend = TableLegend(table);\n\n    color = function (i) {\n      return colors_1[i % colorsLength_1];\n    };\n  }\n\n  return {\n    color: color,\n    legend: legend\n  };\n}","map":{"version":3,"sources":["../../../src/mol-util/color/palette.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { TableLegend } from '../legend';\r\nimport { ParamDefinition as PD } from '../param-definition';\r\nimport { distinctColors, DistinctColorsParams } from './distinct';\r\nimport { getColorListFromName } from './lists';\r\nimport { ColorScale } from './scale';\r\nvar DefaultGetPaletteProps = {\r\n    type: 'generate',\r\n    colorList: 'red-yellow-blue'\r\n};\r\nexport function getPaletteParams(props) {\r\n    if (props === void 0) { props = {}; }\r\n    var p = __assign(__assign({}, DefaultGetPaletteProps), props);\r\n    return {\r\n        palette: PD.MappedStatic(p.type, {\r\n            colors: PD.Group({\r\n                list: PD.ColorList(p.colorList),\r\n            }, { isFlat: true }),\r\n            generate: PD.Group(__assign(__assign({}, DistinctColorsParams), { maxCount: PD.Numeric(75, { min: 1, max: 250, step: 1 }) }), { isFlat: true })\r\n        }, {\r\n            options: [\r\n                ['colors', 'Color List'],\r\n                ['generate', 'Generate Distinct']\r\n            ]\r\n        })\r\n    };\r\n}\r\nvar DefaultPaletteProps = PD.getDefaultValues(getPaletteParams());\r\nvar DefaultLabelOptions = {\r\n    valueLabel: function (i) { return \"\" + (i + 1); },\r\n    minLabel: 'Start',\r\n    maxLabel: 'End'\r\n};\r\nexport function getPalette(count, props, labelOptions) {\r\n    var _a;\r\n    if (labelOptions === void 0) { labelOptions = {}; }\r\n    var color;\r\n    var legend;\r\n    if (props.palette.name === 'colors' && props.palette.params.list.kind === 'interpolate') {\r\n        var list = props.palette.params.list;\r\n        var domain = [0, count - 1];\r\n        var _b = __assign(__assign({}, DefaultLabelOptions), labelOptions), minLabel = _b.minLabel, maxLabel = _b.maxLabel;\r\n        var colors = list.colors;\r\n        if (colors.length === 0)\r\n            colors = getColorListFromName(DefaultGetPaletteProps.colorList).list;\r\n        var scale = ColorScale.create({ listOrName: colors, domain: domain, minLabel: minLabel, maxLabel: maxLabel });\r\n        legend = scale.legend;\r\n        color = scale.color;\r\n    }\r\n    else {\r\n        var colors_1;\r\n        if (props.palette.name === 'colors') {\r\n            colors_1 = props.palette.params.list.colors.map(function (c) { return Array.isArray(c) ? c[0] : c; });\r\n            if (colors_1.length === 0)\r\n                colors_1 = getColorListFromName('dark-2').list.map(function (c) { return Array.isArray(c) ? c[0] : c; });\r\n        }\r\n        else {\r\n            count = Math.min(count, props.palette.params.maxCount);\r\n            colors_1 = distinctColors(count, props.palette.params);\r\n        }\r\n        var valueLabel = (_a = labelOptions.valueLabel) !== null && _a !== void 0 ? _a : DefaultLabelOptions.valueLabel;\r\n        var colorsLength_1 = colors_1.length;\r\n        var table = [];\r\n        for (var i = 0; i < count; ++i) {\r\n            var j = i % colorsLength_1;\r\n            if (table[j] === undefined) {\r\n                table[j] = [valueLabel(i), colors_1[j]];\r\n            }\r\n            else {\r\n                table[j][0] += \", \" + valueLabel(i);\r\n            }\r\n        }\r\n        legend = TableLegend(table);\r\n        color = function (i) { return colors_1[i % colorsLength_1]; };\r\n    }\r\n    return { color: color, legend: legend };\r\n}\r\n//# sourceMappingURL=palette.js.map"]},"metadata":{},"sourceType":"module"}