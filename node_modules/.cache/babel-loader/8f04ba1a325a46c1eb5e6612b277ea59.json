{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Color, ColorScale } from '../../mol-util/color';\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nvar DefaultUncertaintyColor = Color(0xffff99);\nvar Description = \"Assigns a color based on the uncertainty or disorder of an element's position, e.g. B-factor or RMSF, depending on the data availability and experimental technique.\";\nexport var UncertaintyColorThemeParams = {\n  domain: PD.Interval([0, 100]),\n  list: PD.ColorList('red-white-blue', {\n    presetKind: 'scale'\n  })\n};\nexport function getUncertaintyColorThemeParams(ctx) {\n  return UncertaintyColorThemeParams; // TODO return copy\n}\nexport function getUncertainty(unit, element) {\n  if (Unit.isAtomic(unit)) {\n    return unit.model.atomicConformation.B_iso_or_equiv.value(element);\n  } else if (Unit.isSpheres(unit)) {\n    return unit.model.coarseConformation.spheres.rmsf[element];\n  } else {\n    return 0;\n  }\n}\nexport function UncertaintyColorTheme(ctx, props) {\n  var scale = ColorScale.create({\n    reverse: true,\n    domain: props.domain,\n    listOrName: props.list.colors\n  }); // TODO calc domain based on data, set min/max as 10/90 percentile to be robust against outliers\n\n  function color(location) {\n    if (StructureElement.Location.is(location)) {\n      return scale.color(getUncertainty(location.unit, location.element));\n    } else if (Bond.isLocation(location)) {\n      return scale.color(getUncertainty(location.aUnit, location.aUnit.elements[location.aIndex]));\n    }\n\n    return DefaultUncertaintyColor;\n  }\n\n  return {\n    factory: UncertaintyColorTheme,\n    granularity: 'group',\n    preferSmoothing: true,\n    color: color,\n    props: props,\n    description: Description,\n    legend: scale ? scale.legend : undefined\n  };\n}\nexport var UncertaintyColorThemeProvider = {\n  name: 'uncertainty',\n  label: 'Uncertainty/Disorder',\n  category: \"Atom Property\"\n  /* Atom */\n  ,\n  factory: UncertaintyColorTheme,\n  getParams: getUncertaintyColorThemeParams,\n  defaultValues: PD.getDefaultValues(UncertaintyColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.models.some(function (m) {\n      return m.atomicConformation.B_iso_or_equiv.isDefined || m.coarseHierarchy.isDefined;\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/uncertainty.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Color, ColorScale } from '../../mol-util/color';\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nvar DefaultUncertaintyColor = Color(0xffff99);\r\nvar Description = \"Assigns a color based on the uncertainty or disorder of an element's position, e.g. B-factor or RMSF, depending on the data availability and experimental technique.\";\r\nexport var UncertaintyColorThemeParams = {\r\n    domain: PD.Interval([0, 100]),\r\n    list: PD.ColorList('red-white-blue', { presetKind: 'scale' }),\r\n};\r\nexport function getUncertaintyColorThemeParams(ctx) {\r\n    return UncertaintyColorThemeParams; // TODO return copy\r\n}\r\nexport function getUncertainty(unit, element) {\r\n    if (Unit.isAtomic(unit)) {\r\n        return unit.model.atomicConformation.B_iso_or_equiv.value(element);\r\n    }\r\n    else if (Unit.isSpheres(unit)) {\r\n        return unit.model.coarseConformation.spheres.rmsf[element];\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nexport function UncertaintyColorTheme(ctx, props) {\r\n    var scale = ColorScale.create({\r\n        reverse: true,\r\n        domain: props.domain,\r\n        listOrName: props.list.colors,\r\n    });\r\n    // TODO calc domain based on data, set min/max as 10/90 percentile to be robust against outliers\r\n    function color(location) {\r\n        if (StructureElement.Location.is(location)) {\r\n            return scale.color(getUncertainty(location.unit, location.element));\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            return scale.color(getUncertainty(location.aUnit, location.aUnit.elements[location.aIndex]));\r\n        }\r\n        return DefaultUncertaintyColor;\r\n    }\r\n    return {\r\n        factory: UncertaintyColorTheme,\r\n        granularity: 'group',\r\n        preferSmoothing: true,\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: scale ? scale.legend : undefined\r\n    };\r\n}\r\nexport var UncertaintyColorThemeProvider = {\r\n    name: 'uncertainty',\r\n    label: 'Uncertainty/Disorder',\r\n    category: \"Atom Property\" /* Atom */,\r\n    factory: UncertaintyColorTheme,\r\n    getParams: getUncertaintyColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(UncertaintyColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return m.atomicConformation.B_iso_or_equiv.isDefined || m.coarseHierarchy.isDefined; }); }\r\n};\r\n//# sourceMappingURL=uncertainty.js.map"]},"metadata":{},"sourceType":"module"}