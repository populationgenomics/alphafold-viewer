{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { Text } from './text';\nimport { getFontAtlas } from './font-atlas';\nvar quadIndices = new Uint16Array([0, 1, 2, 1, 3, 2]); // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar caAdd3 = ChunkedArray.add3;\nvar caAdd2 = ChunkedArray.add2;\nvar caAdd = ChunkedArray.add;\nexport var TextBuilder;\n\n(function (TextBuilder) {\n  function create(props, initialCount, chunkSize, text) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (initialCount === void 0) {\n      initialCount = 2048;\n    }\n\n    if (chunkSize === void 0) {\n      chunkSize = 1024;\n    }\n\n    initialCount *= 2;\n    chunkSize *= 2;\n    var centers = ChunkedArray.create(Float32Array, 3, chunkSize, text ? text.centerBuffer.ref.value : initialCount);\n    var mappings = ChunkedArray.create(Float32Array, 2, chunkSize, text ? text.mappingBuffer.ref.value : initialCount);\n    var depths = ChunkedArray.create(Float32Array, 1, chunkSize, text ? text.depthBuffer.ref.value : initialCount);\n    var indices = ChunkedArray.create(Uint32Array, 3, chunkSize, text ? text.indexBuffer.ref.value : initialCount);\n    var groups = ChunkedArray.create(Float32Array, 1, chunkSize, text ? text.groupBuffer.ref.value : initialCount);\n    var tcoords = ChunkedArray.create(Float32Array, 2, chunkSize, text ? text.tcoordBuffer.ref.value : initialCount);\n\n    var p = __assign(__assign({}, PD.getDefaultValues(Text.Params)), props);\n\n    var attachment = p.attachment,\n        background = p.background,\n        backgroundMargin = p.backgroundMargin,\n        tether = p.tether,\n        tetherLength = p.tetherLength,\n        tetherBaseWidth = p.tetherBaseWidth;\n    var fontAtlas = getFontAtlas(p);\n    var margin = 1 / 2.5 * backgroundMargin;\n    var outline = fontAtlas.buffer / fontAtlas.lineHeight;\n\n    var add = function (x, y, z, depth, group) {\n      caAdd3(centers, x, y, z);\n      caAdd(depths, depth);\n      caAdd(groups, group);\n    };\n\n    return {\n      add: function (str, x, y, z, depth, scale, group) {\n        var bWidth = 0;\n        var nChar = str.length; // calculate width\n\n        for (var iChar = 0; iChar < nChar; ++iChar) {\n          var c = fontAtlas.get(str[iChar]);\n          bWidth += c.nw - 2 * outline;\n        }\n\n        var bHeight = 1 / 1.25; // attachment\n\n        var yShift, xShift; // vertical\n\n        if (attachment.startsWith('top')) {\n          yShift = bHeight;\n        } else if (attachment.startsWith('middle')) {\n          yShift = bHeight / 2;\n        } else {\n          yShift = 0; // \"bottom\"\n        } // horizontal\n\n\n        if (attachment.endsWith('right')) {\n          xShift = bWidth;\n        } else if (attachment.endsWith('center')) {\n          xShift = bWidth / 2;\n        } else {\n          xShift = 0; // \"left\"\n        }\n\n        if (tether) {\n          switch (attachment) {\n            case 'bottom-left':\n              xShift -= tetherLength / 2 + margin + 0.1;\n              yShift -= tetherLength / 2 + margin;\n              break;\n\n            case 'bottom-center':\n              yShift -= tetherLength + margin;\n              break;\n\n            case 'bottom-right':\n              xShift += tetherLength / 2 + margin + 0.1;\n              yShift -= tetherLength / 2 + margin;\n              break;\n\n            case 'middle-left':\n              xShift -= tetherLength + margin + 0.1;\n              break;\n\n            case 'middle-center':\n              break;\n\n            case 'middle-right':\n              xShift += tetherLength + margin + 0.1;\n              break;\n\n            case 'top-left':\n              xShift -= tetherLength / 2 + margin + 0.1;\n              yShift += tetherLength / 2 + margin;\n              break;\n\n            case 'top-center':\n              yShift += tetherLength + margin;\n              break;\n\n            case 'top-right':\n              xShift += tetherLength / 2 + margin + 0.1;\n              yShift += tetherLength / 2 + margin;\n              break;\n          }\n        }\n\n        var xLeft = (-xShift - margin - 0.1) * scale;\n        var xRight = (bWidth - xShift + margin + 0.1) * scale;\n        var yTop = (bHeight - yShift + margin) * scale;\n        var yBottom = (-yShift - margin) * scale; // background\n\n        if (background) {\n          caAdd2(mappings, xLeft, yTop); // top left\n\n          caAdd2(mappings, xLeft, yBottom); // bottom left\n\n          caAdd2(mappings, xRight, yTop); // top right\n\n          caAdd2(mappings, xRight, yBottom); // bottom right\n\n          var offset = centers.elementCount;\n\n          for (var i = 0; i < 4; ++i) {\n            caAdd2(tcoords, 10, 10);\n            add(x, y, z, depth, group);\n          }\n\n          caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\n          caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\n        }\n\n        if (tether) {\n          var xTip = void 0,\n              yTip = void 0;\n          var xBaseA = void 0,\n              yBaseA = void 0;\n          var xBaseB = void 0,\n              yBaseB = void 0;\n          var xBaseCenter = void 0,\n              yBaseCenter = void 0;\n          var scaledTetherLength = tetherLength * scale;\n          var scaledTetherBaseWidth = tetherBaseWidth * scale;\n\n          switch (attachment) {\n            case 'bottom-left':\n              xTip = xLeft - scaledTetherLength / 2;\n              xBaseA = xLeft + scaledTetherBaseWidth / 2;\n              xBaseB = xLeft;\n              xBaseCenter = xLeft;\n              yTip = yBottom - scaledTetherLength / 2;\n              yBaseA = yBottom;\n              yBaseB = yBottom + scaledTetherBaseWidth / 2;\n              yBaseCenter = yBottom;\n              break;\n\n            case 'bottom-center':\n              xTip = 0;\n              xBaseA = scaledTetherBaseWidth / 2;\n              xBaseB = -scaledTetherBaseWidth / 2;\n              xBaseCenter = 0;\n              yTip = yBottom - scaledTetherLength;\n              yBaseA = yBottom;\n              yBaseB = yBottom;\n              yBaseCenter = yBottom;\n              break;\n\n            case 'bottom-right':\n              xTip = xRight + scaledTetherLength / 2;\n              xBaseA = xRight;\n              xBaseB = xRight - scaledTetherBaseWidth / 2;\n              xBaseCenter = xRight;\n              yTip = yBottom - scaledTetherLength / 2;\n              yBaseA = yBottom + scaledTetherBaseWidth / 2;\n              yBaseB = yBottom;\n              yBaseCenter = yBottom;\n              break;\n\n            case 'middle-left':\n              xTip = xLeft - scaledTetherLength;\n              xBaseA = xLeft;\n              xBaseB = xLeft;\n              xBaseCenter = xLeft;\n              yTip = 0;\n              yBaseA = -scaledTetherBaseWidth / 2;\n              yBaseB = scaledTetherBaseWidth / 2;\n              yBaseCenter = 0;\n              break;\n\n            case 'middle-center':\n              xTip = 0;\n              xBaseA = 0;\n              xBaseB = 0;\n              xBaseCenter = 0;\n              yTip = 0;\n              yBaseA = 0;\n              yBaseB = 0;\n              yBaseCenter = 0;\n              break;\n\n            case 'middle-right':\n              xTip = xRight + scaledTetherLength;\n              xBaseA = xRight;\n              xBaseB = xRight;\n              xBaseCenter = xRight;\n              yTip = 0;\n              yBaseA = scaledTetherBaseWidth / 2;\n              yBaseB = -scaledTetherBaseWidth / 2;\n              yBaseCenter = 0;\n              break;\n\n            case 'top-left':\n              xTip = xLeft - scaledTetherLength / 2;\n              xBaseA = xLeft + scaledTetherBaseWidth / 2;\n              xBaseB = xLeft;\n              xBaseCenter = xLeft;\n              yTip = yTop + scaledTetherLength / 2;\n              yBaseA = yTop;\n              yBaseB = yTop - scaledTetherBaseWidth / 2;\n              yBaseCenter = yTop;\n              break;\n\n            case 'top-center':\n              xTip = 0;\n              xBaseA = scaledTetherBaseWidth / 2;\n              xBaseB = -scaledTetherBaseWidth / 2;\n              xBaseCenter = 0;\n              yTip = yTop + scaledTetherLength;\n              yBaseA = yTop;\n              yBaseB = yTop;\n              yBaseCenter = yTop;\n              break;\n\n            case 'top-right':\n              xTip = xRight + scaledTetherLength / 2;\n              xBaseA = xRight;\n              xBaseB = xRight - scaledTetherBaseWidth / 2;\n              xBaseCenter = xRight;\n              yTip = yTop + scaledTetherLength / 2;\n              yBaseA = yTop - scaledTetherBaseWidth / 2;\n              yBaseB = yTop;\n              yBaseCenter = yTop;\n              break;\n\n            default:\n              throw new Error('unsupported attachment');\n          }\n\n          caAdd2(mappings, xTip, yTip); // tip\n\n          caAdd2(mappings, xBaseA, yBaseA); // base A\n\n          caAdd2(mappings, xBaseB, yBaseB); // base B\n\n          caAdd2(mappings, xBaseCenter, yBaseCenter); // base center\n\n          var offset = centers.elementCount;\n\n          for (var i = 0; i < 4; ++i) {\n            caAdd2(tcoords, 10, 10);\n            add(x, y, z, depth, group);\n          }\n\n          caAdd3(indices, offset, offset + 1, offset + 3);\n          caAdd3(indices, offset, offset + 3, offset + 2);\n        }\n\n        xShift += outline;\n        yShift += outline;\n        var xadvance = 0;\n\n        for (var iChar = 0; iChar < nChar; ++iChar) {\n          var c = fontAtlas.get(str[iChar]);\n          var left = (xadvance - xShift) * scale;\n          var right = (xadvance + c.nw - xShift) * scale;\n          var top_1 = (c.nh - yShift) * scale;\n          var bottom = -yShift * scale;\n          caAdd2(mappings, left, top_1);\n          caAdd2(mappings, left, bottom);\n          caAdd2(mappings, right, top_1);\n          caAdd2(mappings, right, bottom);\n          var texWidth = fontAtlas.texture.width;\n          var texHeight = fontAtlas.texture.height;\n          caAdd2(tcoords, c.x / texWidth, c.y / texHeight); // top left\n\n          caAdd2(tcoords, c.x / texWidth, (c.y + c.h) / texHeight); // bottom left\n\n          caAdd2(tcoords, (c.x + c.w) / texWidth, c.y / texHeight); // top right\n\n          caAdd2(tcoords, (c.x + c.w) / texWidth, (c.y + c.h) / texHeight); // bottom right\n\n          xadvance += c.nw - 2 * outline;\n          var offset = centers.elementCount;\n\n          for (var i = 0; i < 4; ++i) add(x, y, z, depth, group);\n\n          caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\n          caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\n        }\n      },\n      getText: function () {\n        var ft = fontAtlas.texture;\n        var cb = ChunkedArray.compact(centers, true);\n        var mb = ChunkedArray.compact(mappings, true);\n        var db = ChunkedArray.compact(depths, true);\n        var ib = ChunkedArray.compact(indices, true);\n        var gb = ChunkedArray.compact(groups, true);\n        var tb = ChunkedArray.compact(tcoords, true);\n        return Text.create(ft, cb, mb, db, ib, gb, tb, indices.elementCount / 2, text);\n      }\n    };\n  }\n\n  TextBuilder.create = create;\n})(TextBuilder || (TextBuilder = {}));","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/text/text-builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { Text } from './text';\r\nimport { getFontAtlas } from './font-atlas';\r\nvar quadIndices = new Uint16Array([\r\n    0, 1, 2,\r\n    1, 3, 2\r\n]);\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar caAdd3 = ChunkedArray.add3;\r\nvar caAdd2 = ChunkedArray.add2;\r\nvar caAdd = ChunkedArray.add;\r\nexport var TextBuilder;\r\n(function (TextBuilder) {\r\n    function create(props, initialCount, chunkSize, text) {\r\n        if (props === void 0) { props = {}; }\r\n        if (initialCount === void 0) { initialCount = 2048; }\r\n        if (chunkSize === void 0) { chunkSize = 1024; }\r\n        initialCount *= 2;\r\n        chunkSize *= 2;\r\n        var centers = ChunkedArray.create(Float32Array, 3, chunkSize, text ? text.centerBuffer.ref.value : initialCount);\r\n        var mappings = ChunkedArray.create(Float32Array, 2, chunkSize, text ? text.mappingBuffer.ref.value : initialCount);\r\n        var depths = ChunkedArray.create(Float32Array, 1, chunkSize, text ? text.depthBuffer.ref.value : initialCount);\r\n        var indices = ChunkedArray.create(Uint32Array, 3, chunkSize, text ? text.indexBuffer.ref.value : initialCount);\r\n        var groups = ChunkedArray.create(Float32Array, 1, chunkSize, text ? text.groupBuffer.ref.value : initialCount);\r\n        var tcoords = ChunkedArray.create(Float32Array, 2, chunkSize, text ? text.tcoordBuffer.ref.value : initialCount);\r\n        var p = __assign(__assign({}, PD.getDefaultValues(Text.Params)), props);\r\n        var attachment = p.attachment, background = p.background, backgroundMargin = p.backgroundMargin, tether = p.tether, tetherLength = p.tetherLength, tetherBaseWidth = p.tetherBaseWidth;\r\n        var fontAtlas = getFontAtlas(p);\r\n        var margin = (1 / 2.5) * backgroundMargin;\r\n        var outline = fontAtlas.buffer / fontAtlas.lineHeight;\r\n        var add = function (x, y, z, depth, group) {\r\n            caAdd3(centers, x, y, z);\r\n            caAdd(depths, depth);\r\n            caAdd(groups, group);\r\n        };\r\n        return {\r\n            add: function (str, x, y, z, depth, scale, group) {\r\n                var bWidth = 0;\r\n                var nChar = str.length;\r\n                // calculate width\r\n                for (var iChar = 0; iChar < nChar; ++iChar) {\r\n                    var c = fontAtlas.get(str[iChar]);\r\n                    bWidth += c.nw - 2 * outline;\r\n                }\r\n                var bHeight = 1 / 1.25;\r\n                // attachment\r\n                var yShift, xShift;\r\n                // vertical\r\n                if (attachment.startsWith('top')) {\r\n                    yShift = bHeight;\r\n                }\r\n                else if (attachment.startsWith('middle')) {\r\n                    yShift = bHeight / 2;\r\n                }\r\n                else {\r\n                    yShift = 0; // \"bottom\"\r\n                }\r\n                // horizontal\r\n                if (attachment.endsWith('right')) {\r\n                    xShift = bWidth;\r\n                }\r\n                else if (attachment.endsWith('center')) {\r\n                    xShift = bWidth / 2;\r\n                }\r\n                else {\r\n                    xShift = 0; // \"left\"\r\n                }\r\n                if (tether) {\r\n                    switch (attachment) {\r\n                        case 'bottom-left':\r\n                            xShift -= tetherLength / 2 + margin + 0.1;\r\n                            yShift -= tetherLength / 2 + margin;\r\n                            break;\r\n                        case 'bottom-center':\r\n                            yShift -= tetherLength + margin;\r\n                            break;\r\n                        case 'bottom-right':\r\n                            xShift += tetherLength / 2 + margin + 0.1;\r\n                            yShift -= tetherLength / 2 + margin;\r\n                            break;\r\n                        case 'middle-left':\r\n                            xShift -= tetherLength + margin + 0.1;\r\n                            break;\r\n                        case 'middle-center':\r\n                            break;\r\n                        case 'middle-right':\r\n                            xShift += tetherLength + margin + 0.1;\r\n                            break;\r\n                        case 'top-left':\r\n                            xShift -= tetherLength / 2 + margin + 0.1;\r\n                            yShift += tetherLength / 2 + margin;\r\n                            break;\r\n                        case 'top-center':\r\n                            yShift += tetherLength + margin;\r\n                            break;\r\n                        case 'top-right':\r\n                            xShift += tetherLength / 2 + margin + 0.1;\r\n                            yShift += tetherLength / 2 + margin;\r\n                            break;\r\n                    }\r\n                }\r\n                var xLeft = (-xShift - margin - 0.1) * scale;\r\n                var xRight = (bWidth - xShift + margin + 0.1) * scale;\r\n                var yTop = (bHeight - yShift + margin) * scale;\r\n                var yBottom = (-yShift - margin) * scale;\r\n                // background\r\n                if (background) {\r\n                    caAdd2(mappings, xLeft, yTop); // top left\r\n                    caAdd2(mappings, xLeft, yBottom); // bottom left\r\n                    caAdd2(mappings, xRight, yTop); // top right\r\n                    caAdd2(mappings, xRight, yBottom); // bottom right\r\n                    var offset = centers.elementCount;\r\n                    for (var i = 0; i < 4; ++i) {\r\n                        caAdd2(tcoords, 10, 10);\r\n                        add(x, y, z, depth, group);\r\n                    }\r\n                    caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\r\n                    caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\r\n                }\r\n                if (tether) {\r\n                    var xTip = void 0, yTip = void 0;\r\n                    var xBaseA = void 0, yBaseA = void 0;\r\n                    var xBaseB = void 0, yBaseB = void 0;\r\n                    var xBaseCenter = void 0, yBaseCenter = void 0;\r\n                    var scaledTetherLength = tetherLength * scale;\r\n                    var scaledTetherBaseWidth = tetherBaseWidth * scale;\r\n                    switch (attachment) {\r\n                        case 'bottom-left':\r\n                            xTip = xLeft - scaledTetherLength / 2;\r\n                            xBaseA = xLeft + scaledTetherBaseWidth / 2;\r\n                            xBaseB = xLeft;\r\n                            xBaseCenter = xLeft;\r\n                            yTip = yBottom - scaledTetherLength / 2;\r\n                            yBaseA = yBottom;\r\n                            yBaseB = yBottom + scaledTetherBaseWidth / 2;\r\n                            yBaseCenter = yBottom;\r\n                            break;\r\n                        case 'bottom-center':\r\n                            xTip = 0;\r\n                            xBaseA = scaledTetherBaseWidth / 2;\r\n                            xBaseB = -scaledTetherBaseWidth / 2;\r\n                            xBaseCenter = 0;\r\n                            yTip = yBottom - scaledTetherLength;\r\n                            yBaseA = yBottom;\r\n                            yBaseB = yBottom;\r\n                            yBaseCenter = yBottom;\r\n                            break;\r\n                        case 'bottom-right':\r\n                            xTip = xRight + scaledTetherLength / 2;\r\n                            xBaseA = xRight;\r\n                            xBaseB = xRight - scaledTetherBaseWidth / 2;\r\n                            xBaseCenter = xRight;\r\n                            yTip = yBottom - scaledTetherLength / 2;\r\n                            yBaseA = yBottom + scaledTetherBaseWidth / 2;\r\n                            yBaseB = yBottom;\r\n                            yBaseCenter = yBottom;\r\n                            break;\r\n                        case 'middle-left':\r\n                            xTip = xLeft - scaledTetherLength;\r\n                            xBaseA = xLeft;\r\n                            xBaseB = xLeft;\r\n                            xBaseCenter = xLeft;\r\n                            yTip = 0;\r\n                            yBaseA = -scaledTetherBaseWidth / 2;\r\n                            yBaseB = scaledTetherBaseWidth / 2;\r\n                            yBaseCenter = 0;\r\n                            break;\r\n                        case 'middle-center':\r\n                            xTip = 0;\r\n                            xBaseA = 0;\r\n                            xBaseB = 0;\r\n                            xBaseCenter = 0;\r\n                            yTip = 0;\r\n                            yBaseA = 0;\r\n                            yBaseB = 0;\r\n                            yBaseCenter = 0;\r\n                            break;\r\n                        case 'middle-right':\r\n                            xTip = xRight + scaledTetherLength;\r\n                            xBaseA = xRight;\r\n                            xBaseB = xRight;\r\n                            xBaseCenter = xRight;\r\n                            yTip = 0;\r\n                            yBaseA = scaledTetherBaseWidth / 2;\r\n                            yBaseB = -scaledTetherBaseWidth / 2;\r\n                            yBaseCenter = 0;\r\n                            break;\r\n                        case 'top-left':\r\n                            xTip = xLeft - scaledTetherLength / 2;\r\n                            xBaseA = xLeft + scaledTetherBaseWidth / 2;\r\n                            xBaseB = xLeft;\r\n                            xBaseCenter = xLeft;\r\n                            yTip = yTop + scaledTetherLength / 2;\r\n                            yBaseA = yTop;\r\n                            yBaseB = yTop - scaledTetherBaseWidth / 2;\r\n                            yBaseCenter = yTop;\r\n                            break;\r\n                        case 'top-center':\r\n                            xTip = 0;\r\n                            xBaseA = scaledTetherBaseWidth / 2;\r\n                            xBaseB = -scaledTetherBaseWidth / 2;\r\n                            xBaseCenter = 0;\r\n                            yTip = yTop + scaledTetherLength;\r\n                            yBaseA = yTop;\r\n                            yBaseB = yTop;\r\n                            yBaseCenter = yTop;\r\n                            break;\r\n                        case 'top-right':\r\n                            xTip = xRight + scaledTetherLength / 2;\r\n                            xBaseA = xRight;\r\n                            xBaseB = xRight - scaledTetherBaseWidth / 2;\r\n                            xBaseCenter = xRight;\r\n                            yTip = yTop + scaledTetherLength / 2;\r\n                            yBaseA = yTop - scaledTetherBaseWidth / 2;\r\n                            yBaseB = yTop;\r\n                            yBaseCenter = yTop;\r\n                            break;\r\n                        default:\r\n                            throw new Error('unsupported attachment');\r\n                    }\r\n                    caAdd2(mappings, xTip, yTip); // tip\r\n                    caAdd2(mappings, xBaseA, yBaseA); // base A\r\n                    caAdd2(mappings, xBaseB, yBaseB); // base B\r\n                    caAdd2(mappings, xBaseCenter, yBaseCenter); // base center\r\n                    var offset = centers.elementCount;\r\n                    for (var i = 0; i < 4; ++i) {\r\n                        caAdd2(tcoords, 10, 10);\r\n                        add(x, y, z, depth, group);\r\n                    }\r\n                    caAdd3(indices, offset, offset + 1, offset + 3);\r\n                    caAdd3(indices, offset, offset + 3, offset + 2);\r\n                }\r\n                xShift += outline;\r\n                yShift += outline;\r\n                var xadvance = 0;\r\n                for (var iChar = 0; iChar < nChar; ++iChar) {\r\n                    var c = fontAtlas.get(str[iChar]);\r\n                    var left = (xadvance - xShift) * scale;\r\n                    var right = (xadvance + c.nw - xShift) * scale;\r\n                    var top_1 = (c.nh - yShift) * scale;\r\n                    var bottom = (-yShift) * scale;\r\n                    caAdd2(mappings, left, top_1);\r\n                    caAdd2(mappings, left, bottom);\r\n                    caAdd2(mappings, right, top_1);\r\n                    caAdd2(mappings, right, bottom);\r\n                    var texWidth = fontAtlas.texture.width;\r\n                    var texHeight = fontAtlas.texture.height;\r\n                    caAdd2(tcoords, c.x / texWidth, c.y / texHeight); // top left\r\n                    caAdd2(tcoords, c.x / texWidth, (c.y + c.h) / texHeight); // bottom left\r\n                    caAdd2(tcoords, (c.x + c.w) / texWidth, c.y / texHeight); // top right\r\n                    caAdd2(tcoords, (c.x + c.w) / texWidth, (c.y + c.h) / texHeight); // bottom right\r\n                    xadvance += c.nw - 2 * outline;\r\n                    var offset = centers.elementCount;\r\n                    for (var i = 0; i < 4; ++i)\r\n                        add(x, y, z, depth, group);\r\n                    caAdd3(indices, offset + quadIndices[0], offset + quadIndices[1], offset + quadIndices[2]);\r\n                    caAdd3(indices, offset + quadIndices[3], offset + quadIndices[4], offset + quadIndices[5]);\r\n                }\r\n            },\r\n            getText: function () {\r\n                var ft = fontAtlas.texture;\r\n                var cb = ChunkedArray.compact(centers, true);\r\n                var mb = ChunkedArray.compact(mappings, true);\r\n                var db = ChunkedArray.compact(depths, true);\r\n                var ib = ChunkedArray.compact(indices, true);\r\n                var gb = ChunkedArray.compact(groups, true);\r\n                var tb = ChunkedArray.compact(tcoords, true);\r\n                return Text.create(ft, cb, mb, db, ib, gb, tb, indices.elementCount / 2, text);\r\n            }\r\n        };\r\n    }\r\n    TextBuilder.create = create;\r\n})(TextBuilder || (TextBuilder = {}));\r\n//# sourceMappingURL=text-builder.js.map"]},"metadata":{},"sourceType":"module"}