"use strict";
/**
 * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Michal Malý <michal.maly@ibt.cas.cz>
 * @author Jiří Černý <jiri.cerny@ibt.cas.cz>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfalPyramidsColorThemeProvider = exports.ConfalPyramidsColorTheme = exports.getConfalPyramidsColorThemeParams = exports.ConfalPyramidsColorThemeParams = void 0;
var property_1 = require("./property");
var types_1 = require("./types");
var color_1 = require("../../../mol-util/color");
var param_definition_1 = require("../../../mol-util/param-definition");
var legend_1 = require("../../../mol-util/legend");
var util_1 = require("../../../mol-data/util");
var DefaultColor = (0, color_1.Color)(0xCCCCCC);
var Description = 'Assigns colors to confal pyramids';
var ErrorColor = (0, color_1.Color)(0xFFA10A);
var ColorMapping = new Map([
    ['A', (0, color_1.Color)(0xFFC1C1)],
    ['B', (0, color_1.Color)(0xC8CFFF)],
    ['BII', (0, color_1.Color)(0x0059DA)],
    ['miB', (0, color_1.Color)(0x3BE8FB)],
    ['Z', (0, color_1.Color)(0x01F60E)],
    ['IC', (0, color_1.Color)(0xFA5CFB)],
    ['OPN', (0, color_1.Color)(0xE90000)],
    ['SYN', (0, color_1.Color)(0xFFFF01)],
    ['N', (0, color_1.Color)(0xF2F2F2)],
]);
var NtCToClasses = new Map([
    ['NANT', ['N', 'N']],
    ['AA00', ['A', 'A']],
    ['AA02', ['A', 'A']],
    ['AA03', ['A', 'A']],
    ['AA04', ['A', 'A']],
    ['AA08', ['A', 'A']],
    ['AA09', ['A', 'A']],
    ['AA01', ['A', 'A']],
    ['AA05', ['A', 'A']],
    ['AA06', ['A', 'A']],
    ['AA10', ['A', 'A']],
    ['AA11', ['A', 'A']],
    ['AA07', ['A', 'A']],
    ['AA12', ['A', 'A']],
    ['AA13', ['A', 'A']],
    ['AB01', ['A', 'B']],
    ['AB02', ['A', 'B']],
    ['AB03', ['A', 'B']],
    ['AB04', ['A', 'B']],
    ['AB05', ['A', 'B']],
    ['BA01', ['B', 'A']],
    ['BA05', ['B', 'A']],
    ['BA09', ['B', 'A']],
    ['BA08', ['BII', 'A']],
    ['BA10', ['B', 'A']],
    ['BA13', ['BII', 'A']],
    ['BA16', ['BII', 'A']],
    ['BA17', ['BII', 'A']],
    ['BB00', ['B', 'B']],
    ['BB01', ['B', 'B']],
    ['BB17', ['B', 'B']],
    ['BB02', ['B', 'B']],
    ['BB03', ['B', 'B']],
    ['BB11', ['B', 'B']],
    ['BB16', ['B', 'B']],
    ['BB04', ['B', 'BII']],
    ['BB05', ['B', 'BII']],
    ['BB07', ['BII', 'BII']],
    ['BB08', ['BII', 'BII']],
    ['BB10', ['miB', 'miB']],
    ['BB12', ['miB', 'miB']],
    ['BB13', ['miB', 'miB']],
    ['BB14', ['miB', 'miB']],
    ['BB15', ['miB', 'miB']],
    ['BB20', ['miB', 'miB']],
    ['IC01', ['IC', 'IC']],
    ['IC02', ['IC', 'IC']],
    ['IC03', ['IC', 'IC']],
    ['IC04', ['IC', 'IC']],
    ['IC05', ['IC', 'IC']],
    ['IC06', ['IC', 'IC']],
    ['IC07', ['IC', 'IC']],
    ['OP01', ['OPN', 'OPN']],
    ['OP02', ['OPN', 'OPN']],
    ['OP03', ['OPN', 'OPN']],
    ['OP04', ['OPN', 'OPN']],
    ['OP05', ['OPN', 'OPN']],
    ['OP06', ['OPN', 'OPN']],
    ['OP07', ['OPN', 'OPN']],
    ['OP08', ['OPN', 'OPN']],
    ['OP09', ['OPN', 'OPN']],
    ['OP10', ['OPN', 'OPN']],
    ['OP11', ['OPN', 'OPN']],
    ['OP12', ['OPN', 'OPN']],
    ['OP13', ['OPN', 'OPN']],
    ['OP14', ['OPN', 'OPN']],
    ['OP15', ['OPN', 'OPN']],
    ['OP16', ['OPN', 'OPN']],
    ['OP17', ['OPN', 'OPN']],
    ['OP18', ['OPN', 'OPN']],
    ['OP19', ['OPN', 'OPN']],
    ['OP20', ['OPN', 'OPN']],
    ['OP21', ['OPN', 'OPN']],
    ['OP22', ['OPN', 'OPN']],
    ['OP23', ['OPN', 'OPN']],
    ['OP24', ['OPN', 'OPN']],
    ['OP25', ['OPN', 'OPN']],
    ['OP26', ['OPN', 'OPN']],
    ['OP27', ['OPN', 'OPN']],
    ['OP28', ['OPN', 'OPN']],
    ['OP29', ['OPN', 'OPN']],
    ['OP30', ['OPN', 'OPN']],
    ['OP31', ['OPN', 'OPN']],
    ['OPS1', ['OPN', 'OPN']],
    ['OP1S', ['OPN', 'SYN']],
    ['AAS1', ['SYN', 'A']],
    ['AB1S', ['A', 'SYN']],
    ['AB2S', ['A', 'SYN']],
    ['BB1S', ['B', 'SYN']],
    ['BB2S', ['B', 'SYN']],
    ['BBS1', ['SYN', 'B']],
    ['ZZ01', ['Z', 'Z']],
    ['ZZ02', ['Z', 'Z']],
    ['ZZ1S', ['Z', 'SYN']],
    ['ZZ2S', ['Z', 'SYN']],
    ['ZZS1', ['SYN', 'Z']],
    ['ZZS2', ['SYN', 'Z']],
]);
function getConformerColor(ntc, useLower) {
    var _a;
    var item = NtCToClasses.get(ntc);
    if (!item)
        return ErrorColor;
    return (_a = ColorMapping.get(useLower ? item[1] : item[0])) !== null && _a !== void 0 ? _a : ErrorColor;
}
exports.ConfalPyramidsColorThemeParams = {};
function getConfalPyramidsColorThemeParams(ctx) {
    return exports.ConfalPyramidsColorThemeParams; // TODO return copy
}
exports.getConfalPyramidsColorThemeParams = getConfalPyramidsColorThemeParams;
function ConfalPyramidsColorTheme(ctx, props) {
    function color(location, isSecondary) {
        if (types_1.ConfalPyramidsTypes.isLocation(location)) {
            var _a = location.data, pyramid = _a.pyramid, isLower = _a.isLower;
            return getConformerColor(pyramid.NtC, isLower);
        }
        return DefaultColor;
    }
    return {
        factory: ConfalPyramidsColorTheme,
        granularity: 'group',
        color: color,
        props: props,
        description: Description,
        legend: (0, legend_1.TableLegend)((0, util_1.iterableToArray)(ColorMapping.entries()).map(function (_a) {
            var conformer = _a[0], color = _a[1];
            return [conformer, color];
        }).concat([
            ['Error', ErrorColor],
            ['Unknown', DefaultColor]
        ]))
    };
}
exports.ConfalPyramidsColorTheme = ConfalPyramidsColorTheme;
exports.ConfalPyramidsColorThemeProvider = {
    name: 'confal-pyramids',
    label: 'Confal Pyramids',
    category: "Residue Property" /* Residue */,
    factory: ConfalPyramidsColorTheme,
    getParams: getConfalPyramidsColorThemeParams,
    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.ConfalPyramidsColorThemeParams),
    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return property_1.ConfalPyramids.isApplicable(m); }); },
    ensureCustomProperties: {
        attach: function (ctx, data) { return data.structure ? property_1.ConfalPyramidsProvider.attach(ctx, data.structure.models[0], void 0, true) : Promise.resolve(); },
        detach: function (data) { return data.structure && property_1.ConfalPyramidsProvider.ref(data.structure.models[0], false); }
    }
};
//# sourceMappingURL=color.js.map