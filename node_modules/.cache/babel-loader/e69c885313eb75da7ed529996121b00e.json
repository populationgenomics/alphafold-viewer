{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Mesh } from './mesh/mesh';\nimport { Points } from './points/points';\nimport { Text } from './text/text';\nimport { Lines } from './lines/lines';\nimport { DirectVolume } from './direct-volume/direct-volume';\nimport { Spheres } from './spheres/spheres';\nimport { arrayMax } from '../../mol-util/array';\nimport { TextureMesh } from './texture-mesh/texture-mesh';\nimport { Image } from './image/image';\nimport { Cylinders } from './cylinders/cylinders';\nexport var Geometry;\n\n(function (Geometry) {\n  function getDrawCount(geometry) {\n    switch (geometry.kind) {\n      case 'mesh':\n        return geometry.triangleCount * 3;\n\n      case 'points':\n        return geometry.pointCount;\n\n      case 'spheres':\n        return geometry.sphereCount * 2 * 3;\n\n      case 'cylinders':\n        return geometry.cylinderCount * 4 * 3;\n\n      case 'text':\n        return geometry.charCount * 2 * 3;\n\n      case 'lines':\n        return geometry.lineCount * 2 * 3;\n\n      case 'direct-volume':\n        return 12 * 3;\n\n      case 'image':\n        return 2 * 3;\n\n      case 'texture-mesh':\n        return geometry.vertexCount;\n    }\n  }\n\n  Geometry.getDrawCount = getDrawCount;\n\n  function getVertexCount(geometry) {\n    switch (geometry.kind) {\n      case 'mesh':\n        return geometry.vertexCount;\n\n      case 'points':\n        return geometry.pointCount;\n\n      case 'spheres':\n        return geometry.sphereCount * 4;\n\n      case 'cylinders':\n        return geometry.cylinderCount * 6;\n\n      case 'text':\n        return geometry.charCount * 4;\n\n      case 'lines':\n        return geometry.lineCount * 4;\n\n      case 'direct-volume':\n        var _a = geometry.gridDimension.ref.value,\n            x = _a[0],\n            y = _a[1],\n            z = _a[2];\n        return x * y * z;\n\n      case 'image':\n        return 4;\n\n      case 'texture-mesh':\n        return geometry.vertexCount;\n    }\n  }\n\n  Geometry.getVertexCount = getVertexCount;\n\n  function getGroupCount(geometry) {\n    switch (geometry.kind) {\n      case 'mesh':\n      case 'points':\n      case 'spheres':\n      case 'cylinders':\n      case 'text':\n      case 'lines':\n        return getDrawCount(geometry) === 0 ? 0 : arrayMax(geometry.groupBuffer.ref.value) + 1;\n\n      case 'direct-volume':\n        return 1;\n\n      case 'image':\n        return arrayMax(geometry.groupTexture.ref.value.array) + 1;\n\n      case 'texture-mesh':\n        return geometry.groupCount;\n    }\n  }\n\n  Geometry.getGroupCount = getGroupCount;\n\n  function getUtils(geometry) {\n    // TODO avoid casting\n    switch (geometry.kind) {\n      case 'mesh':\n        return Mesh.Utils;\n\n      case 'points':\n        return Points.Utils;\n\n      case 'spheres':\n        return Spheres.Utils;\n\n      case 'cylinders':\n        return Cylinders.Utils;\n\n      case 'text':\n        return Text.Utils;\n\n      case 'lines':\n        return Lines.Utils;\n\n      case 'direct-volume':\n        return DirectVolume.Utils;\n\n      case 'image':\n        return Image.Utils;\n\n      case 'texture-mesh':\n        return TextureMesh.Utils;\n    }\n  }\n\n  Geometry.getUtils = getUtils;\n\n  function getGranularity(locationIt, granularity) {\n    return granularity === 'instance' && locationIt.nonInstanceable ? 'group' : granularity;\n  }\n\n  Geometry.getGranularity = getGranularity;\n})(Geometry || (Geometry = {}));","map":{"version":3,"sources":["../../../src/mol-geo/geometry/geometry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Mesh } from './mesh/mesh';\r\nimport { Points } from './points/points';\r\nimport { Text } from './text/text';\r\nimport { Lines } from './lines/lines';\r\nimport { DirectVolume } from './direct-volume/direct-volume';\r\nimport { Spheres } from './spheres/spheres';\r\nimport { arrayMax } from '../../mol-util/array';\r\nimport { TextureMesh } from './texture-mesh/texture-mesh';\r\nimport { Image } from './image/image';\r\nimport { Cylinders } from './cylinders/cylinders';\r\nexport var Geometry;\r\n(function (Geometry) {\r\n    function getDrawCount(geometry) {\r\n        switch (geometry.kind) {\r\n            case 'mesh': return geometry.triangleCount * 3;\r\n            case 'points': return geometry.pointCount;\r\n            case 'spheres': return geometry.sphereCount * 2 * 3;\r\n            case 'cylinders': return geometry.cylinderCount * 4 * 3;\r\n            case 'text': return geometry.charCount * 2 * 3;\r\n            case 'lines': return geometry.lineCount * 2 * 3;\r\n            case 'direct-volume': return 12 * 3;\r\n            case 'image': return 2 * 3;\r\n            case 'texture-mesh': return geometry.vertexCount;\r\n        }\r\n    }\r\n    Geometry.getDrawCount = getDrawCount;\r\n    function getVertexCount(geometry) {\r\n        switch (geometry.kind) {\r\n            case 'mesh': return geometry.vertexCount;\r\n            case 'points': return geometry.pointCount;\r\n            case 'spheres': return geometry.sphereCount * 4;\r\n            case 'cylinders': return geometry.cylinderCount * 6;\r\n            case 'text': return geometry.charCount * 4;\r\n            case 'lines': return geometry.lineCount * 4;\r\n            case 'direct-volume':\r\n                var _a = geometry.gridDimension.ref.value, x = _a[0], y = _a[1], z = _a[2];\r\n                return x * y * z;\r\n            case 'image': return 4;\r\n            case 'texture-mesh': return geometry.vertexCount;\r\n        }\r\n    }\r\n    Geometry.getVertexCount = getVertexCount;\r\n    function getGroupCount(geometry) {\r\n        switch (geometry.kind) {\r\n            case 'mesh':\r\n            case 'points':\r\n            case 'spheres':\r\n            case 'cylinders':\r\n            case 'text':\r\n            case 'lines':\r\n                return getDrawCount(geometry) === 0 ? 0 : (arrayMax(geometry.groupBuffer.ref.value) + 1);\r\n            case 'direct-volume':\r\n                return 1;\r\n            case 'image':\r\n                return arrayMax(geometry.groupTexture.ref.value.array) + 1;\r\n            case 'texture-mesh':\r\n                return geometry.groupCount;\r\n        }\r\n    }\r\n    Geometry.getGroupCount = getGroupCount;\r\n    function getUtils(geometry) {\r\n        // TODO avoid casting\r\n        switch (geometry.kind) {\r\n            case 'mesh': return Mesh.Utils;\r\n            case 'points': return Points.Utils;\r\n            case 'spheres': return Spheres.Utils;\r\n            case 'cylinders': return Cylinders.Utils;\r\n            case 'text': return Text.Utils;\r\n            case 'lines': return Lines.Utils;\r\n            case 'direct-volume': return DirectVolume.Utils;\r\n            case 'image': return Image.Utils;\r\n            case 'texture-mesh': return TextureMesh.Utils;\r\n        }\r\n    }\r\n    Geometry.getUtils = getUtils;\r\n    function getGranularity(locationIt, granularity) {\r\n        return granularity === 'instance' && locationIt.nonInstanceable ? 'group' : granularity;\r\n    }\r\n    Geometry.getGranularity = getGranularity;\r\n})(Geometry || (Geometry = {}));\r\n//# sourceMappingURL=geometry.js.map"]},"metadata":{},"sourceType":"module"}