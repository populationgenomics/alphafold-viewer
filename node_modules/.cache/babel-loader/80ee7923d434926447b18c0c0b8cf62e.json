{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { idFactory } from '../../mol-util/id-factory';\nimport { isWebGL2 } from './compat';\nvar getNextFramebufferId = idFactory();\n\nfunction getFramebufferStatusDescription(gl, status) {\n  switch (status) {\n    case gl.FRAMEBUFFER_COMPLETE:\n      return 'complete';\n\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'incomplete attachment';\n\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'incomplete missing attachment';\n\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'incomplete dimensions';\n\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'unsupported';\n  }\n\n  if (isWebGL2(gl)) {\n    switch (status) {\n      case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n        return 'incomplete multisample';\n\n      case gl.RENDERBUFFER_SAMPLES:\n        return 'renderbuffer samples';\n    }\n  }\n\n  return 'unknown error';\n}\n\nexport function checkFramebufferStatus(gl) {\n  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    var description = getFramebufferStatusDescription(gl, status);\n    throw new Error(\"Framebuffer status: \" + description);\n  }\n}\n\nfunction getFramebuffer(gl) {\n  var framebuffer = gl.createFramebuffer();\n\n  if (framebuffer === null) {\n    throw new Error('Could not create WebGL framebuffer');\n  }\n\n  return framebuffer;\n}\n\nexport function createFramebuffer(gl) {\n  var _framebuffer = getFramebuffer(gl);\n\n  var destroyed = false;\n  return {\n    id: getNextFramebufferId(),\n    bind: function () {\n      return gl.bindFramebuffer(gl.FRAMEBUFFER, _framebuffer);\n    },\n    reset: function () {\n      _framebuffer = getFramebuffer(gl);\n    },\n    destroy: function () {\n      if (destroyed) return;\n      gl.deleteFramebuffer(_framebuffer);\n      destroyed = true;\n    }\n  };\n} //\n\nexport function createNullFramebuffer() {\n  return {\n    id: getNextFramebufferId(),\n    bind: function () {},\n    reset: function () {},\n    destroy: function () {}\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/framebuffer.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,SAAT,QAA0B,2BAA1B;AACA,SAA6B,QAA7B,QAA6C,UAA7C;AAEA,IAAM,oBAAoB,GAAG,SAAS,EAAtC;;AAEA,SAAS,+BAAT,CAAyC,EAAzC,EAAiE,MAAjE,EAA+E;AAC3E,UAAQ,MAAR;AACI,SAAK,EAAE,CAAC,oBAAR;AAA8B,aAAO,UAAP;;AAC9B,SAAK,EAAE,CAAC,iCAAR;AAA2C,aAAO,uBAAP;;AAC3C,SAAK,EAAE,CAAC,yCAAR;AAAmD,aAAO,+BAAP;;AACnD,SAAK,EAAE,CAAC,iCAAR;AAA2C,aAAO,uBAAP;;AAC3C,SAAK,EAAE,CAAC,uBAAR;AAAiC,aAAO,aAAP;AALrC;;AAOA,MAAI,QAAQ,CAAC,EAAD,CAAZ,EAAkB;AACd,YAAQ,MAAR;AACI,WAAK,EAAE,CAAC,kCAAR;AAA4C,eAAO,wBAAP;;AAC5C,WAAK,EAAE,CAAC,oBAAR;AAA8B,eAAO,sBAAP;AAFlC;AAIH;;AACD,SAAO,eAAP;AACH;;AAED,OAAM,SAAU,sBAAV,CAAiC,EAAjC,EAAuD;AACzD,MAAM,MAAM,GAAG,EAAE,CAAC,sBAAH,CAA0B,EAAE,CAAC,WAA7B,CAAf;;AACA,MAAI,MAAM,KAAK,EAAE,CAAC,oBAAlB,EAAwC;AACpC,QAAM,WAAW,GAAG,+BAA+B,CAAC,EAAD,EAAK,MAAL,CAAnD;AACA,UAAM,IAAI,KAAJ,CAAU,yBAAuB,WAAjC,CAAN;AACH;AACJ;;AAUD,SAAS,cAAT,CAAwB,EAAxB,EAA8C;AAC1C,MAAM,WAAW,GAAG,EAAE,CAAC,iBAAH,EAApB;;AACA,MAAI,WAAW,KAAK,IAApB,EAA0B;AACtB,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACD,SAAO,WAAP;AACH;;AAED,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAAkD;AACpD,MAAI,YAAY,GAAG,cAAc,CAAC,EAAD,CAAjC;;AAEA,MAAI,SAAS,GAAG,KAAhB;AAEA,SAAO;AACH,IAAA,EAAE,EAAE,oBAAoB,EADrB;AAGH,IAAA,IAAI,EAAE,YAAA;AAAM,aAAA,EAAE,CAAC,eAAH,CAAmB,EAAE,CAAC,WAAtB,EAAA,YAAA,CAAA;AAAgD,KAHzD;AAIH,IAAA,KAAK,EAAE,YAAA;AACH,MAAA,YAAY,GAAG,cAAc,CAAC,EAAD,CAA7B;AACH,KANE;AAOH,IAAA,OAAO,EAAE,YAAA;AACL,UAAI,SAAJ,EAAe;AACf,MAAA,EAAE,CAAC,iBAAH,CAAqB,YAArB;AACA,MAAA,SAAS,GAAG,IAAZ;AACH;AAXE,GAAP;AAaH,C,CAED;;AAEA,OAAM,SAAU,qBAAV,GAA+B;AACjC,SAAO;AACH,IAAA,EAAE,EAAE,oBAAoB,EADrB;AAGH,IAAA,IAAI,EAAE,YAAA,CAAQ,CAHX;AAIH,IAAA,KAAK,EAAE,YAAA,CAAQ,CAJZ;AAKH,IAAA,OAAO,EAAE,YAAA,CAAQ;AALd,GAAP;AAOH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { idFactory } from '../../mol-util/id-factory';\r\nimport { isWebGL2 } from './compat';\r\nvar getNextFramebufferId = idFactory();\r\nfunction getFramebufferStatusDescription(gl, status) {\r\n    switch (status) {\r\n        case gl.FRAMEBUFFER_COMPLETE: return 'complete';\r\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: return 'incomplete attachment';\r\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: return 'incomplete missing attachment';\r\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: return 'incomplete dimensions';\r\n        case gl.FRAMEBUFFER_UNSUPPORTED: return 'unsupported';\r\n    }\r\n    if (isWebGL2(gl)) {\r\n        switch (status) {\r\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: return 'incomplete multisample';\r\n            case gl.RENDERBUFFER_SAMPLES: return 'renderbuffer samples';\r\n        }\r\n    }\r\n    return 'unknown error';\r\n}\r\nexport function checkFramebufferStatus(gl) {\r\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n        var description = getFramebufferStatusDescription(gl, status);\r\n        throw new Error(\"Framebuffer status: \" + description);\r\n    }\r\n}\r\nfunction getFramebuffer(gl) {\r\n    var framebuffer = gl.createFramebuffer();\r\n    if (framebuffer === null) {\r\n        throw new Error('Could not create WebGL framebuffer');\r\n    }\r\n    return framebuffer;\r\n}\r\nexport function createFramebuffer(gl) {\r\n    var _framebuffer = getFramebuffer(gl);\r\n    var destroyed = false;\r\n    return {\r\n        id: getNextFramebufferId(),\r\n        bind: function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, _framebuffer); },\r\n        reset: function () {\r\n            _framebuffer = getFramebuffer(gl);\r\n        },\r\n        destroy: function () {\r\n            if (destroyed)\r\n                return;\r\n            gl.deleteFramebuffer(_framebuffer);\r\n            destroyed = true;\r\n        }\r\n    };\r\n}\r\n//\r\nexport function createNullFramebuffer() {\r\n    return {\r\n        id: getNextFramebufferId(),\r\n        bind: function () { },\r\n        reset: function () { },\r\n        destroy: function () { }\r\n    };\r\n}\r\n//# sourceMappingURL=framebuffer.js.map"]},"metadata":{},"sourceType":"module"}