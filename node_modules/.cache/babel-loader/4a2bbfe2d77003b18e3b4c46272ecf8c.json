{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { createCurveSegmentState, PolymerTraceIterator, interpolateCurveSegment, interpolateSizes, PolymerLocationIterator, getPolymerElementLoci, eachPolymerElement, StandardTension, StandardShift, NucleicShift, OverhangFactor } from './util/polymer';\nimport { isNucleic } from '../../../mol-model/structure/model/types';\nimport { addTube } from '../../../mol-geo/geometry/mesh/builder/tube';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { addSheet } from '../../../mol-geo/geometry/mesh/builder/sheet';\nimport { addRibbon } from '../../../mol-geo/geometry/mesh/builder/ribbon';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry';\nexport var PolymerTubeMeshParams = {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  detail: PD.Numeric(0, {\n    min: 0,\n    max: 3,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo),\n  linearSegments: PD.Numeric(8, {\n    min: 1,\n    max: 48,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo),\n  radialSegments: PD.Numeric(16, {\n    min: 2,\n    max: 56,\n    step: 2\n  }, BaseGeometry.CustomQualityParamInfo)\n};\nexport var DefaultPolymerTubeMeshProps = PD.getDefaultValues(PolymerTubeMeshParams);\nvar tmpV1 = Vec3();\n\nfunction createPolymerTubeMesh(ctx, unit, structure, theme, props, mesh) {\n  var polymerElementCount = unit.polymerElements.length;\n  if (!polymerElementCount) return Mesh.createEmpty(mesh);\n  var sizeFactor = props.sizeFactor,\n      detail = props.detail,\n      linearSegments = props.linearSegments,\n      radialSegments = props.radialSegments;\n  var vertexCount = linearSegments * radialSegments * polymerElementCount + (radialSegments + 1) * polymerElementCount * 2;\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 10, mesh);\n  var state = createCurveSegmentState(linearSegments);\n  var curvePoints = state.curvePoints,\n      normalVectors = state.normalVectors,\n      binormalVectors = state.binormalVectors,\n      widthValues = state.widthValues,\n      heightValues = state.heightValues;\n  var i = 0;\n  var polymerTraceIt = PolymerTraceIterator(unit, structure, {\n    ignoreSecondaryStructure: true\n  });\n\n  while (polymerTraceIt.hasNext) {\n    var v = polymerTraceIt.move();\n    builderState.currentGroup = i;\n    var isNucleicType = isNucleic(v.moleculeType);\n    var shift = isNucleicType ? NucleicShift : StandardShift;\n    interpolateCurveSegment(state, v, StandardTension, shift);\n    var startCap = v.coarseBackboneFirst || v.first;\n    var endCap = v.coarseBackboneLast || v.last;\n    var s0 = theme.size.size(v.centerPrev) * sizeFactor;\n    var s1 = theme.size.size(v.center) * sizeFactor;\n    var s2 = theme.size.size(v.centerNext) * sizeFactor;\n    interpolateSizes(state, s0, s1, s2, s0, s1, s2, shift);\n    var segmentCount = linearSegments;\n\n    if (v.initial) {\n      segmentCount = Math.max(Math.round(linearSegments * shift), 1);\n      var offset = linearSegments - segmentCount;\n      curvePoints.copyWithin(0, offset * 3);\n      binormalVectors.copyWithin(0, offset * 3);\n      normalVectors.copyWithin(0, offset * 3);\n      widthValues.copyWithin(0, offset * 3);\n      heightValues.copyWithin(0, offset * 3);\n      Vec3.fromArray(tmpV1, curvePoints, 3);\n      Vec3.normalize(tmpV1, Vec3.sub(tmpV1, v.p2, tmpV1));\n      Vec3.scaleAndAdd(tmpV1, v.p2, tmpV1, s1 * OverhangFactor);\n      Vec3.toArray(tmpV1, curvePoints, 0);\n    } else if (v.final) {\n      segmentCount = Math.max(Math.round(linearSegments * (1 - shift)), 1);\n      Vec3.fromArray(tmpV1, curvePoints, segmentCount * 3 - 3);\n      Vec3.normalize(tmpV1, Vec3.sub(tmpV1, v.p2, tmpV1));\n      Vec3.scaleAndAdd(tmpV1, v.p2, tmpV1, s1 * OverhangFactor);\n      Vec3.toArray(tmpV1, curvePoints, segmentCount * 3);\n    }\n\n    if (v.initial === true && v.final === true) {\n      addSphere(builderState, v.p2, s1 * 2, detail);\n    } else if (radialSegments === 2) {\n      addRibbon(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, widthValues, heightValues, 0);\n    } else if (radialSegments === 4) {\n      addSheet(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, widthValues, heightValues, 0, startCap, endCap);\n    } else {\n      addTube(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, radialSegments, widthValues, heightValues, startCap, endCap);\n    }\n\n    ++i;\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var PolymerTubeParams = __assign(__assign({}, UnitsMeshParams), PolymerTubeMeshParams);\nexport function PolymerTubeVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(PolymerTubeParams),\n    createGeometry: createPolymerTubeMesh,\n    createLocationIterator: PolymerLocationIterator.fromGroup,\n    getLoci: getPolymerElementLoci,\n    eachLocation: eachPolymerElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.detail !== currentProps.detail || newProps.linearSegments !== currentProps.linearSegments || newProps.radialSegments !== currentProps.radialSegments;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/polymer-tube-mesh.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { createCurveSegmentState, PolymerTraceIterator, interpolateCurveSegment, interpolateSizes, PolymerLocationIterator, getPolymerElementLoci, eachPolymerElement, StandardTension, StandardShift, NucleicShift, OverhangFactor } from './util/polymer';\r\nimport { isNucleic } from '../../../mol-model/structure/model/types';\r\nimport { addTube } from '../../../mol-geo/geometry/mesh/builder/tube';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { addSheet } from '../../../mol-geo/geometry/mesh/builder/sheet';\r\nimport { addRibbon } from '../../../mol-geo/geometry/mesh/builder/ribbon';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\nexport var PolymerTubeMeshParams = {\r\n    sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }),\r\n    detail: PD.Numeric(0, { min: 0, max: 3, step: 1 }, BaseGeometry.CustomQualityParamInfo),\r\n    linearSegments: PD.Numeric(8, { min: 1, max: 48, step: 1 }, BaseGeometry.CustomQualityParamInfo),\r\n    radialSegments: PD.Numeric(16, { min: 2, max: 56, step: 2 }, BaseGeometry.CustomQualityParamInfo),\r\n};\r\nexport var DefaultPolymerTubeMeshProps = PD.getDefaultValues(PolymerTubeMeshParams);\r\nvar tmpV1 = Vec3();\r\nfunction createPolymerTubeMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var polymerElementCount = unit.polymerElements.length;\r\n    if (!polymerElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var sizeFactor = props.sizeFactor, detail = props.detail, linearSegments = props.linearSegments, radialSegments = props.radialSegments;\r\n    var vertexCount = linearSegments * radialSegments * polymerElementCount + (radialSegments + 1) * polymerElementCount * 2;\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 10, mesh);\r\n    var state = createCurveSegmentState(linearSegments);\r\n    var curvePoints = state.curvePoints, normalVectors = state.normalVectors, binormalVectors = state.binormalVectors, widthValues = state.widthValues, heightValues = state.heightValues;\r\n    var i = 0;\r\n    var polymerTraceIt = PolymerTraceIterator(unit, structure, { ignoreSecondaryStructure: true });\r\n    while (polymerTraceIt.hasNext) {\r\n        var v = polymerTraceIt.move();\r\n        builderState.currentGroup = i;\r\n        var isNucleicType = isNucleic(v.moleculeType);\r\n        var shift = isNucleicType ? NucleicShift : StandardShift;\r\n        interpolateCurveSegment(state, v, StandardTension, shift);\r\n        var startCap = v.coarseBackboneFirst || v.first;\r\n        var endCap = v.coarseBackboneLast || v.last;\r\n        var s0 = theme.size.size(v.centerPrev) * sizeFactor;\r\n        var s1 = theme.size.size(v.center) * sizeFactor;\r\n        var s2 = theme.size.size(v.centerNext) * sizeFactor;\r\n        interpolateSizes(state, s0, s1, s2, s0, s1, s2, shift);\r\n        var segmentCount = linearSegments;\r\n        if (v.initial) {\r\n            segmentCount = Math.max(Math.round(linearSegments * shift), 1);\r\n            var offset = linearSegments - segmentCount;\r\n            curvePoints.copyWithin(0, offset * 3);\r\n            binormalVectors.copyWithin(0, offset * 3);\r\n            normalVectors.copyWithin(0, offset * 3);\r\n            widthValues.copyWithin(0, offset * 3);\r\n            heightValues.copyWithin(0, offset * 3);\r\n            Vec3.fromArray(tmpV1, curvePoints, 3);\r\n            Vec3.normalize(tmpV1, Vec3.sub(tmpV1, v.p2, tmpV1));\r\n            Vec3.scaleAndAdd(tmpV1, v.p2, tmpV1, s1 * OverhangFactor);\r\n            Vec3.toArray(tmpV1, curvePoints, 0);\r\n        }\r\n        else if (v.final) {\r\n            segmentCount = Math.max(Math.round(linearSegments * (1 - shift)), 1);\r\n            Vec3.fromArray(tmpV1, curvePoints, segmentCount * 3 - 3);\r\n            Vec3.normalize(tmpV1, Vec3.sub(tmpV1, v.p2, tmpV1));\r\n            Vec3.scaleAndAdd(tmpV1, v.p2, tmpV1, s1 * OverhangFactor);\r\n            Vec3.toArray(tmpV1, curvePoints, segmentCount * 3);\r\n        }\r\n        if (v.initial === true && v.final === true) {\r\n            addSphere(builderState, v.p2, s1 * 2, detail);\r\n        }\r\n        else if (radialSegments === 2) {\r\n            addRibbon(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, widthValues, heightValues, 0);\r\n        }\r\n        else if (radialSegments === 4) {\r\n            addSheet(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, widthValues, heightValues, 0, startCap, endCap);\r\n        }\r\n        else {\r\n            addTube(builderState, curvePoints, normalVectors, binormalVectors, segmentCount, radialSegments, widthValues, heightValues, startCap, endCap);\r\n        }\r\n        ++i;\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var PolymerTubeParams = __assign(__assign({}, UnitsMeshParams), PolymerTubeMeshParams);\r\nexport function PolymerTubeVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(PolymerTubeParams),\r\n        createGeometry: createPolymerTubeMesh,\r\n        createLocationIterator: PolymerLocationIterator.fromGroup,\r\n        getLoci: getPolymerElementLoci,\r\n        eachLocation: eachPolymerElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.detail !== currentProps.detail ||\r\n                newProps.linearSegments !== currentProps.linearSegments ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=polymer-tube-mesh.js.map"]},"metadata":{},"sourceType":"module"}