{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3 } from '../../linear-algebra';\nimport { OrderedSet } from '../../../mol-data/int';\nimport { Sphere3D } from './sphere3d';\n\nfunction Box3D() {\n  return Box3D.zero();\n}\n\n(function (Box3D) {\n  function create(min, max) {\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  Box3D.create = create;\n\n  function zero() {\n    return {\n      min: Vec3(),\n      max: Vec3()\n    };\n  }\n\n  Box3D.zero = zero;\n\n  function copy(out, a) {\n    Vec3.copy(out.min, a.min);\n    Vec3.copy(out.max, a.max);\n    return out;\n  }\n\n  Box3D.copy = copy;\n\n  function clone(a) {\n    return copy(zero(), a);\n  }\n\n  Box3D.clone = clone;\n  /** Get box from sphere, uses extrema if available */\n\n  function fromSphere3D(out, sphere) {\n    if (Sphere3D.hasExtrema(sphere)) return fromVec3Array(out, sphere.extrema);\n    var r = Vec3.create(sphere.radius, sphere.radius, sphere.radius);\n    Vec3.sub(out.min, sphere.center, r);\n    Vec3.add(out.max, sphere.center, r);\n    return out;\n  }\n\n  Box3D.fromSphere3D = fromSphere3D;\n  /** Get box from sphere, uses extrema if available */\n\n  function fromVec3Array(out, array) {\n    Box3D.setEmpty(out);\n\n    for (var i = 0, il = array.length; i < il; i++) {\n      Box3D.add(out, array[i]);\n    }\n\n    return out;\n  }\n\n  Box3D.fromVec3Array = fromVec3Array;\n\n  function computeBounding(data) {\n    var min = Vec3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    var max = Vec3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    var x = data.x,\n        y = data.y,\n        z = data.z,\n        indices = data.indices;\n\n    for (var t = 0, _t = OrderedSet.size(indices); t < _t; t++) {\n      var i = OrderedSet.getAt(indices, t);\n      min[0] = Math.min(x[i], min[0]);\n      min[1] = Math.min(y[i], min[1]);\n      min[2] = Math.min(z[i], min[2]);\n      max[0] = Math.max(x[i], max[0]);\n      max[1] = Math.max(y[i], max[1]);\n      max[2] = Math.max(z[i], max[2]);\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  Box3D.computeBounding = computeBounding;\n  /** Get size/extent of the box */\n\n  function size(size, box) {\n    return Vec3.sub(size, box.max, box.min);\n  }\n\n  Box3D.size = size;\n  var tmpSizeV = Vec3();\n  /** Get volume of the box */\n\n  function volume(box) {\n    size(tmpSizeV, box);\n    return tmpSizeV[0] * tmpSizeV[1] * tmpSizeV[2];\n  }\n\n  Box3D.volume = volume;\n  /** Sets min to Number.MAX_VALUE and max to -Number.MAX_VALUE */\n\n  function setEmpty(box) {\n    Vec3.set(box.min, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    Vec3.set(box.max, -Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    return box;\n  }\n\n  Box3D.setEmpty = setEmpty;\n  /** Add point to box */\n\n  function add(box, point) {\n    Vec3.min(box.min, box.min, point);\n    Vec3.max(box.max, box.max, point);\n    return box;\n  }\n\n  Box3D.add = add;\n  /** Expand box by delta */\n\n  function expand(out, box, delta) {\n    Vec3.sub(out.min, box.min, delta);\n    Vec3.add(out.max, box.max, delta);\n    return out;\n  }\n\n  Box3D.expand = expand;\n\n  function scale(out, box, scale) {\n    Vec3.scale(out.min, box.min, scale);\n    Vec3.scale(out.max, box.max, scale);\n    return out;\n  }\n\n  Box3D.scale = scale;\n  var tmpTransformV = Vec3();\n  /** Transform box with a Mat4 */\n\n  function transform(out, box, m) {\n    var _a = box.min,\n        minX = _a[0],\n        minY = _a[1],\n        minZ = _a[2];\n    var _b = box.max,\n        maxX = _b[0],\n        maxY = _b[1],\n        maxZ = _b[2];\n    setEmpty(out);\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, minY, minZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, minY, maxZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, maxY, minZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, maxY, maxZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, minY, minZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, minY, maxZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, maxY, minZ), m));\n    add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, maxY, maxZ), m));\n    return out;\n  }\n\n  Box3D.transform = transform;\n\n  function containsVec3(box, v) {\n    return v[0] < box.min[0] || v[0] > box.max[0] || v[1] < box.min[1] || v[1] > box.max[1] || v[2] < box.min[2] || v[2] > box.max[2] ? false : true;\n  }\n\n  Box3D.containsVec3 = containsVec3;\n})(Box3D || (Box3D = {}));\n\nexport { Box3D };","map":{"version":3,"sources":["../../../../src/mol-math/geometry/primitives/box3d.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3 } from '../../linear-algebra';\r\nimport { OrderedSet } from '../../../mol-data/int';\r\nimport { Sphere3D } from './sphere3d';\r\nfunction Box3D() {\r\n    return Box3D.zero();\r\n}\r\n(function (Box3D) {\r\n    function create(min, max) { return { min: min, max: max }; }\r\n    Box3D.create = create;\r\n    function zero() { return { min: Vec3(), max: Vec3() }; }\r\n    Box3D.zero = zero;\r\n    function copy(out, a) {\r\n        Vec3.copy(out.min, a.min);\r\n        Vec3.copy(out.max, a.max);\r\n        return out;\r\n    }\r\n    Box3D.copy = copy;\r\n    function clone(a) {\r\n        return copy(zero(), a);\r\n    }\r\n    Box3D.clone = clone;\r\n    /** Get box from sphere, uses extrema if available */\r\n    function fromSphere3D(out, sphere) {\r\n        if (Sphere3D.hasExtrema(sphere))\r\n            return fromVec3Array(out, sphere.extrema);\r\n        var r = Vec3.create(sphere.radius, sphere.radius, sphere.radius);\r\n        Vec3.sub(out.min, sphere.center, r);\r\n        Vec3.add(out.max, sphere.center, r);\r\n        return out;\r\n    }\r\n    Box3D.fromSphere3D = fromSphere3D;\r\n    /** Get box from sphere, uses extrema if available */\r\n    function fromVec3Array(out, array) {\r\n        Box3D.setEmpty(out);\r\n        for (var i = 0, il = array.length; i < il; i++) {\r\n            Box3D.add(out, array[i]);\r\n        }\r\n        return out;\r\n    }\r\n    Box3D.fromVec3Array = fromVec3Array;\r\n    function computeBounding(data) {\r\n        var min = Vec3.create(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        var max = Vec3.create(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        var x = data.x, y = data.y, z = data.z, indices = data.indices;\r\n        for (var t = 0, _t = OrderedSet.size(indices); t < _t; t++) {\r\n            var i = OrderedSet.getAt(indices, t);\r\n            min[0] = Math.min(x[i], min[0]);\r\n            min[1] = Math.min(y[i], min[1]);\r\n            min[2] = Math.min(z[i], min[2]);\r\n            max[0] = Math.max(x[i], max[0]);\r\n            max[1] = Math.max(y[i], max[1]);\r\n            max[2] = Math.max(z[i], max[2]);\r\n        }\r\n        return { min: min, max: max };\r\n    }\r\n    Box3D.computeBounding = computeBounding;\r\n    /** Get size/extent of the box */\r\n    function size(size, box) {\r\n        return Vec3.sub(size, box.max, box.min);\r\n    }\r\n    Box3D.size = size;\r\n    var tmpSizeV = Vec3();\r\n    /** Get volume of the box */\r\n    function volume(box) {\r\n        size(tmpSizeV, box);\r\n        return tmpSizeV[0] * tmpSizeV[1] * tmpSizeV[2];\r\n    }\r\n    Box3D.volume = volume;\r\n    /** Sets min to Number.MAX_VALUE and max to -Number.MAX_VALUE */\r\n    function setEmpty(box) {\r\n        Vec3.set(box.min, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        Vec3.set(box.max, -Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        return box;\r\n    }\r\n    Box3D.setEmpty = setEmpty;\r\n    /** Add point to box */\r\n    function add(box, point) {\r\n        Vec3.min(box.min, box.min, point);\r\n        Vec3.max(box.max, box.max, point);\r\n        return box;\r\n    }\r\n    Box3D.add = add;\r\n    /** Expand box by delta */\r\n    function expand(out, box, delta) {\r\n        Vec3.sub(out.min, box.min, delta);\r\n        Vec3.add(out.max, box.max, delta);\r\n        return out;\r\n    }\r\n    Box3D.expand = expand;\r\n    function scale(out, box, scale) {\r\n        Vec3.scale(out.min, box.min, scale);\r\n        Vec3.scale(out.max, box.max, scale);\r\n        return out;\r\n    }\r\n    Box3D.scale = scale;\r\n    var tmpTransformV = Vec3();\r\n    /** Transform box with a Mat4 */\r\n    function transform(out, box, m) {\r\n        var _a = box.min, minX = _a[0], minY = _a[1], minZ = _a[2];\r\n        var _b = box.max, maxX = _b[0], maxY = _b[1], maxZ = _b[2];\r\n        setEmpty(out);\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, minY, minZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, minY, maxZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, maxY, minZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, minX, maxY, maxZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, minY, minZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, minY, maxZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, maxY, minZ), m));\r\n        add(out, Vec3.transformMat4(tmpTransformV, Vec3.set(tmpTransformV, maxX, maxY, maxZ), m));\r\n        return out;\r\n    }\r\n    Box3D.transform = transform;\r\n    function containsVec3(box, v) {\r\n        return (v[0] < box.min[0] || v[0] > box.max[0] ||\r\n            v[1] < box.min[1] || v[1] > box.max[1] ||\r\n            v[2] < box.min[2] || v[2] > box.max[2]) ? false : true;\r\n    }\r\n    Box3D.containsVec3 = containsVec3;\r\n})(Box3D || (Box3D = {}));\r\nexport { Box3D };\r\n//# sourceMappingURL=box3d.js.map"]},"metadata":{},"sourceType":"module"}