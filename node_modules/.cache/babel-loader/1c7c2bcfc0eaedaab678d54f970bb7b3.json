{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Iterator } from '../../../../mol-data';\nexport function getFieldDigitCount(field) {\n  if (field.defaultFormat && typeof field.defaultFormat.digitCount !== 'undefined') return Math.max(0, Math.min(field.defaultFormat.digitCount, 16));\n  return 6;\n}\nexport function getIncludedFields(category) {\n  return category.fields.some(function (f) {\n    return !!f.shouldInclude;\n  }) ? category.fields.filter(function (f) {\n    return !f.shouldInclude || category.source.some(function (src) {\n      return f.shouldInclude(src.data);\n    });\n  }) : category.fields;\n}\nexport function getCategoryInstanceData(category, ctx) {\n  var instance = category.instance(ctx);\n  var sources = instance.source.filter(function (s) {\n    return s.rowCount > 0;\n  });\n  if (!sources.length) return {\n    instance: instance,\n    rowCount: 0,\n    source: []\n  };\n  var rowCount = sources.reduce(function (a, c) {\n    return a + c.rowCount;\n  }, 0);\n  var source = sources.map(function (c) {\n    return {\n      data: c.data,\n      keys: function () {\n        return c.keys ? c.keys() : Iterator.Range(0, c.rowCount - 1);\n      },\n      rowCount: c.rowCount\n    };\n  });\n  return {\n    instance: instance,\n    rowCount: rowCount,\n    source: source\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-io/writer/cif/encoder/util.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,QAAT,QAAyB,sBAAzB;AAGA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAAyC;AAC3C,MAAI,KAAK,CAAC,aAAN,IAAuB,OAAO,KAAK,CAAC,aAAN,CAAoB,UAA3B,KAA0C,WAArE,EAAkF,OAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,aAAN,CAAoB,UAA7B,EAAyC,EAAzC,CAAZ,CAAP;AAClF,SAAO,CAAP;AACH;AAED,OAAM,SAAU,iBAAV,CAA4B,QAA5B,EAAuD;AACzD,SAAO,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAqB,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,CAAC,CAAH,aAAA;AAAiB,GAA3C,IACD,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CAAuB,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,CAAC,aAAH,IAAoB,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAqB,UAAA,GAAA,EAAG;AAAI,aAAA,CAAC,CAAC,aAAF,CAAiB,GAAG,CAApB,IAAA,CAAA;AAAhD,KAAoB,CAApB;AAA2E,GAAvG,CADC,GAED,QAAQ,CAAC,MAFf;AAGH;AAQD,OAAM,SAAU,uBAAV,CAAuC,QAAvC,EAAgE,GAAhE,EAAyE;AAC3E,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAT,CAAkB,GAAlB,CAAjB;AACA,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAT,CAAgB,MAAhB,CAAuB,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,QAAF,GAAA,CAAA;AAAc,GAA1C,CAAhB;AACA,MAAI,CAAC,OAAO,CAAC,MAAb,EAAqB,OAAO;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,QAAQ,EAAE,CAAtB;AAAyB,IAAA,MAAM,EAAE;AAAjC,GAAP;AAErB,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAR,CAAe,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAA,CAAC,GAAG,CAAC,CAAL,QAAA;AAAc,GAAvC,EAAyC,CAAzC,CAAjB;AACA,MAAM,MAAM,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,CAAA,EAAC;AAAI,WAAC;AAC7B,MAAA,IAAI,EAAE,CAAC,CAAC,IADqB;AAE7B,MAAA,IAAI,EAAE,YAAA;AAAM,eAAA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAF,EAAT,GAAoB,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAC,QAAF,GAAtC,CAAoB,CAApB;AAAqD,OAFpC;AAG7B,MAAA,QAAQ,EAAE,CAAC,CAAC;AAHiB,KAAD;AAI9B,GAJa,CAAf;AAMA,SAAO;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,QAAQ,EAAA,QAApB;AAAsB,IAAA,MAAM,EAAA;AAA5B,GAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Iterator } from '../../../../mol-data';\r\nexport function getFieldDigitCount(field) {\r\n    if (field.defaultFormat && typeof field.defaultFormat.digitCount !== 'undefined')\r\n        return Math.max(0, Math.min(field.defaultFormat.digitCount, 16));\r\n    return 6;\r\n}\r\nexport function getIncludedFields(category) {\r\n    return category.fields.some(function (f) { return !!f.shouldInclude; })\r\n        ? category.fields.filter(function (f) { return !f.shouldInclude || category.source.some(function (src) { return f.shouldInclude(src.data); }); })\r\n        : category.fields;\r\n}\r\nexport function getCategoryInstanceData(category, ctx) {\r\n    var instance = category.instance(ctx);\r\n    var sources = instance.source.filter(function (s) { return s.rowCount > 0; });\r\n    if (!sources.length)\r\n        return { instance: instance, rowCount: 0, source: [] };\r\n    var rowCount = sources.reduce(function (a, c) { return a + c.rowCount; }, 0);\r\n    var source = sources.map(function (c) { return ({\r\n        data: c.data,\r\n        keys: function () { return c.keys ? c.keys() : Iterator.Range(0, c.rowCount - 1); },\r\n        rowCount: c.rowCount\r\n    }); });\r\n    return { instance: instance, rowCount: rowCount, source: source };\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}