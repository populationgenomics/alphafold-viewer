{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { PolymerBackboneCylinderVisual, PolymerBackboneCylinderParams } from '../visual/polymer-backbone-cylinder';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsRepresentation } from '../units-representation';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { PolymerBackboneSphereParams, PolymerBackboneSphereVisual } from '../visual/polymer-backbone-sphere';\nimport { PolymerGapParams, PolymerGapVisual } from '../visual/polymer-gap-cylinder';\nvar BackboneVisuals = {\n  'polymer-backbone-cylinder': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer backbone cylinder', ctx, getParams, PolymerBackboneCylinderVisual);\n  },\n  'polymer-backbone-sphere': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer backbone sphere', ctx, getParams, PolymerBackboneSphereVisual);\n  },\n  'polymer-gap': function (ctx, getParams) {\n    return UnitsRepresentation('Polymer gap cylinder', ctx, getParams, PolymerGapVisual);\n  }\n};\nexport var BackboneParams = __assign(__assign(__assign(__assign({}, PolymerBackboneSphereParams), PolymerBackboneCylinderParams), PolymerGapParams), {\n  sizeAspectRatio: PD.Numeric(1, {\n    min: 0.1,\n    max: 3,\n    step: 0.1\n  }),\n  visuals: PD.MultiSelect(['polymer-backbone-cylinder', 'polymer-backbone-sphere', 'polymer-gap'], PD.objectToOptions(BackboneVisuals))\n});\nexport function getBackboneParams(ctx, structure) {\n  var params = PD.clone(BackboneParams);\n  var hasGaps = false;\n  structure.units.forEach(function (u) {\n    if (!hasGaps && u.gapElements.length) hasGaps = true;\n  });\n  params.visuals.defaultValue = ['polymer-backbone-cylinder', 'polymer-backbone-sphere'];\n  if (hasGaps) params.visuals.defaultValue.push('polymer-gap');\n  return params;\n}\nexport function BackboneRepresentation(ctx, getParams) {\n  return Representation.createMulti('Backbone', ctx, getParams, StructureRepresentationStateBuilder, BackboneVisuals);\n}\nexport var BackboneRepresentationProvider = StructureRepresentationProvider({\n  name: 'backbone',\n  label: 'Backbone',\n  description: 'Displays polymer backbone with cylinders and spheres.',\n  factory: BackboneRepresentation,\n  getParams: getBackboneParams,\n  defaultValues: PD.getDefaultValues(BackboneParams),\n  defaultColorTheme: {\n    name: 'chain-id'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.polymerResidueCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/backbone.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { PolymerBackboneCylinderVisual, PolymerBackboneCylinderParams } from '../visual/polymer-backbone-cylinder';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { PolymerBackboneSphereParams, PolymerBackboneSphereVisual } from '../visual/polymer-backbone-sphere';\r\nimport { PolymerGapParams, PolymerGapVisual } from '../visual/polymer-gap-cylinder';\r\nvar BackboneVisuals = {\r\n    'polymer-backbone-cylinder': function (ctx, getParams) { return UnitsRepresentation('Polymer backbone cylinder', ctx, getParams, PolymerBackboneCylinderVisual); },\r\n    'polymer-backbone-sphere': function (ctx, getParams) { return UnitsRepresentation('Polymer backbone sphere', ctx, getParams, PolymerBackboneSphereVisual); },\r\n    'polymer-gap': function (ctx, getParams) { return UnitsRepresentation('Polymer gap cylinder', ctx, getParams, PolymerGapVisual); },\r\n};\r\nexport var BackboneParams = __assign(__assign(__assign(__assign({}, PolymerBackboneSphereParams), PolymerBackboneCylinderParams), PolymerGapParams), { sizeAspectRatio: PD.Numeric(1, { min: 0.1, max: 3, step: 0.1 }), visuals: PD.MultiSelect(['polymer-backbone-cylinder', 'polymer-backbone-sphere', 'polymer-gap'], PD.objectToOptions(BackboneVisuals)) });\r\nexport function getBackboneParams(ctx, structure) {\r\n    var params = PD.clone(BackboneParams);\r\n    var hasGaps = false;\r\n    structure.units.forEach(function (u) {\r\n        if (!hasGaps && u.gapElements.length)\r\n            hasGaps = true;\r\n    });\r\n    params.visuals.defaultValue = ['polymer-backbone-cylinder', 'polymer-backbone-sphere'];\r\n    if (hasGaps)\r\n        params.visuals.defaultValue.push('polymer-gap');\r\n    return params;\r\n}\r\nexport function BackboneRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Backbone', ctx, getParams, StructureRepresentationStateBuilder, BackboneVisuals);\r\n}\r\nexport var BackboneRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'backbone',\r\n    label: 'Backbone',\r\n    description: 'Displays polymer backbone with cylinders and spheres.',\r\n    factory: BackboneRepresentation,\r\n    getParams: getBackboneParams,\r\n    defaultValues: PD.getDefaultValues(BackboneParams),\r\n    defaultColorTheme: { name: 'chain-id' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.polymerResidueCount > 0; },\r\n});\r\n//# sourceMappingURL=backbone.js.map"]},"metadata":{},"sourceType":"module"}