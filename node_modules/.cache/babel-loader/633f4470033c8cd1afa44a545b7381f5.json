{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign } from \"tslib\";\nimport { Segmentation, SortedArray } from '../../../../mol-data/int';\nimport { StructureSelection } from '../selection';\nimport { UniqueStructuresBuilder } from '../utils/builders';\nimport { StructureUniqueSubsetBuilder } from '../../structure/util/unique-subset-builder';\nimport { structureIntersect, structureSubtract, structureUnion } from '../utils/structure-set';\nimport { UniqueArray } from '../../../../mol-data/generic';\nimport { StructureElement } from '../../structure/element';\nimport { MmcifFormat } from '../../../../mol-model-formats/structure/mmcif';\nimport { ResidueSet } from '../../model/properties/utils/residue-set';\nimport { StructureProperties } from '../../structure/properties';\nimport { arraySetAdd } from '../../../../mol-util/array';\n\nfunction getWholeResidues(ctx, source, structure) {\n  var builder = source.subsetBuilder(true);\n\n  for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n\n    if (unit.kind !== 0\n    /* Atomic */\n    ) {\n      // just copy non-atomic units.\n      builder.setUnit(unit.id, unit.elements);\n      continue;\n    }\n\n    var residueAtomSegments = unit.model.atomicHierarchy.residueAtomSegments;\n    var sourceElements = source.unitMap.get(unit.id).elements;\n    var elements = unit.elements;\n    builder.beginUnit(unit.id);\n    var residuesIt = Segmentation.transientSegments(residueAtomSegments, elements);\n\n    while (residuesIt.hasNext) {\n      var rI = residuesIt.move().index;\n\n      for (var j = residueAtomSegments.offsets[rI], _j = residueAtomSegments.offsets[rI + 1]; j < _j; j++) {\n        if (SortedArray.has(sourceElements, j)) builder.addElement(j);\n      }\n    }\n\n    builder.commitUnit();\n    ctx.throwIfTimedOut();\n  }\n\n  return builder.getStructure();\n}\n\nexport function wholeResidues(query) {\n  return function query_wholeResidues(ctx) {\n    var inner = query(ctx);\n\n    if (StructureSelection.isSingleton(inner)) {\n      return StructureSelection.Singletons(ctx.inputStructure, getWholeResidues(ctx, ctx.inputStructure, inner.structure));\n    } else {\n      var builder = new UniqueStructuresBuilder(ctx.inputStructure);\n\n      for (var _a = 0, _b = inner.structures; _a < _b.length; _a++) {\n        var s = _b[_a];\n        builder.add(getWholeResidues(ctx, ctx.inputStructure, s));\n      }\n\n      return builder.getSelection();\n    }\n  };\n}\n\nfunction getIncludeSurroundings(ctx, source, structure, params) {\n  var builder = new StructureUniqueSubsetBuilder(source);\n  var lookup = source.lookup3d;\n  var r = params.radius;\n\n  for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n    var _c = unit.conformation,\n        x = _c.x,\n        y = _c.y,\n        z = _c.z;\n    var elements = unit.elements;\n\n    for (var i = 0, _i = elements.length; i < _i; i++) {\n      var e = elements[i];\n      lookup.findIntoBuilder(x(e), y(e), z(e), r, builder);\n    }\n\n    ctx.throwIfTimedOut();\n  }\n\n  return !!params.wholeResidues ? getWholeResidues(ctx, source, builder.getStructure()) : builder.getStructure();\n}\n\nfunction getIncludeSurroundingsWithRadius(ctx, source, structure, params) {\n  var builder = new StructureUniqueSubsetBuilder(source);\n  var lookup = source.lookup3d;\n  var elementRadius = params.elementRadius,\n      elementRadiusClosure = params.elementRadiusClosure,\n      sourceMaxRadius = params.sourceMaxRadius,\n      radius = params.radius;\n  ctx.pushCurrentElement();\n  ctx.element.structure = structure;\n\n  for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n    ctx.element.unit = unit;\n    var _c = unit.conformation,\n        x = _c.x,\n        y = _c.y,\n        z = _c.z;\n    var elements = unit.elements;\n\n    for (var i = 0, _i = elements.length; i < _i; i++) {\n      var e = elements[i];\n      ctx.element.element = e;\n      var eRadius = elementRadius(ctx);\n      lookup.findIntoBuilderWithRadius(x(e), y(e), z(e), eRadius, sourceMaxRadius, radius, elementRadiusClosure, builder);\n    }\n\n    ctx.throwIfTimedOut();\n  }\n\n  ctx.popCurrentElement();\n  return !!params.wholeResidues ? getWholeResidues(ctx, source, builder.getStructure()) : builder.getStructure();\n}\n\nfunction createElementRadiusFn(ctx, eRadius) {\n  return function (e) {\n    ctx.element.structure = e.structure;\n    ctx.element.unit = e.unit;\n    ctx.element.element = e.element;\n    return eRadius(ctx);\n  };\n}\n\nfunction findStructureRadius(ctx, eRadius) {\n  var r = 0;\n  ctx.element.structure = ctx.inputStructure;\n\n  for (var _a = 0, _b = ctx.inputStructure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n    ctx.element.unit = unit;\n    var elements = unit.elements;\n\n    for (var i = 0, _i = elements.length; i < _i; i++) {\n      var e = elements[i];\n      ctx.element.element = e;\n      var eR = eRadius(ctx);\n      if (eR > r) r = eR;\n    }\n  }\n\n  ctx.throwIfTimedOut();\n  return r;\n}\n\nexport function includeSurroundings(query, params) {\n  return function query_includeSurroundings(ctx) {\n    var inner = query(ctx);\n\n    if (params.elementRadius) {\n      var prms = __assign(__assign({}, params), {\n        elementRadius: params.elementRadius,\n        elementRadiusClosure: createElementRadiusFn(ctx, params.elementRadius),\n        sourceMaxRadius: findStructureRadius(ctx, params.elementRadius)\n      });\n\n      if (StructureSelection.isSingleton(inner)) {\n        var surr = getIncludeSurroundingsWithRadius(ctx, ctx.inputStructure, inner.structure, prms);\n        var ret = StructureSelection.Singletons(ctx.inputStructure, surr);\n        return ret;\n      } else {\n        var builder = new UniqueStructuresBuilder(ctx.inputStructure);\n\n        for (var _a = 0, _b = inner.structures; _a < _b.length; _a++) {\n          var s = _b[_a];\n          builder.add(getIncludeSurroundingsWithRadius(ctx, ctx.inputStructure, s, prms));\n        }\n\n        return builder.getSelection();\n      }\n    }\n\n    if (StructureSelection.isSingleton(inner)) {\n      var surr = getIncludeSurroundings(ctx, ctx.inputStructure, inner.structure, params);\n      var ret = StructureSelection.Singletons(ctx.inputStructure, surr);\n      return ret;\n    } else {\n      var builder = new UniqueStructuresBuilder(ctx.inputStructure);\n\n      for (var _c = 0, _d = inner.structures; _c < _d.length; _c++) {\n        var s = _d[_c];\n        builder.add(getIncludeSurroundings(ctx, ctx.inputStructure, s, params));\n      }\n\n      return builder.getSelection();\n    }\n  };\n}\nexport function querySelection(selection, query) {\n  return function query_querySelection(ctx) {\n    var targetSel = selection(ctx);\n    if (StructureSelection.structureCount(targetSel) === 0) return targetSel;\n    var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\n\n    var add = function (s) {\n      return ret.add(s);\n    };\n\n    StructureSelection.forEach(targetSel, function (s, sI) {\n      ctx.pushInputStructure(s);\n      StructureSelection.forEach(query(ctx), add);\n      ctx.popInputStructure();\n      if (sI % 10 === 0) ctx.throwIfTimedOut();\n    });\n    return ret.getSelection();\n  };\n}\nexport function intersectBy(query, by) {\n  return function query_intersectBy(ctx) {\n    var selection = query(ctx);\n    if (StructureSelection.structureCount(selection) === 0) return selection;\n    var bySel = by(ctx);\n    if (StructureSelection.structureCount(bySel) === 0) return StructureSelection.Empty(ctx.inputStructure);\n    var unionBy = StructureSelection.unionStructure(bySel);\n    var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\n    StructureSelection.forEach(selection, function (s, sI) {\n      var ii = structureIntersect(unionBy, s);\n      if (ii.elementCount !== 0) ret.add(ii);\n      if (sI % 50 === 0) ctx.throwIfTimedOut();\n    });\n    return ret.getSelection();\n  };\n}\nexport function exceptBy(query, by) {\n  return function query_exceptBy(ctx) {\n    var selection = query(ctx);\n    if (StructureSelection.structureCount(selection) === 0) return selection;\n    var bySel = by(ctx);\n    if (StructureSelection.structureCount(bySel) === 0) return selection;\n    var subtractBy = StructureSelection.unionStructure(bySel);\n    var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\n    StructureSelection.forEach(selection, function (s, sI) {\n      var diff = structureSubtract(s, subtractBy);\n      if (diff.elementCount !== 0) ret.add(diff);\n      if (sI % 50 === 0) ctx.throwIfTimedOut();\n    });\n    return ret.getSelection();\n  };\n}\nexport function union(query) {\n  return function query_union(ctx) {\n    var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\n    ret.add(StructureSelection.unionStructure(query(ctx)));\n    return ret.getSelection();\n  };\n}\nexport function expandProperty(query, property) {\n  return function query_expandProperty(ctx) {\n    var src = query(ctx);\n    var propertyToStructureIndexMap = new Map();\n    var builders = [];\n    ctx.pushCurrentElement();\n    StructureSelection.forEach(src, function (s, sI) {\n      ctx.element.structure = s;\n\n      for (var _a = 0, _b = s.units; _a < _b.length; _a++) {\n        var unit = _b[_a];\n        ctx.element.unit = unit;\n        var elements = unit.elements;\n\n        for (var i = 0, _i = elements.length; i < _i; i++) {\n          ctx.element.element = elements[i];\n          var p = property(ctx);\n          var arr = void 0;\n          if (propertyToStructureIndexMap.has(p)) arr = propertyToStructureIndexMap.get(p);else {\n            arr = UniqueArray.create();\n            propertyToStructureIndexMap.set(p, arr);\n          }\n          UniqueArray.add(arr, sI, sI);\n        }\n      }\n\n      builders[sI] = ctx.inputStructure.subsetBuilder(true);\n      if (sI % 10 === 0) ctx.throwIfTimedOut();\n    });\n    ctx.element.structure = ctx.inputStructure;\n\n    for (var _a = 0, _b = ctx.inputStructure.units; _a < _b.length; _a++) {\n      var unit = _b[_a];\n      ctx.element.unit = unit;\n      var elements = unit.elements;\n\n      for (var i = 0, _i = elements.length; i < _i; i++) {\n        ctx.element.element = elements[i];\n        var p = property(ctx);\n        if (!propertyToStructureIndexMap.has(p)) continue;\n        var indices = propertyToStructureIndexMap.get(p).array;\n\n        for (var _sI = 0, __sI = indices.length; _sI < __sI; _sI++) {\n          builders[indices[_sI]].addToUnit(unit.id, elements[i]);\n        }\n      }\n    }\n\n    ctx.popCurrentElement();\n    var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\n\n    for (var _c = 0, builders_1 = builders; _c < builders_1.length; _c++) {\n      var b = builders_1[_c];\n      ret.add(b.getStructure());\n    }\n\n    return ret.getSelection();\n  };\n}\nexport function includeConnected(_a) {\n  var query = _a.query,\n      layerCount = _a.layerCount,\n      wholeResidues = _a.wholeResidues,\n      bondTest = _a.bondTest,\n      fixedPoint = _a.fixedPoint;\n  var lc = Math.max(layerCount, 0);\n  return function query_includeConnected(ctx) {\n    var builder = StructureSelection.UniqueBuilder(ctx.inputStructure);\n    var src = query(ctx);\n    ctx.pushCurrentBond();\n    ctx.atomicBond.setTestFn(bondTest);\n    StructureSelection.forEach(src, function (s, sI) {\n      var incl = s;\n\n      if (fixedPoint) {\n        while (true) {\n          var prevCount = incl.elementCount;\n          incl = includeConnectedStep(ctx, wholeResidues, incl);\n          if (incl.elementCount === prevCount) break;\n        }\n      } else {\n        for (var i = 0; i < lc; i++) {\n          incl = includeConnectedStep(ctx, wholeResidues, incl);\n        }\n      }\n\n      builder.add(incl);\n      if (sI % 10 === 0) ctx.throwIfTimedOut();\n    });\n    ctx.popCurrentBond();\n    return builder.getSelection();\n  };\n}\n\nfunction includeConnectedStep(ctx, wholeResidues, structure) {\n  var expanded = expandConnected(ctx, structure);\n  if (wholeResidues) return getWholeResidues(ctx, ctx.inputStructure, expanded);\n  return expanded;\n}\n\nfunction expandConnected(ctx, structure) {\n  var inputStructure = ctx.inputStructure;\n  var interBonds = inputStructure.interUnitBonds;\n  var builder = new StructureUniqueSubsetBuilder(inputStructure);\n  var atomicBond = ctx.atomicBond; // Process intra unit bonds\n\n  for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\n    var unit = _b[_a];\n\n    if (unit.kind !== 0\n    /* Atomic */\n    ) {\n      // add the whole unit\n      builder.beginUnit(unit.id);\n\n      for (var i = 0, _i = unit.elements.length; i < _i; i++) {\n        builder.addElement(unit.elements[i]);\n      }\n\n      builder.commitUnit();\n      continue;\n    }\n\n    var inputUnitA = inputStructure.unitMap.get(unit.id);\n    var _c = inputUnitA.bonds,\n        intraBondOffset = _c.offset,\n        intraBondB = _c.b,\n        _d = _c.edgeProps,\n        flags = _d.flags,\n        order = _d.order;\n    atomicBond.setStructure(inputStructure); // Process intra unit bonds\n\n    atomicBond.a.unit = inputUnitA;\n    atomicBond.b.unit = inputUnitA;\n\n    for (var i = 0, _i = unit.elements.length; i < _i; i++) {\n      // add the current element\n      builder.addToUnit(unit.id, unit.elements[i]);\n      var aIndex = SortedArray.indexOf(inputUnitA.elements, unit.elements[i]); // check intra unit bonds\n\n      for (var lI = intraBondOffset[aIndex], _lI = intraBondOffset[aIndex + 1]; lI < _lI; lI++) {\n        var bIndex = intraBondB[lI];\n        var bElement = inputUnitA.elements[bIndex]; // Check if the element is already present:\n\n        if (SortedArray.has(unit.elements, bElement) || builder.has(unit.id, bElement)) continue;\n        atomicBond.aIndex = aIndex;\n        atomicBond.a.element = unit.elements[i];\n        atomicBond.bIndex = bIndex;\n        atomicBond.b.element = bElement;\n        atomicBond.type = flags[lI];\n        atomicBond.order = order[lI];\n\n        if (atomicBond.test(ctx, true)) {\n          builder.addToUnit(unit.id, bElement);\n        }\n      }\n    } // Process inter unit bonds\n\n\n    for (var _e = 0, _f = interBonds.getConnectedUnits(inputUnitA.id); _e < _f.length; _e++) {\n      var bondedUnit = _f[_e];\n      var currentUnitB = structure.unitMap.get(bondedUnit.unitB);\n      var inputUnitB = inputStructure.unitMap.get(bondedUnit.unitB);\n\n      for (var _g = 0, _h = bondedUnit.connectedIndices; _g < _h.length; _g++) {\n        var aI = _h[_g]; // check if the element is in the expanded structure\n\n        if (!SortedArray.has(unit.elements, inputUnitA.elements[aI])) continue;\n\n        for (var _k = 0, _l = bondedUnit.getEdges(aI); _k < _l.length; _k++) {\n          var bond = _l[_k];\n          var bElement = inputUnitB.elements[bond.indexB]; // Check if the element is already present:\n\n          if (currentUnitB && SortedArray.has(currentUnitB.elements, bElement) || builder.has(bondedUnit.unitB, bElement)) continue;\n          atomicBond.a.unit = inputUnitA;\n          atomicBond.aIndex = aI;\n          atomicBond.a.element = inputUnitA.elements[aI];\n          atomicBond.b.unit = inputUnitB;\n          atomicBond.bIndex = bond.indexB;\n          atomicBond.b.element = bElement;\n          atomicBond.type = bond.props.flag;\n          atomicBond.order = bond.props.order;\n\n          if (atomicBond.test(ctx, true)) {\n            builder.addToUnit(bondedUnit.unitB, bElement);\n          }\n        }\n      }\n    }\n  }\n\n  return builder.getStructure();\n}\n/**\r\n * Includes expanded surrounding ligands based on radius from the source, struct_conn entries & pdbx_molecule entries.\r\n */\n\n\nexport function surroundingLigands(_a) {\n  var query = _a.query,\n      radius = _a.radius,\n      includeWater = _a.includeWater;\n  return function query_surroundingLigands(ctx) {\n    var inner = StructureSelection.unionStructure(query(ctx));\n    var surroundings = getWholeResidues(ctx, ctx.inputStructure, getIncludeSurroundings(ctx, ctx.inputStructure, inner, {\n      radius: radius\n    }));\n    var prd = getPrdAsymIdx(ctx.inputStructure);\n    var graph = getStructConnInfo(ctx.inputStructure);\n    var l = StructureElement.Location.create(surroundings);\n    var includedPrdChains = new Map();\n    var componentResidues = new ResidueSet({\n      checkOperator: true\n    });\n\n    for (var _a = 0, _b = surroundings.units; _a < _b.length; _a++) {\n      var unit = _b[_a];\n      if (unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\n      var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\n\n      while (chainsIt.hasNext) {\n        var chainSegment = chainsIt.move();\n        l.element = elements[chainSegment.start];\n        var asym_id = StructureProperties.chain.label_asym_id(l);\n        var op_name = StructureProperties.unit.operator_name(l); // check for PRD molecules\n\n        if (prd.has(asym_id)) {\n          if (includedPrdChains.has(asym_id)) {\n            arraySetAdd(includedPrdChains.get(asym_id), op_name);\n          } else {\n            includedPrdChains.set(asym_id, [op_name]);\n          }\n\n          continue;\n        }\n\n        var entityType = StructureProperties.entity.type(l); // test entity and chain\n\n        if (entityType === 'water' || entityType === 'polymer') continue;\n        residuesIt.setSegment(chainSegment);\n\n        while (residuesIt.hasNext) {\n          var residueSegment = residuesIt.move();\n          l.element = elements[residueSegment.start];\n          graph.addComponent(ResidueSet.getEntryFromLocation(l), componentResidues);\n        }\n      }\n\n      ctx.throwIfTimedOut();\n    } // assemble the core structure\n\n\n    var builder = ctx.inputStructure.subsetBuilder(true);\n\n    for (var _c = 0, _d = ctx.inputStructure.units; _c < _d.length; _c++) {\n      var unit = _d[_c];\n      if (unit.kind !== 0\n      /* Atomic */\n      ) continue;\n      l.unit = unit;\n      var elements = unit.elements;\n      var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\n      var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\n      builder.beginUnit(unit.id);\n\n      while (chainsIt.hasNext) {\n        var chainSegment = chainsIt.move();\n        l.element = elements[chainSegment.start];\n        var asym_id = StructureProperties.chain.label_asym_id(l);\n        var op_name = StructureProperties.unit.operator_name(l);\n\n        if (includedPrdChains.has(asym_id) && includedPrdChains.get(asym_id).indexOf(op_name) >= 0) {\n          builder.addElementRange(elements, chainSegment.start, chainSegment.end);\n          continue;\n        }\n\n        if (!componentResidues.hasLabelAsymId(asym_id)) {\n          continue;\n        }\n\n        residuesIt.setSegment(chainSegment);\n\n        while (residuesIt.hasNext) {\n          var residueSegment = residuesIt.move();\n          l.element = elements[residueSegment.start];\n          if (!componentResidues.has(l)) continue;\n          builder.addElementRange(elements, residueSegment.start, residueSegment.end);\n        }\n      }\n\n      builder.commitUnit();\n      ctx.throwIfTimedOut();\n    }\n\n    var components = structureUnion(ctx.inputStructure, [builder.getStructure(), inner]); // add water\n\n    if (includeWater) {\n      var finalBuilder = new StructureUniqueSubsetBuilder(ctx.inputStructure);\n      var lookup = ctx.inputStructure.lookup3d;\n\n      for (var _e = 0, _f = components.units; _e < _f.length; _e++) {\n        var unit = _f[_e];\n        var _g = unit.conformation,\n            x = _g.x,\n            y = _g.y,\n            z = _g.z;\n        var elements = unit.elements;\n\n        for (var i = 0, _i = elements.length; i < _i; i++) {\n          var e = elements[i];\n          lookup.findIntoBuilderIf(x(e), y(e), z(e), radius, finalBuilder, testIsWater);\n          finalBuilder.addToUnit(unit.id, e);\n        }\n\n        ctx.throwIfTimedOut();\n      }\n\n      return StructureSelection.Sequence(ctx.inputStructure, [finalBuilder.getStructure()]);\n    } else {\n      return StructureSelection.Sequence(ctx.inputStructure, [components]);\n    }\n  };\n}\nvar _entity_type = StructureProperties.entity.type;\n\nfunction testIsWater(l) {\n  return _entity_type(l) === 'water';\n}\n\nfunction getPrdAsymIdx(structure) {\n  var model = structure.models[0];\n  var ids = new Set();\n  if (!MmcifFormat.is(model.sourceData)) return ids;\n  var _a = model.sourceData.data.db.pdbx_molecule,\n      _rowCount = _a._rowCount,\n      asym_id = _a.asym_id;\n\n  for (var i = 0; i < _rowCount; i++) {\n    ids.add(asym_id.value(i));\n  }\n\n  return ids;\n}\n\nfunction getStructConnInfo(structure) {\n  var _a, _b;\n\n  var model = structure.models[0];\n  var graph = new StructConnGraph();\n  if (!MmcifFormat.is(model.sourceData)) return graph;\n  var struct_conn = model.sourceData.data.db.struct_conn;\n  var conn_type_id = struct_conn.conn_type_id;\n  var ptnr1_label_asym_id = struct_conn.ptnr1_label_asym_id,\n      ptnr1_label_comp_id = struct_conn.ptnr1_label_comp_id,\n      ptnr1_label_seq_id = struct_conn.ptnr1_label_seq_id,\n      ptnr1_symmetry = struct_conn.ptnr1_symmetry,\n      pdbx_ptnr1_label_alt_id = struct_conn.pdbx_ptnr1_label_alt_id,\n      pdbx_ptnr1_PDB_ins_code = struct_conn.pdbx_ptnr1_PDB_ins_code;\n  var ptnr2_label_asym_id = struct_conn.ptnr2_label_asym_id,\n      ptnr2_label_comp_id = struct_conn.ptnr2_label_comp_id,\n      ptnr2_label_seq_id = struct_conn.ptnr2_label_seq_id,\n      ptnr2_symmetry = struct_conn.ptnr2_symmetry,\n      pdbx_ptnr2_label_alt_id = struct_conn.pdbx_ptnr2_label_alt_id,\n      pdbx_ptnr2_PDB_ins_code = struct_conn.pdbx_ptnr2_PDB_ins_code;\n\n  for (var i = 0; i < struct_conn._rowCount; i++) {\n    var bondType = conn_type_id.value(i);\n    if (bondType !== 'covale' && bondType !== 'metalc') continue;\n    var a = {\n      label_asym_id: ptnr1_label_asym_id.value(i),\n      label_comp_id: ptnr1_label_comp_id.value(i),\n      label_seq_id: ptnr1_label_seq_id.value(i),\n      label_alt_id: pdbx_ptnr1_label_alt_id.value(i),\n      ins_code: pdbx_ptnr1_PDB_ins_code.value(i),\n      operator_name: (_a = ptnr1_symmetry.value(i)) !== null && _a !== void 0 ? _a : '1_555'\n    };\n    var b = {\n      label_asym_id: ptnr2_label_asym_id.value(i),\n      label_comp_id: ptnr2_label_comp_id.value(i),\n      label_seq_id: ptnr2_label_seq_id.value(i),\n      label_alt_id: pdbx_ptnr2_label_alt_id.value(i),\n      ins_code: pdbx_ptnr2_PDB_ins_code.value(i),\n      operator_name: (_b = ptnr2_symmetry.value(i)) !== null && _b !== void 0 ? _b : '1_555'\n    };\n    graph.addEdge(a, b);\n  }\n\n  return graph;\n}\n\nvar StructConnGraph =\n/** @class */\nfunction () {\n  function StructConnGraph() {\n    this.vertices = new Map();\n    this.edges = new Map();\n  }\n\n  StructConnGraph.prototype.addVertex = function (e, label) {\n    if (this.vertices.has(label)) return;\n    this.vertices.set(label, e);\n    this.edges.set(label, []);\n  };\n\n  StructConnGraph.prototype.addEdge = function (a, b) {\n    var al = ResidueSet.getLabel(a);\n    var bl = ResidueSet.getLabel(b);\n    this.addVertex(a, al);\n    this.addVertex(b, bl);\n    arraySetAdd(this.edges.get(al), bl);\n    arraySetAdd(this.edges.get(bl), al);\n  };\n\n  StructConnGraph.prototype.addComponent = function (start, set) {\n    var startLabel = ResidueSet.getLabel(start);\n\n    if (!this.vertices.has(startLabel)) {\n      set.add(start);\n      return;\n    }\n\n    var visited = new Set();\n    var added = new Set();\n    var stack = [startLabel];\n    added.add(startLabel);\n    set.add(start);\n\n    while (stack.length > 0) {\n      var a = stack.pop();\n      visited.add(a);\n      var u = this.vertices.get(a);\n\n      for (var _a = 0, _b = this.edges.get(a); _a < _b.length; _a++) {\n        var b = _b[_a];\n        if (visited.has(b)) continue;\n        stack.push(b);\n        if (added.has(b)) continue;\n        added.add(b);\n        var v = this.vertices.get(b);\n\n        if (u.operator_name === v.operator_name) {\n          set.add(__assign(__assign({}, v), {\n            operator_name: start.operator_name\n          }));\n        } else {\n          set.add(v);\n        }\n      }\n    }\n  };\n\n  return StructConnGraph;\n}(); // TODO: unionBy (skip this one?), cluster","map":{"version":3,"sources":["../../../../../src/mol-model/structure/query/queries/modifiers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Segmentation, SortedArray } from '../../../../mol-data/int';\r\nimport { StructureSelection } from '../selection';\r\nimport { UniqueStructuresBuilder } from '../utils/builders';\r\nimport { StructureUniqueSubsetBuilder } from '../../structure/util/unique-subset-builder';\r\nimport { structureIntersect, structureSubtract, structureUnion } from '../utils/structure-set';\r\nimport { UniqueArray } from '../../../../mol-data/generic';\r\nimport { StructureElement } from '../../structure/element';\r\nimport { MmcifFormat } from '../../../../mol-model-formats/structure/mmcif';\r\nimport { ResidueSet } from '../../model/properties/utils/residue-set';\r\nimport { StructureProperties } from '../../structure/properties';\r\nimport { arraySetAdd } from '../../../../mol-util/array';\r\nfunction getWholeResidues(ctx, source, structure) {\r\n    var builder = source.subsetBuilder(true);\r\n    for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        if (unit.kind !== 0 /* Atomic */) {\r\n            // just copy non-atomic units.\r\n            builder.setUnit(unit.id, unit.elements);\r\n            continue;\r\n        }\r\n        var residueAtomSegments = unit.model.atomicHierarchy.residueAtomSegments;\r\n        var sourceElements = source.unitMap.get(unit.id).elements;\r\n        var elements = unit.elements;\r\n        builder.beginUnit(unit.id);\r\n        var residuesIt = Segmentation.transientSegments(residueAtomSegments, elements);\r\n        while (residuesIt.hasNext) {\r\n            var rI = residuesIt.move().index;\r\n            for (var j = residueAtomSegments.offsets[rI], _j = residueAtomSegments.offsets[rI + 1]; j < _j; j++) {\r\n                if (SortedArray.has(sourceElements, j))\r\n                    builder.addElement(j);\r\n            }\r\n        }\r\n        builder.commitUnit();\r\n        ctx.throwIfTimedOut();\r\n    }\r\n    return builder.getStructure();\r\n}\r\nexport function wholeResidues(query) {\r\n    return function query_wholeResidues(ctx) {\r\n        var inner = query(ctx);\r\n        if (StructureSelection.isSingleton(inner)) {\r\n            return StructureSelection.Singletons(ctx.inputStructure, getWholeResidues(ctx, ctx.inputStructure, inner.structure));\r\n        }\r\n        else {\r\n            var builder = new UniqueStructuresBuilder(ctx.inputStructure);\r\n            for (var _a = 0, _b = inner.structures; _a < _b.length; _a++) {\r\n                var s = _b[_a];\r\n                builder.add(getWholeResidues(ctx, ctx.inputStructure, s));\r\n            }\r\n            return builder.getSelection();\r\n        }\r\n    };\r\n}\r\nfunction getIncludeSurroundings(ctx, source, structure, params) {\r\n    var builder = new StructureUniqueSubsetBuilder(source);\r\n    var lookup = source.lookup3d;\r\n    var r = params.radius;\r\n    for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        var _c = unit.conformation, x = _c.x, y = _c.y, z = _c.z;\r\n        var elements = unit.elements;\r\n        for (var i = 0, _i = elements.length; i < _i; i++) {\r\n            var e = elements[i];\r\n            lookup.findIntoBuilder(x(e), y(e), z(e), r, builder);\r\n        }\r\n        ctx.throwIfTimedOut();\r\n    }\r\n    return !!params.wholeResidues ? getWholeResidues(ctx, source, builder.getStructure()) : builder.getStructure();\r\n}\r\nfunction getIncludeSurroundingsWithRadius(ctx, source, structure, params) {\r\n    var builder = new StructureUniqueSubsetBuilder(source);\r\n    var lookup = source.lookup3d;\r\n    var elementRadius = params.elementRadius, elementRadiusClosure = params.elementRadiusClosure, sourceMaxRadius = params.sourceMaxRadius, radius = params.radius;\r\n    ctx.pushCurrentElement();\r\n    ctx.element.structure = structure;\r\n    for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        ctx.element.unit = unit;\r\n        var _c = unit.conformation, x = _c.x, y = _c.y, z = _c.z;\r\n        var elements = unit.elements;\r\n        for (var i = 0, _i = elements.length; i < _i; i++) {\r\n            var e = elements[i];\r\n            ctx.element.element = e;\r\n            var eRadius = elementRadius(ctx);\r\n            lookup.findIntoBuilderWithRadius(x(e), y(e), z(e), eRadius, sourceMaxRadius, radius, elementRadiusClosure, builder);\r\n        }\r\n        ctx.throwIfTimedOut();\r\n    }\r\n    ctx.popCurrentElement();\r\n    return !!params.wholeResidues ? getWholeResidues(ctx, source, builder.getStructure()) : builder.getStructure();\r\n}\r\nfunction createElementRadiusFn(ctx, eRadius) {\r\n    return function (e) {\r\n        ctx.element.structure = e.structure;\r\n        ctx.element.unit = e.unit;\r\n        ctx.element.element = e.element;\r\n        return eRadius(ctx);\r\n    };\r\n}\r\nfunction findStructureRadius(ctx, eRadius) {\r\n    var r = 0;\r\n    ctx.element.structure = ctx.inputStructure;\r\n    for (var _a = 0, _b = ctx.inputStructure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        ctx.element.unit = unit;\r\n        var elements = unit.elements;\r\n        for (var i = 0, _i = elements.length; i < _i; i++) {\r\n            var e = elements[i];\r\n            ctx.element.element = e;\r\n            var eR = eRadius(ctx);\r\n            if (eR > r)\r\n                r = eR;\r\n        }\r\n    }\r\n    ctx.throwIfTimedOut();\r\n    return r;\r\n}\r\nexport function includeSurroundings(query, params) {\r\n    return function query_includeSurroundings(ctx) {\r\n        var inner = query(ctx);\r\n        if (params.elementRadius) {\r\n            var prms = __assign(__assign({}, params), { elementRadius: params.elementRadius, elementRadiusClosure: createElementRadiusFn(ctx, params.elementRadius), sourceMaxRadius: findStructureRadius(ctx, params.elementRadius) });\r\n            if (StructureSelection.isSingleton(inner)) {\r\n                var surr = getIncludeSurroundingsWithRadius(ctx, ctx.inputStructure, inner.structure, prms);\r\n                var ret = StructureSelection.Singletons(ctx.inputStructure, surr);\r\n                return ret;\r\n            }\r\n            else {\r\n                var builder = new UniqueStructuresBuilder(ctx.inputStructure);\r\n                for (var _a = 0, _b = inner.structures; _a < _b.length; _a++) {\r\n                    var s = _b[_a];\r\n                    builder.add(getIncludeSurroundingsWithRadius(ctx, ctx.inputStructure, s, prms));\r\n                }\r\n                return builder.getSelection();\r\n            }\r\n        }\r\n        if (StructureSelection.isSingleton(inner)) {\r\n            var surr = getIncludeSurroundings(ctx, ctx.inputStructure, inner.structure, params);\r\n            var ret = StructureSelection.Singletons(ctx.inputStructure, surr);\r\n            return ret;\r\n        }\r\n        else {\r\n            var builder = new UniqueStructuresBuilder(ctx.inputStructure);\r\n            for (var _c = 0, _d = inner.structures; _c < _d.length; _c++) {\r\n                var s = _d[_c];\r\n                builder.add(getIncludeSurroundings(ctx, ctx.inputStructure, s, params));\r\n            }\r\n            return builder.getSelection();\r\n        }\r\n    };\r\n}\r\nexport function querySelection(selection, query) {\r\n    return function query_querySelection(ctx) {\r\n        var targetSel = selection(ctx);\r\n        if (StructureSelection.structureCount(targetSel) === 0)\r\n            return targetSel;\r\n        var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\r\n        var add = function (s) { return ret.add(s); };\r\n        StructureSelection.forEach(targetSel, function (s, sI) {\r\n            ctx.pushInputStructure(s);\r\n            StructureSelection.forEach(query(ctx), add);\r\n            ctx.popInputStructure();\r\n            if (sI % 10 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function intersectBy(query, by) {\r\n    return function query_intersectBy(ctx) {\r\n        var selection = query(ctx);\r\n        if (StructureSelection.structureCount(selection) === 0)\r\n            return selection;\r\n        var bySel = by(ctx);\r\n        if (StructureSelection.structureCount(bySel) === 0)\r\n            return StructureSelection.Empty(ctx.inputStructure);\r\n        var unionBy = StructureSelection.unionStructure(bySel);\r\n        var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\r\n        StructureSelection.forEach(selection, function (s, sI) {\r\n            var ii = structureIntersect(unionBy, s);\r\n            if (ii.elementCount !== 0)\r\n                ret.add(ii);\r\n            if (sI % 50 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function exceptBy(query, by) {\r\n    return function query_exceptBy(ctx) {\r\n        var selection = query(ctx);\r\n        if (StructureSelection.structureCount(selection) === 0)\r\n            return selection;\r\n        var bySel = by(ctx);\r\n        if (StructureSelection.structureCount(bySel) === 0)\r\n            return selection;\r\n        var subtractBy = StructureSelection.unionStructure(bySel);\r\n        var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\r\n        StructureSelection.forEach(selection, function (s, sI) {\r\n            var diff = structureSubtract(s, subtractBy);\r\n            if (diff.elementCount !== 0)\r\n                ret.add(diff);\r\n            if (sI % 50 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function union(query) {\r\n    return function query_union(ctx) {\r\n        var ret = StructureSelection.LinearBuilder(ctx.inputStructure);\r\n        ret.add(StructureSelection.unionStructure(query(ctx)));\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function expandProperty(query, property) {\r\n    return function query_expandProperty(ctx) {\r\n        var src = query(ctx);\r\n        var propertyToStructureIndexMap = new Map();\r\n        var builders = [];\r\n        ctx.pushCurrentElement();\r\n        StructureSelection.forEach(src, function (s, sI) {\r\n            ctx.element.structure = s;\r\n            for (var _a = 0, _b = s.units; _a < _b.length; _a++) {\r\n                var unit = _b[_a];\r\n                ctx.element.unit = unit;\r\n                var elements = unit.elements;\r\n                for (var i = 0, _i = elements.length; i < _i; i++) {\r\n                    ctx.element.element = elements[i];\r\n                    var p = property(ctx);\r\n                    var arr = void 0;\r\n                    if (propertyToStructureIndexMap.has(p))\r\n                        arr = propertyToStructureIndexMap.get(p);\r\n                    else {\r\n                        arr = UniqueArray.create();\r\n                        propertyToStructureIndexMap.set(p, arr);\r\n                    }\r\n                    UniqueArray.add(arr, sI, sI);\r\n                }\r\n            }\r\n            builders[sI] = ctx.inputStructure.subsetBuilder(true);\r\n            if (sI % 10 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        ctx.element.structure = ctx.inputStructure;\r\n        for (var _a = 0, _b = ctx.inputStructure.units; _a < _b.length; _a++) {\r\n            var unit = _b[_a];\r\n            ctx.element.unit = unit;\r\n            var elements = unit.elements;\r\n            for (var i = 0, _i = elements.length; i < _i; i++) {\r\n                ctx.element.element = elements[i];\r\n                var p = property(ctx);\r\n                if (!propertyToStructureIndexMap.has(p))\r\n                    continue;\r\n                var indices = propertyToStructureIndexMap.get(p).array;\r\n                for (var _sI = 0, __sI = indices.length; _sI < __sI; _sI++) {\r\n                    builders[indices[_sI]].addToUnit(unit.id, elements[i]);\r\n                }\r\n            }\r\n        }\r\n        ctx.popCurrentElement();\r\n        var ret = StructureSelection.UniqueBuilder(ctx.inputStructure);\r\n        for (var _c = 0, builders_1 = builders; _c < builders_1.length; _c++) {\r\n            var b = builders_1[_c];\r\n            ret.add(b.getStructure());\r\n        }\r\n        return ret.getSelection();\r\n    };\r\n}\r\nexport function includeConnected(_a) {\r\n    var query = _a.query, layerCount = _a.layerCount, wholeResidues = _a.wholeResidues, bondTest = _a.bondTest, fixedPoint = _a.fixedPoint;\r\n    var lc = Math.max(layerCount, 0);\r\n    return function query_includeConnected(ctx) {\r\n        var builder = StructureSelection.UniqueBuilder(ctx.inputStructure);\r\n        var src = query(ctx);\r\n        ctx.pushCurrentBond();\r\n        ctx.atomicBond.setTestFn(bondTest);\r\n        StructureSelection.forEach(src, function (s, sI) {\r\n            var incl = s;\r\n            if (fixedPoint) {\r\n                while (true) {\r\n                    var prevCount = incl.elementCount;\r\n                    incl = includeConnectedStep(ctx, wholeResidues, incl);\r\n                    if (incl.elementCount === prevCount)\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < lc; i++) {\r\n                    incl = includeConnectedStep(ctx, wholeResidues, incl);\r\n                }\r\n            }\r\n            builder.add(incl);\r\n            if (sI % 10 === 0)\r\n                ctx.throwIfTimedOut();\r\n        });\r\n        ctx.popCurrentBond();\r\n        return builder.getSelection();\r\n    };\r\n}\r\nfunction includeConnectedStep(ctx, wholeResidues, structure) {\r\n    var expanded = expandConnected(ctx, structure);\r\n    if (wholeResidues)\r\n        return getWholeResidues(ctx, ctx.inputStructure, expanded);\r\n    return expanded;\r\n}\r\nfunction expandConnected(ctx, structure) {\r\n    var inputStructure = ctx.inputStructure;\r\n    var interBonds = inputStructure.interUnitBonds;\r\n    var builder = new StructureUniqueSubsetBuilder(inputStructure);\r\n    var atomicBond = ctx.atomicBond;\r\n    // Process intra unit bonds\r\n    for (var _a = 0, _b = structure.units; _a < _b.length; _a++) {\r\n        var unit = _b[_a];\r\n        if (unit.kind !== 0 /* Atomic */) {\r\n            // add the whole unit\r\n            builder.beginUnit(unit.id);\r\n            for (var i = 0, _i = unit.elements.length; i < _i; i++) {\r\n                builder.addElement(unit.elements[i]);\r\n            }\r\n            builder.commitUnit();\r\n            continue;\r\n        }\r\n        var inputUnitA = inputStructure.unitMap.get(unit.id);\r\n        var _c = inputUnitA.bonds, intraBondOffset = _c.offset, intraBondB = _c.b, _d = _c.edgeProps, flags = _d.flags, order = _d.order;\r\n        atomicBond.setStructure(inputStructure);\r\n        // Process intra unit bonds\r\n        atomicBond.a.unit = inputUnitA;\r\n        atomicBond.b.unit = inputUnitA;\r\n        for (var i = 0, _i = unit.elements.length; i < _i; i++) {\r\n            // add the current element\r\n            builder.addToUnit(unit.id, unit.elements[i]);\r\n            var aIndex = SortedArray.indexOf(inputUnitA.elements, unit.elements[i]);\r\n            // check intra unit bonds\r\n            for (var lI = intraBondOffset[aIndex], _lI = intraBondOffset[aIndex + 1]; lI < _lI; lI++) {\r\n                var bIndex = intraBondB[lI];\r\n                var bElement = inputUnitA.elements[bIndex];\r\n                // Check if the element is already present:\r\n                if (SortedArray.has(unit.elements, bElement) || builder.has(unit.id, bElement))\r\n                    continue;\r\n                atomicBond.aIndex = aIndex;\r\n                atomicBond.a.element = unit.elements[i];\r\n                atomicBond.bIndex = bIndex;\r\n                atomicBond.b.element = bElement;\r\n                atomicBond.type = flags[lI];\r\n                atomicBond.order = order[lI];\r\n                if (atomicBond.test(ctx, true)) {\r\n                    builder.addToUnit(unit.id, bElement);\r\n                }\r\n            }\r\n        }\r\n        // Process inter unit bonds\r\n        for (var _e = 0, _f = interBonds.getConnectedUnits(inputUnitA.id); _e < _f.length; _e++) {\r\n            var bondedUnit = _f[_e];\r\n            var currentUnitB = structure.unitMap.get(bondedUnit.unitB);\r\n            var inputUnitB = inputStructure.unitMap.get(bondedUnit.unitB);\r\n            for (var _g = 0, _h = bondedUnit.connectedIndices; _g < _h.length; _g++) {\r\n                var aI = _h[_g];\r\n                // check if the element is in the expanded structure\r\n                if (!SortedArray.has(unit.elements, inputUnitA.elements[aI]))\r\n                    continue;\r\n                for (var _k = 0, _l = bondedUnit.getEdges(aI); _k < _l.length; _k++) {\r\n                    var bond = _l[_k];\r\n                    var bElement = inputUnitB.elements[bond.indexB];\r\n                    // Check if the element is already present:\r\n                    if ((currentUnitB && SortedArray.has(currentUnitB.elements, bElement)) || builder.has(bondedUnit.unitB, bElement))\r\n                        continue;\r\n                    atomicBond.a.unit = inputUnitA;\r\n                    atomicBond.aIndex = aI;\r\n                    atomicBond.a.element = inputUnitA.elements[aI];\r\n                    atomicBond.b.unit = inputUnitB;\r\n                    atomicBond.bIndex = bond.indexB;\r\n                    atomicBond.b.element = bElement;\r\n                    atomicBond.type = bond.props.flag;\r\n                    atomicBond.order = bond.props.order;\r\n                    if (atomicBond.test(ctx, true)) {\r\n                        builder.addToUnit(bondedUnit.unitB, bElement);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return builder.getStructure();\r\n}\r\n/**\r\n * Includes expanded surrounding ligands based on radius from the source, struct_conn entries & pdbx_molecule entries.\r\n */\r\nexport function surroundingLigands(_a) {\r\n    var query = _a.query, radius = _a.radius, includeWater = _a.includeWater;\r\n    return function query_surroundingLigands(ctx) {\r\n        var inner = StructureSelection.unionStructure(query(ctx));\r\n        var surroundings = getWholeResidues(ctx, ctx.inputStructure, getIncludeSurroundings(ctx, ctx.inputStructure, inner, { radius: radius }));\r\n        var prd = getPrdAsymIdx(ctx.inputStructure);\r\n        var graph = getStructConnInfo(ctx.inputStructure);\r\n        var l = StructureElement.Location.create(surroundings);\r\n        var includedPrdChains = new Map();\r\n        var componentResidues = new ResidueSet({ checkOperator: true });\r\n        for (var _a = 0, _b = surroundings.units; _a < _b.length; _a++) {\r\n            var unit = _b[_a];\r\n            if (unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\r\n            var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\r\n            while (chainsIt.hasNext) {\r\n                var chainSegment = chainsIt.move();\r\n                l.element = elements[chainSegment.start];\r\n                var asym_id = StructureProperties.chain.label_asym_id(l);\r\n                var op_name = StructureProperties.unit.operator_name(l);\r\n                // check for PRD molecules\r\n                if (prd.has(asym_id)) {\r\n                    if (includedPrdChains.has(asym_id)) {\r\n                        arraySetAdd(includedPrdChains.get(asym_id), op_name);\r\n                    }\r\n                    else {\r\n                        includedPrdChains.set(asym_id, [op_name]);\r\n                    }\r\n                    continue;\r\n                }\r\n                var entityType = StructureProperties.entity.type(l);\r\n                // test entity and chain\r\n                if (entityType === 'water' || entityType === 'polymer')\r\n                    continue;\r\n                residuesIt.setSegment(chainSegment);\r\n                while (residuesIt.hasNext) {\r\n                    var residueSegment = residuesIt.move();\r\n                    l.element = elements[residueSegment.start];\r\n                    graph.addComponent(ResidueSet.getEntryFromLocation(l), componentResidues);\r\n                }\r\n            }\r\n            ctx.throwIfTimedOut();\r\n        }\r\n        // assemble the core structure\r\n        var builder = ctx.inputStructure.subsetBuilder(true);\r\n        for (var _c = 0, _d = ctx.inputStructure.units; _c < _d.length; _c++) {\r\n            var unit = _d[_c];\r\n            if (unit.kind !== 0 /* Atomic */)\r\n                continue;\r\n            l.unit = unit;\r\n            var elements = unit.elements;\r\n            var chainsIt = Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\r\n            var residuesIt = Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\r\n            builder.beginUnit(unit.id);\r\n            while (chainsIt.hasNext) {\r\n                var chainSegment = chainsIt.move();\r\n                l.element = elements[chainSegment.start];\r\n                var asym_id = StructureProperties.chain.label_asym_id(l);\r\n                var op_name = StructureProperties.unit.operator_name(l);\r\n                if (includedPrdChains.has(asym_id) && includedPrdChains.get(asym_id).indexOf(op_name) >= 0) {\r\n                    builder.addElementRange(elements, chainSegment.start, chainSegment.end);\r\n                    continue;\r\n                }\r\n                if (!componentResidues.hasLabelAsymId(asym_id)) {\r\n                    continue;\r\n                }\r\n                residuesIt.setSegment(chainSegment);\r\n                while (residuesIt.hasNext) {\r\n                    var residueSegment = residuesIt.move();\r\n                    l.element = elements[residueSegment.start];\r\n                    if (!componentResidues.has(l))\r\n                        continue;\r\n                    builder.addElementRange(elements, residueSegment.start, residueSegment.end);\r\n                }\r\n            }\r\n            builder.commitUnit();\r\n            ctx.throwIfTimedOut();\r\n        }\r\n        var components = structureUnion(ctx.inputStructure, [builder.getStructure(), inner]);\r\n        // add water\r\n        if (includeWater) {\r\n            var finalBuilder = new StructureUniqueSubsetBuilder(ctx.inputStructure);\r\n            var lookup = ctx.inputStructure.lookup3d;\r\n            for (var _e = 0, _f = components.units; _e < _f.length; _e++) {\r\n                var unit = _f[_e];\r\n                var _g = unit.conformation, x = _g.x, y = _g.y, z = _g.z;\r\n                var elements = unit.elements;\r\n                for (var i = 0, _i = elements.length; i < _i; i++) {\r\n                    var e = elements[i];\r\n                    lookup.findIntoBuilderIf(x(e), y(e), z(e), radius, finalBuilder, testIsWater);\r\n                    finalBuilder.addToUnit(unit.id, e);\r\n                }\r\n                ctx.throwIfTimedOut();\r\n            }\r\n            return StructureSelection.Sequence(ctx.inputStructure, [finalBuilder.getStructure()]);\r\n        }\r\n        else {\r\n            return StructureSelection.Sequence(ctx.inputStructure, [components]);\r\n        }\r\n    };\r\n}\r\nvar _entity_type = StructureProperties.entity.type;\r\nfunction testIsWater(l) {\r\n    return _entity_type(l) === 'water';\r\n}\r\nfunction getPrdAsymIdx(structure) {\r\n    var model = structure.models[0];\r\n    var ids = new Set();\r\n    if (!MmcifFormat.is(model.sourceData))\r\n        return ids;\r\n    var _a = model.sourceData.data.db.pdbx_molecule, _rowCount = _a._rowCount, asym_id = _a.asym_id;\r\n    for (var i = 0; i < _rowCount; i++) {\r\n        ids.add(asym_id.value(i));\r\n    }\r\n    return ids;\r\n}\r\nfunction getStructConnInfo(structure) {\r\n    var _a, _b;\r\n    var model = structure.models[0];\r\n    var graph = new StructConnGraph();\r\n    if (!MmcifFormat.is(model.sourceData))\r\n        return graph;\r\n    var struct_conn = model.sourceData.data.db.struct_conn;\r\n    var conn_type_id = struct_conn.conn_type_id;\r\n    var ptnr1_label_asym_id = struct_conn.ptnr1_label_asym_id, ptnr1_label_comp_id = struct_conn.ptnr1_label_comp_id, ptnr1_label_seq_id = struct_conn.ptnr1_label_seq_id, ptnr1_symmetry = struct_conn.ptnr1_symmetry, pdbx_ptnr1_label_alt_id = struct_conn.pdbx_ptnr1_label_alt_id, pdbx_ptnr1_PDB_ins_code = struct_conn.pdbx_ptnr1_PDB_ins_code;\r\n    var ptnr2_label_asym_id = struct_conn.ptnr2_label_asym_id, ptnr2_label_comp_id = struct_conn.ptnr2_label_comp_id, ptnr2_label_seq_id = struct_conn.ptnr2_label_seq_id, ptnr2_symmetry = struct_conn.ptnr2_symmetry, pdbx_ptnr2_label_alt_id = struct_conn.pdbx_ptnr2_label_alt_id, pdbx_ptnr2_PDB_ins_code = struct_conn.pdbx_ptnr2_PDB_ins_code;\r\n    for (var i = 0; i < struct_conn._rowCount; i++) {\r\n        var bondType = conn_type_id.value(i);\r\n        if (bondType !== 'covale' && bondType !== 'metalc')\r\n            continue;\r\n        var a = {\r\n            label_asym_id: ptnr1_label_asym_id.value(i),\r\n            label_comp_id: ptnr1_label_comp_id.value(i),\r\n            label_seq_id: ptnr1_label_seq_id.value(i),\r\n            label_alt_id: pdbx_ptnr1_label_alt_id.value(i),\r\n            ins_code: pdbx_ptnr1_PDB_ins_code.value(i),\r\n            operator_name: (_a = ptnr1_symmetry.value(i)) !== null && _a !== void 0 ? _a : '1_555'\r\n        };\r\n        var b = {\r\n            label_asym_id: ptnr2_label_asym_id.value(i),\r\n            label_comp_id: ptnr2_label_comp_id.value(i),\r\n            label_seq_id: ptnr2_label_seq_id.value(i),\r\n            label_alt_id: pdbx_ptnr2_label_alt_id.value(i),\r\n            ins_code: pdbx_ptnr2_PDB_ins_code.value(i),\r\n            operator_name: (_b = ptnr2_symmetry.value(i)) !== null && _b !== void 0 ? _b : '1_555'\r\n        };\r\n        graph.addEdge(a, b);\r\n    }\r\n    return graph;\r\n}\r\nvar StructConnGraph = /** @class */ (function () {\r\n    function StructConnGraph() {\r\n        this.vertices = new Map();\r\n        this.edges = new Map();\r\n    }\r\n    StructConnGraph.prototype.addVertex = function (e, label) {\r\n        if (this.vertices.has(label))\r\n            return;\r\n        this.vertices.set(label, e);\r\n        this.edges.set(label, []);\r\n    };\r\n    StructConnGraph.prototype.addEdge = function (a, b) {\r\n        var al = ResidueSet.getLabel(a);\r\n        var bl = ResidueSet.getLabel(b);\r\n        this.addVertex(a, al);\r\n        this.addVertex(b, bl);\r\n        arraySetAdd(this.edges.get(al), bl);\r\n        arraySetAdd(this.edges.get(bl), al);\r\n    };\r\n    StructConnGraph.prototype.addComponent = function (start, set) {\r\n        var startLabel = ResidueSet.getLabel(start);\r\n        if (!this.vertices.has(startLabel)) {\r\n            set.add(start);\r\n            return;\r\n        }\r\n        var visited = new Set();\r\n        var added = new Set();\r\n        var stack = [startLabel];\r\n        added.add(startLabel);\r\n        set.add(start);\r\n        while (stack.length > 0) {\r\n            var a = stack.pop();\r\n            visited.add(a);\r\n            var u = this.vertices.get(a);\r\n            for (var _a = 0, _b = this.edges.get(a); _a < _b.length; _a++) {\r\n                var b = _b[_a];\r\n                if (visited.has(b))\r\n                    continue;\r\n                stack.push(b);\r\n                if (added.has(b))\r\n                    continue;\r\n                added.add(b);\r\n                var v = this.vertices.get(b);\r\n                if (u.operator_name === v.operator_name) {\r\n                    set.add(__assign(__assign({}, v), { operator_name: start.operator_name }));\r\n                }\r\n                else {\r\n                    set.add(v);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return StructConnGraph;\r\n}());\r\n// TODO: unionBy (skip this one?), cluster\r\n//# sourceMappingURL=modifiers.js.map"]},"metadata":{},"sourceType":"module"}