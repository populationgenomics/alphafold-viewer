{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>\r\n */\nimport { __assign } from \"tslib\";\nimport { createNullRenderTarget } from '../../mol-gl/webgl/render-target';\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\nimport { DefineSpec, TextureSpec, UniformSpec } from '../../mol-gl/renderable/schema';\nimport { createComputeRenderable } from '../../mol-gl/renderable';\nimport { ShaderCode } from '../../mol-gl/shader-code';\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\nimport { ValueCell } from '../../mol-util';\nimport { Vec2 } from '../../mol-math/linear-algebra';\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\nimport { depthMerge_frag } from '../../mol-gl/shader/depth-merge.frag';\nimport { copy_frag } from '../../mol-gl/shader/copy.frag';\nimport { StereoCamera } from '../camera/stereo';\nimport { WboitPass } from './wboit';\nimport { AntialiasingPass, PostprocessingPass } from './postprocessing';\nimport { MarkingPass } from './marking';\n\nvar DepthMergeSchema = __assign(__assign({}, QuadSchema), {\n  tDepthPrimitives: TextureSpec('texture', 'depth', 'ushort', 'nearest'),\n  tDepthVolumes: TextureSpec('texture', 'depth', 'ushort', 'nearest'),\n  uTexSize: UniformSpec('v2'),\n  dPackedDepth: DefineSpec('boolean')\n});\n\nvar DepthMergeShaderCode = ShaderCode('depth-merge', quad_vert, depthMerge_frag);\n\nfunction getDepthMergeRenderable(ctx, depthTexturePrimitives, depthTextureVolumes, packedDepth) {\n  var values = __assign(__assign({}, QuadValues), {\n    tDepthPrimitives: ValueCell.create(depthTexturePrimitives),\n    tDepthVolumes: ValueCell.create(depthTextureVolumes),\n    uTexSize: ValueCell.create(Vec2.create(depthTexturePrimitives.getWidth(), depthTexturePrimitives.getHeight())),\n    dPackedDepth: ValueCell.create(packedDepth)\n  });\n\n  var schema = __assign({}, DepthMergeSchema);\n\n  var renderItem = createComputeRenderItem(ctx, 'triangles', DepthMergeShaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nvar CopySchema = __assign(__assign({}, QuadSchema), {\n  tColor: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'),\n  uTexSize: UniformSpec('v2')\n});\n\nvar CopyShaderCode = ShaderCode('copy', quad_vert, copy_frag);\n\nfunction getCopyRenderable(ctx, colorTexture) {\n  var values = __assign(__assign({}, QuadValues), {\n    tColor: ValueCell.create(colorTexture),\n    uTexSize: ValueCell.create(Vec2.create(colorTexture.getWidth(), colorTexture.getHeight()))\n  });\n\n  var schema = __assign({}, CopySchema);\n\n  var renderItem = createComputeRenderItem(ctx, 'triangles', CopyShaderCode, schema, values);\n  return createComputeRenderable(renderItem, values);\n}\n\nvar DrawPass =\n/** @class */\nfunction () {\n  function DrawPass(webgl, width, height, enableWboit) {\n    this.webgl = webgl;\n    var extensions = webgl.extensions,\n        resources = webgl.resources,\n        isWebGL2 = webgl.isWebGL2;\n    this.drawTarget = createNullRenderTarget(webgl.gl);\n    this.colorTarget = webgl.createRenderTarget(width, height, true, 'uint8', 'linear');\n    this.packedDepth = !extensions.depthTexture;\n    this.depthTarget = webgl.createRenderTarget(width, height);\n    this.depthTexture = this.depthTarget.texture;\n    this.depthTargetPrimitives = this.packedDepth ? webgl.createRenderTarget(width, height) : null;\n    this.depthTargetVolumes = this.packedDepth ? webgl.createRenderTarget(width, height) : null;\n    this.depthTexturePrimitives = this.depthTargetPrimitives ? this.depthTargetPrimitives.texture : resources.texture('image-depth', 'depth', isWebGL2 ? 'float' : 'ushort', 'nearest');\n    this.depthTextureVolumes = this.depthTargetVolumes ? this.depthTargetVolumes.texture : resources.texture('image-depth', 'depth', isWebGL2 ? 'float' : 'ushort', 'nearest');\n\n    if (!this.packedDepth) {\n      this.depthTexturePrimitives.define(width, height);\n      this.depthTextureVolumes.define(width, height);\n    }\n\n    this.depthMerge = getDepthMergeRenderable(webgl, this.depthTexturePrimitives, this.depthTextureVolumes, this.packedDepth);\n    this.wboit = enableWboit ? new WboitPass(webgl, width, height) : undefined;\n    this.marking = new MarkingPass(webgl, width, height);\n    this.postprocessing = new PostprocessingPass(webgl, this);\n    this.antialiasing = new AntialiasingPass(webgl, this);\n    this.copyFboTarget = getCopyRenderable(webgl, this.colorTarget.texture);\n    this.copyFboPostprocessing = getCopyRenderable(webgl, this.postprocessing.target.texture);\n  }\n\n  Object.defineProperty(DrawPass.prototype, \"wboitEnabled\", {\n    get: function () {\n      var _a;\n\n      return !!((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DrawPass.prototype.reset = function () {\n    var _a;\n\n    (_a = this.wboit) === null || _a === void 0 ? void 0 : _a.reset();\n  };\n\n  DrawPass.prototype.setSize = function (width, height) {\n    var _a;\n\n    var w = this.colorTarget.getWidth();\n    var h = this.colorTarget.getHeight();\n\n    if (width !== w || height !== h) {\n      this.colorTarget.setSize(width, height);\n      this.depthTarget.setSize(width, height);\n\n      if (this.depthTargetPrimitives) {\n        this.depthTargetPrimitives.setSize(width, height);\n      } else {\n        this.depthTexturePrimitives.define(width, height);\n      }\n\n      if (this.depthTargetVolumes) {\n        this.depthTargetVolumes.setSize(width, height);\n      } else {\n        this.depthTextureVolumes.define(width, height);\n      }\n\n      ValueCell.update(this.depthMerge.values.uTexSize, Vec2.set(this.depthMerge.values.uTexSize.ref.value, width, height));\n      ValueCell.update(this.copyFboTarget.values.uTexSize, Vec2.set(this.copyFboTarget.values.uTexSize.ref.value, width, height));\n      ValueCell.update(this.copyFboPostprocessing.values.uTexSize, Vec2.set(this.copyFboPostprocessing.values.uTexSize.ref.value, width, height));\n\n      if ((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported) {\n        this.wboit.setSize(width, height);\n      }\n\n      this.marking.setSize(width, height);\n      this.postprocessing.setSize(width, height);\n      this.antialiasing.setSize(width, height);\n    }\n  };\n\n  DrawPass.prototype._depthMerge = function () {\n    var _a = this.webgl,\n        state = _a.state,\n        gl = _a.gl;\n    this.depthMerge.update();\n    this.depthTarget.bind();\n    state.disable(gl.BLEND);\n    state.disable(gl.DEPTH_TEST);\n    state.disable(gl.CULL_FACE);\n    state.depthMask(false);\n    state.clearColor(1, 1, 1, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    this.depthMerge.render();\n  };\n\n  DrawPass.prototype._renderWboit = function (renderer, camera, scene, transparentBackground, postprocessingProps) {\n    var _a;\n\n    if (!((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported)) throw new Error('expected wboit to be supported');\n    this.colorTarget.bind();\n    renderer.clear(true); // render opaque primitives\n\n    this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\n    this.colorTarget.bind();\n    renderer.clearDepth();\n    renderer.renderWboitOpaque(scene.primitives, camera, null); // render opaque volumes\n\n    this.depthTextureVolumes.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\n    this.colorTarget.bind();\n    renderer.clearDepth();\n    renderer.renderWboitOpaque(scene.volumes, camera, this.depthTexturePrimitives); // merge depth of opaque primitives and volumes\n\n    this._depthMerge();\n\n    if (PostprocessingPass.isEnabled(postprocessingProps)) {\n      this.postprocessing.render(camera, false, transparentBackground, renderer.props.backgroundColor, postprocessingProps);\n    } // render transparent primitives and volumes\n\n\n    this.wboit.bind();\n    renderer.renderWboitTransparent(scene.primitives, camera, this.depthTexture);\n    renderer.renderWboitTransparent(scene.volumes, camera, this.depthTexture); // evaluate wboit\n\n    if (PostprocessingPass.isEnabled(postprocessingProps)) {\n      this.depthTexturePrimitives.attachFramebuffer(this.postprocessing.target.framebuffer, 'depth');\n      this.postprocessing.target.bind();\n    } else {\n      this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\n      this.colorTarget.bind();\n    }\n\n    this.wboit.render();\n  };\n\n  DrawPass.prototype._renderBlended = function (renderer, camera, scene, toDrawingBuffer, transparentBackground, postprocessingProps) {\n    if (toDrawingBuffer) {\n      this.drawTarget.bind();\n    } else {\n      this.colorTarget.bind();\n\n      if (!this.packedDepth) {\n        this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\n      }\n    }\n\n    renderer.clear(true);\n    renderer.renderBlendedOpaque(scene.primitives, camera, null);\n\n    if (!toDrawingBuffer) {\n      // do a depth pass if not rendering to drawing buffer and\n      // extensions.depthTexture is unsupported (i.e. depthTarget is set)\n      if (this.depthTargetPrimitives) {\n        this.depthTargetPrimitives.bind();\n        renderer.clear(false); // TODO: this should only render opaque\n\n        renderer.renderDepth(scene.primitives, camera, null);\n        this.colorTarget.bind();\n      } // do direct-volume rendering\n\n\n      if (!this.packedDepth) {\n        this.depthTextureVolumes.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\n        renderer.clearDepth(); // from previous frame\n      }\n\n      renderer.renderBlendedVolumeOpaque(scene.volumes, camera, this.depthTexturePrimitives); // do volume depth pass if extensions.depthTexture is unsupported (i.e. depthTarget is set)\n\n      if (this.depthTargetVolumes) {\n        this.depthTargetVolumes.bind();\n        renderer.clear(false);\n        renderer.renderDepth(scene.volumes, camera, this.depthTexturePrimitives);\n        this.colorTarget.bind();\n      } // merge depths from primitive and volume rendering\n\n\n      this._depthMerge();\n\n      this.colorTarget.bind();\n\n      if (PostprocessingPass.isEnabled(postprocessingProps)) {\n        this.postprocessing.render(camera, false, transparentBackground, renderer.props.backgroundColor, postprocessingProps);\n      }\n\n      renderer.renderBlendedVolumeTransparent(scene.volumes, camera, this.depthTexturePrimitives);\n      var target = PostprocessingPass.isEnabled(postprocessingProps) ? this.postprocessing.target : this.colorTarget;\n\n      if (!this.packedDepth) {\n        this.depthTexturePrimitives.attachFramebuffer(target.framebuffer, 'depth');\n      }\n\n      target.bind();\n    }\n\n    renderer.renderBlendedTransparent(scene.primitives, camera, null);\n  };\n\n  DrawPass.prototype._render = function (renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps) {\n    var volumeRendering = scene.volumes.renderables.length > 0;\n    var postprocessingEnabled = PostprocessingPass.isEnabled(postprocessingProps);\n    var antialiasingEnabled = AntialiasingPass.isEnabled(postprocessingProps);\n    var markingEnabled = MarkingPass.isEnabled(markingProps);\n    var _a = camera.viewport,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n    renderer.setViewport(x, y, width, height);\n    renderer.update(camera);\n\n    if (transparentBackground && !antialiasingEnabled && toDrawingBuffer) {\n      this.drawTarget.bind();\n      renderer.clear(false);\n    }\n\n    if (this.wboitEnabled) {\n      this._renderWboit(renderer, camera, scene, transparentBackground, postprocessingProps);\n    } else {\n      this._renderBlended(renderer, camera, scene, !volumeRendering && !postprocessingEnabled && !antialiasingEnabled && toDrawingBuffer, transparentBackground, postprocessingProps);\n    }\n\n    if (postprocessingEnabled) {\n      this.postprocessing.target.bind();\n    } else if (!toDrawingBuffer || volumeRendering || this.wboitEnabled) {\n      this.colorTarget.bind();\n    } else {\n      this.drawTarget.bind();\n    }\n\n    if (markingEnabled) {\n      var markingDepthTest = markingProps.ghostEdgeStrength < 1;\n\n      if (markingDepthTest) {\n        this.marking.depthTarget.bind();\n        renderer.clear(false);\n        renderer.renderMarkingDepth(scene.primitives, camera, null);\n      }\n\n      this.marking.maskTarget.bind();\n      renderer.clear(false);\n      renderer.renderMarkingMask(scene.primitives, camera, markingDepthTest ? this.marking.depthTarget.texture : null);\n      this.marking.update(markingProps);\n      this.marking.render(camera.viewport, postprocessingEnabled ? this.postprocessing.target : this.colorTarget);\n    }\n\n    if (helper.debug.isEnabled) {\n      helper.debug.syncVisibility();\n      renderer.renderBlended(helper.debug.scene, camera, null);\n    }\n\n    if (helper.handle.isEnabled) {\n      renderer.renderBlended(helper.handle.scene, camera, null);\n    }\n\n    if (helper.camera.isEnabled) {\n      helper.camera.update(camera);\n      renderer.update(helper.camera.camera);\n      renderer.renderBlended(helper.camera.scene, helper.camera.camera, null);\n    }\n\n    if (antialiasingEnabled) {\n      this.antialiasing.render(camera, toDrawingBuffer, postprocessingProps);\n    } else if (toDrawingBuffer) {\n      this.drawTarget.bind();\n      this.webgl.state.disable(this.webgl.gl.DEPTH_TEST);\n\n      if (postprocessingEnabled) {\n        this.copyFboPostprocessing.render();\n      } else if (volumeRendering || this.wboitEnabled) {\n        this.copyFboTarget.render();\n      }\n    }\n\n    this.webgl.gl.flush();\n  };\n\n  DrawPass.prototype.render = function (renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps) {\n    renderer.setTransparentBackground(transparentBackground);\n    renderer.setDrawingBufferSize(this.colorTarget.getWidth(), this.colorTarget.getHeight());\n    renderer.setPixelRatio(this.webgl.pixelRatio);\n\n    if (StereoCamera.is(camera)) {\n      this._render(renderer, camera.left, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\n\n      this._render(renderer, camera.right, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\n    } else {\n      this._render(renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\n    }\n  };\n\n  DrawPass.prototype.getColorTarget = function (postprocessingProps) {\n    if (AntialiasingPass.isEnabled(postprocessingProps)) {\n      return this.antialiasing.target;\n    } else if (PostprocessingPass.isEnabled(postprocessingProps)) {\n      return this.postprocessing.target;\n    }\n\n    return this.colorTarget;\n  };\n\n  return DrawPass;\n}();\n\nexport { DrawPass };","map":{"version":3,"sources":["../../../src/mol-canvas3d/passes/draw.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author Áron Samuel Kovács <aron.kovacs@mail.muni.cz>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createNullRenderTarget } from '../../mol-gl/webgl/render-target';\r\nimport { QuadSchema, QuadValues } from '../../mol-gl/compute/util';\r\nimport { DefineSpec, TextureSpec, UniformSpec } from '../../mol-gl/renderable/schema';\r\nimport { createComputeRenderable } from '../../mol-gl/renderable';\r\nimport { ShaderCode } from '../../mol-gl/shader-code';\r\nimport { createComputeRenderItem } from '../../mol-gl/webgl/render-item';\r\nimport { ValueCell } from '../../mol-util';\r\nimport { Vec2 } from '../../mol-math/linear-algebra';\r\nimport { quad_vert } from '../../mol-gl/shader/quad.vert';\r\nimport { depthMerge_frag } from '../../mol-gl/shader/depth-merge.frag';\r\nimport { copy_frag } from '../../mol-gl/shader/copy.frag';\r\nimport { StereoCamera } from '../camera/stereo';\r\nimport { WboitPass } from './wboit';\r\nimport { AntialiasingPass, PostprocessingPass } from './postprocessing';\r\nimport { MarkingPass } from './marking';\r\nvar DepthMergeSchema = __assign(__assign({}, QuadSchema), { tDepthPrimitives: TextureSpec('texture', 'depth', 'ushort', 'nearest'), tDepthVolumes: TextureSpec('texture', 'depth', 'ushort', 'nearest'), uTexSize: UniformSpec('v2'), dPackedDepth: DefineSpec('boolean') });\r\nvar DepthMergeShaderCode = ShaderCode('depth-merge', quad_vert, depthMerge_frag);\r\nfunction getDepthMergeRenderable(ctx, depthTexturePrimitives, depthTextureVolumes, packedDepth) {\r\n    var values = __assign(__assign({}, QuadValues), { tDepthPrimitives: ValueCell.create(depthTexturePrimitives), tDepthVolumes: ValueCell.create(depthTextureVolumes), uTexSize: ValueCell.create(Vec2.create(depthTexturePrimitives.getWidth(), depthTexturePrimitives.getHeight())), dPackedDepth: ValueCell.create(packedDepth) });\r\n    var schema = __assign({}, DepthMergeSchema);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', DepthMergeShaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nvar CopySchema = __assign(__assign({}, QuadSchema), { tColor: TextureSpec('texture', 'rgba', 'ubyte', 'nearest'), uTexSize: UniformSpec('v2') });\r\nvar CopyShaderCode = ShaderCode('copy', quad_vert, copy_frag);\r\nfunction getCopyRenderable(ctx, colorTexture) {\r\n    var values = __assign(__assign({}, QuadValues), { tColor: ValueCell.create(colorTexture), uTexSize: ValueCell.create(Vec2.create(colorTexture.getWidth(), colorTexture.getHeight())) });\r\n    var schema = __assign({}, CopySchema);\r\n    var renderItem = createComputeRenderItem(ctx, 'triangles', CopyShaderCode, schema, values);\r\n    return createComputeRenderable(renderItem, values);\r\n}\r\nvar DrawPass = /** @class */ (function () {\r\n    function DrawPass(webgl, width, height, enableWboit) {\r\n        this.webgl = webgl;\r\n        var extensions = webgl.extensions, resources = webgl.resources, isWebGL2 = webgl.isWebGL2;\r\n        this.drawTarget = createNullRenderTarget(webgl.gl);\r\n        this.colorTarget = webgl.createRenderTarget(width, height, true, 'uint8', 'linear');\r\n        this.packedDepth = !extensions.depthTexture;\r\n        this.depthTarget = webgl.createRenderTarget(width, height);\r\n        this.depthTexture = this.depthTarget.texture;\r\n        this.depthTargetPrimitives = this.packedDepth ? webgl.createRenderTarget(width, height) : null;\r\n        this.depthTargetVolumes = this.packedDepth ? webgl.createRenderTarget(width, height) : null;\r\n        this.depthTexturePrimitives = this.depthTargetPrimitives ? this.depthTargetPrimitives.texture : resources.texture('image-depth', 'depth', isWebGL2 ? 'float' : 'ushort', 'nearest');\r\n        this.depthTextureVolumes = this.depthTargetVolumes ? this.depthTargetVolumes.texture : resources.texture('image-depth', 'depth', isWebGL2 ? 'float' : 'ushort', 'nearest');\r\n        if (!this.packedDepth) {\r\n            this.depthTexturePrimitives.define(width, height);\r\n            this.depthTextureVolumes.define(width, height);\r\n        }\r\n        this.depthMerge = getDepthMergeRenderable(webgl, this.depthTexturePrimitives, this.depthTextureVolumes, this.packedDepth);\r\n        this.wboit = enableWboit ? new WboitPass(webgl, width, height) : undefined;\r\n        this.marking = new MarkingPass(webgl, width, height);\r\n        this.postprocessing = new PostprocessingPass(webgl, this);\r\n        this.antialiasing = new AntialiasingPass(webgl, this);\r\n        this.copyFboTarget = getCopyRenderable(webgl, this.colorTarget.texture);\r\n        this.copyFboPostprocessing = getCopyRenderable(webgl, this.postprocessing.target.texture);\r\n    }\r\n    Object.defineProperty(DrawPass.prototype, \"wboitEnabled\", {\r\n        get: function () {\r\n            var _a;\r\n            return !!((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DrawPass.prototype.reset = function () {\r\n        var _a;\r\n        (_a = this.wboit) === null || _a === void 0 ? void 0 : _a.reset();\r\n    };\r\n    DrawPass.prototype.setSize = function (width, height) {\r\n        var _a;\r\n        var w = this.colorTarget.getWidth();\r\n        var h = this.colorTarget.getHeight();\r\n        if (width !== w || height !== h) {\r\n            this.colorTarget.setSize(width, height);\r\n            this.depthTarget.setSize(width, height);\r\n            if (this.depthTargetPrimitives) {\r\n                this.depthTargetPrimitives.setSize(width, height);\r\n            }\r\n            else {\r\n                this.depthTexturePrimitives.define(width, height);\r\n            }\r\n            if (this.depthTargetVolumes) {\r\n                this.depthTargetVolumes.setSize(width, height);\r\n            }\r\n            else {\r\n                this.depthTextureVolumes.define(width, height);\r\n            }\r\n            ValueCell.update(this.depthMerge.values.uTexSize, Vec2.set(this.depthMerge.values.uTexSize.ref.value, width, height));\r\n            ValueCell.update(this.copyFboTarget.values.uTexSize, Vec2.set(this.copyFboTarget.values.uTexSize.ref.value, width, height));\r\n            ValueCell.update(this.copyFboPostprocessing.values.uTexSize, Vec2.set(this.copyFboPostprocessing.values.uTexSize.ref.value, width, height));\r\n            if ((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported) {\r\n                this.wboit.setSize(width, height);\r\n            }\r\n            this.marking.setSize(width, height);\r\n            this.postprocessing.setSize(width, height);\r\n            this.antialiasing.setSize(width, height);\r\n        }\r\n    };\r\n    DrawPass.prototype._depthMerge = function () {\r\n        var _a = this.webgl, state = _a.state, gl = _a.gl;\r\n        this.depthMerge.update();\r\n        this.depthTarget.bind();\r\n        state.disable(gl.BLEND);\r\n        state.disable(gl.DEPTH_TEST);\r\n        state.disable(gl.CULL_FACE);\r\n        state.depthMask(false);\r\n        state.clearColor(1, 1, 1, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        this.depthMerge.render();\r\n    };\r\n    DrawPass.prototype._renderWboit = function (renderer, camera, scene, transparentBackground, postprocessingProps) {\r\n        var _a;\r\n        if (!((_a = this.wboit) === null || _a === void 0 ? void 0 : _a.supported))\r\n            throw new Error('expected wboit to be supported');\r\n        this.colorTarget.bind();\r\n        renderer.clear(true);\r\n        // render opaque primitives\r\n        this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\r\n        this.colorTarget.bind();\r\n        renderer.clearDepth();\r\n        renderer.renderWboitOpaque(scene.primitives, camera, null);\r\n        // render opaque volumes\r\n        this.depthTextureVolumes.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\r\n        this.colorTarget.bind();\r\n        renderer.clearDepth();\r\n        renderer.renderWboitOpaque(scene.volumes, camera, this.depthTexturePrimitives);\r\n        // merge depth of opaque primitives and volumes\r\n        this._depthMerge();\r\n        if (PostprocessingPass.isEnabled(postprocessingProps)) {\r\n            this.postprocessing.render(camera, false, transparentBackground, renderer.props.backgroundColor, postprocessingProps);\r\n        }\r\n        // render transparent primitives and volumes\r\n        this.wboit.bind();\r\n        renderer.renderWboitTransparent(scene.primitives, camera, this.depthTexture);\r\n        renderer.renderWboitTransparent(scene.volumes, camera, this.depthTexture);\r\n        // evaluate wboit\r\n        if (PostprocessingPass.isEnabled(postprocessingProps)) {\r\n            this.depthTexturePrimitives.attachFramebuffer(this.postprocessing.target.framebuffer, 'depth');\r\n            this.postprocessing.target.bind();\r\n        }\r\n        else {\r\n            this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\r\n            this.colorTarget.bind();\r\n        }\r\n        this.wboit.render();\r\n    };\r\n    DrawPass.prototype._renderBlended = function (renderer, camera, scene, toDrawingBuffer, transparentBackground, postprocessingProps) {\r\n        if (toDrawingBuffer) {\r\n            this.drawTarget.bind();\r\n        }\r\n        else {\r\n            this.colorTarget.bind();\r\n            if (!this.packedDepth) {\r\n                this.depthTexturePrimitives.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\r\n            }\r\n        }\r\n        renderer.clear(true);\r\n        renderer.renderBlendedOpaque(scene.primitives, camera, null);\r\n        if (!toDrawingBuffer) {\r\n            // do a depth pass if not rendering to drawing buffer and\r\n            // extensions.depthTexture is unsupported (i.e. depthTarget is set)\r\n            if (this.depthTargetPrimitives) {\r\n                this.depthTargetPrimitives.bind();\r\n                renderer.clear(false);\r\n                // TODO: this should only render opaque\r\n                renderer.renderDepth(scene.primitives, camera, null);\r\n                this.colorTarget.bind();\r\n            }\r\n            // do direct-volume rendering\r\n            if (!this.packedDepth) {\r\n                this.depthTextureVolumes.attachFramebuffer(this.colorTarget.framebuffer, 'depth');\r\n                renderer.clearDepth(); // from previous frame\r\n            }\r\n            renderer.renderBlendedVolumeOpaque(scene.volumes, camera, this.depthTexturePrimitives);\r\n            // do volume depth pass if extensions.depthTexture is unsupported (i.e. depthTarget is set)\r\n            if (this.depthTargetVolumes) {\r\n                this.depthTargetVolumes.bind();\r\n                renderer.clear(false);\r\n                renderer.renderDepth(scene.volumes, camera, this.depthTexturePrimitives);\r\n                this.colorTarget.bind();\r\n            }\r\n            // merge depths from primitive and volume rendering\r\n            this._depthMerge();\r\n            this.colorTarget.bind();\r\n            if (PostprocessingPass.isEnabled(postprocessingProps)) {\r\n                this.postprocessing.render(camera, false, transparentBackground, renderer.props.backgroundColor, postprocessingProps);\r\n            }\r\n            renderer.renderBlendedVolumeTransparent(scene.volumes, camera, this.depthTexturePrimitives);\r\n            var target = PostprocessingPass.isEnabled(postprocessingProps)\r\n                ? this.postprocessing.target : this.colorTarget;\r\n            if (!this.packedDepth) {\r\n                this.depthTexturePrimitives.attachFramebuffer(target.framebuffer, 'depth');\r\n            }\r\n            target.bind();\r\n        }\r\n        renderer.renderBlendedTransparent(scene.primitives, camera, null);\r\n    };\r\n    DrawPass.prototype._render = function (renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps) {\r\n        var volumeRendering = scene.volumes.renderables.length > 0;\r\n        var postprocessingEnabled = PostprocessingPass.isEnabled(postprocessingProps);\r\n        var antialiasingEnabled = AntialiasingPass.isEnabled(postprocessingProps);\r\n        var markingEnabled = MarkingPass.isEnabled(markingProps);\r\n        var _a = camera.viewport, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n        renderer.setViewport(x, y, width, height);\r\n        renderer.update(camera);\r\n        if (transparentBackground && !antialiasingEnabled && toDrawingBuffer) {\r\n            this.drawTarget.bind();\r\n            renderer.clear(false);\r\n        }\r\n        if (this.wboitEnabled) {\r\n            this._renderWboit(renderer, camera, scene, transparentBackground, postprocessingProps);\r\n        }\r\n        else {\r\n            this._renderBlended(renderer, camera, scene, !volumeRendering && !postprocessingEnabled && !antialiasingEnabled && toDrawingBuffer, transparentBackground, postprocessingProps);\r\n        }\r\n        if (postprocessingEnabled) {\r\n            this.postprocessing.target.bind();\r\n        }\r\n        else if (!toDrawingBuffer || volumeRendering || this.wboitEnabled) {\r\n            this.colorTarget.bind();\r\n        }\r\n        else {\r\n            this.drawTarget.bind();\r\n        }\r\n        if (markingEnabled) {\r\n            var markingDepthTest = markingProps.ghostEdgeStrength < 1;\r\n            if (markingDepthTest) {\r\n                this.marking.depthTarget.bind();\r\n                renderer.clear(false);\r\n                renderer.renderMarkingDepth(scene.primitives, camera, null);\r\n            }\r\n            this.marking.maskTarget.bind();\r\n            renderer.clear(false);\r\n            renderer.renderMarkingMask(scene.primitives, camera, markingDepthTest ? this.marking.depthTarget.texture : null);\r\n            this.marking.update(markingProps);\r\n            this.marking.render(camera.viewport, postprocessingEnabled ? this.postprocessing.target : this.colorTarget);\r\n        }\r\n        if (helper.debug.isEnabled) {\r\n            helper.debug.syncVisibility();\r\n            renderer.renderBlended(helper.debug.scene, camera, null);\r\n        }\r\n        if (helper.handle.isEnabled) {\r\n            renderer.renderBlended(helper.handle.scene, camera, null);\r\n        }\r\n        if (helper.camera.isEnabled) {\r\n            helper.camera.update(camera);\r\n            renderer.update(helper.camera.camera);\r\n            renderer.renderBlended(helper.camera.scene, helper.camera.camera, null);\r\n        }\r\n        if (antialiasingEnabled) {\r\n            this.antialiasing.render(camera, toDrawingBuffer, postprocessingProps);\r\n        }\r\n        else if (toDrawingBuffer) {\r\n            this.drawTarget.bind();\r\n            this.webgl.state.disable(this.webgl.gl.DEPTH_TEST);\r\n            if (postprocessingEnabled) {\r\n                this.copyFboPostprocessing.render();\r\n            }\r\n            else if (volumeRendering || this.wboitEnabled) {\r\n                this.copyFboTarget.render();\r\n            }\r\n        }\r\n        this.webgl.gl.flush();\r\n    };\r\n    DrawPass.prototype.render = function (renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps) {\r\n        renderer.setTransparentBackground(transparentBackground);\r\n        renderer.setDrawingBufferSize(this.colorTarget.getWidth(), this.colorTarget.getHeight());\r\n        renderer.setPixelRatio(this.webgl.pixelRatio);\r\n        if (StereoCamera.is(camera)) {\r\n            this._render(renderer, camera.left, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\r\n            this._render(renderer, camera.right, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\r\n        }\r\n        else {\r\n            this._render(renderer, camera, scene, helper, toDrawingBuffer, transparentBackground, postprocessingProps, markingProps);\r\n        }\r\n    };\r\n    DrawPass.prototype.getColorTarget = function (postprocessingProps) {\r\n        if (AntialiasingPass.isEnabled(postprocessingProps)) {\r\n            return this.antialiasing.target;\r\n        }\r\n        else if (PostprocessingPass.isEnabled(postprocessingProps)) {\r\n            return this.postprocessing.target;\r\n        }\r\n        return this.colorTarget;\r\n    };\r\n    return DrawPass;\r\n}());\r\nexport { DrawPass };\r\n//# sourceMappingURL=draw.js.map"]},"metadata":{},"sourceType":"module"}