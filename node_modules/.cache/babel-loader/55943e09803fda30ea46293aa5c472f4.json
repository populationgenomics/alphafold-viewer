{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nvar EquivalenceClassesImpl =\n/** @class */\nfunction () {\n  function EquivalenceClassesImpl(getHash, areEqual) {\n    this.getHash = getHash;\n    this.areEqual = areEqual;\n    this.id = 0;\n    this.byHash = new Map();\n    this.groups = [];\n  }\n\n  EquivalenceClassesImpl.prototype.createGroup = function (key, value) {\n    var id = this.id++;\n    var keys = [key];\n    this.groups[id] = keys;\n    return {\n      id: id,\n      keys: keys,\n      value: value\n    };\n  }; // Return the group representative.\n\n\n  EquivalenceClassesImpl.prototype.add = function (key, a) {\n    var hash = this.getHash(a);\n\n    if (this.byHash.has(hash)) {\n      var groups = this.byHash.get(hash);\n\n      for (var i = 0, _i = groups.length; i < _i; i++) {\n        var group_1 = groups[i];\n\n        if (this.areEqual(a, group_1.value)) {\n          group_1.keys[group_1.keys.length] = key;\n          return group_1.value;\n        }\n      }\n\n      var group = this.createGroup(key, a);\n      groups[groups.length] = group;\n      return group.value;\n    } else {\n      var group = this.createGroup(key, a);\n      this.byHash.set(hash, [group]);\n      return group.value;\n    }\n  };\n\n  return EquivalenceClassesImpl;\n}();\n\nexport { EquivalenceClassesImpl };\nexport function EquivalenceClasses(getHash, areEqual) {\n  return new EquivalenceClassesImpl(getHash, areEqual);\n}","map":{"version":3,"sources":["../../../src/mol-data/util/equivalence-classes.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,IAAA,sBAAA;AAAA;AAAA,YAAA;AAmCI,WAAA,sBAAA,CAAoB,OAApB,EAAoD,QAApD,EAAqF;AAAjE,SAAA,OAAA,GAAA,OAAA;AAAgC,SAAA,QAAA,GAAA,QAAA;AAlC5C,SAAA,EAAA,GAAK,CAAL;AACA,SAAA,MAAA,GAAS,IAAI,GAAJ,EAAT;AAEC,SAAA,MAAA,GAAgB,EAAhB;AA+BiF;;AA7BlF,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,GAApB,EAA4B,KAA5B,EAAoC;AAChC,QAAM,EAAE,GAAG,KAAK,EAAL,EAAX;AACA,QAAM,IAAI,GAAG,CAAC,GAAD,CAAb;AACA,SAAK,MAAL,CAAY,EAAZ,IAAkB,IAAlB;AACA,WAAO;AAAE,MAAA,EAAE,EAAA,EAAJ;AAAM,MAAA,IAAI,EAAA,IAAV;AAAY,MAAA,KAAK,EAAA;AAAjB,KAAP;AACH,GALO,CANZ,CAaI;;;AACA,EAAA,sBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAY,CAAZ,EAAgB;AACZ,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,CAAb,CAAb;;AACA,QAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAJ,EAA2B;AACvB,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAf;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,MAAM,CAAC,MAA5B,EAAoC,CAAC,GAAG,EAAxC,EAA4C,CAAC,EAA7C,EAAiD;AAC7C,YAAM,OAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,YAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,OAAK,CAAC,KAAvB,CAAJ,EAAmC;AAC/B,UAAA,OAAK,CAAC,IAAN,CAAW,OAAK,CAAC,IAAN,CAAW,MAAtB,IAAgC,GAAhC;AACA,iBAAO,OAAK,CAAC,KAAb;AACH;AACJ;;AACD,UAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,GAAjB,EAAsB,CAAtB,CAAd;AACA,MAAA,MAAM,CAAC,MAAM,CAAC,MAAR,CAAN,GAAwB,KAAxB;AACA,aAAO,KAAK,CAAC,KAAb;AACH,KAZD,MAYO;AACH,UAAM,KAAK,GAAG,KAAK,WAAL,CAAiB,GAAjB,EAAsB,CAAtB,CAAd;AACA,WAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,EAAsB,CAAC,KAAD,CAAtB;AACA,aAAO,KAAK,CAAC,KAAb;AACH;AACJ,GAnBD;;AAsBJ,SAAA,sBAAA;AAAC,CApCD,EAAA;;;AAsCA,OAAM,SAAU,kBAAV,CAAmC,OAAnC,EAA2D,QAA3D,EAA4F;AAC9F,SAAO,IAAI,sBAAJ,CAAiC,OAAjC,EAA0C,QAA1C,CAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nvar EquivalenceClassesImpl = /** @class */ (function () {\r\n    function EquivalenceClassesImpl(getHash, areEqual) {\r\n        this.getHash = getHash;\r\n        this.areEqual = areEqual;\r\n        this.id = 0;\r\n        this.byHash = new Map();\r\n        this.groups = [];\r\n    }\r\n    EquivalenceClassesImpl.prototype.createGroup = function (key, value) {\r\n        var id = this.id++;\r\n        var keys = [key];\r\n        this.groups[id] = keys;\r\n        return { id: id, keys: keys, value: value };\r\n    };\r\n    // Return the group representative.\r\n    EquivalenceClassesImpl.prototype.add = function (key, a) {\r\n        var hash = this.getHash(a);\r\n        if (this.byHash.has(hash)) {\r\n            var groups = this.byHash.get(hash);\r\n            for (var i = 0, _i = groups.length; i < _i; i++) {\r\n                var group_1 = groups[i];\r\n                if (this.areEqual(a, group_1.value)) {\r\n                    group_1.keys[group_1.keys.length] = key;\r\n                    return group_1.value;\r\n                }\r\n            }\r\n            var group = this.createGroup(key, a);\r\n            groups[groups.length] = group;\r\n            return group.value;\r\n        }\r\n        else {\r\n            var group = this.createGroup(key, a);\r\n            this.byHash.set(hash, [group]);\r\n            return group.value;\r\n        }\r\n    };\r\n    return EquivalenceClassesImpl;\r\n}());\r\nexport { EquivalenceClassesImpl };\r\nexport function EquivalenceClasses(getHash, areEqual) {\r\n    return new EquivalenceClassesImpl(getHash, areEqual);\r\n}\r\n//# sourceMappingURL=equivalence-classes.js.map"]},"metadata":{},"sourceType":"module"}