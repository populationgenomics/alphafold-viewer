{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/Projects/AlphaFoldVisualisation/alphafold-viewer/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport Viewer from \"./viewer\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [url, setUrl] = useState(\"\");\n  const [searchResults, setSearchResults] = useState(null);\n\n  const clear = () => {\n    setUrl(\"\");\n  };\n\n  const submitUrl = uniprot => {\n    setUrl(\"https://alphafold.ebi.ac.uk/files/AF-\" + uniprot + \"-F1-model_v1.cif\"); // event.preventDefault();\n    // const form = event.currentTarget;\n    // const formElements = form.elements as typeof form.elements & {\n    //     url: { value: string };\n    // };\n    // setUrl(formElements.url.value);\n  };\n\n  async function seek(symbol) {\n    try {\n      let res = await fetch(\"http://rest.genenames.org/fetch/symbol/\" + symbol, {\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n      let data = await res.json();\n      return await data.response.docs[\"0\"].uniprot_ids[0];\n    } catch (error) {\n      return null;\n    }\n  }\n\n  const handleSearch = async event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formElements = form.elements;\n    const response = await fetch(`https://mygene.info/v3/query?q=${formElements.searchTerm.value}&fields=symbol%2C%20name%2C%20entrezgene&species=human&size=10&entrezonly=true`);\n    const data = await response.json();\n    const hits = data.hits;\n    const validHits = await Promise.all(hits.map(async function (item) {\n      let id = await seek(item.symbol);\n      return { ...item,\n        uniprot: id\n      };\n    }));\n    console.log(validHits.filter(item => item.uniprot));\n    setSearchResults(validHits.filter(item => item.uniprot));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AlphaFold Protein Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Search protein or gene:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchTerm\",\n          style: {\n            width: 600\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [searchResults && searchResults.map(item => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitUrl(item.uniprot),\n          disabled: url == \"\",\n          children: [item.name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 45\n          }, this), \" \", item.symbol, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 66\n          }, this), item.uniprot]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)), searchResults && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clear,\n        disabled: !url,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: url && /*#__PURE__*/_jsxDEV(Viewer, {\n        left: 250,\n        top: 250,\n        url: url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"hFgkDFAuzpBqHNLdUR32ZrdnY8s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daniel/Documents/Projects/AlphaFoldVisualisation/alphafold-viewer/src/App.tsx"],"names":["Viewer","React","useState","App","url","setUrl","searchResults","setSearchResults","clear","submitUrl","uniprot","seek","symbol","res","fetch","headers","Accept","data","json","response","docs","uniprot_ids","error","handleSearch","event","preventDefault","form","currentTarget","formElements","elements","searchTerm","value","hits","validHits","Promise","all","map","item","id","console","log","filter","width","name"],"mappings":"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","sourcesContent":["import Viewer from \"./viewer\";\nimport React, { useState } from \"react\";\nimport { isNamedTupleMember } from \"typescript\";\n\ninterface searchResultsHits {\n    entrezgeneID: string;\n    symbol: string;\n    score: number;\n    _id: string;\n    name: string;\n    uniprot: string;\n}\n\nfunction App() {\n    const [url, setUrl] = useState(\"\");\n    const [searchResults, setSearchResults] = useState<\n        searchResultsHits[] | null\n    >(null);\n\n    const clear = () => {\n        setUrl(\"\");\n    };\n\n    const submitUrl = (uniprot: string) => {\n        setUrl(\n            \"https://alphafold.ebi.ac.uk/files/AF-\" +\n                uniprot +\n                \"-F1-model_v1.cif\"\n        );\n        // event.preventDefault();\n        // const form = event.currentTarget;\n        // const formElements = form.elements as typeof form.elements & {\n        //     url: { value: string };\n        // };\n        // setUrl(formElements.url.value);\n    };\n\n    async function seek(symbol: string) {\n        try {\n            let res = await fetch(\n                \"http://rest.genenames.org/fetch/symbol/\" + symbol,\n                {\n                    headers: {\n                        Accept: \"application/json\",\n                    },\n                }\n            );\n            let data = await res.json();\n            return await data.response.docs[\"0\"].uniprot_ids[0];\n        } catch (error) {\n            return null;\n        }\n    }\n\n    const handleSearch = async (\n        event: React.SyntheticEvent<HTMLFormElement>\n    ) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const formElements = form.elements as typeof form.elements & {\n            searchTerm: { value: string };\n        };\n        const response = await fetch(\n            `https://mygene.info/v3/query?q=${formElements.searchTerm.value}&fields=symbol%2C%20name%2C%20entrezgene&species=human&size=10&entrezonly=true`\n        );\n        const data = await response.json();\n        const hits: searchResultsHits[] = data.hits;\n        const validHits: searchResultsHits[] = await Promise.all(\n            hits.map(async function (item) {\n                let id = await seek(item.symbol);\n                return { ...item, uniprot: id };\n            })\n        );\n        console.log(validHits.filter((item) => item.uniprot));\n        setSearchResults(validHits.filter((item) => item.uniprot));\n    };\n\n    return (\n        <>\n            <h1>AlphaFold Protein Viewer</h1>\n            <form onSubmit={handleSearch}>\n                <label>\n                    Search protein or gene:\n                    <input type=\"text\" id=\"searchTerm\" style={{ width: 600 }} />\n                </label>\n                <input type=\"submit\" />\n            </form>\n            <br />\n            <div>\n                {searchResults &&\n                    searchResults.map((item) => (\n                        <>\n                            <button\n                                onClick={() => submitUrl(item.uniprot)}\n                                disabled={url == \"\"}\n                            >\n                                {item.name} <br /> {item.symbol} <br />\n                                {item.uniprot}\n                            </button>\n                            <br />\n                        </>\n                    ))}\n                {searchResults && (\n                    <button onClick={clear} disabled={!url}>\n                        Clear\n                    </button>\n                )}\n            </div>\n            <div>{url && <Viewer left={250} top={250} url={url}></Viewer>}</div>\n        </>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}