{"ast":null,"code":"import { Mat3 } from './3d/mat3';\n/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\n\nimport { Mat4 } from './3d/mat4';\nexport var Tensor;\n\n(function (Tensor) {\n  function Layout(dimensions, axisOrderSlowToFast, ctor) {\n    // need to reverse the axis order for better access.\n    var axisOrderFastToSlow = [];\n\n    for (var i = 0; i < axisOrderSlowToFast.length; i++) axisOrderFastToSlow[i] = axisOrderSlowToFast[axisOrderSlowToFast.length - i - 1];\n\n    var accessDimensions = [1];\n\n    for (var i = 1; i < dimensions.length; i++) accessDimensions[i] = dimensions[axisOrderFastToSlow[i - 1]];\n\n    return {\n      dimensions: dimensions,\n      axisOrderFastToSlow: axisOrderFastToSlow,\n      axisOrderSlowToFast: axisOrderSlowToFast,\n      accessDimensions: accessDimensions,\n      defaultCtor: ctor || Float64Array\n    };\n  }\n\n  function create(space, data) {\n    return {\n      space: space,\n      data: data\n    };\n  }\n\n  Tensor.create = create;\n\n  function Space(dimensions, axisOrderSlowToFast, ctor) {\n    var layout = Layout(dimensions, axisOrderSlowToFast, ctor);\n\n    var _a = accessors(layout),\n        get = _a.get,\n        set = _a.set,\n        add = _a.add,\n        dataOffset = _a.dataOffset,\n        getCoords = _a.getCoords;\n\n    return {\n      rank: dimensions.length,\n      dimensions: dimensions,\n      axisOrderSlowToFast: axisOrderSlowToFast,\n      create: creator(layout),\n      get: get,\n      set: set,\n      add: add,\n      dataOffset: dataOffset,\n      getCoords: getCoords\n    };\n  }\n\n  Tensor.Space = Space;\n\n  function Data1(values) {\n    return values;\n  }\n\n  Tensor.Data1 = Data1;\n\n  function Vector(d, ctor) {\n    return Space([d], [0], ctor);\n  }\n\n  Tensor.Vector = Vector;\n\n  function ColumnMajorMatrix(rows, cols, ctor) {\n    return Space([rows, cols], [1, 0], ctor);\n  }\n\n  Tensor.ColumnMajorMatrix = ColumnMajorMatrix;\n\n  function RowMajorMatrix(rows, cols, ctor) {\n    return Space([rows, cols], [0, 1], ctor);\n  }\n\n  Tensor.RowMajorMatrix = RowMajorMatrix;\n\n  function toMat4(out, space, data) {\n    if (space.rank !== 2) throw new Error('Invalid tensor rank');\n    var d0 = Math.min(4, space.dimensions[0]),\n        d1 = Math.min(4, space.dimensions[1]);\n\n    for (var i = 0; i < d0; i++) {\n      for (var j = 0; j < d1; j++) Mat4.setValue(out, i, j, space.get(data, i, j));\n    }\n\n    return out;\n  }\n\n  Tensor.toMat4 = toMat4;\n\n  function toMat3(out, space, data) {\n    if (space.rank !== 2) throw new Error('Invalid tensor rank');\n    var d0 = Math.min(3, space.dimensions[0]),\n        d1 = Math.min(3, space.dimensions[1]);\n\n    for (var i = 0; i < d0; i++) {\n      for (var j = 0; j < d1; j++) Mat3.setValue(out, i, j, space.get(data, i, j));\n    }\n\n    return out;\n  }\n\n  Tensor.toMat3 = toMat3;\n\n  function toVec3(out, space, data) {\n    if (space.rank !== 1) throw new Error('Invalid tensor rank');\n    var d0 = Math.min(3, space.dimensions[0]);\n\n    for (var i = 0; i < d0; i++) out[i] = data[i];\n\n    return out;\n  }\n\n  Tensor.toVec3 = toVec3;\n\n  function toVec4(out, space, data) {\n    if (space.rank !== 1) throw new Error('Invalid tensor rank');\n    var d0 = Math.min(4, space.dimensions[0]);\n\n    for (var i = 0; i < d0; i++) out[i] = data[i];\n\n    return out;\n  }\n\n  Tensor.toVec4 = toVec4;\n\n  function areEqualExact(a, b) {\n    var len = a.length;\n    if (len !== b.length) return false;\n\n    for (var i = 0; i < len; i++) if (a[i] !== b[i]) return false;\n\n    return true;\n  }\n\n  Tensor.areEqualExact = areEqualExact;\n\n  function accessors(layout) {\n    var dimensions = layout.dimensions,\n        ao = layout.axisOrderFastToSlow;\n\n    switch (dimensions.length) {\n      case 1:\n        return {\n          get: function (t, d) {\n            return t[d];\n          },\n          set: function (t, d, x) {\n            return t[d] = x;\n          },\n          add: function (t, d, x) {\n            return t[d] += x;\n          },\n          dataOffset: function (d) {\n            return d;\n          },\n          getCoords: function (o, c) {\n            c[0] = o;\n            return c;\n          }\n        };\n\n      case 2:\n        {\n          // column major\n          if (ao[0] === 0 && ao[1] === 1) {\n            var rows_1 = dimensions[0];\n            return {\n              get: function (t, i, j) {\n                return t[j * rows_1 + i];\n              },\n              set: function (t, i, j, x) {\n                return t[j * rows_1 + i] = x;\n              },\n              add: function (t, i, j, x) {\n                return t[j * rows_1 + i] += x;\n              },\n              dataOffset: function (i, j) {\n                return j * rows_1 + i;\n              },\n              getCoords: function (o, c) {\n                c[0] = o % rows_1;\n                c[1] = Math.floor(o / rows_1);\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 1 && ao[1] === 0) {\n            var cols_1 = dimensions[1];\n            return {\n              get: function (t, i, j) {\n                return t[i * cols_1 + j];\n              },\n              set: function (t, i, j, x) {\n                return t[i * cols_1 + j] = x;\n              },\n              add: function (t, i, j, x) {\n                return t[i * cols_1 + j] += x;\n              },\n              dataOffset: function (i, j) {\n                return i * cols_1 + j;\n              },\n              getCoords: function (o, c) {\n                c[0] = Math.floor(o / cols_1);\n                c[1] = o % cols_1;\n                return c;\n              }\n            };\n          }\n\n          throw new Error('bad axis order');\n        }\n\n      case 3:\n        {\n          if (ao[0] === 0 && ao[1] === 1 && ao[2] === 2) {\n            // 012 ijk\n            var u_1 = dimensions[0],\n                v_1 = dimensions[1],\n                uv_1 = u_1 * v_1;\n            return {\n              get: function (t, i, j, k) {\n                return t[i + j * u_1 + k * uv_1];\n              },\n              set: function (t, i, j, k, x) {\n                return t[i + j * u_1 + k * uv_1] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[i + j * u_1 + k * uv_1] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return i + j * u_1 + k * uv_1;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_1);\n                c[0] = o % u_1;\n                c[1] = p % v_1;\n                c[2] = Math.floor(p / v_1);\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 0 && ao[1] === 2 && ao[2] === 1) {\n            // 021 ikj\n            var u_2 = dimensions[0],\n                v_2 = dimensions[2],\n                uv_2 = u_2 * v_2;\n            return {\n              get: function (t, i, j, k) {\n                return t[i + k * u_2 + j * uv_2];\n              },\n              set: function (t, i, j, k, x) {\n                return t[i + k * u_2 + j * uv_2] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[i + k * u_2 + j * uv_2] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return i + k * u_2 + j * uv_2;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_2);\n                c[0] = o % u_2;\n                c[1] = Math.floor(p / v_2);\n                c[2] = p % v_2;\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 1 && ao[1] === 0 && ao[2] === 2) {\n            // 102 jik\n            var u_3 = dimensions[1],\n                v_3 = dimensions[0],\n                uv_3 = u_3 * v_3;\n            return {\n              get: function (t, i, j, k) {\n                return t[j + i * u_3 + k * uv_3];\n              },\n              set: function (t, i, j, k, x) {\n                return t[j + i * u_3 + k * uv_3] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[j + i * u_3 + k * uv_3] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return j + i * u_3 + k * uv_3;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_3);\n                c[0] = p % v_3;\n                c[1] = o % u_3;\n                c[2] = Math.floor(p / v_3);\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 1 && ao[1] === 2 && ao[2] === 0) {\n            // 120 jki\n            var u_4 = dimensions[1],\n                v_4 = dimensions[2],\n                uv_4 = u_4 * v_4;\n            return {\n              get: function (t, i, j, k) {\n                return t[j + k * u_4 + i * uv_4];\n              },\n              set: function (t, i, j, k, x) {\n                return t[j + k * u_4 + i * uv_4] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[j + k * u_4 + i * uv_4] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return j + k * u_4 + i * uv_4;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_4);\n                c[0] = Math.floor(p / v_4);\n                c[1] = o % u_4;\n                c[2] = p % v_4;\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 2 && ao[1] === 0 && ao[2] === 1) {\n            // 201 kij\n            var u_5 = dimensions[2],\n                v_5 = dimensions[0],\n                uv_5 = u_5 * v_5;\n            return {\n              get: function (t, i, j, k) {\n                return t[k + i * u_5 + j * uv_5];\n              },\n              set: function (t, i, j, k, x) {\n                return t[k + i * u_5 + j * uv_5] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[k + i * u_5 + j * uv_5] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return k + i * u_5 + j * uv_5;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_5);\n                c[0] = p % v_5;\n                c[1] = Math.floor(p / v_5);\n                c[2] = o % u_5;\n                return c;\n              }\n            };\n          }\n\n          if (ao[0] === 2 && ao[1] === 1 && ao[2] === 0) {\n            // 210 kji\n            var u_6 = dimensions[2],\n                v_6 = dimensions[1],\n                uv_6 = u_6 * v_6;\n            return {\n              get: function (t, i, j, k) {\n                return t[k + j * u_6 + i * uv_6];\n              },\n              set: function (t, i, j, k, x) {\n                return t[k + j * u_6 + i * uv_6] = x;\n              },\n              add: function (t, i, j, k, x) {\n                return t[k + j * u_6 + i * uv_6] += x;\n              },\n              dataOffset: function (i, j, k) {\n                return k + j * u_6 + i * uv_6;\n              },\n              getCoords: function (o, c) {\n                var p = Math.floor(o / u_6);\n                c[0] = Math.floor(p / v_6);\n                c[1] = p % v_6;\n                c[2] = o % u_6;\n                return c;\n              }\n            };\n          }\n\n          throw new Error('bad axis order');\n        }\n\n      default:\n        return {\n          get: function (t) {\n            var c = [];\n\n            for (var _a = 1; _a < arguments.length; _a++) {\n              c[_a - 1] = arguments[_a];\n            }\n\n            return t[dataOffset(layout, c)];\n          },\n          set: function (t) {\n            var c = [];\n\n            for (var _a = 1; _a < arguments.length; _a++) {\n              c[_a - 1] = arguments[_a];\n            }\n\n            return t[dataOffset(layout, c)] = c[c.length - 1];\n          },\n          add: function (t) {\n            var c = [];\n\n            for (var _a = 1; _a < arguments.length; _a++) {\n              c[_a - 1] = arguments[_a];\n            }\n\n            return t[dataOffset(layout, c)] += c[c.length - 1];\n          },\n          dataOffset: function () {\n            var c = [];\n\n            for (var _a = 0; _a < arguments.length; _a++) {\n              c[_a] = arguments[_a];\n            }\n\n            return dataOffset(layout, c);\n          },\n          getCoords: function (o, c) {\n            return getCoords(layout, o, c);\n          }\n        };\n    }\n  }\n\n  function creator(layout) {\n    var ds = layout.dimensions;\n    var size = 1;\n\n    for (var i = 0, _i = ds.length; i < _i; i++) size *= ds[i];\n\n    return function (ctor) {\n      return new (ctor || layout.defaultCtor)(size);\n    };\n  }\n\n  function dataOffset(layout, coord) {\n    var acc = layout.accessDimensions,\n        ao = layout.axisOrderFastToSlow;\n    var d = acc.length - 1;\n    var o = acc[d] * coord[ao[d]];\n\n    for (var i = d - 1; i >= 0; i--) {\n      o = (o + coord[ao[i]]) * acc[i];\n    }\n\n    return o;\n  }\n\n  function getCoords(layout, o, coords) {\n    var dim = layout.dimensions,\n        ao = layout.axisOrderFastToSlow;\n    var d = dim.length;\n    var c = o;\n\n    for (var i = 0; i < d; i++) {\n      var d_1 = dim[ao[i]];\n      coords[ao[i]] = c % d_1;\n      c = Math.floor(c / d_1);\n    }\n\n    coords[ao[d + 1]] = c;\n    return coords;\n  } // Convers \"slow to fast\" axis order to \"fast to slow\" and vice versa.\n\n\n  function invertAxisOrder(v) {\n    var ret = [];\n\n    for (var i = 0; i < v.length; i++) {\n      ret[i] = v[v.length - i - 1];\n    }\n\n    return ret;\n  }\n\n  Tensor.invertAxisOrder = invertAxisOrder;\n\n  function reorder(xs, indices) {\n    var ret = [];\n\n    for (var i = 0; i < xs.length; i++) ret[i] = xs[indices[i]];\n\n    return ret;\n  }\n\n  function convertToCanonicalAxisIndicesFastToSlow(order) {\n    var indices = new Int32Array(order.length);\n\n    for (var i = 0; i < order.length; i++) indices[order[i]] = i;\n\n    return function (xs) {\n      return reorder(xs, indices);\n    };\n  }\n\n  Tensor.convertToCanonicalAxisIndicesFastToSlow = convertToCanonicalAxisIndicesFastToSlow;\n\n  function convertToCanonicalAxisIndicesSlowToFast(order) {\n    var indices = new Int32Array(order.length);\n\n    for (var i = 0; i < order.length; i++) indices[order[order.length - i - 1]] = i;\n\n    return function (xs) {\n      return reorder(xs, indices);\n    };\n  }\n\n  Tensor.convertToCanonicalAxisIndicesSlowToFast = convertToCanonicalAxisIndicesSlowToFast;\n})(Tensor || (Tensor = {}));","map":{"version":3,"sources":["../../../src/mol-math/linear-algebra/tensor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Mat3 } from './3d/mat3';\r\n/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Mat4 } from './3d/mat4';\r\nexport var Tensor;\r\n(function (Tensor) {\r\n    function Layout(dimensions, axisOrderSlowToFast, ctor) {\r\n        // need to reverse the axis order for better access.\r\n        var axisOrderFastToSlow = [];\r\n        for (var i = 0; i < axisOrderSlowToFast.length; i++)\r\n            axisOrderFastToSlow[i] = axisOrderSlowToFast[axisOrderSlowToFast.length - i - 1];\r\n        var accessDimensions = [1];\r\n        for (var i = 1; i < dimensions.length; i++)\r\n            accessDimensions[i] = dimensions[axisOrderFastToSlow[i - 1]];\r\n        return { dimensions: dimensions, axisOrderFastToSlow: axisOrderFastToSlow, axisOrderSlowToFast: axisOrderSlowToFast, accessDimensions: accessDimensions, defaultCtor: ctor || Float64Array };\r\n    }\r\n    function create(space, data) { return { space: space, data: data }; }\r\n    Tensor.create = create;\r\n    function Space(dimensions, axisOrderSlowToFast, ctor) {\r\n        var layout = Layout(dimensions, axisOrderSlowToFast, ctor);\r\n        var _a = accessors(layout), get = _a.get, set = _a.set, add = _a.add, dataOffset = _a.dataOffset, getCoords = _a.getCoords;\r\n        return { rank: dimensions.length, dimensions: dimensions, axisOrderSlowToFast: axisOrderSlowToFast, create: creator(layout), get: get, set: set, add: add, dataOffset: dataOffset, getCoords: getCoords };\r\n    }\r\n    Tensor.Space = Space;\r\n    function Data1(values) { return values; }\r\n    Tensor.Data1 = Data1;\r\n    function Vector(d, ctor) { return Space([d], [0], ctor); }\r\n    Tensor.Vector = Vector;\r\n    function ColumnMajorMatrix(rows, cols, ctor) { return Space([rows, cols], [1, 0], ctor); }\r\n    Tensor.ColumnMajorMatrix = ColumnMajorMatrix;\r\n    function RowMajorMatrix(rows, cols, ctor) { return Space([rows, cols], [0, 1], ctor); }\r\n    Tensor.RowMajorMatrix = RowMajorMatrix;\r\n    function toMat4(out, space, data) {\r\n        if (space.rank !== 2)\r\n            throw new Error('Invalid tensor rank');\r\n        var d0 = Math.min(4, space.dimensions[0]), d1 = Math.min(4, space.dimensions[1]);\r\n        for (var i = 0; i < d0; i++) {\r\n            for (var j = 0; j < d1; j++)\r\n                Mat4.setValue(out, i, j, space.get(data, i, j));\r\n        }\r\n        return out;\r\n    }\r\n    Tensor.toMat4 = toMat4;\r\n    function toMat3(out, space, data) {\r\n        if (space.rank !== 2)\r\n            throw new Error('Invalid tensor rank');\r\n        var d0 = Math.min(3, space.dimensions[0]), d1 = Math.min(3, space.dimensions[1]);\r\n        for (var i = 0; i < d0; i++) {\r\n            for (var j = 0; j < d1; j++)\r\n                Mat3.setValue(out, i, j, space.get(data, i, j));\r\n        }\r\n        return out;\r\n    }\r\n    Tensor.toMat3 = toMat3;\r\n    function toVec3(out, space, data) {\r\n        if (space.rank !== 1)\r\n            throw new Error('Invalid tensor rank');\r\n        var d0 = Math.min(3, space.dimensions[0]);\r\n        for (var i = 0; i < d0; i++)\r\n            out[i] = data[i];\r\n        return out;\r\n    }\r\n    Tensor.toVec3 = toVec3;\r\n    function toVec4(out, space, data) {\r\n        if (space.rank !== 1)\r\n            throw new Error('Invalid tensor rank');\r\n        var d0 = Math.min(4, space.dimensions[0]);\r\n        for (var i = 0; i < d0; i++)\r\n            out[i] = data[i];\r\n        return out;\r\n    }\r\n    Tensor.toVec4 = toVec4;\r\n    function areEqualExact(a, b) {\r\n        var len = a.length;\r\n        if (len !== b.length)\r\n            return false;\r\n        for (var i = 0; i < len; i++)\r\n            if (a[i] !== b[i])\r\n                return false;\r\n        return true;\r\n    }\r\n    Tensor.areEqualExact = areEqualExact;\r\n    function accessors(layout) {\r\n        var dimensions = layout.dimensions, ao = layout.axisOrderFastToSlow;\r\n        switch (dimensions.length) {\r\n            case 1: return {\r\n                get: function (t, d) { return t[d]; },\r\n                set: function (t, d, x) { return t[d] = x; },\r\n                add: function (t, d, x) { return t[d] += x; },\r\n                dataOffset: function (d) { return d; },\r\n                getCoords: function (o, c) {\r\n                    c[0] = o;\r\n                    return c;\r\n                }\r\n            };\r\n            case 2: {\r\n                // column major\r\n                if (ao[0] === 0 && ao[1] === 1) {\r\n                    var rows_1 = dimensions[0];\r\n                    return {\r\n                        get: function (t, i, j) { return t[j * rows_1 + i]; },\r\n                        set: function (t, i, j, x) { return t[j * rows_1 + i] = x; },\r\n                        add: function (t, i, j, x) { return t[j * rows_1 + i] += x; },\r\n                        dataOffset: function (i, j) { return j * rows_1 + i; },\r\n                        getCoords: function (o, c) {\r\n                            c[0] = o % rows_1;\r\n                            c[1] = Math.floor(o / rows_1);\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 1 && ao[1] === 0) {\r\n                    var cols_1 = dimensions[1];\r\n                    return {\r\n                        get: function (t, i, j) { return t[i * cols_1 + j]; },\r\n                        set: function (t, i, j, x) { return t[i * cols_1 + j] = x; },\r\n                        add: function (t, i, j, x) { return t[i * cols_1 + j] += x; },\r\n                        dataOffset: function (i, j) { return i * cols_1 + j; },\r\n                        getCoords: function (o, c) {\r\n                            c[0] = Math.floor(o / cols_1);\r\n                            c[1] = o % cols_1;\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                throw new Error('bad axis order');\r\n            }\r\n            case 3: {\r\n                if (ao[0] === 0 && ao[1] === 1 && ao[2] === 2) { // 012 ijk\r\n                    var u_1 = dimensions[0], v_1 = dimensions[1], uv_1 = u_1 * v_1;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[i + j * u_1 + k * uv_1]; },\r\n                        set: function (t, i, j, k, x) { return t[i + j * u_1 + k * uv_1] = x; },\r\n                        add: function (t, i, j, k, x) { return t[i + j * u_1 + k * uv_1] += x; },\r\n                        dataOffset: function (i, j, k) { return i + j * u_1 + k * uv_1; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_1);\r\n                            c[0] = o % u_1;\r\n                            c[1] = p % v_1;\r\n                            c[2] = Math.floor(p / v_1);\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 0 && ao[1] === 2 && ao[2] === 1) { // 021 ikj\r\n                    var u_2 = dimensions[0], v_2 = dimensions[2], uv_2 = u_2 * v_2;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[i + k * u_2 + j * uv_2]; },\r\n                        set: function (t, i, j, k, x) { return t[i + k * u_2 + j * uv_2] = x; },\r\n                        add: function (t, i, j, k, x) { return t[i + k * u_2 + j * uv_2] += x; },\r\n                        dataOffset: function (i, j, k) { return i + k * u_2 + j * uv_2; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_2);\r\n                            c[0] = o % u_2;\r\n                            c[1] = Math.floor(p / v_2);\r\n                            c[2] = p % v_2;\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 1 && ao[1] === 0 && ao[2] === 2) { // 102 jik\r\n                    var u_3 = dimensions[1], v_3 = dimensions[0], uv_3 = u_3 * v_3;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[j + i * u_3 + k * uv_3]; },\r\n                        set: function (t, i, j, k, x) { return t[j + i * u_3 + k * uv_3] = x; },\r\n                        add: function (t, i, j, k, x) { return t[j + i * u_3 + k * uv_3] += x; },\r\n                        dataOffset: function (i, j, k) { return j + i * u_3 + k * uv_3; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_3);\r\n                            c[0] = p % v_3;\r\n                            c[1] = o % u_3;\r\n                            c[2] = Math.floor(p / v_3);\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 1 && ao[1] === 2 && ao[2] === 0) { // 120 jki\r\n                    var u_4 = dimensions[1], v_4 = dimensions[2], uv_4 = u_4 * v_4;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[j + k * u_4 + i * uv_4]; },\r\n                        set: function (t, i, j, k, x) { return t[j + k * u_4 + i * uv_4] = x; },\r\n                        add: function (t, i, j, k, x) { return t[j + k * u_4 + i * uv_4] += x; },\r\n                        dataOffset: function (i, j, k) { return j + k * u_4 + i * uv_4; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_4);\r\n                            c[0] = Math.floor(p / v_4);\r\n                            c[1] = o % u_4;\r\n                            c[2] = p % v_4;\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 2 && ao[1] === 0 && ao[2] === 1) { // 201 kij\r\n                    var u_5 = dimensions[2], v_5 = dimensions[0], uv_5 = u_5 * v_5;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[k + i * u_5 + j * uv_5]; },\r\n                        set: function (t, i, j, k, x) { return t[k + i * u_5 + j * uv_5] = x; },\r\n                        add: function (t, i, j, k, x) { return t[k + i * u_5 + j * uv_5] += x; },\r\n                        dataOffset: function (i, j, k) { return k + i * u_5 + j * uv_5; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_5);\r\n                            c[0] = p % v_5;\r\n                            c[1] = Math.floor(p / v_5);\r\n                            c[2] = o % u_5;\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                if (ao[0] === 2 && ao[1] === 1 && ao[2] === 0) { // 210 kji\r\n                    var u_6 = dimensions[2], v_6 = dimensions[1], uv_6 = u_6 * v_6;\r\n                    return {\r\n                        get: function (t, i, j, k) { return t[k + j * u_6 + i * uv_6]; },\r\n                        set: function (t, i, j, k, x) { return t[k + j * u_6 + i * uv_6] = x; },\r\n                        add: function (t, i, j, k, x) { return t[k + j * u_6 + i * uv_6] += x; },\r\n                        dataOffset: function (i, j, k) { return k + j * u_6 + i * uv_6; },\r\n                        getCoords: function (o, c) {\r\n                            var p = Math.floor(o / u_6);\r\n                            c[0] = Math.floor(p / v_6);\r\n                            c[1] = p % v_6;\r\n                            c[2] = o % u_6;\r\n                            return c;\r\n                        }\r\n                    };\r\n                }\r\n                throw new Error('bad axis order');\r\n            }\r\n            default: return {\r\n                get: function (t) {\r\n                    var c = [];\r\n                    for (var _a = 1; _a < arguments.length; _a++) {\r\n                        c[_a - 1] = arguments[_a];\r\n                    }\r\n                    return t[dataOffset(layout, c)];\r\n                },\r\n                set: function (t) {\r\n                    var c = [];\r\n                    for (var _a = 1; _a < arguments.length; _a++) {\r\n                        c[_a - 1] = arguments[_a];\r\n                    }\r\n                    return t[dataOffset(layout, c)] = c[c.length - 1];\r\n                },\r\n                add: function (t) {\r\n                    var c = [];\r\n                    for (var _a = 1; _a < arguments.length; _a++) {\r\n                        c[_a - 1] = arguments[_a];\r\n                    }\r\n                    return t[dataOffset(layout, c)] += c[c.length - 1];\r\n                },\r\n                dataOffset: function () {\r\n                    var c = [];\r\n                    for (var _a = 0; _a < arguments.length; _a++) {\r\n                        c[_a] = arguments[_a];\r\n                    }\r\n                    return dataOffset(layout, c);\r\n                },\r\n                getCoords: function (o, c) { return getCoords(layout, o, c); },\r\n            };\r\n        }\r\n    }\r\n    function creator(layout) {\r\n        var ds = layout.dimensions;\r\n        var size = 1;\r\n        for (var i = 0, _i = ds.length; i < _i; i++)\r\n            size *= ds[i];\r\n        return function (ctor) { return new (ctor || layout.defaultCtor)(size); };\r\n    }\r\n    function dataOffset(layout, coord) {\r\n        var acc = layout.accessDimensions, ao = layout.axisOrderFastToSlow;\r\n        var d = acc.length - 1;\r\n        var o = acc[d] * coord[ao[d]];\r\n        for (var i = d - 1; i >= 0; i--) {\r\n            o = (o + coord[ao[i]]) * acc[i];\r\n        }\r\n        return o;\r\n    }\r\n    function getCoords(layout, o, coords) {\r\n        var dim = layout.dimensions, ao = layout.axisOrderFastToSlow;\r\n        var d = dim.length;\r\n        var c = o;\r\n        for (var i = 0; i < d; i++) {\r\n            var d_1 = dim[ao[i]];\r\n            coords[ao[i]] = c % d_1;\r\n            c = Math.floor(c / d_1);\r\n        }\r\n        coords[ao[d + 1]] = c;\r\n        return coords;\r\n    }\r\n    // Convers \"slow to fast\" axis order to \"fast to slow\" and vice versa.\r\n    function invertAxisOrder(v) {\r\n        var ret = [];\r\n        for (var i = 0; i < v.length; i++) {\r\n            ret[i] = v[v.length - i - 1];\r\n        }\r\n        return ret;\r\n    }\r\n    Tensor.invertAxisOrder = invertAxisOrder;\r\n    function reorder(xs, indices) {\r\n        var ret = [];\r\n        for (var i = 0; i < xs.length; i++)\r\n            ret[i] = xs[indices[i]];\r\n        return ret;\r\n    }\r\n    function convertToCanonicalAxisIndicesFastToSlow(order) {\r\n        var indices = new Int32Array(order.length);\r\n        for (var i = 0; i < order.length; i++)\r\n            indices[order[i]] = i;\r\n        return function (xs) { return reorder(xs, indices); };\r\n    }\r\n    Tensor.convertToCanonicalAxisIndicesFastToSlow = convertToCanonicalAxisIndicesFastToSlow;\r\n    function convertToCanonicalAxisIndicesSlowToFast(order) {\r\n        var indices = new Int32Array(order.length);\r\n        for (var i = 0; i < order.length; i++)\r\n            indices[order[order.length - i - 1]] = i;\r\n        return function (xs) { return reorder(xs, indices); };\r\n    }\r\n    Tensor.convertToCanonicalAxisIndicesSlowToFast = convertToCanonicalAxisIndicesSlowToFast;\r\n})(Tensor || (Tensor = {}));\r\n//# sourceMappingURL=tensor.js.map"]},"metadata":{},"sourceType":"module"}