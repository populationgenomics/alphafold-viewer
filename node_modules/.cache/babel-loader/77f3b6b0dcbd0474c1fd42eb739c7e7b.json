{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ChunkedArray } from '../../../mol-data/util';\nimport { Lines } from './lines';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nvar tmpVecA = Vec3();\nvar tmpVecB = Vec3();\nvar tmpDir = Vec3(); // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar caAdd = ChunkedArray.add;\nvar caAdd3 = ChunkedArray.add3;\nexport var LinesBuilder;\n\n(function (LinesBuilder) {\n  function create(initialCount, chunkSize, lines) {\n    if (initialCount === void 0) {\n      initialCount = 2048;\n    }\n\n    if (chunkSize === void 0) {\n      chunkSize = 1024;\n    }\n\n    var groups = ChunkedArray.create(Float32Array, 1, chunkSize, lines ? lines.groupBuffer.ref.value : initialCount);\n    var starts = ChunkedArray.create(Float32Array, 3, chunkSize, lines ? lines.startBuffer.ref.value : initialCount);\n    var ends = ChunkedArray.create(Float32Array, 3, chunkSize, lines ? lines.endBuffer.ref.value : initialCount);\n\n    var add = function (startX, startY, startZ, endX, endY, endZ, group) {\n      for (var i = 0; i < 4; ++i) {\n        caAdd3(starts, startX, startY, startZ);\n        caAdd3(ends, endX, endY, endZ);\n        caAdd(groups, group);\n      }\n    };\n\n    var addVec = function (start, end, group) {\n      for (var i = 0; i < 4; ++i) {\n        caAdd3(starts, start[0], start[1], start[2]);\n        caAdd3(ends, end[0], end[1], end[2]);\n        caAdd(groups, group);\n      }\n    };\n\n    var addFixedCountDashes = function (start, end, segmentCount, group) {\n      var d = Vec3.distance(start, end);\n      var s = Math.floor(segmentCount / 2);\n      var step = 1 / segmentCount;\n      Vec3.sub(tmpDir, end, start);\n\n      for (var j = 0; j < s; ++j) {\n        var f = step * (j * 2 + 1);\n        Vec3.setMagnitude(tmpDir, tmpDir, d * f);\n        Vec3.add(tmpVecA, start, tmpDir);\n        Vec3.setMagnitude(tmpDir, tmpDir, d * step * ((j + 1) * 2));\n        Vec3.add(tmpVecB, start, tmpDir);\n        add(tmpVecA[0], tmpVecA[1], tmpVecA[2], tmpVecB[0], tmpVecB[1], tmpVecB[2], group);\n      }\n    };\n\n    return {\n      add: add,\n      addVec: addVec,\n      addFixedCountDashes: addFixedCountDashes,\n      addFixedLengthDashes: function (start, end, segmentLength, group) {\n        var d = Vec3.distance(start, end);\n        addFixedCountDashes(start, end, d / segmentLength, group);\n      },\n      addCage: function (t, cage, group) {\n        var vertices = cage.vertices,\n            edges = cage.edges;\n\n        for (var i = 0, il = edges.length; i < il; i += 2) {\n          Vec3.fromArray(tmpVecA, vertices, edges[i] * 3);\n          Vec3.fromArray(tmpVecB, vertices, edges[i + 1] * 3);\n          Vec3.transformMat4(tmpVecA, tmpVecA, t);\n          Vec3.transformMat4(tmpVecB, tmpVecB, t);\n          add(tmpVecA[0], tmpVecA[1], tmpVecA[2], tmpVecB[0], tmpVecB[1], tmpVecB[2], group);\n        }\n      },\n      getLines: function () {\n        var lineCount = groups.elementCount / 4;\n        var gb = ChunkedArray.compact(groups, true);\n        var sb = ChunkedArray.compact(starts, true);\n        var eb = ChunkedArray.compact(ends, true);\n        var mb = lines && lineCount <= lines.lineCount ? lines.mappingBuffer.ref.value : new Float32Array(lineCount * 8);\n        var ib = lines && lineCount <= lines.lineCount ? lines.indexBuffer.ref.value : new Uint32Array(lineCount * 6);\n        if (!lines || lineCount > lines.lineCount) fillMappingAndIndices(lineCount, mb, ib);\n        return Lines.create(mb, ib, gb, sb, eb, lineCount, lines);\n      }\n    };\n  }\n\n  LinesBuilder.create = create;\n})(LinesBuilder || (LinesBuilder = {}));\n\nfunction fillMappingAndIndices(n, mb, ib) {\n  for (var i = 0; i < n; ++i) {\n    var mo = i * 8;\n    mb[mo] = -1;\n    mb[mo + 1] = -1;\n    mb[mo + 2] = 1;\n    mb[mo + 3] = -1;\n    mb[mo + 4] = -1;\n    mb[mo + 5] = 1;\n    mb[mo + 6] = 1;\n    mb[mo + 7] = 1;\n  }\n\n  for (var i = 0; i < n; ++i) {\n    var o = i * 4;\n    var io = i * 6;\n    ib[io] = o;\n    ib[io + 1] = o + 1;\n    ib[io + 2] = o + 2;\n    ib[io + 3] = o + 1;\n    ib[io + 4] = o + 3;\n    ib[io + 5] = o + 2;\n  }\n}","map":{"version":3,"sources":["../../../../src/mol-geo/geometry/lines/lines-builder.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,YAAT,QAA6B,wBAA7B;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAe,IAAf,QAA2B,kCAA3B;AAYA,IAAM,OAAO,GAAG,IAAI,EAApB;AACA,IAAM,OAAO,GAAG,IAAI,EAApB;AACA,IAAM,MAAM,GAAG,IAAI,EAAnB,C,CAEA;;AACA,IAAM,KAAK,GAAG,YAAY,CAAC,GAA3B;AACA,IAAM,MAAM,GAAG,YAAY,CAAC,IAA5B;AAEA,OAAM,IAAW,YAAX;;AAAN,CAAA,UAAiB,YAAjB,EAA6B;AACzB,WAAgB,MAAhB,CAAuB,YAAvB,EAA4C,SAA5C,EAA8D,KAA9D,EAA2E;AAApD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,IAAA;AAAmB;;AAAE,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,IAAA;AAAgB;;AACxD,QAAM,MAAM,GAAG,YAAY,CAAC,MAAb,CAAoB,YAApB,EAAkC,CAAlC,EAAqC,SAArC,EAAgD,KAAK,GAAG,KAAK,CAAC,WAAN,CAAkB,GAAlB,CAAsB,KAAzB,GAAiC,YAAtF,CAAf;AACA,QAAM,MAAM,GAAG,YAAY,CAAC,MAAb,CAAoB,YAApB,EAAkC,CAAlC,EAAqC,SAArC,EAAgD,KAAK,GAAG,KAAK,CAAC,WAAN,CAAkB,GAAlB,CAAsB,KAAzB,GAAiC,YAAtF,CAAf;AACA,QAAM,IAAI,GAAG,YAAY,CAAC,MAAb,CAAoB,YAApB,EAAkC,CAAlC,EAAqC,SAArC,EAAgD,KAAK,GAAG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,KAAvB,GAA+B,YAApF,CAAb;;AAEA,QAAM,GAAG,GAAG,UAAC,MAAD,EAAiB,MAAjB,EAAiC,MAAjC,EAAiD,IAAjD,EAA+D,IAA/D,EAA6E,IAA7E,EAA2F,KAA3F,EAAwG;AAChH,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,QAAA,MAAM,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAN;AACA,QAAA,MAAM,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAN;AACA,QAAA,KAAK,CAAC,MAAD,EAAS,KAAT,CAAL;AACH;AACJ,KAND;;AAQA,QAAM,MAAM,GAAG,UAAC,KAAD,EAAc,GAAd,EAAyB,KAAzB,EAAsC;AACjD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,QAAA,MAAM,CAAC,MAAD,EAAS,KAAK,CAAC,CAAD,CAAd,EAAmB,KAAK,CAAC,CAAD,CAAxB,EAA6B,KAAK,CAAC,CAAD,CAAlC,CAAN;AACA,QAAA,MAAM,CAAC,IAAD,EAAO,GAAG,CAAC,CAAD,CAAV,EAAe,GAAG,CAAC,CAAD,CAAlB,EAAuB,GAAG,CAAC,CAAD,CAA1B,CAAN;AACA,QAAA,KAAK,CAAC,MAAD,EAAS,KAAT,CAAL;AACH;AACJ,KAND;;AAQA,QAAM,mBAAmB,GAAG,UAAC,KAAD,EAAc,GAAd,EAAyB,YAAzB,EAA+C,KAA/C,EAA4D;AACpF,UAAM,CAAC,GAAG,IAAI,CAAC,QAAL,CAAc,KAAd,EAAqB,GAArB,CAAV;AACA,UAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,GAAG,CAA1B,CAAV;AACA,UAAM,IAAI,GAAG,IAAI,YAAjB;AAEA,MAAA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,GAAjB,EAAsB,KAAtB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,YAAM,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAJ,GAAQ,CAAZ,CAAd;AACA,QAAA,IAAI,CAAC,YAAL,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,CAAC,GAAG,CAAtC;AACA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,KAAlB,EAAyB,MAAzB;AACA,QAAA,IAAI,CAAC,YAAL,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC,CAAC,GAAG,IAAJ,IAAY,CAAC,CAAC,GAAG,CAAL,IAAU,CAAtB,CAAlC;AACA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,KAAlB,EAAyB,MAAzB;AACA,QAAA,GAAG,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,OAAO,CAAC,CAAD,CAApB,EAAyB,OAAO,CAAC,CAAD,CAAhC,EAAqC,OAAO,CAAC,CAAD,CAA5C,EAAiD,OAAO,CAAC,CAAD,CAAxD,EAA6D,OAAO,CAAC,CAAD,CAApE,EAAyE,KAAzE,CAAH;AACH;AACJ,KAdD;;AAgBA,WAAO;AACH,MAAA,GAAG,EAAA,GADA;AAEH,MAAA,MAAM,EAAA,MAFH;AAGH,MAAA,mBAAmB,EAAA,mBAHhB;AAIH,MAAA,oBAAoB,EAAE,UAAC,KAAD,EAAc,GAAd,EAAyB,aAAzB,EAAgD,KAAhD,EAA6D;AAC/E,YAAM,CAAC,GAAG,IAAI,CAAC,QAAL,CAAc,KAAd,EAAqB,GAArB,CAAV;AACA,QAAA,mBAAmB,CAAC,KAAD,EAAQ,GAAR,EAAa,CAAC,GAAG,aAAjB,EAAgC,KAAhC,CAAnB;AACH,OAPE;AAQH,MAAA,OAAO,EAAE,UAAC,CAAD,EAAU,IAAV,EAAsB,KAAtB,EAAmC;AAChC,YAAA,QAAQ,GAAY,IAAI,CAAhB,QAAR;AAAA,YAAU,KAAK,GAAK,IAAI,CAAT,KAAf;;AACR,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,CAAC,IAAI,CAAhD,EAAmD;AAC/C,UAAA,IAAI,CAAC,SAAL,CAAe,OAAf,EAAwB,QAAxB,EAAkC,KAAK,CAAC,CAAD,CAAL,GAAW,CAA7C;AACA,UAAA,IAAI,CAAC,SAAL,CAAe,OAAf,EAAwB,QAAxB,EAAkC,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,GAAe,CAAjD;AACA,UAAA,IAAI,CAAC,aAAL,CAAmB,OAAnB,EAA4B,OAA5B,EAAqC,CAArC;AACA,UAAA,IAAI,CAAC,aAAL,CAAmB,OAAnB,EAA4B,OAA5B,EAAqC,CAArC;AACA,UAAA,GAAG,CAAC,OAAO,CAAC,CAAD,CAAR,EAAa,OAAO,CAAC,CAAD,CAApB,EAAyB,OAAO,CAAC,CAAD,CAAhC,EAAqC,OAAO,CAAC,CAAD,CAA5C,EAAiD,OAAO,CAAC,CAAD,CAAxD,EAA6D,OAAO,CAAC,CAAD,CAApE,EAAyE,KAAzE,CAAH;AACH;AACJ,OAjBE;AAkBH,MAAA,QAAQ,EAAE,YAAA;AACN,YAAM,SAAS,GAAG,MAAM,CAAC,YAAP,GAAsB,CAAxC;AACA,YAAM,EAAE,GAAG,YAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,IAA7B,CAAX;AACA,YAAM,EAAE,GAAG,YAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,IAA7B,CAAX;AACA,YAAM,EAAE,GAAG,YAAY,CAAC,OAAb,CAAqB,IAArB,EAA2B,IAA3B,CAAX;AACA,YAAM,EAAE,GAAG,KAAK,IAAI,SAAS,IAAI,KAAK,CAAC,SAA5B,GAAwC,KAAK,CAAC,aAAN,CAAoB,GAApB,CAAwB,KAAhE,GAAwE,IAAI,YAAJ,CAAiB,SAAS,GAAG,CAA7B,CAAnF;AACA,YAAM,EAAE,GAAG,KAAK,IAAI,SAAS,IAAI,KAAK,CAAC,SAA5B,GAAwC,KAAK,CAAC,WAAN,CAAkB,GAAlB,CAAsB,KAA9D,GAAsE,IAAI,WAAJ,CAAgB,SAAS,GAAG,CAA5B,CAAjF;AACA,YAAI,CAAC,KAAD,IAAU,SAAS,GAAG,KAAK,CAAC,SAAhC,EAA2C,qBAAqB,CAAC,SAAD,EAAY,EAAZ,EAAgB,EAAhB,CAArB;AAC3C,eAAO,KAAK,CAAC,MAAN,CAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,SAAjC,EAA4C,KAA5C,CAAP;AACH;AA3BE,KAAP;AA6BH;;AAlEe,EAAA,YAAA,CAAA,MAAA,GAAM,MAAN;AAmEnB,CApED,EAAiB,YAAY,KAAZ,YAAY,GAAA,EAAA,CAA7B;;AAsEA,SAAS,qBAAT,CAA+B,CAA/B,EAA0C,EAA1C,EAA4D,EAA5D,EAA2E;AACvE,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,QAAM,EAAE,GAAG,CAAC,GAAG,CAAf;AACA,IAAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAC,CAAV;AAAa,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,CAAd;AACb,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAb;AAAgB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,CAAd;AAChB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,CAAd;AAAiB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAb;AACjB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAb;AAAgB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAb;AACnB;;AAED,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,QAAM,CAAC,GAAG,CAAC,GAAG,CAAd;AACA,QAAM,EAAE,GAAG,CAAC,GAAG,CAAf;AACA,IAAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;AAAY,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,GAAG,CAAjB;AAAoB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,GAAG,CAAjB;AAChC,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,GAAG,CAAjB;AAAoB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,GAAG,CAAjB;AAAoB,IAAA,EAAE,CAAC,EAAE,GAAG,CAAN,CAAF,GAAa,CAAC,GAAG,CAAjB;AAC3C;AACJ","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ChunkedArray } from '../../../mol-data/util';\r\nimport { Lines } from './lines';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nvar tmpVecA = Vec3();\r\nvar tmpVecB = Vec3();\r\nvar tmpDir = Vec3();\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar caAdd = ChunkedArray.add;\r\nvar caAdd3 = ChunkedArray.add3;\r\nexport var LinesBuilder;\r\n(function (LinesBuilder) {\r\n    function create(initialCount, chunkSize, lines) {\r\n        if (initialCount === void 0) { initialCount = 2048; }\r\n        if (chunkSize === void 0) { chunkSize = 1024; }\r\n        var groups = ChunkedArray.create(Float32Array, 1, chunkSize, lines ? lines.groupBuffer.ref.value : initialCount);\r\n        var starts = ChunkedArray.create(Float32Array, 3, chunkSize, lines ? lines.startBuffer.ref.value : initialCount);\r\n        var ends = ChunkedArray.create(Float32Array, 3, chunkSize, lines ? lines.endBuffer.ref.value : initialCount);\r\n        var add = function (startX, startY, startZ, endX, endY, endZ, group) {\r\n            for (var i = 0; i < 4; ++i) {\r\n                caAdd3(starts, startX, startY, startZ);\r\n                caAdd3(ends, endX, endY, endZ);\r\n                caAdd(groups, group);\r\n            }\r\n        };\r\n        var addVec = function (start, end, group) {\r\n            for (var i = 0; i < 4; ++i) {\r\n                caAdd3(starts, start[0], start[1], start[2]);\r\n                caAdd3(ends, end[0], end[1], end[2]);\r\n                caAdd(groups, group);\r\n            }\r\n        };\r\n        var addFixedCountDashes = function (start, end, segmentCount, group) {\r\n            var d = Vec3.distance(start, end);\r\n            var s = Math.floor(segmentCount / 2);\r\n            var step = 1 / segmentCount;\r\n            Vec3.sub(tmpDir, end, start);\r\n            for (var j = 0; j < s; ++j) {\r\n                var f = step * (j * 2 + 1);\r\n                Vec3.setMagnitude(tmpDir, tmpDir, d * f);\r\n                Vec3.add(tmpVecA, start, tmpDir);\r\n                Vec3.setMagnitude(tmpDir, tmpDir, d * step * ((j + 1) * 2));\r\n                Vec3.add(tmpVecB, start, tmpDir);\r\n                add(tmpVecA[0], tmpVecA[1], tmpVecA[2], tmpVecB[0], tmpVecB[1], tmpVecB[2], group);\r\n            }\r\n        };\r\n        return {\r\n            add: add,\r\n            addVec: addVec,\r\n            addFixedCountDashes: addFixedCountDashes,\r\n            addFixedLengthDashes: function (start, end, segmentLength, group) {\r\n                var d = Vec3.distance(start, end);\r\n                addFixedCountDashes(start, end, d / segmentLength, group);\r\n            },\r\n            addCage: function (t, cage, group) {\r\n                var vertices = cage.vertices, edges = cage.edges;\r\n                for (var i = 0, il = edges.length; i < il; i += 2) {\r\n                    Vec3.fromArray(tmpVecA, vertices, edges[i] * 3);\r\n                    Vec3.fromArray(tmpVecB, vertices, edges[i + 1] * 3);\r\n                    Vec3.transformMat4(tmpVecA, tmpVecA, t);\r\n                    Vec3.transformMat4(tmpVecB, tmpVecB, t);\r\n                    add(tmpVecA[0], tmpVecA[1], tmpVecA[2], tmpVecB[0], tmpVecB[1], tmpVecB[2], group);\r\n                }\r\n            },\r\n            getLines: function () {\r\n                var lineCount = groups.elementCount / 4;\r\n                var gb = ChunkedArray.compact(groups, true);\r\n                var sb = ChunkedArray.compact(starts, true);\r\n                var eb = ChunkedArray.compact(ends, true);\r\n                var mb = lines && lineCount <= lines.lineCount ? lines.mappingBuffer.ref.value : new Float32Array(lineCount * 8);\r\n                var ib = lines && lineCount <= lines.lineCount ? lines.indexBuffer.ref.value : new Uint32Array(lineCount * 6);\r\n                if (!lines || lineCount > lines.lineCount)\r\n                    fillMappingAndIndices(lineCount, mb, ib);\r\n                return Lines.create(mb, ib, gb, sb, eb, lineCount, lines);\r\n            }\r\n        };\r\n    }\r\n    LinesBuilder.create = create;\r\n})(LinesBuilder || (LinesBuilder = {}));\r\nfunction fillMappingAndIndices(n, mb, ib) {\r\n    for (var i = 0; i < n; ++i) {\r\n        var mo = i * 8;\r\n        mb[mo] = -1;\r\n        mb[mo + 1] = -1;\r\n        mb[mo + 2] = 1;\r\n        mb[mo + 3] = -1;\r\n        mb[mo + 4] = -1;\r\n        mb[mo + 5] = 1;\r\n        mb[mo + 6] = 1;\r\n        mb[mo + 7] = 1;\r\n    }\r\n    for (var i = 0; i < n; ++i) {\r\n        var o = i * 4;\r\n        var io = i * 6;\r\n        ib[io] = o;\r\n        ib[io + 1] = o + 1;\r\n        ib[io + 2] = o + 2;\r\n        ib[io + 3] = o + 1;\r\n        ib[io + 4] = o + 3;\r\n        ib[io + 5] = o + 2;\r\n    }\r\n}\r\n//# sourceMappingURL=lines-builder.js.map"]},"metadata":{},"sourceType":"module"}