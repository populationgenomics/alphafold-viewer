{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { StructureRepresentationStateBuilder } from './representation';\nimport { Structure, StructureElement, Bond } from '../../mol-model/structure';\nimport { Subject } from 'rxjs';\nimport { getNextMaterialId } from '../../mol-gl/render-object';\nimport { Theme } from '../../mol-theme/theme';\nimport { Task } from '../../mol-task';\nimport { Loci, EmptyLoci, isEmptyLoci, isEveryLoci, isDataLoci, EveryLoci } from '../../mol-model/loci';\nimport { MarkerAction, MarkerActions, applyMarkerAction } from '../../mol-util/marker-action';\nimport { Overpaint } from '../../mol-theme/overpaint';\nimport { Transparency } from '../../mol-theme/transparency';\nimport { Mat4, EPSILON } from '../../mol-math/linear-algebra';\nimport { Interval } from '../../mol-data/int';\nimport { Clipping } from '../../mol-theme/clipping';\nexport function UnitsRepresentation(label, ctx, getParams, visualCtor) {\n  var version = 0;\n  var webgl = ctx.webgl;\n  var updated = new Subject();\n  var materialId = getNextMaterialId();\n  var renderObjects = [];\n\n  var _state = StructureRepresentationStateBuilder.create();\n\n  var visuals = new Map();\n\n  var _structure;\n\n  var _groups;\n\n  var _params;\n\n  var _props;\n\n  var _theme = Theme.createEmpty();\n\n  function createOrUpdate(props, structure) {\n    var _this = this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (structure && structure !== _structure) {\n      _params = getParams(ctx, structure);\n      if (!_props) _props = PD.getDefaultValues(_params);\n    }\n\n    _props = Object.assign({}, _props, props);\n    return Task.create('Creating or updating UnitsRepresentation', function (runtime) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var i, group, visual, promise, oldVisuals, i, group, visualGroup, visual, promise, promise, arr, visual, promise, i, group, visualGroup, visual, promise, promise, visualsList_1, i, il, _a, visual, group, promise, promise;\n\n        var _b, _c, _d;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!(!_structure && !structure)) return [3\n              /*break*/\n              , 1];\n              throw new Error('missing structure');\n\n            case 1:\n              if (!(structure && !_structure)) return [3\n              /*break*/\n              , 8]; // console.log(label, 'initial structure');\n              // First call with a structure, create visuals for each group.\n\n              _groups = structure.unitSymmetryGroups;\n              i = 0;\n              _e.label = 2;\n\n            case 2:\n              if (!(i < _groups.length)) return [3\n              /*break*/\n              , 7];\n              group = _groups[i];\n              visual = visualCtor(materialId, structure, _props, webgl);\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 3:\n              _e.sent();\n\n              _e.label = 4;\n\n            case 4:\n              setVisualState(visual, group, _state); // current state for new visual\n\n              visuals.set(group.hashCode, {\n                visual: visual,\n                group: group\n              });\n              if (!runtime.shouldUpdate) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , runtime.update({\n                message: 'Creating or updating UnitsVisual',\n                current: i,\n                max: _groups.length\n              })];\n\n            case 5:\n              _e.sent();\n\n              _e.label = 6;\n\n            case 6:\n              i++;\n              return [3\n              /*break*/\n              , 2];\n\n            case 7:\n              return [3\n              /*break*/\n              , 43];\n\n            case 8:\n              if (!(structure && (!Structure.areUnitIdsAndIndicesEqual(structure, _structure) || structure.child !== _structure.child))) return [3\n              /*break*/\n              , 22]; // console.log(label, 'structures not equivalent');\n              // Tries to re-use existing visuals for the groups of the new structure.\n              // Creates additional visuals if needed, destroys left-over visuals.\n\n              _groups = structure.unitSymmetryGroups;\n              oldVisuals = visuals;\n              visuals = new Map();\n              i = 0;\n              _e.label = 9;\n\n            case 9:\n              if (!(i < _groups.length)) return [3\n              /*break*/\n              , 21];\n              group = _groups[i];\n              visualGroup = oldVisuals.get(group.hashCode);\n              if (!visualGroup) return [3\n              /*break*/\n              , 15];\n              visual = visualGroup.visual;\n              if (!((_b = visual.mustRecreate) === null || _b === void 0 ? void 0 : _b.call(visual, {\n                group: group,\n                structure: structure\n              }, _props, webgl))) return [3\n              /*break*/\n              , 12];\n              visual.destroy();\n              visual = visualCtor(materialId, structure, _props, webgl);\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 11];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 10:\n              _e.sent();\n\n              _e.label = 11;\n\n            case 11:\n              setVisualState(visual, group, _state); // current state for new visual\n\n              return [3\n              /*break*/\n              , 14];\n\n            case 12:\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 14];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 13:\n              _e.sent();\n\n              _e.label = 14;\n\n            case 14:\n              visuals.set(group.hashCode, {\n                visual: visual,\n                group: group\n              });\n              oldVisuals.delete(group.hashCode); // Remove highlight\n              // TODO: remove selection too??\n\n              if (visual.renderObject) {\n                arr = visual.renderObject.values.tMarker.ref.value.array;\n                applyMarkerAction(arr, Interval.ofBounds(0, arr.length), MarkerAction.RemoveHighlight);\n              }\n\n              return [3\n              /*break*/\n              , 18];\n\n            case 15:\n              visual = visualCtor(materialId, structure, _props, webgl);\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 17];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 16:\n              _e.sent();\n\n              _e.label = 17;\n\n            case 17:\n              setVisualState(visual, group, _state); // current state for new visual\n\n              visuals.set(group.hashCode, {\n                visual: visual,\n                group: group\n              });\n              _e.label = 18;\n\n            case 18:\n              if (!runtime.shouldUpdate) return [3\n              /*break*/\n              , 20];\n              return [4\n              /*yield*/\n              , runtime.update({\n                message: 'Creating or updating UnitsVisual',\n                current: i,\n                max: _groups.length\n              })];\n\n            case 19:\n              _e.sent();\n\n              _e.label = 20;\n\n            case 20:\n              i++;\n              return [3\n              /*break*/\n              , 9];\n\n            case 21:\n              oldVisuals.forEach(function (_a) {\n                var visual = _a.visual; // console.log(label, 'removed unused visual');\n\n                visual.destroy();\n              });\n              return [3\n              /*break*/\n              , 43];\n\n            case 22:\n              if (!(structure && structure !== _structure && Structure.areUnitIdsAndIndicesEqual(structure, _structure))) return [3\n              /*break*/\n              , 34]; // console.log(label, 'structures equivalent but not identical');\n              // Expects that for structures with the same hashCode,\n              // the unitSymmetryGroups are the same as well.\n              // Re-uses existing visuals for the groups of the new structure.\n\n              _groups = structure.unitSymmetryGroups;\n              i = 0;\n              _e.label = 23;\n\n            case 23:\n              if (!(i < _groups.length)) return [3\n              /*break*/\n              , 33];\n              group = _groups[i];\n              visualGroup = visuals.get(group.hashCode);\n              if (!visualGroup) return [3\n              /*break*/\n              , 29];\n              visual = visualGroup.visual;\n              if (!((_c = visual.mustRecreate) === null || _c === void 0 ? void 0 : _c.call(visual, {\n                group: group,\n                structure: structure\n              }, _props, ctx.webgl))) return [3\n              /*break*/\n              , 26];\n              visual.destroy();\n              visual = visualCtor(materialId, structure, _props, ctx.webgl);\n              visualGroup.visual = visual;\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 25];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 24:\n              _e.sent();\n\n              _e.label = 25;\n\n            case 25:\n              setVisualState(visual, group, _state); // current state for new visual\n\n              return [3\n              /*break*/\n              , 28];\n\n            case 26:\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 28];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 27:\n              _e.sent();\n\n              _e.label = 28;\n\n            case 28:\n              visualGroup.group = group;\n              return [3\n              /*break*/\n              , 30];\n\n            case 29:\n              throw new Error(\"expected to find visual for hashCode \" + group.hashCode);\n\n            case 30:\n              if (!runtime.shouldUpdate) return [3\n              /*break*/\n              , 32];\n              return [4\n              /*yield*/\n              , runtime.update({\n                message: 'Creating or updating UnitsVisual',\n                current: i,\n                max: _groups.length\n              })];\n\n            case 31:\n              _e.sent();\n\n              _e.label = 32;\n\n            case 32:\n              i++;\n              return [3\n              /*break*/\n              , 23];\n\n            case 33:\n              return [3\n              /*break*/\n              , 43];\n\n            case 34:\n              visualsList_1 = [];\n              visuals.forEach(function (vg) {\n                return visualsList_1.push(vg);\n              });\n              i = 0, il = visualsList_1.length;\n              _e.label = 35;\n\n            case 35:\n              if (!(i < il)) return [3\n              /*break*/\n              , 43];\n              _a = visualsList_1[i], visual = _a.visual, group = _a.group;\n              if (!((_d = visual.mustRecreate) === null || _d === void 0 ? void 0 : _d.call(visual, {\n                group: group,\n                structure: _structure\n              }, _props, ctx.webgl))) return [3\n              /*break*/\n              , 38];\n              visual.destroy();\n              visual = visualCtor(materialId, _structure, _props, webgl);\n              visualsList_1[i].visual = visual;\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props, {\n                group: group,\n                structure: _structure\n              });\n              if (!promise) return [3\n              /*break*/\n              , 37];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 36:\n              _e.sent();\n\n              _e.label = 37;\n\n            case 37:\n              setVisualState(visual, group, _state); // current state for new visual\n\n              return [3\n              /*break*/\n              , 40];\n\n            case 38:\n              promise = visual.createOrUpdate({\n                webgl: webgl,\n                runtime: runtime\n              }, _theme, _props);\n              if (!promise) return [3\n              /*break*/\n              , 40];\n              return [4\n              /*yield*/\n              , promise];\n\n            case 39:\n              _e.sent();\n\n              _e.label = 40;\n\n            case 40:\n              if (!runtime.shouldUpdate) return [3\n              /*break*/\n              , 42];\n              return [4\n              /*yield*/\n              , runtime.update({\n                message: 'Creating or updating UnitsVisual',\n                current: i,\n                max: il\n              })];\n\n            case 41:\n              _e.sent();\n\n              _e.label = 42;\n\n            case 42:\n              ++i;\n              return [3\n              /*break*/\n              , 35];\n\n            case 43:\n              // update list of renderObjects\n              renderObjects.length = 0;\n              visuals.forEach(function (_a) {\n                var visual = _a.visual;\n                if (visual.renderObject) renderObjects.push(visual.renderObject);\n              }); // set new structure\n\n              if (structure) _structure = structure; // increment version\n\n              updated.next(version++);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  function getLoci(pickingId) {\n    if (pickingId === undefined) return Structure.Loci(_structure.target);\n    var loci = EmptyLoci;\n    visuals.forEach(function (_a) {\n      var visual = _a.visual;\n\n      var _loci = visual.getLoci(pickingId);\n\n      if (!isEmptyLoci(_loci)) loci = _loci;\n    });\n    return loci;\n  }\n\n  function mark(loci, action) {\n    if (!_structure) return false;\n    if (!MarkerActions.is(_state.markerActions, action)) return false;\n\n    if (Structure.isLoci(loci) || StructureElement.Loci.is(loci) || Bond.isLoci(loci)) {\n      if (!Structure.areRootsEquivalent(loci.structure, _structure)) return false; // Remap `loci` from equivalent structure to the current `_structure`\n\n      loci = Loci.remap(loci, _structure);\n\n      if (StructureElement.Loci.is(loci) && StructureElement.Loci.isWholeStructure(loci)) {\n        // Change to `EveryLoci` to allow for downstream optimizations\n        loci = EveryLoci;\n      }\n    } else if (!isEveryLoci(loci) && !isDataLoci(loci)) {\n      return false;\n    }\n\n    if (Loci.isEmpty(loci)) return false;\n    var changed = false;\n    visuals.forEach(function (_a) {\n      var visual = _a.visual;\n      changed = visual.mark(loci, action) || changed;\n    });\n    return changed;\n  }\n\n  function setVisualState(visual, group, state) {\n    var visible = state.visible,\n        alphaFactor = state.alphaFactor,\n        pickable = state.pickable,\n        overpaint = state.overpaint,\n        transparency = state.transparency,\n        clipping = state.clipping,\n        transform = state.transform,\n        unitTransforms = state.unitTransforms;\n    if (visible !== undefined) visual.setVisibility(visible);\n    if (alphaFactor !== undefined) visual.setAlphaFactor(alphaFactor);\n    if (pickable !== undefined) visual.setPickable(pickable);\n    if (overpaint !== undefined) visual.setOverpaint(overpaint);\n    if (transparency !== undefined) visual.setTransparency(transparency);\n    if (clipping !== undefined) visual.setClipping(clipping);\n    if (transform !== undefined) visual.setTransform(transform);\n\n    if (unitTransforms !== undefined) {\n      if (unitTransforms) {\n        // console.log(group.hashCode, unitTransforms.getSymmetryGroupTransforms(group))\n        visual.setTransform(undefined, unitTransforms.getSymmetryGroupTransforms(group));\n      } else {\n        visual.setTransform(undefined, null);\n      }\n    }\n  }\n\n  function setState(state) {\n    var visible = state.visible,\n        alphaFactor = state.alphaFactor,\n        pickable = state.pickable,\n        overpaint = state.overpaint,\n        transparency = state.transparency,\n        clipping = state.clipping,\n        transform = state.transform,\n        unitTransforms = state.unitTransforms,\n        syncManually = state.syncManually,\n        markerActions = state.markerActions;\n    var newState = {};\n    if (visible !== _state.visible) newState.visible = visible;\n    if (alphaFactor !== _state.alphaFactor) newState.alphaFactor = alphaFactor;\n    if (pickable !== _state.pickable) newState.pickable = pickable;\n\n    if (overpaint !== undefined && !Overpaint.areEqual(overpaint, _state.overpaint)) {\n      if (_structure) {\n        newState.overpaint = Overpaint.remap(overpaint, _structure);\n      }\n    }\n\n    if (transparency !== undefined && !Transparency.areEqual(transparency, _state.transparency)) {\n      if (_structure) {\n        newState.transparency = Transparency.remap(transparency, _structure);\n      }\n    }\n\n    if (clipping !== undefined && !Clipping.areEqual(clipping, _state.clipping)) {\n      if (_structure) {\n        newState.clipping = Clipping.remap(clipping, _structure);\n      }\n    }\n\n    if (transform !== undefined && !Mat4.areEqual(transform, _state.transform, EPSILON)) {\n      newState.transform = transform;\n    }\n\n    if (unitTransforms !== _state.unitTransforms || (unitTransforms === null || unitTransforms === void 0 ? void 0 : unitTransforms.version) !== state.unitTransformsVersion) {\n      newState.unitTransforms = unitTransforms;\n      _state.unitTransformsVersion = unitTransforms ? unitTransforms === null || unitTransforms === void 0 ? void 0 : unitTransforms.version : -1;\n    }\n\n    if (syncManually !== _state.syncManually) newState.syncManually = syncManually;\n    if (markerActions !== _state.markerActions) newState.markerActions = markerActions;\n    visuals.forEach(function (_a) {\n      var visual = _a.visual,\n          group = _a.group;\n      return setVisualState(visual, group, newState);\n    });\n    StructureRepresentationStateBuilder.update(_state, newState);\n  }\n\n  function setTheme(theme) {\n    _theme = theme;\n  }\n\n  function destroy() {\n    visuals.forEach(function (_a) {\n      var visual = _a.visual;\n      return visual.destroy();\n    });\n    visuals.clear();\n  }\n\n  return {\n    label: label,\n\n    get groupCount() {\n      var groupCount = 0;\n      visuals.forEach(function (_a) {\n        var visual = _a.visual;\n        if (visual.renderObject) groupCount += visual.groupCount;\n      });\n      return groupCount;\n    },\n\n    get props() {\n      return _props;\n    },\n\n    get params() {\n      return _params;\n    },\n\n    get state() {\n      return _state;\n    },\n\n    get theme() {\n      return _theme;\n    },\n\n    renderObjects: renderObjects,\n    updated: updated,\n    createOrUpdate: createOrUpdate,\n    setState: setState,\n    setTheme: setTheme,\n    getLoci: getLoci,\n    mark: mark,\n    destroy: destroy\n  };\n}","map":{"version":3,"sources":["../../../src/mol-repr/structure/units-representation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { StructureRepresentationStateBuilder } from './representation';\r\nimport { Structure, StructureElement, Bond } from '../../mol-model/structure';\r\nimport { Subject } from 'rxjs';\r\nimport { getNextMaterialId } from '../../mol-gl/render-object';\r\nimport { Theme } from '../../mol-theme/theme';\r\nimport { Task } from '../../mol-task';\r\nimport { Loci, EmptyLoci, isEmptyLoci, isEveryLoci, isDataLoci, EveryLoci } from '../../mol-model/loci';\r\nimport { MarkerAction, MarkerActions, applyMarkerAction } from '../../mol-util/marker-action';\r\nimport { Overpaint } from '../../mol-theme/overpaint';\r\nimport { Transparency } from '../../mol-theme/transparency';\r\nimport { Mat4, EPSILON } from '../../mol-math/linear-algebra';\r\nimport { Interval } from '../../mol-data/int';\r\nimport { Clipping } from '../../mol-theme/clipping';\r\nexport function UnitsRepresentation(label, ctx, getParams, visualCtor) {\r\n    var version = 0;\r\n    var webgl = ctx.webgl;\r\n    var updated = new Subject();\r\n    var materialId = getNextMaterialId();\r\n    var renderObjects = [];\r\n    var _state = StructureRepresentationStateBuilder.create();\r\n    var visuals = new Map();\r\n    var _structure;\r\n    var _groups;\r\n    var _params;\r\n    var _props;\r\n    var _theme = Theme.createEmpty();\r\n    function createOrUpdate(props, structure) {\r\n        var _this = this;\r\n        if (props === void 0) { props = {}; }\r\n        if (structure && structure !== _structure) {\r\n            _params = getParams(ctx, structure);\r\n            if (!_props)\r\n                _props = PD.getDefaultValues(_params);\r\n        }\r\n        _props = Object.assign({}, _props, props);\r\n        return Task.create('Creating or updating UnitsRepresentation', function (runtime) { return __awaiter(_this, void 0, void 0, function () {\r\n            var i, group, visual, promise, oldVisuals, i, group, visualGroup, visual, promise, promise, arr, visual, promise, i, group, visualGroup, visual, promise, promise, visualsList_1, i, il, _a, visual, group, promise, promise;\r\n            var _b, _c, _d;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        if (!(!_structure && !structure)) return [3 /*break*/, 1];\r\n                        throw new Error('missing structure');\r\n                    case 1:\r\n                        if (!(structure && !_structure)) return [3 /*break*/, 8];\r\n                        // console.log(label, 'initial structure');\r\n                        // First call with a structure, create visuals for each group.\r\n                        _groups = structure.unitSymmetryGroups;\r\n                        i = 0;\r\n                        _e.label = 2;\r\n                    case 2:\r\n                        if (!(i < _groups.length)) return [3 /*break*/, 7];\r\n                        group = _groups[i];\r\n                        visual = visualCtor(materialId, structure, _props, webgl);\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, promise];\r\n                    case 3:\r\n                        _e.sent();\r\n                        _e.label = 4;\r\n                    case 4:\r\n                        setVisualState(visual, group, _state); // current state for new visual\r\n                        visuals.set(group.hashCode, { visual: visual, group: group });\r\n                        if (!runtime.shouldUpdate) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, runtime.update({ message: 'Creating or updating UnitsVisual', current: i, max: _groups.length })];\r\n                    case 5:\r\n                        _e.sent();\r\n                        _e.label = 6;\r\n                    case 6:\r\n                        i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 7: return [3 /*break*/, 43];\r\n                    case 8:\r\n                        if (!(structure && (!Structure.areUnitIdsAndIndicesEqual(structure, _structure) || structure.child !== _structure.child))) return [3 /*break*/, 22];\r\n                        // console.log(label, 'structures not equivalent');\r\n                        // Tries to re-use existing visuals for the groups of the new structure.\r\n                        // Creates additional visuals if needed, destroys left-over visuals.\r\n                        _groups = structure.unitSymmetryGroups;\r\n                        oldVisuals = visuals;\r\n                        visuals = new Map();\r\n                        i = 0;\r\n                        _e.label = 9;\r\n                    case 9:\r\n                        if (!(i < _groups.length)) return [3 /*break*/, 21];\r\n                        group = _groups[i];\r\n                        visualGroup = oldVisuals.get(group.hashCode);\r\n                        if (!visualGroup) return [3 /*break*/, 15];\r\n                        visual = visualGroup.visual;\r\n                        if (!((_b = visual.mustRecreate) === null || _b === void 0 ? void 0 : _b.call(visual, { group: group, structure: structure }, _props, webgl))) return [3 /*break*/, 12];\r\n                        visual.destroy();\r\n                        visual = visualCtor(materialId, structure, _props, webgl);\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 11];\r\n                        return [4 /*yield*/, promise];\r\n                    case 10:\r\n                        _e.sent();\r\n                        _e.label = 11;\r\n                    case 11:\r\n                        setVisualState(visual, group, _state); // current state for new visual\r\n                        return [3 /*break*/, 14];\r\n                    case 12:\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 14];\r\n                        return [4 /*yield*/, promise];\r\n                    case 13:\r\n                        _e.sent();\r\n                        _e.label = 14;\r\n                    case 14:\r\n                        visuals.set(group.hashCode, { visual: visual, group: group });\r\n                        oldVisuals.delete(group.hashCode);\r\n                        // Remove highlight\r\n                        // TODO: remove selection too??\r\n                        if (visual.renderObject) {\r\n                            arr = visual.renderObject.values.tMarker.ref.value.array;\r\n                            applyMarkerAction(arr, Interval.ofBounds(0, arr.length), MarkerAction.RemoveHighlight);\r\n                        }\r\n                        return [3 /*break*/, 18];\r\n                    case 15:\r\n                        visual = visualCtor(materialId, structure, _props, webgl);\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 17];\r\n                        return [4 /*yield*/, promise];\r\n                    case 16:\r\n                        _e.sent();\r\n                        _e.label = 17;\r\n                    case 17:\r\n                        setVisualState(visual, group, _state); // current state for new visual\r\n                        visuals.set(group.hashCode, { visual: visual, group: group });\r\n                        _e.label = 18;\r\n                    case 18:\r\n                        if (!runtime.shouldUpdate) return [3 /*break*/, 20];\r\n                        return [4 /*yield*/, runtime.update({ message: 'Creating or updating UnitsVisual', current: i, max: _groups.length })];\r\n                    case 19:\r\n                        _e.sent();\r\n                        _e.label = 20;\r\n                    case 20:\r\n                        i++;\r\n                        return [3 /*break*/, 9];\r\n                    case 21:\r\n                        oldVisuals.forEach(function (_a) {\r\n                            var visual = _a.visual;\r\n                            // console.log(label, 'removed unused visual');\r\n                            visual.destroy();\r\n                        });\r\n                        return [3 /*break*/, 43];\r\n                    case 22:\r\n                        if (!(structure && structure !== _structure && Structure.areUnitIdsAndIndicesEqual(structure, _structure))) return [3 /*break*/, 34];\r\n                        // console.log(label, 'structures equivalent but not identical');\r\n                        // Expects that for structures with the same hashCode,\r\n                        // the unitSymmetryGroups are the same as well.\r\n                        // Re-uses existing visuals for the groups of the new structure.\r\n                        _groups = structure.unitSymmetryGroups;\r\n                        i = 0;\r\n                        _e.label = 23;\r\n                    case 23:\r\n                        if (!(i < _groups.length)) return [3 /*break*/, 33];\r\n                        group = _groups[i];\r\n                        visualGroup = visuals.get(group.hashCode);\r\n                        if (!visualGroup) return [3 /*break*/, 29];\r\n                        visual = visualGroup.visual;\r\n                        if (!((_c = visual.mustRecreate) === null || _c === void 0 ? void 0 : _c.call(visual, { group: group, structure: structure }, _props, ctx.webgl))) return [3 /*break*/, 26];\r\n                        visual.destroy();\r\n                        visual = visualCtor(materialId, structure, _props, ctx.webgl);\r\n                        visualGroup.visual = visual;\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 25];\r\n                        return [4 /*yield*/, promise];\r\n                    case 24:\r\n                        _e.sent();\r\n                        _e.label = 25;\r\n                    case 25:\r\n                        setVisualState(visual, group, _state); // current state for new visual\r\n                        return [3 /*break*/, 28];\r\n                    case 26:\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: structure });\r\n                        if (!promise) return [3 /*break*/, 28];\r\n                        return [4 /*yield*/, promise];\r\n                    case 27:\r\n                        _e.sent();\r\n                        _e.label = 28;\r\n                    case 28:\r\n                        visualGroup.group = group;\r\n                        return [3 /*break*/, 30];\r\n                    case 29: throw new Error(\"expected to find visual for hashCode \" + group.hashCode);\r\n                    case 30:\r\n                        if (!runtime.shouldUpdate) return [3 /*break*/, 32];\r\n                        return [4 /*yield*/, runtime.update({ message: 'Creating or updating UnitsVisual', current: i, max: _groups.length })];\r\n                    case 31:\r\n                        _e.sent();\r\n                        _e.label = 32;\r\n                    case 32:\r\n                        i++;\r\n                        return [3 /*break*/, 23];\r\n                    case 33: return [3 /*break*/, 43];\r\n                    case 34:\r\n                        visualsList_1 = [];\r\n                        visuals.forEach(function (vg) { return visualsList_1.push(vg); });\r\n                        i = 0, il = visualsList_1.length;\r\n                        _e.label = 35;\r\n                    case 35:\r\n                        if (!(i < il)) return [3 /*break*/, 43];\r\n                        _a = visualsList_1[i], visual = _a.visual, group = _a.group;\r\n                        if (!((_d = visual.mustRecreate) === null || _d === void 0 ? void 0 : _d.call(visual, { group: group, structure: _structure }, _props, ctx.webgl))) return [3 /*break*/, 38];\r\n                        visual.destroy();\r\n                        visual = visualCtor(materialId, _structure, _props, webgl);\r\n                        visualsList_1[i].visual = visual;\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props, { group: group, structure: _structure });\r\n                        if (!promise) return [3 /*break*/, 37];\r\n                        return [4 /*yield*/, promise];\r\n                    case 36:\r\n                        _e.sent();\r\n                        _e.label = 37;\r\n                    case 37:\r\n                        setVisualState(visual, group, _state); // current state for new visual\r\n                        return [3 /*break*/, 40];\r\n                    case 38:\r\n                        promise = visual.createOrUpdate({ webgl: webgl, runtime: runtime }, _theme, _props);\r\n                        if (!promise) return [3 /*break*/, 40];\r\n                        return [4 /*yield*/, promise];\r\n                    case 39:\r\n                        _e.sent();\r\n                        _e.label = 40;\r\n                    case 40:\r\n                        if (!runtime.shouldUpdate) return [3 /*break*/, 42];\r\n                        return [4 /*yield*/, runtime.update({ message: 'Creating or updating UnitsVisual', current: i, max: il })];\r\n                    case 41:\r\n                        _e.sent();\r\n                        _e.label = 42;\r\n                    case 42:\r\n                        ++i;\r\n                        return [3 /*break*/, 35];\r\n                    case 43:\r\n                        // update list of renderObjects\r\n                        renderObjects.length = 0;\r\n                        visuals.forEach(function (_a) {\r\n                            var visual = _a.visual;\r\n                            if (visual.renderObject)\r\n                                renderObjects.push(visual.renderObject);\r\n                        });\r\n                        // set new structure\r\n                        if (structure)\r\n                            _structure = structure;\r\n                        // increment version\r\n                        updated.next(version++);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    function getLoci(pickingId) {\r\n        if (pickingId === undefined)\r\n            return Structure.Loci(_structure.target);\r\n        var loci = EmptyLoci;\r\n        visuals.forEach(function (_a) {\r\n            var visual = _a.visual;\r\n            var _loci = visual.getLoci(pickingId);\r\n            if (!isEmptyLoci(_loci))\r\n                loci = _loci;\r\n        });\r\n        return loci;\r\n    }\r\n    function mark(loci, action) {\r\n        if (!_structure)\r\n            return false;\r\n        if (!MarkerActions.is(_state.markerActions, action))\r\n            return false;\r\n        if (Structure.isLoci(loci) || StructureElement.Loci.is(loci) || Bond.isLoci(loci)) {\r\n            if (!Structure.areRootsEquivalent(loci.structure, _structure))\r\n                return false;\r\n            // Remap `loci` from equivalent structure to the current `_structure`\r\n            loci = Loci.remap(loci, _structure);\r\n            if (StructureElement.Loci.is(loci) && StructureElement.Loci.isWholeStructure(loci)) {\r\n                // Change to `EveryLoci` to allow for downstream optimizations\r\n                loci = EveryLoci;\r\n            }\r\n        }\r\n        else if (!isEveryLoci(loci) && !isDataLoci(loci)) {\r\n            return false;\r\n        }\r\n        if (Loci.isEmpty(loci))\r\n            return false;\r\n        var changed = false;\r\n        visuals.forEach(function (_a) {\r\n            var visual = _a.visual;\r\n            changed = visual.mark(loci, action) || changed;\r\n        });\r\n        return changed;\r\n    }\r\n    function setVisualState(visual, group, state) {\r\n        var visible = state.visible, alphaFactor = state.alphaFactor, pickable = state.pickable, overpaint = state.overpaint, transparency = state.transparency, clipping = state.clipping, transform = state.transform, unitTransforms = state.unitTransforms;\r\n        if (visible !== undefined)\r\n            visual.setVisibility(visible);\r\n        if (alphaFactor !== undefined)\r\n            visual.setAlphaFactor(alphaFactor);\r\n        if (pickable !== undefined)\r\n            visual.setPickable(pickable);\r\n        if (overpaint !== undefined)\r\n            visual.setOverpaint(overpaint);\r\n        if (transparency !== undefined)\r\n            visual.setTransparency(transparency);\r\n        if (clipping !== undefined)\r\n            visual.setClipping(clipping);\r\n        if (transform !== undefined)\r\n            visual.setTransform(transform);\r\n        if (unitTransforms !== undefined) {\r\n            if (unitTransforms) {\r\n                // console.log(group.hashCode, unitTransforms.getSymmetryGroupTransforms(group))\r\n                visual.setTransform(undefined, unitTransforms.getSymmetryGroupTransforms(group));\r\n            }\r\n            else {\r\n                visual.setTransform(undefined, null);\r\n            }\r\n        }\r\n    }\r\n    function setState(state) {\r\n        var visible = state.visible, alphaFactor = state.alphaFactor, pickable = state.pickable, overpaint = state.overpaint, transparency = state.transparency, clipping = state.clipping, transform = state.transform, unitTransforms = state.unitTransforms, syncManually = state.syncManually, markerActions = state.markerActions;\r\n        var newState = {};\r\n        if (visible !== _state.visible)\r\n            newState.visible = visible;\r\n        if (alphaFactor !== _state.alphaFactor)\r\n            newState.alphaFactor = alphaFactor;\r\n        if (pickable !== _state.pickable)\r\n            newState.pickable = pickable;\r\n        if (overpaint !== undefined && !Overpaint.areEqual(overpaint, _state.overpaint)) {\r\n            if (_structure) {\r\n                newState.overpaint = Overpaint.remap(overpaint, _structure);\r\n            }\r\n        }\r\n        if (transparency !== undefined && !Transparency.areEqual(transparency, _state.transparency)) {\r\n            if (_structure) {\r\n                newState.transparency = Transparency.remap(transparency, _structure);\r\n            }\r\n        }\r\n        if (clipping !== undefined && !Clipping.areEqual(clipping, _state.clipping)) {\r\n            if (_structure) {\r\n                newState.clipping = Clipping.remap(clipping, _structure);\r\n            }\r\n        }\r\n        if (transform !== undefined && !Mat4.areEqual(transform, _state.transform, EPSILON)) {\r\n            newState.transform = transform;\r\n        }\r\n        if (unitTransforms !== _state.unitTransforms || (unitTransforms === null || unitTransforms === void 0 ? void 0 : unitTransforms.version) !== state.unitTransformsVersion) {\r\n            newState.unitTransforms = unitTransforms;\r\n            _state.unitTransformsVersion = unitTransforms ? unitTransforms === null || unitTransforms === void 0 ? void 0 : unitTransforms.version : -1;\r\n        }\r\n        if (syncManually !== _state.syncManually)\r\n            newState.syncManually = syncManually;\r\n        if (markerActions !== _state.markerActions)\r\n            newState.markerActions = markerActions;\r\n        visuals.forEach(function (_a) {\r\n            var visual = _a.visual, group = _a.group;\r\n            return setVisualState(visual, group, newState);\r\n        });\r\n        StructureRepresentationStateBuilder.update(_state, newState);\r\n    }\r\n    function setTheme(theme) {\r\n        _theme = theme;\r\n    }\r\n    function destroy() {\r\n        visuals.forEach(function (_a) {\r\n            var visual = _a.visual;\r\n            return visual.destroy();\r\n        });\r\n        visuals.clear();\r\n    }\r\n    return {\r\n        label: label,\r\n        get groupCount() {\r\n            var groupCount = 0;\r\n            visuals.forEach(function (_a) {\r\n                var visual = _a.visual;\r\n                if (visual.renderObject)\r\n                    groupCount += visual.groupCount;\r\n            });\r\n            return groupCount;\r\n        },\r\n        get props() { return _props; },\r\n        get params() { return _params; },\r\n        get state() { return _state; },\r\n        get theme() { return _theme; },\r\n        renderObjects: renderObjects,\r\n        updated: updated,\r\n        createOrUpdate: createOrUpdate,\r\n        setState: setState,\r\n        setTheme: setTheme,\r\n        getLoci: getLoci,\r\n        mark: mark,\r\n        destroy: destroy\r\n    };\r\n}\r\n//# sourceMappingURL=units-representation.js.map"]},"metadata":{},"sourceType":"module"}