{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { StructureElement } from '../../../mol-model/structure';\nimport { StateSelection, StateTransform } from '../../../mol-state';\nimport { StateTransforms } from '../../transforms';\nimport { PluginCommands } from '../../../mol-plugin/commands';\nimport { arraySetAdd } from '../../../mol-util/array';\nimport { StatefulPluginComponent } from '../../component';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { MeasurementRepresentationCommonTextParams } from '../../../mol-repr/shape/loci/common';\nexport { StructureMeasurementManager };\nexport var MeasurementGroupTag = 'measurement-group';\nexport var StructureMeasurementParams = {\n  distanceUnitLabel: PD.Text('\\u212B', {\n    isEssential: true\n  }),\n  textColor: MeasurementRepresentationCommonTextParams.textColor\n};\nvar DefaultStructureMeasurementOptions = PD.getDefaultValues(StructureMeasurementParams);\n\nvar StructureMeasurementManager =\n/** @class */\nfunction (_super) {\n  __extends(StructureMeasurementManager, _super);\n\n  function StructureMeasurementManager(plugin) {\n    var _this = _super.call(this, {\n      labels: [],\n      distances: [],\n      angles: [],\n      dihedrals: [],\n      orientations: [],\n      options: DefaultStructureMeasurementOptions\n    }) || this;\n\n    _this.plugin = plugin;\n    _this.behaviors = {\n      state: _this.ev.behavior(_this.state)\n    };\n    _this._empty = [];\n    plugin.state.data.events.changed.subscribe(function (e) {\n      if (e.inTransaction || plugin.behaviors.state.isAnimating.value) return;\n\n      _this.sync();\n    });\n    plugin.behaviors.state.isAnimating.subscribe(function (isAnimating) {\n      if (!isAnimating && !plugin.behaviors.state.isUpdating.value) _this.sync();\n    });\n    return _this;\n  }\n\n  StructureMeasurementManager.prototype.stateUpdated = function () {\n    this.behaviors.state.next(this.state);\n  };\n\n  StructureMeasurementManager.prototype.getGroup = function () {\n    var state = this.plugin.state.data;\n    var groupRef = StateSelection.findTagInSubtree(state.tree, StateTransform.RootRef, MeasurementGroupTag);\n    var builder = this.plugin.state.data.build();\n    if (groupRef) return builder.to(groupRef);\n    return builder.toRoot().group(StateTransforms.Misc.CreateGroup, {\n      label: \"Measurements\"\n    }, {\n      tags: MeasurementGroupTag\n    });\n  };\n\n  StructureMeasurementManager.prototype.setOptions = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var update, _i, _a, cell, _b, _c, cell, _d, _e, cell, _f, _g, cell;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            if (this.updateState({\n              options: options\n            })) this.stateUpdated();\n            update = this.plugin.state.data.build();\n\n            for (_i = 0, _a = this.state.distances; _i < _a.length; _i++) {\n              cell = _a[_i];\n              update.to(cell).update(function (old) {\n                old.unitLabel = options.distanceUnitLabel;\n                old.textColor = options.textColor;\n              });\n            }\n\n            for (_b = 0, _c = this.state.labels; _b < _c.length; _b++) {\n              cell = _c[_b];\n              update.to(cell).update(function (old) {\n                old.textColor = options.textColor;\n              });\n            }\n\n            for (_d = 0, _e = this.state.angles; _d < _e.length; _d++) {\n              cell = _e[_d];\n              update.to(cell).update(function (old) {\n                old.textColor = options.textColor;\n              });\n            }\n\n            for (_f = 0, _g = this.state.dihedrals; _f < _g.length; _f++) {\n              cell = _g[_f];\n              update.to(cell).update(function (old) {\n                old.textColor = options.textColor;\n              });\n            }\n\n            if (update.editInfo.count === 0) return [2\n            /*return*/\n            ];\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: this.plugin.state.data,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _h.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.addDistance = function (a, b, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cellA, cellB, dependsOn, update, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cellA = this.plugin.helpers.substructureParent.get(a.structure);\n            cellB = this.plugin.helpers.substructureParent.get(b.structure);\n            if (!cellA || !cellB) return [2\n            /*return*/\n            ];\n            dependsOn = [cellA.transform.ref];\n            arraySetAdd(dependsOn, cellB.transform.ref);\n            update = this.getGroup();\n            update.apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\n              selections: [{\n                key: 'a',\n                groupId: 'a',\n                ref: cellA.transform.ref,\n                expression: StructureElement.Loci.toExpression(a)\n              }, {\n                key: 'b',\n                groupId: 'b',\n                ref: cellB.transform.ref,\n                expression: StructureElement.Loci.toExpression(b)\n              }],\n              isTransitive: true,\n              label: 'Distance'\n            }, {\n              dependsOn: dependsOn,\n              tags: options === null || options === void 0 ? void 0 : options.selectionTags\n            }).apply(StateTransforms.Representation.StructureSelectionsDistance3D, __assign(__assign(__assign({\n              customText: (options === null || options === void 0 ? void 0 : options.customText) || '',\n              unitLabel: this.state.options.distanceUnitLabel,\n              textColor: this.state.options.textColor\n            }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), {\n              tags: options === null || options === void 0 ? void 0 : options.reprTags\n            });\n            state = this.plugin.state.data;\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.addAngle = function (a, b, c, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cellA, cellB, cellC, dependsOn, update, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cellA = this.plugin.helpers.substructureParent.get(a.structure);\n            cellB = this.plugin.helpers.substructureParent.get(b.structure);\n            cellC = this.plugin.helpers.substructureParent.get(c.structure);\n            if (!cellA || !cellB || !cellC) return [2\n            /*return*/\n            ];\n            dependsOn = [cellA.transform.ref];\n            arraySetAdd(dependsOn, cellB.transform.ref);\n            arraySetAdd(dependsOn, cellC.transform.ref);\n            update = this.getGroup();\n            update.apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\n              selections: [{\n                key: 'a',\n                ref: cellA.transform.ref,\n                expression: StructureElement.Loci.toExpression(a)\n              }, {\n                key: 'b',\n                ref: cellB.transform.ref,\n                expression: StructureElement.Loci.toExpression(b)\n              }, {\n                key: 'c',\n                ref: cellC.transform.ref,\n                expression: StructureElement.Loci.toExpression(c)\n              }],\n              isTransitive: true,\n              label: 'Angle'\n            }, {\n              dependsOn: dependsOn,\n              tags: options === null || options === void 0 ? void 0 : options.selectionTags\n            }).apply(StateTransforms.Representation.StructureSelectionsAngle3D, __assign(__assign(__assign({\n              customText: (options === null || options === void 0 ? void 0 : options.customText) || '',\n              textColor: this.state.options.textColor\n            }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), {\n              tags: options === null || options === void 0 ? void 0 : options.reprTags\n            });\n            state = this.plugin.state.data;\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.addDihedral = function (a, b, c, d, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cellA, cellB, cellC, cellD, dependsOn, update, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cellA = this.plugin.helpers.substructureParent.get(a.structure);\n            cellB = this.plugin.helpers.substructureParent.get(b.structure);\n            cellC = this.plugin.helpers.substructureParent.get(c.structure);\n            cellD = this.plugin.helpers.substructureParent.get(d.structure);\n            if (!cellA || !cellB || !cellC || !cellD) return [2\n            /*return*/\n            ];\n            dependsOn = [cellA.transform.ref];\n            arraySetAdd(dependsOn, cellB.transform.ref);\n            arraySetAdd(dependsOn, cellC.transform.ref);\n            arraySetAdd(dependsOn, cellD.transform.ref);\n            update = this.getGroup();\n            update.apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\n              selections: [{\n                key: 'a',\n                ref: cellA.transform.ref,\n                expression: StructureElement.Loci.toExpression(a)\n              }, {\n                key: 'b',\n                ref: cellB.transform.ref,\n                expression: StructureElement.Loci.toExpression(b)\n              }, {\n                key: 'c',\n                ref: cellC.transform.ref,\n                expression: StructureElement.Loci.toExpression(c)\n              }, {\n                key: 'd',\n                ref: cellD.transform.ref,\n                expression: StructureElement.Loci.toExpression(d)\n              }],\n              isTransitive: true,\n              label: 'Dihedral'\n            }, {\n              dependsOn: dependsOn,\n              tags: options === null || options === void 0 ? void 0 : options.selectionTags\n            }).apply(StateTransforms.Representation.StructureSelectionsDihedral3D, __assign(__assign(__assign({\n              customText: (options === null || options === void 0 ? void 0 : options.customText) || '',\n              textColor: this.state.options.textColor\n            }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), {\n              tags: options === null || options === void 0 ? void 0 : options.reprTags\n            });\n            state = this.plugin.state.data;\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.addLabel = function (a, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cellA, dependsOn, update, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cellA = this.plugin.helpers.substructureParent.get(a.structure);\n            if (!cellA) return [2\n            /*return*/\n            ];\n            dependsOn = [cellA.transform.ref];\n            update = this.getGroup();\n            update.apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\n              selections: [{\n                key: 'a',\n                ref: cellA.transform.ref,\n                expression: StructureElement.Loci.toExpression(a)\n              }],\n              isTransitive: true,\n              label: 'Label'\n            }, {\n              dependsOn: dependsOn,\n              tags: options === null || options === void 0 ? void 0 : options.selectionTags\n            }).apply(StateTransforms.Representation.StructureSelectionsLabel3D, __assign(__assign({\n              textColor: this.state.options.textColor\n            }, options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), {\n              tags: options === null || options === void 0 ? void 0 : options.reprTags\n            });\n            state = this.plugin.state.data;\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.addOrientation = function (a) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cellA, dependsOn, update, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cellA = this.plugin.helpers.substructureParent.get(a.structure);\n            if (!cellA) return [2\n            /*return*/\n            ];\n            dependsOn = [cellA.transform.ref];\n            update = this.getGroup();\n            update.apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\n              selections: [{\n                key: 'a',\n                ref: cellA.transform.ref,\n                expression: StructureElement.Loci.toExpression(a)\n              }],\n              isTransitive: true,\n              label: 'Orientation'\n            }, {\n              dependsOn: dependsOn\n            }).apply(StateTransforms.Representation.StructureSelectionsOrientation3D);\n            state = this.plugin.state.data;\n            return [4\n            /*yield*/\n            , PluginCommands.State.Update(this.plugin, {\n              state: state,\n              tree: update,\n              options: {\n                doNotLogTiming: true\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StructureMeasurementManager.prototype.getTransforms = function (transformer) {\n    var state = this.plugin.state.data;\n    var groupRef = StateSelection.findTagInSubtree(state.tree, StateTransform.RootRef, MeasurementGroupTag);\n    var ret = groupRef ? state.select(StateSelection.Generators.ofTransformer(transformer, groupRef)) : this._empty;\n    if (ret.length === 0) return this._empty;\n    return ret;\n  };\n\n  StructureMeasurementManager.prototype.sync = function () {\n    var updated = this.updateState({\n      labels: this.getTransforms(StateTransforms.Representation.StructureSelectionsLabel3D),\n      distances: this.getTransforms(StateTransforms.Representation.StructureSelectionsDistance3D),\n      angles: this.getTransforms(StateTransforms.Representation.StructureSelectionsAngle3D),\n      dihedrals: this.getTransforms(StateTransforms.Representation.StructureSelectionsDihedral3D),\n      orientations: this.getTransforms(StateTransforms.Representation.StructureSelectionsOrientation3D)\n    });\n    if (updated) this.stateUpdated();\n  };\n\n  return StructureMeasurementManager;\n}(StatefulPluginComponent);","map":{"version":3,"sources":["../../../../src/mol-plugin-state/manager/structure/measurement.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\r\nimport { StructureElement } from '../../../mol-model/structure';\r\nimport { StateSelection, StateTransform } from '../../../mol-state';\r\nimport { StateTransforms } from '../../transforms';\r\nimport { PluginCommands } from '../../../mol-plugin/commands';\r\nimport { arraySetAdd } from '../../../mol-util/array';\r\nimport { StatefulPluginComponent } from '../../component';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { MeasurementRepresentationCommonTextParams } from '../../../mol-repr/shape/loci/common';\r\nexport { StructureMeasurementManager };\r\nexport var MeasurementGroupTag = 'measurement-group';\r\nexport var StructureMeasurementParams = {\r\n    distanceUnitLabel: PD.Text('\\u212B', { isEssential: true }),\r\n    textColor: MeasurementRepresentationCommonTextParams.textColor\r\n};\r\nvar DefaultStructureMeasurementOptions = PD.getDefaultValues(StructureMeasurementParams);\r\nvar StructureMeasurementManager = /** @class */ (function (_super) {\r\n    __extends(StructureMeasurementManager, _super);\r\n    function StructureMeasurementManager(plugin) {\r\n        var _this = _super.call(this, { labels: [], distances: [], angles: [], dihedrals: [], orientations: [], options: DefaultStructureMeasurementOptions }) || this;\r\n        _this.plugin = plugin;\r\n        _this.behaviors = {\r\n            state: _this.ev.behavior(_this.state)\r\n        };\r\n        _this._empty = [];\r\n        plugin.state.data.events.changed.subscribe(function (e) {\r\n            if (e.inTransaction || plugin.behaviors.state.isAnimating.value)\r\n                return;\r\n            _this.sync();\r\n        });\r\n        plugin.behaviors.state.isAnimating.subscribe(function (isAnimating) {\r\n            if (!isAnimating && !plugin.behaviors.state.isUpdating.value)\r\n                _this.sync();\r\n        });\r\n        return _this;\r\n    }\r\n    StructureMeasurementManager.prototype.stateUpdated = function () {\r\n        this.behaviors.state.next(this.state);\r\n    };\r\n    StructureMeasurementManager.prototype.getGroup = function () {\r\n        var state = this.plugin.state.data;\r\n        var groupRef = StateSelection.findTagInSubtree(state.tree, StateTransform.RootRef, MeasurementGroupTag);\r\n        var builder = this.plugin.state.data.build();\r\n        if (groupRef)\r\n            return builder.to(groupRef);\r\n        return builder.toRoot().group(StateTransforms.Misc.CreateGroup, { label: \"Measurements\" }, { tags: MeasurementGroupTag });\r\n    };\r\n    StructureMeasurementManager.prototype.setOptions = function (options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var update, _i, _a, cell, _b, _c, cell, _d, _e, cell, _f, _g, cell;\r\n            return __generator(this, function (_h) {\r\n                switch (_h.label) {\r\n                    case 0:\r\n                        if (this.updateState({ options: options }))\r\n                            this.stateUpdated();\r\n                        update = this.plugin.state.data.build();\r\n                        for (_i = 0, _a = this.state.distances; _i < _a.length; _i++) {\r\n                            cell = _a[_i];\r\n                            update.to(cell).update(function (old) {\r\n                                old.unitLabel = options.distanceUnitLabel;\r\n                                old.textColor = options.textColor;\r\n                            });\r\n                        }\r\n                        for (_b = 0, _c = this.state.labels; _b < _c.length; _b++) {\r\n                            cell = _c[_b];\r\n                            update.to(cell).update(function (old) { old.textColor = options.textColor; });\r\n                        }\r\n                        for (_d = 0, _e = this.state.angles; _d < _e.length; _d++) {\r\n                            cell = _e[_d];\r\n                            update.to(cell).update(function (old) { old.textColor = options.textColor; });\r\n                        }\r\n                        for (_f = 0, _g = this.state.dihedrals; _f < _g.length; _f++) {\r\n                            cell = _g[_f];\r\n                            update.to(cell).update(function (old) { old.textColor = options.textColor; });\r\n                        }\r\n                        if (update.editInfo.count === 0)\r\n                            return [2 /*return*/];\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: this.plugin.state.data, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _h.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.addDistance = function (a, b, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cellA, cellB, dependsOn, update, state;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cellA = this.plugin.helpers.substructureParent.get(a.structure);\r\n                        cellB = this.plugin.helpers.substructureParent.get(b.structure);\r\n                        if (!cellA || !cellB)\r\n                            return [2 /*return*/];\r\n                        dependsOn = [cellA.transform.ref];\r\n                        arraySetAdd(dependsOn, cellB.transform.ref);\r\n                        update = this.getGroup();\r\n                        update\r\n                            .apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\r\n                            selections: [\r\n                                { key: 'a', groupId: 'a', ref: cellA.transform.ref, expression: StructureElement.Loci.toExpression(a) },\r\n                                { key: 'b', groupId: 'b', ref: cellB.transform.ref, expression: StructureElement.Loci.toExpression(b) }\r\n                            ],\r\n                            isTransitive: true,\r\n                            label: 'Distance'\r\n                        }, { dependsOn: dependsOn, tags: options === null || options === void 0 ? void 0 : options.selectionTags })\r\n                            .apply(StateTransforms.Representation.StructureSelectionsDistance3D, __assign(__assign(__assign({ customText: (options === null || options === void 0 ? void 0 : options.customText) || '', unitLabel: this.state.options.distanceUnitLabel, textColor: this.state.options.textColor }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), { tags: options === null || options === void 0 ? void 0 : options.reprTags });\r\n                        state = this.plugin.state.data;\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.addAngle = function (a, b, c, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cellA, cellB, cellC, dependsOn, update, state;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cellA = this.plugin.helpers.substructureParent.get(a.structure);\r\n                        cellB = this.plugin.helpers.substructureParent.get(b.structure);\r\n                        cellC = this.plugin.helpers.substructureParent.get(c.structure);\r\n                        if (!cellA || !cellB || !cellC)\r\n                            return [2 /*return*/];\r\n                        dependsOn = [cellA.transform.ref];\r\n                        arraySetAdd(dependsOn, cellB.transform.ref);\r\n                        arraySetAdd(dependsOn, cellC.transform.ref);\r\n                        update = this.getGroup();\r\n                        update\r\n                            .apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\r\n                            selections: [\r\n                                { key: 'a', ref: cellA.transform.ref, expression: StructureElement.Loci.toExpression(a) },\r\n                                { key: 'b', ref: cellB.transform.ref, expression: StructureElement.Loci.toExpression(b) },\r\n                                { key: 'c', ref: cellC.transform.ref, expression: StructureElement.Loci.toExpression(c) }\r\n                            ],\r\n                            isTransitive: true,\r\n                            label: 'Angle'\r\n                        }, { dependsOn: dependsOn, tags: options === null || options === void 0 ? void 0 : options.selectionTags })\r\n                            .apply(StateTransforms.Representation.StructureSelectionsAngle3D, __assign(__assign(__assign({ customText: (options === null || options === void 0 ? void 0 : options.customText) || '', textColor: this.state.options.textColor }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), { tags: options === null || options === void 0 ? void 0 : options.reprTags });\r\n                        state = this.plugin.state.data;\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.addDihedral = function (a, b, c, d, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cellA, cellB, cellC, cellD, dependsOn, update, state;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cellA = this.plugin.helpers.substructureParent.get(a.structure);\r\n                        cellB = this.plugin.helpers.substructureParent.get(b.structure);\r\n                        cellC = this.plugin.helpers.substructureParent.get(c.structure);\r\n                        cellD = this.plugin.helpers.substructureParent.get(d.structure);\r\n                        if (!cellA || !cellB || !cellC || !cellD)\r\n                            return [2 /*return*/];\r\n                        dependsOn = [cellA.transform.ref];\r\n                        arraySetAdd(dependsOn, cellB.transform.ref);\r\n                        arraySetAdd(dependsOn, cellC.transform.ref);\r\n                        arraySetAdd(dependsOn, cellD.transform.ref);\r\n                        update = this.getGroup();\r\n                        update\r\n                            .apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\r\n                            selections: [\r\n                                { key: 'a', ref: cellA.transform.ref, expression: StructureElement.Loci.toExpression(a) },\r\n                                { key: 'b', ref: cellB.transform.ref, expression: StructureElement.Loci.toExpression(b) },\r\n                                { key: 'c', ref: cellC.transform.ref, expression: StructureElement.Loci.toExpression(c) },\r\n                                { key: 'd', ref: cellD.transform.ref, expression: StructureElement.Loci.toExpression(d) }\r\n                            ],\r\n                            isTransitive: true,\r\n                            label: 'Dihedral'\r\n                        }, { dependsOn: dependsOn, tags: options === null || options === void 0 ? void 0 : options.selectionTags })\r\n                            .apply(StateTransforms.Representation.StructureSelectionsDihedral3D, __assign(__assign(__assign({ customText: (options === null || options === void 0 ? void 0 : options.customText) || '', textColor: this.state.options.textColor }, options === null || options === void 0 ? void 0 : options.lineParams), options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), { tags: options === null || options === void 0 ? void 0 : options.reprTags });\r\n                        state = this.plugin.state.data;\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.addLabel = function (a, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cellA, dependsOn, update, state;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cellA = this.plugin.helpers.substructureParent.get(a.structure);\r\n                        if (!cellA)\r\n                            return [2 /*return*/];\r\n                        dependsOn = [cellA.transform.ref];\r\n                        update = this.getGroup();\r\n                        update\r\n                            .apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\r\n                            selections: [\r\n                                { key: 'a', ref: cellA.transform.ref, expression: StructureElement.Loci.toExpression(a) },\r\n                            ],\r\n                            isTransitive: true,\r\n                            label: 'Label'\r\n                        }, { dependsOn: dependsOn, tags: options === null || options === void 0 ? void 0 : options.selectionTags })\r\n                            .apply(StateTransforms.Representation.StructureSelectionsLabel3D, __assign(__assign({ textColor: this.state.options.textColor }, options === null || options === void 0 ? void 0 : options.labelParams), options === null || options === void 0 ? void 0 : options.visualParams), { tags: options === null || options === void 0 ? void 0 : options.reprTags });\r\n                        state = this.plugin.state.data;\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.addOrientation = function (a) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cellA, dependsOn, update, state;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cellA = this.plugin.helpers.substructureParent.get(a.structure);\r\n                        if (!cellA)\r\n                            return [2 /*return*/];\r\n                        dependsOn = [cellA.transform.ref];\r\n                        update = this.getGroup();\r\n                        update\r\n                            .apply(StateTransforms.Model.MultiStructureSelectionFromExpression, {\r\n                            selections: [\r\n                                { key: 'a', ref: cellA.transform.ref, expression: StructureElement.Loci.toExpression(a) },\r\n                            ],\r\n                            isTransitive: true,\r\n                            label: 'Orientation'\r\n                        }, { dependsOn: dependsOn })\r\n                            .apply(StateTransforms.Representation.StructureSelectionsOrientation3D);\r\n                        state = this.plugin.state.data;\r\n                        return [4 /*yield*/, PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true } })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    StructureMeasurementManager.prototype.getTransforms = function (transformer) {\r\n        var state = this.plugin.state.data;\r\n        var groupRef = StateSelection.findTagInSubtree(state.tree, StateTransform.RootRef, MeasurementGroupTag);\r\n        var ret = groupRef ? state.select(StateSelection.Generators.ofTransformer(transformer, groupRef)) : this._empty;\r\n        if (ret.length === 0)\r\n            return this._empty;\r\n        return ret;\r\n    };\r\n    StructureMeasurementManager.prototype.sync = function () {\r\n        var updated = this.updateState({\r\n            labels: this.getTransforms(StateTransforms.Representation.StructureSelectionsLabel3D),\r\n            distances: this.getTransforms(StateTransforms.Representation.StructureSelectionsDistance3D),\r\n            angles: this.getTransforms(StateTransforms.Representation.StructureSelectionsAngle3D),\r\n            dihedrals: this.getTransforms(StateTransforms.Representation.StructureSelectionsDihedral3D),\r\n            orientations: this.getTransforms(StateTransforms.Representation.StructureSelectionsOrientation3D)\r\n        });\r\n        if (updated)\r\n            this.stateUpdated();\r\n    };\r\n    return StructureMeasurementManager;\r\n}(StatefulPluginComponent));\r\n//# sourceMappingURL=measurement.js.map"]},"metadata":{},"sourceType":"module"}