"use strict";
/**
 * Copyright (c) 2019-2021 Mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexPairBonds = void 0;
var tslib_1 = require("tslib");
var graph_1 = require("../../../../mol-math/graph");
var property_1 = require("../../common/property");
var common_1 = require("../../../../mol-model/structure/structure/unit/bonds/common");
function getGraph(indexA, indexB, props, count) {
    var builder = new graph_1.IntAdjacencyGraph.EdgeBuilder(count, indexA, indexB);
    var order = new Int8Array(builder.slotCount);
    var distance = new Array(builder.slotCount);
    var flag = new Array(builder.slotCount);
    for (var i = 0, _i = builder.edgeCount; i < _i; i++) {
        builder.addNextEdge();
        builder.assignProperty(order, props.order ? props.order[i] : 1);
        builder.assignProperty(distance, props.distance ? props.distance[i] : -1);
        builder.assignProperty(flag, props.flag ? props.flag[i] : 1 /* Covalent */);
    }
    return builder.createGraph({ order: order, distance: distance, flag: flag });
}
var IndexPairBonds;
(function (IndexPairBonds) {
    IndexPairBonds.Descriptor = {
        name: 'index_pair_bonds',
    };
    IndexPairBonds.Provider = property_1.FormatPropertyProvider.create(IndexPairBonds.Descriptor);
    IndexPairBonds.DefaultProps = { maxDistance: common_1.DefaultBondMaxRadius };
    function fromData(data, props) {
        if (props === void 0) { props = {}; }
        var p = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, IndexPairBonds.DefaultProps), props);
        var pairs = data.pairs, count = data.count;
        var indexA = pairs.indexA.toArray();
        var indexB = pairs.indexB.toArray();
        var order = pairs.order && pairs.order.toArray();
        var distance = pairs.distance && pairs.distance.toArray();
        var flag = pairs.flag && pairs.flag.toArray();
        return {
            bonds: getGraph(indexA, indexB, { order: order, distance: distance, flag: flag }, count),
            maxDistance: p.maxDistance
        };
    }
    IndexPairBonds.fromData = fromData;
})(IndexPairBonds = exports.IndexPairBonds || (exports.IndexPairBonds = {}));
//# sourceMappingURL=index-pair.js.map