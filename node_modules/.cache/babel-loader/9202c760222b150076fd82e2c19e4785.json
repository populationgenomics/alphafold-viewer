{"ast":null,"code":"/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { IntraUnitBondLineVisual, IntraUnitBondLineParams } from '../visual/bond-intra-unit-line';\nimport { InterUnitBondLineVisual, InterUnitBondLineParams } from '../visual/bond-inter-unit-line';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { UnitsRepresentation } from '../units-representation';\nimport { ComplexRepresentation } from '../complex-representation';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { getUnitKindsParam } from '../params';\nimport { ElementPointParams, ElementPointVisual } from '../visual/element-point';\nimport { ElementCrossParams, ElementCrossVisual } from '../visual/element-cross';\nvar LineVisuals = {\n  'intra-bond': function (ctx, getParams) {\n    return UnitsRepresentation('Intra-unit bond line', ctx, getParams, IntraUnitBondLineVisual);\n  },\n  'inter-bond': function (ctx, getParams) {\n    return ComplexRepresentation('Inter-unit bond line', ctx, getParams, InterUnitBondLineVisual);\n  },\n  'element-point': function (ctx, getParams) {\n    return UnitsRepresentation('Points', ctx, getParams, ElementPointVisual);\n  },\n  'element-cross': function (ctx, getParams) {\n    return UnitsRepresentation('Crosses', ctx, getParams, ElementCrossVisual);\n  }\n};\nexport var LineParams = __assign(__assign(__assign(__assign(__assign({}, IntraUnitBondLineParams), InterUnitBondLineParams), ElementPointParams), ElementCrossParams), {\n  multipleBonds: PD.Select('offset', PD.arrayToOptions(['off', 'symmetric', 'offset'])),\n  includeParent: PD.Boolean(false),\n  sizeFactor: PD.Numeric(3, {\n    min: 0.01,\n    max: 10,\n    step: 0.01\n  }),\n  unitKinds: getUnitKindsParam(['atomic']),\n  visuals: PD.MultiSelect(['intra-bond', 'inter-bond', 'element-point', 'element-cross'], PD.objectToOptions(LineVisuals))\n});\nexport function getLineParams(ctx, structure) {\n  var params = PD.clone(LineParams);\n  params.pointStyle.defaultValue = 'circle';\n  return params;\n}\nexport function LineRepresentation(ctx, getParams) {\n  return Representation.createMulti('Line', ctx, getParams, StructureRepresentationStateBuilder, LineVisuals);\n}\nexport var LineRepresentationProvider = StructureRepresentationProvider({\n  name: 'line',\n  label: 'Line',\n  description: 'Displays bonds as lines and atoms as points or croses.',\n  factory: LineRepresentation,\n  getParams: getLineParams,\n  defaultValues: PD.getDefaultValues(LineParams),\n  defaultColorTheme: {\n    name: 'element-symbol'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  },\n  getData: function (structure, props) {\n    return props.includeParent ? structure.asParent() : structure;\n  },\n  mustRecreate: function (oldProps, newProps) {\n    return oldProps.includeParent !== newProps.includeParent;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { IntraUnitBondLineVisual, IntraUnitBondLineParams } from '../visual/bond-intra-unit-line';\r\nimport { InterUnitBondLineVisual, InterUnitBondLineParams } from '../visual/bond-inter-unit-line';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ComplexRepresentation } from '../complex-representation';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { getUnitKindsParam } from '../params';\r\nimport { ElementPointParams, ElementPointVisual } from '../visual/element-point';\r\nimport { ElementCrossParams, ElementCrossVisual } from '../visual/element-cross';\r\nvar LineVisuals = {\r\n    'intra-bond': function (ctx, getParams) { return UnitsRepresentation('Intra-unit bond line', ctx, getParams, IntraUnitBondLineVisual); },\r\n    'inter-bond': function (ctx, getParams) { return ComplexRepresentation('Inter-unit bond line', ctx, getParams, InterUnitBondLineVisual); },\r\n    'element-point': function (ctx, getParams) { return UnitsRepresentation('Points', ctx, getParams, ElementPointVisual); },\r\n    'element-cross': function (ctx, getParams) { return UnitsRepresentation('Crosses', ctx, getParams, ElementCrossVisual); },\r\n};\r\nexport var LineParams = __assign(__assign(__assign(__assign(__assign({}, IntraUnitBondLineParams), InterUnitBondLineParams), ElementPointParams), ElementCrossParams), { multipleBonds: PD.Select('offset', PD.arrayToOptions(['off', 'symmetric', 'offset'])), includeParent: PD.Boolean(false), sizeFactor: PD.Numeric(3, { min: 0.01, max: 10, step: 0.01 }), unitKinds: getUnitKindsParam(['atomic']), visuals: PD.MultiSelect(['intra-bond', 'inter-bond', 'element-point', 'element-cross'], PD.objectToOptions(LineVisuals)) });\r\nexport function getLineParams(ctx, structure) {\r\n    var params = PD.clone(LineParams);\r\n    params.pointStyle.defaultValue = 'circle';\r\n    return params;\r\n}\r\nexport function LineRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Line', ctx, getParams, StructureRepresentationStateBuilder, LineVisuals);\r\n}\r\nexport var LineRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'line',\r\n    label: 'Line',\r\n    description: 'Displays bonds as lines and atoms as points or croses.',\r\n    factory: LineRepresentation,\r\n    getParams: getLineParams,\r\n    defaultValues: PD.getDefaultValues(LineParams),\r\n    defaultColorTheme: { name: 'element-symbol' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; },\r\n    getData: function (structure, props) {\r\n        return props.includeParent ? structure.asParent() : structure;\r\n    },\r\n    mustRecreate: function (oldProps, newProps) {\r\n        return oldProps.includeParent !== newProps.includeParent;\r\n    }\r\n});\r\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}