{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Column, Table } from '../../../mol-data/db';\nimport { EntitySubtype } from '../../../mol-model/structure/model/properties/common';\nimport { getEntityType, getEntitySubtype } from '../../../mol-model/structure/model/types';\nimport { BasicSchema } from './schema';\nexport function getEntities(data, properties) {\n  var _a;\n\n  var entityData;\n\n  if (!data.entity.id.isDefined) {\n    var entityIds_1 = new Set();\n    var ids = [];\n    var types = [];\n    var _b = data.atom_site,\n        label_entity_id = _b.label_entity_id,\n        label_comp_id = _b.label_comp_id;\n\n    for (var i = 0, il = data.atom_site._rowCount; i < il; i++) {\n      var entityId = label_entity_id.value(i);\n\n      if (!entityIds_1.has(entityId)) {\n        ids.push(entityId);\n        types.push(getEntityType(label_comp_id.value(i)));\n        entityIds_1.add(entityId);\n      }\n    }\n\n    var sphere_entity_id = data.ihm_sphere_obj_site.entity_id;\n\n    for (var i = 0, il = data.ihm_sphere_obj_site._rowCount; i < il; i++) {\n      var entityId = sphere_entity_id.value(i);\n\n      if (!entityIds_1.has(entityId)) {\n        ids.push(entityId);\n        types.push('polymer');\n        entityIds_1.add(entityId);\n      }\n    }\n\n    var gaussian_entity_id = data.ihm_gaussian_obj_site.entity_id;\n\n    for (var i = 0, il = data.ihm_gaussian_obj_site._rowCount; i < il; i++) {\n      var entityId = gaussian_entity_id.value(i);\n\n      if (!entityIds_1.has(entityId)) {\n        ids.push(entityId);\n        types.push('polymer');\n        entityIds_1.add(entityId);\n      }\n    }\n\n    entityData = Table.ofPartialColumns(BasicSchema.entity, {\n      id: Column.ofArray({\n        array: ids,\n        schema: BasicSchema.entity.id\n      }),\n      type: Column.ofArray({\n        array: types,\n        schema: BasicSchema.entity.type\n      })\n    }, ids.length);\n  } else {\n    entityData = data.entity;\n  }\n\n  var getEntityIndex = Column.createIndexer(entityData.id); //\n\n  var subtypes = new Array(entityData._rowCount);\n  subtypes.fill('other');\n  var entityIds = new Set();\n  var assignSubtype = false;\n\n  if (data.entity_poly && data.entity_poly.type.isDefined) {\n    var _c = data.entity_poly,\n        entity_id = _c.entity_id,\n        type = _c.type,\n        _rowCount = _c._rowCount;\n\n    for (var i = 0; i < _rowCount; ++i) {\n      var entityId = entity_id.value(i);\n      subtypes[getEntityIndex(entityId)] = type.value(i);\n      entityIds.add(entityId);\n    }\n  } else {\n    assignSubtype = true;\n  }\n\n  if (data.pdbx_entity_branch && data.pdbx_entity_branch.entity_id.isDefined) {\n    var _d = data.pdbx_entity_branch,\n        entity_id = _d.entity_id,\n        type = _d.type,\n        _rowCount = _d._rowCount;\n\n    for (var i = 0; i < _rowCount; ++i) {\n      var entityId = entity_id.value(i);\n      subtypes[getEntityIndex(entityId)] = type.value(i);\n      entityIds.add(entityId);\n    }\n  } else {\n    assignSubtype = true;\n  }\n\n  if (entityIds.size < subtypes.length) {\n    // still unassigned subtypes, need to derive from component id/type\n    assignSubtype = true;\n  }\n\n  if (assignSubtype) {\n    var chemCompType = new Map();\n\n    if (data.chem_comp) {\n      var _e = data.chem_comp,\n          id = _e.id,\n          type = _e.type;\n\n      for (var i = 0, il = data.chem_comp._rowCount; i < il; i++) {\n        chemCompType.set(id.value(i), type.value(i));\n      }\n    }\n\n    if (data.atom_site) {\n      var _f = data.atom_site,\n          label_entity_id = _f.label_entity_id,\n          label_comp_id = _f.label_comp_id;\n\n      for (var i = 0, il = data.atom_site._rowCount; i < il; i++) {\n        var entityId = label_entity_id.value(i);\n\n        if (!entityIds.has(entityId)) {\n          var compId = label_comp_id.value(i);\n          var compType = chemCompType.get(compId) || '';\n          subtypes[getEntityIndex(entityId)] = getEntitySubtype(compId, compType);\n          entityIds.add(entityId);\n        }\n      }\n    } // TODO how to handle coarse?\n\n  }\n\n  var subtypeColumn = Column.ofArray({\n    array: subtypes,\n    schema: EntitySubtype\n  }); //\n\n  var prdIds = new Array(entityData._rowCount);\n  prdIds.fill('');\n\n  if (data.pdbx_molecule && data.pdbx_molecule.prd_id.isDefined) {\n    var _g = data.pdbx_molecule,\n        asym_id = _g.asym_id,\n        prd_id = _g.prd_id,\n        _rowCount = _g._rowCount;\n\n    for (var i = 0; i < _rowCount; ++i) {\n      var asymId = asym_id.value(i);\n      var entityId = (_a = properties.structAsymMap.get(asymId)) === null || _a === void 0 ? void 0 : _a.entity_id;\n\n      if (entityId !== undefined) {\n        prdIds[getEntityIndex(entityId)] = prd_id.value(i);\n      }\n    }\n  }\n\n  var prdIdColumn = Column.ofArray({\n    array: prdIds,\n    schema: Column.Schema.str\n  });\n  return {\n    data: entityData,\n    subtype: subtypeColumn,\n    prd_id: prdIdColumn,\n    getEntityIndex: getEntityIndex\n  };\n}","map":{"version":3,"sources":["../../../../src/mol-model-formats/structure/basic/entities.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Column, Table } from '../../../mol-data/db';\r\nimport { EntitySubtype } from '../../../mol-model/structure/model/properties/common';\r\nimport { getEntityType, getEntitySubtype } from '../../../mol-model/structure/model/types';\r\nimport { BasicSchema } from './schema';\r\nexport function getEntities(data, properties) {\r\n    var _a;\r\n    var entityData;\r\n    if (!data.entity.id.isDefined) {\r\n        var entityIds_1 = new Set();\r\n        var ids = [];\r\n        var types = [];\r\n        var _b = data.atom_site, label_entity_id = _b.label_entity_id, label_comp_id = _b.label_comp_id;\r\n        for (var i = 0, il = data.atom_site._rowCount; i < il; i++) {\r\n            var entityId = label_entity_id.value(i);\r\n            if (!entityIds_1.has(entityId)) {\r\n                ids.push(entityId);\r\n                types.push(getEntityType(label_comp_id.value(i)));\r\n                entityIds_1.add(entityId);\r\n            }\r\n        }\r\n        var sphere_entity_id = data.ihm_sphere_obj_site.entity_id;\r\n        for (var i = 0, il = data.ihm_sphere_obj_site._rowCount; i < il; i++) {\r\n            var entityId = sphere_entity_id.value(i);\r\n            if (!entityIds_1.has(entityId)) {\r\n                ids.push(entityId);\r\n                types.push('polymer');\r\n                entityIds_1.add(entityId);\r\n            }\r\n        }\r\n        var gaussian_entity_id = data.ihm_gaussian_obj_site.entity_id;\r\n        for (var i = 0, il = data.ihm_gaussian_obj_site._rowCount; i < il; i++) {\r\n            var entityId = gaussian_entity_id.value(i);\r\n            if (!entityIds_1.has(entityId)) {\r\n                ids.push(entityId);\r\n                types.push('polymer');\r\n                entityIds_1.add(entityId);\r\n            }\r\n        }\r\n        entityData = Table.ofPartialColumns(BasicSchema.entity, {\r\n            id: Column.ofArray({ array: ids, schema: BasicSchema.entity.id }),\r\n            type: Column.ofArray({ array: types, schema: BasicSchema.entity.type }),\r\n        }, ids.length);\r\n    }\r\n    else {\r\n        entityData = data.entity;\r\n    }\r\n    var getEntityIndex = Column.createIndexer(entityData.id);\r\n    //\r\n    var subtypes = new Array(entityData._rowCount);\r\n    subtypes.fill('other');\r\n    var entityIds = new Set();\r\n    var assignSubtype = false;\r\n    if (data.entity_poly && data.entity_poly.type.isDefined) {\r\n        var _c = data.entity_poly, entity_id = _c.entity_id, type = _c.type, _rowCount = _c._rowCount;\r\n        for (var i = 0; i < _rowCount; ++i) {\r\n            var entityId = entity_id.value(i);\r\n            subtypes[getEntityIndex(entityId)] = type.value(i);\r\n            entityIds.add(entityId);\r\n        }\r\n    }\r\n    else {\r\n        assignSubtype = true;\r\n    }\r\n    if (data.pdbx_entity_branch && data.pdbx_entity_branch.entity_id.isDefined) {\r\n        var _d = data.pdbx_entity_branch, entity_id = _d.entity_id, type = _d.type, _rowCount = _d._rowCount;\r\n        for (var i = 0; i < _rowCount; ++i) {\r\n            var entityId = entity_id.value(i);\r\n            subtypes[getEntityIndex(entityId)] = type.value(i);\r\n            entityIds.add(entityId);\r\n        }\r\n    }\r\n    else {\r\n        assignSubtype = true;\r\n    }\r\n    if (entityIds.size < subtypes.length) {\r\n        // still unassigned subtypes, need to derive from component id/type\r\n        assignSubtype = true;\r\n    }\r\n    if (assignSubtype) {\r\n        var chemCompType = new Map();\r\n        if (data.chem_comp) {\r\n            var _e = data.chem_comp, id = _e.id, type = _e.type;\r\n            for (var i = 0, il = data.chem_comp._rowCount; i < il; i++) {\r\n                chemCompType.set(id.value(i), type.value(i));\r\n            }\r\n        }\r\n        if (data.atom_site) {\r\n            var _f = data.atom_site, label_entity_id = _f.label_entity_id, label_comp_id = _f.label_comp_id;\r\n            for (var i = 0, il = data.atom_site._rowCount; i < il; i++) {\r\n                var entityId = label_entity_id.value(i);\r\n                if (!entityIds.has(entityId)) {\r\n                    var compId = label_comp_id.value(i);\r\n                    var compType = chemCompType.get(compId) || '';\r\n                    subtypes[getEntityIndex(entityId)] = getEntitySubtype(compId, compType);\r\n                    entityIds.add(entityId);\r\n                }\r\n            }\r\n        }\r\n        // TODO how to handle coarse?\r\n    }\r\n    var subtypeColumn = Column.ofArray({ array: subtypes, schema: EntitySubtype });\r\n    //\r\n    var prdIds = new Array(entityData._rowCount);\r\n    prdIds.fill('');\r\n    if (data.pdbx_molecule && data.pdbx_molecule.prd_id.isDefined) {\r\n        var _g = data.pdbx_molecule, asym_id = _g.asym_id, prd_id = _g.prd_id, _rowCount = _g._rowCount;\r\n        for (var i = 0; i < _rowCount; ++i) {\r\n            var asymId = asym_id.value(i);\r\n            var entityId = (_a = properties.structAsymMap.get(asymId)) === null || _a === void 0 ? void 0 : _a.entity_id;\r\n            if (entityId !== undefined) {\r\n                prdIds[getEntityIndex(entityId)] = prd_id.value(i);\r\n            }\r\n        }\r\n    }\r\n    var prdIdColumn = Column.ofArray({ array: prdIds, schema: Column.Schema.str });\r\n    return {\r\n        data: entityData,\r\n        subtype: subtypeColumn,\r\n        prd_id: prdIdColumn,\r\n        getEntityIndex: getEntityIndex\r\n    };\r\n}\r\n//# sourceMappingURL=entities.js.map"]},"metadata":{},"sourceType":"module"}