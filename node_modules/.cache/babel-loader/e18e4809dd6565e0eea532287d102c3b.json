{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { Vec3, Mat3 } from '../../mol-math/linear-algebra';\nvar a = Vec3(),\n    b = Vec3(),\n    c = Vec3();\n/** Create primitive with face normals from vertices and indices */\n\nexport function createPrimitive(vertices, indices) {\n  var count = indices.length;\n  var builder = PrimitiveBuilder(count / 3);\n\n  for (var i = 0; i < count; i += 3) {\n    Vec3.fromArray(a, vertices, indices[i] * 3);\n    Vec3.fromArray(b, vertices, indices[i + 1] * 3);\n    Vec3.fromArray(c, vertices, indices[i + 2] * 3);\n    builder.add(a, b, c);\n  }\n\n  return builder.getPrimitive();\n}\nexport function copyPrimitive(primitive) {\n  return {\n    vertices: new Float32Array(primitive.vertices),\n    normals: new Float32Array(primitive.normals),\n    indices: new Uint32Array(primitive.indices)\n  };\n}\nvar vn = Vec3();\n/** Builder to create primitive with face normals */\n\nexport function PrimitiveBuilder(triangleCount, vertexCount) {\n  if (vertexCount === undefined) vertexCount = triangleCount * 3;\n  var vertices = new Float32Array(vertexCount * 3);\n  var normals = new Float32Array(vertexCount * 3);\n  var indices = new Uint32Array(triangleCount * 3);\n  var vOffset = 0;\n  var iOffset = 0;\n  return {\n    add: function (a, b, c) {\n      Vec3.toArray(a, vertices, vOffset);\n      Vec3.toArray(b, vertices, vOffset + 3);\n      Vec3.toArray(c, vertices, vOffset + 6);\n      Vec3.triangleNormal(vn, a, b, c);\n\n      for (var j = 0; j < 3; ++j) {\n        Vec3.toArray(vn, normals, vOffset + 3 * j);\n        indices[iOffset + j] = vOffset / 3 + j;\n      }\n\n      vOffset += 9;\n      iOffset += 3;\n    },\n    addQuad: function (a, b, c, d) {\n      Vec3.toArray(a, vertices, vOffset);\n      Vec3.toArray(b, vertices, vOffset + 3);\n      Vec3.toArray(c, vertices, vOffset + 6);\n      Vec3.toArray(d, vertices, vOffset + 9);\n      Vec3.triangleNormal(vn, a, b, c);\n\n      for (var j = 0; j < 4; ++j) {\n        Vec3.toArray(vn, normals, vOffset + 3 * j);\n      }\n\n      var vOffset3 = vOffset / 3; // a, b, c\n\n      indices[iOffset] = vOffset3;\n      indices[iOffset + 1] = vOffset3 + 1;\n      indices[iOffset + 2] = vOffset3 + 2; // a, b, c\n\n      indices[iOffset + 3] = vOffset3 + 2;\n      indices[iOffset + 4] = vOffset3 + 3;\n      indices[iOffset + 5] = vOffset3;\n      vOffset += 12;\n      iOffset += 6;\n    },\n    getPrimitive: function () {\n      return {\n        vertices: vertices,\n        normals: normals,\n        indices: indices\n      };\n    }\n  };\n}\nvar tmpV = Vec3();\nvar tmpMat3 = Mat3();\n/** Transform primitive in-place */\n\nexport function transformPrimitive(primitive, t) {\n  var vertices = primitive.vertices,\n      normals = primitive.normals;\n  var n = Mat3.directionTransform(tmpMat3, t);\n\n  for (var i = 0, il = vertices.length; i < il; i += 3) {\n    // position\n    Vec3.transformMat4(tmpV, Vec3.fromArray(tmpV, vertices, i), t);\n    Vec3.toArray(tmpV, vertices, i); // normal\n\n    Vec3.transformMat3(tmpV, Vec3.fromArray(tmpV, normals, i), n);\n    Vec3.toArray(tmpV, normals, i);\n  }\n\n  return primitive;\n}","map":{"version":3,"sources":["../../../src/mol-geo/primitive/primitive.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { Vec3, Mat3 } from '../../mol-math/linear-algebra';\r\nvar a = Vec3(), b = Vec3(), c = Vec3();\r\n/** Create primitive with face normals from vertices and indices */\r\nexport function createPrimitive(vertices, indices) {\r\n    var count = indices.length;\r\n    var builder = PrimitiveBuilder(count / 3);\r\n    for (var i = 0; i < count; i += 3) {\r\n        Vec3.fromArray(a, vertices, indices[i] * 3);\r\n        Vec3.fromArray(b, vertices, indices[i + 1] * 3);\r\n        Vec3.fromArray(c, vertices, indices[i + 2] * 3);\r\n        builder.add(a, b, c);\r\n    }\r\n    return builder.getPrimitive();\r\n}\r\nexport function copyPrimitive(primitive) {\r\n    return {\r\n        vertices: new Float32Array(primitive.vertices),\r\n        normals: new Float32Array(primitive.normals),\r\n        indices: new Uint32Array(primitive.indices)\r\n    };\r\n}\r\nvar vn = Vec3();\r\n/** Builder to create primitive with face normals */\r\nexport function PrimitiveBuilder(triangleCount, vertexCount) {\r\n    if (vertexCount === undefined)\r\n        vertexCount = triangleCount * 3;\r\n    var vertices = new Float32Array(vertexCount * 3);\r\n    var normals = new Float32Array(vertexCount * 3);\r\n    var indices = new Uint32Array(triangleCount * 3);\r\n    var vOffset = 0;\r\n    var iOffset = 0;\r\n    return {\r\n        add: function (a, b, c) {\r\n            Vec3.toArray(a, vertices, vOffset);\r\n            Vec3.toArray(b, vertices, vOffset + 3);\r\n            Vec3.toArray(c, vertices, vOffset + 6);\r\n            Vec3.triangleNormal(vn, a, b, c);\r\n            for (var j = 0; j < 3; ++j) {\r\n                Vec3.toArray(vn, normals, vOffset + 3 * j);\r\n                indices[iOffset + j] = vOffset / 3 + j;\r\n            }\r\n            vOffset += 9;\r\n            iOffset += 3;\r\n        },\r\n        addQuad: function (a, b, c, d) {\r\n            Vec3.toArray(a, vertices, vOffset);\r\n            Vec3.toArray(b, vertices, vOffset + 3);\r\n            Vec3.toArray(c, vertices, vOffset + 6);\r\n            Vec3.toArray(d, vertices, vOffset + 9);\r\n            Vec3.triangleNormal(vn, a, b, c);\r\n            for (var j = 0; j < 4; ++j) {\r\n                Vec3.toArray(vn, normals, vOffset + 3 * j);\r\n            }\r\n            var vOffset3 = vOffset / 3;\r\n            // a, b, c\r\n            indices[iOffset] = vOffset3;\r\n            indices[iOffset + 1] = vOffset3 + 1;\r\n            indices[iOffset + 2] = vOffset3 + 2;\r\n            // a, b, c\r\n            indices[iOffset + 3] = vOffset3 + 2;\r\n            indices[iOffset + 4] = vOffset3 + 3;\r\n            indices[iOffset + 5] = vOffset3;\r\n            vOffset += 12;\r\n            iOffset += 6;\r\n        },\r\n        getPrimitive: function () { return ({ vertices: vertices, normals: normals, indices: indices }); }\r\n    };\r\n}\r\nvar tmpV = Vec3();\r\nvar tmpMat3 = Mat3();\r\n/** Transform primitive in-place */\r\nexport function transformPrimitive(primitive, t) {\r\n    var vertices = primitive.vertices, normals = primitive.normals;\r\n    var n = Mat3.directionTransform(tmpMat3, t);\r\n    for (var i = 0, il = vertices.length; i < il; i += 3) {\r\n        // position\r\n        Vec3.transformMat4(tmpV, Vec3.fromArray(tmpV, vertices, i), t);\r\n        Vec3.toArray(tmpV, vertices, i);\r\n        // normal\r\n        Vec3.transformMat3(tmpV, Vec3.fromArray(tmpV, normals, i), n);\r\n        Vec3.toArray(tmpV, normals, i);\r\n    }\r\n    return primitive;\r\n}\r\n//# sourceMappingURL=primitive.js.map"]},"metadata":{},"sourceType":"module"}