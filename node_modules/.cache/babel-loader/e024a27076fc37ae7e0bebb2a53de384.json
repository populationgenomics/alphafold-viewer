{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { createLinkCylinderMesh, LinkCylinderParams } from './util/link';\nimport { UnitsMeshParams } from '../units-visual';\nimport { ComplexMeshVisual } from '../complex-visual';\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\nimport { OrderedSet, Interval } from '../../../mol-data/int';\nimport { EmptyLoci } from '../../../mol-model/loci';\nimport { getElementIdx, MetalsSet } from '../../../mol-model/structure/structure/unit/bonds/common';\nimport { getAltResidueLociFromId, getAltResidueLoci } from './util/common';\n\nfunction createCarbohydrateTerminalLinkCylinderMesh(ctx, structure, theme, props, mesh) {\n  var _a = structure.carbohydrates,\n      terminalLinks = _a.terminalLinks,\n      elements = _a.elements;\n  var terminalLinkSizeFactor = props.terminalLinkSizeFactor;\n  var location = StructureElement.Location.create(structure);\n  var builderProps = {\n    linkCount: terminalLinks.length,\n    position: function (posA, posB, edgeIndex) {\n      var l = terminalLinks[edgeIndex];\n\n      if (l.fromCarbohydrate) {\n        Vec3.copy(posA, elements[l.carbohydrateIndex].geometry.center);\n        l.elementUnit.conformation.position(l.elementUnit.elements[l.elementIndex], posB);\n      } else {\n        l.elementUnit.conformation.position(l.elementUnit.elements[l.elementIndex], posA);\n        Vec3.copy(posB, elements[l.carbohydrateIndex].geometry.center);\n      }\n    },\n    radius: function (edgeIndex) {\n      var l = terminalLinks[edgeIndex];\n\n      if (l.fromCarbohydrate) {\n        var carb = elements[l.carbohydrateIndex];\n        var ring = carb.unit.rings.all[carb.ringIndex];\n        location.unit = carb.unit;\n        location.element = carb.unit.elements[ring[0]];\n      } else {\n        location.unit = l.elementUnit;\n        location.element = l.elementUnit.elements[l.elementIndex];\n      }\n\n      return theme.size.size(location) * terminalLinkSizeFactor;\n    },\n    style: function (edgeIndex) {\n      var l = terminalLinks[edgeIndex];\n      var eI = l.elementUnit.elements[l.elementIndex];\n      var beI = getElementIdx(l.elementUnit.model.atomicHierarchy.atoms.type_symbol.value(eI));\n      return MetalsSet.has(beI) ? 1\n      /* Dashed */\n      : 0\n      /* Solid */\n      ;\n    }\n  };\n  return createLinkCylinderMesh(ctx, builderProps, props, mesh);\n}\n\nexport var CarbohydrateTerminalLinkParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), {\n  terminalLinkSizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 3,\n    step: 0.01\n  })\n});\nexport function CarbohydrateTerminalLinkVisual(materialId) {\n  return ComplexMeshVisual({\n    defaultProps: PD.getDefaultValues(CarbohydrateTerminalLinkParams),\n    createGeometry: createCarbohydrateTerminalLinkCylinderMesh,\n    createLocationIterator: CarbohydrateTerminalLinkIterator,\n    getLoci: getTerminalLinkLoci,\n    eachLocation: eachTerminalLink,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.terminalLinkSizeFactor !== currentProps.terminalLinkSizeFactor || newProps.radialSegments !== currentProps.radialSegments || newProps.linkCap !== currentProps.linkCap;\n    }\n  }, materialId);\n}\n\nfunction CarbohydrateTerminalLinkIterator(structure) {\n  var _a = structure.carbohydrates,\n      elements = _a.elements,\n      terminalLinks = _a.terminalLinks;\n  var groupCount = terminalLinks.length;\n  var instanceCount = 1;\n  var location = StructureElement.Location.create(structure);\n\n  var getLocation = function (groupIndex) {\n    var terminalLink = terminalLinks[groupIndex];\n\n    if (terminalLink.fromCarbohydrate) {\n      var carb = elements[terminalLink.carbohydrateIndex];\n      var ring = carb.unit.rings.all[carb.ringIndex];\n      location.unit = carb.unit;\n      location.element = carb.unit.elements[ring[0]];\n    } else {\n      location.unit = terminalLink.elementUnit;\n      location.element = terminalLink.elementUnit.elements[terminalLink.elementIndex];\n    }\n\n    return location;\n  };\n\n  return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\n}\n\nfunction getTerminalLinkLoci(pickingId, structure, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var _a = structure.carbohydrates,\n        terminalLinks = _a.terminalLinks,\n        elements = _a.elements;\n    var l = terminalLinks[groupId];\n    var carb = elements[l.carbohydrateIndex];\n    return StructureElement.Loci.union(getAltResidueLociFromId(structure, carb.unit, carb.residueIndex, carb.altId), getAltResidueLoci(structure, l.elementUnit, l.elementUnit.elements[l.elementIndex]));\n  }\n\n  return EmptyLoci;\n}\n\nfunction eachTerminalLink(loci, structure, apply) {\n  var changed = false;\n  if (!StructureElement.Loci.is(loci)) return false;\n  if (!Structure.areEquivalent(loci.structure, structure)) return false;\n  var getTerminalLinkIndices = structure.carbohydrates.getTerminalLinkIndices;\n\n  var _loop_1 = function (unit, indices) {\n    if (!Unit.isAtomic(unit)) return \"continue\";\n    OrderedSet.forEach(indices, function (v) {\n      // TODO avoid duplicate calls to apply\n      var linkIndices = getTerminalLinkIndices(unit, unit.elements[v]);\n\n      for (var i = 0, il = linkIndices.length; i < il; ++i) {\n        if (apply(Interval.ofSingleton(linkIndices[i]))) changed = true;\n      }\n    });\n  };\n\n  for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        unit = _b.unit,\n        indices = _b.indices;\n\n    _loop_1(unit, indices);\n  }\n\n  return changed;\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/carbohydrate-terminal-link-cylinder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Structure, StructureElement, Unit } from '../../../mol-model/structure';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { createLinkCylinderMesh, LinkCylinderParams } from './util/link';\r\nimport { UnitsMeshParams } from '../units-visual';\r\nimport { ComplexMeshVisual } from '../complex-visual';\r\nimport { LocationIterator } from '../../../mol-geo/util/location-iterator';\r\nimport { OrderedSet, Interval } from '../../../mol-data/int';\r\nimport { EmptyLoci } from '../../../mol-model/loci';\r\nimport { getElementIdx, MetalsSet } from '../../../mol-model/structure/structure/unit/bonds/common';\r\nimport { getAltResidueLociFromId, getAltResidueLoci } from './util/common';\r\nfunction createCarbohydrateTerminalLinkCylinderMesh(ctx, structure, theme, props, mesh) {\r\n    var _a = structure.carbohydrates, terminalLinks = _a.terminalLinks, elements = _a.elements;\r\n    var terminalLinkSizeFactor = props.terminalLinkSizeFactor;\r\n    var location = StructureElement.Location.create(structure);\r\n    var builderProps = {\r\n        linkCount: terminalLinks.length,\r\n        position: function (posA, posB, edgeIndex) {\r\n            var l = terminalLinks[edgeIndex];\r\n            if (l.fromCarbohydrate) {\r\n                Vec3.copy(posA, elements[l.carbohydrateIndex].geometry.center);\r\n                l.elementUnit.conformation.position(l.elementUnit.elements[l.elementIndex], posB);\r\n            }\r\n            else {\r\n                l.elementUnit.conformation.position(l.elementUnit.elements[l.elementIndex], posA);\r\n                Vec3.copy(posB, elements[l.carbohydrateIndex].geometry.center);\r\n            }\r\n        },\r\n        radius: function (edgeIndex) {\r\n            var l = terminalLinks[edgeIndex];\r\n            if (l.fromCarbohydrate) {\r\n                var carb = elements[l.carbohydrateIndex];\r\n                var ring = carb.unit.rings.all[carb.ringIndex];\r\n                location.unit = carb.unit;\r\n                location.element = carb.unit.elements[ring[0]];\r\n            }\r\n            else {\r\n                location.unit = l.elementUnit;\r\n                location.element = l.elementUnit.elements[l.elementIndex];\r\n            }\r\n            return theme.size.size(location) * terminalLinkSizeFactor;\r\n        },\r\n        style: function (edgeIndex) {\r\n            var l = terminalLinks[edgeIndex];\r\n            var eI = l.elementUnit.elements[l.elementIndex];\r\n            var beI = getElementIdx(l.elementUnit.model.atomicHierarchy.atoms.type_symbol.value(eI));\r\n            return MetalsSet.has(beI) ? 1 /* Dashed */ : 0 /* Solid */;\r\n        }\r\n    };\r\n    return createLinkCylinderMesh(ctx, builderProps, props, mesh);\r\n}\r\nexport var CarbohydrateTerminalLinkParams = __assign(__assign(__assign({}, UnitsMeshParams), LinkCylinderParams), { terminalLinkSizeFactor: PD.Numeric(0.2, { min: 0, max: 3, step: 0.01 }) });\r\nexport function CarbohydrateTerminalLinkVisual(materialId) {\r\n    return ComplexMeshVisual({\r\n        defaultProps: PD.getDefaultValues(CarbohydrateTerminalLinkParams),\r\n        createGeometry: createCarbohydrateTerminalLinkCylinderMesh,\r\n        createLocationIterator: CarbohydrateTerminalLinkIterator,\r\n        getLoci: getTerminalLinkLoci,\r\n        eachLocation: eachTerminalLink,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.terminalLinkSizeFactor !== currentProps.terminalLinkSizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments ||\r\n                newProps.linkCap !== currentProps.linkCap);\r\n        }\r\n    }, materialId);\r\n}\r\nfunction CarbohydrateTerminalLinkIterator(structure) {\r\n    var _a = structure.carbohydrates, elements = _a.elements, terminalLinks = _a.terminalLinks;\r\n    var groupCount = terminalLinks.length;\r\n    var instanceCount = 1;\r\n    var location = StructureElement.Location.create(structure);\r\n    var getLocation = function (groupIndex) {\r\n        var terminalLink = terminalLinks[groupIndex];\r\n        if (terminalLink.fromCarbohydrate) {\r\n            var carb = elements[terminalLink.carbohydrateIndex];\r\n            var ring = carb.unit.rings.all[carb.ringIndex];\r\n            location.unit = carb.unit;\r\n            location.element = carb.unit.elements[ring[0]];\r\n        }\r\n        else {\r\n            location.unit = terminalLink.elementUnit;\r\n            location.element = terminalLink.elementUnit.elements[terminalLink.elementIndex];\r\n        }\r\n        return location;\r\n    };\r\n    return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\r\n}\r\nfunction getTerminalLinkLoci(pickingId, structure, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var _a = structure.carbohydrates, terminalLinks = _a.terminalLinks, elements = _a.elements;\r\n        var l = terminalLinks[groupId];\r\n        var carb = elements[l.carbohydrateIndex];\r\n        return StructureElement.Loci.union(getAltResidueLociFromId(structure, carb.unit, carb.residueIndex, carb.altId), getAltResidueLoci(structure, l.elementUnit, l.elementUnit.elements[l.elementIndex]));\r\n    }\r\n    return EmptyLoci;\r\n}\r\nfunction eachTerminalLink(loci, structure, apply) {\r\n    var changed = false;\r\n    if (!StructureElement.Loci.is(loci))\r\n        return false;\r\n    if (!Structure.areEquivalent(loci.structure, structure))\r\n        return false;\r\n    var getTerminalLinkIndices = structure.carbohydrates.getTerminalLinkIndices;\r\n    var _loop_1 = function (unit, indices) {\r\n        if (!Unit.isAtomic(unit))\r\n            return \"continue\";\r\n        OrderedSet.forEach(indices, function (v) {\r\n            // TODO avoid duplicate calls to apply\r\n            var linkIndices = getTerminalLinkIndices(unit, unit.elements[v]);\r\n            for (var i = 0, il = linkIndices.length; i < il; ++i) {\r\n                if (apply(Interval.ofSingleton(linkIndices[i])))\r\n                    changed = true;\r\n            }\r\n        });\r\n    };\r\n    for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\r\n        var _b = _a[_i], unit = _b.unit, indices = _b.indices;\r\n        _loop_1(unit, indices);\r\n    }\r\n    return changed;\r\n}\r\n//# sourceMappingURL=carbohydrate-terminal-link-cylinder.js.map"]},"metadata":{},"sourceType":"module"}