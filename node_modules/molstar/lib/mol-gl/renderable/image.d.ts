/**
 * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { Renderable, RenderableState } from '../renderable';
import { WebGLContext } from '../webgl/context';
import { AttributeSpec, Values, TextureSpec, ElementsSpec, DefineSpec, UniformSpec } from './schema';
export declare const ImageSchema: {
    aGroup: AttributeSpec<"float32">;
    aPosition: AttributeSpec<"float32">;
    aUv: AttributeSpec<"float32">;
    elements: ElementsSpec<"uint32">;
    uImageTexDim: UniformSpec<"v2">;
    tImageTex: TextureSpec<"image-uint8">;
    tGroupTex: TextureSpec<"image-uint8">;
    dInterpolation: DefineSpec<"string">;
    aInstance: AttributeSpec<"float32">;
    aTransform: AttributeSpec<"float32">;
    uAlpha: UniformSpec<"f">;
    uVertexCount: UniformSpec<"i">;
    uInstanceCount: UniformSpec<"i">;
    uGroupCount: UniformSpec<"i">;
    uInvariantBoundingSphere: UniformSpec<"v4">;
    drawCount: import("./schema").ValueSpec<"number">;
    instanceCount: import("./schema").ValueSpec<"number">;
    alpha: import("./schema").ValueSpec<"number">;
    matrix: import("./schema").ValueSpec<"m4">;
    transform: import("./schema").ValueSpec<"float32">;
    extraTransform: import("./schema").ValueSpec<"float32">;
    hasReflection: import("./schema").ValueSpec<"boolean">;
    boundingSphere: import("./schema").ValueSpec<"sphere">;
    invariantBoundingSphere: import("./schema").ValueSpec<"sphere">;
    dClipObjectCount: DefineSpec<"number">;
    dClipVariant: DefineSpec<"string">;
    uClippingTexDim: UniformSpec<"v2">;
    tClipping: TextureSpec<"image-uint8">;
    dClipping: DefineSpec<"boolean">;
    uTransparencyTexDim: UniformSpec<"v2">;
    tTransparency: TextureSpec<"image-uint8">;
    dTransparency: DefineSpec<"boolean">;
    transparencyAverage: import("./schema").ValueSpec<"number">;
    uOverpaintTexDim: UniformSpec<"v2">;
    tOverpaint: TextureSpec<"image-uint8">;
    dOverpaint: DefineSpec<"boolean">;
    uMarker: UniformSpec<"f">;
    uMarkerTexDim: UniformSpec<"v2">;
    tMarker: TextureSpec<"image-uint8">;
    dMarkerType: DefineSpec<"string">;
    markerAverage: import("./schema").ValueSpec<"number">;
    markerStatus: import("./schema").ValueSpec<"number">;
    uColor: UniformSpec<"v3">;
    uColorTexDim: UniformSpec<"v2">;
    uColorGridDim: UniformSpec<"v3">;
    uColorGridTransform: UniformSpec<"v4">;
    tColor: TextureSpec<"image-uint8">;
    tPalette: TextureSpec<"image-uint8">;
    tColorGrid: TextureSpec<"texture">;
    dColorType: DefineSpec<"string">;
    dUsePalette: DefineSpec<"boolean">;
};
export declare type ImageSchema = typeof ImageSchema;
export declare type ImageValues = Values<ImageSchema>;
export declare function ImageRenderable(ctx: WebGLContext, id: number, values: ImageValues, state: RenderableState, materialId: number): Renderable<ImageValues>;
