/**
 * Copyright (c) 2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
import { MeshValues } from '../../../../mol-gl/renderable/mesh';
import { TextureMeshValues } from '../../../../mol-gl/renderable/texture-mesh';
import { WebGLContext } from '../../../../mol-gl/webgl/context';
import { Texture } from '../../../../mol-gl/webgl/texture';
import { Theme } from '../../../../mol-theme/theme';
import { ParamDefinition as PD } from '../../../../mol-util/param-definition';
export declare const ColorSmoothingParams: {
    smoothColors: PD.Mapped<PD.NamedParams<PD.Normalize<unknown>, "auto"> | PD.NamedParams<PD.Normalize<{
        resolutionFactor: number;
        sampleStride: number;
    }>, "on"> | PD.NamedParams<PD.Normalize<unknown>, "off">>;
};
export declare type ColorSmoothingParams = typeof ColorSmoothingParams;
export declare function getColorSmoothingProps(props: PD.Values<ColorSmoothingParams>, theme: Theme, resolution?: number): {
    resolution: number;
    stride: number;
} | undefined;
export declare function applyMeshColorSmoothing(values: MeshValues, resolution: number, stride: number, webgl?: WebGLContext, colorTexture?: Texture): void;
export declare function applyTextureMeshColorSmoothing(values: TextureMeshValues, resolution: number, stride: number, webgl: WebGLContext, colorTexture?: Texture): void;
