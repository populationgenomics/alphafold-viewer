{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { PolymerTypeAtomRoleId, getMoleculeType } from './model/types';\nimport { Vec3 } from '../../mol-math/linear-algebra';\nexport function getCoarseBegCompId(unit, element) {\n  var entityKey = unit.coarseElements.entityKey[element];\n  var seq = unit.model.sequence.byEntityKey[entityKey].sequence;\n  var seq_id_begin = unit.coarseElements.seq_id_begin.value(element);\n  return seq.compId.value(seq_id_begin - 1); // 1-indexed\n}\nexport function getElementMoleculeType(unit, element) {\n  switch (unit.kind) {\n    case 0\n    /* Atomic */\n    :\n      return unit.model.atomicHierarchy.derived.residue.moleculeType[unit.residueIndex[element]];\n\n    case 1\n    /* Spheres */\n    :\n    case 2\n    /* Gaussians */\n    :\n      // TODO add unit.model.coarseHierarchy.derived.residue.moleculeType\n      var compId = getCoarseBegCompId(unit, element);\n      var cc = unit.model.properties.chemicalComponentMap.get(compId);\n      if (cc) return getMoleculeType(cc.type, compId);\n  }\n\n  return 0\n  /* Unknown */\n  ;\n}\nexport function getAtomicMoleculeType(model, rI) {\n  return model.atomicHierarchy.derived.residue.moleculeType[rI];\n}\nvar EmptyAtomIds = new Set();\nexport function getAtomIdForAtomRole(polymerType, atomRole) {\n  var p = PolymerTypeAtomRoleId[polymerType];\n\n  if (p !== undefined) {\n    var a = p[atomRole];\n    if (a !== undefined) return a;\n  }\n\n  return EmptyAtomIds;\n}\nvar tmpPositionsVec = Vec3.zero();\nexport function getPositions(unit, indices) {\n  var pos = unit.conformation.position;\n  var positions = new Float32Array(indices.length * 3);\n  var elements = unit.elements;\n\n  for (var i = 0, il = indices.length; i < il; ++i) {\n    pos(elements[indices[i]], tmpPositionsVec);\n    Vec3.toArray(tmpPositionsVec, positions, i * 3);\n  }\n\n  return positions;\n}","map":{"version":3,"sources":["../../../src/mol-model/structure/util.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAGH,SAAiC,qBAAjC,EAAwD,eAAxD,QAA4F,eAA5F;AACA,SAAS,IAAT,QAAqB,+BAArB;AAIA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAAkE,OAAlE,EAAuF;AACzF,MAAM,SAAS,GAAG,IAAI,CAAC,cAAL,CAAoB,SAApB,CAA8B,OAA9B,CAAlB;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,WAApB,CAAgC,SAAhC,EAA2C,QAAvD;AACA,MAAM,YAAY,GAAG,IAAI,CAAC,cAAL,CAAoB,YAApB,CAAiC,KAAjC,CAAuC,OAAvC,CAArB;AACA,SAAO,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,YAAY,GAAG,CAAhC,CAAP,CAJyF,CAI9C;AAC9C;AAED,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAA6C,OAA7C,EAAkE;AACpE,UAAQ,IAAI,CAAC,IAAb;AACI,SAAA;AAAA;AAAA;AACI,aAAO,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,OAA3B,CAAmC,OAAnC,CAA2C,YAA3C,CAAwD,IAAI,CAAC,YAAL,CAAkB,OAAlB,CAAxD,CAAP;;AACJ,SAAA;AAAA;AAAA;AACA,SAAA;AAAA;AAAA;AACI;AACA,UAAM,MAAM,GAAG,kBAAkB,CAAC,IAAD,EAAO,OAAP,CAAjC;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,oBAAtB,CAA2C,GAA3C,CAA+C,MAA/C,CAAX;AACA,UAAI,EAAJ,EAAQ,OAAO,eAAe,CAAC,EAAE,CAAC,IAAJ,EAAU,MAAV,CAAtB;AARhB;;AAUA,SAAA;AAAA;AAAA;AACH;AAED,OAAM,SAAU,qBAAV,CAAgC,KAAhC,EAA8C,EAA9C,EAA8D;AAChE,SAAO,KAAK,CAAC,eAAN,CAAsB,OAAtB,CAA8B,OAA9B,CAAsC,YAAtC,CAAmD,EAAnD,CAAP;AACH;AAED,IAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;AACA,OAAM,SAAU,oBAAV,CAA+B,WAA/B,EAAyD,QAAzD,EAA2E;AAC7E,MAAM,CAAC,GAAG,qBAAqB,CAAC,WAAD,CAA/B;;AACA,MAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,QAAM,CAAC,GAAG,CAAC,CAAC,QAAD,CAAX;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB,OAAO,CAAP;AACxB;;AACD,SAAO,YAAP;AACH;AAED,IAAM,eAAe,GAAG,IAAI,CAAC,IAAL,EAAxB;AACA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAmC,OAAnC,EAA6D;AAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,YAAL,CAAkB,QAA9B;AACA,MAAM,SAAS,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,MAAR,GAAiB,CAAlC,CAAlB;AACQ,MAAA,QAAQ,GAAK,IAAI,CAAT,QAAR;;AACR,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,OAAO,CAAC,MAA7B,EAAqC,CAAC,GAAG,EAAzC,EAA6C,EAAE,CAA/C,EAAkD;AAC9C,IAAA,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAD,CAAR,CAAT,EAAuB,eAAvB,CAAH;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,eAAb,EAA8B,SAA9B,EAAyC,CAAC,GAAG,CAA7C;AACH;;AACD,SAAO,SAAP;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { PolymerTypeAtomRoleId, getMoleculeType } from './model/types';\r\nimport { Vec3 } from '../../mol-math/linear-algebra';\r\nexport function getCoarseBegCompId(unit, element) {\r\n    var entityKey = unit.coarseElements.entityKey[element];\r\n    var seq = unit.model.sequence.byEntityKey[entityKey].sequence;\r\n    var seq_id_begin = unit.coarseElements.seq_id_begin.value(element);\r\n    return seq.compId.value(seq_id_begin - 1); // 1-indexed\r\n}\r\nexport function getElementMoleculeType(unit, element) {\r\n    switch (unit.kind) {\r\n        case 0 /* Atomic */:\r\n            return unit.model.atomicHierarchy.derived.residue.moleculeType[unit.residueIndex[element]];\r\n        case 1 /* Spheres */:\r\n        case 2 /* Gaussians */:\r\n            // TODO add unit.model.coarseHierarchy.derived.residue.moleculeType\r\n            var compId = getCoarseBegCompId(unit, element);\r\n            var cc = unit.model.properties.chemicalComponentMap.get(compId);\r\n            if (cc)\r\n                return getMoleculeType(cc.type, compId);\r\n    }\r\n    return 0 /* Unknown */;\r\n}\r\nexport function getAtomicMoleculeType(model, rI) {\r\n    return model.atomicHierarchy.derived.residue.moleculeType[rI];\r\n}\r\nvar EmptyAtomIds = new Set();\r\nexport function getAtomIdForAtomRole(polymerType, atomRole) {\r\n    var p = PolymerTypeAtomRoleId[polymerType];\r\n    if (p !== undefined) {\r\n        var a = p[atomRole];\r\n        if (a !== undefined)\r\n            return a;\r\n    }\r\n    return EmptyAtomIds;\r\n}\r\nvar tmpPositionsVec = Vec3.zero();\r\nexport function getPositions(unit, indices) {\r\n    var pos = unit.conformation.position;\r\n    var positions = new Float32Array(indices.length * 3);\r\n    var elements = unit.elements;\r\n    for (var i = 0, il = indices.length; i < il; ++i) {\r\n        pos(elements[indices[i]], tmpPositionsVec);\r\n        Vec3.toArray(tmpPositionsVec, positions, i * 3);\r\n    }\r\n    return positions;\r\n}\r\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}