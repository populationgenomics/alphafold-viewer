{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nvar Description = \"Assigns a size reflecting the uncertainty or disorder of an element's position, e.g. B-factor or RMSF, depending on the data availability and experimental technique.\";\nexport var UncertaintySizeThemeParams = {\n  bfactorFactor: PD.Numeric(0.1, {\n    min: 0,\n    max: 1,\n    step: 0.01\n  }),\n  rmsfFactor: PD.Numeric(0.05, {\n    min: 0,\n    max: 1,\n    step: 0.01\n  }),\n  baseSize: PD.Numeric(0.2, {\n    min: 0,\n    max: 2,\n    step: 0.1\n  })\n};\nexport function getUncertaintySizeThemeParams(ctx) {\n  return UncertaintySizeThemeParams; // TODO return copy\n}\nexport function getUncertainty(unit, element, props) {\n  if (Unit.isAtomic(unit)) {\n    return unit.model.atomicConformation.B_iso_or_equiv.value(element) * props.bfactorFactor;\n  } else if (Unit.isSpheres(unit)) {\n    return unit.model.coarseConformation.spheres.rmsf[element] * props.rmsfFactor;\n  } else {\n    return 0;\n  }\n}\nexport function UncertaintySizeTheme(ctx, props) {\n  function size(location) {\n    var size = props.baseSize;\n\n    if (StructureElement.Location.is(location)) {\n      size += getUncertainty(location.unit, location.element, props);\n    } else if (Bond.isLocation(location)) {\n      size += getUncertainty(location.aUnit, location.aUnit.elements[location.aIndex], props);\n    }\n\n    return size;\n  }\n\n  return {\n    factory: UncertaintySizeTheme,\n    granularity: 'group',\n    size: size,\n    props: props,\n    description: Description\n  };\n}\nexport var UncertaintySizeThemeProvider = {\n  name: 'uncertainty',\n  label: 'Uncertainty/Disorder',\n  category: '',\n  factory: UncertaintySizeTheme,\n  getParams: getUncertaintySizeThemeParams,\n  defaultValues: PD.getDefaultValues(UncertaintySizeThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.models.some(function (m) {\n      return m.atomicConformation.B_iso_or_equiv.isDefined || m.coarseHierarchy.isDefined;\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/size/uncertainty.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { StructureElement, Unit, Bond } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nvar Description = \"Assigns a size reflecting the uncertainty or disorder of an element's position, e.g. B-factor or RMSF, depending on the data availability and experimental technique.\";\r\nexport var UncertaintySizeThemeParams = {\r\n    bfactorFactor: PD.Numeric(0.1, { min: 0, max: 1, step: 0.01 }),\r\n    rmsfFactor: PD.Numeric(0.05, { min: 0, max: 1, step: 0.01 }),\r\n    baseSize: PD.Numeric(0.2, { min: 0, max: 2, step: 0.1 }),\r\n};\r\nexport function getUncertaintySizeThemeParams(ctx) {\r\n    return UncertaintySizeThemeParams; // TODO return copy\r\n}\r\nexport function getUncertainty(unit, element, props) {\r\n    if (Unit.isAtomic(unit)) {\r\n        return unit.model.atomicConformation.B_iso_or_equiv.value(element) * props.bfactorFactor;\r\n    }\r\n    else if (Unit.isSpheres(unit)) {\r\n        return unit.model.coarseConformation.spheres.rmsf[element] * props.rmsfFactor;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nexport function UncertaintySizeTheme(ctx, props) {\r\n    function size(location) {\r\n        var size = props.baseSize;\r\n        if (StructureElement.Location.is(location)) {\r\n            size += getUncertainty(location.unit, location.element, props);\r\n        }\r\n        else if (Bond.isLocation(location)) {\r\n            size += getUncertainty(location.aUnit, location.aUnit.elements[location.aIndex], props);\r\n        }\r\n        return size;\r\n    }\r\n    return {\r\n        factory: UncertaintySizeTheme,\r\n        granularity: 'group',\r\n        size: size,\r\n        props: props,\r\n        description: Description\r\n    };\r\n}\r\nexport var UncertaintySizeThemeProvider = {\r\n    name: 'uncertainty',\r\n    label: 'Uncertainty/Disorder',\r\n    category: '',\r\n    factory: UncertaintySizeTheme,\r\n    getParams: getUncertaintySizeThemeParams,\r\n    defaultValues: PD.getDefaultValues(UncertaintySizeThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.models.some(function (m) { return m.atomicConformation.B_iso_or_equiv.isDefined || m.coarseHierarchy.isDefined; }); }\r\n};\r\n//# sourceMappingURL=uncertainty.js.map"]},"metadata":{},"sourceType":"module"}