{"ast":null,"code":"/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * From CIFTools.js\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nexport var VERSION = '0.3.0';\nexport var Encoding;\n\n(function (Encoding) {\n  function getDataType(data) {\n    var srcType;\n    if (data instanceof Int8Array) srcType = 1\n    /* Int8 */\n    ;else if (data instanceof Int16Array) srcType = 2\n    /* Int16 */\n    ;else if (data instanceof Int32Array) srcType = 3\n    /* Int32 */\n    ;else if (data instanceof Uint8Array) srcType = 4\n    /* Uint8 */\n    ;else if (data instanceof Uint16Array) srcType = 5\n    /* Uint16 */\n    ;else if (data instanceof Uint32Array) srcType = 6\n    /* Uint32 */\n    ;else if (data instanceof Float32Array) srcType = 32\n    /* Float32 */\n    ;else if (data instanceof Float64Array) srcType = 33\n    /* Float64 */\n    ;else srcType = 3\n    /* Int32 */\n    ; // throw new Error('Unsupported integer data type.');\n\n    return srcType;\n  }\n\n  Encoding.getDataType = getDataType;\n\n  function isSignedIntegerDataType(data) {\n    if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Int32Array) return true;\n\n    for (var i = 0, _i = data.length; i < _i; i++) {\n      if (i < 0) return false;\n    }\n\n    return true;\n  }\n\n  Encoding.isSignedIntegerDataType = isSignedIntegerDataType;\n})(Encoding || (Encoding = {}));","map":{"version":3,"sources":["../../../../src/mol-io/common/binary-cif/encoding.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAIH,OAAO,IAAM,OAAO,GAAG,OAAhB;AAgDP,OAAM,IAAW,QAAX;;AAAN,CAAA,UAAiB,QAAjB,EAAyB;AAkBrB,WAAgB,WAAhB,CAA4B,IAA5B,EAAiE;AAC7D,QAAI,OAAJ;AACA,QAAI,IAAI,YAAY,SAApB,EAA+B,OAAO,GAAA;AAAA;AAAP,KAA/B,KACK,IAAI,IAAI,YAAY,UAApB,EAAgC,OAAO,GAAA;AAAA;AAAP,KAAhC,KACA,IAAI,IAAI,YAAY,UAApB,EAAgC,OAAO,GAAA;AAAA;AAAP,KAAhC,KACA,IAAI,IAAI,YAAY,UAApB,EAAgC,OAAO,GAAA;AAAA;AAAP,KAAhC,KACA,IAAI,IAAI,YAAY,WAApB,EAAiC,OAAO,GAAA;AAAA;AAAP,KAAjC,KACA,IAAI,IAAI,YAAY,WAApB,EAAiC,OAAO,GAAA;AAAA;AAAP,KAAjC,KACA,IAAI,IAAI,YAAY,YAApB,EAAkC,OAAO,GAAA;AAAA;AAAP,KAAlC,KACA,IAAI,IAAI,YAAY,YAApB,EAAkC,OAAO,GAAA;AAAA;AAAP,KAAlC,KACA,OAAO,GAAA;AAAA;AAAP,KAVwD,CAUlB;;AAC3C,WAAO,OAAP;AACH;;AAZe,EAAA,QAAA,CAAA,WAAA,GAAW,WAAX;;AAchB,WAAgB,uBAAhB,CAAwC,IAAxC,EAA2D;AACvD,QAAI,IAAI,YAAY,SAAhB,IAA6B,IAAI,YAAY,UAA7C,IAA2D,IAAI,YAAY,UAA/E,EAA2F,OAAO,IAAP;;AAC3F,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,IAAI,CAAC,MAA1B,EAAkC,CAAC,GAAG,EAAtC,EAA0C,CAAC,EAA3C,EAA+C;AAC3C,UAAI,CAAC,GAAG,CAAR,EAAW,OAAO,KAAP;AACd;;AACD,WAAO,IAAP;AACH;;AANe,EAAA,QAAA,CAAA,uBAAA,GAAuB,uBAAvB;AAiEnB,CAjGD,EAAiB,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAAzB","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * From CIFTools.js\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nexport var VERSION = '0.3.0';\r\nexport var Encoding;\r\n(function (Encoding) {\r\n    function getDataType(data) {\r\n        var srcType;\r\n        if (data instanceof Int8Array)\r\n            srcType = 1 /* Int8 */;\r\n        else if (data instanceof Int16Array)\r\n            srcType = 2 /* Int16 */;\r\n        else if (data instanceof Int32Array)\r\n            srcType = 3 /* Int32 */;\r\n        else if (data instanceof Uint8Array)\r\n            srcType = 4 /* Uint8 */;\r\n        else if (data instanceof Uint16Array)\r\n            srcType = 5 /* Uint16 */;\r\n        else if (data instanceof Uint32Array)\r\n            srcType = 6 /* Uint32 */;\r\n        else if (data instanceof Float32Array)\r\n            srcType = 32 /* Float32 */;\r\n        else if (data instanceof Float64Array)\r\n            srcType = 33 /* Float64 */;\r\n        else\r\n            srcType = 3 /* Int32 */; // throw new Error('Unsupported integer data type.');\r\n        return srcType;\r\n    }\r\n    Encoding.getDataType = getDataType;\r\n    function isSignedIntegerDataType(data) {\r\n        if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Int32Array)\r\n            return true;\r\n        for (var i = 0, _i = data.length; i < _i; i++) {\r\n            if (i < 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Encoding.isSignedIntegerDataType = isSignedIntegerDataType;\r\n})(Encoding || (Encoding = {}));\r\n//# sourceMappingURL=encoding.js.map"]},"metadata":{},"sourceType":"module"}