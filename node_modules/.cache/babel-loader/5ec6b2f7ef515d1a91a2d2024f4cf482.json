{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { MolecularSurfaceMeshVisual, MolecularSurfaceMeshParams } from '../visual/molecular-surface-mesh';\nimport { UnitsRepresentation } from '../units-representation';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { MolecularSurfaceWireframeParams, MolecularSurfaceWireframeVisual } from '../visual/molecular-surface-wireframe';\nvar MolecularSurfaceVisuals = {\n  'molecular-surface-mesh': function (ctx, getParams) {\n    return UnitsRepresentation('Molecular surface mesh', ctx, getParams, MolecularSurfaceMeshVisual);\n  },\n  'molecular-surface-wireframe': function (ctx, getParams) {\n    return UnitsRepresentation('Molecular surface wireframe', ctx, getParams, MolecularSurfaceWireframeVisual);\n  }\n};\nexport var MolecularSurfaceParams = __assign(__assign(__assign({}, MolecularSurfaceMeshParams), MolecularSurfaceWireframeParams), {\n  visuals: PD.MultiSelect(['molecular-surface-mesh'], PD.objectToOptions(MolecularSurfaceVisuals))\n});\nexport function getMolecularSurfaceParams(ctx, structure) {\n  return PD.clone(MolecularSurfaceParams);\n}\nexport function MolecularSurfaceRepresentation(ctx, getParams) {\n  return Representation.createMulti('Molecular Surface', ctx, getParams, StructureRepresentationStateBuilder, MolecularSurfaceVisuals);\n}\nexport var MolecularSurfaceRepresentationProvider = StructureRepresentationProvider({\n  name: 'molecular-surface',\n  label: 'Molecular Surface',\n  description: 'Displays a molecular surface.',\n  factory: MolecularSurfaceRepresentation,\n  getParams: getMolecularSurfaceParams,\n  defaultValues: PD.getDefaultValues(MolecularSurfaceParams),\n  defaultColorTheme: {\n    name: 'chain-id'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/molecular-surface.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,0BAAT,EAAqC,0BAArC,QAAuE,kCAAvE;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAkC,+BAAlC,EAAmE,mCAAnE,QAA8G,mBAA9G;AACA,SAAS,cAAT,QAAkF,kCAAlF;AAGA,SAAS,+BAAT,EAA0C,+BAA1C,QAAiF,uCAAjF;AAEA,IAAM,uBAAuB,GAAG;AAC5B,4BAA0B,UAAC,GAAD,EAA6B,SAA7B,EAAyG;AAAK,WAAA,mBAAmB,CAAC,wBAAD,EAA2B,GAA3B,EAAgC,SAAhC,EAAnB,0BAAmB,CAAnB;AAAyF,GADrM;AAE5B,iCAA+B,UAAC,GAAD,EAA6B,SAA7B,EAA8G;AAAK,WAAA,mBAAmB,CAAC,6BAAD,EAAgC,GAAhC,EAAqC,SAArC,EAAnB,+BAAmB,CAAnB;AAAmG;AAFzN,CAAhC;AAKA,OAAO,IAAM,sBAAsB,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC5B,0BAD4B,CAAA,EAE5B,+BAF4B,CAAA,EAEG;AAClC,EAAA,OAAO,EAAE,EAAE,CAAC,WAAH,CAAe,CAAC,wBAAD,CAAf,EAA2C,EAAE,CAAC,eAAH,CAAmB,uBAAnB,CAA3C;AADyB,CAFH,CAA5B;AAMP,OAAM,SAAU,yBAAV,CAAoC,GAApC,EAA+D,SAA/D,EAAmF;AACrF,SAAO,EAAE,CAAC,KAAH,CAAS,sBAAT,CAAP;AACH;AAGD,OAAM,SAAU,8BAAV,CAAyC,GAAzC,EAAqE,SAArE,EAA6I;AAC/I,SAAO,cAAc,CAAC,WAAf,CAA2B,mBAA3B,EAAgD,GAAhD,EAAqD,SAArD,EAAgE,mCAAhE,EAAqG,uBAArG,CAAP;AACH;AAED,OAAO,IAAM,sCAAsC,GAAG,+BAA+B,CAAC;AAClF,EAAA,IAAI,EAAE,mBAD4E;AAElF,EAAA,KAAK,EAAE,mBAF2E;AAGlF,EAAA,WAAW,EAAE,+BAHqE;AAIlF,EAAA,OAAO,EAAE,8BAJyE;AAKlF,EAAA,SAAS,EAAE,yBALuE;AAMlF,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,sBAApB,CANmE;AAOlF,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAP+D;AAQlF,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GARgE;AASlF,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATgB,CAAD,CAA9E","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { MolecularSurfaceMeshVisual, MolecularSurfaceMeshParams } from '../visual/molecular-surface-mesh';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { MolecularSurfaceWireframeParams, MolecularSurfaceWireframeVisual } from '../visual/molecular-surface-wireframe';\r\nvar MolecularSurfaceVisuals = {\r\n    'molecular-surface-mesh': function (ctx, getParams) { return UnitsRepresentation('Molecular surface mesh', ctx, getParams, MolecularSurfaceMeshVisual); },\r\n    'molecular-surface-wireframe': function (ctx, getParams) { return UnitsRepresentation('Molecular surface wireframe', ctx, getParams, MolecularSurfaceWireframeVisual); },\r\n};\r\nexport var MolecularSurfaceParams = __assign(__assign(__assign({}, MolecularSurfaceMeshParams), MolecularSurfaceWireframeParams), { visuals: PD.MultiSelect(['molecular-surface-mesh'], PD.objectToOptions(MolecularSurfaceVisuals)) });\r\nexport function getMolecularSurfaceParams(ctx, structure) {\r\n    return PD.clone(MolecularSurfaceParams);\r\n}\r\nexport function MolecularSurfaceRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Molecular Surface', ctx, getParams, StructureRepresentationStateBuilder, MolecularSurfaceVisuals);\r\n}\r\nexport var MolecularSurfaceRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'molecular-surface',\r\n    label: 'Molecular Surface',\r\n    description: 'Displays a molecular surface.',\r\n    factory: MolecularSurfaceRepresentation,\r\n    getParams: getMolecularSurfaceParams,\r\n    defaultValues: PD.getDefaultValues(MolecularSurfaceParams),\r\n    defaultColorTheme: { name: 'chain-id' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=molecular-surface.js.map"]},"metadata":{},"sourceType":"module"}