{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createRenderable } from '../renderable';\nimport { createGraphicsRenderItem } from '../webgl/render-item';\nimport { GlobalUniformSchema, BaseSchema, AttributeSpec, ElementsSpec, DefineSpec, InternalSchema, GlobalTextureSchema, ValueSpec } from './schema';\nimport { MeshShaderCode } from '../shader-code';\nimport { ValueCell } from '../../mol-util';\nexport var MeshSchema = __assign(__assign({}, BaseSchema), {\n  aGroup: AttributeSpec('float32', 1, 0),\n  aPosition: AttributeSpec('float32', 3, 0),\n  aNormal: AttributeSpec('float32', 3, 0),\n  elements: ElementsSpec('uint32'),\n  dFlatShaded: DefineSpec('boolean'),\n  dDoubleSided: DefineSpec('boolean'),\n  dFlipSided: DefineSpec('boolean'),\n  dIgnoreLight: DefineSpec('boolean'),\n  dXrayShaded: DefineSpec('boolean'),\n  meta: ValueSpec('unknown')\n});\nexport function MeshRenderable(ctx, id, values, state, materialId) {\n  var schema = __assign(__assign(__assign(__assign({}, GlobalUniformSchema), GlobalTextureSchema), InternalSchema), MeshSchema);\n\n  var internalValues = {\n    uObjectId: ValueCell.create(id)\n  };\n  var shaderCode = MeshShaderCode;\n  var renderItem = createGraphicsRenderItem(ctx, 'triangles', shaderCode, schema, __assign(__assign({}, values), internalValues), materialId);\n  return createRenderable(renderItem, values, state);\n}","map":{"version":3,"sources":["../../../src/mol-gl/renderable/mesh.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAsC,gBAAtC,QAA8D,eAA9D;AAEA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,mBAAT,EAA8B,UAA9B,EAA0C,aAA1C,EAAyD,YAAzD,EAAuE,UAAvE,EAA2F,cAA3F,EAA2H,mBAA3H,EAAgJ,SAAhJ,QAAiK,UAAjK;AACA,SAAS,cAAT,QAA+B,gBAA/B;AACA,SAAS,SAAT,QAA0B,gBAA1B;AAEA,OAAO,IAAM,UAAU,GAAG,QAAA,CAAA,QAAA,CAAA,EAAA,EACnB,UADmB,CAAA,EACT;AACb,EAAA,MAAM,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CADR;AAEb,EAAA,SAAS,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAFX;AAGb,EAAA,OAAO,EAAE,aAAa,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAHT;AAIb,EAAA,QAAQ,EAAE,YAAY,CAAC,QAAD,CAJT;AAKb,EAAA,WAAW,EAAE,UAAU,CAAC,SAAD,CALV;AAMb,EAAA,YAAY,EAAE,UAAU,CAAC,SAAD,CANX;AAOb,EAAA,UAAU,EAAE,UAAU,CAAC,SAAD,CAPT;AAQb,EAAA,YAAY,EAAE,UAAU,CAAC,SAAD,CARX;AASb,EAAA,WAAW,EAAE,UAAU,CAAC,SAAD,CATV;AAUb,EAAA,IAAI,EAAE,SAAS,CAAC,SAAD;AAVF,CADS,CAAnB;AAgBP,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAA4C,EAA5C,EAAwD,MAAxD,EAA4E,KAA5E,EAAoG,UAApG,EAAsH;AACxH,MAAM,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,mBAAR,CAAA,EAAgC,mBAAhC,CAAA,EAAwD,cAAxD,CAAA,EAA2E,UAA3E,CAAZ;;AACA,MAAM,cAAc,GAAmB;AACnC,IAAA,SAAS,EAAE,SAAS,CAAC,MAAV,CAAiB,EAAjB;AADwB,GAAvC;AAGA,MAAM,UAAU,GAAG,cAAnB;AACA,MAAM,UAAU,GAAG,wBAAwB,CAAC,GAAD,EAAM,WAAN,EAAmB,UAAnB,EAA+B,MAA/B,EAAqC,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,MAAP,CAAA,EAAkB,cAAlB,CAArC,EAAyE,UAAzE,CAA3C;AAEA,SAAO,gBAAgB,CAAC,UAAD,EAAa,MAAb,EAAqB,KAArB,CAAvB;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createRenderable } from '../renderable';\r\nimport { createGraphicsRenderItem } from '../webgl/render-item';\r\nimport { GlobalUniformSchema, BaseSchema, AttributeSpec, ElementsSpec, DefineSpec, InternalSchema, GlobalTextureSchema, ValueSpec } from './schema';\r\nimport { MeshShaderCode } from '../shader-code';\r\nimport { ValueCell } from '../../mol-util';\r\nexport var MeshSchema = __assign(__assign({}, BaseSchema), { aGroup: AttributeSpec('float32', 1, 0), aPosition: AttributeSpec('float32', 3, 0), aNormal: AttributeSpec('float32', 3, 0), elements: ElementsSpec('uint32'), dFlatShaded: DefineSpec('boolean'), dDoubleSided: DefineSpec('boolean'), dFlipSided: DefineSpec('boolean'), dIgnoreLight: DefineSpec('boolean'), dXrayShaded: DefineSpec('boolean'), meta: ValueSpec('unknown') });\r\nexport function MeshRenderable(ctx, id, values, state, materialId) {\r\n    var schema = __assign(__assign(__assign(__assign({}, GlobalUniformSchema), GlobalTextureSchema), InternalSchema), MeshSchema);\r\n    var internalValues = {\r\n        uObjectId: ValueCell.create(id),\r\n    };\r\n    var shaderCode = MeshShaderCode;\r\n    var renderItem = createGraphicsRenderItem(ctx, 'triangles', shaderCode, schema, __assign(__assign({}, values), internalValues), materialId);\r\n    return createRenderable(renderItem, values, state);\r\n}\r\n//# sourceMappingURL=mesh.js.map"]},"metadata":{},"sourceType":"module"}