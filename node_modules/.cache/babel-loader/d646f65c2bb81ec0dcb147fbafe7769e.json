{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { CameraHelperParams } from '../../mol-canvas3d/helper/camera-helper';\nimport { canvasToBlob } from '../../mol-canvas3d/util';\nimport { equalEps } from '../../mol-math/linear-algebra/3d/common';\nimport { PluginComponent } from '../../mol-plugin-state/component';\nimport { PluginStateObject } from '../../mol-plugin-state/objects';\nimport { StateSelection } from '../../mol-state';\nimport { Task } from '../../mol-task';\nimport { Color } from '../../mol-util/color';\nimport { download } from '../../mol-util/download';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { SetUtils } from '../../mol-util/set';\nexport { ViewportScreenshotHelper };\n\nvar ViewportScreenshotHelper =\n/** @class */\nfunction (_super) {\n  __extends(ViewportScreenshotHelper, _super);\n\n  function ViewportScreenshotHelper(plugin) {\n    var _this = _super.call(this) || this;\n\n    _this.plugin = plugin;\n    _this._params = void 0;\n    _this.behaviors = {\n      values: _this.ev.behavior({\n        transparent: _this.params.transparent.defaultValue,\n        axes: {\n          name: 'off',\n          params: {}\n        },\n        resolution: _this.params.resolution.defaultValue\n      }),\n      cropParams: _this.ev.behavior({\n        auto: true,\n        relativePadding: 0.1\n      }),\n      relativeCrop: _this.ev.behavior({\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      })\n    };\n    _this.events = {\n      previewed: _this.ev()\n    };\n\n    _this.canvas = function () {\n      var canvas = document.createElement('canvas');\n      return canvas;\n    }();\n\n    _this.previewCanvas = function () {\n      var canvas = document.createElement('canvas');\n      return canvas;\n    }();\n\n    _this.previewData = {\n      image: {\n        data: new Uint8ClampedArray(1),\n        width: 1,\n        height: 0\n      },\n      background: Color(0),\n      transparent: false\n    };\n    return _this;\n  }\n\n  ViewportScreenshotHelper.prototype.createParams = function () {\n    var max = Math.min(this.plugin.canvas3d ? this.plugin.canvas3d.webgl.maxRenderbufferSize : 4096, 4096);\n    return {\n      resolution: PD.MappedStatic('viewport', {\n        viewport: PD.Group({}),\n        hd: PD.Group({}),\n        'full-hd': PD.Group({}),\n        'ultra-hd': PD.Group({}),\n        custom: PD.Group({\n          width: PD.Numeric(1920, {\n            min: 128,\n            max: max,\n            step: 1\n          }),\n          height: PD.Numeric(1080, {\n            min: 128,\n            max: max,\n            step: 1\n          })\n        }, {\n          isFlat: true\n        })\n      }, {\n        options: [['viewport', 'Viewport'], ['hd', 'HD (1280 x 720)'], ['full-hd', 'Full HD (1920 x 1080)'], ['ultra-hd', 'Ultra HD (3840 x 2160)'], ['custom', 'Custom']]\n      }),\n      transparent: PD.Boolean(false),\n      axes: CameraHelperParams.axes\n    };\n  };\n\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"params\", {\n    get: function () {\n      if (this._params) return this._params;\n      return this._params = this.createParams();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"values\", {\n    get: function () {\n      return this.behaviors.values.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"cropParams\", {\n    get: function () {\n      return this.behaviors.cropParams.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"relativeCrop\", {\n    get: function () {\n      return this.behaviors.relativeCrop.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ViewportScreenshotHelper.prototype.getCanvasSize = function () {\n    var _a, _b;\n\n    return {\n      width: ((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.webgl.gl.drawingBufferWidth) || 0,\n      height: ((_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.webgl.gl.drawingBufferHeight) || 0\n    };\n  };\n\n  ViewportScreenshotHelper.prototype.getSize = function () {\n    var values = this.values;\n\n    switch (values.resolution.name) {\n      case 'viewport':\n        return this.getCanvasSize();\n\n      case 'hd':\n        return {\n          width: 1280,\n          height: 720\n        };\n\n      case 'full-hd':\n        return {\n          width: 1920,\n          height: 1080\n        };\n\n      case 'ultra-hd':\n        return {\n          width: 3840,\n          height: 2160\n        };\n\n      default:\n        return {\n          width: values.resolution.params.width,\n          height: values.resolution.params.height\n        };\n    }\n  };\n\n  ViewportScreenshotHelper.prototype.createPass = function (mutlisample) {\n    var c = this.plugin.canvas3d;\n    var _a = c.webgl.extensions,\n        colorBufferFloat = _a.colorBufferFloat,\n        textureFloat = _a.textureFloat;\n    var aoProps = c.props.postprocessing.occlusion;\n    return c.getImagePass({\n      transparentBackground: this.values.transparent,\n      cameraHelper: {\n        axes: this.values.axes\n      },\n      multiSample: {\n        mode: mutlisample ? 'on' : 'off',\n        sampleLevel: colorBufferFloat && textureFloat ? 4 : 2\n      },\n      postprocessing: __assign(__assign({}, c.props.postprocessing), {\n        occlusion: aoProps.name === 'on' ? {\n          name: 'on',\n          params: __assign(__assign({}, aoProps.params), {\n            samples: 128\n          })\n        } : aoProps\n      }),\n      marking: __assign({}, c.props.marking)\n    });\n  };\n\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"previewPass\", {\n    get: function () {\n      return this._previewPass || (this._previewPass = this.createPass(false));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"imagePass\", {\n    get: function () {\n      if (this._imagePass) {\n        var c = this.plugin.canvas3d;\n        var aoProps = c.props.postprocessing.occlusion;\n\n        this._imagePass.setProps({\n          cameraHelper: {\n            axes: this.values.axes\n          },\n          transparentBackground: this.values.transparent,\n          // TODO: optimize because this creates a copy of a large object!\n          postprocessing: __assign(__assign({}, c.props.postprocessing), {\n            occlusion: aoProps.name === 'on' ? {\n              name: 'on',\n              params: __assign(__assign({}, aoProps.params), {\n                samples: 128\n              })\n            } : aoProps\n          }),\n          marking: __assign({}, c.props.marking)\n        });\n\n        return this._imagePass;\n      }\n\n      return this._imagePass = this.createPass(true);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ViewportScreenshotHelper.prototype.getFilename = function (extension) {\n    if (extension === void 0) {\n      extension = '.png';\n    }\n\n    var models = this.plugin.state.data.select(StateSelection.Generators.rootsOfType(PluginStateObject.Molecule.Model)).map(function (s) {\n      return s.obj.data;\n    });\n    var uniqueIds = new Set();\n    models.forEach(function (m) {\n      return uniqueIds.add(m.entryId.toUpperCase());\n    });\n    var idString = SetUtils.toArray(uniqueIds).join('-');\n    return \"\" + (idString || 'molstar-image') + extension;\n  };\n\n  ViewportScreenshotHelper.prototype.resetCrop = function () {\n    this.behaviors.relativeCrop.next({\n      x: 0,\n      y: 0,\n      width: 1,\n      height: 1\n    });\n  };\n\n  ViewportScreenshotHelper.prototype.toggleAutocrop = function () {\n    if (this.cropParams.auto) {\n      this.behaviors.cropParams.next(__assign(__assign({}, this.cropParams), {\n        auto: false\n      }));\n      this.resetCrop();\n    } else {\n      this.behaviors.cropParams.next(__assign(__assign({}, this.cropParams), {\n        auto: true\n      }));\n    }\n  };\n\n  Object.defineProperty(ViewportScreenshotHelper.prototype, \"isFullFrame\", {\n    get: function () {\n      var crop = this.relativeCrop;\n      return equalEps(crop.x, 0, 1e-5) && equalEps(crop.y, 0, 1e-5) && equalEps(crop.width, 1, 1e-5) && equalEps(crop.height, 1, 1e-5);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ViewportScreenshotHelper.prototype.autocrop = function (relativePadding) {\n    if (relativePadding === void 0) {\n      relativePadding = this.cropParams.relativePadding;\n    }\n\n    var _a = this.previewData.image,\n        data = _a.data,\n        width = _a.width,\n        height = _a.height;\n    var isTransparent = this.previewData.transparent;\n    var bgColor = isTransparent ? this.previewData.background : 0xff000000 | this.previewData.background;\n    var l = width,\n        r = 0,\n        t = height,\n        b = 0;\n\n    for (var j = 0; j < height; j++) {\n      var jj = j * width;\n\n      for (var i = 0; i < width; i++) {\n        var o = 4 * (jj + i);\n\n        if (isTransparent) {\n          if (data[o + 3] === 0) continue;\n        } else {\n          var c = data[o] << 16 | data[o + 1] << 8 | data[o + 2] | data[o + 3] << 24;\n          if (c === bgColor) continue;\n        }\n\n        if (i < l) l = i;\n        if (i > r) r = i;\n        if (j < t) t = j;\n        if (j > b) b = j;\n      }\n    }\n\n    if (l > r) {\n      var x = l;\n      l = r;\n      r = x;\n    }\n\n    if (t > b) {\n      var x = t;\n      t = b;\n      b = x;\n    }\n\n    var tw = r - l + 1,\n        th = b - t + 1;\n    l -= relativePadding * tw;\n    r += relativePadding * tw;\n    t -= relativePadding * th;\n    b += relativePadding * th;\n    var crop = {\n      x: Math.max(0, l / width),\n      y: Math.max(0, t / height),\n      width: Math.min(1, (r - l + 1) / width),\n      height: Math.min(1, (b - t + 1) / height)\n    };\n    this.behaviors.relativeCrop.next(crop);\n  };\n\n  ViewportScreenshotHelper.prototype.getPreview = function (maxDim) {\n    if (maxDim === void 0) {\n      maxDim = 320;\n    }\n\n    var _a = this.getSize(),\n        width = _a.width,\n        height = _a.height;\n\n    if (width <= 0 || height <= 0) return;\n    var f = width / height;\n    var w = 0,\n        h = 0;\n\n    if (f > 1) {\n      w = maxDim;\n      h = Math.round(maxDim / f);\n    } else {\n      h = maxDim;\n      w = Math.round(maxDim * f);\n    }\n\n    var canvasProps = this.plugin.canvas3d.props;\n    this.previewPass.setProps({\n      cameraHelper: {\n        axes: this.values.axes\n      },\n      transparentBackground: this.values.transparent,\n      // TODO: optimize because this creates a copy of a large object!\n      postprocessing: canvasProps.postprocessing,\n      marking: canvasProps.marking\n    });\n    var imageData = this.previewPass.getImageData(w, h);\n    var canvas = this.previewCanvas;\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    this.previewData.image = imageData;\n    this.previewData.background = canvasProps.renderer.backgroundColor;\n    this.previewData.transparent = this.values.transparent;\n    var canvasCtx = canvas.getContext('2d');\n    if (!canvasCtx) throw new Error('Could not create canvas 2d context');\n    canvasCtx.putImageData(imageData, 0, 0);\n    if (this.cropParams.auto) this.autocrop();\n    this.events.previewed.next(void 0);\n    return {\n      canvas: canvas,\n      width: w,\n      height: h\n    };\n  };\n\n  ViewportScreenshotHelper.prototype.getSizeAndViewport = function () {\n    var _a = this.getSize(),\n        width = _a.width,\n        height = _a.height;\n\n    var crop = this.relativeCrop;\n    var viewport = {\n      x: Math.floor(crop.x * width),\n      y: Math.floor(crop.y * height),\n      width: Math.ceil(crop.width * width),\n      height: Math.ceil(crop.height * height)\n    };\n    if (viewport.width + viewport.x > width) viewport.width = width - viewport.x;\n    if (viewport.height + viewport.y > height) viewport.height = height - viewport.y;\n    return {\n      width: width,\n      height: height,\n      viewport: viewport\n    };\n  };\n\n  ViewportScreenshotHelper.prototype.draw = function (ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, width, height, viewport, imageData, canvas, canvasCtx;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.getSizeAndViewport(), width = _a.width, height = _a.height, viewport = _a.viewport;\n            if (width <= 0 || height <= 0) return [2\n            /*return*/\n            ];\n            return [4\n            /*yield*/\n            , ctx.update('Rendering image...')];\n\n          case 1:\n            _b.sent();\n\n            imageData = this.imagePass.getImageData(width, height, viewport);\n            return [4\n            /*yield*/\n            , ctx.update('Encoding image...')];\n\n          case 2:\n            _b.sent();\n\n            canvas = this.canvas;\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            canvasCtx = canvas.getContext('2d');\n            if (!canvasCtx) throw new Error('Could not create canvas 2d context');\n            canvasCtx.putImageData(imageData, 0, 0);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ViewportScreenshotHelper.prototype.copyToClipboardTask = function () {\n    var _this = this;\n\n    var cb = navigator.clipboard;\n\n    if (!(cb === null || cb === void 0 ? void 0 : cb.write)) {\n      this.plugin.log.error('clipboard.write not supported!');\n      return;\n    }\n\n    return Task.create('Copy Image', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var blob, item;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.draw(ctx)];\n\n            case 1:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , ctx.update('Converting image...')];\n\n            case 2:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , canvasToBlob(this.canvas, 'png')];\n\n            case 3:\n              blob = _a.sent();\n              item = new ClipboardItem({\n                'image/png': blob\n              });\n              return [4\n              /*yield*/\n              , cb.write([item])];\n\n            case 4:\n              _a.sent();\n\n              this.plugin.log.message('Image copied to clipboard.');\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  ViewportScreenshotHelper.prototype.getImageDataUri = function () {\n    var _this = this;\n\n    return this.plugin.runTask(Task.create('Generate Image', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.draw(ctx)];\n\n            case 1:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , ctx.update('Converting image...')];\n\n            case 2:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , this.canvas.toDataURL('png')];\n          }\n        });\n      });\n    }));\n  };\n\n  ViewportScreenshotHelper.prototype.copyToClipboard = function () {\n    var task = this.copyToClipboardTask();\n    if (!task) return;\n    return this.plugin.runTask(task);\n  };\n\n  ViewportScreenshotHelper.prototype.downloadTask = function (filename) {\n    var _this = this;\n\n    return Task.create('Download Image', function (ctx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var blob;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.draw(ctx)];\n\n            case 1:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , ctx.update('Downloading image...')];\n\n            case 2:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , canvasToBlob(this.canvas, 'png')];\n\n            case 3:\n              blob = _a.sent();\n              download(blob, filename !== null && filename !== void 0 ? filename : this.getFilename());\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  ViewportScreenshotHelper.prototype.download = function (filename) {\n    this.plugin.runTask(this.downloadTask(filename));\n  };\n\n  return ViewportScreenshotHelper;\n}(PluginComponent);","map":{"version":3,"sources":["../../../src/mol-plugin/util/viewport-screenshot.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\r\nimport { CameraHelperParams } from '../../mol-canvas3d/helper/camera-helper';\r\nimport { canvasToBlob } from '../../mol-canvas3d/util';\r\nimport { equalEps } from '../../mol-math/linear-algebra/3d/common';\r\nimport { PluginComponent } from '../../mol-plugin-state/component';\r\nimport { PluginStateObject } from '../../mol-plugin-state/objects';\r\nimport { StateSelection } from '../../mol-state';\r\nimport { Task } from '../../mol-task';\r\nimport { Color } from '../../mol-util/color';\r\nimport { download } from '../../mol-util/download';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { SetUtils } from '../../mol-util/set';\r\nexport { ViewportScreenshotHelper };\r\nvar ViewportScreenshotHelper = /** @class */ (function (_super) {\r\n    __extends(ViewportScreenshotHelper, _super);\r\n    function ViewportScreenshotHelper(plugin) {\r\n        var _this = _super.call(this) || this;\r\n        _this.plugin = plugin;\r\n        _this._params = void 0;\r\n        _this.behaviors = {\r\n            values: _this.ev.behavior({\r\n                transparent: _this.params.transparent.defaultValue,\r\n                axes: { name: 'off', params: {} },\r\n                resolution: _this.params.resolution.defaultValue\r\n            }),\r\n            cropParams: _this.ev.behavior({ auto: true, relativePadding: 0.1 }),\r\n            relativeCrop: _this.ev.behavior({ x: 0, y: 0, width: 1, height: 1 }),\r\n        };\r\n        _this.events = {\r\n            previewed: _this.ev()\r\n        };\r\n        _this.canvas = function () {\r\n            var canvas = document.createElement('canvas');\r\n            return canvas;\r\n        }();\r\n        _this.previewCanvas = function () {\r\n            var canvas = document.createElement('canvas');\r\n            return canvas;\r\n        }();\r\n        _this.previewData = {\r\n            image: { data: new Uint8ClampedArray(1), width: 1, height: 0 },\r\n            background: Color(0),\r\n            transparent: false\r\n        };\r\n        return _this;\r\n    }\r\n    ViewportScreenshotHelper.prototype.createParams = function () {\r\n        var max = Math.min(this.plugin.canvas3d ? this.plugin.canvas3d.webgl.maxRenderbufferSize : 4096, 4096);\r\n        return {\r\n            resolution: PD.MappedStatic('viewport', {\r\n                viewport: PD.Group({}),\r\n                hd: PD.Group({}),\r\n                'full-hd': PD.Group({}),\r\n                'ultra-hd': PD.Group({}),\r\n                custom: PD.Group({\r\n                    width: PD.Numeric(1920, { min: 128, max: max, step: 1 }),\r\n                    height: PD.Numeric(1080, { min: 128, max: max, step: 1 }),\r\n                }, { isFlat: true })\r\n            }, {\r\n                options: [\r\n                    ['viewport', 'Viewport'],\r\n                    ['hd', 'HD (1280 x 720)'],\r\n                    ['full-hd', 'Full HD (1920 x 1080)'],\r\n                    ['ultra-hd', 'Ultra HD (3840 x 2160)'],\r\n                    ['custom', 'Custom']\r\n                ]\r\n            }),\r\n            transparent: PD.Boolean(false),\r\n            axes: CameraHelperParams.axes,\r\n        };\r\n    };\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"params\", {\r\n        get: function () {\r\n            if (this._params)\r\n                return this._params;\r\n            return this._params = this.createParams();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"values\", {\r\n        get: function () {\r\n            return this.behaviors.values.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"cropParams\", {\r\n        get: function () {\r\n            return this.behaviors.cropParams.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"relativeCrop\", {\r\n        get: function () {\r\n            return this.behaviors.relativeCrop.value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ViewportScreenshotHelper.prototype.getCanvasSize = function () {\r\n        var _a, _b;\r\n        return {\r\n            width: ((_a = this.plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.webgl.gl.drawingBufferWidth) || 0,\r\n            height: ((_b = this.plugin.canvas3d) === null || _b === void 0 ? void 0 : _b.webgl.gl.drawingBufferHeight) || 0\r\n        };\r\n    };\r\n    ViewportScreenshotHelper.prototype.getSize = function () {\r\n        var values = this.values;\r\n        switch (values.resolution.name) {\r\n            case 'viewport': return this.getCanvasSize();\r\n            case 'hd': return { width: 1280, height: 720 };\r\n            case 'full-hd': return { width: 1920, height: 1080 };\r\n            case 'ultra-hd': return { width: 3840, height: 2160 };\r\n            default: return { width: values.resolution.params.width, height: values.resolution.params.height };\r\n        }\r\n    };\r\n    ViewportScreenshotHelper.prototype.createPass = function (mutlisample) {\r\n        var c = this.plugin.canvas3d;\r\n        var _a = c.webgl.extensions, colorBufferFloat = _a.colorBufferFloat, textureFloat = _a.textureFloat;\r\n        var aoProps = c.props.postprocessing.occlusion;\r\n        return c.getImagePass({\r\n            transparentBackground: this.values.transparent,\r\n            cameraHelper: { axes: this.values.axes },\r\n            multiSample: {\r\n                mode: mutlisample ? 'on' : 'off',\r\n                sampleLevel: colorBufferFloat && textureFloat ? 4 : 2\r\n            },\r\n            postprocessing: __assign(__assign({}, c.props.postprocessing), { occlusion: aoProps.name === 'on'\r\n                    ? { name: 'on', params: __assign(__assign({}, aoProps.params), { samples: 128 }) }\r\n                    : aoProps }),\r\n            marking: __assign({}, c.props.marking)\r\n        });\r\n    };\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"previewPass\", {\r\n        get: function () {\r\n            return this._previewPass || (this._previewPass = this.createPass(false));\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"imagePass\", {\r\n        get: function () {\r\n            if (this._imagePass) {\r\n                var c = this.plugin.canvas3d;\r\n                var aoProps = c.props.postprocessing.occlusion;\r\n                this._imagePass.setProps({\r\n                    cameraHelper: { axes: this.values.axes },\r\n                    transparentBackground: this.values.transparent,\r\n                    // TODO: optimize because this creates a copy of a large object!\r\n                    postprocessing: __assign(__assign({}, c.props.postprocessing), { occlusion: aoProps.name === 'on'\r\n                            ? { name: 'on', params: __assign(__assign({}, aoProps.params), { samples: 128 }) }\r\n                            : aoProps }),\r\n                    marking: __assign({}, c.props.marking)\r\n                });\r\n                return this._imagePass;\r\n            }\r\n            return this._imagePass = this.createPass(true);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ViewportScreenshotHelper.prototype.getFilename = function (extension) {\r\n        if (extension === void 0) { extension = '.png'; }\r\n        var models = this.plugin.state.data.select(StateSelection.Generators.rootsOfType(PluginStateObject.Molecule.Model)).map(function (s) { return s.obj.data; });\r\n        var uniqueIds = new Set();\r\n        models.forEach(function (m) { return uniqueIds.add(m.entryId.toUpperCase()); });\r\n        var idString = SetUtils.toArray(uniqueIds).join('-');\r\n        return \"\" + (idString || 'molstar-image') + extension;\r\n    };\r\n    ViewportScreenshotHelper.prototype.resetCrop = function () {\r\n        this.behaviors.relativeCrop.next({ x: 0, y: 0, width: 1, height: 1 });\r\n    };\r\n    ViewportScreenshotHelper.prototype.toggleAutocrop = function () {\r\n        if (this.cropParams.auto) {\r\n            this.behaviors.cropParams.next(__assign(__assign({}, this.cropParams), { auto: false }));\r\n            this.resetCrop();\r\n        }\r\n        else {\r\n            this.behaviors.cropParams.next(__assign(__assign({}, this.cropParams), { auto: true }));\r\n        }\r\n    };\r\n    Object.defineProperty(ViewportScreenshotHelper.prototype, \"isFullFrame\", {\r\n        get: function () {\r\n            var crop = this.relativeCrop;\r\n            return equalEps(crop.x, 0, 1e-5) && equalEps(crop.y, 0, 1e-5) && equalEps(crop.width, 1, 1e-5) && equalEps(crop.height, 1, 1e-5);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ViewportScreenshotHelper.prototype.autocrop = function (relativePadding) {\r\n        if (relativePadding === void 0) { relativePadding = this.cropParams.relativePadding; }\r\n        var _a = this.previewData.image, data = _a.data, width = _a.width, height = _a.height;\r\n        var isTransparent = this.previewData.transparent;\r\n        var bgColor = isTransparent ? this.previewData.background : 0xff000000 | this.previewData.background;\r\n        var l = width, r = 0, t = height, b = 0;\r\n        for (var j = 0; j < height; j++) {\r\n            var jj = j * width;\r\n            for (var i = 0; i < width; i++) {\r\n                var o = 4 * (jj + i);\r\n                if (isTransparent) {\r\n                    if (data[o + 3] === 0)\r\n                        continue;\r\n                }\r\n                else {\r\n                    var c = (data[o] << 16) | (data[o + 1] << 8) | (data[o + 2]) | (data[o + 3] << 24);\r\n                    if (c === bgColor)\r\n                        continue;\r\n                }\r\n                if (i < l)\r\n                    l = i;\r\n                if (i > r)\r\n                    r = i;\r\n                if (j < t)\r\n                    t = j;\r\n                if (j > b)\r\n                    b = j;\r\n            }\r\n        }\r\n        if (l > r) {\r\n            var x = l;\r\n            l = r;\r\n            r = x;\r\n        }\r\n        if (t > b) {\r\n            var x = t;\r\n            t = b;\r\n            b = x;\r\n        }\r\n        var tw = r - l + 1, th = b - t + 1;\r\n        l -= relativePadding * tw;\r\n        r += relativePadding * tw;\r\n        t -= relativePadding * th;\r\n        b += relativePadding * th;\r\n        var crop = {\r\n            x: Math.max(0, l / width),\r\n            y: Math.max(0, t / height),\r\n            width: Math.min(1, (r - l + 1) / width),\r\n            height: Math.min(1, (b - t + 1) / height)\r\n        };\r\n        this.behaviors.relativeCrop.next(crop);\r\n    };\r\n    ViewportScreenshotHelper.prototype.getPreview = function (maxDim) {\r\n        if (maxDim === void 0) { maxDim = 320; }\r\n        var _a = this.getSize(), width = _a.width, height = _a.height;\r\n        if (width <= 0 || height <= 0)\r\n            return;\r\n        var f = width / height;\r\n        var w = 0, h = 0;\r\n        if (f > 1) {\r\n            w = maxDim;\r\n            h = Math.round(maxDim / f);\r\n        }\r\n        else {\r\n            h = maxDim;\r\n            w = Math.round(maxDim * f);\r\n        }\r\n        var canvasProps = this.plugin.canvas3d.props;\r\n        this.previewPass.setProps({\r\n            cameraHelper: { axes: this.values.axes },\r\n            transparentBackground: this.values.transparent,\r\n            // TODO: optimize because this creates a copy of a large object!\r\n            postprocessing: canvasProps.postprocessing,\r\n            marking: canvasProps.marking\r\n        });\r\n        var imageData = this.previewPass.getImageData(w, h);\r\n        var canvas = this.previewCanvas;\r\n        canvas.width = imageData.width;\r\n        canvas.height = imageData.height;\r\n        this.previewData.image = imageData;\r\n        this.previewData.background = canvasProps.renderer.backgroundColor;\r\n        this.previewData.transparent = this.values.transparent;\r\n        var canvasCtx = canvas.getContext('2d');\r\n        if (!canvasCtx)\r\n            throw new Error('Could not create canvas 2d context');\r\n        canvasCtx.putImageData(imageData, 0, 0);\r\n        if (this.cropParams.auto)\r\n            this.autocrop();\r\n        this.events.previewed.next(void 0);\r\n        return { canvas: canvas, width: w, height: h };\r\n    };\r\n    ViewportScreenshotHelper.prototype.getSizeAndViewport = function () {\r\n        var _a = this.getSize(), width = _a.width, height = _a.height;\r\n        var crop = this.relativeCrop;\r\n        var viewport = {\r\n            x: Math.floor(crop.x * width),\r\n            y: Math.floor(crop.y * height),\r\n            width: Math.ceil(crop.width * width),\r\n            height: Math.ceil(crop.height * height)\r\n        };\r\n        if (viewport.width + viewport.x > width)\r\n            viewport.width = width - viewport.x;\r\n        if (viewport.height + viewport.y > height)\r\n            viewport.height = height - viewport.y;\r\n        return { width: width, height: height, viewport: viewport };\r\n    };\r\n    ViewportScreenshotHelper.prototype.draw = function (ctx) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, width, height, viewport, imageData, canvas, canvasCtx;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.getSizeAndViewport(), width = _a.width, height = _a.height, viewport = _a.viewport;\r\n                        if (width <= 0 || height <= 0)\r\n                            return [2 /*return*/];\r\n                        return [4 /*yield*/, ctx.update('Rendering image...')];\r\n                    case 1:\r\n                        _b.sent();\r\n                        imageData = this.imagePass.getImageData(width, height, viewport);\r\n                        return [4 /*yield*/, ctx.update('Encoding image...')];\r\n                    case 2:\r\n                        _b.sent();\r\n                        canvas = this.canvas;\r\n                        canvas.width = imageData.width;\r\n                        canvas.height = imageData.height;\r\n                        canvasCtx = canvas.getContext('2d');\r\n                        if (!canvasCtx)\r\n                            throw new Error('Could not create canvas 2d context');\r\n                        canvasCtx.putImageData(imageData, 0, 0);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ViewportScreenshotHelper.prototype.copyToClipboardTask = function () {\r\n        var _this = this;\r\n        var cb = navigator.clipboard;\r\n        if (!(cb === null || cb === void 0 ? void 0 : cb.write)) {\r\n            this.plugin.log.error('clipboard.write not supported!');\r\n            return;\r\n        }\r\n        return Task.create('Copy Image', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var blob, item;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.draw(ctx)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, ctx.update('Converting image...')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, canvasToBlob(this.canvas, 'png')];\r\n                    case 3:\r\n                        blob = _a.sent();\r\n                        item = new ClipboardItem({ 'image/png': blob });\r\n                        return [4 /*yield*/, cb.write([item])];\r\n                    case 4:\r\n                        _a.sent();\r\n                        this.plugin.log.message('Image copied to clipboard.');\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    ViewportScreenshotHelper.prototype.getImageDataUri = function () {\r\n        var _this = this;\r\n        return this.plugin.runTask(Task.create('Generate Image', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.draw(ctx)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, ctx.update('Converting image...')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, this.canvas.toDataURL('png')];\r\n                }\r\n            });\r\n        }); }));\r\n    };\r\n    ViewportScreenshotHelper.prototype.copyToClipboard = function () {\r\n        var task = this.copyToClipboardTask();\r\n        if (!task)\r\n            return;\r\n        return this.plugin.runTask(task);\r\n    };\r\n    ViewportScreenshotHelper.prototype.downloadTask = function (filename) {\r\n        var _this = this;\r\n        return Task.create('Download Image', function (ctx) { return __awaiter(_this, void 0, void 0, function () {\r\n            var blob;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.draw(ctx)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, ctx.update('Downloading image...')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, canvasToBlob(this.canvas, 'png')];\r\n                    case 3:\r\n                        blob = _a.sent();\r\n                        download(blob, filename !== null && filename !== void 0 ? filename : this.getFilename());\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    ViewportScreenshotHelper.prototype.download = function (filename) {\r\n        this.plugin.runTask(this.downloadTask(filename));\r\n    };\r\n    return ViewportScreenshotHelper;\r\n}(PluginComponent));\r\n//# sourceMappingURL=viewport-screenshot.js.map"]},"metadata":{},"sourceType":"module"}