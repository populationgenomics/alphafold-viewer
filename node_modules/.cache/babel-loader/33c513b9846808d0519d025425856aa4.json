{"ast":null,"code":"/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { createProgram } from './program';\nimport { createShader } from './shader';\nimport { createFramebuffer } from './framebuffer';\nimport { createAttributeBuffer, createElementsBuffer } from './buffer';\nimport { createReferenceCache } from '../../mol-util/reference-cache';\nimport { hashString, hashFnv32a } from '../../mol-data/util';\nimport { createRenderbuffer } from './renderbuffer';\nimport { createTexture } from './texture';\nimport { createVertexArray } from './vertex-array';\n\nfunction defineValueHash(v) {\n  return typeof v === 'boolean' ? v ? 1 : 0 : typeof v === 'number' ? v * 10000 : hashString(v);\n}\n\nfunction wrapCached(resourceItem) {\n  var wrapped = __assign(__assign({}, resourceItem.value), {\n    destroy: function () {\n      resourceItem.free();\n    }\n  });\n\n  return wrapped;\n}\n\nexport function createResources(gl, state, stats, extensions) {\n  var sets = {\n    attribute: new Set(),\n    elements: new Set(),\n    framebuffer: new Set(),\n    program: new Set(),\n    renderbuffer: new Set(),\n    shader: new Set(),\n    texture: new Set(),\n    vertexArray: new Set()\n  };\n\n  function wrap(name, resource) {\n    sets[name].add(resource);\n    stats.resourceCounts[name] += 1;\n    return __assign(__assign({}, resource), {\n      destroy: function () {\n        resource.destroy();\n        sets[name].delete(resource);\n        stats.resourceCounts[name] -= 1;\n      }\n    });\n  }\n\n  var shaderCache = createReferenceCache(function (props) {\n    return JSON.stringify(props);\n  }, function (props) {\n    return wrap('shader', createShader(gl, props));\n  }, function (shader) {\n    shader.destroy();\n  });\n\n  function getShader(type, source) {\n    return wrapCached(shaderCache.get({\n      type: type,\n      source: source\n    }));\n  }\n\n  var programCache = createReferenceCache(function (props) {\n    var array = [props.shaderCode.id];\n    Object.keys(props.defineValues).forEach(function (k) {\n      return array.push(hashString(k), defineValueHash(props.defineValues[k].ref.value));\n    });\n    return hashFnv32a(array).toString();\n  }, function (props) {\n    return wrap('program', createProgram(gl, state, extensions, getShader, props));\n  }, function (program) {\n    program.destroy();\n  });\n  return {\n    attribute: function (array, itemSize, divisor, usageHint) {\n      return wrap('attribute', createAttributeBuffer(gl, extensions, array, itemSize, divisor, usageHint));\n    },\n    elements: function (array, usageHint) {\n      return wrap('elements', createElementsBuffer(gl, array, usageHint));\n    },\n    framebuffer: function () {\n      return wrap('framebuffer', createFramebuffer(gl));\n    },\n    program: function (defineValues, shaderCode, schema) {\n      return wrapCached(programCache.get({\n        defineValues: defineValues,\n        shaderCode: shaderCode,\n        schema: schema\n      }));\n    },\n    renderbuffer: function (format, attachment, width, height) {\n      return wrap('renderbuffer', createRenderbuffer(gl, format, attachment, width, height));\n    },\n    shader: getShader,\n    texture: function (kind, format, type, filter) {\n      return wrap('texture', createTexture(gl, extensions, kind, format, type, filter));\n    },\n    vertexArray: function (program, attributeBuffers, elementsBuffer) {\n      return wrap('vertexArray', createVertexArray(extensions, program, attributeBuffers, elementsBuffer));\n    },\n    getByteCounts: function () {\n      var texture = 0;\n      sets.texture.forEach(function (r) {\n        texture += r.getByteCount();\n      });\n      var attribute = 0;\n      sets.attribute.forEach(function (r) {\n        attribute += r.length * 4;\n      });\n      var elements = 0;\n      sets.elements.forEach(function (r) {\n        elements += r.length * 4;\n      });\n      return {\n        texture: texture,\n        attribute: attribute,\n        elements: elements\n      };\n    },\n    reset: function () {\n      sets.attribute.forEach(function (r) {\n        return r.reset();\n      });\n      sets.elements.forEach(function (r) {\n        return r.reset();\n      });\n      sets.framebuffer.forEach(function (r) {\n        return r.reset();\n      });\n      sets.renderbuffer.forEach(function (r) {\n        return r.reset();\n      });\n      sets.shader.forEach(function (r) {\n        return r.reset();\n      });\n      sets.program.forEach(function (r) {\n        return r.reset();\n      });\n      sets.vertexArray.forEach(function (r) {\n        return r.reset();\n      });\n      sets.texture.forEach(function (r) {\n        return r.reset();\n      });\n    },\n    destroy: function () {\n      sets.attribute.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.elements.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.framebuffer.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.renderbuffer.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.shader.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.program.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.vertexArray.forEach(function (r) {\n        return r.destroy();\n      });\n      sets.texture.forEach(function (r) {\n        return r.destroy();\n      });\n      shaderCache.clear();\n      programCache.clear();\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/resources.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { createProgram } from './program';\r\nimport { createShader } from './shader';\r\nimport { createFramebuffer } from './framebuffer';\r\nimport { createAttributeBuffer, createElementsBuffer } from './buffer';\r\nimport { createReferenceCache } from '../../mol-util/reference-cache';\r\nimport { hashString, hashFnv32a } from '../../mol-data/util';\r\nimport { createRenderbuffer } from './renderbuffer';\r\nimport { createTexture } from './texture';\r\nimport { createVertexArray } from './vertex-array';\r\nfunction defineValueHash(v) {\r\n    return typeof v === 'boolean' ? (v ? 1 : 0) :\r\n        typeof v === 'number' ? (v * 10000) : hashString(v);\r\n}\r\nfunction wrapCached(resourceItem) {\r\n    var wrapped = __assign(__assign({}, resourceItem.value), { destroy: function () {\r\n            resourceItem.free();\r\n        } });\r\n    return wrapped;\r\n}\r\nexport function createResources(gl, state, stats, extensions) {\r\n    var sets = {\r\n        attribute: new Set(),\r\n        elements: new Set(),\r\n        framebuffer: new Set(),\r\n        program: new Set(),\r\n        renderbuffer: new Set(),\r\n        shader: new Set(),\r\n        texture: new Set(),\r\n        vertexArray: new Set(),\r\n    };\r\n    function wrap(name, resource) {\r\n        sets[name].add(resource);\r\n        stats.resourceCounts[name] += 1;\r\n        return __assign(__assign({}, resource), { destroy: function () {\r\n                resource.destroy();\r\n                sets[name].delete(resource);\r\n                stats.resourceCounts[name] -= 1;\r\n            } });\r\n    }\r\n    var shaderCache = createReferenceCache(function (props) { return JSON.stringify(props); }, function (props) { return wrap('shader', createShader(gl, props)); }, function (shader) { shader.destroy(); });\r\n    function getShader(type, source) {\r\n        return wrapCached(shaderCache.get({ type: type, source: source }));\r\n    }\r\n    var programCache = createReferenceCache(function (props) {\r\n        var array = [props.shaderCode.id];\r\n        Object.keys(props.defineValues).forEach(function (k) { return array.push(hashString(k), defineValueHash(props.defineValues[k].ref.value)); });\r\n        return hashFnv32a(array).toString();\r\n    }, function (props) { return wrap('program', createProgram(gl, state, extensions, getShader, props)); }, function (program) { program.destroy(); });\r\n    return {\r\n        attribute: function (array, itemSize, divisor, usageHint) {\r\n            return wrap('attribute', createAttributeBuffer(gl, extensions, array, itemSize, divisor, usageHint));\r\n        },\r\n        elements: function (array, usageHint) {\r\n            return wrap('elements', createElementsBuffer(gl, array, usageHint));\r\n        },\r\n        framebuffer: function () {\r\n            return wrap('framebuffer', createFramebuffer(gl));\r\n        },\r\n        program: function (defineValues, shaderCode, schema) {\r\n            return wrapCached(programCache.get({ defineValues: defineValues, shaderCode: shaderCode, schema: schema }));\r\n        },\r\n        renderbuffer: function (format, attachment, width, height) {\r\n            return wrap('renderbuffer', createRenderbuffer(gl, format, attachment, width, height));\r\n        },\r\n        shader: getShader,\r\n        texture: function (kind, format, type, filter) {\r\n            return wrap('texture', createTexture(gl, extensions, kind, format, type, filter));\r\n        },\r\n        vertexArray: function (program, attributeBuffers, elementsBuffer) {\r\n            return wrap('vertexArray', createVertexArray(extensions, program, attributeBuffers, elementsBuffer));\r\n        },\r\n        getByteCounts: function () {\r\n            var texture = 0;\r\n            sets.texture.forEach(function (r) {\r\n                texture += r.getByteCount();\r\n            });\r\n            var attribute = 0;\r\n            sets.attribute.forEach(function (r) {\r\n                attribute += r.length * 4;\r\n            });\r\n            var elements = 0;\r\n            sets.elements.forEach(function (r) {\r\n                elements += r.length * 4;\r\n            });\r\n            return { texture: texture, attribute: attribute, elements: elements };\r\n        },\r\n        reset: function () {\r\n            sets.attribute.forEach(function (r) { return r.reset(); });\r\n            sets.elements.forEach(function (r) { return r.reset(); });\r\n            sets.framebuffer.forEach(function (r) { return r.reset(); });\r\n            sets.renderbuffer.forEach(function (r) { return r.reset(); });\r\n            sets.shader.forEach(function (r) { return r.reset(); });\r\n            sets.program.forEach(function (r) { return r.reset(); });\r\n            sets.vertexArray.forEach(function (r) { return r.reset(); });\r\n            sets.texture.forEach(function (r) { return r.reset(); });\r\n        },\r\n        destroy: function () {\r\n            sets.attribute.forEach(function (r) { return r.destroy(); });\r\n            sets.elements.forEach(function (r) { return r.destroy(); });\r\n            sets.framebuffer.forEach(function (r) { return r.destroy(); });\r\n            sets.renderbuffer.forEach(function (r) { return r.destroy(); });\r\n            sets.shader.forEach(function (r) { return r.destroy(); });\r\n            sets.program.forEach(function (r) { return r.destroy(); });\r\n            sets.vertexArray.forEach(function (r) { return r.destroy(); });\r\n            sets.texture.forEach(function (r) { return r.destroy(); });\r\n            shaderCache.clear();\r\n            programCache.clear();\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=resources.js.map"]},"metadata":{},"sourceType":"module"}