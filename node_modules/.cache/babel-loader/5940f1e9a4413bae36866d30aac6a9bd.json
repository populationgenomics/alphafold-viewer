{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Color } from '../../mol-util/color';\nimport { StructureElement, Bond, Model } from '../../mol-model/structure';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = 'Gives every model a unique color based on the position (index) of the model in the list of models in the structure.';\nexport var ModelIndexColorThemeParams = __assign({}, getPaletteParams({\n  type: 'colors',\n  colorList: 'purples'\n}));\nexport function getModelIndexColorThemeParams(ctx) {\n  return ModelIndexColorThemeParams; // TODO return copy\n}\nexport function ModelIndexColorTheme(ctx, props) {\n  var _a, _b;\n\n  var color;\n  var legend;\n\n  if (ctx.structure) {\n    var models = ctx.structure.root.models;\n    var size = 0;\n\n    for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n      var m = models_1[_i];\n      size = Math.max(size, ((_a = Model.TrajectoryInfo.get(m)) === null || _a === void 0 ? void 0 : _a.size) || 0);\n    }\n\n    var palette = getPalette(size, props);\n    legend = palette.legend;\n    var modelColor_1 = new Map();\n\n    for (var i = 0, il = models.length; i < il; ++i) {\n      var idx = ((_b = Model.TrajectoryInfo.get(models[i])) === null || _b === void 0 ? void 0 : _b.index) || 0;\n      modelColor_1.set(idx, palette.color(idx));\n    }\n\n    color = function (location) {\n      if (StructureElement.Location.is(location)) {\n        return modelColor_1.get(Model.TrajectoryInfo.get(location.unit.model).index);\n      } else if (Bond.isLocation(location)) {\n        return modelColor_1.get(Model.TrajectoryInfo.get(location.aUnit.model).index);\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: ModelIndexColorTheme,\n    granularity: 'instance',\n    color: color,\n    props: props,\n    description: Description,\n    legend: legend\n  };\n}\nexport var ModelIndexColorThemeProvider = {\n  name: 'model-index',\n  label: 'Model Index',\n  category: \"Chain Property\"\n  /* Chain */\n  ,\n  factory: ModelIndexColorTheme,\n  getParams: getModelIndexColorThemeParams,\n  defaultValues: PD.getDefaultValues(ModelIndexColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.elementCount > 0 && Model.TrajectoryInfo.get(ctx.structure.models[0]).size > 1;\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/model-index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Color } from '../../mol-util/color';\r\nimport { StructureElement, Bond, Model } from '../../mol-model/structure';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { getPaletteParams, getPalette } from '../../mol-util/color/palette';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = 'Gives every model a unique color based on the position (index) of the model in the list of models in the structure.';\r\nexport var ModelIndexColorThemeParams = __assign({}, getPaletteParams({ type: 'colors', colorList: 'purples' }));\r\nexport function getModelIndexColorThemeParams(ctx) {\r\n    return ModelIndexColorThemeParams; // TODO return copy\r\n}\r\nexport function ModelIndexColorTheme(ctx, props) {\r\n    var _a, _b;\r\n    var color;\r\n    var legend;\r\n    if (ctx.structure) {\r\n        var models = ctx.structure.root.models;\r\n        var size = 0;\r\n        for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\r\n            var m = models_1[_i];\r\n            size = Math.max(size, ((_a = Model.TrajectoryInfo.get(m)) === null || _a === void 0 ? void 0 : _a.size) || 0);\r\n        }\r\n        var palette = getPalette(size, props);\r\n        legend = palette.legend;\r\n        var modelColor_1 = new Map();\r\n        for (var i = 0, il = models.length; i < il; ++i) {\r\n            var idx = ((_b = Model.TrajectoryInfo.get(models[i])) === null || _b === void 0 ? void 0 : _b.index) || 0;\r\n            modelColor_1.set(idx, palette.color(idx));\r\n        }\r\n        color = function (location) {\r\n            if (StructureElement.Location.is(location)) {\r\n                return modelColor_1.get(Model.TrajectoryInfo.get(location.unit.model).index);\r\n            }\r\n            else if (Bond.isLocation(location)) {\r\n                return modelColor_1.get(Model.TrajectoryInfo.get(location.aUnit.model).index);\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: ModelIndexColorTheme,\r\n        granularity: 'instance',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: legend\r\n    };\r\n}\r\nexport var ModelIndexColorThemeProvider = {\r\n    name: 'model-index',\r\n    label: 'Model Index',\r\n    category: \"Chain Property\" /* Chain */,\r\n    factory: ModelIndexColorTheme,\r\n    getParams: getModelIndexColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(ModelIndexColorThemeParams),\r\n    isApplicable: function (ctx) { return !!ctx.structure && ctx.structure.elementCount > 0 && Model.TrajectoryInfo.get(ctx.structure.models[0]).size > 1; }\r\n};\r\n//# sourceMappingURL=model-index.js.map"]},"metadata":{},"sourceType":"module"}