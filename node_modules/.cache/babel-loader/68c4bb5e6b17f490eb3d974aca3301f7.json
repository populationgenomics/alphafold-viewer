{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { ColumnHelpers } from '../../../../mol-data/db';\nimport { decode } from '../../../common/binary-cif';\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../../common/text/number-parser';\nexport function Field(column) {\n  var mask = column.mask ? decode(column.mask) : void 0;\n  var data = decode(column.data);\n  var isNumeric = ColumnHelpers.isTypedArray(data);\n  var str = isNumeric ? mask ? function (row) {\n    return mask[row] === 0\n    /* Present */\n    ? '' + data[row] : '';\n  } : function (row) {\n    return '' + data[row];\n  } : mask ? function (row) {\n    return mask[row] === 0\n    /* Present */\n    ? data[row] : '';\n  } : function (row) {\n    return data[row];\n  };\n  var int = isNumeric ? function (row) {\n    return data[row];\n  } : function (row) {\n    var v = data[row];\n    return fastParseInt(v, 0, v.length);\n  };\n  var float = isNumeric ? function (row) {\n    return data[row];\n  } : function (row) {\n    var v = data[row];\n    return fastParseFloat(v, 0, v.length);\n  };\n  var valueKind = mask ? function (row) {\n    return mask[row];\n  } : function (row) {\n    return 0\n    /* Present */\n    ;\n  };\n  var rowCount = data.length;\n  return {\n    __array: data,\n    binaryEncoding: column.data.encoding,\n    isDefined: true,\n    rowCount: rowCount,\n    str: str,\n    int: int,\n    float: float,\n    valueKind: valueKind,\n    areValuesEqual: function (rowA, rowB) {\n      return data[rowA] === data[rowB];\n    },\n    toStringArray: function (params) {\n      return ColumnHelpers.createAndFillArray(rowCount, str, params);\n    },\n    toIntArray: isNumeric ? function (params) {\n      return ColumnHelpers.typedArrayWindow(data, params);\n    } : function (params) {\n      return ColumnHelpers.createAndFillArray(rowCount, int, params);\n    },\n    toFloatArray: isNumeric ? function (params) {\n      return ColumnHelpers.typedArrayWindow(data, params);\n    } : function (params) {\n      return ColumnHelpers.createAndFillArray(rowCount, float, params);\n    }\n  };\n}","map":{"version":3,"sources":["../../../../../src/mol-io/reader/cif/binary/field.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { ColumnHelpers } from '../../../../mol-data/db';\r\nimport { decode } from '../../../common/binary-cif';\r\nimport { parseInt as fastParseInt, parseFloat as fastParseFloat } from '../../common/text/number-parser';\r\nexport function Field(column) {\r\n    var mask = column.mask ? decode(column.mask) : void 0;\r\n    var data = decode(column.data);\r\n    var isNumeric = ColumnHelpers.isTypedArray(data);\r\n    var str = isNumeric\r\n        ? mask\r\n            ? function (row) { return mask[row] === 0 /* Present */ ? '' + data[row] : ''; }\r\n            : function (row) { return '' + data[row]; }\r\n        : mask\r\n            ? function (row) { return mask[row] === 0 /* Present */ ? data[row] : ''; }\r\n            : function (row) { return data[row]; };\r\n    var int = isNumeric\r\n        ? function (row) { return data[row]; }\r\n        : function (row) { var v = data[row]; return fastParseInt(v, 0, v.length); };\r\n    var float = isNumeric\r\n        ? function (row) { return data[row]; }\r\n        : function (row) { var v = data[row]; return fastParseFloat(v, 0, v.length); };\r\n    var valueKind = mask\r\n        ? function (row) { return mask[row]; }\r\n        : function (row) { return 0 /* Present */; };\r\n    var rowCount = data.length;\r\n    return {\r\n        __array: data,\r\n        binaryEncoding: column.data.encoding,\r\n        isDefined: true,\r\n        rowCount: rowCount,\r\n        str: str,\r\n        int: int,\r\n        float: float,\r\n        valueKind: valueKind,\r\n        areValuesEqual: function (rowA, rowB) { return data[rowA] === data[rowB]; },\r\n        toStringArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, str, params); },\r\n        toIntArray: isNumeric\r\n            ? function (params) { return ColumnHelpers.typedArrayWindow(data, params); }\r\n            : function (params) { return ColumnHelpers.createAndFillArray(rowCount, int, params); },\r\n        toFloatArray: isNumeric\r\n            ? function (params) { return ColumnHelpers.typedArrayWindow(data, params); }\r\n            : function (params) { return ColumnHelpers.createAndFillArray(rowCount, float, params); }\r\n    };\r\n}\r\n//# sourceMappingURL=field.js.map"]},"metadata":{},"sourceType":"module"}