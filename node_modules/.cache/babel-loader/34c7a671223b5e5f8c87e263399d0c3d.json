{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { Unit, StructureElement, Structure } from '../../../../mol-model/structure';\nimport { EmptyLoci } from '../../../../mol-model/loci';\nimport { Interval, OrderedSet, SortedArray } from '../../../../mol-data/int';\nimport { Mesh } from '../../../../mol-geo/geometry/mesh/mesh';\nimport { sphereVertexCount } from '../../../../mol-geo/primitive/sphere';\nimport { MeshBuilder } from '../../../../mol-geo/geometry/mesh/mesh-builder';\nimport { addSphere } from '../../../../mol-geo/geometry/mesh/builder/sphere';\nimport { LocationIterator } from '../../../../mol-geo/util/location-iterator';\nimport { Spheres } from '../../../../mol-geo/geometry/spheres/spheres';\nimport { SpheresBuilder } from '../../../../mol-geo/geometry/spheres/spheres-builder';\nimport { isTrace, isH } from './common';\nimport { Sphere3D } from '../../../../mol-math/geometry'; // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\nvar v3add = Vec3.add;\nexport function makeElementIgnoreTest(structure, unit, props) {\n  var ignoreHydrogens = props.ignoreHydrogens,\n      traceOnly = props.traceOnly;\n  var atomicNumber = unit.model.atomicHierarchy.derived.atom.atomicNumber;\n  var isCoarse = Unit.isCoarse(unit);\n  var child = structure.child;\n  var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n  if (child && !childUnit) throw new Error('expected childUnit to exist if child exists');\n  if (!child && !ignoreHydrogens && !traceOnly) return;\n  return function (element) {\n    return !!childUnit && !SortedArray.has(childUnit.elements, element) || !isCoarse && ignoreHydrogens && isH(atomicNumber, element) || traceOnly && !isTrace(unit, element);\n  };\n}\nexport function createElementSphereMesh(ctx, unit, structure, theme, props, mesh) {\n  var child = structure.child;\n  var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n  if (child && !childUnit) return Mesh.createEmpty(mesh);\n  var detail = props.detail,\n      sizeFactor = props.sizeFactor;\n  var elements = unit.elements;\n  var elementCount = elements.length;\n  var vertexCount = elementCount * sphereVertexCount(detail);\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 2, mesh);\n  var v = Vec3();\n  var pos = unit.conformation.invariantPosition;\n  var ignore = makeElementIgnoreTest(structure, unit, props);\n  var l = StructureElement.Location.create(structure, unit);\n  var themeSize = theme.size.size;\n  var center = Vec3();\n  var maxSize = 0;\n  var count = 0;\n\n  for (var i = 0; i < elementCount; i++) {\n    if (ignore && ignore(elements[i])) continue;\n    l.element = elements[i];\n    pos(elements[i], v);\n    v3add(center, center, v);\n    count += 1;\n    builderState.currentGroup = i;\n    var size = themeSize(l);\n    if (size > maxSize) maxSize = size;\n    addSphere(builderState, v, size * sizeFactor, detail);\n  } // re-use boundingSphere if it has not changed much\n\n\n  var boundingSphere;\n  Vec3.scale(center, center, 1 / count);\n\n  if (mesh && Vec3.distance(center, mesh.boundingSphere.center) / mesh.boundingSphere.radius < 1.0) {\n    boundingSphere = Sphere3D.clone(mesh.boundingSphere);\n  } else {\n    boundingSphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, maxSize * sizeFactor + 0.05);\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  m.setBoundingSphere(boundingSphere);\n  return m;\n}\nexport function createElementSphereImpostor(ctx, unit, structure, theme, props, spheres) {\n  var child = structure.child;\n  var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\n  if (child && !childUnit) return Spheres.createEmpty(spheres);\n  var elements = unit.elements;\n  var elementCount = elements.length;\n  var builder = SpheresBuilder.create(elementCount, elementCount / 2, spheres);\n  var v = Vec3();\n  var pos = unit.conformation.invariantPosition;\n  var ignore = makeElementIgnoreTest(structure, unit, props);\n  var l = StructureElement.Location.create(structure, unit);\n  var themeSize = theme.size.size;\n  var center = Vec3();\n  var maxSize = 0;\n  var count = 0;\n\n  for (var i = 0; i < elementCount; i++) {\n    if (ignore === null || ignore === void 0 ? void 0 : ignore(elements[i])) continue;\n    pos(elements[i], v);\n    builder.add(v[0], v[1], v[2], i);\n    v3add(center, center, v);\n    count += 1;\n    l.element = elements[i];\n    var size = themeSize(l);\n    if (size > maxSize) maxSize = size;\n  } // re-use boundingSphere if it has not changed much\n\n\n  var boundingSphere;\n  Vec3.scale(center, center, 1 / count);\n\n  if (spheres && Vec3.distance(center, spheres.boundingSphere.center) / spheres.boundingSphere.radius < 1.0) {\n    boundingSphere = Sphere3D.clone(spheres.boundingSphere);\n  } else {\n    boundingSphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, maxSize * props.sizeFactor + 0.05);\n  }\n\n  var s = builder.getSpheres();\n  s.setBoundingSphere(boundingSphere);\n  return s;\n}\nexport function eachElement(loci, structureGroup, apply) {\n  var changed = false;\n  if (!StructureElement.Loci.is(loci)) return false;\n  var structure = structureGroup.structure,\n      group = structureGroup.group;\n  if (!Structure.areEquivalent(loci.structure, structure)) return false;\n  var elementCount = group.elements.length;\n  var unitIndexMap = group.unitIndexMap;\n\n  for (var _a = 0, _b = loci.elements; _a < _b.length; _a++) {\n    var e = _b[_a];\n    var unitIdx = unitIndexMap.get(e.unit.id);\n\n    if (unitIdx !== undefined) {\n      var offset = unitIdx * elementCount; // to target unit instance\n\n      if (Interval.is(e.indices)) {\n        var start = offset + Interval.start(e.indices);\n        var end = offset + Interval.end(e.indices);\n        if (apply(Interval.ofBounds(start, end))) changed = true;\n      } else {\n        for (var i = 0, _i = e.indices.length; i < _i; i++) {\n          var start = e.indices[i];\n          var endI = i + 1;\n\n          while (endI < _i && e.indices[endI] === start) endI++;\n\n          i = endI - 1;\n          var end = e.indices[i];\n          changed = apply(Interval.ofRange(offset + start, offset + end)) || changed;\n        }\n      }\n    }\n  }\n\n  return changed;\n}\nexport function getElementLoci(pickingId, structureGroup, id) {\n  var objectId = pickingId.objectId,\n      instanceId = pickingId.instanceId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var structure = structureGroup.structure,\n        group = structureGroup.group;\n    var unit = group.units[instanceId];\n    var indices = OrderedSet.ofSingleton(groupId);\n    return StructureElement.Loci(structure.target, [{\n      unit: unit,\n      indices: indices\n    }]);\n  }\n\n  return EmptyLoci;\n} //\n\nexport function eachSerialElement(loci, structure, apply) {\n  var changed = false;\n  if (!StructureElement.Loci.is(loci)) return false;\n  if (!Structure.areEquivalent(loci.structure, structure)) return false;\n  var cumulativeUnitElementCount = structure.serialMapping.cumulativeUnitElementCount;\n\n  for (var _a = 0, _b = loci.elements; _a < _b.length; _a++) {\n    var e = _b[_a];\n    var unitIdx = structure.unitIndexMap.get(e.unit.id);\n\n    if (unitIdx !== undefined) {\n      if (Interval.is(e.indices)) {\n        var start = cumulativeUnitElementCount[unitIdx] + Interval.start(e.indices);\n        var end = cumulativeUnitElementCount[unitIdx] + Interval.end(e.indices);\n        if (apply(Interval.ofBounds(start, end))) changed = true;\n      } else {\n        for (var i = 0, _i = e.indices.length; i < _i; i++) {\n          var idx = cumulativeUnitElementCount[unitIdx] + e.indices[i];\n          if (apply(Interval.ofSingleton(idx))) changed = true;\n        }\n      }\n    }\n  }\n\n  return changed;\n}\nexport function getSerialElementLoci(pickingId, structure, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    var _a = structure.serialMapping,\n        unitIndices = _a.unitIndices,\n        cumulativeUnitElementCount = _a.cumulativeUnitElementCount;\n    var unitIdx = unitIndices[groupId];\n    var unit = structure.units[unitIdx];\n    var idx = groupId - cumulativeUnitElementCount[unitIdx];\n    var indices = OrderedSet.ofSingleton(idx);\n    return StructureElement.Loci(structure, [{\n      unit: unit,\n      indices: indices\n    }]);\n  }\n\n  return EmptyLoci;\n} //\n\nexport var ElementIterator;\n\n(function (ElementIterator) {\n  function fromGroup(structureGroup) {\n    var group = structureGroup.group,\n        structure = structureGroup.structure;\n    var groupCount = group.elements.length;\n    var instanceCount = group.units.length;\n    var location = StructureElement.Location.create(structure);\n\n    var getLocation = function (groupIndex, instanceIndex) {\n      var unit = group.units[instanceIndex];\n      location.unit = unit;\n      location.element = unit.elements[groupIndex];\n      return location;\n    };\n\n    return LocationIterator(groupCount, instanceCount, 1, getLocation);\n  }\n\n  ElementIterator.fromGroup = fromGroup;\n\n  function fromStructure(structure) {\n    var units = structure.units,\n        elementCount = structure.elementCount;\n    var groupCount = elementCount;\n    var instanceCount = 1;\n    var _a = structure.serialMapping,\n        unitIndices = _a.unitIndices,\n        elementIndices = _a.elementIndices;\n    var location = StructureElement.Location.create(structure);\n\n    var getLocation = function (groupIndex) {\n      location.unit = units[unitIndices[groupIndex]];\n      location.element = elementIndices[groupIndex];\n      return location;\n    };\n\n    return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\n  }\n\n  ElementIterator.fromStructure = fromStructure;\n})(ElementIterator || (ElementIterator = {}));","map":{"version":3,"sources":["../../../../../src/mol-repr/structure/visual/util/element.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { Unit, StructureElement, Structure } from '../../../../mol-model/structure';\r\nimport { EmptyLoci } from '../../../../mol-model/loci';\r\nimport { Interval, OrderedSet, SortedArray } from '../../../../mol-data/int';\r\nimport { Mesh } from '../../../../mol-geo/geometry/mesh/mesh';\r\nimport { sphereVertexCount } from '../../../../mol-geo/primitive/sphere';\r\nimport { MeshBuilder } from '../../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { addSphere } from '../../../../mol-geo/geometry/mesh/builder/sphere';\r\nimport { LocationIterator } from '../../../../mol-geo/util/location-iterator';\r\nimport { Spheres } from '../../../../mol-geo/geometry/spheres/spheres';\r\nimport { SpheresBuilder } from '../../../../mol-geo/geometry/spheres/spheres-builder';\r\nimport { isTrace, isH } from './common';\r\nimport { Sphere3D } from '../../../../mol-math/geometry';\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3add = Vec3.add;\r\nexport function makeElementIgnoreTest(structure, unit, props) {\r\n    var ignoreHydrogens = props.ignoreHydrogens, traceOnly = props.traceOnly;\r\n    var atomicNumber = unit.model.atomicHierarchy.derived.atom.atomicNumber;\r\n    var isCoarse = Unit.isCoarse(unit);\r\n    var child = structure.child;\r\n    var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n    if (child && !childUnit)\r\n        throw new Error('expected childUnit to exist if child exists');\r\n    if (!child && !ignoreHydrogens && !traceOnly)\r\n        return;\r\n    return function (element) {\r\n        return ((!!childUnit && !SortedArray.has(childUnit.elements, element)) ||\r\n            (!isCoarse && ignoreHydrogens && isH(atomicNumber, element)) ||\r\n            (traceOnly && !isTrace(unit, element)));\r\n    };\r\n}\r\nexport function createElementSphereMesh(ctx, unit, structure, theme, props, mesh) {\r\n    var child = structure.child;\r\n    var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n    if (child && !childUnit)\r\n        return Mesh.createEmpty(mesh);\r\n    var detail = props.detail, sizeFactor = props.sizeFactor;\r\n    var elements = unit.elements;\r\n    var elementCount = elements.length;\r\n    var vertexCount = elementCount * sphereVertexCount(detail);\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 2, mesh);\r\n    var v = Vec3();\r\n    var pos = unit.conformation.invariantPosition;\r\n    var ignore = makeElementIgnoreTest(structure, unit, props);\r\n    var l = StructureElement.Location.create(structure, unit);\r\n    var themeSize = theme.size.size;\r\n    var center = Vec3();\r\n    var maxSize = 0;\r\n    var count = 0;\r\n    for (var i = 0; i < elementCount; i++) {\r\n        if (ignore && ignore(elements[i]))\r\n            continue;\r\n        l.element = elements[i];\r\n        pos(elements[i], v);\r\n        v3add(center, center, v);\r\n        count += 1;\r\n        builderState.currentGroup = i;\r\n        var size = themeSize(l);\r\n        if (size > maxSize)\r\n            maxSize = size;\r\n        addSphere(builderState, v, size * sizeFactor, detail);\r\n    }\r\n    // re-use boundingSphere if it has not changed much\r\n    var boundingSphere;\r\n    Vec3.scale(center, center, 1 / count);\r\n    if (mesh && Vec3.distance(center, mesh.boundingSphere.center) / mesh.boundingSphere.radius < 1.0) {\r\n        boundingSphere = Sphere3D.clone(mesh.boundingSphere);\r\n    }\r\n    else {\r\n        boundingSphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, maxSize * sizeFactor + 0.05);\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    m.setBoundingSphere(boundingSphere);\r\n    return m;\r\n}\r\nexport function createElementSphereImpostor(ctx, unit, structure, theme, props, spheres) {\r\n    var child = structure.child;\r\n    var childUnit = child === null || child === void 0 ? void 0 : child.unitMap.get(unit.id);\r\n    if (child && !childUnit)\r\n        return Spheres.createEmpty(spheres);\r\n    var elements = unit.elements;\r\n    var elementCount = elements.length;\r\n    var builder = SpheresBuilder.create(elementCount, elementCount / 2, spheres);\r\n    var v = Vec3();\r\n    var pos = unit.conformation.invariantPosition;\r\n    var ignore = makeElementIgnoreTest(structure, unit, props);\r\n    var l = StructureElement.Location.create(structure, unit);\r\n    var themeSize = theme.size.size;\r\n    var center = Vec3();\r\n    var maxSize = 0;\r\n    var count = 0;\r\n    for (var i = 0; i < elementCount; i++) {\r\n        if (ignore === null || ignore === void 0 ? void 0 : ignore(elements[i]))\r\n            continue;\r\n        pos(elements[i], v);\r\n        builder.add(v[0], v[1], v[2], i);\r\n        v3add(center, center, v);\r\n        count += 1;\r\n        l.element = elements[i];\r\n        var size = themeSize(l);\r\n        if (size > maxSize)\r\n            maxSize = size;\r\n    }\r\n    // re-use boundingSphere if it has not changed much\r\n    var boundingSphere;\r\n    Vec3.scale(center, center, 1 / count);\r\n    if (spheres && Vec3.distance(center, spheres.boundingSphere.center) / spheres.boundingSphere.radius < 1.0) {\r\n        boundingSphere = Sphere3D.clone(spheres.boundingSphere);\r\n    }\r\n    else {\r\n        boundingSphere = Sphere3D.expand(Sphere3D(), (childUnit !== null && childUnit !== void 0 ? childUnit : unit).boundary.sphere, maxSize * props.sizeFactor + 0.05);\r\n    }\r\n    var s = builder.getSpheres();\r\n    s.setBoundingSphere(boundingSphere);\r\n    return s;\r\n}\r\nexport function eachElement(loci, structureGroup, apply) {\r\n    var changed = false;\r\n    if (!StructureElement.Loci.is(loci))\r\n        return false;\r\n    var structure = structureGroup.structure, group = structureGroup.group;\r\n    if (!Structure.areEquivalent(loci.structure, structure))\r\n        return false;\r\n    var elementCount = group.elements.length;\r\n    var unitIndexMap = group.unitIndexMap;\r\n    for (var _a = 0, _b = loci.elements; _a < _b.length; _a++) {\r\n        var e = _b[_a];\r\n        var unitIdx = unitIndexMap.get(e.unit.id);\r\n        if (unitIdx !== undefined) {\r\n            var offset = unitIdx * elementCount; // to target unit instance\r\n            if (Interval.is(e.indices)) {\r\n                var start = offset + Interval.start(e.indices);\r\n                var end = offset + Interval.end(e.indices);\r\n                if (apply(Interval.ofBounds(start, end)))\r\n                    changed = true;\r\n            }\r\n            else {\r\n                for (var i = 0, _i = e.indices.length; i < _i; i++) {\r\n                    var start = e.indices[i];\r\n                    var endI = i + 1;\r\n                    while (endI < _i && e.indices[endI] === start)\r\n                        endI++;\r\n                    i = endI - 1;\r\n                    var end = e.indices[i];\r\n                    changed = apply(Interval.ofRange(offset + start, offset + end)) || changed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return changed;\r\n}\r\nexport function getElementLoci(pickingId, structureGroup, id) {\r\n    var objectId = pickingId.objectId, instanceId = pickingId.instanceId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var structure = structureGroup.structure, group = structureGroup.group;\r\n        var unit = group.units[instanceId];\r\n        var indices = OrderedSet.ofSingleton(groupId);\r\n        return StructureElement.Loci(structure.target, [{ unit: unit, indices: indices }]);\r\n    }\r\n    return EmptyLoci;\r\n}\r\n//\r\nexport function eachSerialElement(loci, structure, apply) {\r\n    var changed = false;\r\n    if (!StructureElement.Loci.is(loci))\r\n        return false;\r\n    if (!Structure.areEquivalent(loci.structure, structure))\r\n        return false;\r\n    var cumulativeUnitElementCount = structure.serialMapping.cumulativeUnitElementCount;\r\n    for (var _a = 0, _b = loci.elements; _a < _b.length; _a++) {\r\n        var e = _b[_a];\r\n        var unitIdx = structure.unitIndexMap.get(e.unit.id);\r\n        if (unitIdx !== undefined) {\r\n            if (Interval.is(e.indices)) {\r\n                var start = cumulativeUnitElementCount[unitIdx] + Interval.start(e.indices);\r\n                var end = cumulativeUnitElementCount[unitIdx] + Interval.end(e.indices);\r\n                if (apply(Interval.ofBounds(start, end)))\r\n                    changed = true;\r\n            }\r\n            else {\r\n                for (var i = 0, _i = e.indices.length; i < _i; i++) {\r\n                    var idx = cumulativeUnitElementCount[unitIdx] + e.indices[i];\r\n                    if (apply(Interval.ofSingleton(idx)))\r\n                        changed = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return changed;\r\n}\r\nexport function getSerialElementLoci(pickingId, structure, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        var _a = structure.serialMapping, unitIndices = _a.unitIndices, cumulativeUnitElementCount = _a.cumulativeUnitElementCount;\r\n        var unitIdx = unitIndices[groupId];\r\n        var unit = structure.units[unitIdx];\r\n        var idx = groupId - cumulativeUnitElementCount[unitIdx];\r\n        var indices = OrderedSet.ofSingleton(idx);\r\n        return StructureElement.Loci(structure, [{ unit: unit, indices: indices }]);\r\n    }\r\n    return EmptyLoci;\r\n}\r\n//\r\nexport var ElementIterator;\r\n(function (ElementIterator) {\r\n    function fromGroup(structureGroup) {\r\n        var group = structureGroup.group, structure = structureGroup.structure;\r\n        var groupCount = group.elements.length;\r\n        var instanceCount = group.units.length;\r\n        var location = StructureElement.Location.create(structure);\r\n        var getLocation = function (groupIndex, instanceIndex) {\r\n            var unit = group.units[instanceIndex];\r\n            location.unit = unit;\r\n            location.element = unit.elements[groupIndex];\r\n            return location;\r\n        };\r\n        return LocationIterator(groupCount, instanceCount, 1, getLocation);\r\n    }\r\n    ElementIterator.fromGroup = fromGroup;\r\n    function fromStructure(structure) {\r\n        var units = structure.units, elementCount = structure.elementCount;\r\n        var groupCount = elementCount;\r\n        var instanceCount = 1;\r\n        var _a = structure.serialMapping, unitIndices = _a.unitIndices, elementIndices = _a.elementIndices;\r\n        var location = StructureElement.Location.create(structure);\r\n        var getLocation = function (groupIndex) {\r\n            location.unit = units[unitIndices[groupIndex]];\r\n            location.element = elementIndices[groupIndex];\r\n            return location;\r\n        };\r\n        return LocationIterator(groupCount, instanceCount, 1, getLocation, true);\r\n    }\r\n    ElementIterator.fromStructure = fromStructure;\r\n})(ElementIterator || (ElementIterator = {}));\r\n//# sourceMappingURL=element.js.map"]},"metadata":{},"sourceType":"module"}