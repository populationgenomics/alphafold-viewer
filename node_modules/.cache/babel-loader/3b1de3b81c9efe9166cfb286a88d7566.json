{"ast":null,"code":"/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from NGL.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { Tokenizer } from '../common/text/tokenizer';\nimport { Column } from '../../../mol-data/db';\nimport { Task, chunkedSubtask } from '../../../mol-task';\nimport { ReaderResult as Result } from '../result';\nimport { parseFloat as fastParseFloat } from '../common/text/number-parser';\nvar bohrToAngstromFactor = 0.529177210859;\n\nfunction readHeader(tokenizer) {\n  var headerLines = Tokenizer.readLines(tokenizer, 6);\n\n  var h = function (k, l) {\n    var field = +headerLines[k].trim().split(/\\s+/g)[l];\n    return Number.isNaN(field) ? 0 : field;\n  };\n\n  var basis = function (i) {\n    var n = h(i + 2, 0);\n    var s = bohrToAngstromFactor;\n    return [Math.abs(n), Vec3.create(h(i + 2, 1) * s, h(i + 2, 2) * s, h(i + 2, 3) * s), n];\n  };\n\n  var comment1 = headerLines[0].trim();\n  var comment2 = headerLines[1].trim();\n\n  var _a = basis(0),\n      atomCount = _a[0],\n      origin = _a[1],\n      rawAtomCount = _a[2];\n\n  var _b = basis(1),\n      NVX = _b[0],\n      basisX = _b[1];\n\n  var _c = basis(2),\n      NVY = _c[0],\n      basisY = _c[1];\n\n  var _d = basis(3),\n      NVZ = _d[0],\n      basisZ = _d[1];\n\n  var atoms = readAtoms(tokenizer, atomCount, bohrToAngstromFactor);\n  var dataSetIds = [];\n\n  if (rawAtomCount >= 0) {\n    var nVal = h(2, 4);\n    if (nVal === 0) nVal = 1;\n\n    for (var i = 0; i < nVal; i++) dataSetIds.push(i);\n  } else {\n    var counts = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\n\n    for (var i = 0, _i = +counts[0]; i < _i; i++) dataSetIds.push(+counts[i + 1]);\n  }\n\n  var header = {\n    orbitals: rawAtomCount < 0,\n    comment1: comment1,\n    comment2: comment2,\n    atomCount: atomCount,\n    origin: origin,\n    dim: Vec3.create(NVX, NVY, NVZ),\n    basisX: basisX,\n    basisY: basisY,\n    basisZ: basisZ,\n    dataSetIds: dataSetIds\n  };\n  return {\n    header: header,\n    atoms: atoms\n  };\n}\n\nfunction readAtoms(tokenizer, count, scaleFactor) {\n  var number = new Int32Array(count);\n  var value = new Float64Array(count);\n  var x = new Float32Array(count);\n  var y = new Float32Array(count);\n  var z = new Float32Array(count);\n\n  for (var i = 0; i < count; i++) {\n    var fields = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\n    number[i] = +fields[0];\n    value[i] = +fields[1];\n    x[i] = +fields[2] * scaleFactor;\n    y[i] = +fields[3] * scaleFactor;\n    z[i] = +fields[4] * scaleFactor;\n  }\n\n  return {\n    count: count,\n    number: Column.ofArray({\n      array: number,\n      schema: Column.Schema.int\n    }),\n    nuclearCharge: Column.ofArray({\n      array: value,\n      schema: Column.Schema.float\n    }),\n    x: Column.ofArray({\n      array: x,\n      schema: Column.Schema.float\n    }),\n    y: Column.ofArray({\n      array: y,\n      schema: Column.Schema.float\n    }),\n    z: Column.ofArray({\n      array: z,\n      schema: Column.Schema.float\n    })\n  };\n}\n\nfunction readValues(ctx, tokenizer, header) {\n  var N = header.dim[0] * header.dim[1] * header.dim[2] * header.dataSetIds.length;\n  var chunkSize = 100 * 100 * 100;\n  var data = new Float64Array(N);\n  var offset = 0;\n  return chunkedSubtask(ctx, chunkSize, data, function (count, data) {\n    var max = Math.min(N, offset + count);\n\n    for (var i = offset; i < max; i++) {\n      Tokenizer.skipWhitespace(tokenizer);\n      tokenizer.tokenStart = tokenizer.position;\n      Tokenizer.eatValue(tokenizer);\n      data[i] = fastParseFloat(tokenizer.data, tokenizer.tokenStart, tokenizer.tokenEnd);\n    }\n\n    offset = max;\n    return max === N ? 0 : chunkSize;\n  }, function (ctx, _, i) {\n    return ctx.update({\n      current: Math.min(i, N),\n      max: N\n    });\n  });\n}\n\nexport function parseCube(data, name) {\n  var _this = this;\n\n  return Task.create('Parse Cube', function (taskCtx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var tokenizer, _a, header, atoms, values;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , taskCtx.update('Reading header...')];\n\n          case 1:\n            _b.sent();\n\n            tokenizer = Tokenizer(data);\n            _a = readHeader(tokenizer), header = _a.header, atoms = _a.atoms;\n            return [4\n            /*yield*/\n            , readValues(taskCtx, tokenizer, header)];\n\n          case 2:\n            values = _b.sent();\n            return [2\n            /*return*/\n            , Result.success({\n              header: header,\n              atoms: atoms,\n              values: values,\n              name: name\n            })];\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/cube/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * Adapted from NGL.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { Tokenizer } from '../common/text/tokenizer';\r\nimport { Column } from '../../../mol-data/db';\r\nimport { Task, chunkedSubtask } from '../../../mol-task';\r\nimport { ReaderResult as Result } from '../result';\r\nimport { parseFloat as fastParseFloat } from '../common/text/number-parser';\r\nvar bohrToAngstromFactor = 0.529177210859;\r\nfunction readHeader(tokenizer) {\r\n    var headerLines = Tokenizer.readLines(tokenizer, 6);\r\n    var h = function (k, l) {\r\n        var field = +headerLines[k].trim().split(/\\s+/g)[l];\r\n        return Number.isNaN(field) ? 0 : field;\r\n    };\r\n    var basis = function (i) {\r\n        var n = h(i + 2, 0);\r\n        var s = bohrToAngstromFactor;\r\n        return [Math.abs(n), Vec3.create(h(i + 2, 1) * s, h(i + 2, 2) * s, h(i + 2, 3) * s), n];\r\n    };\r\n    var comment1 = headerLines[0].trim();\r\n    var comment2 = headerLines[1].trim();\r\n    var _a = basis(0), atomCount = _a[0], origin = _a[1], rawAtomCount = _a[2];\r\n    var _b = basis(1), NVX = _b[0], basisX = _b[1];\r\n    var _c = basis(2), NVY = _c[0], basisY = _c[1];\r\n    var _d = basis(3), NVZ = _d[0], basisZ = _d[1];\r\n    var atoms = readAtoms(tokenizer, atomCount, bohrToAngstromFactor);\r\n    var dataSetIds = [];\r\n    if (rawAtomCount >= 0) {\r\n        var nVal = h(2, 4);\r\n        if (nVal === 0)\r\n            nVal = 1;\r\n        for (var i = 0; i < nVal; i++)\r\n            dataSetIds.push(i);\r\n    }\r\n    else {\r\n        var counts = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\r\n        for (var i = 0, _i = +counts[0]; i < _i; i++)\r\n            dataSetIds.push(+counts[i + 1]);\r\n    }\r\n    var header = { orbitals: rawAtomCount < 0, comment1: comment1, comment2: comment2, atomCount: atomCount, origin: origin, dim: Vec3.create(NVX, NVY, NVZ), basisX: basisX, basisY: basisY, basisZ: basisZ, dataSetIds: dataSetIds };\r\n    return { header: header, atoms: atoms };\r\n}\r\nfunction readAtoms(tokenizer, count, scaleFactor) {\r\n    var number = new Int32Array(count);\r\n    var value = new Float64Array(count);\r\n    var x = new Float32Array(count);\r\n    var y = new Float32Array(count);\r\n    var z = new Float32Array(count);\r\n    for (var i = 0; i < count; i++) {\r\n        var fields = Tokenizer.readLine(tokenizer).trim().split(/\\s+/g);\r\n        number[i] = +fields[0];\r\n        value[i] = +fields[1];\r\n        x[i] = +fields[2] * scaleFactor;\r\n        y[i] = +fields[3] * scaleFactor;\r\n        z[i] = +fields[4] * scaleFactor;\r\n    }\r\n    return {\r\n        count: count,\r\n        number: Column.ofArray({ array: number, schema: Column.Schema.int }),\r\n        nuclearCharge: Column.ofArray({ array: value, schema: Column.Schema.float }),\r\n        x: Column.ofArray({ array: x, schema: Column.Schema.float }),\r\n        y: Column.ofArray({ array: y, schema: Column.Schema.float }),\r\n        z: Column.ofArray({ array: z, schema: Column.Schema.float })\r\n    };\r\n}\r\nfunction readValues(ctx, tokenizer, header) {\r\n    var N = header.dim[0] * header.dim[1] * header.dim[2] * header.dataSetIds.length;\r\n    var chunkSize = 100 * 100 * 100;\r\n    var data = new Float64Array(N);\r\n    var offset = 0;\r\n    return chunkedSubtask(ctx, chunkSize, data, function (count, data) {\r\n        var max = Math.min(N, offset + count);\r\n        for (var i = offset; i < max; i++) {\r\n            Tokenizer.skipWhitespace(tokenizer);\r\n            tokenizer.tokenStart = tokenizer.position;\r\n            Tokenizer.eatValue(tokenizer);\r\n            data[i] = fastParseFloat(tokenizer.data, tokenizer.tokenStart, tokenizer.tokenEnd);\r\n        }\r\n        offset = max;\r\n        return max === N ? 0 : chunkSize;\r\n    }, function (ctx, _, i) { return ctx.update({ current: Math.min(i, N), max: N }); });\r\n}\r\nexport function parseCube(data, name) {\r\n    var _this = this;\r\n    return Task.create('Parse Cube', function (taskCtx) { return __awaiter(_this, void 0, void 0, function () {\r\n        var tokenizer, _a, header, atoms, values;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, taskCtx.update('Reading header...')];\r\n                case 1:\r\n                    _b.sent();\r\n                    tokenizer = Tokenizer(data);\r\n                    _a = readHeader(tokenizer), header = _a.header, atoms = _a.atoms;\r\n                    return [4 /*yield*/, readValues(taskCtx, tokenizer, header)];\r\n                case 2:\r\n                    values = _b.sent();\r\n                    return [2 /*return*/, Result.success({ header: header, atoms: atoms, values: values, name: name })];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}