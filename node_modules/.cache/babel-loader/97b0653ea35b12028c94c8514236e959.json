{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { Unit } from '../../../mol-model/structure';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { Segmentation } from '../../../mol-data/int';\nimport { isNucleic, isPurineBase, isPyrimidineBase } from '../../../mol-model/structure/model/types';\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\nimport { NucleotideLocationIterator, getNucleotideElementLoci, eachNucleotideElement } from './util/nucleotide';\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\nimport { Sphere3D } from '../../../mol-math/geometry'; // TODO support rings for multiple locations (including from microheterogeneity)\n\nvar pTrace = Vec3.zero();\nvar pN1 = Vec3.zero();\nvar pC2 = Vec3.zero();\nvar pN3 = Vec3.zero();\nvar pC4 = Vec3.zero();\nvar pC5 = Vec3.zero();\nvar pC6 = Vec3.zero();\nvar pN7 = Vec3.zero();\nvar pC8 = Vec3.zero();\nvar pN9 = Vec3.zero();\nvar normal = Vec3.zero();\nexport var NucleotideRingMeshParams = {\n  sizeFactor: PD.Numeric(0.2, {\n    min: 0,\n    max: 10,\n    step: 0.01\n  }),\n  radialSegments: PD.Numeric(16, {\n    min: 2,\n    max: 56,\n    step: 2\n  }, BaseGeometry.CustomQualityParamInfo),\n  detail: PD.Numeric(0, {\n    min: 0,\n    max: 3,\n    step: 1\n  }, BaseGeometry.CustomQualityParamInfo)\n};\nexport var DefaultNucleotideRingMeshProps = PD.getDefaultValues(NucleotideRingMeshParams);\nvar positionsRing5_6 = new Float32Array(2 * 9 * 3);\nvar stripIndicesRing5_6 = new Uint32Array([0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 14, 15, 12, 13, 8, 9, 10, 11, 0, 1]);\nvar fanIndicesTopRing5_6 = new Uint32Array([8, 12, 14, 16, 6, 4, 2, 0, 10]);\nvar fanIndicesBottomRing5_6 = new Uint32Array([9, 11, 1, 3, 5, 7, 17, 15, 13]);\nvar positionsRing6 = new Float32Array(2 * 6 * 3);\nvar stripIndicesRing6 = new Uint32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1]);\nvar fanIndicesTopRing6 = new Uint32Array([0, 10, 8, 6, 4, 2]);\nvar fanIndicesBottomRing6 = new Uint32Array([1, 3, 5, 7, 9, 11]);\nvar tmpShiftV = Vec3.zero();\n\nfunction shiftPositions(out, dir) {\n  var positions = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    positions[_i - 2] = arguments[_i];\n  }\n\n  for (var i = 0, il = positions.length; i < il; ++i) {\n    var v = positions[i];\n    Vec3.toArray(Vec3.add(tmpShiftV, v, dir), out, i * 2 * 3);\n    Vec3.toArray(Vec3.sub(tmpShiftV, v, dir), out, (i * 2 + 1) * 3);\n  }\n}\n\nfunction createNucleotideRingMesh(ctx, unit, structure, theme, props, mesh) {\n  if (!Unit.isAtomic(unit)) return Mesh.createEmpty(mesh);\n  var nucleotideElementCount = unit.nucleotideElements.length;\n  if (!nucleotideElementCount) return Mesh.createEmpty(mesh);\n  var sizeFactor = props.sizeFactor,\n      radialSegments = props.radialSegments,\n      detail = props.detail;\n  var vertexCount = nucleotideElementCount * (26 + radialSegments * 2);\n  var builderState = MeshBuilder.createState(vertexCount, vertexCount / 4, mesh);\n  var elements = unit.elements,\n      model = unit.model;\n  var _a = model.atomicHierarchy,\n      chainAtomSegments = _a.chainAtomSegments,\n      residueAtomSegments = _a.residueAtomSegments,\n      atoms = _a.atoms,\n      atomicIndex = _a.index;\n  var _b = model.atomicHierarchy.derived.residue,\n      moleculeType = _b.moleculeType,\n      traceElementIndex = _b.traceElementIndex;\n  var label_comp_id = atoms.label_comp_id;\n  var pos = unit.conformation.invariantPosition;\n  var chainIt = Segmentation.transientSegments(chainAtomSegments, elements);\n  var residueIt = Segmentation.transientSegments(residueAtomSegments, elements);\n  var radius = 1 * sizeFactor;\n  var halfThickness = 1.25 * sizeFactor;\n  var cylinderProps = {\n    radiusTop: 1 * sizeFactor,\n    radiusBottom: 1 * sizeFactor,\n    radialSegments: radialSegments\n  };\n  var i = 0;\n\n  while (chainIt.hasNext) {\n    residueIt.setSegment(chainIt.move());\n\n    while (residueIt.hasNext) {\n      var residueIndex = residueIt.move().index;\n\n      if (isNucleic(moleculeType[residueIndex])) {\n        var compId = label_comp_id.value(residueAtomSegments.offsets[residueIndex]);\n        var idxTrace = -1,\n            idxN1 = -1,\n            idxC2 = -1,\n            idxN3 = -1,\n            idxC4 = -1,\n            idxC5 = -1,\n            idxC6 = -1,\n            idxN7 = -1,\n            idxC8 = -1,\n            idxN9 = -1;\n        builderState.currentGroup = i;\n        var isPurine = isPurineBase(compId);\n        var isPyrimidine = isPyrimidineBase(compId);\n\n        if (!isPurine && !isPyrimidine) {\n          // detect Purine or Pyrimidin based on geometry\n          var idxC4_1 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          var idxN9_1 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\n\n          if (idxC4_1 !== -1 && idxN9_1 !== -1 && Vec3.distance(pos(idxC4_1, pC4), pos(idxN9_1, pN9)) < 1.6) {\n            isPurine = true;\n          } else {\n            isPyrimidine = true;\n          }\n        }\n\n        if (isPurine) {\n          idxTrace = traceElementIndex[residueIndex];\n          idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\n          idxC2 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\n          idxN3 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\n          idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'C5');\n\n          if (idxC5 === -1) {\n            // modified ring, e.g. DP\n            idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'N5');\n          }\n\n          idxC6 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\n          idxN7 = atomicIndex.findAtomOnResidue(residueIndex, 'N7');\n\n          if (idxN7 === -1) {\n            // modified ring, e.g. DP\n            idxN7 = atomicIndex.findAtomOnResidue(residueIndex, 'C7');\n          }\n\n          idxC8 = atomicIndex.findAtomOnResidue(residueIndex, 'C8');\n          idxN9 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\n\n          if (idxN9 !== -1 && idxTrace !== -1) {\n            pos(idxN9, pN9);\n            pos(idxTrace, pTrace);\n            builderState.currentGroup = i;\n            addCylinder(builderState, pN9, pTrace, 1, cylinderProps);\n            addSphere(builderState, pN9, radius, detail);\n          }\n\n          if (idxN1 !== -1 && idxC2 !== -1 && idxN3 !== -1 && idxC4 !== -1 && idxC5 !== -1 && idxC6 !== -1 && idxN7 !== -1 && idxC8 !== -1 && idxN9 !== -1) {\n            pos(idxN1, pN1);\n            pos(idxC2, pC2);\n            pos(idxN3, pN3);\n            pos(idxC4, pC4);\n            pos(idxC5, pC5);\n            pos(idxC6, pC6);\n            pos(idxN7, pN7);\n            pos(idxC8, pC8);\n            Vec3.triangleNormal(normal, pN1, pC4, pC5);\n            Vec3.scale(normal, normal, halfThickness);\n            shiftPositions(positionsRing5_6, normal, pN1, pC2, pN3, pC4, pC5, pC6, pN7, pC8, pN9);\n            MeshBuilder.addTriangleStrip(builderState, positionsRing5_6, stripIndicesRing5_6);\n            MeshBuilder.addTriangleFan(builderState, positionsRing5_6, fanIndicesTopRing5_6);\n            MeshBuilder.addTriangleFan(builderState, positionsRing5_6, fanIndicesBottomRing5_6);\n          }\n        } else if (isPyrimidine) {\n          idxTrace = traceElementIndex[residueIndex];\n          idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\n\n          if (idxN1 === -1) {\n            // modified ring, e.g. DZ\n            idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'C1');\n          }\n\n          idxC2 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\n          idxN3 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\n          idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\n          idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'C5');\n          idxC6 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\n\n          if (idxN1 !== -1 && idxTrace !== -1) {\n            pos(idxN1, pN1);\n            pos(idxTrace, pTrace);\n            builderState.currentGroup = i;\n            addCylinder(builderState, pN1, pTrace, 1, cylinderProps);\n            addSphere(builderState, pN1, radius, detail);\n          }\n\n          if (idxN1 !== -1 && idxC2 !== -1 && idxN3 !== -1 && idxC4 !== -1 && idxC5 !== -1 && idxC6 !== -1) {\n            pos(idxC2, pC2);\n            pos(idxN3, pN3);\n            pos(idxC4, pC4);\n            pos(idxC5, pC5);\n            pos(idxC6, pC6);\n            Vec3.triangleNormal(normal, pN1, pC4, pC5);\n            Vec3.scale(normal, normal, halfThickness);\n            shiftPositions(positionsRing6, normal, pN1, pC2, pN3, pC4, pC5, pC6);\n            MeshBuilder.addTriangleStrip(builderState, positionsRing6, stripIndicesRing6);\n            MeshBuilder.addTriangleFan(builderState, positionsRing6, fanIndicesTopRing6);\n            MeshBuilder.addTriangleFan(builderState, positionsRing6, fanIndicesBottomRing6);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n  var m = MeshBuilder.getMesh(builderState);\n  var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\n  m.setBoundingSphere(sphere);\n  return m;\n}\n\nexport var NucleotideRingParams = __assign(__assign({}, UnitsMeshParams), NucleotideRingMeshParams);\nexport function NucleotideRingVisual(materialId) {\n  return UnitsMeshVisual({\n    defaultProps: PD.getDefaultValues(NucleotideRingParams),\n    createGeometry: createNucleotideRingMesh,\n    createLocationIterator: NucleotideLocationIterator.fromGroup,\n    getLoci: getNucleotideElementLoci,\n    eachLocation: eachNucleotideElement,\n    setUpdateState: function (state, newProps, currentProps) {\n      state.createGeometry = newProps.sizeFactor !== currentProps.sizeFactor || newProps.radialSegments !== currentProps.radialSegments;\n    }\n  }, materialId);\n}","map":{"version":3,"sources":["../../../../src/mol-repr/structure/visual/nucleotide-ring-mesh.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { Unit } from '../../../mol-model/structure';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { Segmentation } from '../../../mol-data/int';\r\nimport { isNucleic, isPurineBase, isPyrimidineBase } from '../../../mol-model/structure/model/types';\r\nimport { addCylinder } from '../../../mol-geo/geometry/mesh/builder/cylinder';\r\nimport { addSphere } from '../../../mol-geo/geometry/mesh/builder/sphere';\r\nimport { UnitsMeshParams, UnitsMeshVisual } from '../units-visual';\r\nimport { NucleotideLocationIterator, getNucleotideElementLoci, eachNucleotideElement } from './util/nucleotide';\r\nimport { BaseGeometry } from '../../../mol-geo/geometry/base';\r\nimport { Sphere3D } from '../../../mol-math/geometry';\r\n// TODO support rings for multiple locations (including from microheterogeneity)\r\nvar pTrace = Vec3.zero();\r\nvar pN1 = Vec3.zero();\r\nvar pC2 = Vec3.zero();\r\nvar pN3 = Vec3.zero();\r\nvar pC4 = Vec3.zero();\r\nvar pC5 = Vec3.zero();\r\nvar pC6 = Vec3.zero();\r\nvar pN7 = Vec3.zero();\r\nvar pC8 = Vec3.zero();\r\nvar pN9 = Vec3.zero();\r\nvar normal = Vec3.zero();\r\nexport var NucleotideRingMeshParams = {\r\n    sizeFactor: PD.Numeric(0.2, { min: 0, max: 10, step: 0.01 }),\r\n    radialSegments: PD.Numeric(16, { min: 2, max: 56, step: 2 }, BaseGeometry.CustomQualityParamInfo),\r\n    detail: PD.Numeric(0, { min: 0, max: 3, step: 1 }, BaseGeometry.CustomQualityParamInfo),\r\n};\r\nexport var DefaultNucleotideRingMeshProps = PD.getDefaultValues(NucleotideRingMeshParams);\r\nvar positionsRing5_6 = new Float32Array(2 * 9 * 3);\r\nvar stripIndicesRing5_6 = new Uint32Array([0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 14, 15, 12, 13, 8, 9, 10, 11, 0, 1]);\r\nvar fanIndicesTopRing5_6 = new Uint32Array([8, 12, 14, 16, 6, 4, 2, 0, 10]);\r\nvar fanIndicesBottomRing5_6 = new Uint32Array([9, 11, 1, 3, 5, 7, 17, 15, 13]);\r\nvar positionsRing6 = new Float32Array(2 * 6 * 3);\r\nvar stripIndicesRing6 = new Uint32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1]);\r\nvar fanIndicesTopRing6 = new Uint32Array([0, 10, 8, 6, 4, 2]);\r\nvar fanIndicesBottomRing6 = new Uint32Array([1, 3, 5, 7, 9, 11]);\r\nvar tmpShiftV = Vec3.zero();\r\nfunction shiftPositions(out, dir) {\r\n    var positions = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        positions[_i - 2] = arguments[_i];\r\n    }\r\n    for (var i = 0, il = positions.length; i < il; ++i) {\r\n        var v = positions[i];\r\n        Vec3.toArray(Vec3.add(tmpShiftV, v, dir), out, (i * 2) * 3);\r\n        Vec3.toArray(Vec3.sub(tmpShiftV, v, dir), out, (i * 2 + 1) * 3);\r\n    }\r\n}\r\nfunction createNucleotideRingMesh(ctx, unit, structure, theme, props, mesh) {\r\n    if (!Unit.isAtomic(unit))\r\n        return Mesh.createEmpty(mesh);\r\n    var nucleotideElementCount = unit.nucleotideElements.length;\r\n    if (!nucleotideElementCount)\r\n        return Mesh.createEmpty(mesh);\r\n    var sizeFactor = props.sizeFactor, radialSegments = props.radialSegments, detail = props.detail;\r\n    var vertexCount = nucleotideElementCount * (26 + radialSegments * 2);\r\n    var builderState = MeshBuilder.createState(vertexCount, vertexCount / 4, mesh);\r\n    var elements = unit.elements, model = unit.model;\r\n    var _a = model.atomicHierarchy, chainAtomSegments = _a.chainAtomSegments, residueAtomSegments = _a.residueAtomSegments, atoms = _a.atoms, atomicIndex = _a.index;\r\n    var _b = model.atomicHierarchy.derived.residue, moleculeType = _b.moleculeType, traceElementIndex = _b.traceElementIndex;\r\n    var label_comp_id = atoms.label_comp_id;\r\n    var pos = unit.conformation.invariantPosition;\r\n    var chainIt = Segmentation.transientSegments(chainAtomSegments, elements);\r\n    var residueIt = Segmentation.transientSegments(residueAtomSegments, elements);\r\n    var radius = 1 * sizeFactor;\r\n    var halfThickness = 1.25 * sizeFactor;\r\n    var cylinderProps = { radiusTop: 1 * sizeFactor, radiusBottom: 1 * sizeFactor, radialSegments: radialSegments };\r\n    var i = 0;\r\n    while (chainIt.hasNext) {\r\n        residueIt.setSegment(chainIt.move());\r\n        while (residueIt.hasNext) {\r\n            var residueIndex = residueIt.move().index;\r\n            if (isNucleic(moleculeType[residueIndex])) {\r\n                var compId = label_comp_id.value(residueAtomSegments.offsets[residueIndex]);\r\n                var idxTrace = -1, idxN1 = -1, idxC2 = -1, idxN3 = -1, idxC4 = -1, idxC5 = -1, idxC6 = -1, idxN7 = -1, idxC8 = -1, idxN9 = -1;\r\n                builderState.currentGroup = i;\r\n                var isPurine = isPurineBase(compId);\r\n                var isPyrimidine = isPyrimidineBase(compId);\r\n                if (!isPurine && !isPyrimidine) {\r\n                    // detect Purine or Pyrimidin based on geometry\r\n                    var idxC4_1 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    var idxN9_1 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\r\n                    if (idxC4_1 !== -1 && idxN9_1 !== -1 && Vec3.distance(pos(idxC4_1, pC4), pos(idxN9_1, pN9)) < 1.6) {\r\n                        isPurine = true;\r\n                    }\r\n                    else {\r\n                        isPyrimidine = true;\r\n                    }\r\n                }\r\n                if (isPurine) {\r\n                    idxTrace = traceElementIndex[residueIndex];\r\n                    idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\r\n                    idxC2 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\r\n                    idxN3 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\r\n                    idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'C5');\r\n                    if (idxC5 === -1) {\r\n                        // modified ring, e.g. DP\r\n                        idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'N5');\r\n                    }\r\n                    idxC6 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\r\n                    idxN7 = atomicIndex.findAtomOnResidue(residueIndex, 'N7');\r\n                    if (idxN7 === -1) {\r\n                        // modified ring, e.g. DP\r\n                        idxN7 = atomicIndex.findAtomOnResidue(residueIndex, 'C7');\r\n                    }\r\n                    idxC8 = atomicIndex.findAtomOnResidue(residueIndex, 'C8');\r\n                    idxN9 = atomicIndex.findAtomOnResidue(residueIndex, 'N9');\r\n                    if (idxN9 !== -1 && idxTrace !== -1) {\r\n                        pos(idxN9, pN9);\r\n                        pos(idxTrace, pTrace);\r\n                        builderState.currentGroup = i;\r\n                        addCylinder(builderState, pN9, pTrace, 1, cylinderProps);\r\n                        addSphere(builderState, pN9, radius, detail);\r\n                    }\r\n                    if (idxN1 !== -1 && idxC2 !== -1 && idxN3 !== -1 && idxC4 !== -1 && idxC5 !== -1 && idxC6 !== -1 && idxN7 !== -1 && idxC8 !== -1 && idxN9 !== -1) {\r\n                        pos(idxN1, pN1);\r\n                        pos(idxC2, pC2);\r\n                        pos(idxN3, pN3);\r\n                        pos(idxC4, pC4);\r\n                        pos(idxC5, pC5);\r\n                        pos(idxC6, pC6);\r\n                        pos(idxN7, pN7);\r\n                        pos(idxC8, pC8);\r\n                        Vec3.triangleNormal(normal, pN1, pC4, pC5);\r\n                        Vec3.scale(normal, normal, halfThickness);\r\n                        shiftPositions(positionsRing5_6, normal, pN1, pC2, pN3, pC4, pC5, pC6, pN7, pC8, pN9);\r\n                        MeshBuilder.addTriangleStrip(builderState, positionsRing5_6, stripIndicesRing5_6);\r\n                        MeshBuilder.addTriangleFan(builderState, positionsRing5_6, fanIndicesTopRing5_6);\r\n                        MeshBuilder.addTriangleFan(builderState, positionsRing5_6, fanIndicesBottomRing5_6);\r\n                    }\r\n                }\r\n                else if (isPyrimidine) {\r\n                    idxTrace = traceElementIndex[residueIndex];\r\n                    idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'N1');\r\n                    if (idxN1 === -1) {\r\n                        // modified ring, e.g. DZ\r\n                        idxN1 = atomicIndex.findAtomOnResidue(residueIndex, 'C1');\r\n                    }\r\n                    idxC2 = atomicIndex.findAtomOnResidue(residueIndex, 'C2');\r\n                    idxN3 = atomicIndex.findAtomOnResidue(residueIndex, 'N3');\r\n                    idxC4 = atomicIndex.findAtomOnResidue(residueIndex, 'C4');\r\n                    idxC5 = atomicIndex.findAtomOnResidue(residueIndex, 'C5');\r\n                    idxC6 = atomicIndex.findAtomOnResidue(residueIndex, 'C6');\r\n                    if (idxN1 !== -1 && idxTrace !== -1) {\r\n                        pos(idxN1, pN1);\r\n                        pos(idxTrace, pTrace);\r\n                        builderState.currentGroup = i;\r\n                        addCylinder(builderState, pN1, pTrace, 1, cylinderProps);\r\n                        addSphere(builderState, pN1, radius, detail);\r\n                    }\r\n                    if (idxN1 !== -1 && idxC2 !== -1 && idxN3 !== -1 && idxC4 !== -1 && idxC5 !== -1 && idxC6 !== -1) {\r\n                        pos(idxC2, pC2);\r\n                        pos(idxN3, pN3);\r\n                        pos(idxC4, pC4);\r\n                        pos(idxC5, pC5);\r\n                        pos(idxC6, pC6);\r\n                        Vec3.triangleNormal(normal, pN1, pC4, pC5);\r\n                        Vec3.scale(normal, normal, halfThickness);\r\n                        shiftPositions(positionsRing6, normal, pN1, pC2, pN3, pC4, pC5, pC6);\r\n                        MeshBuilder.addTriangleStrip(builderState, positionsRing6, stripIndicesRing6);\r\n                        MeshBuilder.addTriangleFan(builderState, positionsRing6, fanIndicesTopRing6);\r\n                        MeshBuilder.addTriangleFan(builderState, positionsRing6, fanIndicesBottomRing6);\r\n                    }\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n    var m = MeshBuilder.getMesh(builderState);\r\n    var sphere = Sphere3D.expand(Sphere3D(), unit.boundary.sphere, 1 * props.sizeFactor);\r\n    m.setBoundingSphere(sphere);\r\n    return m;\r\n}\r\nexport var NucleotideRingParams = __assign(__assign({}, UnitsMeshParams), NucleotideRingMeshParams);\r\nexport function NucleotideRingVisual(materialId) {\r\n    return UnitsMeshVisual({\r\n        defaultProps: PD.getDefaultValues(NucleotideRingParams),\r\n        createGeometry: createNucleotideRingMesh,\r\n        createLocationIterator: NucleotideLocationIterator.fromGroup,\r\n        getLoci: getNucleotideElementLoci,\r\n        eachLocation: eachNucleotideElement,\r\n        setUpdateState: function (state, newProps, currentProps) {\r\n            state.createGeometry = (newProps.sizeFactor !== currentProps.sizeFactor ||\r\n                newProps.radialSegments !== currentProps.radialSegments);\r\n        }\r\n    }, materialId);\r\n}\r\n//# sourceMappingURL=nucleotide-ring-mesh.js.map"]},"metadata":{},"sourceType":"module"}