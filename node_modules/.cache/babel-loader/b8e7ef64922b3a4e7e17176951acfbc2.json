{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { UniqueArray } from '../../mol-data/generic';\nexport { InterUnitGraph };\n\nvar InterUnitGraph =\n/** @class */\nfunction () {\n  function InterUnitGraph(map) {\n    this.map = map;\n    var count = 0;\n    var edges = [];\n    var edgeKeyIndex = new Map();\n    var vertexKeyIndex = new Map();\n    this.map.forEach(function (pairEdgesArray) {\n      pairEdgesArray.forEach(function (pairEdges) {\n        count += pairEdges.edgeCount;\n        pairEdges.connectedIndices.forEach(function (indexA) {\n          pairEdges.getEdges(indexA).forEach(function (edgeInfo) {\n            var unitA = pairEdges.unitA,\n                unitB = pairEdges.unitB;\n            var edgeKey = InterUnitGraph.getEdgeKey(indexA, unitA, edgeInfo.indexB, unitB);\n            edgeKeyIndex.set(edgeKey, edges.length);\n            var vertexKey = InterUnitGraph.getVertexKey(indexA, unitA);\n            var e = vertexKeyIndex.get(vertexKey);\n            if (e === undefined) vertexKeyIndex.set(vertexKey, [edges.length]);else e.push(edges.length);\n            edges.push(__assign(__assign({}, edgeInfo), {\n              indexA: indexA,\n              unitA: unitA,\n              unitB: unitB\n            }));\n          });\n        });\n      });\n    });\n    this.edgeCount = count;\n    this.edges = edges;\n    this.edgeKeyIndex = edgeKeyIndex;\n    this.vertexKeyIndex = vertexKeyIndex;\n  }\n  /** Get an array of unit-pair-edges that are connected to the given unit */\n\n\n  InterUnitGraph.prototype.getConnectedUnits = function (unit) {\n    if (!this.map.has(unit)) return emptyArray;\n    return this.map.get(unit);\n  };\n  /** Index into this.edges */\n\n\n  InterUnitGraph.prototype.getEdgeIndex = function (indexA, unitA, indexB, unitB) {\n    var edgeKey = InterUnitGraph.getEdgeKey(indexA, unitA, indexB, unitB);\n    var index = this.edgeKeyIndex.get(edgeKey);\n    return index !== undefined ? index : -1;\n  };\n  /** Check if edge exists */\n\n\n  InterUnitGraph.prototype.hasEdge = function (indexA, unitA, indexB, unitB) {\n    return this.getEdgeIndex(indexA, unitA, indexB, unitB) !== -1;\n  };\n  /** Get inter-unit edge given a pair of indices and units */\n\n\n  InterUnitGraph.prototype.getEdge = function (indexA, unitA, indexB, unitB) {\n    var index = this.getEdgeIndex(indexA, unitA, indexB, unitB);\n    return index !== -1 ? this.edges[index] : undefined;\n  };\n  /** Indices into this.edges */\n\n\n  InterUnitGraph.prototype.getEdgeIndices = function (index, unit) {\n    return this.vertexKeyIndex.get(InterUnitGraph.getVertexKey(index, unit)) || [];\n  };\n\n  return InterUnitGraph;\n}();\n\n(function (InterUnitGraph) {\n  var UnitPairEdges =\n  /** @class */\n  function () {\n    function UnitPairEdges(unitA, unitB, edgeCount, connectedIndices, edgeMap) {\n      this.unitA = unitA;\n      this.unitB = unitB;\n      this.edgeCount = edgeCount;\n      this.connectedIndices = connectedIndices;\n      this.edgeMap = edgeMap;\n    }\n\n    UnitPairEdges.prototype.hasEdges = function (indexA) {\n      return this.edgeMap.has(indexA);\n    };\n\n    UnitPairEdges.prototype.getEdges = function (indexA) {\n      if (!this.edgeMap.has(indexA)) return emptyArray;\n      return this.edgeMap.get(indexA);\n    };\n\n    Object.defineProperty(UnitPairEdges.prototype, \"areUnitsOrdered\", {\n      get: function () {\n        return this.unitA < this.unitB;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return UnitPairEdges;\n  }();\n\n  InterUnitGraph.UnitPairEdges = UnitPairEdges;\n\n  function getEdgeKey(indexA, unitA, indexB, unitB) {\n    return indexA + \"|\" + unitA + \"|\" + indexB + \"|\" + unitB;\n  }\n\n  InterUnitGraph.getEdgeKey = getEdgeKey;\n\n  function getVertexKey(index, unit) {\n    return index + \"|\" + unit;\n  }\n\n  InterUnitGraph.getVertexKey = getVertexKey; //\n\n  function addMapEntry(map, a, b) {\n    if (map.has(a)) map.get(a).push(b);else map.set(a, [b]);\n  }\n\n  var Builder =\n  /** @class */\n  function () {\n    function Builder() {\n      this.map = new Map();\n    }\n\n    Builder.prototype.startUnitPair = function (unitA, unitB) {\n      this.uA = unitA;\n      this.uB = unitB;\n      this.mapAB = new Map();\n      this.mapBA = new Map();\n      this.linkedA = UniqueArray.create();\n      this.linkedB = UniqueArray.create();\n      this.linkCount = 0;\n    };\n\n    Builder.prototype.finishUnitPair = function () {\n      if (this.linkCount === 0) return;\n      addMapEntry(this.map, this.uA, new UnitPairEdges(this.uA, this.uB, this.linkCount, this.linkedA.array, this.mapAB));\n      addMapEntry(this.map, this.uB, new UnitPairEdges(this.uB, this.uA, this.linkCount, this.linkedB.array, this.mapBA));\n    };\n\n    Builder.prototype.add = function (indexA, indexB, props) {\n      addMapEntry(this.mapAB, indexA, {\n        indexB: indexB,\n        props: props\n      });\n      addMapEntry(this.mapBA, indexB, {\n        indexB: indexA,\n        props: props\n      });\n      UniqueArray.add(this.linkedA, indexA, indexA);\n      UniqueArray.add(this.linkedB, indexB, indexB);\n      this.linkCount += 1;\n    };\n\n    Builder.prototype.getMap = function () {\n      return this.map;\n    };\n\n    return Builder;\n  }();\n\n  InterUnitGraph.Builder = Builder;\n})(InterUnitGraph || (InterUnitGraph = {}));\n\nvar emptyArray = [];","map":{"version":3,"sources":["../../../src/mol-math/graph/inter-unit-graph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { UniqueArray } from '../../mol-data/generic';\r\nexport { InterUnitGraph };\r\nvar InterUnitGraph = /** @class */ (function () {\r\n    function InterUnitGraph(map) {\r\n        this.map = map;\r\n        var count = 0;\r\n        var edges = [];\r\n        var edgeKeyIndex = new Map();\r\n        var vertexKeyIndex = new Map();\r\n        this.map.forEach(function (pairEdgesArray) {\r\n            pairEdgesArray.forEach(function (pairEdges) {\r\n                count += pairEdges.edgeCount;\r\n                pairEdges.connectedIndices.forEach(function (indexA) {\r\n                    pairEdges.getEdges(indexA).forEach(function (edgeInfo) {\r\n                        var unitA = pairEdges.unitA, unitB = pairEdges.unitB;\r\n                        var edgeKey = InterUnitGraph.getEdgeKey(indexA, unitA, edgeInfo.indexB, unitB);\r\n                        edgeKeyIndex.set(edgeKey, edges.length);\r\n                        var vertexKey = InterUnitGraph.getVertexKey(indexA, unitA);\r\n                        var e = vertexKeyIndex.get(vertexKey);\r\n                        if (e === undefined)\r\n                            vertexKeyIndex.set(vertexKey, [edges.length]);\r\n                        else\r\n                            e.push(edges.length);\r\n                        edges.push(__assign(__assign({}, edgeInfo), { indexA: indexA, unitA: unitA, unitB: unitB }));\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        this.edgeCount = count;\r\n        this.edges = edges;\r\n        this.edgeKeyIndex = edgeKeyIndex;\r\n        this.vertexKeyIndex = vertexKeyIndex;\r\n    }\r\n    /** Get an array of unit-pair-edges that are connected to the given unit */\r\n    InterUnitGraph.prototype.getConnectedUnits = function (unit) {\r\n        if (!this.map.has(unit))\r\n            return emptyArray;\r\n        return this.map.get(unit);\r\n    };\r\n    /** Index into this.edges */\r\n    InterUnitGraph.prototype.getEdgeIndex = function (indexA, unitA, indexB, unitB) {\r\n        var edgeKey = InterUnitGraph.getEdgeKey(indexA, unitA, indexB, unitB);\r\n        var index = this.edgeKeyIndex.get(edgeKey);\r\n        return index !== undefined ? index : -1;\r\n    };\r\n    /** Check if edge exists */\r\n    InterUnitGraph.prototype.hasEdge = function (indexA, unitA, indexB, unitB) {\r\n        return this.getEdgeIndex(indexA, unitA, indexB, unitB) !== -1;\r\n    };\r\n    /** Get inter-unit edge given a pair of indices and units */\r\n    InterUnitGraph.prototype.getEdge = function (indexA, unitA, indexB, unitB) {\r\n        var index = this.getEdgeIndex(indexA, unitA, indexB, unitB);\r\n        return index !== -1 ? this.edges[index] : undefined;\r\n    };\r\n    /** Indices into this.edges */\r\n    InterUnitGraph.prototype.getEdgeIndices = function (index, unit) {\r\n        return this.vertexKeyIndex.get(InterUnitGraph.getVertexKey(index, unit)) || [];\r\n    };\r\n    return InterUnitGraph;\r\n}());\r\n(function (InterUnitGraph) {\r\n    var UnitPairEdges = /** @class */ (function () {\r\n        function UnitPairEdges(unitA, unitB, edgeCount, connectedIndices, edgeMap) {\r\n            this.unitA = unitA;\r\n            this.unitB = unitB;\r\n            this.edgeCount = edgeCount;\r\n            this.connectedIndices = connectedIndices;\r\n            this.edgeMap = edgeMap;\r\n        }\r\n        UnitPairEdges.prototype.hasEdges = function (indexA) {\r\n            return this.edgeMap.has(indexA);\r\n        };\r\n        UnitPairEdges.prototype.getEdges = function (indexA) {\r\n            if (!this.edgeMap.has(indexA))\r\n                return emptyArray;\r\n            return this.edgeMap.get(indexA);\r\n        };\r\n        Object.defineProperty(UnitPairEdges.prototype, \"areUnitsOrdered\", {\r\n            get: function () {\r\n                return this.unitA < this.unitB;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        return UnitPairEdges;\r\n    }());\r\n    InterUnitGraph.UnitPairEdges = UnitPairEdges;\r\n    function getEdgeKey(indexA, unitA, indexB, unitB) {\r\n        return indexA + \"|\" + unitA + \"|\" + indexB + \"|\" + unitB;\r\n    }\r\n    InterUnitGraph.getEdgeKey = getEdgeKey;\r\n    function getVertexKey(index, unit) {\r\n        return index + \"|\" + unit;\r\n    }\r\n    InterUnitGraph.getVertexKey = getVertexKey;\r\n    //\r\n    function addMapEntry(map, a, b) {\r\n        if (map.has(a))\r\n            map.get(a).push(b);\r\n        else\r\n            map.set(a, [b]);\r\n    }\r\n    var Builder = /** @class */ (function () {\r\n        function Builder() {\r\n            this.map = new Map();\r\n        }\r\n        Builder.prototype.startUnitPair = function (unitA, unitB) {\r\n            this.uA = unitA;\r\n            this.uB = unitB;\r\n            this.mapAB = new Map();\r\n            this.mapBA = new Map();\r\n            this.linkedA = UniqueArray.create();\r\n            this.linkedB = UniqueArray.create();\r\n            this.linkCount = 0;\r\n        };\r\n        Builder.prototype.finishUnitPair = function () {\r\n            if (this.linkCount === 0)\r\n                return;\r\n            addMapEntry(this.map, this.uA, new UnitPairEdges(this.uA, this.uB, this.linkCount, this.linkedA.array, this.mapAB));\r\n            addMapEntry(this.map, this.uB, new UnitPairEdges(this.uB, this.uA, this.linkCount, this.linkedB.array, this.mapBA));\r\n        };\r\n        Builder.prototype.add = function (indexA, indexB, props) {\r\n            addMapEntry(this.mapAB, indexA, { indexB: indexB, props: props });\r\n            addMapEntry(this.mapBA, indexB, { indexB: indexA, props: props });\r\n            UniqueArray.add(this.linkedA, indexA, indexA);\r\n            UniqueArray.add(this.linkedB, indexB, indexB);\r\n            this.linkCount += 1;\r\n        };\r\n        Builder.prototype.getMap = function () {\r\n            return this.map;\r\n        };\r\n        return Builder;\r\n    }());\r\n    InterUnitGraph.Builder = Builder;\r\n})(InterUnitGraph || (InterUnitGraph = {}));\r\nvar emptyArray = [];\r\n//# sourceMappingURL=inter-unit-graph.js.map"]},"metadata":{},"sourceType":"module"}