{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { __spreadArray } from \"tslib\";\nvar reLine = /^/mg;\nexport function indentString(str, count, indent) {\n  return count === 0 ? str : str.replace(reLine, indent.repeat(count));\n}\n/** Add space between camelCase text. */\n\nexport function splitCamelCase(str, separator) {\n  if (separator === void 0) {\n    separator = ' ';\n  }\n\n  return str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1\" + separator + \"$2\");\n}\n/** Split camelCase text and capitalize. */\n\nexport function camelCaseToWords(str) {\n  return capitalize(splitCamelCase(str));\n}\nexport var lowerCase = function (str) {\n  return str.toLowerCase();\n};\nexport var upperCase = function (str) {\n  return str.toUpperCase();\n};\n/** Return upper case if string, otherwise return empty string */\n\nexport function upperCaseAny(value) {\n  if (!value) return '';\n  return typeof value === 'string' ? value.toUpperCase() : (\"\" + value).toUpperCase();\n}\n/** Uppercase the first character of each word. */\n\nexport function capitalize(str) {\n  return str.toLowerCase().replace(/^\\w|\\s\\w/g, upperCase);\n}\nexport function splitSnakeCase(str) {\n  return str.replace(/_/g, ' ');\n}\nexport function snakeCaseToWords(str) {\n  return capitalize(splitSnakeCase(str));\n}\nexport function splitKebabCase(str) {\n  return str.replace(/-/g, ' ');\n}\nexport function kebabCaseToWords(str) {\n  return capitalize(splitKebabCase(str));\n}\nexport function stringToWords(str) {\n  return capitalize(splitCamelCase(splitSnakeCase(splitKebabCase(str))));\n}\nexport function substringStartsWith(str, start, end, target) {\n  var len = target.length;\n  if (len > end - start) return false;\n\n  for (var i = 0; i < len; i++) {\n    if (str.charCodeAt(start + i) !== target.charCodeAt(i)) return false;\n  }\n\n  return true;\n}\nexport function interpolate(str, params) {\n  var names = Object.keys(params);\n  var values = Object.values(params);\n  return new (Function.bind.apply(Function, __spreadArray(__spreadArray([void 0], names, false), [\"return `\" + str + \"`;\"], false)))().apply(void 0, values);\n}\nexport function trimChar(str, char) {\n  var start = 0;\n  var end = str.length;\n\n  while (start < end && str[start] === char) ++start;\n\n  while (end > start && str[end - 1] === char) --end;\n\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\nexport function trimCharStart(str, char) {\n  var start = 0;\n  var end = str.length;\n\n  while (start < end && str[start] === char) ++start;\n\n  return start > 0 ? str.substring(start, end) : str;\n}\nexport function trimCharEnd(str, char) {\n  var end = str.length;\n\n  while (end > 0 && str[end - 1] === char) --end;\n\n  return end < str.length ? str.substring(0, end) : str;\n}\n/** Simple function to strip tags from a string */\n\nexport function stripTags(str) {\n  return str.replace(/<\\/?[^>]+>/g, '');\n}","map":{"version":3,"sources":["../../src/mol-util/string.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nvar reLine = /^/mg;\r\nexport function indentString(str, count, indent) {\r\n    return count === 0 ? str : str.replace(reLine, indent.repeat(count));\r\n}\r\n/** Add space between camelCase text. */\r\nexport function splitCamelCase(str, separator) {\r\n    if (separator === void 0) { separator = ' '; }\r\n    return str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1\" + separator + \"$2\");\r\n}\r\n/** Split camelCase text and capitalize. */\r\nexport function camelCaseToWords(str) {\r\n    return capitalize(splitCamelCase(str));\r\n}\r\nexport var lowerCase = function (str) { return str.toLowerCase(); };\r\nexport var upperCase = function (str) { return str.toUpperCase(); };\r\n/** Return upper case if string, otherwise return empty string */\r\nexport function upperCaseAny(value) {\r\n    if (!value)\r\n        return '';\r\n    return typeof value === 'string' ? value.toUpperCase() : (\"\" + value).toUpperCase();\r\n}\r\n/** Uppercase the first character of each word. */\r\nexport function capitalize(str) {\r\n    return str.toLowerCase().replace(/^\\w|\\s\\w/g, upperCase);\r\n}\r\nexport function splitSnakeCase(str) {\r\n    return str.replace(/_/g, ' ');\r\n}\r\nexport function snakeCaseToWords(str) {\r\n    return capitalize(splitSnakeCase(str));\r\n}\r\nexport function splitKebabCase(str) {\r\n    return str.replace(/-/g, ' ');\r\n}\r\nexport function kebabCaseToWords(str) {\r\n    return capitalize(splitKebabCase(str));\r\n}\r\nexport function stringToWords(str) {\r\n    return capitalize(splitCamelCase(splitSnakeCase(splitKebabCase(str))));\r\n}\r\nexport function substringStartsWith(str, start, end, target) {\r\n    var len = target.length;\r\n    if (len > end - start)\r\n        return false;\r\n    for (var i = 0; i < len; i++) {\r\n        if (str.charCodeAt(start + i) !== target.charCodeAt(i))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nexport function interpolate(str, params) {\r\n    var names = Object.keys(params);\r\n    var values = Object.values(params);\r\n    return new (Function.bind.apply(Function, __spreadArray(__spreadArray([void 0], names, false), [\"return `\" + str + \"`;\"], false)))().apply(void 0, values);\r\n}\r\nexport function trimChar(str, char) {\r\n    var start = 0;\r\n    var end = str.length;\r\n    while (start < end && str[start] === char)\r\n        ++start;\r\n    while (end > start && str[end - 1] === char)\r\n        --end;\r\n    return (start > 0 || end < str.length) ? str.substring(start, end) : str;\r\n}\r\nexport function trimCharStart(str, char) {\r\n    var start = 0;\r\n    var end = str.length;\r\n    while (start < end && str[start] === char)\r\n        ++start;\r\n    return (start > 0) ? str.substring(start, end) : str;\r\n}\r\nexport function trimCharEnd(str, char) {\r\n    var end = str.length;\r\n    while (end > 0 && str[end - 1] === char)\r\n        --end;\r\n    return (end < str.length) ? str.substring(0, end) : str;\r\n}\r\n/** Simple function to strip tags from a string */\r\nexport function stripTags(str) {\r\n    return str.replace(/<\\/?[^>]+>/g, '');\r\n}\r\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"module"}