{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __extends } from \"tslib\";\nimport { SymmetryOperator } from '../../../mol-math/geometry/symmetry-operator';\nimport { Model } from '../model';\nimport { GridLookup3D, Spacegroup } from '../../../mol-math/geometry';\nimport { computeIntraUnitBonds } from './unit/bonds';\nimport { BitFlags } from '../../../mol-util';\nimport { UnitRings } from './unit/rings';\nimport { IntMap, SortedArray, Segmentation } from '../../../mol-data/int';\nimport { hash2, hashFnv32a } from '../../../mol-data/util';\nimport { getAtomicPolymerElements, getCoarsePolymerElements, getAtomicGapElements, getCoarseGapElements, getNucleotideElements, getProteinElements } from './util/polymer';\nimport { getPrincipalAxes } from './util/principal-axes';\nimport { getBoundary } from '../../../mol-math/geometry/boundary';\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\nimport { ElementSetIntraBondCache } from './unit/bonds/element-set-intra-bond-cache';\nimport { ModelSymmetry } from '../../../mol-model-formats/structure/property/symmetry';\nvar Unit;\n\n(function (Unit) {\n  function isAtomic(u) {\n    return u.kind === 0\n    /* Atomic */\n    ;\n  }\n\n  Unit.isAtomic = isAtomic;\n\n  function isCoarse(u) {\n    return u.kind === 1\n    /* Spheres */\n    || u.kind === 2\n    /* Gaussians */\n    ;\n  }\n\n  Unit.isCoarse = isCoarse;\n\n  function isSpheres(u) {\n    return u.kind === 1\n    /* Spheres */\n    ;\n  }\n\n  Unit.isSpheres = isSpheres;\n\n  function isGaussians(u) {\n    return u.kind === 2\n    /* Gaussians */\n    ;\n  }\n\n  Unit.isGaussians = isGaussians;\n\n  function create(id, invariantId, chainGroupId, traits, kind, model, operator, elements, props) {\n    switch (kind) {\n      case 0\n      /* Atomic */\n      :\n        return new Atomic(id, invariantId, chainGroupId, traits, model, elements, SymmetryOperator.createMapping(operator, model.atomicConformation, void 0), props !== null && props !== void 0 ? props : AtomicProperties());\n\n      case 1\n      /* Spheres */\n      :\n        return createCoarse(id, invariantId, chainGroupId, traits, model, 1\n        /* Spheres */\n        , elements, SymmetryOperator.createMapping(operator, model.coarseConformation.spheres, getSphereRadiusFunc(model)), props !== null && props !== void 0 ? props : CoarseProperties());\n\n      case 2\n      /* Gaussians */\n      :\n        return createCoarse(id, invariantId, chainGroupId, traits, model, 2\n        /* Gaussians */\n        , elements, SymmetryOperator.createMapping(operator, model.coarseConformation.gaussians, getGaussianRadiusFunc(model)), props !== null && props !== void 0 ? props : CoarseProperties());\n    }\n  }\n\n  Unit.create = create;\n\n  function getUnitIndexMap(units) {\n    var unitIndexMap = IntMap.Mutable();\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      unitIndexMap.set(units[i].id, i);\n    }\n\n    return unitIndexMap;\n  }\n\n  function getTransformHash(units) {\n    var ids = [];\n\n    for (var i = 0, _i = units.length; i < _i; i++) {\n      ids.push(units[i].id);\n    }\n\n    return hashFnv32a(ids);\n  }\n\n  function SymmetryGroup(units) {\n    var props = {};\n    return {\n      elements: units[0].elements,\n      units: units,\n\n      get unitIndexMap() {\n        if (props.unitIndexMap) return props.unitIndexMap;\n        props.unitIndexMap = getUnitIndexMap(units);\n        return props.unitIndexMap;\n      },\n\n      hashCode: hashUnit(units[0]),\n      transformHash: getTransformHash(units)\n    };\n  }\n\n  Unit.SymmetryGroup = SymmetryGroup;\n\n  (function (SymmetryGroup) {\n    function areInvariantElementsEqual(a, b) {\n      if (a.hashCode !== b.hashCode) return false;\n      return SortedArray.areEqual(a.elements, b.elements);\n    }\n\n    SymmetryGroup.areInvariantElementsEqual = areInvariantElementsEqual;\n\n    function getUnitSymmetryGroupsIndexMap(symmetryGroups) {\n      var unitSymmetryGroupsIndexMap = IntMap.Mutable();\n\n      for (var i = 0, il = symmetryGroups.length; i < il; ++i) {\n        var sg = symmetryGroups[i];\n\n        for (var j = 0, jl = sg.units.length; j < jl; ++j) {\n          unitSymmetryGroupsIndexMap.set(sg.units[j].id, i);\n        }\n      }\n\n      return unitSymmetryGroupsIndexMap;\n    }\n\n    SymmetryGroup.getUnitSymmetryGroupsIndexMap = getUnitSymmetryGroupsIndexMap;\n  })(SymmetryGroup = Unit.SymmetryGroup || (Unit.SymmetryGroup = {}));\n\n  function conformationId(unit) {\n    return Unit.isAtomic(unit) ? unit.model.atomicConformation.id : unit.model.coarseConformation.id;\n  }\n\n  Unit.conformationId = conformationId;\n\n  function hashUnit(u) {\n    return hash2(u.invariantId, SortedArray.hashCode(u.elements));\n  }\n\n  Unit.hashUnit = hashUnit;\n  var Traits;\n\n  (function (Traits) {\n    Traits.is = BitFlags.has;\n    Traits.create = BitFlags.create;\n  })(Traits = Unit.Traits || (Unit.Traits = {}));\n\n  function BaseProperties() {\n    return {};\n  }\n\n  function getSphereRadiusFunc(model) {\n    var r = model.coarseConformation.spheres.radius;\n    return function (i) {\n      return r[i];\n    };\n  }\n\n  function getGaussianRadiusFunc(model) {\n    // TODO: compute radius for gaussians\n    return function (i) {\n      return 0;\n    };\n  }\n  /**\r\n   * A bulding block of a structure that corresponds\r\n   * to a \"natural group of atoms\" (most often a \"chain\")\r\n   * together with a transformation (rotation and translation)\r\n   * that is dynamically applied to the underlying atom set.\r\n   *\r\n   * An atom set can be referenced by multiple different units which\r\n   * makes construction of assemblies and spacegroups very efficient.\r\n   */\n\n\n  var Atomic =\n  /** @class */\n  function () {\n    function Atomic(id, invariantId, chainGroupId, traits, model, elements, conformation, props) {\n      this.kind = 0\n      /* Atomic */\n      ;\n      this.objectPrimitive = 'atomistic';\n      this.id = id;\n      this.invariantId = invariantId;\n      this.chainGroupId = chainGroupId;\n      this.traits = traits;\n      this.model = model;\n      this.elements = elements;\n      this.conformation = conformation;\n      this.residueIndex = model.atomicHierarchy.residueAtomSegments.index;\n      this.chainIndex = model.atomicHierarchy.chainAtomSegments.index;\n      this.props = props;\n    }\n\n    Atomic.prototype.getChild = function (elements) {\n      if (elements.length === this.elements.length) return this;\n      return new Atomic(this.id, this.invariantId, this.chainGroupId, this.traits, this.model, elements, this.conformation, AtomicProperties());\n    };\n\n    Atomic.prototype.applyOperator = function (id, operator, dontCompose) {\n      if (dontCompose === void 0) {\n        dontCompose = false;\n      }\n\n      var op = dontCompose ? operator : SymmetryOperator.compose(this.conformation.operator, operator);\n      return new Atomic(id, this.invariantId, this.chainGroupId, this.traits, this.model, this.elements, SymmetryOperator.createMapping(op, this.model.atomicConformation, this.conformation.r), this.props);\n    };\n\n    Atomic.prototype.remapModel = function (model, dynamicBonds, props) {\n      if (!props) {\n        props = __assign(__assign({}, this.props), {\n          bonds: dynamicBonds ? undefined : tryRemapBonds(this, this.props.bonds, model)\n        });\n\n        if (!Unit.isSameConformation(this, model)) {\n          props.boundary = undefined;\n          props.lookup3d = undefined;\n          props.principalAxes = undefined;\n        }\n      }\n\n      var operator = this.conformation.operator;\n      var symmetry = ModelSymmetry.Provider.get(model);\n\n      if (operator.spgrOp !== -1 && symmetry && symmetry !== ModelSymmetry.Provider.get(this.model)) {\n        var _a = operator.hkl,\n            i = _a[0],\n            j = _a[1],\n            k = _a[2];\n        var toFractional = symmetry.spacegroup.cell.toFractional;\n        var ref = Vec3.transformMat4(Vec3(), Model.getCenter(model), toFractional);\n        operator = Spacegroup.getSymmetryOperatorRef(symmetry.spacegroup, operator.spgrOp, i, j, k, ref);\n      }\n\n      var conformation = this.model.atomicConformation !== model.atomicConformation || operator !== this.conformation.operator ? SymmetryOperator.createMapping(operator, model.atomicConformation) : this.conformation;\n      return new Atomic(this.id, this.invariantId, this.chainGroupId, this.traits, model, this.elements, conformation, props);\n    };\n\n    Object.defineProperty(Atomic.prototype, \"boundary\", {\n      get: function () {\n        if (this.props.boundary) return this.props.boundary;\n        var _a = this.model.atomicConformation,\n            x = _a.x,\n            y = _a.y,\n            z = _a.z;\n        this.props.boundary = getBoundary({\n          x: x,\n          y: y,\n          z: z,\n          indices: this.elements\n        });\n        return this.props.boundary;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"lookup3d\", {\n      get: function () {\n        if (this.props.lookup3d) return this.props.lookup3d;\n        var _a = this.model.atomicConformation,\n            x = _a.x,\n            y = _a.y,\n            z = _a.z;\n        this.props.lookup3d = GridLookup3D({\n          x: x,\n          y: y,\n          z: z,\n          indices: this.elements\n        }, this.boundary);\n        return this.props.lookup3d;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"principalAxes\", {\n      get: function () {\n        if (this.props.principalAxes) return this.props.principalAxes;\n        this.props.principalAxes = getPrincipalAxes(this);\n        return this.props.principalAxes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"bonds\", {\n      get: function () {\n        if (this.props.bonds) return this.props.bonds;\n        var cache = ElementSetIntraBondCache.get(this.model);\n        var bonds = cache.get(this.elements);\n\n        if (!bonds) {\n          bonds = computeIntraUnitBonds(this);\n          cache.set(this.elements, bonds);\n        }\n\n        this.props.bonds = bonds;\n        return this.props.bonds;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"rings\", {\n      get: function () {\n        if (this.props.rings) return this.props.rings;\n        this.props.rings = UnitRings.create(this);\n        return this.props.rings;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"polymerElements\", {\n      get: function () {\n        if (this.props.polymerElements) return this.props.polymerElements;\n        this.props.polymerElements = getAtomicPolymerElements(this);\n        return this.props.polymerElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"gapElements\", {\n      get: function () {\n        if (this.props.gapElements) return this.props.gapElements;\n        this.props.gapElements = getAtomicGapElements(this);\n        return this.props.gapElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"nucleotideElements\", {\n      get: function () {\n        if (this.props.nucleotideElements) return this.props.nucleotideElements;\n        this.props.nucleotideElements = getNucleotideElements(this);\n        return this.props.nucleotideElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"proteinElements\", {\n      get: function () {\n        if (this.props.proteinElements) return this.props.proteinElements;\n        this.props.proteinElements = getProteinElements(this);\n        return this.props.proteinElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Atomic.prototype, \"residueCount\", {\n      get: function () {\n        if (this.props.residueCount !== undefined) return this.props.residueCount;\n        var residueCount = 0;\n        var residueIt = Segmentation.transientSegments(this.model.atomicHierarchy.residueAtomSegments, this.elements);\n\n        while (residueIt.hasNext) {\n          residueIt.move();\n          residueCount += 1;\n        }\n\n        this.props.residueCount = residueCount;\n        return this.props.residueCount;\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    Atomic.prototype.getResidueIndex = function (elementIndex) {\n      return this.residueIndex[this.elements[elementIndex]];\n    };\n\n    return Atomic;\n  }();\n\n  Unit.Atomic = Atomic;\n\n  function AtomicProperties() {\n    return BaseProperties();\n  }\n\n  var Coarse =\n  /** @class */\n  function () {\n    function Coarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props) {\n      this.kind = kind;\n      this.objectPrimitive = kind === 1\n      /* Spheres */\n      ? 'sphere' : 'gaussian';\n      this.id = id;\n      this.invariantId = invariantId;\n      this.chainGroupId = chainGroupId;\n      this.traits = traits;\n      this.model = model;\n      this.elements = elements;\n      this.conformation = conformation;\n      this.coarseElements = kind === 1\n      /* Spheres */\n      ? model.coarseHierarchy.spheres : model.coarseHierarchy.gaussians;\n      this.coarseConformation = kind === 1\n      /* Spheres */\n      ? model.coarseConformation.spheres : model.coarseConformation.gaussians;\n      this.props = props;\n    }\n\n    Coarse.prototype.getChild = function (elements) {\n      if (elements.length === this.elements.length) return this; // lets call this an ugly temporary hack\n\n      return createCoarse(this.id, this.invariantId, this.chainGroupId, this.traits, this.model, this.kind, elements, this.conformation, CoarseProperties());\n    };\n\n    Coarse.prototype.applyOperator = function (id, operator, dontCompose) {\n      if (dontCompose === void 0) {\n        dontCompose = false;\n      }\n\n      var op = dontCompose ? operator : SymmetryOperator.compose(this.conformation.operator, operator);\n      return createCoarse(id, this.invariantId, this.chainGroupId, this.traits, this.model, this.kind, this.elements, SymmetryOperator.createMapping(op, this.getCoarseConformation(), this.conformation.r), this.props);\n    };\n\n    Coarse.prototype.remapModel = function (model, dynamicBonds, props) {\n      var coarseConformation = this.getCoarseConformation();\n      var modelCoarseConformation = getCoarseConformation(this.kind, model);\n\n      if (!props) {\n        props = __assign({}, this.props);\n\n        if (!Unit.isSameConformation(this, model)) {\n          // TODO get rid of casting\n          props.boundary = undefined;\n          props.lookup3d = undefined;\n          props.principalAxes = undefined;\n        }\n      }\n\n      var conformation = coarseConformation !== modelCoarseConformation ? SymmetryOperator.createMapping(this.conformation.operator, modelCoarseConformation) : this.conformation;\n      return new Coarse(this.id, this.invariantId, this.chainGroupId, this.traits, model, this.kind, this.elements, conformation, props); // TODO get rid of casting\n    };\n\n    Object.defineProperty(Coarse.prototype, \"boundary\", {\n      get: function () {\n        if (this.props.boundary) return this.props.boundary; // TODO: support sphere radius?\n\n        var _a = this.getCoarseConformation(),\n            x = _a.x,\n            y = _a.y,\n            z = _a.z;\n\n        this.props.boundary = getBoundary({\n          x: x,\n          y: y,\n          z: z,\n          indices: this.elements\n        });\n        return this.props.boundary;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Coarse.prototype, \"lookup3d\", {\n      get: function () {\n        if (this.props.lookup3d) return this.props.lookup3d; // TODO: support sphere radius?\n\n        var _a = this.getCoarseConformation(),\n            x = _a.x,\n            y = _a.y,\n            z = _a.z;\n\n        this.props.lookup3d = GridLookup3D({\n          x: x,\n          y: y,\n          z: z,\n          indices: this.elements\n        }, this.boundary);\n        return this.props.lookup3d;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Coarse.prototype, \"principalAxes\", {\n      get: function () {\n        if (this.props.principalAxes) return this.props.principalAxes;\n        this.props.principalAxes = getPrincipalAxes(this); // TODO get rid of casting\n\n        return this.props.principalAxes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Coarse.prototype, \"polymerElements\", {\n      get: function () {\n        if (this.props.polymerElements) return this.props.polymerElements;\n        this.props.polymerElements = getCoarsePolymerElements(this); // TODO get rid of casting\n\n        return this.props.polymerElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(Coarse.prototype, \"gapElements\", {\n      get: function () {\n        if (this.props.gapElements) return this.props.gapElements;\n        this.props.gapElements = getCoarseGapElements(this); // TODO get rid of casting\n\n        return this.props.gapElements;\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    Coarse.prototype.getCoarseConformation = function () {\n      return getCoarseConformation(this.kind, this.model);\n    };\n\n    return Coarse;\n  }();\n\n  function getCoarseConformation(kind, model) {\n    return kind === 1\n    /* Spheres */\n    ? model.coarseConformation.spheres : model.coarseConformation.gaussians;\n  }\n\n  function CoarseProperties() {\n    return BaseProperties();\n  }\n\n  var Spheres =\n  /** @class */\n  function (_super) {\n    __extends(Spheres, _super);\n\n    function Spheres() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return Spheres;\n  }(Coarse);\n\n  Unit.Spheres = Spheres;\n\n  var Gaussians =\n  /** @class */\n  function (_super) {\n    __extends(Gaussians, _super);\n\n    function Gaussians() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return Gaussians;\n  }(Coarse);\n\n  Unit.Gaussians = Gaussians;\n\n  function createCoarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props) {\n    return new Coarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props); // lets call this an ugly temporary hack\n  }\n\n  function areSameChainOperatorGroup(a, b) {\n    return a.chainGroupId === b.chainGroupId && a.conformation.operator.name === b.conformation.operator.name;\n  }\n\n  Unit.areSameChainOperatorGroup = areSameChainOperatorGroup;\n\n  function areOperatorsEqual(a, b) {\n    return Mat4.areEqual(a.conformation.operator.matrix, b.conformation.operator.matrix, 1e-6);\n  }\n\n  Unit.areOperatorsEqual = areOperatorsEqual;\n\n  function areConformationsEqual(a, b) {\n    if (!SortedArray.areEqual(a.elements, b.elements)) return false;\n    return isSameConformation(a, b.model);\n  }\n\n  Unit.areConformationsEqual = areConformationsEqual;\n\n  function tryRemapBonds(a, old, model) {\n    // TODO: should include additional checks?\n    var _a;\n\n    if (!old) return void 0;\n    if (a.model.atomicConformation.id === model.atomicConformation.id) return old;\n    var oldIndex = IndexPairBonds.Provider.get(a.model);\n\n    if (oldIndex) {\n      var newIndex = IndexPairBonds.Provider.get(model); // TODO: check the actual indices instead of just reference equality?\n\n      if (!newIndex || oldIndex === newIndex) return old;\n      return void 0;\n    }\n\n    if ((_a = old.props) === null || _a === void 0 ? void 0 : _a.canRemap) {\n      return old;\n    }\n\n    return isSameConformation(a, model) ? old : void 0;\n  }\n\n  function isSameConformation(u, model) {\n    var coordsHistory = Model.CoordinatesHistory.get(Model.getRoot(model));\n    if (coordsHistory) return coordsHistory.areEqual(u.elements, u.kind, model);\n    var xs = u.elements;\n    var _a = u.conformation.coordinates,\n        xa = _a.x,\n        ya = _a.y,\n        za = _a.z;\n\n    var _b = getModelConformationOfKind(u.kind, model),\n        xb = _b.x,\n        yb = _b.y,\n        zb = _b.z;\n\n    for (var i = 0, _i = xs.length; i < _i; i++) {\n      var u_1 = xs[i];\n      if (xa[u_1] !== xb[u_1] || ya[u_1] !== yb[u_1] || za[u_1] !== zb[u_1]) return false;\n    }\n\n    return true;\n  }\n\n  Unit.isSameConformation = isSameConformation;\n\n  function getModelConformationOfKind(kind, model) {\n    return kind === 0\n    /* Atomic */\n    ? model.atomicConformation : kind === 1\n    /* Spheres */\n    ? model.coarseConformation.spheres : model.coarseConformation.gaussians;\n  }\n\n  Unit.getModelConformationOfKind = getModelConformationOfKind;\n\n  function getConformation(u) {\n    return getModelConformationOfKind(u.kind, u.model);\n  }\n\n  Unit.getConformation = getConformation;\n\n  function getModelHierarchyOfKind(kind, model) {\n    return kind === 0\n    /* Atomic */\n    ? model.atomicHierarchy : kind === 1\n    /* Spheres */\n    ? model.coarseHierarchy.spheres : model.coarseHierarchy.gaussians;\n  }\n\n  Unit.getModelHierarchyOfKind = getModelHierarchyOfKind;\n\n  function getHierarchy(u) {\n    return getModelHierarchyOfKind(u.kind, u.model);\n  }\n\n  Unit.getHierarchy = getHierarchy;\n})(Unit || (Unit = {}));\n\nexport { Unit };","map":{"version":3,"sources":["../../../../src/mol-model/structure/structure/unit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __extends } from \"tslib\";\r\nimport { SymmetryOperator } from '../../../mol-math/geometry/symmetry-operator';\r\nimport { Model } from '../model';\r\nimport { GridLookup3D, Spacegroup } from '../../../mol-math/geometry';\r\nimport { computeIntraUnitBonds } from './unit/bonds';\r\nimport { BitFlags } from '../../../mol-util';\r\nimport { UnitRings } from './unit/rings';\r\nimport { IntMap, SortedArray, Segmentation } from '../../../mol-data/int';\r\nimport { hash2, hashFnv32a } from '../../../mol-data/util';\r\nimport { getAtomicPolymerElements, getCoarsePolymerElements, getAtomicGapElements, getCoarseGapElements, getNucleotideElements, getProteinElements } from './util/polymer';\r\nimport { getPrincipalAxes } from './util/principal-axes';\r\nimport { getBoundary } from '../../../mol-math/geometry/boundary';\r\nimport { Mat4, Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { IndexPairBonds } from '../../../mol-model-formats/structure/property/bonds/index-pair';\r\nimport { ElementSetIntraBondCache } from './unit/bonds/element-set-intra-bond-cache';\r\nimport { ModelSymmetry } from '../../../mol-model-formats/structure/property/symmetry';\r\nvar Unit;\r\n(function (Unit) {\r\n    function isAtomic(u) { return u.kind === 0 /* Atomic */; }\r\n    Unit.isAtomic = isAtomic;\r\n    function isCoarse(u) { return u.kind === 1 /* Spheres */ || u.kind === 2 /* Gaussians */; }\r\n    Unit.isCoarse = isCoarse;\r\n    function isSpheres(u) { return u.kind === 1 /* Spheres */; }\r\n    Unit.isSpheres = isSpheres;\r\n    function isGaussians(u) { return u.kind === 2 /* Gaussians */; }\r\n    Unit.isGaussians = isGaussians;\r\n    function create(id, invariantId, chainGroupId, traits, kind, model, operator, elements, props) {\r\n        switch (kind) {\r\n            case 0 /* Atomic */: return new Atomic(id, invariantId, chainGroupId, traits, model, elements, SymmetryOperator.createMapping(operator, model.atomicConformation, void 0), props !== null && props !== void 0 ? props : AtomicProperties());\r\n            case 1 /* Spheres */: return createCoarse(id, invariantId, chainGroupId, traits, model, 1 /* Spheres */, elements, SymmetryOperator.createMapping(operator, model.coarseConformation.spheres, getSphereRadiusFunc(model)), props !== null && props !== void 0 ? props : CoarseProperties());\r\n            case 2 /* Gaussians */: return createCoarse(id, invariantId, chainGroupId, traits, model, 2 /* Gaussians */, elements, SymmetryOperator.createMapping(operator, model.coarseConformation.gaussians, getGaussianRadiusFunc(model)), props !== null && props !== void 0 ? props : CoarseProperties());\r\n        }\r\n    }\r\n    Unit.create = create;\r\n    function getUnitIndexMap(units) {\r\n        var unitIndexMap = IntMap.Mutable();\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            unitIndexMap.set(units[i].id, i);\r\n        }\r\n        return unitIndexMap;\r\n    }\r\n    function getTransformHash(units) {\r\n        var ids = [];\r\n        for (var i = 0, _i = units.length; i < _i; i++) {\r\n            ids.push(units[i].id);\r\n        }\r\n        return hashFnv32a(ids);\r\n    }\r\n    function SymmetryGroup(units) {\r\n        var props = {};\r\n        return {\r\n            elements: units[0].elements,\r\n            units: units,\r\n            get unitIndexMap() {\r\n                if (props.unitIndexMap)\r\n                    return props.unitIndexMap;\r\n                props.unitIndexMap = getUnitIndexMap(units);\r\n                return props.unitIndexMap;\r\n            },\r\n            hashCode: hashUnit(units[0]),\r\n            transformHash: getTransformHash(units)\r\n        };\r\n    }\r\n    Unit.SymmetryGroup = SymmetryGroup;\r\n    (function (SymmetryGroup) {\r\n        function areInvariantElementsEqual(a, b) {\r\n            if (a.hashCode !== b.hashCode)\r\n                return false;\r\n            return SortedArray.areEqual(a.elements, b.elements);\r\n        }\r\n        SymmetryGroup.areInvariantElementsEqual = areInvariantElementsEqual;\r\n        function getUnitSymmetryGroupsIndexMap(symmetryGroups) {\r\n            var unitSymmetryGroupsIndexMap = IntMap.Mutable();\r\n            for (var i = 0, il = symmetryGroups.length; i < il; ++i) {\r\n                var sg = symmetryGroups[i];\r\n                for (var j = 0, jl = sg.units.length; j < jl; ++j) {\r\n                    unitSymmetryGroupsIndexMap.set(sg.units[j].id, i);\r\n                }\r\n            }\r\n            return unitSymmetryGroupsIndexMap;\r\n        }\r\n        SymmetryGroup.getUnitSymmetryGroupsIndexMap = getUnitSymmetryGroupsIndexMap;\r\n    })(SymmetryGroup = Unit.SymmetryGroup || (Unit.SymmetryGroup = {}));\r\n    function conformationId(unit) {\r\n        return Unit.isAtomic(unit) ? unit.model.atomicConformation.id : unit.model.coarseConformation.id;\r\n    }\r\n    Unit.conformationId = conformationId;\r\n    function hashUnit(u) {\r\n        return hash2(u.invariantId, SortedArray.hashCode(u.elements));\r\n    }\r\n    Unit.hashUnit = hashUnit;\r\n    var Traits;\r\n    (function (Traits) {\r\n        Traits.is = BitFlags.has;\r\n        Traits.create = BitFlags.create;\r\n    })(Traits = Unit.Traits || (Unit.Traits = {}));\r\n    function BaseProperties() {\r\n        return {};\r\n    }\r\n    function getSphereRadiusFunc(model) {\r\n        var r = model.coarseConformation.spheres.radius;\r\n        return function (i) { return r[i]; };\r\n    }\r\n    function getGaussianRadiusFunc(model) {\r\n        // TODO: compute radius for gaussians\r\n        return function (i) { return 0; };\r\n    }\r\n    /**\r\n     * A bulding block of a structure that corresponds\r\n     * to a \"natural group of atoms\" (most often a \"chain\")\r\n     * together with a transformation (rotation and translation)\r\n     * that is dynamically applied to the underlying atom set.\r\n     *\r\n     * An atom set can be referenced by multiple different units which\r\n     * makes construction of assemblies and spacegroups very efficient.\r\n     */\r\n    var Atomic = /** @class */ (function () {\r\n        function Atomic(id, invariantId, chainGroupId, traits, model, elements, conformation, props) {\r\n            this.kind = 0 /* Atomic */;\r\n            this.objectPrimitive = 'atomistic';\r\n            this.id = id;\r\n            this.invariantId = invariantId;\r\n            this.chainGroupId = chainGroupId;\r\n            this.traits = traits;\r\n            this.model = model;\r\n            this.elements = elements;\r\n            this.conformation = conformation;\r\n            this.residueIndex = model.atomicHierarchy.residueAtomSegments.index;\r\n            this.chainIndex = model.atomicHierarchy.chainAtomSegments.index;\r\n            this.props = props;\r\n        }\r\n        Atomic.prototype.getChild = function (elements) {\r\n            if (elements.length === this.elements.length)\r\n                return this;\r\n            return new Atomic(this.id, this.invariantId, this.chainGroupId, this.traits, this.model, elements, this.conformation, AtomicProperties());\r\n        };\r\n        Atomic.prototype.applyOperator = function (id, operator, dontCompose) {\r\n            if (dontCompose === void 0) { dontCompose = false; }\r\n            var op = dontCompose ? operator : SymmetryOperator.compose(this.conformation.operator, operator);\r\n            return new Atomic(id, this.invariantId, this.chainGroupId, this.traits, this.model, this.elements, SymmetryOperator.createMapping(op, this.model.atomicConformation, this.conformation.r), this.props);\r\n        };\r\n        Atomic.prototype.remapModel = function (model, dynamicBonds, props) {\r\n            if (!props) {\r\n                props = __assign(__assign({}, this.props), { bonds: dynamicBonds ? undefined : tryRemapBonds(this, this.props.bonds, model) });\r\n                if (!Unit.isSameConformation(this, model)) {\r\n                    props.boundary = undefined;\r\n                    props.lookup3d = undefined;\r\n                    props.principalAxes = undefined;\r\n                }\r\n            }\r\n            var operator = this.conformation.operator;\r\n            var symmetry = ModelSymmetry.Provider.get(model);\r\n            if (operator.spgrOp !== -1 && symmetry && symmetry !== ModelSymmetry.Provider.get(this.model)) {\r\n                var _a = operator.hkl, i = _a[0], j = _a[1], k = _a[2];\r\n                var toFractional = symmetry.spacegroup.cell.toFractional;\r\n                var ref = Vec3.transformMat4(Vec3(), Model.getCenter(model), toFractional);\r\n                operator = Spacegroup.getSymmetryOperatorRef(symmetry.spacegroup, operator.spgrOp, i, j, k, ref);\r\n            }\r\n            var conformation = (this.model.atomicConformation !== model.atomicConformation || operator !== this.conformation.operator)\r\n                ? SymmetryOperator.createMapping(operator, model.atomicConformation)\r\n                : this.conformation;\r\n            return new Atomic(this.id, this.invariantId, this.chainGroupId, this.traits, model, this.elements, conformation, props);\r\n        };\r\n        Object.defineProperty(Atomic.prototype, \"boundary\", {\r\n            get: function () {\r\n                if (this.props.boundary)\r\n                    return this.props.boundary;\r\n                var _a = this.model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n                this.props.boundary = getBoundary({ x: x, y: y, z: z, indices: this.elements });\r\n                return this.props.boundary;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"lookup3d\", {\r\n            get: function () {\r\n                if (this.props.lookup3d)\r\n                    return this.props.lookup3d;\r\n                var _a = this.model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n                this.props.lookup3d = GridLookup3D({ x: x, y: y, z: z, indices: this.elements }, this.boundary);\r\n                return this.props.lookup3d;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"principalAxes\", {\r\n            get: function () {\r\n                if (this.props.principalAxes)\r\n                    return this.props.principalAxes;\r\n                this.props.principalAxes = getPrincipalAxes(this);\r\n                return this.props.principalAxes;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"bonds\", {\r\n            get: function () {\r\n                if (this.props.bonds)\r\n                    return this.props.bonds;\r\n                var cache = ElementSetIntraBondCache.get(this.model);\r\n                var bonds = cache.get(this.elements);\r\n                if (!bonds) {\r\n                    bonds = computeIntraUnitBonds(this);\r\n                    cache.set(this.elements, bonds);\r\n                }\r\n                this.props.bonds = bonds;\r\n                return this.props.bonds;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"rings\", {\r\n            get: function () {\r\n                if (this.props.rings)\r\n                    return this.props.rings;\r\n                this.props.rings = UnitRings.create(this);\r\n                return this.props.rings;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"polymerElements\", {\r\n            get: function () {\r\n                if (this.props.polymerElements)\r\n                    return this.props.polymerElements;\r\n                this.props.polymerElements = getAtomicPolymerElements(this);\r\n                return this.props.polymerElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"gapElements\", {\r\n            get: function () {\r\n                if (this.props.gapElements)\r\n                    return this.props.gapElements;\r\n                this.props.gapElements = getAtomicGapElements(this);\r\n                return this.props.gapElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"nucleotideElements\", {\r\n            get: function () {\r\n                if (this.props.nucleotideElements)\r\n                    return this.props.nucleotideElements;\r\n                this.props.nucleotideElements = getNucleotideElements(this);\r\n                return this.props.nucleotideElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"proteinElements\", {\r\n            get: function () {\r\n                if (this.props.proteinElements)\r\n                    return this.props.proteinElements;\r\n                this.props.proteinElements = getProteinElements(this);\r\n                return this.props.proteinElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Atomic.prototype, \"residueCount\", {\r\n            get: function () {\r\n                if (this.props.residueCount !== undefined)\r\n                    return this.props.residueCount;\r\n                var residueCount = 0;\r\n                var residueIt = Segmentation.transientSegments(this.model.atomicHierarchy.residueAtomSegments, this.elements);\r\n                while (residueIt.hasNext) {\r\n                    residueIt.move();\r\n                    residueCount += 1;\r\n                }\r\n                this.props.residueCount = residueCount;\r\n                return this.props.residueCount;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Atomic.prototype.getResidueIndex = function (elementIndex) {\r\n            return this.residueIndex[this.elements[elementIndex]];\r\n        };\r\n        return Atomic;\r\n    }());\r\n    Unit.Atomic = Atomic;\r\n    function AtomicProperties() {\r\n        return BaseProperties();\r\n    }\r\n    var Coarse = /** @class */ (function () {\r\n        function Coarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props) {\r\n            this.kind = kind;\r\n            this.objectPrimitive = kind === 1 /* Spheres */ ? 'sphere' : 'gaussian';\r\n            this.id = id;\r\n            this.invariantId = invariantId;\r\n            this.chainGroupId = chainGroupId;\r\n            this.traits = traits;\r\n            this.model = model;\r\n            this.elements = elements;\r\n            this.conformation = conformation;\r\n            this.coarseElements = kind === 1 /* Spheres */ ? model.coarseHierarchy.spheres : model.coarseHierarchy.gaussians;\r\n            this.coarseConformation = (kind === 1 /* Spheres */ ? model.coarseConformation.spheres : model.coarseConformation.gaussians);\r\n            this.props = props;\r\n        }\r\n        Coarse.prototype.getChild = function (elements) {\r\n            if (elements.length === this.elements.length)\r\n                return this; // lets call this an ugly temporary hack\r\n            return createCoarse(this.id, this.invariantId, this.chainGroupId, this.traits, this.model, this.kind, elements, this.conformation, CoarseProperties());\r\n        };\r\n        Coarse.prototype.applyOperator = function (id, operator, dontCompose) {\r\n            if (dontCompose === void 0) { dontCompose = false; }\r\n            var op = dontCompose ? operator : SymmetryOperator.compose(this.conformation.operator, operator);\r\n            return createCoarse(id, this.invariantId, this.chainGroupId, this.traits, this.model, this.kind, this.elements, SymmetryOperator.createMapping(op, this.getCoarseConformation(), this.conformation.r), this.props);\r\n        };\r\n        Coarse.prototype.remapModel = function (model, dynamicBonds, props) {\r\n            var coarseConformation = this.getCoarseConformation();\r\n            var modelCoarseConformation = getCoarseConformation(this.kind, model);\r\n            if (!props) {\r\n                props = __assign({}, this.props);\r\n                if (!Unit.isSameConformation(this, model)) { // TODO get rid of casting\r\n                    props.boundary = undefined;\r\n                    props.lookup3d = undefined;\r\n                    props.principalAxes = undefined;\r\n                }\r\n            }\r\n            var conformation = coarseConformation !== modelCoarseConformation\r\n                ? SymmetryOperator.createMapping(this.conformation.operator, modelCoarseConformation)\r\n                : this.conformation;\r\n            return new Coarse(this.id, this.invariantId, this.chainGroupId, this.traits, model, this.kind, this.elements, conformation, props); // TODO get rid of casting\r\n        };\r\n        Object.defineProperty(Coarse.prototype, \"boundary\", {\r\n            get: function () {\r\n                if (this.props.boundary)\r\n                    return this.props.boundary;\r\n                // TODO: support sphere radius?\r\n                var _a = this.getCoarseConformation(), x = _a.x, y = _a.y, z = _a.z;\r\n                this.props.boundary = getBoundary({ x: x, y: y, z: z, indices: this.elements });\r\n                return this.props.boundary;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Coarse.prototype, \"lookup3d\", {\r\n            get: function () {\r\n                if (this.props.lookup3d)\r\n                    return this.props.lookup3d;\r\n                // TODO: support sphere radius?\r\n                var _a = this.getCoarseConformation(), x = _a.x, y = _a.y, z = _a.z;\r\n                this.props.lookup3d = GridLookup3D({ x: x, y: y, z: z, indices: this.elements }, this.boundary);\r\n                return this.props.lookup3d;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Coarse.prototype, \"principalAxes\", {\r\n            get: function () {\r\n                if (this.props.principalAxes)\r\n                    return this.props.principalAxes;\r\n                this.props.principalAxes = getPrincipalAxes(this); // TODO get rid of casting\r\n                return this.props.principalAxes;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Coarse.prototype, \"polymerElements\", {\r\n            get: function () {\r\n                if (this.props.polymerElements)\r\n                    return this.props.polymerElements;\r\n                this.props.polymerElements = getCoarsePolymerElements(this); // TODO get rid of casting\r\n                return this.props.polymerElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Coarse.prototype, \"gapElements\", {\r\n            get: function () {\r\n                if (this.props.gapElements)\r\n                    return this.props.gapElements;\r\n                this.props.gapElements = getCoarseGapElements(this); // TODO get rid of casting\r\n                return this.props.gapElements;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Coarse.prototype.getCoarseConformation = function () {\r\n            return getCoarseConformation(this.kind, this.model);\r\n        };\r\n        return Coarse;\r\n    }());\r\n    function getCoarseConformation(kind, model) {\r\n        return kind === 1 /* Spheres */ ? model.coarseConformation.spheres : model.coarseConformation.gaussians;\r\n    }\r\n    function CoarseProperties() {\r\n        return BaseProperties();\r\n    }\r\n    var Spheres = /** @class */ (function (_super) {\r\n        __extends(Spheres, _super);\r\n        function Spheres() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        return Spheres;\r\n    }(Coarse));\r\n    Unit.Spheres = Spheres;\r\n    var Gaussians = /** @class */ (function (_super) {\r\n        __extends(Gaussians, _super);\r\n        function Gaussians() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        return Gaussians;\r\n    }(Coarse));\r\n    Unit.Gaussians = Gaussians;\r\n    function createCoarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props) {\r\n        return new Coarse(id, invariantId, chainGroupId, traits, model, kind, elements, conformation, props); // lets call this an ugly temporary hack\r\n    }\r\n    function areSameChainOperatorGroup(a, b) {\r\n        return a.chainGroupId === b.chainGroupId && a.conformation.operator.name === b.conformation.operator.name;\r\n    }\r\n    Unit.areSameChainOperatorGroup = areSameChainOperatorGroup;\r\n    function areOperatorsEqual(a, b) {\r\n        return Mat4.areEqual(a.conformation.operator.matrix, b.conformation.operator.matrix, 1e-6);\r\n    }\r\n    Unit.areOperatorsEqual = areOperatorsEqual;\r\n    function areConformationsEqual(a, b) {\r\n        if (!SortedArray.areEqual(a.elements, b.elements))\r\n            return false;\r\n        return isSameConformation(a, b.model);\r\n    }\r\n    Unit.areConformationsEqual = areConformationsEqual;\r\n    function tryRemapBonds(a, old, model) {\r\n        // TODO: should include additional checks?\r\n        var _a;\r\n        if (!old)\r\n            return void 0;\r\n        if (a.model.atomicConformation.id === model.atomicConformation.id)\r\n            return old;\r\n        var oldIndex = IndexPairBonds.Provider.get(a.model);\r\n        if (oldIndex) {\r\n            var newIndex = IndexPairBonds.Provider.get(model);\r\n            // TODO: check the actual indices instead of just reference equality?\r\n            if (!newIndex || oldIndex === newIndex)\r\n                return old;\r\n            return void 0;\r\n        }\r\n        if ((_a = old.props) === null || _a === void 0 ? void 0 : _a.canRemap) {\r\n            return old;\r\n        }\r\n        return isSameConformation(a, model) ? old : void 0;\r\n    }\r\n    function isSameConformation(u, model) {\r\n        var coordsHistory = Model.CoordinatesHistory.get(Model.getRoot(model));\r\n        if (coordsHistory)\r\n            return coordsHistory.areEqual(u.elements, u.kind, model);\r\n        var xs = u.elements;\r\n        var _a = u.conformation.coordinates, xa = _a.x, ya = _a.y, za = _a.z;\r\n        var _b = getModelConformationOfKind(u.kind, model), xb = _b.x, yb = _b.y, zb = _b.z;\r\n        for (var i = 0, _i = xs.length; i < _i; i++) {\r\n            var u_1 = xs[i];\r\n            if (xa[u_1] !== xb[u_1] || ya[u_1] !== yb[u_1] || za[u_1] !== zb[u_1])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Unit.isSameConformation = isSameConformation;\r\n    function getModelConformationOfKind(kind, model) {\r\n        return kind === 0 /* Atomic */ ? model.atomicConformation :\r\n            kind === 1 /* Spheres */ ? model.coarseConformation.spheres :\r\n                model.coarseConformation.gaussians;\r\n    }\r\n    Unit.getModelConformationOfKind = getModelConformationOfKind;\r\n    function getConformation(u) {\r\n        return getModelConformationOfKind(u.kind, u.model);\r\n    }\r\n    Unit.getConformation = getConformation;\r\n    function getModelHierarchyOfKind(kind, model) {\r\n        return kind === 0 /* Atomic */ ? model.atomicHierarchy :\r\n            kind === 1 /* Spheres */ ? model.coarseHierarchy.spheres :\r\n                model.coarseHierarchy.gaussians;\r\n    }\r\n    Unit.getModelHierarchyOfKind = getModelHierarchyOfKind;\r\n    function getHierarchy(u) {\r\n        return getModelHierarchyOfKind(u.kind, u.model);\r\n    }\r\n    Unit.getHierarchy = getHierarchy;\r\n})(Unit || (Unit = {}));\r\nexport { Unit };\r\n//# sourceMappingURL=unit.js.map"]},"metadata":{},"sourceType":"module"}