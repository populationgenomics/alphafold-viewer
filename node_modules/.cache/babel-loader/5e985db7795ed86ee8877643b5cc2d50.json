{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { ChunkedArray } from '../../../../mol-data/util';\nvar normalVector = Vec3();\nvar surfacePoint = Vec3();\nvar controlPoint = Vec3();\nvar u = Vec3();\nvar v = Vec3();\n\nfunction add2AndScale2(out, a, b, sa, sb) {\n  out[0] = a[0] * sa + b[0] * sb;\n  out[1] = a[1] * sa + b[1] * sb;\n  out[2] = a[2] * sa + b[2] * sb;\n}\n\nfunction add3AndScale2(out, a, b, c, sa, sb) {\n  out[0] = a[0] * sa + b[0] * sb + c[0];\n  out[1] = a[1] * sa + b[1] * sb + c[1];\n  out[2] = a[2] * sa + b[2] * sb + c[2];\n} // avoiding namespace lookup improved performance in Chrome (Aug 2020)\n\n\nvar v3fromArray = Vec3.fromArray;\nvar v3normalize = Vec3.normalize;\nvar v3negate = Vec3.negate;\nvar v3copy = Vec3.copy;\nvar v3cross = Vec3.cross;\nvar caAdd3 = ChunkedArray.add3;\nvar CosSinCache = new Map();\n\nfunction getCosSin(radialSegments) {\n  if (!CosSinCache.has(radialSegments)) {\n    var cos = [];\n    var sin = [];\n\n    for (var j = 0; j < radialSegments; ++j) {\n      var t = 2 * Math.PI * j / radialSegments;\n      cos[j] = Math.cos(t);\n      sin[j] = Math.sin(t);\n    }\n\n    CosSinCache.set(radialSegments, {\n      cos: cos,\n      sin: sin\n    });\n  }\n\n  return CosSinCache.get(radialSegments);\n}\n\nexport function addTube(state, controlPoints, normalVectors, binormalVectors, linearSegments, radialSegments, widthValues, heightValues, startCap, endCap) {\n  var currentGroup = state.currentGroup,\n      vertices = state.vertices,\n      normals = state.normals,\n      indices = state.indices,\n      groups = state.groups;\n  var vertexCount = vertices.elementCount;\n\n  var _a = getCosSin(radialSegments),\n      cos = _a.cos,\n      sin = _a.sin;\n\n  for (var i = 0; i <= linearSegments; ++i) {\n    var i3 = i * 3;\n    v3fromArray(u, normalVectors, i3);\n    v3fromArray(v, binormalVectors, i3);\n    v3fromArray(controlPoint, controlPoints, i3);\n    var width = widthValues[i];\n    var height = heightValues[i];\n\n    for (var j = 0; j < radialSegments; ++j) {\n      add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[j], width * sin[j]);\n\n      if (radialSegments === 2) {\n        v3copy(normalVector, v);\n        v3normalize(normalVector, normalVector);\n        if (j !== 0 || i % 2 === 0) v3negate(normalVector, normalVector);\n      } else {\n        add2AndScale2(normalVector, u, v, width * cos[j], height * sin[j]);\n      }\n\n      v3normalize(normalVector, normalVector);\n      caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\n      caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\n    }\n  }\n\n  for (var i = 0; i < linearSegments; ++i) {\n    for (var j = 0; j < radialSegments; ++j) {\n      caAdd3(indices, vertexCount + i * radialSegments + (j + 1) % radialSegments, vertexCount + (i + 1) * radialSegments + (j + 1) % radialSegments, vertexCount + i * radialSegments + j);\n      caAdd3(indices, vertexCount + (i + 1) * radialSegments + (j + 1) % radialSegments, vertexCount + (i + 1) * radialSegments + j, vertexCount + i * radialSegments + j);\n    }\n  }\n\n  if (startCap) {\n    var offset = 0;\n    var centerVertex = vertices.elementCount;\n    v3fromArray(u, normalVectors, offset);\n    v3fromArray(v, binormalVectors, offset);\n    v3fromArray(controlPoint, controlPoints, offset);\n    v3cross(normalVector, v, u);\n    caAdd3(vertices, controlPoint[0], controlPoint[1], controlPoint[2]);\n    caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\n    var width = widthValues[0];\n    var height = heightValues[0];\n    vertexCount = vertices.elementCount;\n\n    for (var i = 0; i < radialSegments; ++i) {\n      add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[i], width * sin[i]);\n      caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\n      caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\n      caAdd3(indices, vertexCount + (i + 1) % radialSegments, vertexCount + i, centerVertex);\n    }\n  }\n\n  if (endCap) {\n    var offset = linearSegments * 3;\n    var centerVertex = vertices.elementCount;\n    v3fromArray(u, normalVectors, offset);\n    v3fromArray(v, binormalVectors, offset);\n    v3fromArray(controlPoint, controlPoints, offset);\n    v3cross(normalVector, u, v);\n    caAdd3(vertices, controlPoint[0], controlPoint[1], controlPoint[2]);\n    caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\n    var width = widthValues[linearSegments];\n    var height = heightValues[linearSegments];\n    vertexCount = vertices.elementCount;\n\n    for (var i = 0; i < radialSegments; ++i) {\n      add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[i], width * sin[i]);\n      caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\n      caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\n      caAdd3(indices, vertexCount + i, vertexCount + (i + 1) % radialSegments, centerVertex);\n    }\n  }\n\n  var addedVertexCount = (linearSegments + 1) * radialSegments + (startCap ? radialSegments + 1 : 0) + (endCap ? radialSegments + 1 : 0);\n  ChunkedArray.addRepeat(groups, addedVertexCount, currentGroup);\n}","map":{"version":3,"sources":["../../../../../src/mol-geo/geometry/mesh/builder/tube.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n */\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { ChunkedArray } from '../../../../mol-data/util';\r\nvar normalVector = Vec3();\r\nvar surfacePoint = Vec3();\r\nvar controlPoint = Vec3();\r\nvar u = Vec3();\r\nvar v = Vec3();\r\nfunction add2AndScale2(out, a, b, sa, sb) {\r\n    out[0] = (a[0] * sa) + (b[0] * sb);\r\n    out[1] = (a[1] * sa) + (b[1] * sb);\r\n    out[2] = (a[2] * sa) + (b[2] * sb);\r\n}\r\nfunction add3AndScale2(out, a, b, c, sa, sb) {\r\n    out[0] = (a[0] * sa) + (b[0] * sb) + c[0];\r\n    out[1] = (a[1] * sa) + (b[1] * sb) + c[1];\r\n    out[2] = (a[2] * sa) + (b[2] * sb) + c[2];\r\n}\r\n// avoiding namespace lookup improved performance in Chrome (Aug 2020)\r\nvar v3fromArray = Vec3.fromArray;\r\nvar v3normalize = Vec3.normalize;\r\nvar v3negate = Vec3.negate;\r\nvar v3copy = Vec3.copy;\r\nvar v3cross = Vec3.cross;\r\nvar caAdd3 = ChunkedArray.add3;\r\nvar CosSinCache = new Map();\r\nfunction getCosSin(radialSegments) {\r\n    if (!CosSinCache.has(radialSegments)) {\r\n        var cos = [];\r\n        var sin = [];\r\n        for (var j = 0; j < radialSegments; ++j) {\r\n            var t = 2 * Math.PI * j / radialSegments;\r\n            cos[j] = Math.cos(t);\r\n            sin[j] = Math.sin(t);\r\n        }\r\n        CosSinCache.set(radialSegments, { cos: cos, sin: sin });\r\n    }\r\n    return CosSinCache.get(radialSegments);\r\n}\r\nexport function addTube(state, controlPoints, normalVectors, binormalVectors, linearSegments, radialSegments, widthValues, heightValues, startCap, endCap) {\r\n    var currentGroup = state.currentGroup, vertices = state.vertices, normals = state.normals, indices = state.indices, groups = state.groups;\r\n    var vertexCount = vertices.elementCount;\r\n    var _a = getCosSin(radialSegments), cos = _a.cos, sin = _a.sin;\r\n    for (var i = 0; i <= linearSegments; ++i) {\r\n        var i3 = i * 3;\r\n        v3fromArray(u, normalVectors, i3);\r\n        v3fromArray(v, binormalVectors, i3);\r\n        v3fromArray(controlPoint, controlPoints, i3);\r\n        var width = widthValues[i];\r\n        var height = heightValues[i];\r\n        for (var j = 0; j < radialSegments; ++j) {\r\n            add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[j], width * sin[j]);\r\n            if (radialSegments === 2) {\r\n                v3copy(normalVector, v);\r\n                v3normalize(normalVector, normalVector);\r\n                if (j !== 0 || i % 2 === 0)\r\n                    v3negate(normalVector, normalVector);\r\n            }\r\n            else {\r\n                add2AndScale2(normalVector, u, v, width * cos[j], height * sin[j]);\r\n            }\r\n            v3normalize(normalVector, normalVector);\r\n            caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\r\n            caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\r\n        }\r\n    }\r\n    for (var i = 0; i < linearSegments; ++i) {\r\n        for (var j = 0; j < radialSegments; ++j) {\r\n            caAdd3(indices, vertexCount + i * radialSegments + (j + 1) % radialSegments, vertexCount + (i + 1) * radialSegments + (j + 1) % radialSegments, vertexCount + i * radialSegments + j);\r\n            caAdd3(indices, vertexCount + (i + 1) * radialSegments + (j + 1) % radialSegments, vertexCount + (i + 1) * radialSegments + j, vertexCount + i * radialSegments + j);\r\n        }\r\n    }\r\n    if (startCap) {\r\n        var offset = 0;\r\n        var centerVertex = vertices.elementCount;\r\n        v3fromArray(u, normalVectors, offset);\r\n        v3fromArray(v, binormalVectors, offset);\r\n        v3fromArray(controlPoint, controlPoints, offset);\r\n        v3cross(normalVector, v, u);\r\n        caAdd3(vertices, controlPoint[0], controlPoint[1], controlPoint[2]);\r\n        caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\r\n        var width = widthValues[0];\r\n        var height = heightValues[0];\r\n        vertexCount = vertices.elementCount;\r\n        for (var i = 0; i < radialSegments; ++i) {\r\n            add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[i], width * sin[i]);\r\n            caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\r\n            caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\r\n            caAdd3(indices, vertexCount + (i + 1) % radialSegments, vertexCount + i, centerVertex);\r\n        }\r\n    }\r\n    if (endCap) {\r\n        var offset = linearSegments * 3;\r\n        var centerVertex = vertices.elementCount;\r\n        v3fromArray(u, normalVectors, offset);\r\n        v3fromArray(v, binormalVectors, offset);\r\n        v3fromArray(controlPoint, controlPoints, offset);\r\n        v3cross(normalVector, u, v);\r\n        caAdd3(vertices, controlPoint[0], controlPoint[1], controlPoint[2]);\r\n        caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\r\n        var width = widthValues[linearSegments];\r\n        var height = heightValues[linearSegments];\r\n        vertexCount = vertices.elementCount;\r\n        for (var i = 0; i < radialSegments; ++i) {\r\n            add3AndScale2(surfacePoint, u, v, controlPoint, height * cos[i], width * sin[i]);\r\n            caAdd3(vertices, surfacePoint[0], surfacePoint[1], surfacePoint[2]);\r\n            caAdd3(normals, normalVector[0], normalVector[1], normalVector[2]);\r\n            caAdd3(indices, vertexCount + i, vertexCount + (i + 1) % radialSegments, centerVertex);\r\n        }\r\n    }\r\n    var addedVertexCount = (linearSegments + 1) * radialSegments + (startCap ? radialSegments + 1 : 0) + (endCap ? radialSegments + 1 : 0);\r\n    ChunkedArray.addRepeat(groups, addedVertexCount, currentGroup);\r\n}\r\n//# sourceMappingURL=tube.js.map"]},"metadata":{},"sourceType":"module"}