{"ast":null,"code":"/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ElementPointVisual, ElementPointParams } from '../visual/element-point';\nimport { UnitsRepresentation } from '../units-representation';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nvar PointVisuals = {\n  'element-point': function (ctx, getParams) {\n    return UnitsRepresentation('Points', ctx, getParams, ElementPointVisual);\n  }\n};\nexport var PointParams = __assign({}, ElementPointParams);\nexport function getPointParams(ctx, structure) {\n  return PD.clone(PointParams);\n}\nexport function PointRepresentation(ctx, getParams) {\n  return Representation.createMulti('Point', ctx, getParams, StructureRepresentationStateBuilder, PointVisuals);\n}\nexport var PointRepresentationProvider = StructureRepresentationProvider({\n  name: 'point',\n  label: 'Point',\n  description: 'Displays elements (atoms, coarse spheres) as points.',\n  factory: PointRepresentation,\n  getParams: getPointParams,\n  defaultValues: PD.getDefaultValues(PointParams),\n  defaultColorTheme: {\n    name: 'element-symbol'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/point.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,kBAAT,EAA6B,kBAA7B,QAAuD,yBAAvD;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAkC,+BAAlC,EAAmE,mCAAnE,QAA8G,mBAA9G;AACA,SAAS,cAAT,QAAkF,kCAAlF;AAIA,IAAM,YAAY,GAAG;AACjB,mBAAiB,UAAC,GAAD,EAA6B,SAA7B,EAAiG;AAAK,WAAA,mBAAmB,CAAC,QAAD,EAAW,GAAX,EAAgB,SAAhB,EAAnB,kBAAmB,CAAnB;AAAiE;AADvK,CAArB;AAIA,OAAO,IAAM,WAAW,GAAA,QAAA,CAAA,EAAA,EACjB,kBADiB,CAAjB;AAIP,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoD,SAApD,EAAwE;AAC1E,SAAO,EAAE,CAAC,KAAH,CAAS,WAAT,CAAP;AACH;AAGD,OAAM,SAAU,mBAAV,CAA8B,GAA9B,EAA0D,SAA1D,EAAuH;AACzH,SAAO,cAAc,CAAC,WAAf,CAA2B,OAA3B,EAAoC,GAApC,EAAyC,SAAzC,EAAoD,mCAApD,EAAyF,YAAzF,CAAP;AACH;AAED,OAAO,IAAM,2BAA2B,GAAG,+BAA+B,CAAC;AACvE,EAAA,IAAI,EAAE,OADiE;AAEvE,EAAA,KAAK,EAAE,OAFgE;AAGvE,EAAA,WAAW,EAAE,sDAH0D;AAIvE,EAAA,OAAO,EAAE,mBAJ8D;AAKvE,EAAA,SAAS,EAAE,cAL4D;AAMvE,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,WAApB,CANwD;AAOvE,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAPoD;AAQvE,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GARqD;AASvE,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATK,CAAD,CAAnE","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ElementPointVisual, ElementPointParams } from '../visual/element-point';\r\nimport { UnitsRepresentation } from '../units-representation';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { StructureRepresentationProvider, StructureRepresentationStateBuilder } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nvar PointVisuals = {\r\n    'element-point': function (ctx, getParams) { return UnitsRepresentation('Points', ctx, getParams, ElementPointVisual); },\r\n};\r\nexport var PointParams = __assign({}, ElementPointParams);\r\nexport function getPointParams(ctx, structure) {\r\n    return PD.clone(PointParams);\r\n}\r\nexport function PointRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Point', ctx, getParams, StructureRepresentationStateBuilder, PointVisuals);\r\n}\r\nexport var PointRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'point',\r\n    label: 'Point',\r\n    description: 'Displays elements (atoms, coarse spheres) as points.',\r\n    factory: PointRepresentation,\r\n    getParams: getPointParams,\r\n    defaultValues: PD.getDefaultValues(PointParams),\r\n    defaultColorTheme: { name: 'element-symbol' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=point.js.map"]},"metadata":{},"sourceType":"module"}