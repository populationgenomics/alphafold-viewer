{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { GaussianDensityVolumeParams, GaussianDensityVolumeVisual, UnitsGaussianDensityVolumeVisual } from '../visual/gaussian-density-volume';\nimport { StructureRepresentationProvider, ComplexRepresentation, StructureRepresentationStateBuilder, UnitsRepresentation } from '../representation';\nimport { Representation } from '../../../mol-repr/representation';\nimport { DirectVolume } from '../../../mol-geo/geometry/direct-volume/direct-volume';\nvar GaussianVolumeVisuals = {\n  'gaussian-volume': function (ctx, getParams) {\n    return ComplexRepresentation('Gaussian volume', ctx, getParams, GaussianDensityVolumeVisual);\n  },\n  'units-gaussian-volume': function (ctx, getParams) {\n    return UnitsRepresentation('Units-Gaussian volume', ctx, getParams, UnitsGaussianDensityVolumeVisual);\n  }\n};\nexport var GaussianVolumeParams = __assign(__assign({}, GaussianDensityVolumeParams), {\n  visuals: PD.MultiSelect(['gaussian-volume'], PD.objectToOptions(GaussianVolumeVisuals))\n});\nexport function getGaussianVolumeParams(ctx, structure) {\n  var p = PD.clone(GaussianVolumeParams);\n  p.renderMode = DirectVolume.createRenderModeParam({\n    // TODO find a better way to set\n    min: 0,\n    max: 1,\n    mean: 0.04,\n    sigma: 0.01\n  });\n  p.jumpLength = PD.Numeric(4, {\n    min: 0,\n    max: 20,\n    step: 0.1\n  });\n  return p;\n}\nexport function GaussianVolumeRepresentation(ctx, getParams) {\n  return Representation.createMulti('Gaussian Volume', ctx, getParams, StructureRepresentationStateBuilder, GaussianVolumeVisuals);\n}\nexport var GaussianVolumeRepresentationProvider = StructureRepresentationProvider({\n  name: 'gaussian-volume',\n  label: 'Gaussian Volume',\n  description: 'Displays a gaussian molecular density using direct volume rendering.',\n  factory: GaussianVolumeRepresentation,\n  getParams: getGaussianVolumeParams,\n  defaultValues: PD.getDefaultValues(GaussianVolumeParams),\n  defaultColorTheme: {\n    name: 'chain-id'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (structure) {\n    return structure.elementCount > 0;\n  }\n});","map":{"version":3,"sources":["../../../../src/mol-repr/structure/representation/gaussian-volume.ts"],"names":[],"mappings":"AAAA;;;;AAIG;;AAEH,SAAS,eAAe,IAAI,EAA5B,QAAsC,oCAAtC;AACA,SAAS,2BAAT,EAAsC,2BAAtC,EAAqG,gCAArG,QAA6I,mCAA7I;AACA,SAAkC,+BAAlC,EAAmE,qBAAnE,EAA0F,mCAA1F,EAA+H,mBAA/H,QAA0J,mBAA1J;AACA,SAAS,cAAT,QAAkF,kCAAlF;AAGA,SAAS,YAAT,QAA6B,uDAA7B;AAEA,IAAM,qBAAqB,GAAG;AAC1B,qBAAmB,UAAC,GAAD,EAA6B,SAA7B,EAA0G;AAAK,WAAA,qBAAqB,CAAC,iBAAD,EAAoB,GAApB,EAAyB,SAAzB,EAArB,2BAAqB,CAArB;AAAqF,GAD7L;AAE1B,2BAAyB,UAAC,GAAD,EAA6B,SAA7B,EAA+G;AAAK,WAAA,mBAAmB,CAAC,uBAAD,EAA0B,GAA1B,EAA+B,SAA/B,EAAnB,gCAAmB,CAAnB;AAA8F;AAFjN,CAA9B;AAKA,OAAO,IAAM,oBAAoB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC1B,2BAD0B,CAAA,EACC;AAC9B,EAAA,OAAO,EAAE,EAAE,CAAC,WAAH,CAAe,CAAC,iBAAD,CAAf,EAAoC,EAAE,CAAC,eAAH,CAAmB,qBAAnB,CAApC;AADqB,CADD,CAA1B;AAKP,OAAM,SAAU,uBAAV,CAAkC,GAAlC,EAA6D,SAA7D,EAAiF;AACnF,MAAM,CAAC,GAAG,EAAE,CAAC,KAAH,CAAS,oBAAT,CAAV;AACA,EAAA,CAAC,CAAC,UAAF,GAAe,YAAY,CAAC,qBAAb,CAAmC;AAC9C;AACA,IAAA,GAAG,EAAE,CAFyC;AAEtC,IAAA,GAAG,EAAE,CAFiC;AAE9B,IAAA,IAAI,EAAE,IAFwB;AAElB,IAAA,KAAK,EAAE;AAFW,GAAnC,CAAf;AAIA,EAAA,CAAC,CAAC,UAAF,GAAe,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc;AAAE,IAAA,GAAG,EAAE,CAAP;AAAU,IAAA,GAAG,EAAE,EAAf;AAAmB,IAAA,IAAI,EAAE;AAAzB,GAAd,CAAf;AACA,SAAO,CAAP;AACH;AAGD,OAAM,SAAU,4BAAV,CAAuC,GAAvC,EAAmE,SAAnE,EAAyI;AAC3I,SAAO,cAAc,CAAC,WAAf,CAA2B,iBAA3B,EAA8C,GAA9C,EAAmD,SAAnD,EAA8D,mCAA9D,EAAmG,qBAAnG,CAAP;AACH;AAED,OAAO,IAAM,oCAAoC,GAAG,+BAA+B,CAAC;AAChF,EAAA,IAAI,EAAE,iBAD0E;AAEhF,EAAA,KAAK,EAAE,iBAFyE;AAGhF,EAAA,WAAW,EAAE,sEAHmE;AAIhF,EAAA,OAAO,EAAE,4BAJuE;AAKhF,EAAA,SAAS,EAAE,uBALqE;AAMhF,EAAA,aAAa,EAAE,EAAE,CAAC,gBAAH,CAAoB,oBAApB,CANiE;AAOhF,EAAA,iBAAiB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAP6D;AAQhF,EAAA,gBAAgB,EAAE;AAAE,IAAA,IAAI,EAAE;AAAR,GAR8D;AAShF,EAAA,YAAY,EAAE,UAAC,SAAD,EAAqB;AAAK,WAAA,SAAS,CAAC,YAAV,GAAA,CAAA;AAA0B;AATc,CAAD,CAA5E","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { GaussianDensityVolumeParams, GaussianDensityVolumeVisual, UnitsGaussianDensityVolumeVisual } from '../visual/gaussian-density-volume';\r\nimport { StructureRepresentationProvider, ComplexRepresentation, StructureRepresentationStateBuilder, UnitsRepresentation } from '../representation';\r\nimport { Representation } from '../../../mol-repr/representation';\r\nimport { DirectVolume } from '../../../mol-geo/geometry/direct-volume/direct-volume';\r\nvar GaussianVolumeVisuals = {\r\n    'gaussian-volume': function (ctx, getParams) { return ComplexRepresentation('Gaussian volume', ctx, getParams, GaussianDensityVolumeVisual); },\r\n    'units-gaussian-volume': function (ctx, getParams) { return UnitsRepresentation('Units-Gaussian volume', ctx, getParams, UnitsGaussianDensityVolumeVisual); }\r\n};\r\nexport var GaussianVolumeParams = __assign(__assign({}, GaussianDensityVolumeParams), { visuals: PD.MultiSelect(['gaussian-volume'], PD.objectToOptions(GaussianVolumeVisuals)) });\r\nexport function getGaussianVolumeParams(ctx, structure) {\r\n    var p = PD.clone(GaussianVolumeParams);\r\n    p.renderMode = DirectVolume.createRenderModeParam({\r\n        // TODO find a better way to set\r\n        min: 0, max: 1, mean: 0.04, sigma: 0.01\r\n    });\r\n    p.jumpLength = PD.Numeric(4, { min: 0, max: 20, step: 0.1 });\r\n    return p;\r\n}\r\nexport function GaussianVolumeRepresentation(ctx, getParams) {\r\n    return Representation.createMulti('Gaussian Volume', ctx, getParams, StructureRepresentationStateBuilder, GaussianVolumeVisuals);\r\n}\r\nexport var GaussianVolumeRepresentationProvider = StructureRepresentationProvider({\r\n    name: 'gaussian-volume',\r\n    label: 'Gaussian Volume',\r\n    description: 'Displays a gaussian molecular density using direct volume rendering.',\r\n    factory: GaussianVolumeRepresentation,\r\n    getParams: getGaussianVolumeParams,\r\n    defaultValues: PD.getDefaultValues(GaussianVolumeParams),\r\n    defaultColorTheme: { name: 'chain-id' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (structure) { return structure.elementCount > 0; }\r\n});\r\n//# sourceMappingURL=gaussian-volume.js.map"]},"metadata":{},"sourceType":"module"}