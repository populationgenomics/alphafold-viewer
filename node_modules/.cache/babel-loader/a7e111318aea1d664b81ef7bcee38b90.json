{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { Vec3, Mat4 } from '../../mol-math/linear-algebra';\nimport { Box3D } from '../../mol-math/geometry';\nimport { Grid, Volume } from '../../mol-model/volume';\nimport { DirectVolume } from '../../mol-geo/geometry/direct-volume/direct-volume';\nimport { VolumeVisual, VolumeRepresentation, VolumeRepresentationProvider } from './representation';\nimport { LocationIterator } from '../../mol-geo/util/location-iterator';\nimport { NullLocation } from '../../mol-model/location';\nimport { Interval } from '../../mol-data/int';\nimport { EmptyLoci } from '../../mol-model/loci';\nimport { createVolumeTexture2d, createVolumeTexture3d, eachVolumeLoci, getVolumeTexture2dLayout } from './util';\n\nfunction getBoundingBox(gridDimension, transform) {\n  var bbox = Box3D();\n  Box3D.add(bbox, gridDimension);\n  Box3D.transform(bbox, bbox, transform);\n  return bbox;\n} // 2d volume texture\n\n\nexport function createDirectVolume2d(ctx, webgl, volume, directVolume) {\n  var gridDimension = volume.grid.cells.space.dimensions;\n\n  var _a = getVolumeTexture2dLayout(gridDimension),\n      width = _a.width,\n      height = _a.height;\n\n  if (Math.max(width, height) > webgl.maxTextureSize / 2) {\n    throw new Error('volume too large for direct-volume rendering');\n  }\n\n  var textureImage = createVolumeTexture2d(volume, 'normals'); // debugTexture(createImageData(textureImage.array, textureImage.width, textureImage.height), 1/3)\n\n  var transform = Grid.getGridToCartesianTransform(volume.grid);\n  var bbox = getBoundingBox(gridDimension, transform);\n  var texture = directVolume ? directVolume.gridTexture.ref.value : webgl.resources.texture('image-uint8', 'rgba', 'ubyte', 'linear');\n  texture.load(textureImage);\n\n  var _b = getUnitToCartn(volume.grid),\n      unitToCartn = _b.unitToCartn,\n      cellDim = _b.cellDim;\n\n  return DirectVolume.create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, volume.grid.stats, false, directVolume);\n} // 3d volume texture\n\nfunction getUnitToCartn(grid) {\n  if (grid.transform.kind === 'matrix') {\n    return {\n      unitToCartn: Mat4.mul(Mat4(), grid.transform.matrix, Mat4.fromScaling(Mat4(), grid.cells.space.dimensions)),\n      cellDim: Mat4.getScaling(Vec3(), grid.transform.matrix)\n    };\n  }\n\n  var box = grid.transform.fractionalBox;\n  var size = Box3D.size(Vec3(), box);\n  return {\n    unitToCartn: Mat4.mul3(Mat4(), grid.transform.cell.fromFractional, Mat4.fromTranslation(Mat4(), box.min), Mat4.fromScaling(Mat4(), size)),\n    cellDim: Vec3.div(Vec3(), grid.transform.cell.size, grid.cells.space.dimensions)\n  };\n}\n\nexport function createDirectVolume3d(ctx, webgl, volume, directVolume) {\n  var gridDimension = volume.grid.cells.space.dimensions;\n\n  if (Math.max.apply(Math, gridDimension) > webgl.max3dTextureSize / 2) {\n    throw new Error('volume too large for direct-volume rendering');\n  }\n\n  var textureVolume = createVolumeTexture3d(volume);\n  var transform = Grid.getGridToCartesianTransform(volume.grid);\n  var bbox = getBoundingBox(gridDimension, transform);\n  var texture = directVolume ? directVolume.gridTexture.ref.value : webgl.resources.texture('volume-uint8', 'rgba', 'ubyte', 'linear');\n  texture.load(textureVolume);\n\n  var _a = getUnitToCartn(volume.grid),\n      unitToCartn = _a.unitToCartn,\n      cellDim = _a.cellDim;\n\n  return DirectVolume.create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, volume.grid.stats, false, directVolume);\n} //\n\nexport function createDirectVolume(ctx, volume, theme, props, directVolume) {\n  return __awaiter(this, void 0, void 0, function () {\n    var runtime, webgl;\n    return __generator(this, function (_a) {\n      runtime = ctx.runtime, webgl = ctx.webgl;\n      if (webgl === undefined) throw new Error('DirectVolumeVisual requires `webgl` in props');\n      return [2\n      /*return*/\n      , webgl.isWebGL2 ? createDirectVolume3d(runtime, webgl, volume, directVolume) : createDirectVolume2d(runtime, webgl, volume, directVolume)];\n    });\n  });\n}\n\nfunction getLoci(volume, props) {\n  return props.renderMode.name === 'isosurface' ? Volume.Isosurface.Loci(volume, props.renderMode.params.isoValue) : Volume.Loci(volume);\n}\n\nexport function getDirectVolumeLoci(pickingId, volume, props, id) {\n  var objectId = pickingId.objectId,\n      groupId = pickingId.groupId;\n\n  if (id === objectId) {\n    return Volume.Cell.Loci(volume, Interval.ofSingleton(groupId));\n  }\n\n  return EmptyLoci;\n}\nexport function eachDirectVolume(loci, volume, props, apply) {\n  var isoValue = props.renderMode.name === 'isosurface' ? props.renderMode.params.isoValue : undefined;\n  return eachVolumeLoci(loci, volume, isoValue, apply);\n} //\n\nexport var DirectVolumeParams = __assign(__assign({}, DirectVolume.Params), {\n  quality: __assign(__assign({}, DirectVolume.Params.quality), {\n    isEssential: false\n  })\n});\nexport function getDirectVolumeParams(ctx, volume) {\n  var p = PD.clone(DirectVolumeParams);\n  p.renderMode = DirectVolume.createRenderModeParam(volume.grid.stats);\n  return p;\n}\nexport function DirectVolumeVisual(materialId) {\n  return VolumeVisual({\n    defaultProps: PD.getDefaultValues(DirectVolumeParams),\n    createGeometry: createDirectVolume,\n    createLocationIterator: function (volume) {\n      return LocationIterator(volume.grid.cells.data.length, 1, 1, function () {\n        return NullLocation;\n      });\n    },\n    getLoci: getDirectVolumeLoci,\n    eachLocation: eachDirectVolume,\n    setUpdateState: function (state, volume, newProps, currentProps) {},\n    geometryUtils: DirectVolume.Utils,\n    dispose: function (geometry) {\n      geometry.gridTexture.ref.value.destroy();\n    }\n  }, materialId);\n}\nexport function DirectVolumeRepresentation(ctx, getParams) {\n  return VolumeRepresentation('Direct Volume', ctx, getParams, DirectVolumeVisual, getLoci);\n}\nexport var DirectVolumeRepresentationProvider = VolumeRepresentationProvider({\n  name: 'direct-volume',\n  label: 'Direct Volume',\n  description: 'Direct rendering of volumetric data.',\n  factory: DirectVolumeRepresentation,\n  getParams: getDirectVolumeParams,\n  defaultValues: PD.getDefaultValues(DirectVolumeParams),\n  defaultColorTheme: {\n    name: 'uniform'\n  },\n  defaultSizeTheme: {\n    name: 'uniform'\n  },\n  isApplicable: function (volume) {\n    return !Volume.isEmpty(volume);\n  }\n});","map":{"version":3,"sources":["../../../src/mol-repr/volume/direct-volume.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { Vec3, Mat4 } from '../../mol-math/linear-algebra';\r\nimport { Box3D } from '../../mol-math/geometry';\r\nimport { Grid, Volume } from '../../mol-model/volume';\r\nimport { DirectVolume } from '../../mol-geo/geometry/direct-volume/direct-volume';\r\nimport { VolumeVisual, VolumeRepresentation, VolumeRepresentationProvider } from './representation';\r\nimport { LocationIterator } from '../../mol-geo/util/location-iterator';\r\nimport { NullLocation } from '../../mol-model/location';\r\nimport { Interval } from '../../mol-data/int';\r\nimport { EmptyLoci } from '../../mol-model/loci';\r\nimport { createVolumeTexture2d, createVolumeTexture3d, eachVolumeLoci, getVolumeTexture2dLayout } from './util';\r\nfunction getBoundingBox(gridDimension, transform) {\r\n    var bbox = Box3D();\r\n    Box3D.add(bbox, gridDimension);\r\n    Box3D.transform(bbox, bbox, transform);\r\n    return bbox;\r\n}\r\n// 2d volume texture\r\nexport function createDirectVolume2d(ctx, webgl, volume, directVolume) {\r\n    var gridDimension = volume.grid.cells.space.dimensions;\r\n    var _a = getVolumeTexture2dLayout(gridDimension), width = _a.width, height = _a.height;\r\n    if (Math.max(width, height) > webgl.maxTextureSize / 2) {\r\n        throw new Error('volume too large for direct-volume rendering');\r\n    }\r\n    var textureImage = createVolumeTexture2d(volume, 'normals');\r\n    // debugTexture(createImageData(textureImage.array, textureImage.width, textureImage.height), 1/3)\r\n    var transform = Grid.getGridToCartesianTransform(volume.grid);\r\n    var bbox = getBoundingBox(gridDimension, transform);\r\n    var texture = directVolume ? directVolume.gridTexture.ref.value : webgl.resources.texture('image-uint8', 'rgba', 'ubyte', 'linear');\r\n    texture.load(textureImage);\r\n    var _b = getUnitToCartn(volume.grid), unitToCartn = _b.unitToCartn, cellDim = _b.cellDim;\r\n    return DirectVolume.create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, volume.grid.stats, false, directVolume);\r\n}\r\n// 3d volume texture\r\nfunction getUnitToCartn(grid) {\r\n    if (grid.transform.kind === 'matrix') {\r\n        return {\r\n            unitToCartn: Mat4.mul(Mat4(), grid.transform.matrix, Mat4.fromScaling(Mat4(), grid.cells.space.dimensions)),\r\n            cellDim: Mat4.getScaling(Vec3(), grid.transform.matrix)\r\n        };\r\n    }\r\n    var box = grid.transform.fractionalBox;\r\n    var size = Box3D.size(Vec3(), box);\r\n    return {\r\n        unitToCartn: Mat4.mul3(Mat4(), grid.transform.cell.fromFractional, Mat4.fromTranslation(Mat4(), box.min), Mat4.fromScaling(Mat4(), size)),\r\n        cellDim: Vec3.div(Vec3(), grid.transform.cell.size, grid.cells.space.dimensions)\r\n    };\r\n}\r\nexport function createDirectVolume3d(ctx, webgl, volume, directVolume) {\r\n    var gridDimension = volume.grid.cells.space.dimensions;\r\n    if (Math.max.apply(Math, gridDimension) > webgl.max3dTextureSize / 2) {\r\n        throw new Error('volume too large for direct-volume rendering');\r\n    }\r\n    var textureVolume = createVolumeTexture3d(volume);\r\n    var transform = Grid.getGridToCartesianTransform(volume.grid);\r\n    var bbox = getBoundingBox(gridDimension, transform);\r\n    var texture = directVolume ? directVolume.gridTexture.ref.value : webgl.resources.texture('volume-uint8', 'rgba', 'ubyte', 'linear');\r\n    texture.load(textureVolume);\r\n    var _a = getUnitToCartn(volume.grid), unitToCartn = _a.unitToCartn, cellDim = _a.cellDim;\r\n    return DirectVolume.create(bbox, gridDimension, transform, unitToCartn, cellDim, texture, volume.grid.stats, false, directVolume);\r\n}\r\n//\r\nexport function createDirectVolume(ctx, volume, theme, props, directVolume) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var runtime, webgl;\r\n        return __generator(this, function (_a) {\r\n            runtime = ctx.runtime, webgl = ctx.webgl;\r\n            if (webgl === undefined)\r\n                throw new Error('DirectVolumeVisual requires `webgl` in props');\r\n            return [2 /*return*/, webgl.isWebGL2 ?\r\n                    createDirectVolume3d(runtime, webgl, volume, directVolume) :\r\n                    createDirectVolume2d(runtime, webgl, volume, directVolume)];\r\n        });\r\n    });\r\n}\r\nfunction getLoci(volume, props) {\r\n    return props.renderMode.name === 'isosurface'\r\n        ? Volume.Isosurface.Loci(volume, props.renderMode.params.isoValue)\r\n        : Volume.Loci(volume);\r\n}\r\nexport function getDirectVolumeLoci(pickingId, volume, props, id) {\r\n    var objectId = pickingId.objectId, groupId = pickingId.groupId;\r\n    if (id === objectId) {\r\n        return Volume.Cell.Loci(volume, Interval.ofSingleton(groupId));\r\n    }\r\n    return EmptyLoci;\r\n}\r\nexport function eachDirectVolume(loci, volume, props, apply) {\r\n    var isoValue = props.renderMode.name === 'isosurface'\r\n        ? props.renderMode.params.isoValue : undefined;\r\n    return eachVolumeLoci(loci, volume, isoValue, apply);\r\n}\r\n//\r\nexport var DirectVolumeParams = __assign(__assign({}, DirectVolume.Params), { quality: __assign(__assign({}, DirectVolume.Params.quality), { isEssential: false }) });\r\nexport function getDirectVolumeParams(ctx, volume) {\r\n    var p = PD.clone(DirectVolumeParams);\r\n    p.renderMode = DirectVolume.createRenderModeParam(volume.grid.stats);\r\n    return p;\r\n}\r\nexport function DirectVolumeVisual(materialId) {\r\n    return VolumeVisual({\r\n        defaultProps: PD.getDefaultValues(DirectVolumeParams),\r\n        createGeometry: createDirectVolume,\r\n        createLocationIterator: function (volume) { return LocationIterator(volume.grid.cells.data.length, 1, 1, function () { return NullLocation; }); },\r\n        getLoci: getDirectVolumeLoci,\r\n        eachLocation: eachDirectVolume,\r\n        setUpdateState: function (state, volume, newProps, currentProps) {\r\n        },\r\n        geometryUtils: DirectVolume.Utils,\r\n        dispose: function (geometry) {\r\n            geometry.gridTexture.ref.value.destroy();\r\n        }\r\n    }, materialId);\r\n}\r\nexport function DirectVolumeRepresentation(ctx, getParams) {\r\n    return VolumeRepresentation('Direct Volume', ctx, getParams, DirectVolumeVisual, getLoci);\r\n}\r\nexport var DirectVolumeRepresentationProvider = VolumeRepresentationProvider({\r\n    name: 'direct-volume',\r\n    label: 'Direct Volume',\r\n    description: 'Direct rendering of volumetric data.',\r\n    factory: DirectVolumeRepresentation,\r\n    getParams: getDirectVolumeParams,\r\n    defaultValues: PD.getDefaultValues(DirectVolumeParams),\r\n    defaultColorTheme: { name: 'uniform' },\r\n    defaultSizeTheme: { name: 'uniform' },\r\n    isApplicable: function (volume) { return !Volume.isEmpty(volume); }\r\n});\r\n//# sourceMappingURL=direct-volume.js.map"]},"metadata":{},"sourceType":"module"}