{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { EPSILON } from './common';\nimport { Vec3 } from './vec3';\n\nfunction Mat3() {\n  return Mat3.zero();\n}\n\n(function (Mat3) {\n  function zero() {\n    // force double backing array by 0.1.\n    var ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0];\n    ret[0] = 0.0;\n    return ret;\n  }\n\n  Mat3.zero = zero;\n\n  function identity() {\n    var out = zero();\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  }\n\n  Mat3.identity = identity;\n\n  function setIdentity(mat) {\n    mat[0] = 1;\n    mat[1] = 0;\n    mat[2] = 0;\n    mat[3] = 0;\n    mat[4] = 1;\n    mat[5] = 0;\n    mat[6] = 0;\n    mat[7] = 0;\n    mat[8] = 1;\n    return mat;\n  }\n\n  Mat3.setIdentity = setIdentity;\n\n  function toArray(a, out, offset) {\n    out[offset + 0] = a[0];\n    out[offset + 1] = a[1];\n    out[offset + 2] = a[2];\n    out[offset + 3] = a[3];\n    out[offset + 4] = a[4];\n    out[offset + 5] = a[5];\n    out[offset + 6] = a[6];\n    out[offset + 7] = a[7];\n    out[offset + 8] = a[8];\n    return out;\n  }\n\n  Mat3.toArray = toArray;\n\n  function fromArray(a, array, offset) {\n    a[0] = array[offset + 0];\n    a[1] = array[offset + 1];\n    a[2] = array[offset + 2];\n    a[3] = array[offset + 3];\n    a[4] = array[offset + 4];\n    a[5] = array[offset + 5];\n    a[6] = array[offset + 6];\n    a[7] = array[offset + 7];\n    a[8] = array[offset + 8];\n    return a;\n  }\n\n  Mat3.fromArray = fromArray;\n  /**\r\n   * Copies the upper-left 3x3 values into the given mat3.\r\n   */\n\n  function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n  }\n\n  Mat3.fromMat4 = fromMat4;\n\n  function create(a00, a01, a02, a10, a11, a12, a20, a21, a22) {\n    var out = zero();\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n  }\n\n  Mat3.create = create;\n\n  var _id = identity();\n\n  function isIdentity(m, eps) {\n    return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);\n  }\n\n  Mat3.isIdentity = isIdentity;\n\n  function hasNaN(m) {\n    for (var i = 0; i < 9; i++) if (isNaN(m[i])) return true;\n\n    return false;\n  }\n\n  Mat3.hasNaN = hasNaN;\n  /**\r\n   * Creates a new Mat3 initialized with values from an existing matrix\r\n   */\n\n  function clone(a) {\n    return copy(zero(), a);\n  }\n\n  Mat3.clone = clone;\n\n  function areEqual(a, b, eps) {\n    for (var i = 0; i < 9; i++) {\n      if (Math.abs(a[i] - b[i]) > eps) return false;\n    }\n\n    return true;\n  }\n\n  Mat3.areEqual = areEqual;\n\n  function setValue(a, i, j, value) {\n    a[3 * j + i] = value;\n  }\n\n  Mat3.setValue = setValue;\n\n  function getValue(a, i, j) {\n    return a[3 * j + i];\n  }\n\n  Mat3.getValue = getValue;\n  /**\r\n   * Copy the values from one Mat3 to another\r\n   */\n\n  function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  }\n\n  Mat3.copy = copy;\n  /**\r\n   * Transpose the values of a Mat3\r\n   */\n\n  function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n      var a01 = a[1],\n          a02 = a[2],\n          a12 = a[5];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a01;\n      out[5] = a[7];\n      out[6] = a02;\n      out[7] = a12;\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  Mat3.transpose = transpose;\n  /**\r\n   * Inverts a Mat3\r\n   */\n\n  function invert(out, a) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    var a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    var a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      console.warn('non-invertible matrix.', a);\n      return out;\n    }\n\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  Mat3.invert = invert;\n\n  function symmtricFromUpper(out, a) {\n    if (out === a) {\n      out[3] = a[1];\n      out[6] = a[2];\n      out[7] = a[5];\n    } else {\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[5];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  Mat3.symmtricFromUpper = symmtricFromUpper;\n\n  function symmtricFromLower(out, a) {\n    if (out === a) {\n      out[1] = a[3];\n      out[2] = a[6];\n      out[5] = a[7];\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[3];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[6];\n      out[7] = a[7];\n      out[8] = a[8];\n    }\n\n    return out;\n  }\n\n  Mat3.symmtricFromLower = symmtricFromLower;\n\n  function determinant(a) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    var a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    var a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n    return a00 * b01 + a01 * b11 + a02 * b21;\n  }\n\n  Mat3.determinant = determinant;\n\n  function trace(a) {\n    return a[0] + a[4] + a[8];\n  }\n\n  Mat3.trace = trace;\n\n  function sub(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n  }\n\n  Mat3.sub = sub;\n\n  function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n  }\n\n  Mat3.add = add;\n\n  function mul(out, a, b) {\n    var a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n    var b00 = b[0],\n        b01 = b[1],\n        b02 = b[2],\n        b10 = b[3],\n        b11 = b[4],\n        b12 = b[5],\n        b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n  }\n\n  Mat3.mul = mul;\n\n  function subScalar(out, a, s) {\n    out[0] = a[0] - s;\n    out[1] = a[1] - s;\n    out[2] = a[2] - s;\n    out[3] = a[3] - s;\n    out[4] = a[4] - s;\n    out[5] = a[5] - s;\n    out[6] = a[6] - s;\n    out[7] = a[7] - s;\n    out[8] = a[8] - s;\n    return out;\n  }\n\n  Mat3.subScalar = subScalar;\n\n  function addScalar(out, a, s) {\n    out[0] = a[0] + s;\n    out[1] = a[1] + s;\n    out[2] = a[2] + s;\n    out[3] = a[3] + s;\n    out[4] = a[4] + s;\n    out[5] = a[5] + s;\n    out[6] = a[6] + s;\n    out[7] = a[7] + s;\n    out[8] = a[8] + s;\n    return out;\n  }\n\n  Mat3.addScalar = addScalar;\n\n  function mulScalar(out, a, s) {\n    out[0] = a[0] * s;\n    out[1] = a[1] * s;\n    out[2] = a[2] * s;\n    out[3] = a[3] * s;\n    out[4] = a[4] * s;\n    out[5] = a[5] * s;\n    out[6] = a[6] * s;\n    out[7] = a[7] * s;\n    out[8] = a[8] * s;\n    return out;\n  }\n\n  Mat3.mulScalar = mulScalar;\n  var piThird = Math.PI / 3;\n  var tmpB = zero();\n  /**\r\n   * Given a real symmetric 3x3 matrix A, compute the eigenvalues\r\n   *\r\n   * From https://en.wikipedia.org/wiki/Eigenvalue_algorithm#3.C3.973_matrices\r\n   */\n\n  function symmetricEigenvalues(out, a) {\n    var p1 = a[1] * a[1] + a[2] * a[2] + a[5] * a[5];\n\n    if (p1 === 0) {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n    } else {\n      var q = trace(a) / 3;\n      var a1 = a[0] - q;\n      var a2 = a[4] - q;\n      var a3 = a[8] - q;\n      var p2 = a1 * a1 + a2 * a2 + a3 * a3 + 2 * p1;\n      var p = Math.sqrt(p2 / 6);\n      mulScalar(tmpB, Mat3.Identity, q);\n      sub(tmpB, a, tmpB);\n      mulScalar(tmpB, tmpB, 1 / p);\n      var r = determinant(tmpB) / 2; // In exact arithmetic for a symmetric matrix  -1 <= r <= 1\n      // but computation error can leave it slightly outside this range.\n\n      var phi = r <= -1 ? piThird : r >= 1 ? 0 : Math.acos(r) / 3; // the eigenvalues satisfy eig3 <= eig2 <= eig1\n\n      out[0] = q + 2 * p * Math.cos(phi);\n      out[2] = q + 2 * p * Math.cos(phi + 2 * piThird);\n      out[1] = 3 * q - out[0] - out[2]; // since trace(A) = eig1 + eig2 + eig3\n    }\n\n    return out;\n  }\n\n  Mat3.symmetricEigenvalues = symmetricEigenvalues;\n  var tmpR0 = [0.1, 0.0, 0.0];\n  var tmpR1 = [0.1, 0.0, 0.0];\n  var tmpR2 = [0.1, 0.0, 0.0];\n  var tmpR0xR1 = [0.1, 0.0, 0.0];\n  var tmpR0xR2 = [0.1, 0.0, 0.0];\n  var tmpR1xR2 = [0.1, 0.0, 0.0];\n  /**\r\n   * Calculates the eigenvector for the given eigenvalue `e` of matrix `a`\r\n   */\n\n  function eigenvector(out, a, e) {\n    Vec3.set(tmpR0, a[0] - e, a[1], a[2]);\n    Vec3.set(tmpR1, a[1], a[4] - e, a[5]);\n    Vec3.set(tmpR2, a[2], a[5], a[8] - e);\n    Vec3.cross(tmpR0xR1, tmpR0, tmpR1);\n    Vec3.cross(tmpR0xR2, tmpR0, tmpR2);\n    Vec3.cross(tmpR1xR2, tmpR1, tmpR2);\n    var d0 = Vec3.dot(tmpR0xR1, tmpR0xR1);\n    var d1 = Vec3.dot(tmpR0xR2, tmpR0xR2);\n    var d2 = Vec3.dot(tmpR1xR2, tmpR1xR2);\n    var dmax = d0;\n    var imax = 0;\n\n    if (d1 > dmax) {\n      dmax = d1;\n      imax = 1;\n    }\n\n    if (d2 > dmax) imax = 2;\n\n    if (imax === 0) {\n      Vec3.scale(out, tmpR0xR1, 1 / Math.sqrt(d0));\n    } else if (imax === 1) {\n      Vec3.scale(out, tmpR0xR2, 1 / Math.sqrt(d1));\n    } else {\n      Vec3.scale(out, tmpR1xR2, 1 / Math.sqrt(d2));\n    }\n\n    return out;\n  }\n\n  Mat3.eigenvector = eigenvector;\n  /**\r\n   * Get matrix to transform directions, e.g. normals\r\n   */\n\n  function directionTransform(out, t) {\n    fromMat4(out, t);\n    invert(out, out);\n    transpose(out, out);\n    return out;\n  }\n\n  Mat3.directionTransform = directionTransform;\n  Mat3.Identity = identity();\n})(Mat3 || (Mat3 = {}));\n\nexport { Mat3 };","map":{"version":3,"sources":["../../../../src/mol-math/linear-algebra/3d/mat3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { EPSILON } from './common';\r\nimport { Vec3 } from './vec3';\r\nfunction Mat3() {\r\n    return Mat3.zero();\r\n}\r\n(function (Mat3) {\r\n    function zero() {\r\n        // force double backing array by 0.1.\r\n        var ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        ret[0] = 0.0;\r\n        return ret;\r\n    }\r\n    Mat3.zero = zero;\r\n    function identity() {\r\n        var out = zero();\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 1;\r\n        out[5] = 0;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n        return out;\r\n    }\r\n    Mat3.identity = identity;\r\n    function setIdentity(mat) {\r\n        mat[0] = 1;\r\n        mat[1] = 0;\r\n        mat[2] = 0;\r\n        mat[3] = 0;\r\n        mat[4] = 1;\r\n        mat[5] = 0;\r\n        mat[6] = 0;\r\n        mat[7] = 0;\r\n        mat[8] = 1;\r\n        return mat;\r\n    }\r\n    Mat3.setIdentity = setIdentity;\r\n    function toArray(a, out, offset) {\r\n        out[offset + 0] = a[0];\r\n        out[offset + 1] = a[1];\r\n        out[offset + 2] = a[2];\r\n        out[offset + 3] = a[3];\r\n        out[offset + 4] = a[4];\r\n        out[offset + 5] = a[5];\r\n        out[offset + 6] = a[6];\r\n        out[offset + 7] = a[7];\r\n        out[offset + 8] = a[8];\r\n        return out;\r\n    }\r\n    Mat3.toArray = toArray;\r\n    function fromArray(a, array, offset) {\r\n        a[0] = array[offset + 0];\r\n        a[1] = array[offset + 1];\r\n        a[2] = array[offset + 2];\r\n        a[3] = array[offset + 3];\r\n        a[4] = array[offset + 4];\r\n        a[5] = array[offset + 5];\r\n        a[6] = array[offset + 6];\r\n        a[7] = array[offset + 7];\r\n        a[8] = array[offset + 8];\r\n        return a;\r\n    }\r\n    Mat3.fromArray = fromArray;\r\n    /**\r\n     * Copies the upper-left 3x3 values into the given mat3.\r\n     */\r\n    function fromMat4(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[4];\r\n        out[4] = a[5];\r\n        out[5] = a[6];\r\n        out[6] = a[8];\r\n        out[7] = a[9];\r\n        out[8] = a[10];\r\n        return out;\r\n    }\r\n    Mat3.fromMat4 = fromMat4;\r\n    function create(a00, a01, a02, a10, a11, a12, a20, a21, a22) {\r\n        var out = zero();\r\n        out[0] = a00;\r\n        out[1] = a01;\r\n        out[2] = a02;\r\n        out[3] = a10;\r\n        out[4] = a11;\r\n        out[5] = a12;\r\n        out[6] = a20;\r\n        out[7] = a21;\r\n        out[8] = a22;\r\n        return out;\r\n    }\r\n    Mat3.create = create;\r\n    var _id = identity();\r\n    function isIdentity(m, eps) {\r\n        return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);\r\n    }\r\n    Mat3.isIdentity = isIdentity;\r\n    function hasNaN(m) {\r\n        for (var i = 0; i < 9; i++)\r\n            if (isNaN(m[i]))\r\n                return true;\r\n        return false;\r\n    }\r\n    Mat3.hasNaN = hasNaN;\r\n    /**\r\n     * Creates a new Mat3 initialized with values from an existing matrix\r\n     */\r\n    function clone(a) {\r\n        return copy(zero(), a);\r\n    }\r\n    Mat3.clone = clone;\r\n    function areEqual(a, b, eps) {\r\n        for (var i = 0; i < 9; i++) {\r\n            if (Math.abs(a[i] - b[i]) > eps)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    Mat3.areEqual = areEqual;\r\n    function setValue(a, i, j, value) {\r\n        a[3 * j + i] = value;\r\n    }\r\n    Mat3.setValue = setValue;\r\n    function getValue(a, i, j) {\r\n        return a[3 * j + i];\r\n    }\r\n    Mat3.getValue = getValue;\r\n    /**\r\n     * Copy the values from one Mat3 to another\r\n     */\r\n    function copy(out, a) {\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n        return out;\r\n    }\r\n    Mat3.copy = copy;\r\n    /**\r\n     * Transpose the values of a Mat3\r\n     */\r\n    function transpose(out, a) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            var a01 = a[1], a02 = a[2], a12 = a[5];\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[3] = a01;\r\n            out[5] = a[7];\r\n            out[6] = a02;\r\n            out[7] = a12;\r\n        }\r\n        else {\r\n            out[0] = a[0];\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[3] = a[1];\r\n            out[4] = a[4];\r\n            out[5] = a[7];\r\n            out[6] = a[2];\r\n            out[7] = a[5];\r\n            out[8] = a[8];\r\n        }\r\n        return out;\r\n    }\r\n    Mat3.transpose = transpose;\r\n    /**\r\n     * Inverts a Mat3\r\n     */\r\n    function invert(out, a) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2];\r\n        var a10 = a[3], a11 = a[4], a12 = a[5];\r\n        var a20 = a[6], a21 = a[7], a22 = a[8];\r\n        var b01 = a22 * a11 - a12 * a21;\r\n        var b11 = -a22 * a10 + a12 * a20;\r\n        var b21 = a21 * a10 - a11 * a20;\r\n        // Calculate the determinant\r\n        var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n        if (!det) {\r\n            console.warn('non-invertible matrix.', a);\r\n            return out;\r\n        }\r\n        det = 1.0 / det;\r\n        out[0] = b01 * det;\r\n        out[1] = (-a22 * a01 + a02 * a21) * det;\r\n        out[2] = (a12 * a01 - a02 * a11) * det;\r\n        out[3] = b11 * det;\r\n        out[4] = (a22 * a00 - a02 * a20) * det;\r\n        out[5] = (-a12 * a00 + a02 * a10) * det;\r\n        out[6] = b21 * det;\r\n        out[7] = (-a21 * a00 + a01 * a20) * det;\r\n        out[8] = (a11 * a00 - a01 * a10) * det;\r\n        return out;\r\n    }\r\n    Mat3.invert = invert;\r\n    function symmtricFromUpper(out, a) {\r\n        if (out === a) {\r\n            out[3] = a[1];\r\n            out[6] = a[2];\r\n            out[7] = a[5];\r\n        }\r\n        else {\r\n            out[0] = a[0];\r\n            out[1] = a[1];\r\n            out[2] = a[2];\r\n            out[3] = a[1];\r\n            out[4] = a[4];\r\n            out[5] = a[5];\r\n            out[6] = a[2];\r\n            out[7] = a[5];\r\n            out[8] = a[8];\r\n        }\r\n        return out;\r\n    }\r\n    Mat3.symmtricFromUpper = symmtricFromUpper;\r\n    function symmtricFromLower(out, a) {\r\n        if (out === a) {\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[5] = a[7];\r\n        }\r\n        else {\r\n            out[0] = a[0];\r\n            out[1] = a[3];\r\n            out[2] = a[6];\r\n            out[3] = a[3];\r\n            out[4] = a[4];\r\n            out[5] = a[7];\r\n            out[6] = a[6];\r\n            out[7] = a[7];\r\n            out[8] = a[8];\r\n        }\r\n        return out;\r\n    }\r\n    Mat3.symmtricFromLower = symmtricFromLower;\r\n    function determinant(a) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2];\r\n        var a10 = a[3], a11 = a[4], a12 = a[5];\r\n        var a20 = a[6], a21 = a[7], a22 = a[8];\r\n        var b01 = a22 * a11 - a12 * a21;\r\n        var b11 = -a22 * a10 + a12 * a20;\r\n        var b21 = a21 * a10 - a11 * a20;\r\n        // Calculate the determinant\r\n        return a00 * b01 + a01 * b11 + a02 * b21;\r\n    }\r\n    Mat3.determinant = determinant;\r\n    function trace(a) {\r\n        return a[0] + a[4] + a[8];\r\n    }\r\n    Mat3.trace = trace;\r\n    function sub(out, a, b) {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - b[1];\r\n        out[2] = a[2] - b[2];\r\n        out[3] = a[3] - b[3];\r\n        out[4] = a[4] - b[4];\r\n        out[5] = a[5] - b[5];\r\n        out[6] = a[6] - b[6];\r\n        out[7] = a[7] - b[7];\r\n        out[8] = a[8] - b[8];\r\n        return out;\r\n    }\r\n    Mat3.sub = sub;\r\n    function add(out, a, b) {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + b[1];\r\n        out[2] = a[2] + b[2];\r\n        out[3] = a[3] + b[3];\r\n        out[4] = a[4] + b[4];\r\n        out[5] = a[5] + b[5];\r\n        out[6] = a[6] + b[6];\r\n        out[7] = a[7] + b[7];\r\n        out[8] = a[8] + b[8];\r\n        return out;\r\n    }\r\n    Mat3.add = add;\r\n    function mul(out, a, b) {\r\n        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];\r\n        var b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];\r\n        out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n        out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n        out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n        out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n        out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n        out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n        out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n        out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n        out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n        return out;\r\n    }\r\n    Mat3.mul = mul;\r\n    function subScalar(out, a, s) {\r\n        out[0] = a[0] - s;\r\n        out[1] = a[1] - s;\r\n        out[2] = a[2] - s;\r\n        out[3] = a[3] - s;\r\n        out[4] = a[4] - s;\r\n        out[5] = a[5] - s;\r\n        out[6] = a[6] - s;\r\n        out[7] = a[7] - s;\r\n        out[8] = a[8] - s;\r\n        return out;\r\n    }\r\n    Mat3.subScalar = subScalar;\r\n    function addScalar(out, a, s) {\r\n        out[0] = a[0] + s;\r\n        out[1] = a[1] + s;\r\n        out[2] = a[2] + s;\r\n        out[3] = a[3] + s;\r\n        out[4] = a[4] + s;\r\n        out[5] = a[5] + s;\r\n        out[6] = a[6] + s;\r\n        out[7] = a[7] + s;\r\n        out[8] = a[8] + s;\r\n        return out;\r\n    }\r\n    Mat3.addScalar = addScalar;\r\n    function mulScalar(out, a, s) {\r\n        out[0] = a[0] * s;\r\n        out[1] = a[1] * s;\r\n        out[2] = a[2] * s;\r\n        out[3] = a[3] * s;\r\n        out[4] = a[4] * s;\r\n        out[5] = a[5] * s;\r\n        out[6] = a[6] * s;\r\n        out[7] = a[7] * s;\r\n        out[8] = a[8] * s;\r\n        return out;\r\n    }\r\n    Mat3.mulScalar = mulScalar;\r\n    var piThird = Math.PI / 3;\r\n    var tmpB = zero();\r\n    /**\r\n     * Given a real symmetric 3x3 matrix A, compute the eigenvalues\r\n     *\r\n     * From https://en.wikipedia.org/wiki/Eigenvalue_algorithm#3.C3.973_matrices\r\n     */\r\n    function symmetricEigenvalues(out, a) {\r\n        var p1 = a[1] * a[1] + a[2] * a[2] + a[5] * a[5];\r\n        if (p1 === 0) {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n        }\r\n        else {\r\n            var q = trace(a) / 3;\r\n            var a1 = a[0] - q;\r\n            var a2 = a[4] - q;\r\n            var a3 = a[8] - q;\r\n            var p2 = a1 * a1 + a2 * a2 + a3 * a3 + 2 * p1;\r\n            var p = Math.sqrt(p2 / 6);\r\n            mulScalar(tmpB, Mat3.Identity, q);\r\n            sub(tmpB, a, tmpB);\r\n            mulScalar(tmpB, tmpB, (1 / p));\r\n            var r = determinant(tmpB) / 2;\r\n            // In exact arithmetic for a symmetric matrix  -1 <= r <= 1\r\n            // but computation error can leave it slightly outside this range.\r\n            var phi = r <= -1 ? piThird : r >= 1 ?\r\n                0 : Math.acos(r) / 3;\r\n            // the eigenvalues satisfy eig3 <= eig2 <= eig1\r\n            out[0] = q + 2 * p * Math.cos(phi);\r\n            out[2] = q + 2 * p * Math.cos(phi + (2 * piThird));\r\n            out[1] = 3 * q - out[0] - out[2]; // since trace(A) = eig1 + eig2 + eig3\r\n        }\r\n        return out;\r\n    }\r\n    Mat3.symmetricEigenvalues = symmetricEigenvalues;\r\n    var tmpR0 = [0.1, 0.0, 0.0];\r\n    var tmpR1 = [0.1, 0.0, 0.0];\r\n    var tmpR2 = [0.1, 0.0, 0.0];\r\n    var tmpR0xR1 = [0.1, 0.0, 0.0];\r\n    var tmpR0xR2 = [0.1, 0.0, 0.0];\r\n    var tmpR1xR2 = [0.1, 0.0, 0.0];\r\n    /**\r\n     * Calculates the eigenvector for the given eigenvalue `e` of matrix `a`\r\n     */\r\n    function eigenvector(out, a, e) {\r\n        Vec3.set(tmpR0, a[0] - e, a[1], a[2]);\r\n        Vec3.set(tmpR1, a[1], a[4] - e, a[5]);\r\n        Vec3.set(tmpR2, a[2], a[5], a[8] - e);\r\n        Vec3.cross(tmpR0xR1, tmpR0, tmpR1);\r\n        Vec3.cross(tmpR0xR2, tmpR0, tmpR2);\r\n        Vec3.cross(tmpR1xR2, tmpR1, tmpR2);\r\n        var d0 = Vec3.dot(tmpR0xR1, tmpR0xR1);\r\n        var d1 = Vec3.dot(tmpR0xR2, tmpR0xR2);\r\n        var d2 = Vec3.dot(tmpR1xR2, tmpR1xR2);\r\n        var dmax = d0;\r\n        var imax = 0;\r\n        if (d1 > dmax) {\r\n            dmax = d1;\r\n            imax = 1;\r\n        }\r\n        if (d2 > dmax)\r\n            imax = 2;\r\n        if (imax === 0) {\r\n            Vec3.scale(out, tmpR0xR1, 1 / Math.sqrt(d0));\r\n        }\r\n        else if (imax === 1) {\r\n            Vec3.scale(out, tmpR0xR2, 1 / Math.sqrt(d1));\r\n        }\r\n        else {\r\n            Vec3.scale(out, tmpR1xR2, 1 / Math.sqrt(d2));\r\n        }\r\n        return out;\r\n    }\r\n    Mat3.eigenvector = eigenvector;\r\n    /**\r\n     * Get matrix to transform directions, e.g. normals\r\n     */\r\n    function directionTransform(out, t) {\r\n        fromMat4(out, t);\r\n        invert(out, out);\r\n        transpose(out, out);\r\n        return out;\r\n    }\r\n    Mat3.directionTransform = directionTransform;\r\n    Mat3.Identity = identity();\r\n})(Mat3 || (Mat3 = {}));\r\nexport { Mat3 };\r\n//# sourceMappingURL=mat3.js.map"]},"metadata":{},"sourceType":"module"}