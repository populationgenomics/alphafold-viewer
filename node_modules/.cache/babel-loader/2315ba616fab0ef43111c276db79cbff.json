{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { PluginStateObject as SO, PluginStateTransform } from '../../../../mol-plugin-state/objects';\nimport { VolumeServerInfo } from './model';\nimport { ParamDefinition as PD } from '../../../../mol-util/param-definition';\nimport { Task } from '../../../../mol-task';\nimport { urlCombine } from '../../../../mol-util/url';\nimport { Volume } from '../../../../mol-model/volume';\nimport { StateAction, StateObject, StateTransformer } from '../../../../mol-state';\nimport { getStreamingMethod, getIds, getContourLevel, getEmdbIds } from './util';\nimport { VolumeStreaming } from './behavior';\nimport { VolumeRepresentation3DHelpers } from '../../../../mol-plugin-state/transforms/representation';\nimport { VolumeRepresentationRegistry } from '../../../../mol-repr/volume/registry';\nimport { Theme } from '../../../../mol-theme/theme';\nimport { Box3D } from '../../../../mol-math/geometry';\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\nimport { PluginConfig } from '../../../config';\nimport { Model } from '../../../../mol-model/structure';\nimport { GlobalModelTransformInfo } from '../../../../mol-model/structure/model/properties/global-transform';\n\nfunction addEntry(entries, method, dataId, emDefaultContourLevel) {\n  entries.push({\n    source: method === 'em' ? {\n      name: 'em',\n      params: {\n        isoValue: Volume.IsoValue.absolute(emDefaultContourLevel || 0)\n      }\n    } : {\n      name: 'x-ray',\n      params: {}\n    },\n    dataId: dataId\n  });\n}\n\nexport var InitVolumeStreaming = StateAction.build({\n  display: {\n    name: 'Volume Streaming'\n  },\n  from: SO.Molecule.Structure,\n  params: function (a, plugin) {\n    var method = getStreamingMethod(a && a.data);\n    var ids = getIds(method, a && a.data);\n    return {\n      method: PD.Select(method, [['em', 'EM'], ['x-ray', 'X-Ray']]),\n      entries: PD.ObjectList({\n        id: PD.Text(ids[0] || '')\n      }, function (_a) {\n        var id = _a.id;\n        return id;\n      }, {\n        defaultValue: ids.map(function (id) {\n          return {\n            id: id\n          };\n        })\n      }),\n      defaultView: PD.Select(method === 'em' ? 'cell' : 'selection-box', VolumeStreaming.ViewTypeOptions),\n      options: PD.Group({\n        serverUrl: PD.Text(plugin.config.get(PluginConfig.VolumeStreaming.DefaultServer) || 'https://ds.litemol.org'),\n        behaviorRef: PD.Text('', {\n          isHidden: true\n        }),\n        emContourProvider: PD.Select('emdb', [['emdb', 'EMDB'], ['pdbe', 'PDBe']], {\n          isHidden: true\n        }),\n        channelParams: PD.Value({}, {\n          isHidden: true\n        })\n      })\n    };\n  },\n  isApplicable: function (a, _, plugin) {\n    var canStreamTest = plugin.config.get(PluginConfig.VolumeStreaming.CanStream);\n    if (canStreamTest) return canStreamTest(a.data, plugin);\n    return a.data.models.length === 1 && Model.probablyHasDensityMap(a.data.models[0]);\n  }\n})(function (_a, plugin) {\n  var ref = _a.ref,\n      state = _a.state,\n      params = _a.params;\n  return Task.create('Volume Streaming', function (taskCtx) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var entries, i, il, dataId, emDefaultContourLevel, emdbIds, j, jl, emdbId, contourLevel, e_1, e_2, infoTree, info, children, infoObj, behTree;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            entries = [];\n            i = 0, il = params.entries.length;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < il)) return [3\n            /*break*/\n            , 16];\n            dataId = params.entries[i].id.toLowerCase();\n            emDefaultContourLevel = void 0;\n            if (!(params.method === 'em')) return [3\n            /*break*/\n            , 14];\n            if (!!dataId.toUpperCase().startsWith('EMD')) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , taskCtx.update('Getting EMDB info...')];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , getEmdbIds(plugin, taskCtx, dataId)];\n\n          case 3:\n            emdbIds = _a.sent();\n            j = 0, jl = emdbIds.length;\n            _a.label = 4;\n\n          case 4:\n            if (!(j < jl)) return [3\n            /*break*/\n            , 10];\n            emdbId = emdbIds[j];\n            contourLevel = void 0;\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , getContourLevel(params.options.emContourProvider, plugin, taskCtx, emdbId)];\n\n          case 6:\n            contourLevel = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            e_1 = _a.sent();\n            console.info(\"Could not get map info for \" + emdbId + \": \" + e_1);\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            addEntry(entries, params.method, emdbId, contourLevel || 0);\n            _a.label = 9;\n\n          case 9:\n            ++j;\n            return [3\n            /*break*/\n            , 4];\n\n          case 10:\n            return [3\n            /*break*/\n            , 15];\n\n          case 11:\n            _a.trys.push([11, 13,, 14]);\n\n            return [4\n            /*yield*/\n            , getContourLevel(params.options.emContourProvider, plugin, taskCtx, dataId)];\n\n          case 12:\n            emDefaultContourLevel = _a.sent();\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            e_2 = _a.sent();\n            console.info(\"Could not get map info for \" + dataId + \": \" + e_2);\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            addEntry(entries, params.method, dataId, emDefaultContourLevel || 0);\n            _a.label = 15;\n\n          case 15:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            infoTree = state.build().to(ref).applyOrUpdateTagged(VolumeStreaming.RootTag, CreateVolumeStreamingInfo, {\n              serverUrl: params.options.serverUrl,\n              entries: entries\n            });\n            return [4\n            /*yield*/\n            , infoTree.commit()];\n\n          case 17:\n            _a.sent();\n\n            info = infoTree.selector;\n            if (!info.isOk) return [2\n            /*return*/\n            ];\n            children = state.tree.children.get(info.ref);\n            if (!((children === null || children === void 0 ? void 0 : children.size) > 0)) return [3\n            /*break*/\n            , 19];\n            return [4\n            /*yield*/\n            , plugin.managers.structure.hierarchy.remove(children === null || children === void 0 ? void 0 : children.toArray())];\n\n          case 18:\n            _a.sent();\n\n            _a.label = 19;\n\n          case 19:\n            infoObj = info.cell.obj;\n            behTree = state.build().to(infoTree.ref).apply(CreateVolumeStreamingBehavior, PD.getDefaultValues(VolumeStreaming.createParams({\n              data: infoObj.data,\n              defaultView: params.defaultView,\n              channelParams: params.options.channelParams\n            })), {\n              ref: params.options.behaviorRef ? params.options.behaviorRef : void 0\n            });\n\n            if (params.method === 'em') {\n              behTree.apply(VolumeStreamingVisual, {\n                channel: 'em'\n              }, {\n                state: {\n                  isGhost: true\n                },\n                tags: 'em'\n              });\n            } else {\n              behTree.apply(VolumeStreamingVisual, {\n                channel: '2fo-fc'\n              }, {\n                state: {\n                  isGhost: true\n                },\n                tags: '2fo-fc'\n              });\n              behTree.apply(VolumeStreamingVisual, {\n                channel: 'fo-fc(+ve)'\n              }, {\n                state: {\n                  isGhost: true\n                },\n                tags: 'fo-fc(+ve)'\n              });\n              behTree.apply(VolumeStreamingVisual, {\n                channel: 'fo-fc(-ve)'\n              }, {\n                state: {\n                  isGhost: true\n                },\n                tags: 'fo-fc(-ve)'\n              });\n            }\n\n            return [4\n            /*yield*/\n            , state.updateTree(behTree).runInContext(taskCtx)];\n\n          case 20:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n});\nexport var BoxifyVolumeStreaming = StateAction.build({\n  display: {\n    name: 'Boxify Volume Streaming',\n    description: 'Make the current box permanent.'\n  },\n  from: VolumeStreaming,\n  isApplicable: function (a) {\n    return a.data.params.entry.params.view.name === 'selection-box';\n  }\n})(function (_a, plugin) {\n  var a = _a.a,\n      ref = _a.ref,\n      state = _a.state;\n  var params = a.data.params;\n  if (params.entry.params.view.name !== 'selection-box') return;\n  var box = Box3D.create(Vec3.clone(params.entry.params.view.params.bottomLeft), Vec3.clone(params.entry.params.view.params.topRight));\n  var r = params.entry.params.view.params.radius;\n  Box3D.expand(box, box, Vec3.create(r, r, r));\n\n  var newParams = __assign(__assign({}, params), {\n    entry: {\n      name: params.entry.name,\n      params: __assign(__assign({}, params.entry.params), {\n        view: {\n          name: 'box',\n          params: {\n            bottomLeft: box.min,\n            topRight: box.max\n          }\n        }\n      })\n    }\n  });\n\n  return state.updateTree(state.build().to(ref).update(newParams));\n});\nvar InfoEntryParams = {\n  dataId: PD.Text(''),\n  source: PD.MappedStatic('x-ray', {\n    'em': PD.Group({\n      isoValue: Volume.createIsoValueParam(Volume.IsoValue.relative(1))\n    }),\n    'x-ray': PD.Group({})\n  })\n};\nexport { CreateVolumeStreamingInfo };\nvar CreateVolumeStreamingInfo = PluginStateTransform.BuiltIn({\n  name: 'create-volume-streaming-info',\n  display: {\n    name: 'Volume Streaming Info'\n  },\n  from: SO.Molecule.Structure,\n  to: VolumeServerInfo,\n  params: function (a) {\n    return {\n      serverUrl: PD.Text('https://ds.litemol.org'),\n      entries: PD.ObjectList(InfoEntryParams, function (_a) {\n        var dataId = _a.dataId;\n        return dataId;\n      }, {\n        defaultValue: [{\n          dataId: '',\n          source: {\n            name: 'x-ray',\n            params: {}\n          }\n        }]\n      })\n    };\n  }\n})({\n  apply: function (_a, plugin) {\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('', function (taskCtx) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var entries, i, il, e, dataId, emDefaultContourLevel, header, data;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              entries = [];\n              i = 0, il = params.entries.length;\n              _a.label = 1;\n\n            case 1:\n              if (!(i < il)) return [3\n              /*break*/\n              , 5];\n              e = params.entries[i];\n              dataId = e.dataId;\n              emDefaultContourLevel = e.source.name === 'em' ? e.source.params.isoValue : Volume.IsoValue.relative(1);\n              return [4\n              /*yield*/\n              , taskCtx.update('Getting server header...')];\n\n            case 2:\n              _a.sent();\n\n              return [4\n              /*yield*/\n              , plugin.fetch({\n                url: urlCombine(params.serverUrl, e.source.name + \"/\" + dataId.toLocaleLowerCase()),\n                type: 'json'\n              }).runInContext(taskCtx)];\n\n            case 3:\n              header = _a.sent();\n              entries.push({\n                dataId: dataId,\n                kind: e.source.name,\n                header: header,\n                emDefaultContourLevel: emDefaultContourLevel\n              });\n              _a.label = 4;\n\n            case 4:\n              ++i;\n              return [3\n              /*break*/\n              , 1];\n\n            case 5:\n              data = {\n                serverUrl: params.serverUrl,\n                entries: entries,\n                structure: a.data\n              };\n              return [2\n              /*return*/\n              , new VolumeServerInfo(data, {\n                label: 'Volume Server',\n                description: \"\" + entries.map(function (e) {\n                  return e.dataId;\n                }).join(', ')\n              })];\n          }\n        });\n      });\n    });\n  }\n});\nexport { CreateVolumeStreamingBehavior };\nvar CreateVolumeStreamingBehavior = PluginStateTransform.BuiltIn({\n  name: 'create-volume-streaming-behavior',\n  display: {\n    name: 'Volume Streaming Behavior'\n  },\n  from: VolumeServerInfo,\n  to: VolumeStreaming,\n  params: function (a) {\n    return VolumeStreaming.createParams({\n      data: a && a.data\n    });\n  }\n})({\n  canAutoUpdate: function (_a) {\n    var oldParams = _a.oldParams,\n        newParams = _a.newParams;\n    return oldParams.entry.params.view === newParams.entry.params.view || newParams.entry.params.view.name === 'selection-box' || newParams.entry.params.view.name === 'off';\n  },\n  apply: function (_a, plugin) {\n    var a = _a.a,\n        params = _a.params;\n    return Task.create('Volume streaming', function (_) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var behavior;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              behavior = new VolumeStreaming.Behavior(plugin, a.data);\n              return [4\n              /*yield*/\n              , behavior.update(params)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , new VolumeStreaming(behavior, {\n                label: 'Volume Streaming',\n                description: behavior.getDescription()\n              })];\n          }\n        });\n      });\n    });\n  },\n  update: function (_a) {\n    var _this = this;\n\n    var a = _a.a,\n        b = _a.b,\n        oldParams = _a.oldParams,\n        newParams = _a.newParams;\n    return Task.create('Update Volume Streaming', function (_) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var emDefaultContourLevel, ret;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (oldParams.entry.name !== newParams.entry.name) {\n                if ('em' in newParams.entry.params.channels) {\n                  emDefaultContourLevel = b.data.infoMap.get(newParams.entry.name).emDefaultContourLevel;\n\n                  if (emDefaultContourLevel) {\n                    newParams.entry.params.channels['em'].isoValue = emDefaultContourLevel;\n                  }\n                }\n              }\n\n              return [4\n              /*yield*/\n              , b.data.update(newParams)];\n\n            case 1:\n              ret = _a.sent() ? StateTransformer.UpdateResult.Updated : StateTransformer.UpdateResult.Unchanged;\n              b.description = b.data.getDescription();\n              return [2\n              /*return*/\n              , ret];\n          }\n        });\n      });\n    });\n  }\n});\nexport { VolumeStreamingVisual };\nvar VolumeStreamingVisual = PluginStateTransform.BuiltIn({\n  name: 'create-volume-streaming-visual',\n  display: {\n    name: 'Volume Streaming Visual'\n  },\n  from: VolumeStreaming,\n  to: SO.Volume.Representation3D,\n  params: {\n    channel: PD.Select('em', VolumeStreaming.ChannelTypeOptions, {\n      isHidden: true\n    })\n  }\n})({\n  apply: function (_a, plugin) {\n    var a = _a.a,\n        srcParams = _a.params,\n        spine = _a.spine;\n    return Task.create('Volume Representation', function (ctx) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var channel, params, provider, props, repr, structure, transform;\n\n        var _a, _b;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              channel = a.data.channels[srcParams.channel];\n              if (!channel) return [2\n              /*return*/\n              , StateObject.Null];\n              params = createVolumeProps(a.data, srcParams.channel);\n              provider = VolumeRepresentationRegistry.BuiltIn.isosurface;\n              props = params.type.params || {};\n              repr = provider.factory(__assign({\n                webgl: (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.webgl\n              }, plugin.representation.volume.themes), provider.getParams);\n              repr.setTheme(Theme.create(plugin.representation.volume.themes, {\n                volume: channel.data\n              }, params));\n              structure = (_b = spine.getAncestorOfType(SO.Molecule.Structure)) === null || _b === void 0 ? void 0 : _b.data;\n              transform = (structure === null || structure === void 0 ? void 0 : structure.models.length) === 0 ? void 0 : GlobalModelTransformInfo.get(structure === null || structure === void 0 ? void 0 : structure.models[0]);\n              return [4\n              /*yield*/\n              , repr.createOrUpdate(props, channel.data).runInContext(ctx)];\n\n            case 1:\n              _c.sent();\n\n              if (transform) repr.setState({\n                transform: transform\n              });\n              return [2\n              /*return*/\n              , new SO.Volume.Representation3D({\n                repr: repr,\n                sourceData: channel.data\n              }, {\n                label: Math.round(channel.isoValue.relativeValue * 100) / 100 + \" \\u03C3 [\" + srcParams.channel + \"]\"\n              })];\n          }\n        });\n      });\n    });\n  },\n  update: function (_a, plugin) {\n    var a = _a.a,\n        b = _a.b,\n        newParams = _a.newParams,\n        spine = _a.spine;\n    return Task.create('Volume Representation', function (ctx) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var channel, visible, params, props;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              channel = a.data.channels[newParams.channel]; // TODO: is this correct behavior?\n\n              if (!channel) return [2\n              /*return*/\n              , StateTransformer.UpdateResult.Unchanged];\n              visible = b.data.repr.state.visible;\n              params = createVolumeProps(a.data, newParams.channel);\n              props = __assign(__assign({}, b.data.repr.props), params.type.params);\n              b.data.repr.setTheme(Theme.create(plugin.representation.volume.themes, {\n                volume: channel.data\n              }, params));\n              return [4\n              /*yield*/\n              , b.data.repr.createOrUpdate(props, channel.data).runInContext(ctx)];\n\n            case 1:\n              _a.sent();\n\n              b.data.repr.setState({\n                visible: visible\n              });\n              b.data.sourceData = channel.data; // TODO: set the transform here as well in case the structure moves?\n              //       doing this here now breaks the code for some reason...\n              // const structure = spine.getAncestorOfType(SO.Molecule.Structure)?.data;\n              // const transform = structure?.models.length === 0 ? void 0 : GlobalModelTransformInfo.get(structure?.models[0]!);\n              // if (transform) b.data.repr.setState({ transform });\n\n              return [2\n              /*return*/\n              , StateTransformer.UpdateResult.Updated];\n          }\n        });\n      });\n    });\n  }\n});\n\nfunction createVolumeProps(streaming, channelName) {\n  var channel = streaming.channels[channelName];\n  return VolumeRepresentation3DHelpers.getDefaultParamsStatic(streaming.plugin, 'isosurface', {\n    isoValue: channel.isoValue,\n    alpha: channel.opacity,\n    visuals: channel.wireframe ? ['wireframe'] : ['solid']\n  }, 'uniform', {\n    value: channel.color\n  });\n}","map":{"version":3,"sources":["../../../../../src/mol-plugin/behavior/dynamic/volume-streaming/transformers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { PluginStateObject as SO, PluginStateTransform } from '../../../../mol-plugin-state/objects';\r\nimport { VolumeServerInfo } from './model';\r\nimport { ParamDefinition as PD } from '../../../../mol-util/param-definition';\r\nimport { Task } from '../../../../mol-task';\r\nimport { urlCombine } from '../../../../mol-util/url';\r\nimport { Volume } from '../../../../mol-model/volume';\r\nimport { StateAction, StateObject, StateTransformer } from '../../../../mol-state';\r\nimport { getStreamingMethod, getIds, getContourLevel, getEmdbIds } from './util';\r\nimport { VolumeStreaming } from './behavior';\r\nimport { VolumeRepresentation3DHelpers } from '../../../../mol-plugin-state/transforms/representation';\r\nimport { VolumeRepresentationRegistry } from '../../../../mol-repr/volume/registry';\r\nimport { Theme } from '../../../../mol-theme/theme';\r\nimport { Box3D } from '../../../../mol-math/geometry';\r\nimport { Vec3 } from '../../../../mol-math/linear-algebra';\r\nimport { PluginConfig } from '../../../config';\r\nimport { Model } from '../../../../mol-model/structure';\r\nimport { GlobalModelTransformInfo } from '../../../../mol-model/structure/model/properties/global-transform';\r\nfunction addEntry(entries, method, dataId, emDefaultContourLevel) {\r\n    entries.push({\r\n        source: method === 'em'\r\n            ? { name: 'em', params: { isoValue: Volume.IsoValue.absolute(emDefaultContourLevel || 0) } }\r\n            : { name: 'x-ray', params: {} },\r\n        dataId: dataId\r\n    });\r\n}\r\nexport var InitVolumeStreaming = StateAction.build({\r\n    display: { name: 'Volume Streaming' },\r\n    from: SO.Molecule.Structure,\r\n    params: function (a, plugin) {\r\n        var method = getStreamingMethod(a && a.data);\r\n        var ids = getIds(method, a && a.data);\r\n        return {\r\n            method: PD.Select(method, [['em', 'EM'], ['x-ray', 'X-Ray']]),\r\n            entries: PD.ObjectList({ id: PD.Text(ids[0] || '') }, function (_a) {\r\n                var id = _a.id;\r\n                return id;\r\n            }, { defaultValue: ids.map(function (id) { return ({ id: id }); }) }),\r\n            defaultView: PD.Select(method === 'em' ? 'cell' : 'selection-box', VolumeStreaming.ViewTypeOptions),\r\n            options: PD.Group({\r\n                serverUrl: PD.Text(plugin.config.get(PluginConfig.VolumeStreaming.DefaultServer) || 'https://ds.litemol.org'),\r\n                behaviorRef: PD.Text('', { isHidden: true }),\r\n                emContourProvider: PD.Select('emdb', [['emdb', 'EMDB'], ['pdbe', 'PDBe']], { isHidden: true }),\r\n                channelParams: PD.Value({}, { isHidden: true })\r\n            })\r\n        };\r\n    },\r\n    isApplicable: function (a, _, plugin) {\r\n        var canStreamTest = plugin.config.get(PluginConfig.VolumeStreaming.CanStream);\r\n        if (canStreamTest)\r\n            return canStreamTest(a.data, plugin);\r\n        return a.data.models.length === 1 && Model.probablyHasDensityMap(a.data.models[0]);\r\n    }\r\n})(function (_a, plugin) {\r\n    var ref = _a.ref, state = _a.state, params = _a.params;\r\n    return Task.create('Volume Streaming', function (taskCtx) { return __awaiter(void 0, void 0, void 0, function () {\r\n        var entries, i, il, dataId, emDefaultContourLevel, emdbIds, j, jl, emdbId, contourLevel, e_1, e_2, infoTree, info, children, infoObj, behTree;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    entries = [];\r\n                    i = 0, il = params.entries.length;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < il)) return [3 /*break*/, 16];\r\n                    dataId = params.entries[i].id.toLowerCase();\r\n                    emDefaultContourLevel = void 0;\r\n                    if (!(params.method === 'em')) return [3 /*break*/, 14];\r\n                    if (!!dataId.toUpperCase().startsWith('EMD')) return [3 /*break*/, 11];\r\n                    return [4 /*yield*/, taskCtx.update('Getting EMDB info...')];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [4 /*yield*/, getEmdbIds(plugin, taskCtx, dataId)];\r\n                case 3:\r\n                    emdbIds = _a.sent();\r\n                    j = 0, jl = emdbIds.length;\r\n                    _a.label = 4;\r\n                case 4:\r\n                    if (!(j < jl)) return [3 /*break*/, 10];\r\n                    emdbId = emdbIds[j];\r\n                    contourLevel = void 0;\r\n                    _a.label = 5;\r\n                case 5:\r\n                    _a.trys.push([5, 7, , 8]);\r\n                    return [4 /*yield*/, getContourLevel(params.options.emContourProvider, plugin, taskCtx, emdbId)];\r\n                case 6:\r\n                    contourLevel = _a.sent();\r\n                    return [3 /*break*/, 8];\r\n                case 7:\r\n                    e_1 = _a.sent();\r\n                    console.info(\"Could not get map info for \" + emdbId + \": \" + e_1);\r\n                    return [3 /*break*/, 9];\r\n                case 8:\r\n                    addEntry(entries, params.method, emdbId, contourLevel || 0);\r\n                    _a.label = 9;\r\n                case 9:\r\n                    ++j;\r\n                    return [3 /*break*/, 4];\r\n                case 10: return [3 /*break*/, 15];\r\n                case 11:\r\n                    _a.trys.push([11, 13, , 14]);\r\n                    return [4 /*yield*/, getContourLevel(params.options.emContourProvider, plugin, taskCtx, dataId)];\r\n                case 12:\r\n                    emDefaultContourLevel = _a.sent();\r\n                    return [3 /*break*/, 14];\r\n                case 13:\r\n                    e_2 = _a.sent();\r\n                    console.info(\"Could not get map info for \" + dataId + \": \" + e_2);\r\n                    return [3 /*break*/, 15];\r\n                case 14:\r\n                    addEntry(entries, params.method, dataId, emDefaultContourLevel || 0);\r\n                    _a.label = 15;\r\n                case 15:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 16:\r\n                    infoTree = state.build().to(ref)\r\n                        .applyOrUpdateTagged(VolumeStreaming.RootTag, CreateVolumeStreamingInfo, {\r\n                        serverUrl: params.options.serverUrl,\r\n                        entries: entries\r\n                    });\r\n                    return [4 /*yield*/, infoTree.commit()];\r\n                case 17:\r\n                    _a.sent();\r\n                    info = infoTree.selector;\r\n                    if (!info.isOk)\r\n                        return [2 /*return*/];\r\n                    children = state.tree.children.get(info.ref);\r\n                    if (!((children === null || children === void 0 ? void 0 : children.size) > 0)) return [3 /*break*/, 19];\r\n                    return [4 /*yield*/, plugin.managers.structure.hierarchy.remove(children === null || children === void 0 ? void 0 : children.toArray())];\r\n                case 18:\r\n                    _a.sent();\r\n                    _a.label = 19;\r\n                case 19:\r\n                    infoObj = info.cell.obj;\r\n                    behTree = state.build().to(infoTree.ref).apply(CreateVolumeStreamingBehavior, PD.getDefaultValues(VolumeStreaming.createParams({ data: infoObj.data, defaultView: params.defaultView, channelParams: params.options.channelParams })), { ref: params.options.behaviorRef ? params.options.behaviorRef : void 0 });\r\n                    if (params.method === 'em') {\r\n                        behTree.apply(VolumeStreamingVisual, { channel: 'em' }, { state: { isGhost: true }, tags: 'em' });\r\n                    }\r\n                    else {\r\n                        behTree.apply(VolumeStreamingVisual, { channel: '2fo-fc' }, { state: { isGhost: true }, tags: '2fo-fc' });\r\n                        behTree.apply(VolumeStreamingVisual, { channel: 'fo-fc(+ve)' }, { state: { isGhost: true }, tags: 'fo-fc(+ve)' });\r\n                        behTree.apply(VolumeStreamingVisual, { channel: 'fo-fc(-ve)' }, { state: { isGhost: true }, tags: 'fo-fc(-ve)' });\r\n                    }\r\n                    return [4 /*yield*/, state.updateTree(behTree).runInContext(taskCtx)];\r\n                case 20:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\nexport var BoxifyVolumeStreaming = StateAction.build({\r\n    display: { name: 'Boxify Volume Streaming', description: 'Make the current box permanent.' },\r\n    from: VolumeStreaming,\r\n    isApplicable: function (a) { return a.data.params.entry.params.view.name === 'selection-box'; }\r\n})(function (_a, plugin) {\r\n    var a = _a.a, ref = _a.ref, state = _a.state;\r\n    var params = a.data.params;\r\n    if (params.entry.params.view.name !== 'selection-box')\r\n        return;\r\n    var box = Box3D.create(Vec3.clone(params.entry.params.view.params.bottomLeft), Vec3.clone(params.entry.params.view.params.topRight));\r\n    var r = params.entry.params.view.params.radius;\r\n    Box3D.expand(box, box, Vec3.create(r, r, r));\r\n    var newParams = __assign(__assign({}, params), { entry: {\r\n            name: params.entry.name,\r\n            params: __assign(__assign({}, params.entry.params), { view: {\r\n                    name: 'box',\r\n                    params: {\r\n                        bottomLeft: box.min,\r\n                        topRight: box.max\r\n                    }\r\n                } })\r\n        } });\r\n    return state.updateTree(state.build().to(ref).update(newParams));\r\n});\r\nvar InfoEntryParams = {\r\n    dataId: PD.Text(''),\r\n    source: PD.MappedStatic('x-ray', {\r\n        'em': PD.Group({\r\n            isoValue: Volume.createIsoValueParam(Volume.IsoValue.relative(1))\r\n        }),\r\n        'x-ray': PD.Group({})\r\n    })\r\n};\r\nexport { CreateVolumeStreamingInfo };\r\nvar CreateVolumeStreamingInfo = PluginStateTransform.BuiltIn({\r\n    name: 'create-volume-streaming-info',\r\n    display: { name: 'Volume Streaming Info' },\r\n    from: SO.Molecule.Structure,\r\n    to: VolumeServerInfo,\r\n    params: function (a) {\r\n        return {\r\n            serverUrl: PD.Text('https://ds.litemol.org'),\r\n            entries: PD.ObjectList(InfoEntryParams, function (_a) {\r\n                var dataId = _a.dataId;\r\n                return dataId;\r\n            }, {\r\n                defaultValue: [{ dataId: '', source: { name: 'x-ray', params: {} } }]\r\n            }),\r\n        };\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('', function (taskCtx) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var entries, i, il, e, dataId, emDefaultContourLevel, header, data;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        entries = [];\r\n                        i = 0, il = params.entries.length;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(i < il)) return [3 /*break*/, 5];\r\n                        e = params.entries[i];\r\n                        dataId = e.dataId;\r\n                        emDefaultContourLevel = e.source.name === 'em' ? e.source.params.isoValue : Volume.IsoValue.relative(1);\r\n                        return [4 /*yield*/, taskCtx.update('Getting server header...')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, plugin.fetch({ url: urlCombine(params.serverUrl, e.source.name + \"/\" + dataId.toLocaleLowerCase()), type: 'json' }).runInContext(taskCtx)];\r\n                    case 3:\r\n                        header = _a.sent();\r\n                        entries.push({\r\n                            dataId: dataId,\r\n                            kind: e.source.name,\r\n                            header: header,\r\n                            emDefaultContourLevel: emDefaultContourLevel\r\n                        });\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        ++i;\r\n                        return [3 /*break*/, 1];\r\n                    case 5:\r\n                        data = {\r\n                            serverUrl: params.serverUrl,\r\n                            entries: entries,\r\n                            structure: a.data\r\n                        };\r\n                        return [2 /*return*/, new VolumeServerInfo(data, { label: 'Volume Server', description: \"\" + entries.map(function (e) { return e.dataId; }).join(', ') })];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nexport { CreateVolumeStreamingBehavior };\r\nvar CreateVolumeStreamingBehavior = PluginStateTransform.BuiltIn({\r\n    name: 'create-volume-streaming-behavior',\r\n    display: { name: 'Volume Streaming Behavior' },\r\n    from: VolumeServerInfo,\r\n    to: VolumeStreaming,\r\n    params: function (a) {\r\n        return VolumeStreaming.createParams({ data: a && a.data });\r\n    }\r\n})({\r\n    canAutoUpdate: function (_a) {\r\n        var oldParams = _a.oldParams, newParams = _a.newParams;\r\n        return oldParams.entry.params.view === newParams.entry.params.view\r\n            || newParams.entry.params.view.name === 'selection-box'\r\n            || newParams.entry.params.view.name === 'off';\r\n    },\r\n    apply: function (_a, plugin) {\r\n        var a = _a.a, params = _a.params;\r\n        return Task.create('Volume streaming', function (_) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var behavior;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        behavior = new VolumeStreaming.Behavior(plugin, a.data);\r\n                        return [4 /*yield*/, behavior.update(params)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, new VolumeStreaming(behavior, { label: 'Volume Streaming', description: behavior.getDescription() })];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    update: function (_a) {\r\n        var _this = this;\r\n        var a = _a.a, b = _a.b, oldParams = _a.oldParams, newParams = _a.newParams;\r\n        return Task.create('Update Volume Streaming', function (_) { return __awaiter(_this, void 0, void 0, function () {\r\n            var emDefaultContourLevel, ret;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (oldParams.entry.name !== newParams.entry.name) {\r\n                            if ('em' in newParams.entry.params.channels) {\r\n                                emDefaultContourLevel = b.data.infoMap.get(newParams.entry.name).emDefaultContourLevel;\r\n                                if (emDefaultContourLevel) {\r\n                                    newParams.entry.params.channels['em'].isoValue = emDefaultContourLevel;\r\n                                }\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, b.data.update(newParams)];\r\n                    case 1:\r\n                        ret = (_a.sent()) ? StateTransformer.UpdateResult.Updated : StateTransformer.UpdateResult.Unchanged;\r\n                        b.description = b.data.getDescription();\r\n                        return [2 /*return*/, ret];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nexport { VolumeStreamingVisual };\r\nvar VolumeStreamingVisual = PluginStateTransform.BuiltIn({\r\n    name: 'create-volume-streaming-visual',\r\n    display: { name: 'Volume Streaming Visual' },\r\n    from: VolumeStreaming,\r\n    to: SO.Volume.Representation3D,\r\n    params: {\r\n        channel: PD.Select('em', VolumeStreaming.ChannelTypeOptions, { isHidden: true })\r\n    }\r\n})({\r\n    apply: function (_a, plugin) {\r\n        var a = _a.a, srcParams = _a.params, spine = _a.spine;\r\n        return Task.create('Volume Representation', function (ctx) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var channel, params, provider, props, repr, structure, transform;\r\n            var _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        channel = a.data.channels[srcParams.channel];\r\n                        if (!channel)\r\n                            return [2 /*return*/, StateObject.Null];\r\n                        params = createVolumeProps(a.data, srcParams.channel);\r\n                        provider = VolumeRepresentationRegistry.BuiltIn.isosurface;\r\n                        props = params.type.params || {};\r\n                        repr = provider.factory(__assign({ webgl: (_a = plugin.canvas3d) === null || _a === void 0 ? void 0 : _a.webgl }, plugin.representation.volume.themes), provider.getParams);\r\n                        repr.setTheme(Theme.create(plugin.representation.volume.themes, { volume: channel.data }, params));\r\n                        structure = (_b = spine.getAncestorOfType(SO.Molecule.Structure)) === null || _b === void 0 ? void 0 : _b.data;\r\n                        transform = (structure === null || structure === void 0 ? void 0 : structure.models.length) === 0 ? void 0 : GlobalModelTransformInfo.get(structure === null || structure === void 0 ? void 0 : structure.models[0]);\r\n                        return [4 /*yield*/, repr.createOrUpdate(props, channel.data).runInContext(ctx)];\r\n                    case 1:\r\n                        _c.sent();\r\n                        if (transform)\r\n                            repr.setState({ transform: transform });\r\n                        return [2 /*return*/, new SO.Volume.Representation3D({ repr: repr, sourceData: channel.data }, { label: Math.round(channel.isoValue.relativeValue * 100) / 100 + \" \\u03C3 [\" + srcParams.channel + \"]\" })];\r\n                }\r\n            });\r\n        }); });\r\n    },\r\n    update: function (_a, plugin) {\r\n        var a = _a.a, b = _a.b, newParams = _a.newParams, spine = _a.spine;\r\n        return Task.create('Volume Representation', function (ctx) { return __awaiter(void 0, void 0, void 0, function () {\r\n            var channel, visible, params, props;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        channel = a.data.channels[newParams.channel];\r\n                        // TODO: is this correct behavior?\r\n                        if (!channel)\r\n                            return [2 /*return*/, StateTransformer.UpdateResult.Unchanged];\r\n                        visible = b.data.repr.state.visible;\r\n                        params = createVolumeProps(a.data, newParams.channel);\r\n                        props = __assign(__assign({}, b.data.repr.props), params.type.params);\r\n                        b.data.repr.setTheme(Theme.create(plugin.representation.volume.themes, { volume: channel.data }, params));\r\n                        return [4 /*yield*/, b.data.repr.createOrUpdate(props, channel.data).runInContext(ctx)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        b.data.repr.setState({ visible: visible });\r\n                        b.data.sourceData = channel.data;\r\n                        // TODO: set the transform here as well in case the structure moves?\r\n                        //       doing this here now breaks the code for some reason...\r\n                        // const structure = spine.getAncestorOfType(SO.Molecule.Structure)?.data;\r\n                        // const transform = structure?.models.length === 0 ? void 0 : GlobalModelTransformInfo.get(structure?.models[0]!);\r\n                        // if (transform) b.data.repr.setState({ transform });\r\n                        return [2 /*return*/, StateTransformer.UpdateResult.Updated];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n});\r\nfunction createVolumeProps(streaming, channelName) {\r\n    var channel = streaming.channels[channelName];\r\n    return VolumeRepresentation3DHelpers.getDefaultParamsStatic(streaming.plugin, 'isosurface', { isoValue: channel.isoValue, alpha: channel.opacity, visuals: channel.wireframe ? ['wireframe'] : ['solid'] }, 'uniform', { value: channel.color });\r\n}\r\n//# sourceMappingURL=transformers.js.map"]},"metadata":{},"sourceType":"module"}