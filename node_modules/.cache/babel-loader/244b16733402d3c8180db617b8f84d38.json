{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { AminoAcidNames, BaseNames } from '../../types';\n/**\r\n * Map of intra component bond orders in aminoacids and nucleotides assuming standard IUPAC naming.\r\n * The key is constructed as `${compId}|${atomId1}|${atomId2}` with `atomId1 < atomId2`.\r\n */\n\nvar IntraBondOrderTable = new Map([['HIS|CD2|CG', 2], ['HIS|CE1|ND1', 2], ['ARG|CZ|NH2', 2], ['PHE|CE1|CZ', 2], ['PHE|CD2|CE2', 2], ['PHE|CD1|CG', 2], ['TRP|CD1|CG', 2], ['TRP|CD2|CE2', 2], ['TRP|CE3|CZ3', 2], ['TRP|CH2|CZ2', 2], ['ASN|CG|OD1', 2], ['GLN|CD|OE1', 2], ['TYR|CD1|CG', 2], ['TYR|CD2|CE2', 2], ['TYR|CE1|CZ', 2], ['ASP|CG|OD1', 2], ['GLU|CD|OE1', 2], ['G|C8|N7', 2], ['G|C4|C5', 2], ['G|C2|N3', 2], ['G|C6|O6', 2], ['C|C4|N3', 2], ['C|C5|C6', 2], ['C|C2|O2', 2], ['A|C2|N3', 2], ['A|C6|N1', 2], ['A|C4|C5', 2], ['A|C8|N7', 2], ['U|C5|C6', 2], ['U|C2|O2', 2], ['U|C4|O4', 2], ['DG|C8|N7', 2], ['DG|C4|C5', 2], ['DG|C2|N3', 2], ['DG|C6|O6', 2], ['DC|C4|N3', 2], ['DC|C5|C6', 2], ['DC|C2|O2', 2], ['DA|C2|N3', 2], ['DA|C6|N1', 2], ['DA|C4|C5', 2], ['DA|C8|N7', 2], ['DT|C5|C6', 2], ['DT|C2|O2', 2], ['DT|C4|O4', 2]]);\n/**\r\n * Get order for bonds in aminoacids and nucleotides assuming standard IUPAC naming\r\n */\n\nexport function getIntraBondOrderFromTable(compId, atomId1, atomId2) {\n  var _a;\n\n  _a = atomId1 < atomId2 ? [atomId1, atomId2] : [atomId2, atomId1], atomId1 = _a[0], atomId2 = _a[1];\n  if (AminoAcidNames.has(compId) && atomId1 === 'C' && atomId2 === 'O') return 2;\n  if (BaseNames.has(compId) && atomId1 === 'OP1' && atomId2 === 'P') return 2;\n  return IntraBondOrderTable.get(compId + \"|\" + atomId1 + \"|\" + atomId2) || 1;\n}\n/**\r\n * Map of inter component bond orders assuming PDBx/mmCIF naming.\r\n * The key is constructed as `${compId1}|${compId2}|${atomId1}|${atomId2}` with `compId1 < compId2`.\r\n */\n\nvar InterBondOrderTable = new Map([['LYS|NZ|RET|C15', 2] // Schiff base in Rhodopsin and Bacteriorhodopsin\n]);\n/**\r\n * Get order for bonds between component assuming PDBx/mmCIF naming.\r\n */\n\nexport function getInterBondOrderFromTable(compId1, atomId1, compId2, atomId2) {\n  var _a, _b;\n\n  if (compId1 > compId2) {\n    _a = [compId2, compId1], compId1 = _a[0], compId2 = _a[1];\n    _b = [atomId2, atomId1], atomId1 = _b[0], atomId2 = _b[1];\n  }\n\n  return InterBondOrderTable.get(compId1 + \"|\" + atomId1 + \"|\" + compId2 + \"|\" + atomId2) || 1;\n}","map":{"version":3,"sources":["../../../../../../src/mol-model/structure/model/properties/atomic/bonds.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { AminoAcidNames, BaseNames } from '../../types';\r\n/**\r\n * Map of intra component bond orders in aminoacids and nucleotides assuming standard IUPAC naming.\r\n * The key is constructed as `${compId}|${atomId1}|${atomId2}` with `atomId1 < atomId2`.\r\n */\r\nvar IntraBondOrderTable = new Map([\r\n    ['HIS|CD2|CG', 2],\r\n    ['HIS|CE1|ND1', 2],\r\n    ['ARG|CZ|NH2', 2],\r\n    ['PHE|CE1|CZ', 2],\r\n    ['PHE|CD2|CE2', 2],\r\n    ['PHE|CD1|CG', 2],\r\n    ['TRP|CD1|CG', 2],\r\n    ['TRP|CD2|CE2', 2],\r\n    ['TRP|CE3|CZ3', 2],\r\n    ['TRP|CH2|CZ2', 2],\r\n    ['ASN|CG|OD1', 2],\r\n    ['GLN|CD|OE1', 2],\r\n    ['TYR|CD1|CG', 2],\r\n    ['TYR|CD2|CE2', 2],\r\n    ['TYR|CE1|CZ', 2],\r\n    ['ASP|CG|OD1', 2],\r\n    ['GLU|CD|OE1', 2],\r\n    ['G|C8|N7', 2],\r\n    ['G|C4|C5', 2],\r\n    ['G|C2|N3', 2],\r\n    ['G|C6|O6', 2],\r\n    ['C|C4|N3', 2],\r\n    ['C|C5|C6', 2],\r\n    ['C|C2|O2', 2],\r\n    ['A|C2|N3', 2],\r\n    ['A|C6|N1', 2],\r\n    ['A|C4|C5', 2],\r\n    ['A|C8|N7', 2],\r\n    ['U|C5|C6', 2],\r\n    ['U|C2|O2', 2],\r\n    ['U|C4|O4', 2],\r\n    ['DG|C8|N7', 2],\r\n    ['DG|C4|C5', 2],\r\n    ['DG|C2|N3', 2],\r\n    ['DG|C6|O6', 2],\r\n    ['DC|C4|N3', 2],\r\n    ['DC|C5|C6', 2],\r\n    ['DC|C2|O2', 2],\r\n    ['DA|C2|N3', 2],\r\n    ['DA|C6|N1', 2],\r\n    ['DA|C4|C5', 2],\r\n    ['DA|C8|N7', 2],\r\n    ['DT|C5|C6', 2],\r\n    ['DT|C2|O2', 2],\r\n    ['DT|C4|O4', 2]\r\n]);\r\n/**\r\n * Get order for bonds in aminoacids and nucleotides assuming standard IUPAC naming\r\n */\r\nexport function getIntraBondOrderFromTable(compId, atomId1, atomId2) {\r\n    var _a;\r\n    _a = atomId1 < atomId2 ? [atomId1, atomId2] : [atomId2, atomId1], atomId1 = _a[0], atomId2 = _a[1];\r\n    if (AminoAcidNames.has(compId) && atomId1 === 'C' && atomId2 === 'O')\r\n        return 2;\r\n    if (BaseNames.has(compId) && atomId1 === 'OP1' && atomId2 === 'P')\r\n        return 2;\r\n    return IntraBondOrderTable.get(compId + \"|\" + atomId1 + \"|\" + atomId2) || 1;\r\n}\r\n/**\r\n * Map of inter component bond orders assuming PDBx/mmCIF naming.\r\n * The key is constructed as `${compId1}|${compId2}|${atomId1}|${atomId2}` with `compId1 < compId2`.\r\n */\r\nvar InterBondOrderTable = new Map([\r\n    ['LYS|NZ|RET|C15', 2] // Schiff base in Rhodopsin and Bacteriorhodopsin\r\n]);\r\n/**\r\n * Get order for bonds between component assuming PDBx/mmCIF naming.\r\n */\r\nexport function getInterBondOrderFromTable(compId1, atomId1, compId2, atomId2) {\r\n    var _a, _b;\r\n    if (compId1 > compId2) {\r\n        _a = [compId2, compId1], compId1 = _a[0], compId2 = _a[1];\r\n        _b = [atomId2, atomId1], atomId1 = _b[0], atomId2 = _b[1];\r\n    }\r\n    return InterBondOrderTable.get(compId1 + \"|\" + atomId1 + \"|\" + compId2 + \"|\" + atomId2) || 1;\r\n}\r\n//# sourceMappingURL=bonds.js.map"]},"metadata":{},"sourceType":"module"}