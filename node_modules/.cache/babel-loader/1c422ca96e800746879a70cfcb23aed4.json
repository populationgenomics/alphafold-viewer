{"ast":null,"code":"/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __spreadArray } from \"tslib\";\nimport { Column, ColumnHelpers } from '../../../mol-data/db';\nimport { getNumberType, parseInt as fastParseInt, parseFloat as fastParseFloat } from '../common/text/number-parser';\nimport { areValuesEqualProvider } from '../common/text/column/token';\nexport function CifFile(blocks, name) {\n  return {\n    name: name,\n    blocks: blocks\n  };\n}\nexport function CifBlock(categoryNames, categories, header, saveFrames) {\n  if (saveFrames === void 0) {\n    saveFrames = [];\n  }\n\n  return {\n    categoryNames: categoryNames,\n    header: header,\n    categories: categories,\n    saveFrames: saveFrames,\n    getField: function (name) {\n      var _a = name.split('.'),\n          category = _a[0],\n          field = _a[1];\n\n      return categories[category].getField(field || '');\n    }\n  };\n}\nexport function CifSaveFrame(categoryNames, categories, header) {\n  return {\n    categoryNames: categoryNames,\n    header: header,\n    categories: categories\n  };\n}\nexport function CifCategory(name, rowCount, fieldNames, fields) {\n  return {\n    rowCount: rowCount,\n    name: name,\n    fieldNames: __spreadArray([], fieldNames, true),\n    getField: function (name) {\n      return fields[name];\n    }\n  };\n}\n\n(function (CifCategory) {\n  function empty(name) {\n    return {\n      rowCount: 0,\n      name: name,\n      fieldNames: [],\n      getField: function (name) {\n        return void 0;\n      }\n    };\n  }\n\n  CifCategory.empty = empty;\n  ;\n\n  function ofFields(name, fields) {\n    var fieldNames = Object.keys(fields);\n    return {\n      rowCount: fieldNames.length > 0 ? fields[fieldNames[0]].rowCount : 0,\n      name: name,\n      fieldNames: fieldNames,\n      getField: function (name) {\n        return fields[name];\n      }\n    };\n  }\n\n  CifCategory.ofFields = ofFields;\n\n  function ofTable(name, table) {\n    var fields = {};\n\n    for (var _a = 0, _b = table._columns; _a < _b.length; _a++) {\n      var name_1 = _b[_a];\n      fields[name_1] = CifField.ofColumn(table[name_1]);\n    }\n\n    return ofFields(name, fields);\n  }\n\n  CifCategory.ofTable = ofTable;\n})(CifCategory || (CifCategory = {}));\n\nexport var CifField;\n\n(function (CifField) {\n  function ofString(value) {\n    return ofStrings([value]);\n  }\n\n  CifField.ofString = ofString;\n\n  function ofStrings(values) {\n    var rowCount = values.length;\n\n    var str = function (row) {\n      var ret = values[row];\n      if (!ret || ret === '.' || ret === '?') return '';\n      return ret;\n    };\n\n    var int = function (row) {\n      var v = values[row];\n      return fastParseInt(v, 0, v.length) || 0;\n    };\n\n    var float = function (row) {\n      var v = values[row];\n      return fastParseFloat(v, 0, v.length) || 0;\n    };\n\n    var valueKind = function (row) {\n      var v = values[row],\n          l = v.length;\n      if (l > 1) return 0\n      /* Present */\n      ;\n      if (l === 0) return 1\n      /* NotPresent */\n      ;\n      var c = v.charCodeAt(0);\n      if (c === 46\n      /* . */\n      ) return 1\n      /* NotPresent */\n      ;\n      if (c === 63\n      /* ? */\n      ) return 2\n      /* Unknown */\n      ;\n      return 0\n      /* Present */\n      ;\n    };\n\n    return {\n      __array: void 0,\n      binaryEncoding: void 0,\n      isDefined: true,\n      rowCount: rowCount,\n      str: str,\n      int: int,\n      float: float,\n      valueKind: valueKind,\n      areValuesEqual: function (rowA, rowB) {\n        return values[rowA] === values[rowB];\n      },\n      toStringArray: function (params) {\n        return params ? ColumnHelpers.createAndFillArray(rowCount, str, params) : values;\n      },\n      toIntArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, int, params);\n      },\n      toFloatArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, float, params);\n      }\n    };\n  }\n\n  CifField.ofStrings = ofStrings;\n\n  function ofNumbers(values) {\n    var rowCount = values.length;\n\n    var str = function (row) {\n      return '' + values[row];\n    };\n\n    var float = function (row) {\n      return values[row];\n    };\n\n    var valueKind = function (row) {\n      return 0\n      /* Present */\n      ;\n    };\n\n    var toFloatArray = function (params) {\n      if (!params || params.array && values instanceof params.array) {\n        return values;\n      } else {\n        return ColumnHelpers.createAndFillArray(rowCount, float, params);\n      }\n    };\n\n    return {\n      __array: void 0,\n      binaryEncoding: void 0,\n      isDefined: true,\n      rowCount: rowCount,\n      str: str,\n      int: float,\n      float: float,\n      valueKind: valueKind,\n      areValuesEqual: function (rowA, rowB) {\n        return values[rowA] === values[rowB];\n      },\n      toStringArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, str, params);\n      },\n      toIntArray: toFloatArray,\n      toFloatArray: toFloatArray\n    };\n  }\n\n  CifField.ofNumbers = ofNumbers;\n\n  function ofTokens(tokens) {\n    var data = tokens.data,\n        indices = tokens.indices,\n        rowCount = tokens.count;\n\n    var str = function (row) {\n      var ret = data.substring(indices[2 * row], indices[2 * row + 1]);\n      if (ret === '.' || ret === '?') return '';\n      return ret;\n    };\n\n    var int = function (row) {\n      return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0;\n    };\n\n    var float = function (row) {\n      return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0;\n    };\n\n    var valueKind = function (row) {\n      var s = indices[2 * row],\n          l = indices[2 * row + 1] - s;\n      if (l > 1) return 0\n      /* Present */\n      ;\n      if (l === 0) return 1\n      /* NotPresent */\n      ;\n      var v = data.charCodeAt(s);\n      if (v === 46\n      /* . */\n      ) return 1\n      /* NotPresent */\n      ;\n      if (v === 63\n      /* ? */\n      ) return 2\n      /* Unknown */\n      ;\n      return 0\n      /* Present */\n      ;\n    };\n\n    return {\n      __array: void 0,\n      binaryEncoding: void 0,\n      isDefined: true,\n      rowCount: rowCount,\n      str: str,\n      int: int,\n      float: float,\n      valueKind: valueKind,\n      areValuesEqual: areValuesEqualProvider(tokens),\n      toStringArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, str, params);\n      },\n      toIntArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, int, params);\n      },\n      toFloatArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, float, params);\n      }\n    };\n  }\n\n  CifField.ofTokens = ofTokens;\n\n  function ofColumn(column) {\n    var rowCount = column.rowCount,\n        valueKind = column.valueKind,\n        areValuesEqual = column.areValuesEqual,\n        isDefined = column.isDefined;\n    var str;\n    var int;\n    var float;\n\n    switch (column.schema.valueType) {\n      case 'float':\n      case 'int':\n        str = function (row) {\n          return '' + column.value(row);\n        };\n\n        int = column.value;\n        float = column.value;\n        break;\n\n      case 'str':\n        str = column.value;\n\n        int = function (row) {\n          var v = column.value(row);\n          return fastParseInt(v, 0, v.length) || 0;\n        };\n\n        float = function (row) {\n          var v = column.value(row);\n          return fastParseFloat(v, 0, v.length) || 0;\n        };\n\n        break;\n\n      case 'list':\n        var separator_1 = column.schema.separator;\n\n        str = function (row) {\n          return column.value(row).join(separator_1);\n        };\n\n        int = function (row) {\n          return NaN;\n        };\n\n        float = function (row) {\n          return NaN;\n        };\n\n        break;\n\n      default:\n        throw new Error(\"unsupported valueType '\" + column.schema.valueType + \"'\");\n    }\n\n    return {\n      __array: void 0,\n      binaryEncoding: void 0,\n      isDefined: isDefined,\n      rowCount: rowCount,\n      str: str,\n      int: int,\n      float: float,\n      valueKind: valueKind,\n      areValuesEqual: areValuesEqual,\n      toStringArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, str, params);\n      },\n      toIntArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, int, params);\n      },\n      toFloatArray: function (params) {\n        return ColumnHelpers.createAndFillArray(rowCount, float, params);\n      }\n    };\n  }\n\n  CifField.ofColumn = ofColumn;\n\n  function ofUndefined(rowCount, schema) {\n    return ofColumn(Column.Undefined(rowCount, schema));\n  }\n\n  CifField.ofUndefined = ofUndefined;\n})(CifField || (CifField = {}));\n\nexport function tensorFieldNameGetter(field, rank, zeroIndexed, namingVariant) {\n  var offset = zeroIndexed ? 0 : 1;\n\n  switch (rank) {\n    case 1:\n      return namingVariant === 'brackets' ? function (i) {\n        return field + \"[\" + (i + offset) + \"]\";\n      } : function (i) {\n        return field + \"_\" + (i + offset);\n      };\n\n    case 2:\n      return namingVariant === 'brackets' ? function (i, j) {\n        return field + \"[\" + (i + offset) + \"][\" + (j + offset) + \"]\";\n      } : function (i, j) {\n        return field + \"_\" + (i + offset) + (j + offset);\n      };\n\n    case 3:\n      return namingVariant === 'brackets' ? function (i, j, k) {\n        return field + \"[\" + (i + offset) + \"][\" + (j + offset) + \"][\" + (k + offset) + \"]\";\n      } : function (i, j, k) {\n        return field + \"_\" + (i + offset) + (j + offset) + (k + offset);\n      };\n\n    default:\n      throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');\n  }\n}\nexport function getTensor(category, space, row, getName) {\n  var ret = space.create();\n\n  if (space.rank === 1) {\n    var rows = space.dimensions[0];\n\n    for (var i = 0; i < rows; i++) {\n      var f = category.getField(getName(i));\n      space.set(ret, i, !!f ? f.float(row) : 0.0);\n    }\n  } else if (space.rank === 2) {\n    var rows = space.dimensions[0],\n        cols = space.dimensions[1];\n\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < cols; j++) {\n        var f = category.getField(getName(i, j));\n        space.set(ret, i, j, !!f ? f.float(row) : 0.0);\n      }\n    }\n  } else if (space.rank === 3) {\n    var d0 = space.dimensions[0],\n        d1 = space.dimensions[1],\n        d2 = space.dimensions[2];\n\n    for (var i = 0; i < d0; i++) {\n      for (var j = 0; j < d1; j++) {\n        for (var k = 0; k < d2; k++) {\n          var f = category.getField(getName(i, j, k));\n          space.set(ret, i, j, k, !!f ? f.float(row) : 0.0);\n        }\n      }\n    }\n  } else {\n    throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');\n  }\n\n  return ret;\n}\nexport function getCifFieldType(field) {\n  var floatCount = 0,\n      hasStringOrScientific = false,\n      undefinedCount = 0;\n\n  for (var i = 0, _i = field.rowCount; i < _i; i++) {\n    var k = field.valueKind(i);\n\n    if (k !== 0\n    /* Present */\n    ) {\n      undefinedCount++;\n      continue;\n    }\n\n    var type = getNumberType(field.str(i));\n    if (type === 0\n    /* Int */\n    ) continue;else if (type === 1\n    /* Float */\n    ) floatCount++;else {\n      hasStringOrScientific = true;\n      break;\n    }\n  } // numbers in scientific notation and plain text are not distinguishable\n\n\n  if (hasStringOrScientific || undefinedCount === field.rowCount) return Column.Schema.str;\n  if (floatCount > 0) return Column.Schema.float;\n  return Column.Schema.int;\n}","map":{"version":3,"sources":["../../../../src/mol-io/reader/cif/data-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author David Sehnal <david.sehnal@gmail.com>\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __spreadArray } from \"tslib\";\r\nimport { Column, ColumnHelpers } from '../../../mol-data/db';\r\nimport { getNumberType, parseInt as fastParseInt, parseFloat as fastParseFloat } from '../common/text/number-parser';\r\nimport { areValuesEqualProvider } from '../common/text/column/token';\r\nexport function CifFile(blocks, name) {\r\n    return { name: name, blocks: blocks };\r\n}\r\nexport function CifBlock(categoryNames, categories, header, saveFrames) {\r\n    if (saveFrames === void 0) { saveFrames = []; }\r\n    return {\r\n        categoryNames: categoryNames,\r\n        header: header,\r\n        categories: categories,\r\n        saveFrames: saveFrames,\r\n        getField: function (name) {\r\n            var _a = name.split('.'), category = _a[0], field = _a[1];\r\n            return categories[category].getField(field || '');\r\n        }\r\n    };\r\n}\r\nexport function CifSaveFrame(categoryNames, categories, header) {\r\n    return { categoryNames: categoryNames, header: header, categories: categories };\r\n}\r\nexport function CifCategory(name, rowCount, fieldNames, fields) {\r\n    return { rowCount: rowCount, name: name, fieldNames: __spreadArray([], fieldNames, true), getField: function (name) { return fields[name]; } };\r\n}\r\n(function (CifCategory) {\r\n    function empty(name) {\r\n        return { rowCount: 0, name: name, fieldNames: [], getField: function (name) { return void 0; } };\r\n    }\r\n    CifCategory.empty = empty;\r\n    ;\r\n    function ofFields(name, fields) {\r\n        var fieldNames = Object.keys(fields);\r\n        return {\r\n            rowCount: fieldNames.length > 0 ? fields[fieldNames[0]].rowCount : 0,\r\n            name: name,\r\n            fieldNames: fieldNames,\r\n            getField: function (name) { return fields[name]; }\r\n        };\r\n    }\r\n    CifCategory.ofFields = ofFields;\r\n    function ofTable(name, table) {\r\n        var fields = {};\r\n        for (var _a = 0, _b = table._columns; _a < _b.length; _a++) {\r\n            var name_1 = _b[_a];\r\n            fields[name_1] = CifField.ofColumn(table[name_1]);\r\n        }\r\n        return ofFields(name, fields);\r\n    }\r\n    CifCategory.ofTable = ofTable;\r\n})(CifCategory || (CifCategory = {}));\r\nexport var CifField;\r\n(function (CifField) {\r\n    function ofString(value) {\r\n        return ofStrings([value]);\r\n    }\r\n    CifField.ofString = ofString;\r\n    function ofStrings(values) {\r\n        var rowCount = values.length;\r\n        var str = function (row) { var ret = values[row]; if (!ret || ret === '.' || ret === '?')\r\n            return ''; return ret; };\r\n        var int = function (row) { var v = values[row]; return fastParseInt(v, 0, v.length) || 0; };\r\n        var float = function (row) { var v = values[row]; return fastParseFloat(v, 0, v.length) || 0; };\r\n        var valueKind = function (row) {\r\n            var v = values[row], l = v.length;\r\n            if (l > 1)\r\n                return 0 /* Present */;\r\n            if (l === 0)\r\n                return 1 /* NotPresent */;\r\n            var c = v.charCodeAt(0);\r\n            if (c === 46 /* . */)\r\n                return 1 /* NotPresent */;\r\n            if (c === 63 /* ? */)\r\n                return 2 /* Unknown */;\r\n            return 0 /* Present */;\r\n        };\r\n        return {\r\n            __array: void 0,\r\n            binaryEncoding: void 0,\r\n            isDefined: true,\r\n            rowCount: rowCount,\r\n            str: str,\r\n            int: int,\r\n            float: float,\r\n            valueKind: valueKind,\r\n            areValuesEqual: function (rowA, rowB) { return values[rowA] === values[rowB]; },\r\n            toStringArray: function (params) { return params ? ColumnHelpers.createAndFillArray(rowCount, str, params) : values; },\r\n            toIntArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, int, params); },\r\n            toFloatArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, float, params); }\r\n        };\r\n    }\r\n    CifField.ofStrings = ofStrings;\r\n    function ofNumbers(values) {\r\n        var rowCount = values.length;\r\n        var str = function (row) { return '' + values[row]; };\r\n        var float = function (row) { return values[row]; };\r\n        var valueKind = function (row) { return 0 /* Present */; };\r\n        var toFloatArray = function (params) {\r\n            if (!params || params.array && values instanceof params.array) {\r\n                return values;\r\n            }\r\n            else {\r\n                return ColumnHelpers.createAndFillArray(rowCount, float, params);\r\n            }\r\n        };\r\n        return {\r\n            __array: void 0,\r\n            binaryEncoding: void 0,\r\n            isDefined: true,\r\n            rowCount: rowCount,\r\n            str: str,\r\n            int: float,\r\n            float: float,\r\n            valueKind: valueKind,\r\n            areValuesEqual: function (rowA, rowB) { return values[rowA] === values[rowB]; },\r\n            toStringArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, str, params); },\r\n            toIntArray: toFloatArray,\r\n            toFloatArray: toFloatArray\r\n        };\r\n    }\r\n    CifField.ofNumbers = ofNumbers;\r\n    function ofTokens(tokens) {\r\n        var data = tokens.data, indices = tokens.indices, rowCount = tokens.count;\r\n        var str = function (row) {\r\n            var ret = data.substring(indices[2 * row], indices[2 * row + 1]);\r\n            if (ret === '.' || ret === '?')\r\n                return '';\r\n            return ret;\r\n        };\r\n        var int = function (row) {\r\n            return fastParseInt(data, indices[2 * row], indices[2 * row + 1]) || 0;\r\n        };\r\n        var float = function (row) {\r\n            return fastParseFloat(data, indices[2 * row], indices[2 * row + 1]) || 0;\r\n        };\r\n        var valueKind = function (row) {\r\n            var s = indices[2 * row], l = indices[2 * row + 1] - s;\r\n            if (l > 1)\r\n                return 0 /* Present */;\r\n            if (l === 0)\r\n                return 1 /* NotPresent */;\r\n            var v = data.charCodeAt(s);\r\n            if (v === 46 /* . */)\r\n                return 1 /* NotPresent */;\r\n            if (v === 63 /* ? */)\r\n                return 2 /* Unknown */;\r\n            return 0 /* Present */;\r\n        };\r\n        return {\r\n            __array: void 0,\r\n            binaryEncoding: void 0,\r\n            isDefined: true,\r\n            rowCount: rowCount,\r\n            str: str,\r\n            int: int,\r\n            float: float,\r\n            valueKind: valueKind,\r\n            areValuesEqual: areValuesEqualProvider(tokens),\r\n            toStringArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, str, params); },\r\n            toIntArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, int, params); },\r\n            toFloatArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, float, params); }\r\n        };\r\n    }\r\n    CifField.ofTokens = ofTokens;\r\n    function ofColumn(column) {\r\n        var rowCount = column.rowCount, valueKind = column.valueKind, areValuesEqual = column.areValuesEqual, isDefined = column.isDefined;\r\n        var str;\r\n        var int;\r\n        var float;\r\n        switch (column.schema.valueType) {\r\n            case 'float':\r\n            case 'int':\r\n                str = function (row) { return '' + column.value(row); };\r\n                int = column.value;\r\n                float = column.value;\r\n                break;\r\n            case 'str':\r\n                str = column.value;\r\n                int = function (row) { var v = column.value(row); return fastParseInt(v, 0, v.length) || 0; };\r\n                float = function (row) { var v = column.value(row); return fastParseFloat(v, 0, v.length) || 0; };\r\n                break;\r\n            case 'list':\r\n                var separator_1 = column.schema.separator;\r\n                str = function (row) { return column.value(row).join(separator_1); };\r\n                int = function (row) { return NaN; };\r\n                float = function (row) { return NaN; };\r\n                break;\r\n            default:\r\n                throw new Error(\"unsupported valueType '\" + column.schema.valueType + \"'\");\r\n        }\r\n        return {\r\n            __array: void 0,\r\n            binaryEncoding: void 0,\r\n            isDefined: isDefined,\r\n            rowCount: rowCount,\r\n            str: str,\r\n            int: int,\r\n            float: float,\r\n            valueKind: valueKind,\r\n            areValuesEqual: areValuesEqual,\r\n            toStringArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, str, params); },\r\n            toIntArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, int, params); },\r\n            toFloatArray: function (params) { return ColumnHelpers.createAndFillArray(rowCount, float, params); }\r\n        };\r\n    }\r\n    CifField.ofColumn = ofColumn;\r\n    function ofUndefined(rowCount, schema) {\r\n        return ofColumn(Column.Undefined(rowCount, schema));\r\n    }\r\n    CifField.ofUndefined = ofUndefined;\r\n})(CifField || (CifField = {}));\r\nexport function tensorFieldNameGetter(field, rank, zeroIndexed, namingVariant) {\r\n    var offset = zeroIndexed ? 0 : 1;\r\n    switch (rank) {\r\n        case 1:\r\n            return namingVariant === 'brackets'\r\n                ? function (i) { return field + \"[\" + (i + offset) + \"]\"; }\r\n                : function (i) { return field + \"_\" + (i + offset); };\r\n        case 2:\r\n            return namingVariant === 'brackets'\r\n                ? function (i, j) { return field + \"[\" + (i + offset) + \"][\" + (j + offset) + \"]\"; }\r\n                : function (i, j) { return field + \"_\" + (i + offset) + (j + offset); };\r\n        case 3:\r\n            return namingVariant === 'brackets'\r\n                ? function (i, j, k) { return field + \"[\" + (i + offset) + \"][\" + (j + offset) + \"][\" + (k + offset) + \"]\"; }\r\n                : function (i, j, k) { return field + \"_\" + (i + offset) + (j + offset) + (k + offset); };\r\n        default:\r\n            throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');\r\n    }\r\n}\r\nexport function getTensor(category, space, row, getName) {\r\n    var ret = space.create();\r\n    if (space.rank === 1) {\r\n        var rows = space.dimensions[0];\r\n        for (var i = 0; i < rows; i++) {\r\n            var f = category.getField(getName(i));\r\n            space.set(ret, i, !!f ? f.float(row) : 0.0);\r\n        }\r\n    }\r\n    else if (space.rank === 2) {\r\n        var rows = space.dimensions[0], cols = space.dimensions[1];\r\n        for (var i = 0; i < rows; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                var f = category.getField(getName(i, j));\r\n                space.set(ret, i, j, !!f ? f.float(row) : 0.0);\r\n            }\r\n        }\r\n    }\r\n    else if (space.rank === 3) {\r\n        var d0 = space.dimensions[0], d1 = space.dimensions[1], d2 = space.dimensions[2];\r\n        for (var i = 0; i < d0; i++) {\r\n            for (var j = 0; j < d1; j++) {\r\n                for (var k = 0; k < d2; k++) {\r\n                    var f = category.getField(getName(i, j, k));\r\n                    space.set(ret, i, j, k, !!f ? f.float(row) : 0.0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');\r\n    }\r\n    return ret;\r\n}\r\nexport function getCifFieldType(field) {\r\n    var floatCount = 0, hasStringOrScientific = false, undefinedCount = 0;\r\n    for (var i = 0, _i = field.rowCount; i < _i; i++) {\r\n        var k = field.valueKind(i);\r\n        if (k !== 0 /* Present */) {\r\n            undefinedCount++;\r\n            continue;\r\n        }\r\n        var type = getNumberType(field.str(i));\r\n        if (type === 0 /* Int */)\r\n            continue;\r\n        else if (type === 1 /* Float */)\r\n            floatCount++;\r\n        else {\r\n            hasStringOrScientific = true;\r\n            break;\r\n        }\r\n    }\r\n    // numbers in scientific notation and plain text are not distinguishable\r\n    if (hasStringOrScientific || undefinedCount === field.rowCount)\r\n        return Column.Schema.str;\r\n    if (floatCount > 0)\r\n        return Column.Schema.float;\r\n    return Column.Schema.int;\r\n}\r\n//# sourceMappingURL=data-model.js.map"]},"metadata":{},"sourceType":"module"}