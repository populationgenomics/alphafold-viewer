{"ast":null,"code":"/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { __assign } from \"tslib\";\nimport { Loci } from '../../../mol-model/loci';\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\nimport { ColorNames } from '../../../mol-util/color/names';\nimport { ShapeRepresentation } from '../representation';\nimport { Representation } from '../../representation';\nimport { Shape } from '../../../mol-model/shape';\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\nimport { lociLabel } from '../../../mol-theme/label';\nimport { addAxes } from '../../../mol-geo/geometry/mesh/builder/axes';\nimport { addOrientedBox } from '../../../mol-geo/geometry/mesh/builder/box';\nimport { addEllipsoid } from '../../../mol-geo/geometry/mesh/builder/ellipsoid';\nimport { Axes3D } from '../../../mol-math/geometry';\nimport { Vec3 } from '../../../mol-math/linear-algebra';\nimport { MarkerActions } from '../../../mol-util/marker-action';\nvar SharedParams = {\n  color: PD.Color(ColorNames.orange),\n  scale: PD.Numeric(2, {\n    min: 0.1,\n    max: 10,\n    step: 0.1\n  })\n};\n\nvar AxesParams = __assign(__assign({}, Mesh.Params), SharedParams);\n\nvar BoxParams = __assign(__assign({}, Mesh.Params), SharedParams);\n\nvar EllipsoidParams = __assign(__assign({}, Mesh.Params), SharedParams);\n\nvar OrientationVisuals = {\n  'axes': function (ctx, getParams) {\n    return ShapeRepresentation(getAxesShape, Mesh.Utils);\n  },\n  'box': function (ctx, getParams) {\n    return ShapeRepresentation(getBoxShape, Mesh.Utils);\n  },\n  'ellipsoid': function (ctx, getParams) {\n    return ShapeRepresentation(getEllipsoidShape, Mesh.Utils);\n  }\n};\nexport var OrientationParams = __assign(__assign(__assign({}, AxesParams), BoxParams), {\n  visuals: PD.MultiSelect(['box'], PD.objectToOptions(OrientationVisuals)),\n  color: PD.Color(ColorNames.orange),\n  scale: PD.Numeric(2, {\n    min: 0.1,\n    max: 5,\n    step: 0.1\n  })\n}); //\n\nfunction orientationLabel(loci) {\n  var label = lociLabel(loci, {\n    countsOnly: true\n  });\n  return \"Principal Axes of \" + label;\n}\n\nfunction getOrientationName(data) {\n  return data.locis.length === 1 ? orientationLabel(data.locis[0]) : data.locis.length + \" Orientations\";\n} //\n\n\nfunction buildAxesMesh(data, props, mesh) {\n  var state = MeshBuilder.createState(256, 128, mesh);\n\n  for (var i = 0, il = data.locis.length; i < il; ++i) {\n    var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\n\n    if (principalAxes) {\n      state.currentGroup = i;\n      addAxes(state, principalAxes.momentsAxes, props.scale, 2, 20);\n    }\n  }\n\n  return MeshBuilder.getMesh(state);\n}\n\nfunction getAxesShape(ctx, data, props, shape) {\n  var mesh = buildAxesMesh(data, props, shape && shape.geometry);\n  var name = getOrientationName(data);\n\n  var getLabel = function (groupId) {\n    return orientationLabel(data.locis[groupId]);\n  };\n\n  return Shape.create(name, data, mesh, function () {\n    return props.color;\n  }, function () {\n    return 1;\n  }, getLabel);\n} //\n\n\nfunction buildBoxMesh(data, props, mesh) {\n  var state = MeshBuilder.createState(256, 128, mesh);\n\n  for (var i = 0, il = data.locis.length; i < il; ++i) {\n    var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\n\n    if (principalAxes) {\n      state.currentGroup = i;\n      addOrientedBox(state, principalAxes.boxAxes, props.scale, 2, 20);\n    }\n  }\n\n  return MeshBuilder.getMesh(state);\n}\n\nfunction getBoxShape(ctx, data, props, shape) {\n  var mesh = buildBoxMesh(data, props, shape && shape.geometry);\n  var name = getOrientationName(data);\n\n  var getLabel = function (groupId) {\n    return orientationLabel(data.locis[groupId]);\n  };\n\n  return Shape.create(name, data, mesh, function () {\n    return props.color;\n  }, function () {\n    return 1;\n  }, getLabel);\n} //\n\n\nfunction buildEllipsoidMesh(data, props, mesh) {\n  var state = MeshBuilder.createState(256, 128, mesh);\n\n  for (var i = 0, il = data.locis.length; i < il; ++i) {\n    var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\n\n    if (principalAxes) {\n      var axes = principalAxes.boxAxes;\n      var origin_1 = axes.origin,\n          dirA = axes.dirA,\n          dirB = axes.dirB;\n      var size = Axes3D.size(Vec3(), axes);\n      Vec3.scale(size, size, 0.5);\n      var radiusScale = Vec3.create(size[2], size[1], size[0]);\n      state.currentGroup = i;\n      addEllipsoid(state, origin_1, dirA, dirB, radiusScale, 2);\n    }\n  }\n\n  return MeshBuilder.getMesh(state);\n}\n\nfunction getEllipsoidShape(ctx, data, props, shape) {\n  var mesh = buildEllipsoidMesh(data, props, shape && shape.geometry);\n  var name = getOrientationName(data);\n\n  var getLabel = function (groupId) {\n    return orientationLabel(data.locis[groupId]);\n  };\n\n  return Shape.create(name, data, mesh, function () {\n    return props.color;\n  }, function () {\n    return 1;\n  }, getLabel);\n}\n\nexport function OrientationRepresentation(ctx, getParams) {\n  var repr = Representation.createMulti('Orientation', ctx, getParams, Representation.StateBuilder, OrientationVisuals);\n  repr.setState({\n    markerActions: MarkerActions.Highlighting\n  });\n  return repr;\n}","map":{"version":3,"sources":["../../../../src/mol-repr/shape/loci/orientation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { __assign } from \"tslib\";\r\nimport { Loci } from '../../../mol-model/loci';\r\nimport { ParamDefinition as PD } from '../../../mol-util/param-definition';\r\nimport { ColorNames } from '../../../mol-util/color/names';\r\nimport { ShapeRepresentation } from '../representation';\r\nimport { Representation } from '../../representation';\r\nimport { Shape } from '../../../mol-model/shape';\r\nimport { Mesh } from '../../../mol-geo/geometry/mesh/mesh';\r\nimport { MeshBuilder } from '../../../mol-geo/geometry/mesh/mesh-builder';\r\nimport { lociLabel } from '../../../mol-theme/label';\r\nimport { addAxes } from '../../../mol-geo/geometry/mesh/builder/axes';\r\nimport { addOrientedBox } from '../../../mol-geo/geometry/mesh/builder/box';\r\nimport { addEllipsoid } from '../../../mol-geo/geometry/mesh/builder/ellipsoid';\r\nimport { Axes3D } from '../../../mol-math/geometry';\r\nimport { Vec3 } from '../../../mol-math/linear-algebra';\r\nimport { MarkerActions } from '../../../mol-util/marker-action';\r\nvar SharedParams = {\r\n    color: PD.Color(ColorNames.orange),\r\n    scale: PD.Numeric(2, { min: 0.1, max: 10, step: 0.1 })\r\n};\r\nvar AxesParams = __assign(__assign({}, Mesh.Params), SharedParams);\r\nvar BoxParams = __assign(__assign({}, Mesh.Params), SharedParams);\r\nvar EllipsoidParams = __assign(__assign({}, Mesh.Params), SharedParams);\r\nvar OrientationVisuals = {\r\n    'axes': function (ctx, getParams) { return ShapeRepresentation(getAxesShape, Mesh.Utils); },\r\n    'box': function (ctx, getParams) { return ShapeRepresentation(getBoxShape, Mesh.Utils); },\r\n    'ellipsoid': function (ctx, getParams) { return ShapeRepresentation(getEllipsoidShape, Mesh.Utils); },\r\n};\r\nexport var OrientationParams = __assign(__assign(__assign({}, AxesParams), BoxParams), { visuals: PD.MultiSelect(['box'], PD.objectToOptions(OrientationVisuals)), color: PD.Color(ColorNames.orange), scale: PD.Numeric(2, { min: 0.1, max: 5, step: 0.1 }) });\r\n//\r\nfunction orientationLabel(loci) {\r\n    var label = lociLabel(loci, { countsOnly: true });\r\n    return \"Principal Axes of \" + label;\r\n}\r\nfunction getOrientationName(data) {\r\n    return data.locis.length === 1 ? orientationLabel(data.locis[0]) : data.locis.length + \" Orientations\";\r\n}\r\n//\r\nfunction buildAxesMesh(data, props, mesh) {\r\n    var state = MeshBuilder.createState(256, 128, mesh);\r\n    for (var i = 0, il = data.locis.length; i < il; ++i) {\r\n        var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\r\n        if (principalAxes) {\r\n            state.currentGroup = i;\r\n            addAxes(state, principalAxes.momentsAxes, props.scale, 2, 20);\r\n        }\r\n    }\r\n    return MeshBuilder.getMesh(state);\r\n}\r\nfunction getAxesShape(ctx, data, props, shape) {\r\n    var mesh = buildAxesMesh(data, props, shape && shape.geometry);\r\n    var name = getOrientationName(data);\r\n    var getLabel = function (groupId) {\r\n        return orientationLabel(data.locis[groupId]);\r\n    };\r\n    return Shape.create(name, data, mesh, function () { return props.color; }, function () { return 1; }, getLabel);\r\n}\r\n//\r\nfunction buildBoxMesh(data, props, mesh) {\r\n    var state = MeshBuilder.createState(256, 128, mesh);\r\n    for (var i = 0, il = data.locis.length; i < il; ++i) {\r\n        var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\r\n        if (principalAxes) {\r\n            state.currentGroup = i;\r\n            addOrientedBox(state, principalAxes.boxAxes, props.scale, 2, 20);\r\n        }\r\n    }\r\n    return MeshBuilder.getMesh(state);\r\n}\r\nfunction getBoxShape(ctx, data, props, shape) {\r\n    var mesh = buildBoxMesh(data, props, shape && shape.geometry);\r\n    var name = getOrientationName(data);\r\n    var getLabel = function (groupId) {\r\n        return orientationLabel(data.locis[groupId]);\r\n    };\r\n    return Shape.create(name, data, mesh, function () { return props.color; }, function () { return 1; }, getLabel);\r\n}\r\n//\r\nfunction buildEllipsoidMesh(data, props, mesh) {\r\n    var state = MeshBuilder.createState(256, 128, mesh);\r\n    for (var i = 0, il = data.locis.length; i < il; ++i) {\r\n        var principalAxes = Loci.getPrincipalAxes(data.locis[i]);\r\n        if (principalAxes) {\r\n            var axes = principalAxes.boxAxes;\r\n            var origin_1 = axes.origin, dirA = axes.dirA, dirB = axes.dirB;\r\n            var size = Axes3D.size(Vec3(), axes);\r\n            Vec3.scale(size, size, 0.5);\r\n            var radiusScale = Vec3.create(size[2], size[1], size[0]);\r\n            state.currentGroup = i;\r\n            addEllipsoid(state, origin_1, dirA, dirB, radiusScale, 2);\r\n        }\r\n    }\r\n    return MeshBuilder.getMesh(state);\r\n}\r\nfunction getEllipsoidShape(ctx, data, props, shape) {\r\n    var mesh = buildEllipsoidMesh(data, props, shape && shape.geometry);\r\n    var name = getOrientationName(data);\r\n    var getLabel = function (groupId) {\r\n        return orientationLabel(data.locis[groupId]);\r\n    };\r\n    return Shape.create(name, data, mesh, function () { return props.color; }, function () { return 1; }, getLabel);\r\n}\r\nexport function OrientationRepresentation(ctx, getParams) {\r\n    var repr = Representation.createMulti('Orientation', ctx, getParams, Representation.StateBuilder, OrientationVisuals);\r\n    repr.setState({ markerActions: MarkerActions.Highlighting });\r\n    return repr;\r\n}\r\n//# sourceMappingURL=orientation.js.map"]},"metadata":{},"sourceType":"module"}