{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { idFactory } from '../../mol-util/id-factory';\nimport { createNullTexture } from './texture';\nimport { createNullFramebuffer } from './framebuffer';\nimport { isWebGL2 } from './compat';\nvar getNextRenderTargetId = idFactory();\nexport function createRenderTarget(gl, resources, _width, _height, depth, type, filter) {\n  if (depth === void 0) {\n    depth = true;\n  }\n\n  if (type === void 0) {\n    type = 'uint8';\n  }\n\n  if (filter === void 0) {\n    filter = 'nearest';\n  }\n\n  var framebuffer = resources.framebuffer();\n  var targetTexture = type === 'fp16' ? resources.texture('image-float16', 'rgba', 'fp16', filter) : type === 'float32' ? resources.texture('image-float32', 'rgba', 'float', filter) : resources.texture('image-uint8', 'rgba', 'ubyte', filter); // make a depth renderbuffer of the same size as the targetTexture\n\n  var depthRenderbuffer = !depth ? null : isWebGL2(gl) ? resources.renderbuffer('depth32f', 'depth', _width, _height) : resources.renderbuffer('depth16', 'depth', _width, _height);\n\n  function init() {\n    targetTexture.define(_width, _height);\n    targetTexture.attachFramebuffer(framebuffer, 'color0');\n    if (depthRenderbuffer) depthRenderbuffer.attachFramebuffer(framebuffer);\n  }\n\n  init();\n  var destroyed = false;\n  return {\n    id: getNextRenderTargetId(),\n    texture: targetTexture,\n    framebuffer: framebuffer,\n    getWidth: function () {\n      return _width;\n    },\n    getHeight: function () {\n      return _height;\n    },\n    bind: function () {\n      framebuffer.bind();\n    },\n    setSize: function (width, height) {\n      if (_width === width && _height === height) {\n        return;\n      }\n\n      _width = width;\n      _height = height;\n      targetTexture.define(_width, _height);\n      if (depthRenderbuffer) depthRenderbuffer.setSize(_width, _height);\n    },\n    reset: function () {\n      init();\n    },\n    destroy: function () {\n      if (destroyed) return;\n      targetTexture.destroy();\n      framebuffer.destroy();\n      if (depthRenderbuffer) depthRenderbuffer.destroy();\n      destroyed = true;\n    }\n  };\n} //\n\nexport function createNullRenderTarget(gl) {\n  return {\n    id: getNextRenderTargetId(),\n    texture: createNullTexture(gl),\n    framebuffer: createNullFramebuffer(),\n    getWidth: function () {\n      return 0;\n    },\n    getHeight: function () {\n      return 0;\n    },\n    bind: function () {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    },\n    setSize: function () {},\n    reset: function () {},\n    destroy: function () {}\n  };\n}","map":{"version":3,"sources":["../../../src/mol-gl/webgl/render-target.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { idFactory } from '../../mol-util/id-factory';\r\nimport { createNullTexture } from './texture';\r\nimport { createNullFramebuffer } from './framebuffer';\r\nimport { isWebGL2 } from './compat';\r\nvar getNextRenderTargetId = idFactory();\r\nexport function createRenderTarget(gl, resources, _width, _height, depth, type, filter) {\r\n    if (depth === void 0) { depth = true; }\r\n    if (type === void 0) { type = 'uint8'; }\r\n    if (filter === void 0) { filter = 'nearest'; }\r\n    var framebuffer = resources.framebuffer();\r\n    var targetTexture = type === 'fp16'\r\n        ? resources.texture('image-float16', 'rgba', 'fp16', filter)\r\n        : type === 'float32'\r\n            ? resources.texture('image-float32', 'rgba', 'float', filter)\r\n            : resources.texture('image-uint8', 'rgba', 'ubyte', filter);\r\n    // make a depth renderbuffer of the same size as the targetTexture\r\n    var depthRenderbuffer = !depth\r\n        ? null\r\n        : isWebGL2(gl)\r\n            ? resources.renderbuffer('depth32f', 'depth', _width, _height)\r\n            : resources.renderbuffer('depth16', 'depth', _width, _height);\r\n    function init() {\r\n        targetTexture.define(_width, _height);\r\n        targetTexture.attachFramebuffer(framebuffer, 'color0');\r\n        if (depthRenderbuffer)\r\n            depthRenderbuffer.attachFramebuffer(framebuffer);\r\n    }\r\n    init();\r\n    var destroyed = false;\r\n    return {\r\n        id: getNextRenderTargetId(),\r\n        texture: targetTexture,\r\n        framebuffer: framebuffer,\r\n        getWidth: function () { return _width; },\r\n        getHeight: function () { return _height; },\r\n        bind: function () {\r\n            framebuffer.bind();\r\n        },\r\n        setSize: function (width, height) {\r\n            if (_width === width && _height === height) {\r\n                return;\r\n            }\r\n            _width = width;\r\n            _height = height;\r\n            targetTexture.define(_width, _height);\r\n            if (depthRenderbuffer)\r\n                depthRenderbuffer.setSize(_width, _height);\r\n        },\r\n        reset: function () {\r\n            init();\r\n        },\r\n        destroy: function () {\r\n            if (destroyed)\r\n                return;\r\n            targetTexture.destroy();\r\n            framebuffer.destroy();\r\n            if (depthRenderbuffer)\r\n                depthRenderbuffer.destroy();\r\n            destroyed = true;\r\n        }\r\n    };\r\n}\r\n//\r\nexport function createNullRenderTarget(gl) {\r\n    return {\r\n        id: getNextRenderTargetId(),\r\n        texture: createNullTexture(gl),\r\n        framebuffer: createNullFramebuffer(),\r\n        getWidth: function () { return 0; },\r\n        getHeight: function () { return 0; },\r\n        bind: function () {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        },\r\n        setSize: function () { },\r\n        reset: function () { },\r\n        destroy: function () { }\r\n    };\r\n}\r\n//# sourceMappingURL=render-target.js.map"]},"metadata":{},"sourceType":"module"}