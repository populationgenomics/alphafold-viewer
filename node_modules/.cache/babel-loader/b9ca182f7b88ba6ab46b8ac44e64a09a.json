{"ast":null,"code":"/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { GridLookup3D } from '../../../../mol-math/geometry';\nimport { SortedArray } from '../../../../mol-data/int';\nimport { getBoundary } from '../../../../mol-math/geometry/boundary';\nexport function calcUnitProteinTraceLookup3D(unit, unitProteinResidues) {\n  var _a = unit.model.atomicConformation,\n      x = _a.x,\n      y = _a.y,\n      z = _a.z;\n  var traceElementIndex = unit.model.atomicHierarchy.derived.residue.traceElementIndex;\n  var indices = new Uint32Array(unitProteinResidues.length);\n\n  for (var i = 0, il = unitProteinResidues.length; i < il; ++i) {\n    indices[i] = traceElementIndex[unitProteinResidues[i]];\n  }\n\n  var position = {\n    x: x,\n    y: y,\n    z: z,\n    indices: SortedArray.ofSortedArray(indices)\n  };\n  return GridLookup3D(position, getBoundary(position));\n}","map":{"version":3,"sources":["../../../../../src/mol-model-props/computed/secondary-structure/dssp/trace-lookup.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,YAAT,QAA6B,+BAA7B;AACA,SAAS,WAAT,QAA4B,0BAA5B;AAGA,SAAS,WAAT,QAA4B,wCAA5B;AAEA,OAAM,SAAU,4BAAV,CAAuC,IAAvC,EAA0D,mBAA1D,EAAwG;AACpG,MAAA,EAAA,GAAc,IAAI,CAAC,KAAL,CAAW,kBAAzB;AAAA,MAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,MAAK,CAAC,GAAA,EAAA,CAAA,CAAN;AAAA,MAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;AACE,MAAA,iBAAiB,GAAK,IAAI,CAAC,KAAL,CAAW,eAAX,CAA2B,OAA3B,CAAmC,OAAnC,CAAL,iBAAjB;AACR,MAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,mBAAmB,CAAC,MAApC,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,mBAAmB,CAAC,MAAzC,EAAiD,CAAC,GAAG,EAArD,EAAyD,EAAE,CAA3D,EAA8D;AAC1D,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,iBAAiB,CAAC,mBAAmB,CAAC,CAAD,CAApB,CAA9B;AACH;;AACD,MAAM,QAAQ,GAAG;AAAE,IAAA,CAAC,EAAA,CAAH;AAAK,IAAA,CAAC,EAAA,CAAN;AAAQ,IAAA,CAAC,EAAA,CAAT;AAAW,IAAA,OAAO,EAAE,WAAW,CAAC,aAAZ,CAA0B,OAA1B;AAApB,GAAjB;AACA,SAAO,YAAY,CAAC,QAAD,EAAW,WAAW,CAAC,QAAD,CAAtB,CAAnB;AACH","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { GridLookup3D } from '../../../../mol-math/geometry';\r\nimport { SortedArray } from '../../../../mol-data/int';\r\nimport { getBoundary } from '../../../../mol-math/geometry/boundary';\r\nexport function calcUnitProteinTraceLookup3D(unit, unitProteinResidues) {\r\n    var _a = unit.model.atomicConformation, x = _a.x, y = _a.y, z = _a.z;\r\n    var traceElementIndex = unit.model.atomicHierarchy.derived.residue.traceElementIndex;\r\n    var indices = new Uint32Array(unitProteinResidues.length);\r\n    for (var i = 0, il = unitProteinResidues.length; i < il; ++i) {\r\n        indices[i] = traceElementIndex[unitProteinResidues[i]];\r\n    }\r\n    var position = { x: x, y: y, z: z, indices: SortedArray.ofSortedArray(indices) };\r\n    return GridLookup3D(position, getBoundary(position));\r\n}\r\n//# sourceMappingURL=trace-lookup.js.map"]},"metadata":{},"sourceType":"module"}