{"ast":null,"code":"/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\nimport { StructureElement, Bond, Unit, Model } from '../../mol-model/structure';\nimport { SaccharideColors, MonosaccharidesColorTable } from '../../mol-model/structure/structure/carbohydrates/constants';\nimport { Color } from '../../mol-util/color';\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\nimport { TableLegend } from '../../mol-util/legend';\nvar DefaultColor = Color(0xCCCCCC);\nvar Description = 'Assigns colors according to the Symbol Nomenclature for Glycans (SNFG).';\nexport var CarbohydrateSymbolColorThemeParams = {};\nexport function getCarbohydrateSymbolColorThemeParams(ctx) {\n  return CarbohydrateSymbolColorThemeParams; // TODO return copy\n}\nexport function CarbohydrateSymbolColorTheme(ctx, props) {\n  var color;\n\n  if (ctx.structure) {\n    var _a = ctx.structure.carbohydrates,\n        elements_1 = _a.elements,\n        getElementIndices_1 = _a.getElementIndices;\n\n    var getColor_1 = function (unit, index) {\n      if (!Unit.isAtomic(unit)) return DefaultColor;\n      var carbs = getElementIndices_1(unit, index);\n      return carbs.length > 0 ? elements_1[carbs[0]].component.color : DefaultColor;\n    };\n\n    color = function (location, isSecondary) {\n      if (isSecondary) {\n        return SaccharideColors.Secondary;\n      } else {\n        if (StructureElement.Location.is(location)) {\n          return getColor_1(location.unit, location.element);\n        } else if (Bond.isLocation(location)) {\n          return getColor_1(location.aUnit, location.aUnit.elements[location.aIndex]);\n        }\n      }\n\n      return DefaultColor;\n    };\n  } else {\n    color = function () {\n      return DefaultColor;\n    };\n  }\n\n  return {\n    factory: CarbohydrateSymbolColorTheme,\n    granularity: 'group',\n    color: color,\n    props: props,\n    description: Description,\n    legend: TableLegend(MonosaccharidesColorTable)\n  };\n}\nexport var CarbohydrateSymbolColorThemeProvider = {\n  name: 'carbohydrate-symbol',\n  label: 'Carbohydrate Symbol',\n  category: \"Residue Property\"\n  /* Residue */\n  ,\n  factory: CarbohydrateSymbolColorTheme,\n  getParams: getCarbohydrateSymbolColorThemeParams,\n  defaultValues: PD.getDefaultValues(CarbohydrateSymbolColorThemeParams),\n  isApplicable: function (ctx) {\n    return !!ctx.structure && ctx.structure.models.some(function (m) {\n      return Model.hasCarbohydrate(m);\n    });\n  }\n};","map":{"version":3,"sources":["../../../src/mol-theme/color/carbohydrate-symbol.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * Copyright (c) 2018-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\r\n *\r\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\r\n */\r\nimport { StructureElement, Bond, Unit, Model } from '../../mol-model/structure';\r\nimport { SaccharideColors, MonosaccharidesColorTable } from '../../mol-model/structure/structure/carbohydrates/constants';\r\nimport { Color } from '../../mol-util/color';\r\nimport { ParamDefinition as PD } from '../../mol-util/param-definition';\r\nimport { TableLegend } from '../../mol-util/legend';\r\nvar DefaultColor = Color(0xCCCCCC);\r\nvar Description = 'Assigns colors according to the Symbol Nomenclature for Glycans (SNFG).';\r\nexport var CarbohydrateSymbolColorThemeParams = {};\r\nexport function getCarbohydrateSymbolColorThemeParams(ctx) {\r\n    return CarbohydrateSymbolColorThemeParams; // TODO return copy\r\n}\r\nexport function CarbohydrateSymbolColorTheme(ctx, props) {\r\n    var color;\r\n    if (ctx.structure) {\r\n        var _a = ctx.structure.carbohydrates, elements_1 = _a.elements, getElementIndices_1 = _a.getElementIndices;\r\n        var getColor_1 = function (unit, index) {\r\n            if (!Unit.isAtomic(unit))\r\n                return DefaultColor;\r\n            var carbs = getElementIndices_1(unit, index);\r\n            return carbs.length > 0 ? elements_1[carbs[0]].component.color : DefaultColor;\r\n        };\r\n        color = function (location, isSecondary) {\r\n            if (isSecondary) {\r\n                return SaccharideColors.Secondary;\r\n            }\r\n            else {\r\n                if (StructureElement.Location.is(location)) {\r\n                    return getColor_1(location.unit, location.element);\r\n                }\r\n                else if (Bond.isLocation(location)) {\r\n                    return getColor_1(location.aUnit, location.aUnit.elements[location.aIndex]);\r\n                }\r\n            }\r\n            return DefaultColor;\r\n        };\r\n    }\r\n    else {\r\n        color = function () { return DefaultColor; };\r\n    }\r\n    return {\r\n        factory: CarbohydrateSymbolColorTheme,\r\n        granularity: 'group',\r\n        color: color,\r\n        props: props,\r\n        description: Description,\r\n        legend: TableLegend(MonosaccharidesColorTable)\r\n    };\r\n}\r\nexport var CarbohydrateSymbolColorThemeProvider = {\r\n    name: 'carbohydrate-symbol',\r\n    label: 'Carbohydrate Symbol',\r\n    category: \"Residue Property\" /* Residue */,\r\n    factory: CarbohydrateSymbolColorTheme,\r\n    getParams: getCarbohydrateSymbolColorThemeParams,\r\n    defaultValues: PD.getDefaultValues(CarbohydrateSymbolColorThemeParams),\r\n    isApplicable: function (ctx) {\r\n        return !!ctx.structure && ctx.structure.models.some(function (m) { return Model.hasCarbohydrate(m); });\r\n    }\r\n};\r\n//# sourceMappingURL=carbohydrate-symbol.js.map"]},"metadata":{},"sourceType":"module"}